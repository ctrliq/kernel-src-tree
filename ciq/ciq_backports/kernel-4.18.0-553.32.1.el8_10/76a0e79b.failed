selinux,smack: don't bypass permissions check in inode_setsecctx hook

jira LE-2169
cve CVE-2024-46695
Rebuild_History Non-Buildable kernel-4.18.0-553.32.1.el8_10
commit-author Scott Mayhew <smayhew@redhat.com>
commit 76a0e79bc84f466999fa501fce5bf7a07641b8a7
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-553.32.1.el8_10/76a0e79b.failed

Marek Gresko reports that the root user on an NFS client is able to
change the security labels on files on an NFS filesystem that is
exported with root squashing enabled.

The end of the kerneldoc comment for __vfs_setxattr_noperm() states:

 *  This function requires the caller to lock the inode's i_mutex before it
 *  is executed. It also assumes that the caller will make the appropriate
 *  permission checks.

nfsd_setattr() does do permissions checking via fh_verify() and
nfsd_permission(), but those don't do all the same permissions checks
that are done by security_inode_setxattr() and its related LSM hooks do.

Since nfsd_setattr() is the only consumer of security_inode_setsecctx(),
simplest solution appears to be to replace the call to
__vfs_setxattr_noperm() with a call to __vfs_setxattr_locked().  This
fixes the above issue and has the added benefit of causing nfsd to
recall conflicting delegations on a file when a client tries to change
its security label.

	Cc: stable@kernel.org
	Reported-by: Marek Gresko <marek.gresko@protonmail.com>
Link: https://bugzilla.kernel.org/show_bug.cgi?id=218809
	Signed-off-by: Scott Mayhew <smayhew@redhat.com>
	Tested-by: Stephen Smalley <stephen.smalley.work@gmail.com>
	Reviewed-by: Stephen Smalley <stephen.smalley.work@gmail.com>
	Reviewed-by: Chuck Lever <chuck.lever@oracle.com>
	Reviewed-by: Jeff Layton <jlayton@kernel.org>
	Acked-by: Casey Schaufler <casey@schaufler-ca.com>
	Signed-off-by: Paul Moore <paul@paul-moore.com>
(cherry picked from commit 76a0e79bc84f466999fa501fce5bf7a07641b8a7)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	security/selinux/hooks.c
#	security/smack/smack_lsm.c
diff --cc security/selinux/hooks.c
index 3546206249fa,90afdfc48c0f..000000000000
--- a/security/selinux/hooks.c
+++ b/security/selinux/hooks.c
@@@ -6550,7 -6650,8 +6550,12 @@@ static int selinux_inode_notifysecctx(s
   */
  static int selinux_inode_setsecctx(struct dentry *dentry, void *ctx, u32 ctxlen)
  {
++<<<<<<< HEAD
 +	return __vfs_setxattr_noperm(dentry, XATTR_NAME_SELINUX, ctx, ctxlen, 0);
++=======
+ 	return __vfs_setxattr_locked(&nop_mnt_idmap, dentry, XATTR_NAME_SELINUX,
+ 				     ctx, ctxlen, 0, NULL);
++>>>>>>> 76a0e79bc84f (selinux,smack: don't bypass permissions check in inode_setsecctx hook)
  }
  
  static int selinux_inode_getsecctx(struct inode *inode, void **ctx, u32 *ctxlen)
diff --cc security/smack/smack_lsm.c
index 8980142e168e,002a1b9ed83a..000000000000
--- a/security/smack/smack_lsm.c
+++ b/security/smack/smack_lsm.c
@@@ -4550,7 -4880,8 +4550,12 @@@ static int smack_inode_notifysecctx(str
  
  static int smack_inode_setsecctx(struct dentry *dentry, void *ctx, u32 ctxlen)
  {
++<<<<<<< HEAD
 +	return __vfs_setxattr_noperm(dentry, XATTR_NAME_SMACK, ctx, ctxlen, 0);
++=======
+ 	return __vfs_setxattr_locked(&nop_mnt_idmap, dentry, XATTR_NAME_SMACK,
+ 				     ctx, ctxlen, 0, NULL);
++>>>>>>> 76a0e79bc84f (selinux,smack: don't bypass permissions check in inode_setsecctx hook)
  }
  
  static int smack_inode_getsecctx(struct inode *inode, void **ctx, u32 *ctxlen)
* Unmerged path security/selinux/hooks.c
* Unmerged path security/smack/smack_lsm.c
