scsi: lpfc: Remove reftag check in DIF paths

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-513.el8
commit-author Justin Tee <justin.tee@broadcom.com>
commit 8eebf0e84f0614cebc7347f7bbccba4056d77d42
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-513.el8/8eebf0e8.failed

When preparing protection DIF I/O for DMA, the driver obtains reference
tags from scsi_prot_ref_tag().  Previously, there was a wrong assumption
that an all 0xffffffff value meant error and thus the driver failed the
I/O.  This patch removes the evaluation code and accepts whatever the upper
layer returns.

	Signed-off-by: Justin Tee <justin.tee@broadcom.com>
Link: https://lore.kernel.org/r/20230803211932.155745-1-justintee8345@gmail.com
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit 8eebf0e84f0614cebc7347f7bbccba4056d77d42)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/lpfc/lpfc_scsi.c
diff --cc drivers/scsi/lpfc/lpfc_scsi.c
index 32b89ee566f9,d26941b131fd..000000000000
--- a/drivers/scsi/lpfc/lpfc_scsi.c
+++ b/drivers/scsi/lpfc/lpfc_scsi.c
@@@ -141,64 -109,6 +141,62 @@@ lpfc_sli4_set_rsp_sgl_last(struct lpfc_
  	}
  }
  
- #define LPFC_INVALID_REFTAG ((u32)-1)
- 
 +/**
 + * lpfc_update_stats - Update statistical data for the command completion
 + * @vport: The virtual port on which this call is executing.
 + * @lpfc_cmd: lpfc scsi command object pointer.
 + *
 + * This function is called when there is a command completion and this
 + * function updates the statistical data for the command completion.
 + **/
 +static void
 +lpfc_update_stats(struct lpfc_vport *vport, struct lpfc_io_buf *lpfc_cmd)
 +{
 +	struct lpfc_hba *phba = vport->phba;
 +	struct lpfc_rport_data *rdata;
 +	struct lpfc_nodelist *pnode;
 +	struct scsi_cmnd *cmd = lpfc_cmd->pCmd;
 +	unsigned long flags;
 +	struct Scsi_Host *shost = lpfc_shost_from_vport(vport);
 +	unsigned long latency;
 +	int i;
 +
 +	if (!vport->stat_data_enabled ||
 +	    vport->stat_data_blocked ||
 +	    (cmd->result))
 +		return;
 +
 +	latency = jiffies_to_msecs((long)jiffies - (long)lpfc_cmd->start_time);
 +	rdata = lpfc_cmd->rdata;
 +	pnode = rdata->pnode;
 +
 +	spin_lock_irqsave(shost->host_lock, flags);
 +	if (!pnode ||
 +	    !pnode->lat_data ||
 +	    (phba->bucket_type == LPFC_NO_BUCKET)) {
 +		spin_unlock_irqrestore(shost->host_lock, flags);
 +		return;
 +	}
 +
 +	if (phba->bucket_type == LPFC_LINEAR_BUCKET) {
 +		i = (latency + phba->bucket_step - 1 - phba->bucket_base)/
 +			phba->bucket_step;
 +		/* check array subscript bounds */
 +		if (i < 0)
 +			i = 0;
 +		else if (i >= LPFC_MAX_BUCKET_COUNT)
 +			i = LPFC_MAX_BUCKET_COUNT - 1;
 +	} else {
 +		for (i = 0; i < LPFC_MAX_BUCKET_COUNT-1; i++)
 +			if (latency <= (phba->bucket_base +
 +				((1<<i)*phba->bucket_step)))
 +				break;
 +	}
 +
 +	pnode->lat_data[i].cmd_count++;
 +	spin_unlock_irqrestore(shost->host_lock, flags);
 +}
 +
  /**
   * lpfc_rampdown_queue_depth - Post RAMP_DOWN_QUEUE event to worker thread
   * @phba: The Hba for which this call is being executed.
@@@ -1065,9 -975,7 +1063,13 @@@ lpfc_bg_err_inject(struct lpfc_hba *phb
  		return 0;
  
  	sgpe = scsi_prot_sglist(sc);
++<<<<<<< HEAD
 +	lba = t10_pi_ref_tag(sc->request);
 +	if (lba == LPFC_INVALID_REFTAG)
 +		return 0;
++=======
+ 	lba = scsi_prot_ref_tag(sc);
++>>>>>>> 8eebf0e84f06 (scsi: lpfc: Remove reftag check in DIF paths)
  
  	/* First check if we need to match the LBA */
  	if (phba->lpfc_injerr_lba != LPFC_INJERR_LBA_OFF) {
@@@ -1647,9 -1555,7 +1649,13 @@@ lpfc_bg_setup_bpl(struct lpfc_hba *phba
  		goto out;
  
  	/* extract some info from the scsi command for pde*/
++<<<<<<< HEAD
 +	reftag = t10_pi_ref_tag(sc->request);
 +	if (reftag == LPFC_INVALID_REFTAG)
 +		goto out;
++=======
+ 	reftag = scsi_prot_ref_tag(sc);
++>>>>>>> 8eebf0e84f06 (scsi: lpfc: Remove reftag check in DIF paths)
  
  #ifdef CONFIG_SCSI_LPFC_DEBUG_FS
  	rc = lpfc_bg_err_inject(phba, sc, &reftag, NULL, 1);
@@@ -1809,10 -1715,8 +1815,15 @@@ lpfc_bg_setup_bpl_prot(struct lpfc_hba 
  		goto out;
  
  	/* extract some info from the scsi command */
++<<<<<<< HEAD
 +	blksize = lpfc_cmd_blksize(sc);
 +	reftag = t10_pi_ref_tag(sc->request);
 +	if (reftag == LPFC_INVALID_REFTAG)
 +		goto out;
++=======
+ 	blksize = scsi_prot_interval(sc);
+ 	reftag = scsi_prot_ref_tag(sc);
++>>>>>>> 8eebf0e84f06 (scsi: lpfc: Remove reftag check in DIF paths)
  
  #ifdef CONFIG_SCSI_LPFC_DEBUG_FS
  	rc = lpfc_bg_err_inject(phba, sc, &reftag, NULL, 1);
@@@ -2041,9 -1944,7 +2052,13 @@@ lpfc_bg_setup_sgl(struct lpfc_hba *phba
  		goto out;
  
  	/* extract some info from the scsi command for pde*/
++<<<<<<< HEAD
 +	reftag = t10_pi_ref_tag(sc->request);
 +	if (reftag == LPFC_INVALID_REFTAG)
 +		goto out;
++=======
+ 	reftag = scsi_prot_ref_tag(sc);
++>>>>>>> 8eebf0e84f06 (scsi: lpfc: Remove reftag check in DIF paths)
  
  #ifdef CONFIG_SCSI_LPFC_DEBUG_FS
  	rc = lpfc_bg_err_inject(phba, sc, &reftag, NULL, 1);
@@@ -2241,10 -2142,8 +2256,15 @@@ lpfc_bg_setup_sgl_prot(struct lpfc_hba 
  		goto out;
  
  	/* extract some info from the scsi command */
++<<<<<<< HEAD
 +	blksize = lpfc_cmd_blksize(sc);
 +	reftag = t10_pi_ref_tag(sc->request);
 +	if (reftag == LPFC_INVALID_REFTAG)
 +		goto out;
++=======
+ 	blksize = scsi_prot_interval(sc);
+ 	reftag = scsi_prot_ref_tag(sc);
++>>>>>>> 8eebf0e84f06 (scsi: lpfc: Remove reftag check in DIF paths)
  
  #ifdef CONFIG_SCSI_LPFC_DEBUG_FS
  	rc = lpfc_bg_err_inject(phba, sc, &reftag, NULL, 1);
@@@ -2836,9 -2733,7 +2856,13 @@@ lpfc_calc_bg_err(struct lpfc_hba *phba
  			chk_guard = 1;
  
  		src = (struct scsi_dif_tuple *)sg_virt(sgpe);
++<<<<<<< HEAD
 +		start_ref_tag = t10_pi_ref_tag(cmd->request);
 +		if (start_ref_tag == LPFC_INVALID_REFTAG)
 +			goto out;
++=======
+ 		start_ref_tag = scsi_prot_ref_tag(cmd);
++>>>>>>> 8eebf0e84f06 (scsi: lpfc: Remove reftag check in DIF paths)
  		start_app_tag = src->app_tag;
  		len = sgpe->length;
  		while (src && protsegcnt) {
* Unmerged path drivers/scsi/lpfc/lpfc_scsi.c
