scsi: lpfc: Make fabric zone discovery more robust when handling unsolicited LOGO

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-513.el8
commit-author Justin Tee <justin.tee@broadcom.com>
commit 9388da30376670613d7b8031e6d62b0b6ce08228
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-513.el8/9388da30.failed

This patch provides better target rport recovery when a target rport is
running in initiator mode to discover the fabric.  Such a target will issue
a LOGO before switching back to strict target mode and changes are made to
recover the login.  Log messages are also updated accordingly.

	Signed-off-by: Justin Tee <justin.tee@broadcom.com>
Link: https://lore.kernel.org/r/20230712180522.112722-8-justintee8345@gmail.com
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit 9388da30376670613d7b8031e6d62b0b6ce08228)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/lpfc/lpfc_els.c
#	drivers/scsi/lpfc/lpfc_nportdisc.c
diff --cc drivers/scsi/lpfc/lpfc_els.c
index 3fad23b884d4,f37757449f3c..000000000000
--- a/drivers/scsi/lpfc/lpfc_els.c
+++ b/drivers/scsi/lpfc/lpfc_els.c
@@@ -2375,24 -2376,26 +2375,39 @@@ lpfc_cmpl_els_prli(struct lpfc_hba *phb
  		/* PRLI failed */
  		lpfc_printf_vlog(vport, mode, loglevel,
  				 "2754 PRLI failure DID:%06X Status:x%x/x%x, "
++<<<<<<< HEAD
 +				 "data: x%x x%x\n",
 +				 ndlp->nlp_DID, irsp->ulpStatus,
 +				 irsp->un.ulpWord[4],
 +				 ndlp->nlp_state, ndlp->fc4_prli_sent);
++=======
+ 				 "data: x%x x%x x%x\n",
+ 				 ndlp->nlp_DID, ulp_status,
+ 				 ulp_word4, ndlp->nlp_state,
+ 				 ndlp->fc4_prli_sent, ndlp->nlp_flag);
++>>>>>>> 9388da303766 (scsi: lpfc: Make fabric zone discovery more robust when handling unsolicited LOGO)
  
  		/* Do not call DSM for lpfc_els_abort'ed ELS cmds */
 -		if (!lpfc_error_lost_link(vport, ulp_status, ulp_word4))
 +		if (!lpfc_error_lost_link(irsp))
  			lpfc_disc_state_machine(vport, ndlp, cmdiocb,
  						NLP_EVT_CMPL_PRLI);
  
  		/* The following condition catches an inflight transition
  		 * mismatch typically caused by an RSCN. Skip any
  		 * processing to allow recovery.
++<<<<<<< HEAD
 +		*/
 +		if (ndlp->nlp_state >= NLP_STE_PLOGI_ISSUE &&
 +		    ndlp->nlp_state <= NLP_STE_REG_LOGIN_ISSUE) {
++=======
+ 		 */
+ 		if ((ndlp->nlp_state >= NLP_STE_PLOGI_ISSUE &&
+ 		     ndlp->nlp_state <= NLP_STE_REG_LOGIN_ISSUE) ||
+ 		    (ndlp->nlp_state == NLP_STE_NPR_NODE &&
+ 		     ndlp->nlp_flag & NLP_DELAY_TMO)) {
++>>>>>>> 9388da303766 (scsi: lpfc: Make fabric zone discovery more robust when handling unsolicited LOGO)
  			lpfc_printf_vlog(vport, KERN_WARNING, LOG_NODE,
- 					 "2784 PRLI cmpl: state mismatch "
+ 					 "2784 PRLI cmpl: Allow Node recovery "
  					 "DID x%06x nstate x%x nflag x%x\n",
  					 ndlp->nlp_DID, ndlp->nlp_state,
  					 ndlp->nlp_flag);
diff --cc drivers/scsi/lpfc/lpfc_nportdisc.c
index 04795ea2fd70,8f6424487397..000000000000
--- a/drivers/scsi/lpfc/lpfc_nportdisc.c
+++ b/drivers/scsi/lpfc/lpfc_nportdisc.c
@@@ -1834,8 -1865,6 +1845,11 @@@ lpfc_rcv_logo_reglogin_issue(struct lpf
  	struct lpfc_iocbq *cmdiocb = (struct lpfc_iocbq *) arg;
  	LPFC_MBOXQ_t	  *mb;
  	LPFC_MBOXQ_t	  *nextmb;
++<<<<<<< HEAD
 +	struct lpfc_dmabuf *mp;
 +	struct lpfc_nodelist *ns_ndlp;
++=======
++>>>>>>> 9388da303766 (scsi: lpfc: Make fabric zone discovery more robust when handling unsolicited LOGO)
  
  	cmdiocb = (struct lpfc_iocbq *) arg;
  
diff --git a/drivers/scsi/lpfc/lpfc_ct.c b/drivers/scsi/lpfc/lpfc_ct.c
index 3fbbc8772c18..0e19b9cd9a0a 100644
--- a/drivers/scsi/lpfc/lpfc_ct.c
+++ b/drivers/scsi/lpfc/lpfc_ct.c
@@ -1580,7 +1580,8 @@ lpfc_cmpl_ct_cmd_gft_id(struct lpfc_hba *phba, struct lpfc_iocbq *cmdiocb,
 				ndlp->nlp_fc4_type |= NLP_FC4_FCP;
 			if (fc4_data_1 &  LPFC_FC4_TYPE_BITMASK)
 				ndlp->nlp_fc4_type |= NLP_FC4_NVME;
-			lpfc_printf_vlog(vport, KERN_INFO, LOG_DISCOVERY,
+			lpfc_printf_vlog(vport, KERN_INFO,
+					 LOG_DISCOVERY | LOG_NODE,
 					 "3064 Setting ndlp x%px, DID x%06x "
 					 "with FC4 x%08x, Data: x%08x x%08x "
 					 "%d\n",
@@ -1591,14 +1592,21 @@ lpfc_cmpl_ct_cmd_gft_id(struct lpfc_hba *phba, struct lpfc_iocbq *cmdiocb,
 			if (ndlp->nlp_state == NLP_STE_REG_LOGIN_ISSUE &&
 			    ndlp->nlp_fc4_type) {
 				ndlp->nlp_prev_state = NLP_STE_REG_LOGIN_ISSUE;
-
-				lpfc_nlp_set_state(vport, ndlp,
-						   NLP_STE_PRLI_ISSUE);
-				lpfc_issue_els_prli(vport, ndlp, 0);
+				/* This is a fabric topology so if discovery
+				 * started with an unsolicited PLOGI, don't
+				 * send a PRLI.  Targets don't issue PLOGI or
+				 * PRLI when acting as a target. Likely this is
+				 * an initiator function.
+				 */
+				if (!(ndlp->nlp_flag & NLP_RCV_PLOGI)) {
+					lpfc_nlp_set_state(vport, ndlp,
+							   NLP_STE_PRLI_ISSUE);
+					lpfc_issue_els_prli(vport, ndlp, 0);
+				}
 			} else if (!ndlp->nlp_fc4_type) {
 				/* If fc4 type is still unknown, then LOGO */
 				lpfc_printf_vlog(vport, KERN_INFO,
-						 LOG_DISCOVERY,
+						 LOG_DISCOVERY | LOG_NODE,
 						 "6443 Sending LOGO ndlp x%px,"
 						 "DID x%06x with fc4_type: "
 						 "x%08x, state: %d\n",
* Unmerged path drivers/scsi/lpfc/lpfc_els.c
* Unmerged path drivers/scsi/lpfc/lpfc_nportdisc.c
