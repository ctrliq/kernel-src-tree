wifi: mac80211: remove ieee80211_tx_status_8023

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-512.el8
commit-author Felix Fietkau <nbd@nbd.name>
commit 9ae708f00161e1d789268fa9cc05bf6bec2af474
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-512.el8/9ae708f0.failed

It is unused and should not be used. In order to avoid limitations in
4-address mode, the driver should always use ieee80211_tx_status_ext for
802.3 frames with a valid sta pointer.

	Signed-off-by: Felix Fietkau <nbd@nbd.name>
Link: https://lore.kernel.org/r/20230417133751.79160-1-nbd@nbd.name
	Signed-off-by: Johannes Berg <johannes.berg@intel.com>
(cherry picked from commit 9ae708f00161e1d789268fa9cc05bf6bec2af474)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/net/mac80211.h
diff --cc include/net/mac80211.h
index 37d3424d208a,ac0370e76874..000000000000
--- a/include/net/mac80211.h
+++ b/include/net/mac80211.h
@@@ -5200,26 -5216,6 +5200,29 @@@ void ieee80211_tx_status_irqsafe(struc
  				 struct sk_buff *skb);
  
  /**
++<<<<<<< HEAD
 + * ieee80211_tx_status_8023 - transmit status callback for 802.3 frame format
 + *
 + * Call this function for all transmitted data frames after their transmit
 + * completion. This callback should only be called for data frames which
 + * are are using driver's (or hardware's) offload capability of encap/decap
 + * 802.11 frames.
 + *
 + * This function may not be called in IRQ context. Calls to this function
 + * for a single hardware must be synchronized against each other and all
 + * calls in the same tx status family.
 + *
 + * @hw: the hardware the frame was transmitted by
 + * @vif: the interface for which the frame was transmitted
 + * @skb: the frame that was transmitted, owned by mac80211 after this call
 + */
 +void ieee80211_tx_status_8023(struct ieee80211_hw *hw,
 +			       struct ieee80211_vif *vif,
 +			       struct sk_buff *skb);
 +
 +/**
++=======
++>>>>>>> 9ae708f00161 (wifi: mac80211: remove ieee80211_tx_status_8023)
   * ieee80211_report_low_ack - report non-responding station
   *
   * When operating in AP-mode, call this function to report a non-responding
* Unmerged path include/net/mac80211.h
diff --git a/net/mac80211/status.c b/net/mac80211/status.c
index 3f9ddd7f04b6..2b13a52ce96c 100644
--- a/net/mac80211/status.c
+++ b/net/mac80211/status.c
@@ -1244,30 +1244,6 @@ void ieee80211_tx_rate_update(struct ieee80211_hw *hw,
 }
 EXPORT_SYMBOL(ieee80211_tx_rate_update);
 
-void ieee80211_tx_status_8023(struct ieee80211_hw *hw,
-			      struct ieee80211_vif *vif,
-			      struct sk_buff *skb)
-{
-	struct ieee80211_sub_if_data *sdata;
-	struct ieee80211_tx_status status = {
-		.skb = skb,
-		.info = IEEE80211_SKB_CB(skb),
-	};
-	struct sta_info *sta;
-
-	sdata = vif_to_sdata(vif);
-
-	rcu_read_lock();
-
-	if (!ieee80211_lookup_ra_sta(sdata, skb, &sta) && !IS_ERR(sta))
-		status.sta = &sta->sta;
-
-	ieee80211_tx_status_ext(hw, &status);
-
-	rcu_read_unlock();
-}
-EXPORT_SYMBOL(ieee80211_tx_status_8023);
-
 void ieee80211_report_low_ack(struct ieee80211_sta *pubsta, u32 num_packets)
 {
 	struct sta_info *sta = container_of(pubsta, struct sta_info, sta);
