wifi: mac80211_hwsim: fix potential NULL deref in hwsim_pmsr_report_nl()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-512.el8
commit-author Eric Dumazet <edumazet@google.com>
commit 2bef4d1fb8b3401d70f28e5d62380a25cefc9d3e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-512.el8/2bef4d1f.failed

syzbot reported a NULL dereference caused by a missing check
in hwsim_pmsr_report_nl(), and bisected the issue to cited commit.

v2: test the nlattr before using nla_data() on it (Simon Horman)

general protection fault, probably for non-canonical address 0xdffffc0000000001: 0000 [#1] PREEMPT SMP KASAN
KASAN: null-ptr-deref in range [0x0000000000000008-0x000000000000000f]
CPU: 0 PID: 5084 Comm: syz-executor104 Not tainted 6.3.0-rc4-next-20230331-syzkaller #0
Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 03/02/2023
RIP: 0010:jhash+0x339/0x610 include/linux/jhash.h:95
Code: 83 fd 01 0f 84 5f ff ff ff eb de 83 fd 05 74 3a e8 ac f5 71 fd 48 8d 7b 05 48 b8 00 00 00 00 00 fc ff df 48 89 fa 48 c1 ea 03 <0f> b6 04 02 48 89 fa 83 e2 07 38 d0 7f 08 84 c0 0f 85 96 02 00 00
RSP: 0018:ffffc90003abf298 EFLAGS: 00010202
RAX: dffffc0000000000 RBX: 0000000000000004 RCX: 0000000000000000
RDX: 0000000000000001 RSI: ffffffff84111ba4 RDI: 0000000000000009
RBP: 0000000000000006 R08: 0000000000000005 R09: 000000000000000c
R10: 0000000000000006 R11: 0000000000000000 R12: 000000004d2c27cd
R13: 000000002bd9e6c2 R14: 000000002bd9e6c2 R15: 000000002bd9e6c2
FS: 0000555556847300(0000) GS:ffff8880b9800000(0000) knlGS:0000000000000000
CS: 0010 DS: 0000 ES: 0000 CR0: 0000000080050033
CR2: 000000000045ad50 CR3: 0000000078aa6000 CR4: 00000000003506f0
DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
Call Trace:
<TASK>
rht_key_hashfn include/linux/rhashtable.h:159 [inline]
__rhashtable_lookup include/linux/rhashtable.h:604 [inline]
rhashtable_lookup include/linux/rhashtable.h:646 [inline]
rhashtable_lookup_fast include/linux/rhashtable.h:672 [inline]
get_hwsim_data_ref_from_addr+0xb9/0x600 drivers/net/wireless/virtual/mac80211_hwsim.c:757
hwsim_pmsr_report_nl+0xe7/0xd50 drivers/net/wireless/virtual/mac80211_hwsim.c:3764
genl_family_rcv_msg_doit.isra.0+0x1e6/0x2d0 net/netlink/genetlink.c:968
genl_family_rcv_msg net/netlink/genetlink.c:1048 [inline]
genl_rcv_msg+0x4ff/0x7e0 net/netlink/genetlink.c:1065
netlink_rcv_skb+0x165/0x440 net/netlink/af_netlink.c:2572
genl_rcv+0x28/0x40 net/netlink/genetlink.c:1076
netlink_unicast_kernel net/netlink/af_netlink.c:1339 [inline]
netlink_unicast+0x547/0x7f0 net/netlink/af_netlink.c:1365
netlink_sendmsg+0x925/0xe30 net/netlink/af_netlink.c:1942
sock_sendmsg_nosec net/socket.c:724 [inline]
sock_sendmsg+0xde/0x190 net/socket.c:747
____sys_sendmsg+0x71c/0x900 net/socket.c:2501
___sys_sendmsg+0x110/0x1b0 net/socket.c:2555
__sys_sendmsg+0xf7/0x1c0 net/socket.c:2584
do_syscall_x64 arch/x86/entry/common.c:50 [inline]
do_syscall_64+0x39/0xb0 arch/x86/entry/common.c:80
entry_SYSCALL_64_after_hwframe+0x63/0xcd

Fixes: 2af3b2a631b1 ("mac80211_hwsim: add PMSR report support via virtio")
	Reported-by: syzbot <syzkaller@googlegroups.com>
	Signed-off-by: Eric Dumazet <edumazet@google.com>
	Cc: Jaewan Kim <jaewan@google.com>
	Cc: Johannes Berg <johannes.berg@intel.com>
	Reviewed-by: Simon Horman <simon.horman@corigine.com>
	Reviewed-by: Jaewan Kim <jaewan@google.com>
Link: https://lore.kernel.org/r/20230404171658.917361-1-edumazet@google.com
	Signed-off-by: Johannes Berg <johannes.berg@intel.com>
(cherry picked from commit 2bef4d1fb8b3401d70f28e5d62380a25cefc9d3e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/wireless/mac80211_hwsim.c
diff --cc drivers/net/wireless/mac80211_hwsim.c
index a9eb8b9108dd,2211fa58fe41..000000000000
--- a/drivers/net/wireless/mac80211_hwsim.c
+++ b/drivers/net/wireless/mac80211_hwsim.c
@@@ -3438,6 -3514,300 +3438,303 @@@ out
  	mutex_unlock(&data->mutex);
  }
  
++<<<<<<< HEAD:drivers/net/wireless/mac80211_hwsim.c
++=======
+ static int mac80211_hwsim_parse_rate_info(struct nlattr *rateattr,
+ 					  struct rate_info *rate_info,
+ 					  struct genl_info *info)
+ {
+ 	struct nlattr *tb[HWSIM_RATE_INFO_ATTR_MAX + 1];
+ 	int ret;
+ 
+ 	ret = nla_parse_nested(tb, HWSIM_RATE_INFO_ATTR_MAX,
+ 			       rateattr, hwsim_rate_info_policy, info->extack);
+ 	if (ret)
+ 		return ret;
+ 
+ 	if (tb[HWSIM_RATE_INFO_ATTR_FLAGS])
+ 		rate_info->flags = nla_get_u8(tb[HWSIM_RATE_INFO_ATTR_FLAGS]);
+ 
+ 	if (tb[HWSIM_RATE_INFO_ATTR_MCS])
+ 		rate_info->mcs = nla_get_u8(tb[HWSIM_RATE_INFO_ATTR_MCS]);
+ 
+ 	if (tb[HWSIM_RATE_INFO_ATTR_LEGACY])
+ 		rate_info->legacy = nla_get_u16(tb[HWSIM_RATE_INFO_ATTR_LEGACY]);
+ 
+ 	if (tb[HWSIM_RATE_INFO_ATTR_NSS])
+ 		rate_info->nss = nla_get_u8(tb[HWSIM_RATE_INFO_ATTR_NSS]);
+ 
+ 	if (tb[HWSIM_RATE_INFO_ATTR_BW])
+ 		rate_info->bw = nla_get_u8(tb[HWSIM_RATE_INFO_ATTR_BW]);
+ 
+ 	if (tb[HWSIM_RATE_INFO_ATTR_HE_GI])
+ 		rate_info->he_gi = nla_get_u8(tb[HWSIM_RATE_INFO_ATTR_HE_GI]);
+ 
+ 	if (tb[HWSIM_RATE_INFO_ATTR_HE_DCM])
+ 		rate_info->he_dcm = nla_get_u8(tb[HWSIM_RATE_INFO_ATTR_HE_DCM]);
+ 
+ 	if (tb[HWSIM_RATE_INFO_ATTR_HE_RU_ALLOC])
+ 		rate_info->he_ru_alloc =
+ 			nla_get_u8(tb[HWSIM_RATE_INFO_ATTR_HE_RU_ALLOC]);
+ 
+ 	if (tb[HWSIM_RATE_INFO_ATTR_N_BOUNDED_CH])
+ 		rate_info->n_bonded_ch = nla_get_u8(tb[HWSIM_RATE_INFO_ATTR_N_BOUNDED_CH]);
+ 
+ 	if (tb[HWSIM_RATE_INFO_ATTR_EHT_GI])
+ 		rate_info->eht_gi = nla_get_u8(tb[HWSIM_RATE_INFO_ATTR_EHT_GI]);
+ 
+ 	if (tb[HWSIM_RATE_INFO_ATTR_EHT_RU_ALLOC])
+ 		rate_info->eht_ru_alloc = nla_get_u8(tb[HWSIM_RATE_INFO_ATTR_EHT_RU_ALLOC]);
+ 
+ 	return 0;
+ }
+ 
+ static int mac80211_hwsim_parse_ftm_result(struct nlattr *ftm,
+ 					   struct cfg80211_pmsr_ftm_result *result,
+ 					   struct genl_info *info)
+ {
+ 	struct nlattr *tb[NL80211_PMSR_FTM_RESP_ATTR_MAX + 1];
+ 	int ret;
+ 
+ 	ret = nla_parse_nested(tb, NL80211_PMSR_FTM_RESP_ATTR_MAX,
+ 			       ftm, hwsim_ftm_result_policy, info->extack);
+ 	if (ret)
+ 		return ret;
+ 
+ 	if (tb[NL80211_PMSR_FTM_RESP_ATTR_FAIL_REASON])
+ 		result->failure_reason = nla_get_u32(tb[NL80211_PMSR_FTM_RESP_ATTR_FAIL_REASON]);
+ 
+ 	if (tb[NL80211_PMSR_FTM_RESP_ATTR_BURST_INDEX])
+ 		result->burst_index = nla_get_u16(tb[NL80211_PMSR_FTM_RESP_ATTR_BURST_INDEX]);
+ 
+ 	if (tb[NL80211_PMSR_FTM_RESP_ATTR_NUM_FTMR_ATTEMPTS]) {
+ 		result->num_ftmr_attempts_valid = 1;
+ 		result->num_ftmr_attempts =
+ 			nla_get_u32(tb[NL80211_PMSR_FTM_RESP_ATTR_NUM_FTMR_ATTEMPTS]);
+ 	}
+ 
+ 	if (tb[NL80211_PMSR_FTM_RESP_ATTR_NUM_FTMR_SUCCESSES]) {
+ 		result->num_ftmr_successes_valid = 1;
+ 		result->num_ftmr_successes =
+ 			nla_get_u32(tb[NL80211_PMSR_FTM_RESP_ATTR_NUM_FTMR_SUCCESSES]);
+ 	}
+ 
+ 	if (tb[NL80211_PMSR_FTM_RESP_ATTR_BUSY_RETRY_TIME])
+ 		result->busy_retry_time =
+ 			nla_get_u8(tb[NL80211_PMSR_FTM_RESP_ATTR_BUSY_RETRY_TIME]);
+ 
+ 	if (tb[NL80211_PMSR_FTM_RESP_ATTR_NUM_BURSTS_EXP])
+ 		result->num_bursts_exp = nla_get_u8(tb[NL80211_PMSR_FTM_RESP_ATTR_NUM_BURSTS_EXP]);
+ 
+ 	if (tb[NL80211_PMSR_FTM_RESP_ATTR_BURST_DURATION])
+ 		result->burst_duration = nla_get_u8(tb[NL80211_PMSR_FTM_RESP_ATTR_BURST_DURATION]);
+ 
+ 	if (tb[NL80211_PMSR_FTM_RESP_ATTR_FTMS_PER_BURST])
+ 		result->ftms_per_burst = nla_get_u8(tb[NL80211_PMSR_FTM_RESP_ATTR_FTMS_PER_BURST]);
+ 
+ 	if (tb[NL80211_PMSR_FTM_RESP_ATTR_RSSI_AVG]) {
+ 		result->rssi_avg_valid = 1;
+ 		result->rssi_avg = nla_get_s32(tb[NL80211_PMSR_FTM_RESP_ATTR_RSSI_AVG]);
+ 	}
+ 	if (tb[NL80211_PMSR_FTM_RESP_ATTR_RSSI_SPREAD]) {
+ 		result->rssi_spread_valid = 1;
+ 		result->rssi_spread =
+ 			nla_get_s32(tb[NL80211_PMSR_FTM_RESP_ATTR_RSSI_SPREAD]);
+ 	}
+ 
+ 	if (tb[NL80211_PMSR_FTM_RESP_ATTR_TX_RATE]) {
+ 		result->tx_rate_valid = 1;
+ 		ret = mac80211_hwsim_parse_rate_info(tb[NL80211_PMSR_FTM_RESP_ATTR_TX_RATE],
+ 						     &result->tx_rate, info);
+ 		if (ret)
+ 			return ret;
+ 	}
+ 
+ 	if (tb[NL80211_PMSR_FTM_RESP_ATTR_RX_RATE]) {
+ 		result->rx_rate_valid = 1;
+ 		ret = mac80211_hwsim_parse_rate_info(tb[NL80211_PMSR_FTM_RESP_ATTR_RX_RATE],
+ 						     &result->rx_rate, info);
+ 		if (ret)
+ 			return ret;
+ 	}
+ 
+ 	if (tb[NL80211_PMSR_FTM_RESP_ATTR_RTT_AVG]) {
+ 		result->rtt_avg_valid = 1;
+ 		result->rtt_avg =
+ 			nla_get_u64(tb[NL80211_PMSR_FTM_RESP_ATTR_RTT_AVG]);
+ 	}
+ 	if (tb[NL80211_PMSR_FTM_RESP_ATTR_RTT_VARIANCE]) {
+ 		result->rtt_variance_valid = 1;
+ 		result->rtt_variance =
+ 			nla_get_u64(tb[NL80211_PMSR_FTM_RESP_ATTR_RTT_VARIANCE]);
+ 	}
+ 	if (tb[NL80211_PMSR_FTM_RESP_ATTR_RTT_SPREAD]) {
+ 		result->rtt_spread_valid = 1;
+ 		result->rtt_spread =
+ 			nla_get_u64(tb[NL80211_PMSR_FTM_RESP_ATTR_RTT_SPREAD]);
+ 	}
+ 	if (tb[NL80211_PMSR_FTM_RESP_ATTR_DIST_AVG]) {
+ 		result->dist_avg_valid = 1;
+ 		result->dist_avg =
+ 			nla_get_u64(tb[NL80211_PMSR_FTM_RESP_ATTR_DIST_AVG]);
+ 	}
+ 	if (tb[NL80211_PMSR_FTM_RESP_ATTR_DIST_VARIANCE]) {
+ 		result->dist_variance_valid = 1;
+ 		result->dist_variance =
+ 			nla_get_u64(tb[NL80211_PMSR_FTM_RESP_ATTR_DIST_VARIANCE]);
+ 	}
+ 	if (tb[NL80211_PMSR_FTM_RESP_ATTR_DIST_SPREAD]) {
+ 		result->dist_spread_valid = 1;
+ 		result->dist_spread =
+ 			nla_get_u64(tb[NL80211_PMSR_FTM_RESP_ATTR_DIST_SPREAD]);
+ 	}
+ 
+ 	if (tb[NL80211_PMSR_FTM_RESP_ATTR_LCI]) {
+ 		result->lci = nla_data(tb[NL80211_PMSR_FTM_RESP_ATTR_LCI]);
+ 		result->lci_len = nla_len(tb[NL80211_PMSR_FTM_RESP_ATTR_LCI]);
+ 	}
+ 
+ 	if (tb[NL80211_PMSR_FTM_RESP_ATTR_CIVICLOC]) {
+ 		result->civicloc = nla_data(tb[NL80211_PMSR_FTM_RESP_ATTR_CIVICLOC]);
+ 		result->civicloc_len = nla_len(tb[NL80211_PMSR_FTM_RESP_ATTR_CIVICLOC]);
+ 	}
+ 
+ 	return 0;
+ }
+ 
+ static int mac80211_hwsim_parse_pmsr_resp(struct nlattr *resp,
+ 					  struct cfg80211_pmsr_result *result,
+ 					  struct genl_info *info)
+ {
+ 	struct nlattr *tb[NL80211_PMSR_RESP_ATTR_MAX + 1];
+ 	struct nlattr *pmsr;
+ 	int rem;
+ 	int ret;
+ 
+ 	ret = nla_parse_nested(tb, NL80211_PMSR_RESP_ATTR_MAX, resp, hwsim_pmsr_resp_policy,
+ 			       info->extack);
+ 	if (ret)
+ 		return ret;
+ 
+ 	if (tb[NL80211_PMSR_RESP_ATTR_STATUS])
+ 		result->status = nla_get_u32(tb[NL80211_PMSR_RESP_ATTR_STATUS]);
+ 
+ 	if (tb[NL80211_PMSR_RESP_ATTR_HOST_TIME])
+ 		result->host_time = nla_get_u64(tb[NL80211_PMSR_RESP_ATTR_HOST_TIME]);
+ 
+ 	if (tb[NL80211_PMSR_RESP_ATTR_AP_TSF]) {
+ 		result->ap_tsf_valid = 1;
+ 		result->ap_tsf = nla_get_u64(tb[NL80211_PMSR_RESP_ATTR_AP_TSF]);
+ 	}
+ 
+ 	result->final = !!tb[NL80211_PMSR_RESP_ATTR_FINAL];
+ 
+ 	if (!tb[NL80211_PMSR_RESP_ATTR_DATA])
+ 		return 0;
+ 
+ 	nla_for_each_nested(pmsr, tb[NL80211_PMSR_RESP_ATTR_DATA], rem) {
+ 		switch (nla_type(pmsr)) {
+ 		case NL80211_PMSR_TYPE_FTM:
+ 			result->type = NL80211_PMSR_TYPE_FTM;
+ 			ret = mac80211_hwsim_parse_ftm_result(pmsr, &result->ftm, info);
+ 			if (ret)
+ 				return ret;
+ 			break;
+ 		default:
+ 			NL_SET_ERR_MSG_ATTR(info->extack, pmsr, "Unknown pmsr resp type");
+ 			return -EINVAL;
+ 		}
+ 	}
+ 
+ 	return 0;
+ }
+ 
+ static int mac80211_hwsim_parse_pmsr_result(struct nlattr *peer,
+ 					    struct cfg80211_pmsr_result *result,
+ 					    struct genl_info *info)
+ {
+ 	struct nlattr *tb[NL80211_PMSR_PEER_ATTR_MAX + 1];
+ 	int ret;
+ 
+ 	if (!peer)
+ 		return -EINVAL;
+ 
+ 	ret = nla_parse_nested(tb, NL80211_PMSR_PEER_ATTR_MAX, peer,
+ 			       hwsim_pmsr_peer_result_policy, info->extack);
+ 	if (ret)
+ 		return ret;
+ 
+ 	if (tb[NL80211_PMSR_PEER_ATTR_ADDR])
+ 		memcpy(result->addr, nla_data(tb[NL80211_PMSR_PEER_ATTR_ADDR]),
+ 		       ETH_ALEN);
+ 
+ 	if (tb[NL80211_PMSR_PEER_ATTR_RESP]) {
+ 		ret = mac80211_hwsim_parse_pmsr_resp(tb[NL80211_PMSR_PEER_ATTR_RESP], result, info);
+ 		if (ret)
+ 			return ret;
+ 	}
+ 
+ 	return 0;
+ };
+ 
+ static int hwsim_pmsr_report_nl(struct sk_buff *msg, struct genl_info *info)
+ {
+ 	struct mac80211_hwsim_data *data;
+ 	struct nlattr *peers, *peer;
+ 	struct nlattr *reqattr;
+ 	const u8 *src;
+ 	int err;
+ 	int rem;
+ 
+ 	if (!info->attrs[HWSIM_ATTR_ADDR_TRANSMITTER])
+ 		return -EINVAL;
+ 
+ 	src = nla_data(info->attrs[HWSIM_ATTR_ADDR_TRANSMITTER]);
+ 	data = get_hwsim_data_ref_from_addr(src);
+ 	if (!data)
+ 		return -EINVAL;
+ 
+ 	mutex_lock(&data->mutex);
+ 	if (!data->pmsr_request) {
+ 		err = -EINVAL;
+ 		goto out;
+ 	}
+ 
+ 	reqattr = info->attrs[HWSIM_ATTR_PMSR_RESULT];
+ 	if (!reqattr) {
+ 		err = -EINVAL;
+ 		goto out;
+ 	}
+ 
+ 	peers = nla_find_nested(reqattr, NL80211_PMSR_ATTR_PEERS);
+ 	if (!peers) {
+ 		err = -EINVAL;
+ 		goto out;
+ 	}
+ 
+ 	nla_for_each_nested(peer, peers, rem) {
+ 		struct cfg80211_pmsr_result result;
+ 
+ 		err = mac80211_hwsim_parse_pmsr_result(peer, &result, info);
+ 		if (err)
+ 			goto out;
+ 
+ 		cfg80211_pmsr_report(data->pmsr_request_wdev,
+ 				     data->pmsr_request, &result, GFP_KERNEL);
+ 	}
+ 
+ 	cfg80211_pmsr_complete(data->pmsr_request_wdev, data->pmsr_request, GFP_KERNEL);
+ 
+ 	err = 0;
+ out:
+ 	data->pmsr_request = NULL;
+ 	data->pmsr_request_wdev = NULL;
+ 
+ 	mutex_unlock(&data->mutex);
+ 	return err;
+ }
+ 
++>>>>>>> 2bef4d1fb8b3 (wifi: mac80211_hwsim: fix potential NULL deref in hwsim_pmsr_report_nl()):drivers/net/wireless/virtual/mac80211_hwsim.c
  #define HWSIM_COMMON_OPS					\
  	.tx = mac80211_hwsim_tx,				\
  	.wake_tx_queue = ieee80211_handle_wake_tx_queue,	\
* Unmerged path drivers/net/wireless/mac80211_hwsim.c
