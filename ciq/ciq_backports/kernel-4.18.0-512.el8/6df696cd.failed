arm64: errata: Mitigate Ampere1 erratum AC03_CPU_38 at stage-2

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-512.el8
commit-author Oliver Upton <oliver.upton@linux.dev>
commit 6df696cd9bc1ceed0e92e36908f88bbd16d18255
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-512.el8/6df696cd.failed

AmpereOne has an erratum in its implementation of FEAT_HAFDBS that
required disabling the feature on the design. This was done by reporting
the feature as not implemented in the ID register, although the
corresponding control bits were not actually RES0. This does not align
well with the requirements of the architecture, which mandates these
bits be RES0 if HAFDBS isn't implemented.

The kernel's use of stage-1 is unaffected, as the HA and HD bits are
only set if HAFDBS is detected in the ID register. KVM, on the other
hand, relies on the RES0 behavior at stage-2 to use the same value for
VTCR_EL2 on any cpu in the system. Mitigate the non-RES0 behavior by
leaving VTCR_EL2.HA clear on affected systems.

	Cc: stable@vger.kernel.org
	Cc: D Scott Phillips <scott@os.amperecomputing.com>
	Cc: Darren Hart <darren@os.amperecomputing.com>
	Acked-by: D Scott Phillips <scott@os.amperecomputing.com>
	Acked-by: Catalin Marinas <catalin.marinas@arm.com>
Link: https://lore.kernel.org/r/20230609220104.1836988-2-oliver.upton@linux.dev
	Signed-off-by: Oliver Upton <oliver.upton@linux.dev>
(cherry picked from commit 6df696cd9bc1ceed0e92e36908f88bbd16d18255)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	Documentation/arm64/silicon-errata.rst
#	arch/arm64/kernel/cpu_errata.c
#	arch/arm64/kvm/hyp/pgtable.c
#	arch/arm64/tools/cpucaps
diff --cc Documentation/arm64/silicon-errata.rst
index e6cba352de6e,cd46e2b20a81..000000000000
--- a/Documentation/arm64/silicon-errata.rst
+++ b/Documentation/arm64/silicon-errata.rst
@@@ -49,6 -49,20 +49,23 @@@ stable kernels
  +----------------+-----------------+-----------------+-----------------------------+
  | Implementor    | Component       | Erratum ID      | Kconfig                     |
  +================+=================+=================+=============================+
++<<<<<<< HEAD
++=======
+ | Allwinner      | A64/R18         | UNKNOWN1        | SUN50I_ERRATUM_UNKNOWN1     |
+ +----------------+-----------------+-----------------+-----------------------------+
+ +----------------+-----------------+-----------------+-----------------------------+
+ | Ampere         | AmpereOne       | AC03_CPU_38     | AMPERE_ERRATUM_AC03_CPU_38  |
+ +----------------+-----------------+-----------------+-----------------------------+
+ +----------------+-----------------+-----------------+-----------------------------+
+ | ARM            | Cortex-A510     | #2457168        | ARM64_ERRATUM_2457168       |
+ +----------------+-----------------+-----------------+-----------------------------+
+ | ARM            | Cortex-A510     | #2064142        | ARM64_ERRATUM_2064142       |
+ +----------------+-----------------+-----------------+-----------------------------+
+ | ARM            | Cortex-A510     | #2038923        | ARM64_ERRATUM_2038923       |
+ +----------------+-----------------+-----------------+-----------------------------+
+ | ARM            | Cortex-A510     | #1902691        | ARM64_ERRATUM_1902691       |
+ +----------------+-----------------+-----------------+-----------------------------+
++>>>>>>> 6df696cd9bc1 (arm64: errata: Mitigate Ampere1 erratum AC03_CPU_38 at stage-2)
  | ARM            | Cortex-A53      | #826319         | ARM64_ERRATUM_826319        |
  +----------------+-----------------+-----------------+-----------------------------+
  | ARM            | Cortex-A53      | #827319         | ARM64_ERRATUM_827319        |
diff --cc arch/arm64/kernel/cpu_errata.c
index 795e121c8eea,be66e94a21bd..000000000000
--- a/arch/arm64/kernel/cpu_errata.c
+++ b/arch/arm64/kernel/cpu_errata.c
@@@ -1012,6 -633,110 +1012,113 @@@ const struct arm64_cpu_capabilities arm
  		ERRATA_MIDR_ALL_VERSIONS(MIDR_NVIDIA_CARMEL),
  	},
  #endif
++<<<<<<< HEAD
++=======
+ #ifdef CONFIG_ARM64_WORKAROUND_TRBE_OVERWRITE_FILL_MODE
+ 	{
+ 		/*
+ 		 * The erratum work around is handled within the TRBE
+ 		 * driver and can be applied per-cpu. So, we can allow
+ 		 * a late CPU to come online with this erratum.
+ 		 */
+ 		.desc = "ARM erratum 2119858 or 2139208",
+ 		.capability = ARM64_WORKAROUND_TRBE_OVERWRITE_FILL_MODE,
+ 		.type = ARM64_CPUCAP_WEAK_LOCAL_CPU_FEATURE,
+ 		CAP_MIDR_RANGE_LIST(trbe_overwrite_fill_mode_cpus),
+ 	},
+ #endif
+ #ifdef CONFIG_ARM64_WORKAROUND_TSB_FLUSH_FAILURE
+ 	{
+ 		.desc = "ARM erratum 2067961 or 2054223",
+ 		.capability = ARM64_WORKAROUND_TSB_FLUSH_FAILURE,
+ 		ERRATA_MIDR_RANGE_LIST(tsb_flush_fail_cpus),
+ 	},
+ #endif
+ #ifdef CONFIG_ARM64_WORKAROUND_TRBE_WRITE_OUT_OF_RANGE
+ 	{
+ 		.desc = "ARM erratum 2253138 or 2224489",
+ 		.capability = ARM64_WORKAROUND_TRBE_WRITE_OUT_OF_RANGE,
+ 		.type = ARM64_CPUCAP_WEAK_LOCAL_CPU_FEATURE,
+ 		CAP_MIDR_RANGE_LIST(trbe_write_out_of_range_cpus),
+ 	},
+ #endif
+ #ifdef CONFIG_ARM64_ERRATUM_2645198
+ 	{
+ 		.desc = "ARM erratum 2645198",
+ 		.capability = ARM64_WORKAROUND_2645198,
+ 		ERRATA_MIDR_ALL_VERSIONS(MIDR_CORTEX_A715)
+ 	},
+ #endif
+ #ifdef CONFIG_ARM64_ERRATUM_2077057
+ 	{
+ 		.desc = "ARM erratum 2077057",
+ 		.capability = ARM64_WORKAROUND_2077057,
+ 		ERRATA_MIDR_REV_RANGE(MIDR_CORTEX_A510, 0, 0, 2),
+ 	},
+ #endif
+ #ifdef CONFIG_ARM64_ERRATUM_2064142
+ 	{
+ 		.desc = "ARM erratum 2064142",
+ 		.capability = ARM64_WORKAROUND_2064142,
+ 
+ 		/* Cortex-A510 r0p0 - r0p2 */
+ 		ERRATA_MIDR_REV_RANGE(MIDR_CORTEX_A510, 0, 0, 2)
+ 	},
+ #endif
+ #ifdef CONFIG_ARM64_ERRATUM_2457168
+ 	{
+ 		.desc = "ARM erratum 2457168",
+ 		.capability = ARM64_WORKAROUND_2457168,
+ 		.type = ARM64_CPUCAP_WEAK_LOCAL_CPU_FEATURE,
+ 
+ 		/* Cortex-A510 r0p0-r1p1 */
+ 		CAP_MIDR_RANGE(MIDR_CORTEX_A510, 0, 0, 1, 1)
+ 	},
+ #endif
+ #ifdef CONFIG_ARM64_ERRATUM_2038923
+ 	{
+ 		.desc = "ARM erratum 2038923",
+ 		.capability = ARM64_WORKAROUND_2038923,
+ 
+ 		/* Cortex-A510 r0p0 - r0p2 */
+ 		ERRATA_MIDR_REV_RANGE(MIDR_CORTEX_A510, 0, 0, 2)
+ 	},
+ #endif
+ #ifdef CONFIG_ARM64_ERRATUM_1902691
+ 	{
+ 		.desc = "ARM erratum 1902691",
+ 		.capability = ARM64_WORKAROUND_1902691,
+ 
+ 		/* Cortex-A510 r0p0 - r0p1 */
+ 		ERRATA_MIDR_REV_RANGE(MIDR_CORTEX_A510, 0, 0, 1)
+ 	},
+ #endif
+ #ifdef CONFIG_ARM64_ERRATUM_1742098
+ 	{
+ 		.desc = "ARM erratum 1742098",
+ 		.capability = ARM64_WORKAROUND_1742098,
+ 		CAP_MIDR_RANGE_LIST(broken_aarch32_aes),
+ 		.type = ARM64_CPUCAP_LOCAL_CPU_ERRATUM,
+ 	},
+ #endif
+ #ifdef CONFIG_ARM64_ERRATUM_2658417
+ 	{
+ 		.desc = "ARM erratum 2658417",
+ 		.capability = ARM64_WORKAROUND_2658417,
+ 		/* Cortex-A510 r0p0 - r1p1 */
+ 		ERRATA_MIDR_RANGE(MIDR_CORTEX_A510, 0, 0, 1, 1),
+ 		MIDR_FIXED(MIDR_CPU_VAR_REV(1,1), BIT(25)),
+ 		.cpu_enable = cpu_clear_bf16_from_user_emulation,
+ 	},
+ #endif
+ #ifdef CONFIG_AMPERE_ERRATUM_AC03_CPU_38
+ 	{
+ 		.desc = "AmpereOne erratum AC03_CPU_38",
+ 		.capability = ARM64_WORKAROUND_AMPERE_AC03_CPU_38,
+ 		ERRATA_MIDR_ALL_VERSIONS(MIDR_AMPERE1),
+ 	},
+ #endif
++>>>>>>> 6df696cd9bc1 (arm64: errata: Mitigate Ampere1 erratum AC03_CPU_38 at stage-2)
  	{
  	}
  };
diff --cc arch/arm64/tools/cpucaps
index 0e4aae44a04f,9f9a2d6652eb..000000000000
--- a/arch/arm64/tools/cpucaps
+++ b/arch/arm64/tools/cpucaps
@@@ -53,6 -69,18 +53,21 @@@ WORKAROUND_141804
  WORKAROUND_1463225
  WORKAROUND_1508412
  WORKAROUND_1542419
++<<<<<<< HEAD
++=======
+ WORKAROUND_1742098
+ WORKAROUND_1902691
+ WORKAROUND_2038923
+ WORKAROUND_2064142
+ WORKAROUND_2077057
+ WORKAROUND_2457168
+ WORKAROUND_2645198
+ WORKAROUND_2658417
+ WORKAROUND_AMPERE_AC03_CPU_38
+ WORKAROUND_TRBE_OVERWRITE_FILL_MODE
+ WORKAROUND_TSB_FLUSH_FAILURE
+ WORKAROUND_TRBE_WRITE_OUT_OF_RANGE
++>>>>>>> 6df696cd9bc1 (arm64: errata: Mitigate Ampere1 erratum AC03_CPU_38 at stage-2)
  WORKAROUND_CAVIUM_23154
  WORKAROUND_CAVIUM_27456
  WORKAROUND_CAVIUM_30115
* Unmerged path arch/arm64/kvm/hyp/pgtable.c
* Unmerged path Documentation/arm64/silicon-errata.rst
diff --git a/arch/arm64/Kconfig b/arch/arm64/Kconfig
index a58c45ecf8fe..c1f0f61dc3d3 100644
--- a/arch/arm64/Kconfig
+++ b/arch/arm64/Kconfig
@@ -345,6 +345,25 @@ menu "Kernel Features"
 
 menu "ARM errata workarounds via the alternatives framework"
 
+config AMPERE_ERRATUM_AC03_CPU_38
+        bool "AmpereOne: AC03_CPU_38: Certain bits in the Virtualization Translation Control Register and Translation Control Registers do not follow RES0 semantics"
+	default y
+	help
+	  This option adds an alternative code sequence to work around Ampere
+	  erratum AC03_CPU_38 on AmpereOne.
+
+	  The affected design reports FEAT_HAFDBS as not implemented in
+	  ID_AA64MMFR1_EL1.HAFDBS, but (V)TCR_ELx.{HA,HD} are not RES0
+	  as required by the architecture. The unadvertised HAFDBS
+	  implementation suffers from an additional erratum where hardware
+	  A/D updates can occur after a PTE has been marked invalid.
+
+	  The workaround forces KVM to explicitly set VTCR_EL2.HA to 0,
+	  which avoids enabling unadvertised hardware Access Flag management
+	  at stage-2.
+
+	  If unsure, say Y.
+
 config ARM64_WORKAROUND_CLEAN_CACHE
 	bool
 
* Unmerged path arch/arm64/kernel/cpu_errata.c
* Unmerged path arch/arm64/kvm/hyp/pgtable.c
* Unmerged path arch/arm64/tools/cpucaps
