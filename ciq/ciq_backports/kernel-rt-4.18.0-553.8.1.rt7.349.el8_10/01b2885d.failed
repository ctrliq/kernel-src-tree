net: Save and restore msg_namelen in sock_sendmsg

jira LE-1907
Rebuild_History Non-Buildable kernel-rt-4.18.0-553.8.1.rt7.349.el8_10
commit-author Marc Dionne <marc.dionne@auristor.com>
commit 01b2885d9415152bcb12ff1f7788f500a74ea0ed
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-rt-4.18.0-553.8.1.rt7.349.el8_10/01b2885d.failed

Commit 86a7e0b69bd5 ("net: prevent rewrite of msg_name in
sock_sendmsg()") made sock_sendmsg save the incoming msg_name pointer
and restore it before returning, to insulate the caller against
msg_name being changed by the called code.  If the address length
was also changed however, we may return with an inconsistent structure
where the length doesn't match the address, and attempts to reuse it may
lead to lost packets.

For example, a kernel that doesn't have commit 1c5950fc6fe9 ("udp6: fix
potential access to stale information") will replace a v4 mapped address
with its ipv4 equivalent, and shorten namelen accordingly from 28 to 16.
If the caller attempts to reuse the resulting msg structure, it will have
the original ipv6 (v4 mapped) address but an incorrect v4 length.

Fixes: 86a7e0b69bd5 ("net: prevent rewrite of msg_name in sock_sendmsg()")
	Signed-off-by: Marc Dionne <marc.dionne@auristor.com>
	Reviewed-by: Willem de Bruijn <willemb@google.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 01b2885d9415152bcb12ff1f7788f500a74ea0ed)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/socket.c
diff --cc net/socket.c
index e69fd02a179d,89d79205bf50..000000000000
--- a/net/socket.c
+++ b/net/socket.c
@@@ -670,12 -734,42 +670,30 @@@ static inline int sock_sendmsg_nosec(st
  	return ret;
  }
  
 -static int __sock_sendmsg(struct socket *sock, struct msghdr *msg)
 +int sock_sendmsg(struct socket *sock, struct msghdr *msg)
  {
++<<<<<<< HEAD
  	int err = security_socket_sendmsg(sock, msg,
  					  msg_data_left(msg));
  
  	return err ?: sock_sendmsg_nosec(sock, msg);
 -}
 -
 -/**
 - *	sock_sendmsg - send a message through @sock
 - *	@sock: socket
 - *	@msg: message to send
 - *
 - *	Sends @msg through @sock, passing through LSM.
 - *	Returns the number of bytes sent, or an error code.
 - */
 -int sock_sendmsg(struct socket *sock, struct msghdr *msg)
 -{
++=======
+ 	struct sockaddr_storage *save_addr = (struct sockaddr_storage *)msg->msg_name;
+ 	struct sockaddr_storage address;
+ 	int save_len = msg->msg_namelen;
+ 	int ret;
+ 
+ 	if (msg->msg_name) {
+ 		memcpy(&address, msg->msg_name, msg->msg_namelen);
+ 		msg->msg_name = &address;
+ 	}
+ 
+ 	ret = __sock_sendmsg(sock, msg);
+ 	msg->msg_name = save_addr;
+ 	msg->msg_namelen = save_len;
+ 
+ 	return ret;
++>>>>>>> 01b2885d9415 (net: Save and restore msg_namelen in sock_sendmsg)
  }
  EXPORT_SYMBOL(sock_sendmsg);
  
* Unmerged path net/socket.c
