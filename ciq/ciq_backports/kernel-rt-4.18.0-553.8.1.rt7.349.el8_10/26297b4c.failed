net: replace calls to sock->ops->connect() with kernel_connect()

jira LE-1907
Rebuild_History Non-Buildable kernel-rt-4.18.0-553.8.1.rt7.349.el8_10
commit-author Jordan Rife <jrife@google.com>
commit 26297b4ce1ce4ea40bc9a48ec99f45da3f64d2e2
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-rt-4.18.0-553.8.1.rt7.349.el8_10/26297b4c.failed

commit 0bdf399342c5 ("net: Avoid address overwrite in kernel_connect")
ensured that kernel_connect() will not overwrite the address parameter
in cases where BPF connect hooks perform an address rewrite. This change
replaces direct calls to sock->ops->connect() in net with kernel_connect()
to make these call safe.

Link: https://lore.kernel.org/netdev/20230912013332.2048422-1-jrife@google.com/
Fixes: d74bad4e74ee ("bpf: Hooks for sys_connect")
	Cc: stable@vger.kernel.org
	Reviewed-by: Willem de Bruijn <willemb@google.com>
	Signed-off-by: Jordan Rife <jrife@google.com>
	Reviewed-by: Simon Horman <horms@kernel.org>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 26297b4ce1ce4ea40bc9a48ec99f45da3f64d2e2)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/rds/tcp_connect.c
diff --cc net/rds/tcp_connect.c
index 168ee9aa85ac,d788c6d28986..000000000000
--- a/net/rds/tcp_connect.c
+++ b/net/rds/tcp_connect.c
@@@ -132,10 -173,9 +132,14 @@@ int rds_tcp_conn_path_connect(struct rd
  	 * own the socket
  	 */
  	rds_tcp_set_callbacks(sock, cp);
++<<<<<<< HEAD
 +	ret = sock->ops->connect(sock, (struct sockaddr *)&dest, sizeof(dest),
 +				 O_NONBLOCK);
++=======
+ 	ret = kernel_connect(sock, addr, addrlen, O_NONBLOCK);
++>>>>>>> 26297b4ce1ce (net: replace calls to sock->ops->connect() with kernel_connect())
  
 -	rdsdebug("connect to address %pI6c returned %d\n", &conn->c_faddr, ret);
 +	rdsdebug("connect to address %pI4 returned %d\n", &conn->c_faddr, ret);
  	if (ret == -EINPROGRESS)
  		ret = 0;
  	if (ret == 0) {
diff --git a/net/netfilter/ipvs/ip_vs_sync.c b/net/netfilter/ipvs/ip_vs_sync.c
index 2232b0639a07..abecda5dc756 100644
--- a/net/netfilter/ipvs/ip_vs_sync.c
+++ b/net/netfilter/ipvs/ip_vs_sync.c
@@ -1516,8 +1516,8 @@ static int make_send_sock(struct netns_ipvs *ipvs, int id,
 	}
 
 	get_mcast_sockaddr(&mcast_addr, &salen, &ipvs->mcfg, id);
-	result = sock->ops->connect(sock, (struct sockaddr *) &mcast_addr,
-				    salen, 0);
+	result = kernel_connect(sock, (struct sockaddr *)&mcast_addr,
+				salen, 0);
 	if (result < 0) {
 		pr_err("Error connecting to the multicast addr\n");
 		goto error;
* Unmerged path net/rds/tcp_connect.c
