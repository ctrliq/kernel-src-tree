x86/bugs: Fix BHI retpoline check

jira LE-1907
cve CVE-2024-2201
Rebuild_History Non-Buildable kernel-rt-4.18.0-553.16.1.rt7.357.el8_10
commit-author Josh Poimboeuf <jpoimboe@kernel.org>
commit 69129794d94c544810e68b2b4eaa7e44063f9bf2
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-rt-4.18.0-553.16.1.rt7.357.el8_10/69129794.failed

Confusingly, X86_FEATURE_RETPOLINE doesn't mean retpolines are enabled,
as it also includes the original "AMD retpoline" which isn't a retpoline
at all.

Also replace cpu_feature_enabled() with boot_cpu_has() because this is
before alternatives are patched and cpu_feature_enabled()'s fallback
path is slower than plain old boot_cpu_has().

Fixes: ec9404e40e8f ("x86/bhi: Add BHI mitigation knob")
	Signed-off-by: Josh Poimboeuf <jpoimboe@kernel.org>
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
	Reviewed-by: Pawan Gupta <pawan.kumar.gupta@linux.intel.com>
	Cc: Borislav Petkov <bp@alien8.de>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
Link: https://lore.kernel.org/r/ad3807424a3953f0323c011a643405619f2a4927.1712944776.git.jpoimboe@kernel.org
(cherry picked from commit 69129794d94c544810e68b2b4eaa7e44063f9bf2)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kernel/cpu/bugs.c
diff --cc arch/x86/kernel/cpu/bugs.c
index 845ec3ddb3cc,ab18185894df..000000000000
--- a/arch/x86/kernel/cpu/bugs.c
+++ b/arch/x86/kernel/cpu/bugs.c
@@@ -1541,6 -1606,74 +1541,77 @@@ static void __init spectre_v2_determine
  	dump_stack();
  }
  
++<<<<<<< HEAD
++=======
+ /*
+  * Set BHI_DIS_S to prevent indirect branches in kernel to be influenced by
+  * branch history in userspace. Not needed if BHI_NO is set.
+  */
+ static bool __init spec_ctrl_bhi_dis(void)
+ {
+ 	if (!boot_cpu_has(X86_FEATURE_BHI_CTRL))
+ 		return false;
+ 
+ 	x86_spec_ctrl_base |= SPEC_CTRL_BHI_DIS_S;
+ 	update_spec_ctrl(x86_spec_ctrl_base);
+ 	setup_force_cpu_cap(X86_FEATURE_CLEAR_BHB_HW);
+ 
+ 	return true;
+ }
+ 
+ enum bhi_mitigations {
+ 	BHI_MITIGATION_OFF,
+ 	BHI_MITIGATION_ON,
+ };
+ 
+ static enum bhi_mitigations bhi_mitigation __ro_after_init =
+ 	IS_ENABLED(CONFIG_MITIGATION_SPECTRE_BHI) ? BHI_MITIGATION_ON : BHI_MITIGATION_OFF;
+ 
+ static int __init spectre_bhi_parse_cmdline(char *str)
+ {
+ 	if (!str)
+ 		return -EINVAL;
+ 
+ 	if (!strcmp(str, "off"))
+ 		bhi_mitigation = BHI_MITIGATION_OFF;
+ 	else if (!strcmp(str, "on"))
+ 		bhi_mitigation = BHI_MITIGATION_ON;
+ 	else
+ 		pr_err("Ignoring unknown spectre_bhi option (%s)", str);
+ 
+ 	return 0;
+ }
+ early_param("spectre_bhi", spectre_bhi_parse_cmdline);
+ 
+ static void __init bhi_select_mitigation(void)
+ {
+ 	if (bhi_mitigation == BHI_MITIGATION_OFF)
+ 		return;
+ 
+ 	/* Retpoline mitigates against BHI unless the CPU has RRSBA behavior */
+ 	if (boot_cpu_has(X86_FEATURE_RETPOLINE) &&
+ 	    !boot_cpu_has(X86_FEATURE_RETPOLINE_LFENCE)) {
+ 		spec_ctrl_disable_kernel_rrsba();
+ 		if (rrsba_disabled)
+ 			return;
+ 	}
+ 
+ 	if (spec_ctrl_bhi_dis())
+ 		return;
+ 
+ 	if (!IS_ENABLED(CONFIG_X86_64))
+ 		return;
+ 
+ 	/* Mitigate KVM by default */
+ 	setup_force_cpu_cap(X86_FEATURE_CLEAR_BHB_LOOP_ON_VMEXIT);
+ 	pr_info("Spectre BHI mitigation: SW BHB clearing on vm exit\n");
+ 
+ 	/* Mitigate syscalls when the mitigation is forced =on */
+ 	setup_force_cpu_cap(X86_FEATURE_CLEAR_BHB_LOOP);
+ 	pr_info("Spectre BHI mitigation: SW BHB clearing on syscall\n");
+ }
+ 
++>>>>>>> 69129794d94c (x86/bugs: Fix BHI retpoline check)
  static void __init spectre_v2_select_mitigation(void)
  {
  	enum spectre_v2_mitigation_cmd cmd = spectre_v2_parse_cmdline();
@@@ -2723,6 -2801,24 +2794,27 @@@ static char *pbrsb_eibrs_state(void
  	}
  }
  
++<<<<<<< HEAD
++=======
+ static const char *spectre_bhi_state(void)
+ {
+ 	if (!boot_cpu_has_bug(X86_BUG_BHI))
+ 		return "; BHI: Not affected";
+ 	else if (boot_cpu_has(X86_FEATURE_CLEAR_BHB_HW))
+ 		return "; BHI: BHI_DIS_S";
+ 	else if (boot_cpu_has(X86_FEATURE_CLEAR_BHB_LOOP))
+ 		return "; BHI: SW loop, KVM: SW loop";
+ 	else if (boot_cpu_has(X86_FEATURE_RETPOLINE) &&
+ 		 !boot_cpu_has(X86_FEATURE_RETPOLINE_LFENCE) &&
+ 		 rrsba_disabled)
+ 		return "; BHI: Retpoline";
+ 	else if (boot_cpu_has(X86_FEATURE_CLEAR_BHB_LOOP_ON_VMEXIT))
+ 		return "; BHI: Vulnerable, KVM: SW loop";
+ 
+ 	return "; BHI: Vulnerable";
+ }
+ 
++>>>>>>> 69129794d94c (x86/bugs: Fix BHI retpoline check)
  static ssize_t spectre_v2_show_state(char *buf)
  {
  	if (spectre_v2_enabled == SPECTRE_V2_LFENCE)
* Unmerged path arch/x86/kernel/cpu/bugs.c
