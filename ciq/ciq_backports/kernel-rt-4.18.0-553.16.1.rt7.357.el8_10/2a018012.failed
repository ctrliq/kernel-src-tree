KVM/x86: Export RFDS_NO and RFDS_CLEAR to guests

jira LE-1907
Rebuild_History Non-Buildable kernel-rt-4.18.0-553.16.1.rt7.357.el8_10
commit-author Pawan Gupta <pawan.kumar.gupta@linux.intel.com>
commit 2a0180129d726a4b953232175857d442651b55a0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-rt-4.18.0-553.16.1.rt7.357.el8_10/2a018012.failed

Mitigation for RFDS requires RFDS_CLEAR capability which is enumerated
by MSR_IA32_ARCH_CAPABILITIES bit 27. If the host has it set, export it
to guests so that they can deploy the mitigation.

RFDS_NO indicates that the system is not vulnerable to RFDS, export it
to guests so that they don't deploy the mitigation unnecessarily. When
the host is not affected by X86_BUG_RFDS, but has RFDS_NO=0, synthesize
RFDS_NO to the guest.

	Signed-off-by: Pawan Gupta <pawan.kumar.gupta@linux.intel.com>
	Signed-off-by: Dave Hansen <dave.hansen@linux.intel.com>
	Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
	Acked-by: Josh Poimboeuf <jpoimboe@kernel.org>
(cherry picked from commit 2a0180129d726a4b953232175857d442651b55a0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kvm/x86.c
diff --cc arch/x86/kvm/x86.c
index 5f52069dc167,68fdf3ba031a..000000000000
--- a/arch/x86/kvm/x86.c
+++ b/arch/x86/kvm/x86.c
@@@ -1531,15 -1584,51 +1531,56 @@@ static const u32 msr_based_features_all
  	MSR_IA32_PERF_CAPABILITIES,
  };
  
 -static u32 msr_based_features[ARRAY_SIZE(msr_based_features_all_except_vmx) +
 -			      (KVM_LAST_EMULATED_VMX_MSR - KVM_FIRST_EMULATED_VMX_MSR + 1)];
 +static u32 msr_based_features[ARRAY_SIZE(msr_based_features_all)];
  static unsigned int num_msr_based_features;
  
++<<<<<<< HEAD
++=======
+ /*
+  * All feature MSRs except uCode revID, which tracks the currently loaded uCode
+  * patch, are immutable once the vCPU model is defined.
+  */
+ static bool kvm_is_immutable_feature_msr(u32 msr)
+ {
+ 	int i;
+ 
+ 	if (msr >= KVM_FIRST_EMULATED_VMX_MSR && msr <= KVM_LAST_EMULATED_VMX_MSR)
+ 		return true;
+ 
+ 	for (i = 0; i < ARRAY_SIZE(msr_based_features_all_except_vmx); i++) {
+ 		if (msr == msr_based_features_all_except_vmx[i])
+ 			return msr != MSR_IA32_UCODE_REV;
+ 	}
+ 
+ 	return false;
+ }
+ 
+ /*
+  * Some IA32_ARCH_CAPABILITIES bits have dependencies on MSRs that KVM
+  * does not yet virtualize. These include:
+  *   10 - MISC_PACKAGE_CTRLS
+  *   11 - ENERGY_FILTERING_CTL
+  *   12 - DOITM
+  *   18 - FB_CLEAR_CTRL
+  *   21 - XAPIC_DISABLE_STATUS
+  *   23 - OVERCLOCKING_STATUS
+  */
+ 
+ #define KVM_SUPPORTED_ARCH_CAP \
+ 	(ARCH_CAP_RDCL_NO | ARCH_CAP_IBRS_ALL | ARCH_CAP_RSBA | \
+ 	 ARCH_CAP_SKIP_VMENTRY_L1DFLUSH | ARCH_CAP_SSB_NO | ARCH_CAP_MDS_NO | \
+ 	 ARCH_CAP_PSCHANGE_MC_NO | ARCH_CAP_TSX_CTRL_MSR | ARCH_CAP_TAA_NO | \
+ 	 ARCH_CAP_SBDR_SSDP_NO | ARCH_CAP_FBSDP_NO | ARCH_CAP_PSDP_NO | \
+ 	 ARCH_CAP_FB_CLEAR | ARCH_CAP_RRSBA | ARCH_CAP_PBRSB_NO | ARCH_CAP_GDS_NO | \
+ 	 ARCH_CAP_RFDS_NO | ARCH_CAP_RFDS_CLEAR)
+ 
++>>>>>>> 2a0180129d72 (KVM/x86: Export RFDS_NO and RFDS_CLEAR to guests)
  static u64 kvm_get_arch_capabilities(void)
  {
 -	u64 data = host_arch_capabilities & KVM_SUPPORTED_ARCH_CAP;
 +	u64 data = 0;
 +
 +	if (boot_cpu_has(X86_FEATURE_ARCH_CAPABILITIES))
 +		rdmsrl(MSR_IA32_ARCH_CAPABILITIES, data);
  
  	/*
  	 * If nx_huge_pages is enabled, KVM's shadow paging will ensure that
* Unmerged path arch/x86/kvm/x86.c
