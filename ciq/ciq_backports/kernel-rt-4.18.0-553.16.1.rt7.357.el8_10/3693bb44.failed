x86/xen: Add some null pointer checking to smp.c

jira LE-1907
cve CVE-2024-26908
Rebuild_History Non-Buildable kernel-rt-4.18.0-553.16.1.rt7.357.el8_10
commit-author Kunwu Chan <chentao@kylinos.cn>
commit 3693bb4465e6e32a204a5b86d3ec7e6b9f7e67c2
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-rt-4.18.0-553.16.1.rt7.357.el8_10/3693bb44.failed

kasprintf() returns a pointer to dynamically allocated memory
which can be NULL upon failure. Ensure the allocation was successful
by checking the pointer validity.

	Signed-off-by: Kunwu Chan <chentao@kylinos.cn>
	Reported-by: kernel test robot <lkp@intel.com>
Closes: https://lore.kernel.org/oe-kbuild-all/202401161119.iof6BQsf-lkp@intel.com/
	Suggested-by: Markus Elfring <Markus.Elfring@web.de>
	Reviewed-by: Juergen Gross <jgross@suse.com>
Link: https://lore.kernel.org/r/20240119094948.275390-1-chentao@kylinos.cn
	Signed-off-by: Juergen Gross <jgross@suse.com>
(cherry picked from commit 3693bb4465e6e32a204a5b86d3ec7e6b9f7e67c2)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/xen/smp.c
diff --cc arch/x86/xen/smp.c
index 7a43b2ae19f1,1fb9a1644d94..000000000000
--- a/arch/x86/xen/smp.c
+++ b/arch/x86/xen/smp.c
@@@ -65,6 -65,9 +65,12 @@@ int xen_smp_intr_init(unsigned int cpu
  	char *resched_name, *callfunc_name, *debug_name;
  
  	resched_name = kasprintf(GFP_KERNEL, "resched%d", cpu);
++<<<<<<< HEAD
++=======
+ 	if (!resched_name)
+ 		goto fail_mem;
+ 	per_cpu(xen_resched_irq, cpu).name = resched_name;
++>>>>>>> 3693bb4465e6 (x86/xen: Add some null pointer checking to smp.c)
  	rc = bind_ipi_to_irqhandler(XEN_RESCHEDULE_VECTOR,
  				    cpu,
  				    xen_reschedule_interrupt,
@@@ -74,9 -77,11 +80,15 @@@
  	if (rc < 0)
  		goto fail;
  	per_cpu(xen_resched_irq, cpu).irq = rc;
 +	per_cpu(xen_resched_irq, cpu).name = resched_name;
  
  	callfunc_name = kasprintf(GFP_KERNEL, "callfunc%d", cpu);
++<<<<<<< HEAD
++=======
+ 	if (!callfunc_name)
+ 		goto fail_mem;
+ 	per_cpu(xen_callfunc_irq, cpu).name = callfunc_name;
++>>>>>>> 3693bb4465e6 (x86/xen: Add some null pointer checking to smp.c)
  	rc = bind_ipi_to_irqhandler(XEN_CALL_FUNCTION_VECTOR,
  				    cpu,
  				    xen_call_function_interrupt,
@@@ -86,18 -91,27 +98,41 @@@
  	if (rc < 0)
  		goto fail;
  	per_cpu(xen_callfunc_irq, cpu).irq = rc;
 +	per_cpu(xen_callfunc_irq, cpu).name = callfunc_name;
 +
++<<<<<<< HEAD
 +	debug_name = kasprintf(GFP_KERNEL, "debug%d", cpu);
 +	rc = bind_virq_to_irqhandler(VIRQ_DEBUG, cpu, xen_debug_interrupt,
 +				     IRQF_PERCPU | IRQF_NOBALANCING,
 +				     debug_name, NULL);
 +	if (rc < 0)
 +		goto fail;
 +	per_cpu(xen_debug_irq, cpu).irq = rc;
 +	per_cpu(xen_debug_irq, cpu).name = debug_name;
  
 +	callfunc_name = kasprintf(GFP_KERNEL, "callfuncsingle%d", cpu);
++=======
+ 	if (!xen_fifo_events) {
+ 		debug_name = kasprintf(GFP_KERNEL, "debug%d", cpu);
+ 		if (!debug_name)
+ 			goto fail_mem;
+ 
+ 		per_cpu(xen_debug_irq, cpu).name = debug_name;
+ 		rc = bind_virq_to_irqhandler(VIRQ_DEBUG, cpu,
+ 					     xen_debug_interrupt,
+ 					     IRQF_PERCPU | IRQF_NOBALANCING,
+ 					     debug_name, NULL);
+ 		if (rc < 0)
+ 			goto fail;
+ 		per_cpu(xen_debug_irq, cpu).irq = rc;
+ 	}
+ 
+ 	callfunc_name = kasprintf(GFP_KERNEL, "callfuncsingle%d", cpu);
+ 	if (!callfunc_name)
+ 		goto fail_mem;
+ 
+ 	per_cpu(xen_callfuncsingle_irq, cpu).name = callfunc_name;
++>>>>>>> 3693bb4465e6 (x86/xen: Add some null pointer checking to smp.c)
  	rc = bind_ipi_to_irqhandler(XEN_CALL_FUNCTION_SINGLE_VECTOR,
  				    cpu,
  				    xen_call_function_single_interrupt,
* Unmerged path arch/x86/xen/smp.c
