lan78xx: Fix exception on link speed change

jira LE-1907
Rebuild_History Non-Buildable kernel-rt-4.18.0-553.16.1.rt7.357.el8_10
commit-author John Efstathiades <john.efstathiades@pebblebay.com>
commit b1f6696daafebea243ed59ed18a8b10cfd33b474
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-rt-4.18.0-553.16.1.rt7.357.el8_10/b1f6696d.failed

An exception is sometimes seen when the link speed is changed
from auto-negotiation to a fixed speed, or vice versa. The
exception occurs when the MAC is reset (due to the link speed
change) at the same time as the PHY state machine is accessing
a PHY register. The following changes fix this problem.

Rework the MAC reset to ensure there is no outstanding MDIO
register transaction before the reset and then wait until the
reset is complete before allowing any further MAC register access.

	Signed-off-by: John Efstathiades <john.efstathiades@pebblebay.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit b1f6696daafebea243ed59ed18a8b10cfd33b474)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/usb/lan78xx.c
diff --cc drivers/net/usb/lan78xx.c
index dc3eee1fcccf,2eb853b13c2a..000000000000
--- a/drivers/net/usb/lan78xx.c
+++ b/drivers/net/usb/lan78xx.c
@@@ -1172,13 -1230,9 +1218,19 @@@ static int lan78xx_link_reset(struct la
  		dev->link_on = false;
  
  		/* reset MAC */
++<<<<<<< HEAD
 +		ret = lan78xx_read_reg(dev, MAC_CR, &buf);
 +		if (unlikely(ret < 0))
 +			return -EIO;
 +		buf |= MAC_CR_RST_;
 +		ret = lan78xx_write_reg(dev, MAC_CR, buf);
 +		if (unlikely(ret < 0))
 +			return -EIO;
++=======
+ 		ret = lan78xx_mac_reset(dev);
+ 		if (ret < 0)
+ 			return ret;
++>>>>>>> b1f6696daafe (lan78xx: Fix exception on link speed change)
  
  		del_timer(&dev->stat_monitor);
  	} else if (link && !dev->link_on) {
* Unmerged path drivers/net/usb/lan78xx.c
