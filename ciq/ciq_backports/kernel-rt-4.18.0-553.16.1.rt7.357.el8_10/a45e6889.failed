netfilter: nf_tables: release batch on table validation from abort path

jira LE-1907
Rebuild_History Non-Buildable kernel-rt-4.18.0-553.16.1.rt7.357.el8_10
commit-author Pablo Neira Ayuso <pablo@netfilter.org>
commit a45e6889575c2067d3c0212b6bc1022891e65b91
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-rt-4.18.0-553.16.1.rt7.357.el8_10/a45e6889.failed

Unlike early commit path stage which triggers a call to abort, an
explicit release of the batch is required on abort, otherwise mutex is
released and commit_list remains in place.

Add WARN_ON_ONCE to ensure commit_list is empty from the abort path
before releasing the mutex.

After this patch, commit_list is always assumed to be empty before
grabbing the mutex, therefore

  03c1f1ef1584 ("netfilter: Cleanup nft_net->module_list from nf_tables_exit_net()")

only needs to release the pending modules for registration.

	Cc: stable@vger.kernel.org
Fixes: c0391b6ab810 ("netfilter: nf_tables: missing validation from the abort path")
	Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
(cherry picked from commit a45e6889575c2067d3c0212b6bc1022891e65b91)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/netfilter/nf_tables_api.c
diff --cc net/netfilter/nf_tables_api.c
index ddd3e06d5bbf,ffcd3213c335..000000000000
--- a/net/netfilter/nf_tables_api.c
+++ b/net/netfilter/nf_tables_api.c
@@@ -8466,9 -10459,9 +8467,9 @@@ static int __nf_tables_abort(struct ne
  
  	if (action == NFNL_ABORT_VALIDATE &&
  	    nf_tables_validate(net) < 0)
- 		return -EAGAIN;
+ 		err = -EAGAIN;
  
 -	list_for_each_entry_safe_reverse(trans, next, &nft_net->commit_list,
 +	list_for_each_entry_safe_reverse(trans, next, &net->nft.commit_list,
  					 list) {
  		switch (trans->msg_type) {
  		case NFT_MSG_NEWTABLE:
@@@ -8614,14 -10656,9 +8615,14 @@@
  	else
  		nf_tables_module_autoload_cleanup(net);
  
- 	return 0;
+ 	return err;
  }
  
 +static void nf_tables_cleanup(struct net *net)
 +{
 +	nft_validate_state_update(net, NFT_VALIDATE_SKIP);
 +}
 +
  static int nf_tables_abort(struct net *net, struct sk_buff *skb,
  			   enum nfnl_abort_action action)
  {
@@@ -8632,7 -10669,10 +8633,14 @@@
  	gc_seq = nft_gc_seq_begin(nft_net);
  	ret = __nf_tables_abort(net, action);
  	nft_gc_seq_end(nft_net, gc_seq);
++<<<<<<< HEAD
 +	mutex_unlock(&net->nft_commit_mutex);
++=======
+ 
+ 	WARN_ON_ONCE(!list_empty(&nft_net->commit_list));
+ 
+ 	mutex_unlock(&nft_net->commit_mutex);
++>>>>>>> a45e6889575c (netfilter: nf_tables: release batch on table validation from abort path)
  
  	return ret;
  }
@@@ -9283,9 -11477,10 +9291,16 @@@ static void __net_exit nf_tables_exit_n
  
  	gc_seq = nft_gc_seq_begin(nft_net);
  
++<<<<<<< HEAD
 +	if (!list_empty(&net->nft.commit_list) ||
 +	    !list_empty(&net->nft_module_list))
 +		__nf_tables_abort(net, NFNL_ABORT_NONE);
++=======
+ 	WARN_ON_ONCE(!list_empty(&nft_net->commit_list));
+ 
+ 	if (!list_empty(&nft_net->module_list))
+ 		nf_tables_module_autoload_cleanup(net);
++>>>>>>> a45e6889575c (netfilter: nf_tables: release batch on table validation from abort path)
  
  	__nft_release_tables(net);
  
* Unmerged path net/netfilter/nf_tables_api.c
