virtio-blk: fix implicit overflow on virtio_max_dma_size

jira LE-1907
cve CVE-2023-52762
Rebuild_History Non-Buildable kernel-rt-4.18.0-553.16.1.rt7.357.el8_10
commit-author zhenwei pi <pizhenwei@bytedance.com>
commit fafb51a67fb883eb2dde352539df939a251851be
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-rt-4.18.0-553.16.1.rt7.357.el8_10/fafb51a6.failed

The following codes have an implicit conversion from size_t to u32:
(u32)max_size = (size_t)virtio_max_dma_size(vdev);

This may lead overflow, Ex (size_t)4G -> (u32)0. Once
virtio_max_dma_size() has a larger size than U32_MAX, use U32_MAX
instead.

	Signed-off-by: zhenwei pi <pizhenwei@bytedance.com>
Message-Id: <20230904061045.510460-1-pizhenwei@bytedance.com>
	Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
(cherry picked from commit fafb51a67fb883eb2dde352539df939a251851be)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/block/virtio_blk.c
diff --cc drivers/block/virtio_blk.c
index 8c858bbd05b5,4a4b9bad551e..000000000000
--- a/drivers/block/virtio_blk.c
+++ b/drivers/block/virtio_blk.c
@@@ -746,8 -1308,12 +746,13 @@@ static int virtblk_probe(struct virtio_
  	int err, index;
  
  	u32 v, blk_size, max_size, sg_elems, opt_io_size;
 -	u32 max_discard_segs = 0;
 -	u32 discard_granularity = 0;
  	u16 min_io_size;
  	u8 physical_block_exp, alignment_offset;
++<<<<<<< HEAD
++=======
+ 	unsigned int queue_depth;
+ 	size_t max_dma_size;
++>>>>>>> fafb51a67fb8 (virtio-blk: fix implicit overflow on virtio_max_dma_size)
  
  	if (!vdev->config->get) {
  		dev_err(&vdev->dev, "%s failure: config access disabled\n",
@@@ -843,12 -1407,13 +848,13 @@@
  		set_disk_ro(vblk->disk, 1);
  
  	/* We can handle whatever the host told us to handle. */
 -	blk_queue_max_segments(q, sg_elems);
 +	blk_queue_max_segments(q, vblk->sg_elems-2);
  
  	/* No real sector limit. */
 -	blk_queue_max_hw_sectors(q, UINT_MAX);
 +	blk_queue_max_hw_sectors(q, -1U);
  
- 	max_size = virtio_max_dma_size(vdev);
+ 	max_dma_size = virtio_max_dma_size(vdev);
+ 	max_size = max_dma_size > U32_MAX ? U32_MAX : max_dma_size;
  
  	/* Host can optionally specify maximum segment size and number of
  	 * segments. */
* Unmerged path drivers/block/virtio_blk.c
