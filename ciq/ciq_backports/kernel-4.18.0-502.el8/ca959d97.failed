net/mlx5e: Make all ttc functions of en_fs get fs struct as argument

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-502.el8
commit-author Lama Kayal <lkayal@nvidia.com>
commit ca959d97d6bba12c56459c6162f7ddc0173edbf9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-502.el8/ca959d97.failed

Let all ttc creation be independent of priv, and pass relevant members
of priv only.

	Signed-off-by: Lama Kayal <lkayal@nvidia.com>
	Reviewed-by: Tariq Toukan <tariqt@nvidia.com>
	Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
(cherry picked from commit ca959d97d6bba12c56459c6162f7ddc0173edbf9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en/fs.h
#	drivers/net/ethernet/mellanox/mlx5/core/en_fs.c
#	drivers/net/ethernet/mellanox/mlx5/core/ipoib/ipoib.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en/fs.h
index 9b8cdf2e68ad,3d86d8021958..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en/fs.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en/fs.h
@@@ -142,36 -123,13 +142,42 @@@ struct mlx5e_fs_udp
  struct mlx5e_fs_any;
  struct mlx5e_ptp_fs;
  
++<<<<<<< HEAD
 +struct mlx5e_flow_steering {
 +	bool				state_destroy;
 +	bool				vlan_strip_disable;
 +	struct mlx5_core_dev		*mdev;
 +	struct mlx5_flow_namespace      *ns;
 +#ifdef CONFIG_MLX5_EN_RXNFC
 +	struct mlx5e_ethtool_steering   ethtool;
 +#endif
 +	struct mlx5e_tc_table           *tc;
 +	struct mlx5e_promisc_table      promisc;
 +	struct mlx5e_vlan_table         *vlan;
 +	struct mlx5e_l2_table           l2;
 +	struct mlx5_ttc_table           *ttc;
 +	struct mlx5_ttc_table           *inner_ttc;
 +#ifdef CONFIG_MLX5_EN_ARFS
 +	struct mlx5e_arfs_tables       *arfs;
 +#endif
 +#ifdef CONFIG_MLX5_EN_TLS
 +	struct mlx5e_accel_fs_tcp      *accel_tcp;
 +#endif
 +	struct mlx5e_fs_udp            *udp;
 +	struct mlx5e_fs_any            *any;
 +	struct mlx5e_ptp_fs            *ptp_fs;
 +};
 +
 +void mlx5e_set_ttc_params(struct mlx5e_priv *priv,
++=======
+ void mlx5e_set_ttc_params(struct mlx5e_flow_steering *fs,
+ 			  struct mlx5e_rx_res *rx_res,
++>>>>>>> ca959d97d6bb (net/mlx5e: Make all ttc functions of en_fs get fs struct as argument)
  			  struct ttc_params *ttc_params, bool tunnel);
  
- void mlx5e_destroy_ttc_table(struct mlx5e_priv *priv);
- int mlx5e_create_ttc_table(struct mlx5e_priv *priv);
+ void mlx5e_destroy_ttc_table(struct mlx5e_flow_steering *fs);
+ int mlx5e_create_ttc_table(struct mlx5e_flow_steering  *fs,
+ 			   struct mlx5e_rx_res *rx_res);
  
  void mlx5e_destroy_flow_table(struct mlx5e_flow_table *ft);
  
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_fs.c
index 6768f21c4eb1,49bc52559896..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_fs.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_fs.c
@@@ -1267,32 -1297,33 +1271,46 @@@ int mlx5e_create_ttc_table(struct mlx5e
  
  int mlx5e_create_flow_steering(struct mlx5e_priv *priv)
  {
++<<<<<<< HEAD
++=======
+ 	struct mlx5_flow_namespace *ns = mlx5_get_flow_namespace(priv->fs->mdev,
+ 								 MLX5_FLOW_NAMESPACE_KERNEL);
+ 	struct mlx5e_rx_res *rx_res = priv->rx_res;
+ 	struct mlx5e_flow_steering *fs = priv->fs;
+ 
++>>>>>>> ca959d97d6bb (net/mlx5e: Make all ttc functions of en_fs get fs struct as argument)
  	int err;
  
 -	if (!ns)
 +	priv->fs->ns = mlx5_get_flow_namespace(priv->fs->mdev,
 +					       MLX5_FLOW_NAMESPACE_KERNEL);
 +
 +	if (!priv->fs->ns)
  		return -EOPNOTSUPP;
  
++<<<<<<< HEAD
 +	err = mlx5e_arfs_create_tables(priv);
++=======
+ 	mlx5e_fs_set_ns(fs, ns, false);
+ 	err = mlx5e_arfs_create_tables(fs, rx_res,
+ 				       !!(priv->netdev->hw_features & NETIF_F_NTUPLE));
++>>>>>>> ca959d97d6bb (net/mlx5e: Make all ttc functions of en_fs get fs struct as argument)
  	if (err) {
 -		fs_err(fs, "Failed to create arfs tables, err=%d\n", err);
 +		mlx5_core_err(priv->fs->mdev, "Failed to create arfs tables, err=%d\n",
 +			      err);
  		priv->netdev->hw_features &= ~NETIF_F_NTUPLE;
  	}
  
- 	err = mlx5e_create_inner_ttc_table(priv);
+ 	err = mlx5e_create_inner_ttc_table(fs, rx_res);
  	if (err) {
 -		fs_err(fs, "Failed to create inner ttc table, err=%d\n", err);
 +		mlx5_core_err(priv->fs->mdev,
 +			      "Failed to create inner ttc table, err=%d\n", err);
  		goto err_destroy_arfs_tables;
  	}
  
- 	err = mlx5e_create_ttc_table(priv);
+ 	err = mlx5e_create_ttc_table(fs, rx_res);
  	if (err) {
 -		fs_err(fs, "Failed to create ttc table, err=%d\n", err);
 +		mlx5_core_err(priv->fs->mdev, "Failed to create ttc table, err=%d\n",
 +			      err);
  		goto err_destroy_inner_ttc_table;
  	}
  
@@@ -1334,13 -1364,14 +1352,13 @@@ err_destroy_arfs_tables
  
  void mlx5e_destroy_flow_steering(struct mlx5e_priv *priv)
  {
 -	mlx5e_ptp_free_rx_fs(priv->fs, priv->profile);
 +	mlx5e_ptp_free_rx_fs(priv);
  	mlx5e_destroy_vlan_table(priv);
  	mlx5e_destroy_l2_table(priv);
- 	mlx5e_destroy_ttc_table(priv);
+ 	mlx5e_destroy_ttc_table(priv->fs);
  	mlx5e_destroy_inner_ttc_table(priv);
 -	mlx5e_arfs_destroy_tables(priv->fs,
 -				  !!(priv->netdev->hw_features & NETIF_F_NTUPLE));
 -	mlx5e_ethtool_cleanup_steering(priv->fs);
 +	mlx5e_arfs_destroy_tables(priv);
 +	mlx5e_ethtool_cleanup_steering(priv);
  }
  
  static int mlx5e_fs_vlan_alloc(struct mlx5e_flow_steering *fs)
diff --cc drivers/net/ethernet/mellanox/mlx5/core/ipoib/ipoib.c
index d84889d6efe2,35f797cfd21e..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/ipoib/ipoib.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/ipoib/ipoib.c
@@@ -396,9 -358,10 +396,16 @@@ err_destroy_arfs_tables
  
  static void mlx5i_destroy_flow_steering(struct mlx5e_priv *priv)
  {
++<<<<<<< HEAD
 +	mlx5e_destroy_ttc_table(priv);
 +	mlx5e_arfs_destroy_tables(priv);
 +	mlx5e_ethtool_cleanup_steering(priv);
++=======
+ 	mlx5e_destroy_ttc_table(priv->fs);
+ 	mlx5e_arfs_destroy_tables(priv->fs,
+ 				  !!(priv->netdev->hw_features & NETIF_F_NTUPLE));
+ 	mlx5e_ethtool_cleanup_steering(priv->fs);
++>>>>>>> ca959d97d6bb (net/mlx5e: Make all ttc functions of en_fs get fs struct as argument)
  }
  
  static int mlx5i_init_rx(struct mlx5e_priv *priv)
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en/fs.h
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_fs.c
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en_rep.c b/drivers/net/ethernet/mellanox/mlx5/core/en_rep.c
index 458283eaa812..5fba5c0ac5ed 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_rep.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_rep.c
@@ -751,7 +751,7 @@ static int mlx5e_create_rep_ttc_table(struct mlx5e_priv *priv)
 					       MLX5_FLOW_NAMESPACE_KERNEL);
 
 	/* The inner_ttc in the ttc params is intentionally not set */
-	mlx5e_set_ttc_params(priv, &ttc_params, false);
+	mlx5e_set_ttc_params(priv->fs, priv->rx_res, &ttc_params, false);
 
 	if (rep->vport != MLX5_VPORT_UPLINK)
 		/* To give uplik rep TTC a lower level for chaining from root ft */
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/ipoib/ipoib.c
