kunit: Use KUNIT_EXPECT_MEMEQ macro

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-502.el8
Rebuild_CHGLOG: - Revert "kunit: Use KUNIT_EXPECT_MEMEQ macro" (Jocelyn Falempe) [2160452]
Rebuild_FUZZ: 88.61%
commit-author Maíra Canal <mairacanal@riseup.net>
commit a52a5451f43bb76743c51dd46788008837243f29
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-502.el8/a52a5451.failed

Use KUNIT_EXPECT_MEMEQ to compare memory blocks in replacement of the
KUNIT_EXPECT_EQ macro. Therefor, the statement

    KUNIT_EXPECT_EQ(test, memcmp(foo, bar, size), 0);

is replaced by:

    KUNIT_EXPECT_MEMEQ(test, foo, bar, size);

	Signed-off-by: Maíra Canal <mairacanal@riseup.net>
	Acked-by: Daniel Latypov <dlatypov@google.com>
	Reviewed-by: David Gow <davidgow@google.com>
	Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>
(cherry picked from commit a52a5451f43bb76743c51dd46788008837243f29)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/tests/drm_format_helper_test.c
diff --cc drivers/gpu/drm/tests/drm_format_helper_test.c
index eefaba3aaea2,567c71f95edc..000000000000
--- a/drivers/gpu/drm/tests/drm_format_helper_test.c
+++ b/drivers/gpu/drm/tests/drm_format_helper_test.c
@@@ -151,15 -306,140 +151,144 @@@ static void xrgb8888_to_rgb332_test(str
  				       &params->clip);
  	KUNIT_ASSERT_GT(test, dst_size, 0);
  
 -	buf = kunit_kzalloc(test, dst_size, GFP_KERNEL);
 -	KUNIT_ASSERT_NOT_ERR_OR_NULL(test, buf);
 -	iosys_map_set_vaddr(&dst, buf);
 +	dst = kunit_kzalloc(test, dst_size, GFP_KERNEL);
 +	KUNIT_ASSERT_NOT_ERR_OR_NULL(test, dst);
  
 -	xrgb8888 = le32buf_to_cpu(test, params->xrgb8888, TEST_BUF_SIZE);
 -	KUNIT_ASSERT_NOT_ERR_OR_NULL(test, xrgb8888);
 -	iosys_map_set_vaddr(&src, xrgb8888);
 +	src = le32buf_to_cpu(test, params->xrgb8888, TEST_BUF_SIZE);
 +	KUNIT_ASSERT_NOT_ERR_OR_NULL(test, src);
  
++<<<<<<< HEAD
 +	drm_fb_xrgb8888_to_rgb332(dst, params->dst_pitch, src, &fb,
 +				  &params->clip);
 +	KUNIT_EXPECT_EQ(test, memcmp(dst, params->expected, dst_size), 0);
++=======
+ 	drm_fb_xrgb8888_to_gray8(&dst, &result->dst_pitch, &src, &fb, &params->clip);
+ 	KUNIT_EXPECT_MEMEQ(test, buf, result->expected, dst_size);
+ }
+ 
+ static void drm_test_fb_xrgb8888_to_rgb332(struct kunit *test)
+ {
+ 	const struct convert_xrgb8888_case *params = test->param_value;
+ 	const struct convert_to_rgb332_result *result = &params->rgb332_result;
+ 	size_t dst_size;
+ 	__u8 *buf = NULL;
+ 	__u32 *xrgb8888 = NULL;
+ 	struct iosys_map dst, src;
+ 
+ 	struct drm_framebuffer fb = {
+ 		.format = drm_format_info(DRM_FORMAT_XRGB8888),
+ 		.pitches = { params->pitch, 0, 0 },
+ 	};
+ 
+ 	dst_size = conversion_buf_size(DRM_FORMAT_RGB332, result->dst_pitch,
+ 				       &params->clip);
+ 	KUNIT_ASSERT_GT(test, dst_size, 0);
+ 
+ 	buf = kunit_kzalloc(test, dst_size, GFP_KERNEL);
+ 	KUNIT_ASSERT_NOT_ERR_OR_NULL(test, buf);
+ 	iosys_map_set_vaddr(&dst, buf);
+ 
+ 	xrgb8888 = le32buf_to_cpu(test, params->xrgb8888, TEST_BUF_SIZE);
+ 	KUNIT_ASSERT_NOT_ERR_OR_NULL(test, xrgb8888);
+ 	iosys_map_set_vaddr(&src, xrgb8888);
+ 
+ 	drm_fb_xrgb8888_to_rgb332(&dst, &result->dst_pitch, &src, &fb, &params->clip);
+ 	KUNIT_EXPECT_MEMEQ(test, buf, result->expected, dst_size);
+ }
+ 
+ static void drm_test_fb_xrgb8888_to_rgb565(struct kunit *test)
+ {
+ 	const struct convert_xrgb8888_case *params = test->param_value;
+ 	const struct convert_to_rgb565_result *result = &params->rgb565_result;
+ 	size_t dst_size;
+ 	__u16 *buf = NULL;
+ 	__u32 *xrgb8888 = NULL;
+ 	struct iosys_map dst, src;
+ 
+ 	struct drm_framebuffer fb = {
+ 		.format = drm_format_info(DRM_FORMAT_XRGB8888),
+ 		.pitches = { params->pitch, 0, 0 },
+ 	};
+ 
+ 	dst_size = conversion_buf_size(DRM_FORMAT_RGB565, result->dst_pitch,
+ 				       &params->clip);
+ 	KUNIT_ASSERT_GT(test, dst_size, 0);
+ 
+ 	buf = kunit_kzalloc(test, dst_size, GFP_KERNEL);
+ 	KUNIT_ASSERT_NOT_ERR_OR_NULL(test, buf);
+ 	iosys_map_set_vaddr(&dst, buf);
+ 
+ 	xrgb8888 = le32buf_to_cpu(test, params->xrgb8888, TEST_BUF_SIZE);
+ 	KUNIT_ASSERT_NOT_ERR_OR_NULL(test, xrgb8888);
+ 	iosys_map_set_vaddr(&src, xrgb8888);
+ 
+ 	drm_fb_xrgb8888_to_rgb565(&dst, &result->dst_pitch, &src, &fb, &params->clip, false);
+ 	KUNIT_EXPECT_MEMEQ(test, buf, result->expected, dst_size);
+ 
+ 	drm_fb_xrgb8888_to_rgb565(&dst, &result->dst_pitch, &src, &fb, &params->clip, true);
+ 	KUNIT_EXPECT_MEMEQ(test, buf, result->expected_swab, dst_size);
+ }
+ 
+ static void drm_test_fb_xrgb8888_to_rgb888(struct kunit *test)
+ {
+ 	const struct convert_xrgb8888_case *params = test->param_value;
+ 	const struct convert_to_rgb888_result *result = &params->rgb888_result;
+ 	size_t dst_size;
+ 	__u8 *buf = NULL;
+ 	__u32 *xrgb8888 = NULL;
+ 	struct iosys_map dst, src;
+ 
+ 	struct drm_framebuffer fb = {
+ 		.format = drm_format_info(DRM_FORMAT_XRGB8888),
+ 		.pitches = { params->pitch, 0, 0 },
+ 	};
+ 
+ 	dst_size = conversion_buf_size(DRM_FORMAT_RGB888, result->dst_pitch,
+ 				       &params->clip);
+ 	KUNIT_ASSERT_GT(test, dst_size, 0);
+ 
+ 	buf = kunit_kzalloc(test, dst_size, GFP_KERNEL);
+ 	KUNIT_ASSERT_NOT_ERR_OR_NULL(test, buf);
+ 	iosys_map_set_vaddr(&dst, buf);
+ 
+ 	xrgb8888 = le32buf_to_cpu(test, params->xrgb8888, TEST_BUF_SIZE);
+ 	KUNIT_ASSERT_NOT_ERR_OR_NULL(test, xrgb8888);
+ 	iosys_map_set_vaddr(&src, xrgb8888);
+ 
+ 	drm_fb_xrgb8888_to_rgb888(&dst, &result->dst_pitch, &src, &fb, &params->clip);
+ 	KUNIT_EXPECT_MEMEQ(test, buf, result->expected, dst_size);
+ }
+ 
+ static void drm_test_fb_xrgb8888_to_xrgb2101010(struct kunit *test)
+ {
+ 	const struct convert_xrgb8888_case *params = test->param_value;
+ 	const struct convert_to_xrgb2101010_result *result = &params->xrgb2101010_result;
+ 	size_t dst_size;
+ 	__u32 *buf = NULL;
+ 	__u32 *xrgb8888 = NULL;
+ 	struct iosys_map dst, src;
+ 
+ 	struct drm_framebuffer fb = {
+ 		.format = drm_format_info(DRM_FORMAT_XRGB8888),
+ 		.pitches = { params->pitch, 0, 0 },
+ 	};
+ 
+ 	dst_size = conversion_buf_size(DRM_FORMAT_XRGB2101010,
+ 				       result->dst_pitch, &params->clip);
+ 	KUNIT_ASSERT_GT(test, dst_size, 0);
+ 
+ 	buf = kunit_kzalloc(test, dst_size, GFP_KERNEL);
+ 	KUNIT_ASSERT_NOT_ERR_OR_NULL(test, buf);
+ 	iosys_map_set_vaddr(&dst, buf);
+ 
+ 	xrgb8888 = le32buf_to_cpu(test, params->xrgb8888, TEST_BUF_SIZE);
+ 	KUNIT_ASSERT_NOT_ERR_OR_NULL(test, xrgb8888);
+ 	iosys_map_set_vaddr(&src, xrgb8888);
+ 
+ 	drm_fb_xrgb8888_to_xrgb2101010(&dst, &result->dst_pitch, &src, &fb, &params->clip);
+ 	buf = le32buf_to_cpu(test, buf, dst_size / sizeof(u32));
+ 	KUNIT_EXPECT_MEMEQ(test, buf, result->expected, dst_size);
++>>>>>>> a52a5451f43b (kunit: Use KUNIT_EXPECT_MEMEQ macro)
  }
  
  static struct kunit_case drm_format_helper_test_cases[] = {
* Unmerged path drivers/gpu/drm/tests/drm_format_helper_test.c
diff --git a/net/core/dev_addr_lists_test.c b/net/core/dev_addr_lists_test.c
index 049cfbc58aa9..90e7e3811ae7 100644
--- a/net/core/dev_addr_lists_test.c
+++ b/net/core/dev_addr_lists_test.c
@@ -71,11 +71,11 @@ static void dev_addr_test_basic(struct kunit *test)
 
 	memset(addr, 2, sizeof(addr));
 	eth_hw_addr_set(netdev, addr);
-	KUNIT_EXPECT_EQ(test, 0, memcmp(netdev->dev_addr, addr, sizeof(addr)));
+	KUNIT_EXPECT_MEMEQ(test, netdev->dev_addr, addr, sizeof(addr));
 
 	memset(addr, 3, sizeof(addr));
 	dev_addr_set(netdev, addr);
-	KUNIT_EXPECT_EQ(test, 0, memcmp(netdev->dev_addr, addr, sizeof(addr)));
+	KUNIT_EXPECT_MEMEQ(test, netdev->dev_addr, addr, sizeof(addr));
 }
 
 static void dev_addr_test_sync_one(struct kunit *test)
