x86/microcode: Add a parameter to microcode_check() to store CPU capabilities

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-502.el8
commit-author Ashok Raj <ashok.raj@intel.com>
commit ab31c74455c64e69342ddab21fd9426fcbfefde7
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-502.el8/ab31c744.failed

Add a parameter to store CPU capabilities before performing a microcode
update so that CPU capabilities can be compared before and after update.

  [ bp: Massage. ]

	Signed-off-by: Ashok Raj <ashok.raj@intel.com>
	Signed-off-by: Borislav Petkov (AMD) <bp@alien8.de>
Link: https://lore.kernel.org/r/20230109153555.4986-2-ashok.raj@intel.com
(cherry picked from commit ab31c74455c64e69342ddab21fd9426fcbfefde7)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/include/asm/processor.h
#	arch/x86/kernel/cpu/common.c
diff --cc arch/x86/include/asm/processor.h
index 605740dfd017,f256a4ddd25d..000000000000
--- a/arch/x86/include/asm/processor.h
+++ b/arch/x86/include/asm/processor.h
@@@ -917,9 -696,8 +917,14 @@@ bool xen_set_default_idle(void)
  #define xen_set_default_idle 0
  #endif
  
++<<<<<<< HEAD
 +void stop_this_cpu(void *dummy);
 +void df_debug(struct pt_regs *regs, long error_code);
 +void microcode_check(void);
++=======
+ void __noreturn stop_this_cpu(void *dummy);
+ void microcode_check(struct cpuinfo_x86 *prev_info);
++>>>>>>> ab31c74455c6 (x86/microcode: Add a parameter to microcode_check() to store CPU capabilities)
  
  enum l1tf_mitigations {
  	L1TF_MITIGATION_OFF,
diff --cc arch/x86/kernel/cpu/common.c
index e2a0a17f458d,0f5a173d0871..000000000000
--- a/arch/x86/kernel/cpu/common.c
+++ b/arch/x86/kernel/cpu/common.c
@@@ -2181,7 -2296,11 +2181,15 @@@ void cpu_init_secondary(void
  }
  #endif
  
++<<<<<<< HEAD
 +/*
++=======
+ #ifdef CONFIG_MICROCODE_LATE_LOADING
+ /**
+  * microcode_check() - Check if any CPU capabilities changed after an update.
+  * @prev_info:	CPU capabilities stored before an update.
+  *
++>>>>>>> ab31c74455c6 (x86/microcode: Add a parameter to microcode_check() to store CPU capabilities)
   * The microcode loader calls this upon late microcode load to recheck features,
   * only when microcode has been updated. Caller holds microcode_mutex and CPU
   * hotplug lock.
* Unmerged path arch/x86/include/asm/processor.h
* Unmerged path arch/x86/kernel/cpu/common.c
diff --git a/arch/x86/kernel/cpu/microcode/core.c b/arch/x86/kernel/cpu/microcode/core.c
index 689767956c19..b45f0d170604 100644
--- a/arch/x86/kernel/cpu/microcode/core.c
+++ b/arch/x86/kernel/cpu/microcode/core.c
@@ -602,6 +602,7 @@ static int __reload_late(void *info)
 static int microcode_reload_late(void)
 {
 	int old = boot_cpu_data.microcode, ret;
+	struct cpuinfo_x86 prev_info;
 
 	pr_err("Attempting late microcode loading - it is dangerous and taints the kernel.\n");
 	pr_err("You should switch to early loading, if possible.\n");
@@ -611,7 +612,7 @@ static int microcode_reload_late(void)
 
 	ret = stop_machine_cpuslocked(__reload_late, NULL, cpu_online_mask);
 	if (ret == 0)
-		microcode_check();
+		microcode_check(&prev_info);
 
 	pr_info("Reload completed, microcode revision: 0x%x -> 0x%x\n",
 		old, boot_cpu_data.microcode);
