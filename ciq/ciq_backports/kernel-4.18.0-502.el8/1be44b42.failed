net/mlx5e: Decouple fs_tcp from en.h

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-502.el8
commit-author Lama Kayal <lkayal@nvidia.com>
commit 1be44b42b25cfe66d6e55630478aabbc8d8f3bc7
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-502.el8/1be44b42.failed

Make flow steering files fs_tcp.c/h independent of en.h
such that they go through the flow steering API only.

Make error reports be via mlx5_core API instead of netdev_err API, this
to ensure a safe decoupling from en.h, and prevent redundant argument
passing.

	Signed-off-by: Lama Kayal <lkayal@nvidia.com>
	Reviewed-by: Tariq Toukan <tariqt@nvidia.com>
	Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
(cherry picked from commit 1be44b42b25cfe66d6e55630478aabbc8d8f3bc7)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en_accel/fs_tcp.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_accel/fs_tcp.c
index 20a4f1e585af,7f0564ab95eb..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_accel/fs_tcp.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_accel/fs_tcp.c
@@@ -75,9 -75,9 +75,13 @@@ struct mlx5_flow_handle *mlx5e_accel_fs
  					       struct sock *sk, u32 tirn,
  					       uint32_t flow_tag)
  {
++<<<<<<< HEAD
++=======
+ 	struct mlx5e_accel_fs_tcp *fs_tcp = mlx5e_fs_get_accel_tcp(fs);
++>>>>>>> 1be44b42b25c (net/mlx5e: Decouple fs_tcp from en.h)
  	struct mlx5_flow_destination dest = {};
  	struct mlx5e_flow_table *ft = NULL;
 +	struct mlx5e_accel_fs_tcp *fs_tcp;
  	MLX5_DECLARE_FLOW_ACT(flow_act);
  	struct mlx5_flow_handle *flow;
  	struct mlx5_flow_spec *spec;
@@@ -148,12 -146,13 +152,17 @@@ out
  	return flow;
  }
  
- static int accel_fs_tcp_add_default_rule(struct mlx5e_priv *priv,
+ static int accel_fs_tcp_add_default_rule(struct mlx5e_flow_steering *fs,
  					 enum accel_fs_tcp_type type)
  {
++<<<<<<< HEAD
++=======
+ 	struct mlx5e_accel_fs_tcp *fs_tcp = mlx5e_fs_get_accel_tcp(fs);
+ 	struct mlx5_ttc_table *ttc = mlx5e_fs_get_ttc(fs, false);
++>>>>>>> 1be44b42b25c (net/mlx5e: Decouple fs_tcp from en.h)
  	struct mlx5e_flow_table *accel_fs_t;
  	struct mlx5_flow_destination dest;
 +	struct mlx5e_accel_fs_tcp *fs_tcp;
  	MLX5_DECLARE_FLOW_ACT(flow_act);
  	struct mlx5_flow_handle *rule;
  	int err = 0;
@@@ -265,9 -263,11 +274,15 @@@ out
  	return err;
  }
  
- static int accel_fs_tcp_create_table(struct mlx5e_priv *priv, enum accel_fs_tcp_type type)
+ static int accel_fs_tcp_create_table(struct mlx5e_flow_steering *fs, enum accel_fs_tcp_type type)
  {
++<<<<<<< HEAD
 +	struct mlx5e_flow_table *ft = &priv->fs->accel_tcp->tables[type];
++=======
+ 	struct mlx5e_accel_fs_tcp *accel_tcp = mlx5e_fs_get_accel_tcp(fs);
+ 	struct mlx5_flow_namespace *ns = mlx5e_fs_get_ns(fs, false);
+ 	struct mlx5e_flow_table *ft = &accel_tcp->tables[type];
++>>>>>>> 1be44b42b25c (net/mlx5e: Decouple fs_tcp from en.h)
  	struct mlx5_flow_table_attr ft_attr = {};
  	int err;
  
@@@ -301,17 -301,18 +316,21 @@@ err
  	return err;
  }
  
- static int accel_fs_tcp_disable(struct mlx5e_priv *priv)
+ static int accel_fs_tcp_disable(struct mlx5e_flow_steering *fs)
  {
++<<<<<<< HEAD
++=======
+ 	struct mlx5_ttc_table *ttc = mlx5e_fs_get_ttc(fs, false);
++>>>>>>> 1be44b42b25c (net/mlx5e: Decouple fs_tcp from en.h)
  	int err, i;
  
  	for (i = 0; i < ACCEL_FS_TCP_NUM_TYPES; i++) {
  		/* Modify ttc rules destination to point back to the indir TIRs */
 -		err = mlx5_ttc_fwd_default_dest(ttc, fs_accel2tt(i));
 +		err = mlx5_ttc_fwd_default_dest(priv->fs->ttc, fs_accel2tt(i));
  		if (err) {
- 			netdev_err(priv->netdev,
- 				   "%s: modify ttc[%d] default destination failed, err(%d)\n",
- 				   __func__, fs_accel2tt(i), err);
+ 			mlx5_core_err(mlx5e_fs_get_mdev(fs),
+ 				      "%s: modify ttc[%d] default destination failed, err(%d)\n",
+ 				      __func__, fs_accel2tt(i), err);
  			return err;
  		}
  	}
@@@ -319,32 -320,33 +338,41 @@@
  	return 0;
  }
  
- static int accel_fs_tcp_enable(struct mlx5e_priv *priv)
+ static int accel_fs_tcp_enable(struct mlx5e_flow_steering *fs)
  {
++<<<<<<< HEAD
++=======
+ 	struct mlx5e_accel_fs_tcp *accel_tcp = mlx5e_fs_get_accel_tcp(fs);
+ 	struct mlx5_ttc_table *ttc = mlx5e_fs_get_ttc(fs, false);
++>>>>>>> 1be44b42b25c (net/mlx5e: Decouple fs_tcp from en.h)
  	struct mlx5_flow_destination dest = {};
  	int err, i;
  
  	dest.type = MLX5_FLOW_DESTINATION_TYPE_FLOW_TABLE;
  	for (i = 0; i < ACCEL_FS_TCP_NUM_TYPES; i++) {
 -		dest.ft = accel_tcp->tables[i].t;
 +		dest.ft = priv->fs->accel_tcp->tables[i].t;
  
  		/* Modify ttc rules destination to point on the accel_fs FTs */
 -		err = mlx5_ttc_fwd_dest(ttc, fs_accel2tt(i), &dest);
 +		err = mlx5_ttc_fwd_dest(priv->fs->ttc, fs_accel2tt(i), &dest);
  		if (err) {
- 			netdev_err(priv->netdev,
- 				   "%s: modify ttc[%d] destination to accel failed, err(%d)\n",
- 				   __func__, fs_accel2tt(i), err);
+ 			mlx5_core_err(mlx5e_fs_get_mdev(fs),
+ 				      "%s: modify ttc[%d] destination to accel failed, err(%d)\n",
+ 				      __func__, fs_accel2tt(i), err);
  			return err;
  		}
  	}
  	return 0;
  }
  
- static void accel_fs_tcp_destroy_table(struct mlx5e_priv *priv, int i)
+ static void accel_fs_tcp_destroy_table(struct mlx5e_flow_steering *fs, int i)
  {
++<<<<<<< HEAD
 +	struct mlx5e_accel_fs_tcp *fs_tcp;
++=======
+ 	struct mlx5e_accel_fs_tcp *fs_tcp = mlx5e_fs_get_accel_tcp(fs);
++>>>>>>> 1be44b42b25c (net/mlx5e: Decouple fs_tcp from en.h)
  
 +	fs_tcp = priv->fs->accel_tcp;
  	if (IS_ERR_OR_NULL(fs_tcp->tables[i].t))
  		return;
  
@@@ -353,35 -355,38 +381,48 @@@
  	fs_tcp->tables[i].t = NULL;
  }
  
- void mlx5e_accel_fs_tcp_destroy(struct mlx5e_priv *priv)
+ void mlx5e_accel_fs_tcp_destroy(struct mlx5e_flow_steering *fs)
  {
++<<<<<<< HEAD
++=======
+ 	struct mlx5e_accel_fs_tcp *accel_tcp = mlx5e_fs_get_accel_tcp(fs);
++>>>>>>> 1be44b42b25c (net/mlx5e: Decouple fs_tcp from en.h)
  	int i;
  
 -	if (!accel_tcp)
 +	if (!priv->fs->accel_tcp)
  		return;
  
- 	accel_fs_tcp_disable(priv);
+ 	accel_fs_tcp_disable(fs);
  
  	for (i = 0; i < ACCEL_FS_TCP_NUM_TYPES; i++)
- 		accel_fs_tcp_destroy_table(priv, i);
+ 		accel_fs_tcp_destroy_table(fs, i);
  
++<<<<<<< HEAD
 +	kfree(priv->fs->accel_tcp);
 +	priv->fs->accel_tcp = NULL;
++=======
+ 	kfree(accel_tcp);
+ 	mlx5e_fs_set_accel_tcp(fs, NULL);
++>>>>>>> 1be44b42b25c (net/mlx5e: Decouple fs_tcp from en.h)
  }
  
- int mlx5e_accel_fs_tcp_create(struct mlx5e_priv *priv)
+ int mlx5e_accel_fs_tcp_create(struct mlx5e_flow_steering *fs)
  {
 -	struct mlx5e_accel_fs_tcp *accel_tcp;
  	int i, err;
  
- 	if (!MLX5_CAP_FLOWTABLE_NIC_RX(priv->mdev, ft_field_support.outer_ip_version))
+ 	if (!MLX5_CAP_FLOWTABLE_NIC_RX(mlx5e_fs_get_mdev(fs), ft_field_support.outer_ip_version))
  		return -EOPNOTSUPP;
  
 -	accel_tcp = kvzalloc(sizeof(*accel_tcp), GFP_KERNEL);
 -	if (!accel_tcp)
 +	priv->fs->accel_tcp = kzalloc(sizeof(*priv->fs->accel_tcp), GFP_KERNEL);
 +	if (!priv->fs->accel_tcp)
  		return -ENOMEM;
++<<<<<<< HEAD
++=======
+ 	mlx5e_fs_set_accel_tcp(fs, accel_tcp);
++>>>>>>> 1be44b42b25c (net/mlx5e: Decouple fs_tcp from en.h)
  
  	for (i = 0; i < ACCEL_FS_TCP_NUM_TYPES; i++) {
- 		err = accel_fs_tcp_create_table(priv, i);
+ 		err = accel_fs_tcp_create_table(fs, i);
  		if (err)
  			goto err_destroy_tables;
  	}
@@@ -394,9 -399,8 +435,15 @@@
  
  err_destroy_tables:
  	while (--i >= 0)
++<<<<<<< HEAD
 +		accel_fs_tcp_destroy_table(priv, i);
 +
 +	kfree(priv->fs->accel_tcp);
 +	priv->fs->accel_tcp = NULL;
++=======
+ 		accel_fs_tcp_destroy_table(fs, i);
+ 	kfree(accel_tcp);
+ 	mlx5e_fs_set_accel_tcp(fs, NULL);
++>>>>>>> 1be44b42b25c (net/mlx5e: Decouple fs_tcp from en.h)
  	return err;
  }
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_accel/fs_tcp.c
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en_accel/fs_tcp.h b/drivers/net/ethernet/mellanox/mlx5/core/en_accel/fs_tcp.h
index 589235824543..a032bff482a6 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_accel/fs_tcp.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_accel/fs_tcp.h
@@ -4,19 +4,19 @@
 #ifndef __MLX5E_ACCEL_FS_TCP_H__
 #define __MLX5E_ACCEL_FS_TCP_H__
 
-#include "en.h"
+#include "en/fs.h"
 
 #ifdef CONFIG_MLX5_EN_TLS
-int mlx5e_accel_fs_tcp_create(struct mlx5e_priv *priv);
-void mlx5e_accel_fs_tcp_destroy(struct mlx5e_priv *priv);
-struct mlx5_flow_handle *mlx5e_accel_fs_add_sk(struct mlx5e_priv *priv,
+int mlx5e_accel_fs_tcp_create(struct mlx5e_flow_steering *fs);
+void mlx5e_accel_fs_tcp_destroy(struct mlx5e_flow_steering *fs);
+struct mlx5_flow_handle *mlx5e_accel_fs_add_sk(struct mlx5e_flow_steering *fs,
 					       struct sock *sk, u32 tirn,
 					       uint32_t flow_tag);
 void mlx5e_accel_fs_del_sk(struct mlx5_flow_handle *rule);
 #else
-static inline int mlx5e_accel_fs_tcp_create(struct mlx5e_priv *priv) { return 0; }
-static inline void mlx5e_accel_fs_tcp_destroy(struct mlx5e_priv *priv) {}
-static inline struct mlx5_flow_handle *mlx5e_accel_fs_add_sk(struct mlx5e_priv *priv,
+static inline int mlx5e_accel_fs_tcp_create(struct mlx5e_flow_steering *fs) { return 0; }
+static inline void mlx5e_accel_fs_tcp_destroy(struct mlx5e_flow_steering *fs) {}
+static inline struct mlx5_flow_handle *mlx5e_accel_fs_add_sk(struct mlx5e_flow_steering *fs,
 							     struct sock *sk, u32 tirn,
 							     uint32_t flow_tag)
 { return ERR_PTR(-EOPNOTSUPP); }
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en_accel/ktls.c b/drivers/net/ethernet/mellanox/mlx5/core/en_accel/ktls.c
index 30a70d139046..c0b77963cc7c 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_accel/ktls.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_accel/ktls.c
@@ -118,9 +118,9 @@ int mlx5e_ktls_set_feature_rx(struct net_device *netdev, bool enable)
 
 	mutex_lock(&priv->state_lock);
 	if (enable)
-		err = mlx5e_accel_fs_tcp_create(priv);
+		err = mlx5e_accel_fs_tcp_create(priv->fs);
 	else
-		mlx5e_accel_fs_tcp_destroy(priv);
+		mlx5e_accel_fs_tcp_destroy(priv->fs);
 	mutex_unlock(&priv->state_lock);
 
 	return err;
@@ -138,7 +138,7 @@ int mlx5e_ktls_init_rx(struct mlx5e_priv *priv)
 		return -ENOMEM;
 
 	if (priv->netdev->features & NETIF_F_HW_TLS_RX) {
-		err = mlx5e_accel_fs_tcp_create(priv);
+		err = mlx5e_accel_fs_tcp_create(priv->fs);
 		if (err) {
 			destroy_workqueue(priv->tls->rx_wq);
 			return err;
@@ -154,7 +154,7 @@ void mlx5e_ktls_cleanup_rx(struct mlx5e_priv *priv)
 		return;
 
 	if (priv->netdev->features & NETIF_F_HW_TLS_RX)
-		mlx5e_accel_fs_tcp_destroy(priv);
+		mlx5e_accel_fs_tcp_destroy(priv->fs);
 
 	destroy_workqueue(priv->tls->rx_wq);
 }
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en_accel/ktls_rx.c b/drivers/net/ethernet/mellanox/mlx5/core/en_accel/ktls_rx.c
index 27483aa7be8a..13145ecaf839 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_accel/ktls_rx.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_accel/ktls_rx.c
@@ -111,7 +111,7 @@ static void accel_rule_handle_work(struct work_struct *work)
 	if (unlikely(test_bit(MLX5E_PRIV_RX_FLAG_DELETING, priv_rx->flags)))
 		goto out;
 
-	rule = mlx5e_accel_fs_add_sk(accel_rule->priv, priv_rx->sk,
+	rule = mlx5e_accel_fs_add_sk(accel_rule->priv->fs, priv_rx->sk,
 				     mlx5e_tir_get_tirn(&priv_rx->tir),
 				     MLX5_FS_DEFAULT_FLOW_TAG);
 	if (!IS_ERR_OR_NULL(rule))
