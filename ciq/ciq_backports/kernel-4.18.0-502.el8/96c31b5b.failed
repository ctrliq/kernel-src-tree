net/mlx5e: Use kzalloc() in mlx5e_accel_fs_tcp_create()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-502.el8
commit-author YueHaibing <yuehaibing@huawei.com>
commit 96c31b5b2caecae2eebb1ed0fba5dc082b2fb740
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-502.el8/96c31b5b.failed

'accel_tcp' is allocted by kvzalloc() now, which is a small chunk.
Use kzalloc() directly instead of kvzalloc().

	Signed-off-by: YueHaibing <yuehaibing@huawei.com>
	Reviewed-by: Tariq Toukan <tariqt@nvidia.com>
	Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
(cherry picked from commit 96c31b5b2caecae2eebb1ed0fba5dc082b2fb740)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en_accel/fs_tcp.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_accel/fs_tcp.c
index 20a4f1e585af,88a5aed9d678..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_accel/fs_tcp.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_accel/fs_tcp.c
@@@ -353,35 -352,38 +353,45 @@@ static void accel_fs_tcp_destroy_table(
  	fs_tcp->tables[i].t = NULL;
  }
  
 -void mlx5e_accel_fs_tcp_destroy(struct mlx5e_flow_steering *fs)
 +void mlx5e_accel_fs_tcp_destroy(struct mlx5e_priv *priv)
  {
 -	struct mlx5e_accel_fs_tcp *accel_tcp = mlx5e_fs_get_accel_tcp(fs);
  	int i;
  
 -	if (!accel_tcp)
 +	if (!priv->fs->accel_tcp)
  		return;
  
 -	accel_fs_tcp_disable(fs);
 +	accel_fs_tcp_disable(priv);
  
  	for (i = 0; i < ACCEL_FS_TCP_NUM_TYPES; i++)
 -		accel_fs_tcp_destroy_table(fs, i);
 +		accel_fs_tcp_destroy_table(priv, i);
  
++<<<<<<< HEAD
 +	kfree(priv->fs->accel_tcp);
 +	priv->fs->accel_tcp = NULL;
++=======
+ 	kfree(accel_tcp);
+ 	mlx5e_fs_set_accel_tcp(fs, NULL);
++>>>>>>> 96c31b5b2cae (net/mlx5e: Use kzalloc() in mlx5e_accel_fs_tcp_create())
  }
  
 -int mlx5e_accel_fs_tcp_create(struct mlx5e_flow_steering *fs)
 +int mlx5e_accel_fs_tcp_create(struct mlx5e_priv *priv)
  {
 -	struct mlx5e_accel_fs_tcp *accel_tcp;
  	int i, err;
  
 -	if (!MLX5_CAP_FLOWTABLE_NIC_RX(mlx5e_fs_get_mdev(fs), ft_field_support.outer_ip_version))
 +	if (!MLX5_CAP_FLOWTABLE_NIC_RX(priv->mdev, ft_field_support.outer_ip_version))
  		return -EOPNOTSUPP;
  
++<<<<<<< HEAD
 +	priv->fs->accel_tcp = kzalloc(sizeof(*priv->fs->accel_tcp), GFP_KERNEL);
 +	if (!priv->fs->accel_tcp)
++=======
+ 	accel_tcp = kzalloc(sizeof(*accel_tcp), GFP_KERNEL);
+ 	if (!accel_tcp)
++>>>>>>> 96c31b5b2cae (net/mlx5e: Use kzalloc() in mlx5e_accel_fs_tcp_create())
  		return -ENOMEM;
 -	mlx5e_fs_set_accel_tcp(fs, accel_tcp);
  
  	for (i = 0; i < ACCEL_FS_TCP_NUM_TYPES; i++) {
 -		err = accel_fs_tcp_create_table(fs, i);
 +		err = accel_fs_tcp_create_table(priv, i);
  		if (err)
  			goto err_destroy_tables;
  	}
@@@ -394,9 -396,8 +404,15 @@@
  
  err_destroy_tables:
  	while (--i >= 0)
++<<<<<<< HEAD
 +		accel_fs_tcp_destroy_table(priv, i);
 +
 +	kfree(priv->fs->accel_tcp);
 +	priv->fs->accel_tcp = NULL;
++=======
+ 		accel_fs_tcp_destroy_table(fs, i);
+ 	kfree(accel_tcp);
+ 	mlx5e_fs_set_accel_tcp(fs, NULL);
++>>>>>>> 96c31b5b2cae (net/mlx5e: Use kzalloc() in mlx5e_accel_fs_tcp_create())
  	return err;
  }
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_accel/fs_tcp.c
