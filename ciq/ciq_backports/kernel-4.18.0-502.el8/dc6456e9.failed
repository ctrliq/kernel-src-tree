net: ipv6: fix skb hash for some RST packets

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-502.el8
commit-author Antoine Tenart <atenart@kernel.org>
commit dc6456e938e938d64ffb6383a286b2ac9790a37f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-502.el8/dc6456e9.failed

The skb hash comes from sk->sk_txhash when using TCP, except for some
IPv6 RST packets. This is because in tcp_v6_send_reset when not in
TIME_WAIT the hash is taken from sk->sk_hash, while it should come from
sk->sk_txhash as those two hashes are not computed the same way.

Packetdrill script to test the above,

   0 socket(..., SOCK_STREAM, IPPROTO_TCP) = 3
  +0 fcntl(3, F_SETFL, O_RDWR|O_NONBLOCK) = 0
  +0 connect(3, ..., ...) = -1 EINPROGRESS (Operation now in progress)

  +0 > (flowlabel 0x1) S 0:0(0) <...>

  // Wrong ack seq, trigger a rst.
  +0 < S. 0:0(0) ack 0 win 4000

  // Check the flowlabel matches prior one from SYN.
  +0 > (flowlabel 0x1) R 0:0(0) <...>

Fixes: 9258b8b1be2e ("ipv6: tcp: send consistent autoflowlabel in RST packets")
	Signed-off-by: Antoine Tenart <atenart@kernel.org>
	Reviewed-by: Eric Dumazet <edumazet@google.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit dc6456e938e938d64ffb6383a286b2ac9790a37f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/ipv6/tcp_ipv6.c
diff --cc net/ipv6/tcp_ipv6.c
index 1832037baa19,7132eb213a7a..000000000000
--- a/net/ipv6/tcp_ipv6.c
+++ b/net/ipv6/tcp_ipv6.c
@@@ -972,11 -1058,27 +972,27 @@@ static void tcp_v6_send_reset(const str
  
  	if (sk) {
  		oif = sk->sk_bound_dev_if;
 -		if (sk_fullsock(sk)) {
 -			const struct ipv6_pinfo *np = tcp_inet6_sk(sk);
 -
 +		if (sk_fullsock(sk))
  			trace_tcp_send_reset(sk, skb);
++<<<<<<< HEAD
++=======
+ 			if (np->repflow)
+ 				label = ip6_flowlabel(ipv6h);
+ 			priority = sk->sk_priority;
+ 			txhash = sk->sk_txhash;
+ 		}
+ 		if (sk->sk_state == TCP_TIME_WAIT) {
+ 			label = cpu_to_be32(inet_twsk(sk)->tw_flowlabel);
+ 			priority = inet_twsk(sk)->tw_priority;
+ 			txhash = inet_twsk(sk)->tw_txhash;
+ 		}
+ 	} else {
+ 		if (net->ipv6.sysctl.flowlabel_reflect & FLOWLABEL_REFLECT_TCP_RESET)
+ 			label = ip6_flowlabel(ipv6h);
++>>>>>>> dc6456e938e9 (net: ipv6: fix skb hash for some RST packets)
  	}
  
 -	tcp_v6_send_response(sk, skb, seq, ack_seq, 0, 0, 0, oif, key, 1,
 -			     ipv6_get_dsfield(ipv6h), label, priority, txhash);
 +	tcp_v6_send_response(sk, skb, seq, ack_seq, 0, 0, 0, oif, key, 1, 0, 0);
  
  #ifdef CONFIG_TCP_MD5SIG
  out:
* Unmerged path net/ipv6/tcp_ipv6.c
