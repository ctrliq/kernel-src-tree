x86/microcode/intel: Print old and new revision during early boot

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-502.el8
commit-author Ashok Raj <ashok.raj@intel.com>
commit a9a5cac225b0830d1879640e25231a37e537f0da
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-502.el8/a9a5cac2.failed

Make early loading message match late loading message and print both old
and new revisions.

This is helpful to know what the BIOS loaded revision is before an early
update.

Cache the early BIOS revision before the microcode update and have
print_ucode_info() print both the old and new revision in the same
format as microcode_reload_late().

  [ bp: Massage, remove useless comment. ]

	Signed-off-by: Ashok Raj <ashok.raj@intel.com>
	Signed-off-by: Borislav Petkov (AMD) <bp@alien8.de>
	Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
Link: https://lore.kernel.org/r/20230120161923.118882-6-ashok.raj@intel.com
(cherry picked from commit a9a5cac225b0830d1879640e25231a37e537f0da)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kernel/cpu/microcode/intel.c
diff --cc arch/x86/kernel/cpu/microcode/intel.c
index c20b6b9200fe,467cf37ea90a..000000000000
--- a/arch/x86/kernel/cpu/microcode/intel.c
+++ b/arch/x86/kernel/cpu/microcode/intel.c
@@@ -466,17 -296,20 +466,25 @@@ static bool load_builtin_intel_microcod
  	sprintf(name, "intel-ucode/%02x-%02x-%02x",
  		      x86_family(eax), x86_model(eax), x86_stepping(eax));
  
 -	if (firmware_request_builtin(&fw, name)) {
 -		cp->size = fw.size;
 -		cp->data = (void *)fw.data;
 -		return true;
 -	}
 -
 -	return false;
 +	return get_builtin_firmware(cp, name);
  }
  
++<<<<<<< HEAD
 +/*
 + * Print ucode update info.
 + */
 +static void
 +print_ucode_info(struct ucode_cpu_info *uci, unsigned int date)
 +{
 +	pr_info_once("microcode updated early to revision 0x%x, date = %04x-%02x-%02x\n",
 +		     uci->cpu_sig.rev,
++=======
+ static void print_ucode_info(int old_rev, int new_rev, unsigned int date)
+ {
+ 	pr_info_once("updated early: 0x%x -> 0x%x, date = %04x-%02x-%02x\n",
+ 		     old_rev,
+ 		     new_rev,
++>>>>>>> a9a5cac225b0 (x86/microcode/intel: Print old and new revision during early boot)
  		     date & 0xffff,
  		     date >> 24,
  		     (date >> 16) & 0xff);
@@@ -495,8 -329,8 +504,13 @@@ void show_ucode_info_early(void
  	struct ucode_cpu_info uci;
  
  	if (delay_ucode_info) {
++<<<<<<< HEAD
 +		collect_cpu_info_early(&uci);
 +		print_ucode_info(&uci, current_mc_date);
++=======
+ 		intel_cpu_collect_info(&uci);
+ 		print_ucode_info(early_old_rev, uci.cpu_sig.rev, current_mc_date);
++>>>>>>> a9a5cac225b0 (x86/microcode/intel: Print old and new revision during early boot)
  		delay_ucode_info = 0;
  	}
  }
@@@ -505,33 -339,25 +519,50 @@@
   * At this point, we can not call printk() yet. Delay printing microcode info in
   * show_ucode_info_early() until printk() works.
   */
++<<<<<<< HEAD
 +static void print_ucode(struct ucode_cpu_info *uci)
++=======
+ static void print_ucode(int old_rev, int new_rev, int date)
++>>>>>>> a9a5cac225b0 (x86/microcode/intel: Print old and new revision during early boot)
  {
 +	struct microcode_intel *mc;
  	int *delay_ucode_info_p;
  	int *current_mc_date_p;
+ 	int *early_old_rev_p;
  
 +	mc = uci->mc;
 +	if (!mc)
 +		return;
 +
  	delay_ucode_info_p = (int *)__pa_nodebug(&delay_ucode_info);
  	current_mc_date_p = (int *)__pa_nodebug(&current_mc_date);
+ 	early_old_rev_p = (int *)__pa_nodebug(&early_old_rev);
  
  	*delay_ucode_info_p = 1;
++<<<<<<< HEAD
 +	*current_mc_date_p = mc->hdr.date;
 +}
 +#else
 +
 +static inline void print_ucode(struct ucode_cpu_info *uci)
 +{
 +	struct microcode_intel *mc;
 +
 +	mc = uci->mc;
 +	if (!mc)
 +		return;
 +
 +	print_ucode_info(uci, mc->hdr.date);
++=======
+ 	*current_mc_date_p = date;
+ 	*early_old_rev_p = old_rev;
+ }
+ #else
+ 
+ static inline void print_ucode(int old_rev, int new_rev, int date)
+ {
+ 	print_ucode_info(old_rev, new_rev, date);
++>>>>>>> a9a5cac225b0 (x86/microcode/intel: Print old and new revision during early boot)
  }
  #endif
  
@@@ -571,9 -399,9 +604,15 @@@ static int apply_microcode_early(struc
  	uci->cpu_sig.rev = rev;
  
  	if (early)
++<<<<<<< HEAD
 +		print_ucode(uci);
 +	else
 +		print_ucode_info(uci, mc->hdr.date);
++=======
+ 		print_ucode(old_rev, uci->cpu_sig.rev, mc->hdr.date);
+ 	else
+ 		print_ucode_info(old_rev, uci->cpu_sig.rev, mc->hdr.date);
++>>>>>>> a9a5cac225b0 (x86/microcode/intel: Print old and new revision during early boot)
  
  	return 0;
  }
* Unmerged path arch/x86/kernel/cpu/microcode/intel.c
