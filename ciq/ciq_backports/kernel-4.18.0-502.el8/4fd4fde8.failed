drm/i915/guc: More debug print updates - UC firmware

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-502.el8
commit-author John Harrison <John.C.Harrison@Intel.com>
commit 4fd4fde8e42e16425e7acab2e093614491107083
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-502.el8/4fd4fde8.failed

Update a bunch more debug prints to use the new GT based scheme.

v2: Also change prints to use %pe for error values (MichalW).

	Signed-off-by: John Harrison <John.C.Harrison@Intel.com>
	Reviewed-by: Michal Wajdeczko <michal.wajdeczko@intel.com>
Link: https://patchwork.freedesktop.org/patch/msgid/20230207050717.1833718-2-John.C.Harrison@Intel.com
(cherry picked from commit 4fd4fde8e42e16425e7acab2e093614491107083)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/i915/gt/uc/intel_uc.c
#	drivers/gpu/drm/i915/gt/uc/intel_uc_fw.c
diff --cc drivers/gpu/drm/i915/gt/uc/intel_uc.c
index abf4e142596d,6648691bd645..000000000000
--- a/drivers/gpu/drm/i915/gt/uc/intel_uc.c
+++ b/drivers/gpu/drm/i915/gt/uc/intel_uc.c
@@@ -531,10 -543,10 +527,17 @@@ static int __uc_init_hw(struct intel_u
  		intel_rps_lower_unslice(&uc_to_gt(uc)->rps);
  	}
  
++<<<<<<< HEAD
 +	drm_info(&i915->drm, "GuC submission %s\n",
 +		 str_enabled_disabled(intel_uc_uses_guc_submission(uc)));
 +	drm_info(&i915->drm, "GuC SLPC %s\n",
 +		 str_enabled_disabled(intel_uc_uses_guc_slpc(uc)));
++=======
+ 	intel_gsc_uc_load_start(&uc->gsc);
+ 
+ 	guc_info(guc, "submission %s\n", str_enabled_disabled(intel_uc_uses_guc_submission(uc)));
+ 	guc_info(guc, "SLPC %s\n", str_enabled_disabled(intel_uc_uses_guc_slpc(uc)));
++>>>>>>> 4fd4fde8e42e (drm/i915/guc: More debug print updates - UC firmware)
  
  	return 0;
  
diff --cc drivers/gpu/drm/i915/gt/uc/intel_uc_fw.c
index fb309ae43001,264c952f777b..000000000000
--- a/drivers/gpu/drm/i915/gt/uc/intel_uc_fw.c
+++ b/drivers/gpu/drm/i915/gt/uc/intel_uc_fw.c
@@@ -506,23 -602,98 +505,115 @@@ static int check_ccs_header(struct drm_
  
  	/* Sanity check whether this fw is not larger than whole WOPCM memory */
  	size = __intel_uc_fw_get_upload_size(uc_fw);
++<<<<<<< HEAD
 +	if (unlikely(size >= i915->wopcm.size)) {
 +		drm_warn(&i915->drm, "%s firmware %s: invalid size: %zu > %zu\n",
 +			 intel_uc_fw_type_repr(uc_fw->type), uc_fw->file_selected.path,
 +			 size, (size_t)i915->wopcm.size);
++=======
+ 	if (unlikely(size >= gt->wopcm.size)) {
+ 		gt_warn(gt, "%s firmware %s: invalid size: %zu > %zu\n",
+ 			intel_uc_fw_type_repr(uc_fw->type), uc_fw->file_selected.path,
+ 			size, (size_t)gt->wopcm.size);
++>>>>>>> 4fd4fde8e42e (drm/i915/guc: More debug print updates - UC firmware)
  		return -E2BIG;
  	}
  
 -	uc_unpack_css_version(&uc_fw->file_selected.ver, css->sw_version);
 +	/* Get version numbers from the CSS header */
 +	uc_fw->file_selected.major_ver = FIELD_GET(CSS_SW_VERSION_UC_MAJOR,
 +						   css->sw_version);
 +	uc_fw->file_selected.minor_ver = FIELD_GET(CSS_SW_VERSION_UC_MINOR,
 +						   css->sw_version);
 +	uc_fw->file_selected.patch_ver = FIELD_GET(CSS_SW_VERSION_UC_PATCH,
 +						   css->sw_version);
  
  	if (uc_fw->type == INTEL_UC_FW_TYPE_GUC)
++<<<<<<< HEAD
 +		uc_fw->private_data_size = css->private_data_size;
++=======
+ 		guc_read_css_info(uc_fw, css);
+ 
+ 	return 0;
+ }
+ 
+ static bool is_ver_8bit(struct intel_uc_fw_ver *ver)
+ {
+ 	return ver->major < 0xFF && ver->minor < 0xFF && ver->patch < 0xFF;
+ }
+ 
+ static bool guc_check_version_range(struct intel_uc_fw *uc_fw)
+ {
+ 	struct intel_guc *guc = container_of(uc_fw, struct intel_guc, fw);
+ 
+ 	/*
+ 	 * GuC version number components are defined as being 8-bits.
+ 	 * The submission code relies on this to optimise version comparison
+ 	 * tests. So enforce the restriction here.
+ 	 */
+ 
+ 	if (!is_ver_8bit(&uc_fw->file_selected.ver)) {
+ 		gt_warn(__uc_fw_to_gt(uc_fw), "%s firmware: invalid file version: 0x%02X:%02X:%02X\n",
+ 			intel_uc_fw_type_repr(uc_fw->type),
+ 			uc_fw->file_selected.ver.major,
+ 			uc_fw->file_selected.ver.minor,
+ 			uc_fw->file_selected.ver.patch);
+ 		return false;
+ 	}
+ 
+ 	if (!is_ver_8bit(&guc->submission_version)) {
+ 		gt_warn(__uc_fw_to_gt(uc_fw), "%s firmware: invalid submit version: 0x%02X:%02X:%02X\n",
+ 			intel_uc_fw_type_repr(uc_fw->type),
+ 			guc->submission_version.major,
+ 			guc->submission_version.minor,
+ 			guc->submission_version.patch);
+ 		return false;
+ 	}
+ 
+ 	return true;
+ }
+ 
+ static int check_fw_header(struct intel_gt *gt,
+ 			   const struct firmware *fw,
+ 			   struct intel_uc_fw *uc_fw)
+ {
+ 	int err = 0;
+ 
+ 	/* GSC FW version is queried after the FW is loaded */
+ 	if (uc_fw->type == INTEL_UC_FW_TYPE_GSC)
+ 		return 0;
+ 
+ 	if (uc_fw->loaded_via_gsc)
+ 		err = check_gsc_manifest(fw, uc_fw);
+ 	else
+ 		err = check_ccs_header(gt, fw, uc_fw);
+ 	if (err)
+ 		return err;
+ 
+ 	return 0;
+ }
+ 
+ static int try_firmware_load(struct intel_uc_fw *uc_fw, const struct firmware **fw)
+ {
+ 	struct intel_gt *gt = __uc_fw_to_gt(uc_fw);
+ 	struct device *dev = gt->i915->drm.dev;
+ 	int err;
+ 
+ 	err = firmware_request_nowarn(fw, uc_fw->file_selected.path, dev);
+ 
+ 	if (err)
+ 		return err;
+ 
+ 	if ((*fw)->size > INTEL_UC_RSVD_GGTT_PER_FW) {
+ 		gt_err(gt, "%s firmware %s: size (%zuKB) exceeds max supported size (%uKB)\n",
+ 		       intel_uc_fw_type_repr(uc_fw->type), uc_fw->file_selected.path,
+ 		       (*fw)->size / SZ_1K, INTEL_UC_RSVD_GGTT_PER_FW / SZ_1K);
+ 
+ 		/* try to find another blob to load */
+ 		release_firmware(*fw);
+ 		*fw = NULL;
+ 		return -ENOENT;
+ 	}
++>>>>>>> 4fd4fde8e42e (drm/i915/guc: More debug print updates - UC firmware)
  
  	return 0;
  }
@@@ -589,13 -759,16 +680,21 @@@ done
  	if (err)
  		goto fail;
  
 -	if (uc_fw->type == INTEL_UC_FW_TYPE_GUC && !guc_check_version_range(uc_fw))
 -		goto fail;
 -
 -	if (uc_fw->file_wanted.ver.major && uc_fw->file_selected.ver.major) {
 +	if (uc_fw->file_wanted.major_ver) {
  		/* Check the file's major version was as it claimed */
++<<<<<<< HEAD
 +		if (uc_fw->file_selected.major_ver != uc_fw->file_wanted.major_ver) {
 +			drm_notice(&i915->drm, "%s firmware %s: unexpected version: %u.%u != %u.%u\n",
 +				   intel_uc_fw_type_repr(uc_fw->type), uc_fw->file_selected.path,
 +				   uc_fw->file_selected.major_ver, uc_fw->file_selected.minor_ver,
 +				   uc_fw->file_wanted.major_ver, uc_fw->file_wanted.minor_ver);
++=======
+ 		if (uc_fw->file_selected.ver.major != uc_fw->file_wanted.ver.major) {
+ 			gt_notice(gt, "%s firmware %s: unexpected version: %u.%u != %u.%u\n",
+ 				  intel_uc_fw_type_repr(uc_fw->type), uc_fw->file_selected.path,
+ 				  uc_fw->file_selected.ver.major, uc_fw->file_selected.ver.minor,
+ 				  uc_fw->file_wanted.ver.major, uc_fw->file_wanted.ver.minor);
++>>>>>>> 4fd4fde8e42e (drm/i915/guc: More debug print updates - UC firmware)
  			if (!intel_uc_fw_is_overridden(uc_fw)) {
  				err = -ENOEXEC;
  				goto fail;
@@@ -610,16 -783,14 +709,27 @@@
  		/* Preserve the version that was really wanted */
  		memcpy(&uc_fw->file_wanted, &file_ideal, sizeof(uc_fw->file_wanted));
  
++<<<<<<< HEAD
 +		drm_notice(&i915->drm,
 +			   "%s firmware %s (%d.%d) is recommended, but only %s (%d.%d) was found\n",
 +			   intel_uc_fw_type_repr(uc_fw->type),
 +			   uc_fw->file_wanted.path,
 +			   uc_fw->file_wanted.major_ver, uc_fw->file_wanted.minor_ver,
 +			   uc_fw->file_selected.path,
 +			   uc_fw->file_selected.major_ver, uc_fw->file_selected.minor_ver);
 +		drm_info(&i915->drm,
 +			 "Consider updating your linux-firmware pkg or downloading from %s\n",
 +			 INTEL_UC_FIRMWARE_URL);
++=======
+ 		gt_notice(gt, "%s firmware %s (%d.%d) is recommended, but only %s (%d.%d) was found\n",
+ 			  intel_uc_fw_type_repr(uc_fw->type),
+ 			  uc_fw->file_wanted.path,
+ 			  uc_fw->file_wanted.ver.major, uc_fw->file_wanted.ver.minor,
+ 			  uc_fw->file_selected.path,
+ 			  uc_fw->file_selected.ver.major, uc_fw->file_selected.ver.minor);
+ 		gt_info(gt, "Consider updating your linux-firmware pkg or downloading from %s\n",
+ 			INTEL_UC_FIRMWARE_URL);
++>>>>>>> 4fd4fde8e42e (drm/i915/guc: More debug print updates - UC firmware)
  	}
  
  	if (HAS_LMEM(i915)) {
@@@ -753,6 -939,19 +863,22 @@@ static int uc_fw_xfer(struct intel_uc_f
  	return ret;
  }
  
++<<<<<<< HEAD
++=======
+ int intel_uc_fw_mark_load_failed(struct intel_uc_fw *uc_fw, int err)
+ {
+ 	struct intel_gt *gt = __uc_fw_to_gt(uc_fw);
+ 
+ 	GEM_BUG_ON(!intel_uc_fw_is_loadable(uc_fw));
+ 
+ 	gt_probe_error(gt, "Failed to load %s firmware %s %pe\n",
+ 		       intel_uc_fw_type_repr(uc_fw->type), uc_fw->file_selected.path, ERR_PTR(err));
+ 	intel_uc_fw_change_status(uc_fw, INTEL_UC_FIRMWARE_LOAD_FAIL);
+ 
+ 	return err;
+ }
+ 
++>>>>>>> 4fd4fde8e42e (drm/i915/guc: More debug print updates - UC firmware)
  /**
   * intel_uc_fw_upload - load uC firmware using custom loader
   * @uc_fw: uC firmware
* Unmerged path drivers/gpu/drm/i915/gt/uc/intel_uc.c
* Unmerged path drivers/gpu/drm/i915/gt/uc/intel_uc_fw.c
