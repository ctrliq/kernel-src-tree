net/smc: fix compile warning for smc_sysctl

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-502.el8
commit-author Dust Li <dust.li@linux.alibaba.com>
commit 7de8eb0d9039f16e1122d7aa524a1502a160c4ff
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-502.el8/7de8eb0d.failed

kernel test robot reports multiple warning for smc_sysctl:

  In file included from net/smc/smc_sysctl.c:17:
>> net/smc/smc_sysctl.h:23:5: warning: no previous prototype \
	for function 'smc_sysctl_init' [-Wmissing-prototypes]
  int smc_sysctl_init(void)
       ^
and
  >> WARNING: modpost: vmlinux.o(.text+0x12ced2d): Section mismatch \
  in reference from the function smc_sysctl_exit() to the variable
  .init.data:smc_sysctl_ops
  The function smc_sysctl_exit() references
  the variable __initdata smc_sysctl_ops.
  This is often because smc_sysctl_exit lacks a __initdata
  annotation or the annotation of smc_sysctl_ops is wrong.

and
  net/smc/smc_sysctl.c: In function 'smc_sysctl_init_net':
  net/smc/smc_sysctl.c:47:17: error: 'struct netns_smc' has no member named 'smc_hdr'
     47 |         net->smc.smc_hdr = register_net_sysctl(net, "net/smc", table);

Since we don't need global sysctl initialization. To make things
clean and simple, remove the global pernet_operations and
smc_sysctl_{init|exit}. Call smc_sysctl_net_{init|exit} directly
from smc_net_{init|exit}.

Also initialized sysctl_autocorking_size if CONFIG_SYSCTL it not
set, this make sure SMC autocorking is enabled by default if
CONFIG_SYSCTL is not set.

Fixes: 462791bbfa35 ("net/smc: add sysctl interface for SMC")
	Reported-by: kernel test robot <lkp@intel.com>
	Signed-off-by: Dust Li <dust.li@linux.alibaba.com>
	Tested-by: Randy Dunlap <rdunlap@infradead.org> # build-tested
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 7de8eb0d9039f16e1122d7aa524a1502a160c4ff)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/smc/Makefile
#	net/smc/smc_sysctl.c
#	net/smc/smc_sysctl.h
diff --cc net/smc/Makefile
index 196fb6f01b14,875efcd126a2..000000000000
--- a/net/smc/Makefile
+++ b/net/smc/Makefile
@@@ -5,3 -5,4 +5,7 @@@ obj-$(CONFIG_SMC_DIAG)	+= smc_diag.
  smc-y := af_smc.o smc_pnet.o smc_ib.o smc_clc.o smc_core.o smc_wr.o smc_llc.o
  smc-y += smc_cdc.o smc_tx.o smc_rx.o smc_close.o smc_ism.o smc_netlink.o smc_stats.o
  smc-y += smc_tracepoint.o
++<<<<<<< HEAD
++=======
+ smc-$(CONFIG_SYSCTL) += smc_sysctl.o
++>>>>>>> 7de8eb0d9039 (net/smc: fix compile warning for smc_sysctl)
* Unmerged path net/smc/smc_sysctl.c
* Unmerged path net/smc/smc_sysctl.h
* Unmerged path net/smc/Makefile
diff --git a/net/smc/af_smc.c b/net/smc/af_smc.c
index 9cc3e0c2c8ae..fa0e4040e43a 100644
--- a/net/smc/af_smc.c
+++ b/net/smc/af_smc.c
@@ -3181,11 +3181,17 @@ unsigned int smc_net_id;
 
 static __net_init int smc_net_init(struct net *net)
 {
+	int rc;
+
+	rc = smc_sysctl_net_init(net);
+	if (rc)
+		return rc;
 	return smc_pnet_net_init(net);
 }
 
 static void __net_exit smc_net_exit(struct net *net)
 {
+	smc_sysctl_net_exit(net);
 	smc_pnet_net_exit(net);
 }
 
* Unmerged path net/smc/smc_sysctl.c
* Unmerged path net/smc/smc_sysctl.h
