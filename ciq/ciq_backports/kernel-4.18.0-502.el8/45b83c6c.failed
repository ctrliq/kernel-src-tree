net/mlx5e: Make flow steering arfs independent of priv

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-502.el8
commit-author Lama Kayal <lkayal@nvidia.com>
commit 45b83c6c6831b2b85721f03cdc180a3ceab1e2e8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-502.el8/45b83c6c.failed

Decouple arfs flow steering functionality from priv.
Make all arfs functions defined under fs.h get flow_steering
struct as an argument, thus helping with the process of decoupling the
whole flow steering API from en.h.

	Signed-off-by: Lama Kayal <lkayal@nvidia.com>
	Reviewed-by: Tariq Toukan <tariqt@nvidia.com>
	Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
(cherry picked from commit 45b83c6c6831b2b85721f03cdc180a3ceab1e2e8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en/fs.h
#	drivers/net/ethernet/mellanox/mlx5/core/en_arfs.c
#	drivers/net/ethernet/mellanox/mlx5/core/en_fs.c
#	drivers/net/ethernet/mellanox/mlx5/core/ipoib/ipoib.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en/fs.h
index 9b8cdf2e68ad,389f389b814b..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en/fs.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en/fs.h
@@@ -83,40 -89,10 +83,45 @@@ enum 
  #endif
  };
  
++<<<<<<< HEAD
++=======
+ struct mlx5e_flow_steering;
+ struct mlx5e_rx_res;
++>>>>>>> 45b83c6c6831 (net/mlx5e: Make flow steering arfs independent of priv)
  struct mlx5e_priv;
  
 +#ifdef CONFIG_MLX5_EN_RXNFC
 +
 +struct mlx5e_ethtool_table {
 +	struct mlx5_flow_table *ft;
 +	int                    num_rules;
 +};
 +
 +#define ETHTOOL_NUM_L3_L4_FTS 7
 +#define ETHTOOL_NUM_L2_FTS 4
 +
 +struct mlx5e_ethtool_steering {
 +	struct mlx5e_ethtool_table      l3_l4_ft[ETHTOOL_NUM_L3_L4_FTS];
 +	struct mlx5e_ethtool_table      l2_ft[ETHTOOL_NUM_L2_FTS];
 +	struct list_head                rules;
 +	int                             tot_num_rules;
 +};
 +
 +void mlx5e_ethtool_init_steering(struct mlx5e_priv *priv);
 +void mlx5e_ethtool_cleanup_steering(struct mlx5e_priv *priv);
 +int mlx5e_ethtool_set_rxnfc(struct mlx5e_priv *priv, struct ethtool_rxnfc *cmd);
 +int mlx5e_ethtool_get_rxnfc(struct mlx5e_priv *priv,
 +			    struct ethtool_rxnfc *info, u32 *rule_locs);
 +#else
 +static inline void mlx5e_ethtool_init_steering(struct mlx5e_priv *priv)    { }
 +static inline void mlx5e_ethtool_cleanup_steering(struct mlx5e_priv *priv) { }
 +static inline int mlx5e_ethtool_set_rxnfc(struct mlx5e_priv *priv, struct ethtool_rxnfc *cmd)
 +{ return -EOPNOTSUPP; }
 +static inline int mlx5e_ethtool_get_rxnfc(struct mlx5e_priv *priv,
 +					  struct ethtool_rxnfc *info, u32 *rule_locs)
 +{ return -EOPNOTSUPP; }
 +#endif /* CONFIG_MLX5_EN_RXNFC */
 +
  #ifdef CONFIG_MLX5_EN_ARFS
  struct mlx5e_arfs_tables;
  
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_arfs.c
index cd7f245dcf14,0ae1865086ff..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_arfs.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_arfs.c
@@@ -114,47 -114,49 +114,55 @@@ static enum mlx5_traffic_types arfs_get
  	}
  }
  
- static int arfs_disable(struct mlx5e_priv *priv)
+ static int arfs_disable(struct mlx5e_flow_steering *fs)
  {
++<<<<<<< HEAD
++=======
+ 	struct mlx5_ttc_table *ttc = mlx5e_fs_get_ttc(fs, false);
++>>>>>>> 45b83c6c6831 (net/mlx5e: Make flow steering arfs independent of priv)
  	int err, i;
  
  	for (i = 0; i < ARFS_NUM_TYPES; i++) {
  		/* Modify ttc rules destination back to their default */
 -		err = mlx5_ttc_fwd_default_dest(ttc, arfs_get_tt(i));
 +		err = mlx5_ttc_fwd_default_dest(priv->fs->ttc, arfs_get_tt(i));
  		if (err) {
- 			netdev_err(priv->netdev,
- 				   "%s: modify ttc[%d] default destination failed, err(%d)\n",
- 				   __func__, arfs_get_tt(i), err);
+ 			fs_err(fs,
+ 			       "%s: modify ttc[%d] default destination failed, err(%d)\n",
+ 			       __func__, arfs_get_tt(i), err);
  			return err;
  		}
  	}
  	return 0;
  }
  
- static void arfs_del_rules(struct mlx5e_priv *priv);
+ static void arfs_del_rules(struct mlx5e_flow_steering *fs);
  
- int mlx5e_arfs_disable(struct mlx5e_priv *priv)
+ int mlx5e_arfs_disable(struct mlx5e_flow_steering *fs)
  {
- 	arfs_del_rules(priv);
+ 	arfs_del_rules(fs);
  
- 	return arfs_disable(priv);
+ 	return arfs_disable(fs);
  }
  
- int mlx5e_arfs_enable(struct mlx5e_priv *priv)
+ int mlx5e_arfs_enable(struct mlx5e_flow_steering *fs)
  {
++<<<<<<< HEAD
++=======
+ 	struct mlx5_ttc_table *ttc = mlx5e_fs_get_ttc(fs, false);
+ 	struct mlx5e_arfs_tables *arfs =  mlx5e_fs_get_arfs(fs);
++>>>>>>> 45b83c6c6831 (net/mlx5e: Make flow steering arfs independent of priv)
  	struct mlx5_flow_destination dest = {};
  	int err, i;
  
  	dest.type = MLX5_FLOW_DESTINATION_TYPE_FLOW_TABLE;
  	for (i = 0; i < ARFS_NUM_TYPES; i++) {
 -		dest.ft = arfs->arfs_tables[i].ft.t;
 +		dest.ft = priv->fs->arfs->arfs_tables[i].ft.t;
  		/* Modify ttc rules destination to point on the aRFS FTs */
 -		err = mlx5_ttc_fwd_dest(ttc, arfs_get_tt(i), &dest);
 +		err = mlx5_ttc_fwd_dest(priv->fs->ttc, arfs_get_tt(i), &dest);
  		if (err) {
- 			netdev_err(priv->netdev,
- 				   "%s: modify ttc[%d] dest to arfs, failed err(%d)\n",
- 				   __func__, arfs_get_tt(i), err);
- 			arfs_disable(priv);
+ 			fs_err(fs, "%s: modify ttc[%d] dest to arfs, failed err(%d)\n",
+ 			       __func__, arfs_get_tt(i), err);
+ 			arfs_disable(fs);
  			return err;
  		}
  	}
@@@ -167,31 -169,37 +175,56 @@@ static void arfs_destroy_table(struct a
  	mlx5e_destroy_flow_table(&arfs_t->ft);
  }
  
- static void _mlx5e_cleanup_tables(struct mlx5e_priv *priv)
+ static void _mlx5e_cleanup_tables(struct mlx5e_flow_steering *fs)
  {
++<<<<<<< HEAD
 +	int i;
 +
 +	arfs_del_rules(priv);
 +	destroy_workqueue(priv->fs->arfs->wq);
++=======
+ 	struct mlx5e_arfs_tables *arfs =  mlx5e_fs_get_arfs(fs);
+ 	int i;
+ 
+ 	arfs_del_rules(fs);
+ 	destroy_workqueue(arfs->wq);
++>>>>>>> 45b83c6c6831 (net/mlx5e: Make flow steering arfs independent of priv)
  	for (i = 0; i < ARFS_NUM_TYPES; i++) {
 -		if (!IS_ERR_OR_NULL(arfs->arfs_tables[i].ft.t))
 -			arfs_destroy_table(&arfs->arfs_tables[i]);
 +		if (!IS_ERR_OR_NULL(priv->fs->arfs->arfs_tables[i].ft.t))
 +			arfs_destroy_table(&priv->fs->arfs->arfs_tables[i]);
  	}
  }
  
- void mlx5e_arfs_destroy_tables(struct mlx5e_priv *priv)
+ void mlx5e_arfs_destroy_tables(struct mlx5e_flow_steering *fs, bool ntuple)
  {
++<<<<<<< HEAD
 +	if (!(priv->netdev->hw_features & NETIF_F_NTUPLE))
 +		return;
 +
 +	_mlx5e_cleanup_tables(priv);
 +	kvfree(priv->fs->arfs);
++=======
+ 	struct mlx5e_arfs_tables *arfs =  mlx5e_fs_get_arfs(fs);
+ 
+ 	if (!ntuple)
+ 		return;
+ 
+ 	_mlx5e_cleanup_tables(fs);
+ 	mlx5e_fs_set_arfs(fs, NULL);
+ 	kvfree(arfs);
++>>>>>>> 45b83c6c6831 (net/mlx5e: Make flow steering arfs independent of priv)
  }
  
- static int arfs_add_default_rule(struct mlx5e_priv *priv,
+ static int arfs_add_default_rule(struct mlx5e_flow_steering *fs,
+ 				 struct mlx5e_rx_res *rx_res,
  				 enum arfs_type type)
  {
++<<<<<<< HEAD
 +	struct arfs_table *arfs_t = &priv->fs->arfs->arfs_tables[type];
++=======
+ 	struct mlx5e_arfs_tables *arfs =  mlx5e_fs_get_arfs(fs);
+ 	struct arfs_table *arfs_t = &arfs->arfs_tables[type];
++>>>>>>> 45b83c6c6831 (net/mlx5e: Make flow steering arfs independent of priv)
  	struct mlx5_flow_destination dest = {};
  	MLX5_DECLARE_FLOW_ACT(flow_act);
  	enum mlx5_traffic_types tt;
@@@ -318,10 -324,12 +349,16 @@@ out
  	return err;
  }
  
- static int arfs_create_table(struct mlx5e_priv *priv,
+ static int arfs_create_table(struct mlx5e_flow_steering *fs,
+ 			     struct mlx5e_rx_res *rx_res,
  			     enum arfs_type type)
  {
++<<<<<<< HEAD
 +	struct mlx5e_arfs_tables *arfs = priv->fs->arfs;
++=======
+ 	struct mlx5_flow_namespace *ns = mlx5e_fs_get_ns(fs, false);
+ 	struct mlx5e_arfs_tables *arfs = mlx5e_fs_get_arfs(fs);
++>>>>>>> 45b83c6c6831 (net/mlx5e: Make flow steering arfs independent of priv)
  	struct mlx5e_flow_table *ft = &arfs->arfs_tables[type].ft;
  	struct mlx5_flow_table_attr ft_attr = {};
  	int err;
@@@ -353,35 -361,40 +390,46 @@@ err
  	return err;
  }
  
- int mlx5e_arfs_create_tables(struct mlx5e_priv *priv)
+ int mlx5e_arfs_create_tables(struct mlx5e_flow_steering *fs,
+ 			     struct mlx5e_rx_res *rx_res, bool ntuple)
  {
 -	struct mlx5e_arfs_tables *arfs;
  	int err = -ENOMEM;
  	int i;
  
- 	if (!(priv->netdev->hw_features & NETIF_F_NTUPLE))
+ 	if (!ntuple)
  		return 0;
  
 -	arfs = kvzalloc(sizeof(*arfs), GFP_KERNEL);
 -	if (!arfs)
 +	priv->fs->arfs = kvzalloc(sizeof(*priv->fs->arfs), GFP_KERNEL);
 +	if (!priv->fs->arfs)
  		return -ENOMEM;
  
 -	spin_lock_init(&arfs->arfs_lock);
 -	INIT_LIST_HEAD(&arfs->rules);
 -	arfs->wq = create_singlethread_workqueue("mlx5e_arfs");
 -	if (!arfs->wq)
 +	spin_lock_init(&priv->fs->arfs->arfs_lock);
 +	INIT_LIST_HEAD(&priv->fs->arfs->rules);
 +	priv->fs->arfs->wq = create_singlethread_workqueue("mlx5e_arfs");
 +	if (!priv->fs->arfs->wq)
  		goto err;
  
++<<<<<<< HEAD
++=======
+ 	mlx5e_fs_set_arfs(fs, arfs);
+ 
++>>>>>>> 45b83c6c6831 (net/mlx5e: Make flow steering arfs independent of priv)
  	for (i = 0; i < ARFS_NUM_TYPES; i++) {
- 		err = arfs_create_table(priv, i);
+ 		err = arfs_create_table(fs, rx_res, i);
  		if (err)
  			goto err_des;
  	}
  	return 0;
  
  err_des:
- 	_mlx5e_cleanup_tables(priv);
+ 	_mlx5e_cleanup_tables(fs);
  err:
++<<<<<<< HEAD
 +	kvfree(priv->fs->arfs);
++=======
+ 	mlx5e_fs_set_arfs(fs, NULL);
+ 	kvfree(arfs);
++>>>>>>> 45b83c6c6831 (net/mlx5e: Make flow steering arfs independent of priv)
  	return err;
  }
  
@@@ -417,8 -431,9 +465,12 @@@ static void arfs_may_expire_flow(struc
  	}
  }
  
- static void arfs_del_rules(struct mlx5e_priv *priv)
+ static void arfs_del_rules(struct mlx5e_flow_steering *fs)
  {
++<<<<<<< HEAD
++=======
+ 	struct mlx5e_arfs_tables *arfs = mlx5e_fs_get_arfs(fs);
++>>>>>>> 45b83c6c6831 (net/mlx5e: Make flow steering arfs independent of priv)
  	struct hlist_node *htmp;
  	struct arfs_rule *rule;
  	HLIST_HEAD(del_list);
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_fs.c
index 6768f21c4eb1,1c7842dd0462..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_fs.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_fs.c
@@@ -1267,18 -1293,20 +1267,24 @@@ int mlx5e_create_ttc_table(struct mlx5e
  
  int mlx5e_create_flow_steering(struct mlx5e_priv *priv)
  {
 -	struct mlx5_flow_namespace *ns = mlx5_get_flow_namespace(priv->fs->mdev,
 -								 MLX5_FLOW_NAMESPACE_KERNEL);
 -	struct mlx5e_flow_steering *fs = priv->fs;
 -
  	int err;
  
 -	if (!ns)
 +	priv->fs->ns = mlx5_get_flow_namespace(priv->fs->mdev,
 +					       MLX5_FLOW_NAMESPACE_KERNEL);
 +
 +	if (!priv->fs->ns)
  		return -EOPNOTSUPP;
  
++<<<<<<< HEAD
 +	err = mlx5e_arfs_create_tables(priv);
++=======
+ 	mlx5e_fs_set_ns(priv->fs, ns, false);
+ 	err = mlx5e_arfs_create_tables(priv->fs, priv->rx_res,
+ 				       !!(priv->netdev->hw_features & NETIF_F_NTUPLE));
++>>>>>>> 45b83c6c6831 (net/mlx5e: Make flow steering arfs independent of priv)
  	if (err) {
 -		fs_err(fs, "Failed to create arfs tables, err=%d\n", err);
 +		mlx5_core_err(priv->fs->mdev, "Failed to create arfs tables, err=%d\n",
 +			      err);
  		priv->netdev->hw_features &= ~NETIF_F_NTUPLE;
  	}
  
@@@ -1339,8 -1364,9 +1346,14 @@@ void mlx5e_destroy_flow_steering(struc
  	mlx5e_destroy_l2_table(priv);
  	mlx5e_destroy_ttc_table(priv);
  	mlx5e_destroy_inner_ttc_table(priv);
++<<<<<<< HEAD
 +	mlx5e_arfs_destroy_tables(priv);
 +	mlx5e_ethtool_cleanup_steering(priv);
++=======
+ 	mlx5e_arfs_destroy_tables(priv->fs,
+ 				  !!(priv->netdev->hw_features & NETIF_F_NTUPLE));
+ 	mlx5e_ethtool_cleanup_steering(priv->fs);
++>>>>>>> 45b83c6c6831 (net/mlx5e: Make flow steering arfs independent of priv)
  }
  
  static int mlx5e_fs_vlan_alloc(struct mlx5e_flow_steering *fs)
diff --cc drivers/net/ethernet/mellanox/mlx5/core/ipoib/ipoib.c
index d84889d6efe2,c3149e391f10..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/ipoib/ipoib.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/ipoib/ipoib.c
@@@ -362,15 -321,17 +362,21 @@@ static void mlx5i_cleanup_tx(struct mlx
  
  static int mlx5i_create_flow_steering(struct mlx5e_priv *priv)
  {
 -	struct mlx5_flow_namespace *ns =
 -		mlx5_get_flow_namespace(priv->mdev, MLX5_FLOW_NAMESPACE_KERNEL);
  	int err;
  
 +	priv->fs->ns = mlx5_get_flow_namespace(priv->mdev,
 +					       MLX5_FLOW_NAMESPACE_KERNEL);
  
 -	if (!ns)
 +	if (!priv->fs->ns)
  		return -EINVAL;
  
++<<<<<<< HEAD
 +	err = mlx5e_arfs_create_tables(priv);
++=======
+ 	mlx5e_fs_set_ns(priv->fs, ns, false);
+ 	err = mlx5e_arfs_create_tables(priv->fs, priv->rx_res,
+ 				       !!(priv->netdev->hw_features & NETIF_F_NTUPLE));
++>>>>>>> 45b83c6c6831 (net/mlx5e: Make flow steering arfs independent of priv)
  	if (err) {
  		netdev_err(priv->netdev, "Failed to create arfs tables, err=%d\n",
  			   err);
@@@ -397,8 -359,9 +404,14 @@@ err_destroy_arfs_tables
  static void mlx5i_destroy_flow_steering(struct mlx5e_priv *priv)
  {
  	mlx5e_destroy_ttc_table(priv);
++<<<<<<< HEAD
 +	mlx5e_arfs_destroy_tables(priv);
 +	mlx5e_ethtool_cleanup_steering(priv);
++=======
+ 	mlx5e_arfs_destroy_tables(priv->fs,
+ 				  !!(priv->netdev->hw_features & NETIF_F_NTUPLE));
+ 	mlx5e_ethtool_cleanup_steering(priv->fs);
++>>>>>>> 45b83c6c6831 (net/mlx5e: Make flow steering arfs independent of priv)
  }
  
  static int mlx5i_init_rx(struct mlx5e_priv *priv)
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en/fs.h
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_arfs.c
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en_ethtool.c b/drivers/net/ethernet/mellanox/mlx5/core/en_ethtool.c
index b811207fe5ed..14d9631f7ea1 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_ethtool.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_ethtool.c
@@ -494,14 +494,14 @@ int mlx5e_ethtool_set_channels(struct mlx5e_priv *priv,
 
 	arfs_enabled = opened && (priv->netdev->features & NETIF_F_NTUPLE);
 	if (arfs_enabled)
-		mlx5e_arfs_disable(priv);
+		mlx5e_arfs_disable(priv->fs);
 
 	/* Switch to new channels, set new parameters and close old ones */
 	err = mlx5e_safe_switch_params(priv, &new_params,
 				       mlx5e_num_channels_changed_ctx, NULL, true);
 
 	if (arfs_enabled) {
-		int err2 = mlx5e_arfs_enable(priv);
+		int err2 = mlx5e_arfs_enable(priv->fs);
 
 		if (err2)
 			netdev_err(priv->netdev, "%s: mlx5e_arfs_enable failed: %d\n",
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_fs.c
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en_main.c b/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
index 387a2d1312ee..3b83d2e64a5f 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
@@ -3821,9 +3821,9 @@ static int set_feature_arfs(struct net_device *netdev, bool enable)
 	int err;
 
 	if (enable)
-		err = mlx5e_arfs_enable(priv);
+		err = mlx5e_arfs_enable(priv->fs);
 	else
-		err = mlx5e_arfs_disable(priv);
+		err = mlx5e_arfs_disable(priv->fs);
 
 	return err;
 }
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/ipoib/ipoib.c
