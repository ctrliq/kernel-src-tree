txhash: Add socket option to control TX hash rethink behavior

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-502.el8
commit-author Akhmat Karakotov <hmukos@yandex-team.ru>
commit 26859240e4ee701e0379f08634957adaff67e43a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-502.el8/26859240.failed

Add the SO_TXREHASH socket option to control hash rethink behavior per socket.
When default mode is set, sockets disable rehash at initialization and use
sysctl option when entering listen state. setsockopt() overrides default
behavior.

	Signed-off-by: Akhmat Karakotov <hmukos@yandex-team.ru>
	Reviewed-by: Eric Dumazet <edumazet@google.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 26859240e4ee701e0379f08634957adaff67e43a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/alpha/include/uapi/asm/socket.h
#	arch/mips/include/uapi/asm/socket.h
#	arch/parisc/include/uapi/asm/socket.h
#	arch/sparc/include/uapi/asm/socket.h
#	include/net/sock.h
#	include/uapi/asm-generic/socket.h
#	include/uapi/linux/socket.h
#	net/core/sock.c
diff --cc arch/alpha/include/uapi/asm/socket.h
index 065fb372e355,7d81535893af..000000000000
--- a/arch/alpha/include/uapi/asm/socket.h
+++ b/arch/alpha/include/uapi/asm/socket.h
@@@ -115,4 -109,54 +115,57 @@@
  #define SO_TXTIME		61
  #define SCM_TXTIME		SO_TXTIME
  
++<<<<<<< HEAD
++=======
+ #define SO_BINDTOIFINDEX	62
+ 
+ #define SO_TIMESTAMP_OLD        29
+ #define SO_TIMESTAMPNS_OLD      35
+ #define SO_TIMESTAMPING_OLD     37
+ 
+ #define SO_TIMESTAMP_NEW        63
+ #define SO_TIMESTAMPNS_NEW      64
+ #define SO_TIMESTAMPING_NEW     65
+ 
+ #define SO_RCVTIMEO_NEW         66
+ #define SO_SNDTIMEO_NEW         67
+ 
+ #define SO_DETACH_REUSEPORT_BPF 68
+ 
+ #define SO_PREFER_BUSY_POLL	69
+ #define SO_BUSY_POLL_BUDGET	70
+ 
+ #define SO_NETNS_COOKIE		71
+ 
+ #define SO_BUF_LOCK		72
+ 
+ #define SO_RESERVE_MEM		73
+ 
+ #define SO_TXREHASH		74
+ 
+ #if !defined(__KERNEL__)
+ 
+ #if __BITS_PER_LONG == 64
+ #define SO_TIMESTAMP		SO_TIMESTAMP_OLD
+ #define SO_TIMESTAMPNS		SO_TIMESTAMPNS_OLD
+ #define SO_TIMESTAMPING         SO_TIMESTAMPING_OLD
+ 
+ #define SO_RCVTIMEO		SO_RCVTIMEO_OLD
+ #define SO_SNDTIMEO		SO_SNDTIMEO_OLD
+ #else
+ #define SO_TIMESTAMP (sizeof(time_t) == sizeof(__kernel_long_t) ? SO_TIMESTAMP_OLD : SO_TIMESTAMP_NEW)
+ #define SO_TIMESTAMPNS (sizeof(time_t) == sizeof(__kernel_long_t) ? SO_TIMESTAMPNS_OLD : SO_TIMESTAMPNS_NEW)
+ #define SO_TIMESTAMPING (sizeof(time_t) == sizeof(__kernel_long_t) ? SO_TIMESTAMPING_OLD : SO_TIMESTAMPING_NEW)
+ 
+ #define SO_RCVTIMEO (sizeof(time_t) == sizeof(__kernel_long_t) ? SO_RCVTIMEO_OLD : SO_RCVTIMEO_NEW)
+ #define SO_SNDTIMEO (sizeof(time_t) == sizeof(__kernel_long_t) ? SO_SNDTIMEO_OLD : SO_SNDTIMEO_NEW)
+ #endif
+ 
+ #define SCM_TIMESTAMP           SO_TIMESTAMP
+ #define SCM_TIMESTAMPNS         SO_TIMESTAMPNS
+ #define SCM_TIMESTAMPING        SO_TIMESTAMPING
+ 
+ #endif
+ 
++>>>>>>> 26859240e4ee (txhash: Add socket option to control TX hash rethink behavior)
  #endif /* _UAPI_ASM_SOCKET_H */
diff --cc arch/mips/include/uapi/asm/socket.h
index 71370fb3ceef,1d55e57b8466..000000000000
--- a/arch/mips/include/uapi/asm/socket.h
+++ b/arch/mips/include/uapi/asm/socket.h
@@@ -126,4 -120,54 +126,57 @@@
  #define SO_TXTIME		61
  #define SCM_TXTIME		SO_TXTIME
  
++<<<<<<< HEAD
++=======
+ #define SO_BINDTOIFINDEX	62
+ 
+ #define SO_TIMESTAMP_OLD        29
+ #define SO_TIMESTAMPNS_OLD      35
+ #define SO_TIMESTAMPING_OLD     37
+ 
+ #define SO_TIMESTAMP_NEW        63
+ #define SO_TIMESTAMPNS_NEW      64
+ #define SO_TIMESTAMPING_NEW     65
+ 
+ #define SO_RCVTIMEO_NEW         66
+ #define SO_SNDTIMEO_NEW         67
+ 
+ #define SO_DETACH_REUSEPORT_BPF 68
+ 
+ #define SO_PREFER_BUSY_POLL	69
+ #define SO_BUSY_POLL_BUDGET	70
+ 
+ #define SO_NETNS_COOKIE		71
+ 
+ #define SO_BUF_LOCK		72
+ 
+ #define SO_RESERVE_MEM		73
+ 
+ #define SO_TXREHASH		74
+ 
+ #if !defined(__KERNEL__)
+ 
+ #if __BITS_PER_LONG == 64
+ #define SO_TIMESTAMP		SO_TIMESTAMP_OLD
+ #define SO_TIMESTAMPNS		SO_TIMESTAMPNS_OLD
+ #define SO_TIMESTAMPING		SO_TIMESTAMPING_OLD
+ 
+ #define SO_RCVTIMEO             SO_RCVTIMEO_OLD
+ #define SO_SNDTIMEO             SO_SNDTIMEO_OLD
+ #else
+ #define SO_TIMESTAMP (sizeof(time_t) == sizeof(__kernel_long_t) ? SO_TIMESTAMP_OLD : SO_TIMESTAMP_NEW)
+ #define SO_TIMESTAMPNS (sizeof(time_t) == sizeof(__kernel_long_t) ? SO_TIMESTAMPNS_OLD : SO_TIMESTAMPNS_NEW)
+ #define SO_TIMESTAMPING (sizeof(time_t) == sizeof(__kernel_long_t) ? SO_TIMESTAMPING_OLD : SO_TIMESTAMPING_NEW)
+ 
+ #define SO_RCVTIMEO (sizeof(time_t) == sizeof(__kernel_long_t) ? SO_RCVTIMEO_OLD : SO_RCVTIMEO_NEW)
+ #define SO_SNDTIMEO (sizeof(time_t) == sizeof(__kernel_long_t) ? SO_SNDTIMEO_OLD : SO_SNDTIMEO_NEW)
+ #endif
+ 
+ #define SCM_TIMESTAMP           SO_TIMESTAMP
+ #define SCM_TIMESTAMPNS         SO_TIMESTAMPNS
+ #define SCM_TIMESTAMPING        SO_TIMESTAMPING
+ 
+ #endif
+ 
++>>>>>>> 26859240e4ee (txhash: Add socket option to control TX hash rethink behavior)
  #endif /* _UAPI_ASM_SOCKET_H */
diff --cc arch/parisc/include/uapi/asm/socket.h
index 061b9cf2a779,654061e0964e..000000000000
--- a/arch/parisc/include/uapi/asm/socket.h
+++ b/arch/parisc/include/uapi/asm/socket.h
@@@ -107,4 -101,53 +107,56 @@@
  #define SO_TXTIME		0x4036
  #define SCM_TXTIME		SO_TXTIME
  
++<<<<<<< HEAD
++=======
+ #define SO_BINDTOIFINDEX	0x4037
+ 
+ #define SO_TIMESTAMP_OLD        0x4012
+ #define SO_TIMESTAMPNS_OLD      0x4013
+ #define SO_TIMESTAMPING_OLD     0x4020
+ 
+ #define SO_TIMESTAMP_NEW        0x4038
+ #define SO_TIMESTAMPNS_NEW      0x4039
+ #define SO_TIMESTAMPING_NEW     0x403A
+ 
+ #define SO_RCVTIMEO_NEW         0x4040
+ #define SO_SNDTIMEO_NEW         0x4041
+ 
+ #define SO_DETACH_REUSEPORT_BPF 0x4042
+ 
+ #define SO_PREFER_BUSY_POLL	0x4043
+ #define SO_BUSY_POLL_BUDGET	0x4044
+ 
+ #define SO_NETNS_COOKIE		0x4045
+ 
+ #define SO_BUF_LOCK		0x4046
+ 
+ #define SO_RESERVE_MEM		0x4047
+ 
+ #define SO_TXREHASH		0x4048
+ 
+ #if !defined(__KERNEL__)
+ 
+ #if __BITS_PER_LONG == 64
+ #define SO_TIMESTAMP		SO_TIMESTAMP_OLD
+ #define SO_TIMESTAMPNS		SO_TIMESTAMPNS_OLD
+ #define SO_TIMESTAMPING         SO_TIMESTAMPING_OLD
+ #define SO_RCVTIMEO		SO_RCVTIMEO_OLD
+ #define SO_SNDTIMEO		SO_SNDTIMEO_OLD
+ #else
+ #define SO_TIMESTAMP (sizeof(time_t) == sizeof(__kernel_long_t) ? SO_TIMESTAMP_OLD : SO_TIMESTAMP_NEW)
+ #define SO_TIMESTAMPNS (sizeof(time_t) == sizeof(__kernel_long_t) ? SO_TIMESTAMPNS_OLD : SO_TIMESTAMPNS_NEW)
+ #define SO_TIMESTAMPING (sizeof(time_t) == sizeof(__kernel_long_t) ? SO_TIMESTAMPING_OLD : SO_TIMESTAMPING_NEW)
+ 
+ #define SO_RCVTIMEO (sizeof(time_t) == sizeof(__kernel_long_t) ? SO_RCVTIMEO_OLD : SO_RCVTIMEO_NEW)
+ #define SO_SNDTIMEO (sizeof(time_t) == sizeof(__kernel_long_t) ? SO_SNDTIMEO_OLD : SO_SNDTIMEO_NEW)
+ #endif
+ 
+ #define SCM_TIMESTAMP           SO_TIMESTAMP
+ #define SCM_TIMESTAMPNS         SO_TIMESTAMPNS
+ #define SCM_TIMESTAMPING        SO_TIMESTAMPING
+ 
+ #endif
+ 
++>>>>>>> 26859240e4ee (txhash: Add socket option to control TX hash rethink behavior)
  #endif /* _UAPI_ASM_SOCKET_H */
diff --cc arch/sparc/include/uapi/asm/socket.h
index 7ea35e5601b6,666f81e617ea..000000000000
--- a/arch/sparc/include/uapi/asm/socket.h
+++ b/arch/sparc/include/uapi/asm/socket.h
@@@ -109,4 -104,54 +109,57 @@@
  #define SO_SECURITY_ENCRYPTION_TRANSPORT	0x5002
  #define SO_SECURITY_ENCRYPTION_NETWORK		0x5004
  
++<<<<<<< HEAD
++=======
+ #define SO_TIMESTAMP_OLD         0x001d
+ #define SO_TIMESTAMPNS_OLD       0x0021
+ #define SO_TIMESTAMPING_OLD      0x0023
+ 
+ #define SO_TIMESTAMP_NEW         0x0046
+ #define SO_TIMESTAMPNS_NEW       0x0042
+ #define SO_TIMESTAMPING_NEW      0x0043
+ 
+ #define SO_RCVTIMEO_NEW          0x0044
+ #define SO_SNDTIMEO_NEW          0x0045
+ 
+ #define SO_DETACH_REUSEPORT_BPF  0x0047
+ 
+ #define SO_PREFER_BUSY_POLL	 0x0048
+ #define SO_BUSY_POLL_BUDGET	 0x0049
+ 
+ #define SO_NETNS_COOKIE          0x0050
+ 
+ #define SO_BUF_LOCK              0x0051
+ 
+ #define SO_RESERVE_MEM           0x0052
+ 
+ #define SO_TXREHASH              0x0053
+ 
+ 
+ #if !defined(__KERNEL__)
+ 
+ 
+ #if __BITS_PER_LONG == 64
+ #define SO_TIMESTAMP		SO_TIMESTAMP_OLD
+ #define SO_TIMESTAMPNS		SO_TIMESTAMPNS_OLD
+ #define SO_TIMESTAMPING		SO_TIMESTAMPING_OLD
+ 
+ #define SO_RCVTIMEO		SO_RCVTIMEO_OLD
+ #define SO_SNDTIMEO		SO_SNDTIMEO_OLD
+ #else
+ #define SO_TIMESTAMP (sizeof(time_t) == sizeof(__kernel_long_t) ? SO_TIMESTAMP_OLD : SO_TIMESTAMP_NEW)
+ #define SO_TIMESTAMPNS (sizeof(time_t) == sizeof(__kernel_long_t) ? SO_TIMESTAMPNS_OLD : SO_TIMESTAMPNS_NEW)
+ #define SO_TIMESTAMPING (sizeof(time_t) == sizeof(__kernel_long_t) ? SO_TIMESTAMPING_OLD : SO_TIMESTAMPING_NEW)
+ 
+ #define SO_RCVTIMEO (sizeof(time_t) == sizeof(__kernel_long_t) ? SO_RCVTIMEO_OLD : SO_RCVTIMEO_NEW)
+ #define SO_SNDTIMEO (sizeof(time_t) == sizeof(__kernel_long_t) ? SO_SNDTIMEO_OLD : SO_SNDTIMEO_NEW)
+ #endif
+ 
+ #define SCM_TIMESTAMP          SO_TIMESTAMP
+ #define SCM_TIMESTAMPNS        SO_TIMESTAMPNS
+ #define SCM_TIMESTAMPING       SO_TIMESTAMPING
+ 
+ #endif
+ 
++>>>>>>> 26859240e4ee (txhash: Add socket option to control TX hash rethink behavior)
  #endif /* _ASM_SOCKET_H */
diff --cc include/net/sock.h
index 6ab654b4fe56,d6c13f0fba40..000000000000
--- a/include/net/sock.h
+++ b/include/net/sock.h
@@@ -477,10 -492,21 +478,20 @@@ struct sock 
  	u32			sk_ack_backlog;
  	u32			sk_max_ack_backlog;
  	kuid_t			sk_uid;
++<<<<<<< HEAD
++=======
+ 	u8			sk_txrehash;
+ #ifdef CONFIG_NET_RX_BUSY_POLL
+ 	u8			sk_prefer_busy_poll;
+ 	u16			sk_busy_poll_budget;
+ #endif
+ 	spinlock_t		sk_peer_lock;
+ 	int			sk_bind_phc;
++>>>>>>> 26859240e4ee (txhash: Add socket option to control TX hash rethink behavior)
  	struct pid		*sk_peer_pid;
  	const struct cred	*sk_peer_cred;
 -
  	long			sk_rcvtimeo;
  	ktime_t			sk_stamp;
 -#if BITS_PER_LONG==32
 -	seqlock_t		sk_stamp_seq;
 -#endif
  	u16			sk_tsflags;
  	u8			sk_shutdown;
  	u32			sk_tskey;
@@@ -1979,7 -2068,7 +1990,11 @@@ static inline void sk_set_txhash(struc
  
  static inline bool sk_rethink_txhash(struct sock *sk)
  {
++<<<<<<< HEAD
 +	if (sk->sk_txhash) {
++=======
+ 	if (sk->sk_txhash && sk->sk_txrehash == SOCK_TXREHASH_ENABLED) {
++>>>>>>> 26859240e4ee (txhash: Add socket option to control TX hash rethink behavior)
  		sk_set_txhash(sk);
  		return true;
  	}
diff --cc include/uapi/asm-generic/socket.h
index 0191b59b2785,467ca2f28760..000000000000
--- a/include/uapi/asm-generic/socket.h
+++ b/include/uapi/asm-generic/socket.h
@@@ -117,4 -122,37 +117,40 @@@
  #define SO_PREFER_BUSY_POLL	69
  #define SO_BUSY_POLL_BUDGET	70
  
++<<<<<<< HEAD
++=======
+ #define SO_NETNS_COOKIE		71
+ 
+ #define SO_BUF_LOCK		72
+ 
+ #define SO_RESERVE_MEM		73
+ 
+ #define SO_TXREHASH		74
+ 
+ #if !defined(__KERNEL__)
+ 
+ #if __BITS_PER_LONG == 64 || (defined(__x86_64__) && defined(__ILP32__))
+ /* on 64-bit and x32, avoid the ?: operator */
+ #define SO_TIMESTAMP		SO_TIMESTAMP_OLD
+ #define SO_TIMESTAMPNS		SO_TIMESTAMPNS_OLD
+ #define SO_TIMESTAMPING		SO_TIMESTAMPING_OLD
+ 
+ #define SO_RCVTIMEO		SO_RCVTIMEO_OLD
+ #define SO_SNDTIMEO		SO_SNDTIMEO_OLD
+ #else
+ #define SO_TIMESTAMP (sizeof(time_t) == sizeof(__kernel_long_t) ? SO_TIMESTAMP_OLD : SO_TIMESTAMP_NEW)
+ #define SO_TIMESTAMPNS (sizeof(time_t) == sizeof(__kernel_long_t) ? SO_TIMESTAMPNS_OLD : SO_TIMESTAMPNS_NEW)
+ #define SO_TIMESTAMPING (sizeof(time_t) == sizeof(__kernel_long_t) ? SO_TIMESTAMPING_OLD : SO_TIMESTAMPING_NEW)
+ 
+ #define SO_RCVTIMEO (sizeof(time_t) == sizeof(__kernel_long_t) ? SO_RCVTIMEO_OLD : SO_RCVTIMEO_NEW)
+ #define SO_SNDTIMEO (sizeof(time_t) == sizeof(__kernel_long_t) ? SO_SNDTIMEO_OLD : SO_SNDTIMEO_NEW)
+ #endif
+ 
+ #define SCM_TIMESTAMP           SO_TIMESTAMP
+ #define SCM_TIMESTAMPNS         SO_TIMESTAMPNS
+ #define SCM_TIMESTAMPING        SO_TIMESTAMPING
+ 
+ #endif
+ 
++>>>>>>> 26859240e4ee (txhash: Add socket option to control TX hash rethink behavior)
  #endif /* __ASM_GENERIC_SOCKET_H */
diff --cc include/uapi/linux/socket.h
index 8eb96021709c,51d6bb2f6765..000000000000
--- a/include/uapi/linux/socket.h
+++ b/include/uapi/linux/socket.h
@@@ -11,12 -9,30 +11,28 @@@
  
  typedef unsigned short __kernel_sa_family_t;
  
 -/*
 - * The definition uses anonymous union and struct in order to control the
 - * default alignment.
 - */
  struct __kernel_sockaddr_storage {
 -	union {
 -		struct {
 -			__kernel_sa_family_t	ss_family; /* address family */
 -			/* Following field(s) are implementation specific */
 -			char __data[_K_SS_MAXSIZE - sizeof(unsigned short)];
 +	__kernel_sa_family_t	ss_family;		/* address family */
 +	/* Following field(s) are implementation specific */
 +	char		__data[_K_SS_MAXSIZE - sizeof(unsigned short)];
  				/* space to achieve desired size, */
  				/* _SS_MAXSIZE value minus size of ss_family */
++<<<<<<< HEAD
 +} __attribute__ ((aligned(_K_SS_ALIGNSIZE)));	/* force desired alignment */
++=======
+ 		};
+ 		void *__align; /* implementation specific desired alignment */
+ 	};
+ };
+ 
+ #define SOCK_SNDBUF_LOCK	1
+ #define SOCK_RCVBUF_LOCK	2
+ 
+ #define SOCK_BUF_LOCK_MASK (SOCK_SNDBUF_LOCK | SOCK_RCVBUF_LOCK)
+ 
+ #define SOCK_TXREHASH_DEFAULT	((u8)-1)
+ #define SOCK_TXREHASH_DISABLED	0
+ #define SOCK_TXREHASH_ENABLED	1
++>>>>>>> 26859240e4ee (txhash: Add socket option to control TX hash rethink behavior)
  
  #endif /* _UAPI_LINUX_SOCKET_H */
diff --cc net/core/sock.c
index 84ad6223e38b,5e711b42898f..000000000000
--- a/net/core/sock.c
+++ b/net/core/sock.c
@@@ -1273,6 -1421,40 +1273,43 @@@ set_rcvbuf
  		ret = sock_bindtoindex_locked(sk, val);
  		break;
  
++<<<<<<< HEAD
++=======
+ 	case SO_BUF_LOCK:
+ 		if (val & ~SOCK_BUF_LOCK_MASK) {
+ 			ret = -EINVAL;
+ 			break;
+ 		}
+ 		sk->sk_userlocks = val | (sk->sk_userlocks &
+ 					  ~SOCK_BUF_LOCK_MASK);
+ 		break;
+ 
+ 	case SO_RESERVE_MEM:
+ 	{
+ 		int delta;
+ 
+ 		if (val < 0) {
+ 			ret = -EINVAL;
+ 			break;
+ 		}
+ 
+ 		delta = val - sk->sk_reserved_mem;
+ 		if (delta < 0)
+ 			sock_release_reserved_memory(sk, -delta);
+ 		else
+ 			ret = sock_reserve_memory(sk, delta);
+ 		break;
+ 	}
+ 
+ 	case SO_TXREHASH:
+ 		if (val < -1 || val > 1) {
+ 			ret = -EINVAL;
+ 			break;
+ 		}
+ 		sk->sk_txrehash = (u8)val;
+ 		break;
+ 
++>>>>>>> 26859240e4ee (txhash: Add socket option to control TX hash rethink behavior)
  	default:
  		ret = -ENOPROTOOPT;
  		break;
@@@ -1627,6 -1827,25 +1664,28 @@@ int sock_getsockopt(struct socket *sock
  		v.val = sk->sk_bound_dev_if;
  		break;
  
++<<<<<<< HEAD
++=======
+ 	case SO_NETNS_COOKIE:
+ 		lv = sizeof(u64);
+ 		if (len != lv)
+ 			return -EINVAL;
+ 		v.val64 = sock_net(sk)->net_cookie;
+ 		break;
+ 
+ 	case SO_BUF_LOCK:
+ 		v.val = sk->sk_userlocks & SOCK_BUF_LOCK_MASK;
+ 		break;
+ 
+ 	case SO_RESERVE_MEM:
+ 		v.val = sk->sk_reserved_mem;
+ 		break;
+ 
+ 	case SO_TXREHASH:
+ 		v.val = sk->sk_txrehash;
+ 		break;
+ 
++>>>>>>> 26859240e4ee (txhash: Add socket option to control TX hash rethink behavior)
  	default:
  		/* We implement the SO_SNDLOWAT etc to not be settable
  		 * (1003.1g 7).
@@@ -3060,10 -3287,11 +3119,11 @@@ void sock_init_data(struct socket *sock
  	sk->sk_ll_usec		=	sysctl_net_busy_read;
  #endif
  
 -	sk->sk_max_pacing_rate = ~0UL;
 -	sk->sk_pacing_rate = ~0UL;
 -	WRITE_ONCE(sk->sk_pacing_shift, 10);
 +	sk->sk_max_pacing_rate = ~0U;
 +	sk->sk_pacing_rate = ~0U;
 +	sk->sk_pacing_shift = 10;
  	sk->sk_incoming_cpu = -1;
+ 	sk->sk_txrehash = SOCK_TXREHASH_DEFAULT;
  
  	sk_rx_queue_clear(sk);
  	/*
* Unmerged path arch/alpha/include/uapi/asm/socket.h
* Unmerged path arch/mips/include/uapi/asm/socket.h
* Unmerged path arch/parisc/include/uapi/asm/socket.h
* Unmerged path arch/sparc/include/uapi/asm/socket.h
* Unmerged path include/net/sock.h
* Unmerged path include/uapi/asm-generic/socket.h
* Unmerged path include/uapi/linux/socket.h
* Unmerged path net/core/sock.c
diff --git a/net/ipv4/inet_connection_sock.c b/net/ipv4/inet_connection_sock.c
index f6ce2dcb6bfd..ccff43f60ac1 100644
--- a/net/ipv4/inet_connection_sock.c
+++ b/net/ipv4/inet_connection_sock.c
@@ -946,6 +946,9 @@ int inet_csk_listen_start(struct sock *sk, int backlog)
 	sk->sk_ack_backlog = 0;
 	inet_csk_delack_init(sk);
 
+	if (sk->sk_txrehash == SOCK_TXREHASH_DEFAULT)
+		sk->sk_txrehash = READ_ONCE(sock_net(sk)->core.sysctl_txrehash);
+
 	/* There is race window here: we announce ourselves listening,
 	 * but this transition is still not validated by get_port().
 	 * It is OK, because this socket enters to hash table only
