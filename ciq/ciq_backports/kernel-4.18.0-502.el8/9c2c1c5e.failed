net/mlx5e: Separate ethtool_steering from fs.h and make private

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-502.el8
commit-author Lama Kayal <lkayal@nvidia.com>
commit 9c2c1c5e7fde82ba79ce36ae56d78dd44b6c4ca8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-502.el8/9c2c1c5e.failed

Create a new fs_ethtool.h header file, where ethtool steering init and
cleanup functions are declared in it.
Make mlx5e_ethtool_steering struct private and declare at en_fs_ethtool.c.

	Signed-off-by: Lama Kayal <lkayal@nvidia.com>
	Reviewed-by: Tariq Toukan <tariqt@nvidia.com>
	Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
(cherry picked from commit 9c2c1c5e7fde82ba79ce36ae56d78dd44b6c4ca8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en/fs.h
#	drivers/net/ethernet/mellanox/mlx5/core/en_fs.c
#	drivers/net/ethernet/mellanox/mlx5/core/en_fs_ethtool.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en/fs.h
index 9b8cdf2e68ad,6d26a5415afc..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en/fs.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en/fs.h
@@@ -83,40 -89,9 +83,43 @@@ enum 
  #endif
  };
  
 -struct mlx5e_flow_steering;
  struct mlx5e_priv;
  
++<<<<<<< HEAD
 +#ifdef CONFIG_MLX5_EN_RXNFC
 +
 +struct mlx5e_ethtool_table {
 +	struct mlx5_flow_table *ft;
 +	int                    num_rules;
 +};
 +
 +#define ETHTOOL_NUM_L3_L4_FTS 7
 +#define ETHTOOL_NUM_L2_FTS 4
 +
 +struct mlx5e_ethtool_steering {
 +	struct mlx5e_ethtool_table      l3_l4_ft[ETHTOOL_NUM_L3_L4_FTS];
 +	struct mlx5e_ethtool_table      l2_ft[ETHTOOL_NUM_L2_FTS];
 +	struct list_head                rules;
 +	int                             tot_num_rules;
 +};
 +
 +void mlx5e_ethtool_init_steering(struct mlx5e_priv *priv);
 +void mlx5e_ethtool_cleanup_steering(struct mlx5e_priv *priv);
 +int mlx5e_ethtool_set_rxnfc(struct mlx5e_priv *priv, struct ethtool_rxnfc *cmd);
 +int mlx5e_ethtool_get_rxnfc(struct mlx5e_priv *priv,
 +			    struct ethtool_rxnfc *info, u32 *rule_locs);
 +#else
 +static inline void mlx5e_ethtool_init_steering(struct mlx5e_priv *priv)    { }
 +static inline void mlx5e_ethtool_cleanup_steering(struct mlx5e_priv *priv) { }
 +static inline int mlx5e_ethtool_set_rxnfc(struct mlx5e_priv *priv, struct ethtool_rxnfc *cmd)
 +{ return -EOPNOTSUPP; }
 +static inline int mlx5e_ethtool_get_rxnfc(struct mlx5e_priv *priv,
 +					  struct ethtool_rxnfc *info, u32 *rule_locs)
 +{ return -EOPNOTSUPP; }
 +#endif /* CONFIG_MLX5_EN_RXNFC */
 +
++=======
++>>>>>>> 9c2c1c5e7fde (net/mlx5e: Separate ethtool_steering from fs.h and make private)
  #ifdef CONFIG_MLX5_EN_ARFS
  struct mlx5e_arfs_tables;
  
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_fs.c
index 6768f21c4eb1,71d9eab49ec5..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_fs.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_fs.c
@@@ -40,7 -40,36 +40,8 @@@
  #include "en_tc.h"
  #include "lib/mpfs.h"
  #include "en/ptp.h"
+ #include "en/fs_ethtool.h"
  
 -struct mlx5e_flow_steering {
 -	struct work_struct		set_rx_mode_work;
 -	bool				state_destroy;
 -	bool				vlan_strip_disable;
 -	struct mlx5_core_dev		*mdev;
 -	struct net_device		*netdev;
 -	struct mlx5_flow_namespace      *ns;
 -	struct mlx5_flow_namespace      *egress_ns;
 -#ifdef CONFIG_MLX5_EN_RXNFC
 -	struct mlx5e_ethtool_steering   *ethtool;
 -#endif
 -	struct mlx5e_tc_table           *tc;
 -	struct mlx5e_promisc_table      promisc;
 -	struct mlx5e_vlan_table         *vlan;
 -	struct mlx5e_l2_table           l2;
 -	struct mlx5_ttc_table           *ttc;
 -	struct mlx5_ttc_table           *inner_ttc;
 -#ifdef CONFIG_MLX5_EN_ARFS
 -	struct mlx5e_arfs_tables       *arfs;
 -#endif
 -#ifdef CONFIG_MLX5_EN_TLS
 -	struct mlx5e_accel_fs_tcp      *accel_tcp;
 -#endif
 -	struct mlx5e_fs_udp            *udp;
 -	struct mlx5e_fs_any            *any;
 -	struct mlx5e_ptp_fs            *ptp_fs;
 -};
 -
  static int mlx5e_add_l2_flow_rule(struct mlx5e_flow_steering *fs,
  				  struct mlx5e_l2_rule *ai, int type);
  static void mlx5e_del_l2_flow_rule(struct mlx5e_flow_steering *fs,
@@@ -1369,6 -1403,32 +1370,35 @@@ static void mlx5e_fs_tc_free(struct mlx
  	mlx5e_tc_table_free(fs->tc);
  }
  
++<<<<<<< HEAD
++=======
+ struct mlx5e_tc_table *mlx5e_fs_get_tc(struct mlx5e_flow_steering *fs)
+ {
+ 	return fs->tc;
+ }
+ 
+ #ifdef CONFIG_MLX5_EN_RXNFC
+ static int mlx5e_fs_ethtool_alloc(struct mlx5e_flow_steering *fs)
+ {
+ 	return mlx5e_ethtool_alloc(&fs->ethtool);
+ }
+ 
+ static void mlx5e_fs_ethtool_free(struct mlx5e_flow_steering *fs)
+ {
+ 	mlx5e_ethtool_free(fs->ethtool);
+ }
+ 
+ struct mlx5e_ethtool_steering *mlx5e_fs_get_ethtool(struct mlx5e_flow_steering *fs)
+ {
+ 	return fs->ethtool;
+ }
+ #else
+ static int mlx5e_fs_ethtool_alloc(struct mlx5e_flow_steering *fs)
+ { return 0; }
+ static void mlx5e_fs_ethtool_free(struct mlx5e_flow_steering *fs) { }
+ #endif
+ 
++>>>>>>> 9c2c1c5e7fde (net/mlx5e: Separate ethtool_steering from fs.h and make private)
  struct mlx5e_flow_steering *mlx5e_fs_init(const struct mlx5e_profile *profile,
  					  struct mlx5_core_dev *mdev,
  					  bool state_destroy)
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_fs_ethtool.c
index 3e4bc7836ef4,2a67798cd446..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_fs_ethtool.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_fs_ethtool.c
@@@ -826,8 -847,22 +842,25 @@@ mlx5e_ethtool_get_all_flows(struct mlx5
  	return err;
  }
  
++<<<<<<< HEAD
 +void mlx5e_ethtool_cleanup_steering(struct mlx5e_priv *priv)
++=======
+ int mlx5e_ethtool_alloc(struct mlx5e_ethtool_steering **ethtool)
+ {
+ 	*ethtool =  kvzalloc(sizeof(**ethtool), GFP_KERNEL);
+ 	if (!*ethtool)
+ 		return -ENOMEM;
+ 	return 0;
+ }
+ 
+ void mlx5e_ethtool_free(struct mlx5e_ethtool_steering *ethtool)
+ {
+ 	kvfree(ethtool);
+ }
+ 
+ void mlx5e_ethtool_cleanup_steering(struct mlx5e_flow_steering *fs)
++>>>>>>> 9c2c1c5e7fde (net/mlx5e: Separate ethtool_steering from fs.h and make private)
  {
 -	struct mlx5e_ethtool_steering *ethtool = mlx5e_fs_get_ethtool(fs);
  	struct mlx5e_ethtool_rule *iter;
  	struct mlx5e_ethtool_rule *temp;
  
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en/fs.h
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en/fs_ethtool.h b/drivers/net/ethernet/mellanox/mlx5/core/en/fs_ethtool.h
new file mode 100644
index 000000000000..9e276fd3c0cf
--- /dev/null
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en/fs_ethtool.h
@@ -0,0 +1,29 @@
+/* SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB */
+/* Copyright (c) 2022, NVIDIA CORPORATION & AFFILIATES. */
+
+#ifndef __MLX5E_FS_ETHTOOL_H__
+#define __MLX5E_FS_ETHTOOL_H__
+
+struct mlx5e_priv;
+struct mlx5e_ethtool_steering;
+#ifdef CONFIG_MLX5_EN_RXNFC
+int mlx5e_ethtool_alloc(struct mlx5e_ethtool_steering **ethtool);
+void mlx5e_ethtool_free(struct mlx5e_ethtool_steering *ethtool);
+void mlx5e_ethtool_init_steering(struct mlx5e_flow_steering *fs);
+void mlx5e_ethtool_cleanup_steering(struct mlx5e_flow_steering *fs);
+int mlx5e_ethtool_set_rxnfc(struct mlx5e_priv *priv, struct ethtool_rxnfc *cmd);
+int mlx5e_ethtool_get_rxnfc(struct mlx5e_priv *priv,
+			    struct ethtool_rxnfc *info, u32 *rule_locs);
+#else
+static inline int mlx5e_ethtool_alloc(struct mlx5e_ethtool_steering **ethtool)
+{ return 0; }
+static inline void mlx5e_ethtool_free(struct mlx5e_ethtool_steering *ethtool) { }
+static inline void mlx5e_ethtool_init_steering(struct mlx5e_flow_steering *fs) { }
+static inline void mlx5e_ethtool_cleanup_steering(struct mlx5e_flow_steering *fs) { }
+static inline int mlx5e_ethtool_set_rxnfc(struct mlx5e_priv *priv, struct ethtool_rxnfc *cmd)
+{ return -EOPNOTSUPP; }
+static inline int mlx5e_ethtool_get_rxnfc(struct mlx5e_priv *priv,
+					  struct ethtool_rxnfc *info, u32 *rule_locs)
+{ return -EOPNOTSUPP; }
+#endif
+#endif
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en_ethtool.c b/drivers/net/ethernet/mellanox/mlx5/core/en_ethtool.c
index b811207fe5ed..551468dbc93f 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_ethtool.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_ethtool.c
@@ -38,6 +38,7 @@
 #include "en/xsk/pool.h"
 #include "en/ptp.h"
 #include "lib/clock.h"
+#include "en/fs_ethtool.h"
 
 void mlx5e_ethtool_get_drvinfo(struct mlx5e_priv *priv,
 			       struct ethtool_drvinfo *drvinfo)
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_fs.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_fs_ethtool.c
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en_rep.c b/drivers/net/ethernet/mellanox/mlx5/core/en_rep.c
index 458283eaa812..257ac3b0d7f1 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_rep.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_rep.c
@@ -56,6 +56,7 @@
 #include "en_accel/ipsec.h"
 #include "en/tc/int_port.h"
 #include "en/ptp.h"
+#include "en/fs_ethtool.h"
 
 #define MLX5E_REP_PARAMS_DEF_LOG_SQ_SIZE \
 	max(0x7, MLX5E_PARAMS_MINIMUM_LOG_SQ_SIZE)
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/ipoib/ethtool.c b/drivers/net/ethernet/mellanox/mlx5/core/ipoib/ethtool.c
index e1a4c0129a49..2c1254f7ddde 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/ipoib/ethtool.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/ipoib/ethtool.c
@@ -32,6 +32,7 @@
 
 #include "en.h"
 #include "ipoib.h"
+#include "en/fs_ethtool.h"
 
 static void mlx5i_get_drvinfo(struct net_device *dev,
 			      struct ethtool_drvinfo *drvinfo)
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/ipoib/ipoib.c b/drivers/net/ethernet/mellanox/mlx5/core/ipoib/ipoib.c
index d84889d6efe2..3ad796050143 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/ipoib/ipoib.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/ipoib/ipoib.c
@@ -35,6 +35,7 @@
 #include "en.h"
 #include "en/params.h"
 #include "ipoib.h"
+#include "en/fs_ethtool.h"
 
 #define IB_DEFAULT_Q_KEY   0xb1b
 #define MLX5I_PARAMS_DEFAULT_LOG_RQ_SIZE 9
