drm/amd/display: hpd rx irq not working with eDP interface

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-502.el8
commit-author Robin Chen <robin.chen@amd.com>
commit eeefe7c4820b6baa0462a8b723ea0a3b5846ccae
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-502.el8/eeefe7c4.failed

[Why]
This is the fix for the defect of commit ab144f0b4ad6
("drm/amd/display: Allow individual control of eDP hotplug support").

[How]
To revise the default eDP hotplug setting and use the enum to git rid
of the magic number for different options.

Fixes: ab144f0b4ad6 ("drm/amd/display: Allow individual control of eDP hotplug support")
	Cc: stable@vger.kernel.org
	Cc: Mario Limonciello <mario.limonciello@amd.com>
	Reviewed-by: Wenjing Liu <Wenjing.Liu@amd.com>
	Acked-by: Qingqing Zhuo <qingqing.zhuo@amd.com>
	Signed-off-by: Robin Chen <robin.chen@amd.com>
	Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
	Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
(cherry picked from commit eeefe7c4820b6baa0462a8b723ea0a3b5846ccae)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/amd/display/dc/dc_types.h
#	drivers/gpu/drm/amd/display/dc/link/link_factory.c
diff --cc drivers/gpu/drm/amd/display/dc/dc_types.h
index ad9041472cca,45ab48fe5d00..000000000000
--- a/drivers/gpu/drm/amd/display/dc/dc_types.h
+++ b/drivers/gpu/drm/amd/display/dc/dc_types.h
@@@ -993,4 -929,162 +993,165 @@@ struct display_endpoint_id 
  	enum display_endpoint_type ep_type;
  };
  
++<<<<<<< HEAD
++=======
+ #if defined(CONFIG_DRM_AMD_SECURE_DISPLAY)
+ struct otg_phy_mux {
+ 	uint8_t phy_output_num;
+ 	uint8_t otg_output_num;
+ };
+ #endif
+ 
+ enum dc_detect_reason {
+ 	DETECT_REASON_BOOT,
+ 	DETECT_REASON_RESUMEFROMS3S4,
+ 	DETECT_REASON_HPD,
+ 	DETECT_REASON_HPDRX,
+ 	DETECT_REASON_FALLBACK,
+ 	DETECT_REASON_RETRAIN,
+ 	DETECT_REASON_TDR,
+ };
+ 
+ struct dc_link_status {
+ 	bool link_active;
+ 	struct dpcd_caps *dpcd_caps;
+ };
+ 
+ union hdcp_rx_caps {
+ 	struct {
+ 		uint8_t version;
+ 		uint8_t reserved;
+ 		struct {
+ 			uint8_t repeater	: 1;
+ 			uint8_t hdcp_capable	: 1;
+ 			uint8_t reserved	: 6;
+ 		} byte0;
+ 	} fields;
+ 	uint8_t raw[3];
+ };
+ 
+ union hdcp_bcaps {
+ 	struct {
+ 		uint8_t HDCP_CAPABLE:1;
+ 		uint8_t REPEATER:1;
+ 		uint8_t RESERVED:6;
+ 	} bits;
+ 	uint8_t raw;
+ };
+ 
+ struct hdcp_caps {
+ 	union hdcp_rx_caps rx_caps;
+ 	union hdcp_bcaps bcaps;
+ };
+ 
+ /* DP MST stream allocation (payload bandwidth number) */
+ struct link_mst_stream_allocation {
+ 	/* DIG front */
+ 	const struct stream_encoder *stream_enc;
+ 	/* HPO DP Stream Encoder */
+ 	const struct hpo_dp_stream_encoder *hpo_dp_stream_enc;
+ 	/* associate DRM payload table with DC stream encoder */
+ 	uint8_t vcp_id;
+ 	/* number of slots required for the DP stream in transport packet */
+ 	uint8_t slot_count;
+ };
+ 
+ #define MAX_CONTROLLER_NUM 6
+ 
+ /* DP MST stream allocation table */
+ struct link_mst_stream_allocation_table {
+ 	/* number of DP video streams */
+ 	int stream_count;
+ 	/* array of stream allocations */
+ 	struct link_mst_stream_allocation stream_allocations[MAX_CONTROLLER_NUM];
+ };
+ 
+ /* PSR feature flags */
+ struct psr_settings {
+ 	bool psr_feature_enabled;		// PSR is supported by sink
+ 	bool psr_allow_active;			// PSR is currently active
+ 	enum dc_psr_version psr_version;		// Internal PSR version, determined based on DPCD
+ 	bool psr_vtotal_control_support;	// Vtotal control is supported by sink
+ 	unsigned long long psr_dirty_rects_change_timestamp_ns;	// for delay of enabling PSR-SU
+ 
+ 	/* These parameters are calculated in Driver,
+ 	 * based on display timing and Sink capabilities.
+ 	 * If VBLANK region is too small and Sink takes a long time
+ 	 * to set up RFB, it may take an extra frame to enter PSR state.
+ 	 */
+ 	bool psr_frame_capture_indication_req;
+ 	unsigned int psr_sdp_transmit_line_num_deadline;
+ 	uint8_t force_ffu_mode;
+ 	unsigned int psr_power_opt;
+ };
+ 
+ /* To split out "global" and "per-panel" config settings.
+  * Add a struct dc_panel_config under dc_link
+  */
+ struct dc_panel_config {
+ 	/* extra panel power sequence parameters */
+ 	struct pps {
+ 		unsigned int extra_t3_ms;
+ 		unsigned int extra_t7_ms;
+ 		unsigned int extra_delay_backlight_off;
+ 		unsigned int extra_post_t7_ms;
+ 		unsigned int extra_pre_t11_ms;
+ 		unsigned int extra_t12_ms;
+ 		unsigned int extra_post_OUI_ms;
+ 	} pps;
+ 	/* nit brightness */
+ 	struct nits_brightness {
+ 		unsigned int peak; /* nits */
+ 		unsigned int max_avg; /* nits */
+ 		unsigned int min; /* 1/10000 nits */
+ 		unsigned int max_nonboost_brightness_millinits;
+ 		unsigned int min_brightness_millinits;
+ 	} nits_brightness;
+ 	/* PSR */
+ 	struct psr {
+ 		bool disable_psr;
+ 		bool disallow_psrsu;
+ 		bool rc_disable;
+ 		bool rc_allow_static_screen;
+ 		bool rc_allow_fullscreen_VPB;
+ 	} psr;
+ 	/* ABM */
+ 	struct varib {
+ 		unsigned int varibright_feature_enable;
+ 		unsigned int def_varibright_level;
+ 		unsigned int abm_config_setting;
+ 	} varib;
+ 	/* edp DSC */
+ 	struct dsc {
+ 		bool disable_dsc_edp;
+ 		unsigned int force_dsc_edp_policy;
+ 	} dsc;
+ 	/* eDP ILR */
+ 	struct ilr {
+ 		bool optimize_edp_link_rate; /* eDP ILR */
+ 	} ilr;
+ };
+ 
+ /*
+  *  USB4 DPIA BW ALLOCATION STRUCTS
+  */
+ struct dc_dpia_bw_alloc {
+ 	int sink_verified_bw;  // The Verified BW that sink can allocated and use that has been verified already
+ 	int sink_allocated_bw; // The Actual Allocated BW that sink currently allocated
+ 	int sink_max_bw;       // The Max BW that sink can require/support
+ 	int estimated_bw;      // The estimated available BW for this DPIA
+ 	int bw_granularity;    // BW Granularity
+ 	bool bw_alloc_enabled; // The BW Alloc Mode Support is turned ON for all 3:  DP-Tx & Dpia & CM
+ 	bool response_ready;   // Response ready from the CM side
+ };
+ 
+ #define MAX_SINKS_PER_LINK 4
+ 
+ enum dc_hpd_enable_select {
+ 	HPD_EN_FOR_ALL_EDP = 0,
+ 	HPD_EN_FOR_PRIMARY_EDP_ONLY,
+ 	HPD_EN_FOR_SECONDARY_EDP_ONLY,
+ };
+ 
++>>>>>>> eeefe7c4820b (drm/amd/display: hpd rx irq not working with eDP interface)
  #endif /* DC_TYPES_H_ */
* Unmerged path drivers/gpu/drm/amd/display/dc/link/link_factory.c
* Unmerged path drivers/gpu/drm/amd/display/dc/dc_types.h
* Unmerged path drivers/gpu/drm/amd/display/dc/link/link_factory.c
