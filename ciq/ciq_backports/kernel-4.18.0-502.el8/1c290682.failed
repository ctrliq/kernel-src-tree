x86/resctrl: Pass the schema to resctrl filesystem functions

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-502.el8
commit-author James Morse <james.morse@arm.com>
commit 1c290682c0c9c47aa7594ffc83b9cedd20c1ec87
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-502.el8/1c290682.failed

Once the CDP resources are merged, there will be two struct
resctrl_schema for one struct rdt_resource. CDP becomes a type of
configuration that belongs to the schema.

Helpers like rdtgroup_cbm_overlaps() need access to the schema to query
the configuration (or configurations) based on schema properties.

Change these functions to take a struct schema instead of the struct
rdt_resource. All the modified functions are part of the filesystem code
that will move to /fs/resctrl once it is possible to support a second
architecture.

	Signed-off-by: James Morse <james.morse@arm.com>
	Signed-off-by: Borislav Petkov <bp@suse.de>
	Reviewed-by: Jamie Iles <jamie@nuviainc.com>
	Reviewed-by: Reinette Chatre <reinette.chatre@intel.com>
	Tested-by: Babu Moger <babu.moger@amd.com>
Link: https://lkml.kernel.org/r/20210728170637.25610-10-james.morse@arm.com
(cherry picked from commit 1c290682c0c9c47aa7594ffc83b9cedd20c1ec87)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kernel/cpu/resctrl/ctrlmondata.c
#	arch/x86/kernel/cpu/resctrl/internal.h
#	arch/x86/kernel/cpu/resctrl/rdtgroup.c
#	include/linux/resctrl.h
diff --cc arch/x86/kernel/cpu/resctrl/ctrlmondata.c
index 84ba438cc344,219b057e65b0..000000000000
--- a/arch/x86/kernel/cpu/resctrl/ctrlmondata.c
+++ b/arch/x86/kernel/cpu/resctrl/ctrlmondata.c
@@@ -292,11 -289,13 +295,18 @@@ done
  static int rdtgroup_parse_resource(char *resname, char *tok,
  				   struct rdtgroup *rdtgrp)
  {
 -	struct resctrl_schema *s;
  	struct rdt_resource *r;
  
++<<<<<<< HEAD
 +	for_each_alloc_enabled_rdt_resource(r) {
 +		if (!strcmp(resname, r->name) && rdtgrp->closid < r->num_closid)
 +			return parse_line(tok, r, rdtgrp);
++=======
+ 	list_for_each_entry(s, &resctrl_schema_all, list) {
+ 		r = s->res;
+ 		if (!strcmp(resname, r->name) && rdtgrp->closid < s->num_closid)
+ 			return parse_line(tok, s, rdtgrp);
++>>>>>>> 1c290682c0c9 (x86/resctrl: Pass the schema to resctrl filesystem functions)
  	}
  	rdt_last_cmd_printf("Unknown or unsupported resource name '%s'\n", resname);
  	return -EINVAL;
@@@ -379,8 -380,10 +389,13 @@@ out
  	return ret ?: nbytes;
  }
  
- static void show_doms(struct seq_file *s, struct rdt_resource *r, int closid)
+ static void show_doms(struct seq_file *s, struct resctrl_schema *schema, int closid)
  {
++<<<<<<< HEAD
++=======
+ 	struct rdt_resource *r = schema->res;
+ 	struct rdt_hw_domain *hw_dom;
++>>>>>>> 1c290682c0c9 (x86/resctrl: Pass the schema to resctrl filesystem functions)
  	struct rdt_domain *dom;
  	bool sep = false;
  	u32 ctrl_val;
@@@ -425,9 -432,9 +440,15 @@@ int rdtgroup_schemata_show(struct kernf
  			}
  		} else {
  			closid = rdtgrp->closid;
++<<<<<<< HEAD
 +			for_each_alloc_enabled_rdt_resource(r) {
 +				if (closid < r->num_closid)
 +					show_doms(s, r, closid);
++=======
+ 			list_for_each_entry(schema, &resctrl_schema_all, list) {
+ 				if (closid < schema->num_closid)
+ 					show_doms(s, schema, closid);
++>>>>>>> 1c290682c0c9 (x86/resctrl: Pass the schema to resctrl filesystem functions)
  			}
  		}
  	} else {
diff --cc arch/x86/kernel/cpu/resctrl/internal.h
index 6a5f60a37219,5d5debe6e8d2..000000000000
--- a/arch/x86/kernel/cpu/resctrl/internal.h
+++ b/arch/x86/kernel/cpu/resctrl/internal.h
@@@ -483,24 -392,18 +483,33 @@@ struct rdt_resource 
  	unsigned int		msr_base;
  	void (*msr_update)	(struct rdt_domain *d, struct msr_param *m,
  				 struct rdt_resource *r);
 +	int			data_width;
 +	struct list_head	domains;
 +	struct rdt_cache	cache;
 +	struct rdt_membw	membw;
 +	const char		*format_str;
 +	int (*parse_ctrlval)(struct rdt_parse_data *data,
 +			     struct rdt_resource *r,
 +			     struct rdt_domain *d);
 +	struct list_head	evt_list;
 +	int			num_rmid;
  	unsigned int		mon_scale;
  	unsigned int		mbm_width;
 +	unsigned long		fflags;
  };
  
++<<<<<<< HEAD
 +int parse_cbm(struct rdt_parse_data *data, struct rdt_resource *r,
++=======
+ static inline struct rdt_hw_resource *resctrl_to_arch_res(struct rdt_resource *r)
+ {
+ 	return container_of(r, struct rdt_hw_resource, r_resctrl);
+ }
+ 
+ int parse_cbm(struct rdt_parse_data *data, struct resctrl_schema *s,
++>>>>>>> 1c290682c0c9 (x86/resctrl: Pass the schema to resctrl filesystem functions)
  	      struct rdt_domain *d);
- int parse_bw(struct rdt_parse_data *data, struct rdt_resource *r,
+ int parse_bw(struct rdt_parse_data *data, struct resctrl_schema *s,
  	     struct rdt_domain *d);
  
  extern struct mutex rdtgroup_mutex;
diff --cc arch/x86/kernel/cpu/resctrl/rdtgroup.c
index fc8061800ae6,53d281a9f54f..000000000000
--- a/arch/x86/kernel/cpu/resctrl/rdtgroup.c
+++ b/arch/x86/kernel/cpu/resctrl/rdtgroup.c
@@@ -1292,7 -1282,9 +1293,13 @@@ static bool rdtgroup_mode_test_exclusiv
  			continue;
  		has_cache = true;
  		list_for_each_entry(d, &r->domains, list) {
++<<<<<<< HEAD
 +			if (rdtgroup_cbm_overlaps(r, d, d->ctrl_val[closid],
++=======
+ 			hw_dom = resctrl_to_arch_dom(d);
+ 			if (rdtgroup_cbm_overlaps(s, d,
+ 						  hw_dom->ctrl_val[closid],
++>>>>>>> 1c290682c0c9 (x86/resctrl: Pass the schema to resctrl filesystem functions)
  						  rdtgrp->closid, false)) {
  				rdt_last_cmd_puts("Schemata overlaps\n");
  				return false;
diff --cc include/linux/resctrl.h
index 9b05af9b3e28,979592c869e6..000000000000
--- a/include/linux/resctrl.h
+++ b/include/linux/resctrl.h
@@@ -13,4 -15,176 +13,179 @@@ int proc_resctrl_show(struct seq_file *
  
  #endif
  
++<<<<<<< HEAD
++=======
+ /**
+  * enum resctrl_conf_type - The type of configuration.
+  * @CDP_NONE:	No prioritisation, both code and data are controlled or monitored.
+  * @CDP_CODE:	Configuration applies to instruction fetches.
+  * @CDP_DATA:	Configuration applies to reads and writes.
+  */
+ enum resctrl_conf_type {
+ 	CDP_NONE,
+ 	CDP_CODE,
+ 	CDP_DATA,
+ };
+ 
+ /**
+  * struct rdt_domain - group of CPUs sharing a resctrl resource
+  * @list:		all instances of this resource
+  * @id:			unique id for this instance
+  * @cpu_mask:		which CPUs share this resource
+  * @new_ctrl:		new ctrl value to be loaded
+  * @have_new_ctrl:	did user provide new_ctrl for this domain
+  * @rmid_busy_llc:	bitmap of which limbo RMIDs are above threshold
+  * @mbm_total:		saved state for MBM total bandwidth
+  * @mbm_local:		saved state for MBM local bandwidth
+  * @mbm_over:		worker to periodically read MBM h/w counters
+  * @cqm_limbo:		worker to periodically read CQM h/w counters
+  * @mbm_work_cpu:	worker CPU for MBM h/w counters
+  * @cqm_work_cpu:	worker CPU for CQM h/w counters
+  * @plr:		pseudo-locked region (if any) associated with domain
+  */
+ struct rdt_domain {
+ 	struct list_head		list;
+ 	int				id;
+ 	struct cpumask			cpu_mask;
+ 	u32				new_ctrl;
+ 	bool				have_new_ctrl;
+ 	unsigned long			*rmid_busy_llc;
+ 	struct mbm_state		*mbm_total;
+ 	struct mbm_state		*mbm_local;
+ 	struct delayed_work		mbm_over;
+ 	struct delayed_work		cqm_limbo;
+ 	int				mbm_work_cpu;
+ 	int				cqm_work_cpu;
+ 	struct pseudo_lock_region	*plr;
+ };
+ 
+ /**
+  * struct resctrl_cache - Cache allocation related data
+  * @cbm_len:		Length of the cache bit mask
+  * @min_cbm_bits:	Minimum number of consecutive bits to be set
+  * @cbm_idx_mult:	Multiplier of CBM index
+  * @cbm_idx_offset:	Offset of CBM index. CBM index is computed by:
+  *			closid * cbm_idx_multi + cbm_idx_offset
+  *			in a cache bit mask
+  * @shareable_bits:	Bitmask of shareable resource with other
+  *			executing entities
+  * @arch_has_sparse_bitmaps:	True if a bitmap like f00f is valid.
+  * @arch_has_empty_bitmaps:	True if the '0' bitmap is valid.
+  * @arch_has_per_cpu_cfg:	True if QOS_CFG register for this cache
+  *				level has CPU scope.
+  */
+ struct resctrl_cache {
+ 	unsigned int	cbm_len;
+ 	unsigned int	min_cbm_bits;
+ 	unsigned int	cbm_idx_mult;	// TODO remove this
+ 	unsigned int	cbm_idx_offset; // TODO remove this
+ 	unsigned int	shareable_bits;
+ 	bool		arch_has_sparse_bitmaps;
+ 	bool		arch_has_empty_bitmaps;
+ 	bool		arch_has_per_cpu_cfg;
+ };
+ 
+ /**
+  * enum membw_throttle_mode - System's memory bandwidth throttling mode
+  * @THREAD_THROTTLE_UNDEFINED:	Not relevant to the system
+  * @THREAD_THROTTLE_MAX:	Memory bandwidth is throttled at the core
+  *				always using smallest bandwidth percentage
+  *				assigned to threads, aka "max throttling"
+  * @THREAD_THROTTLE_PER_THREAD:	Memory bandwidth is throttled at the thread
+  */
+ enum membw_throttle_mode {
+ 	THREAD_THROTTLE_UNDEFINED = 0,
+ 	THREAD_THROTTLE_MAX,
+ 	THREAD_THROTTLE_PER_THREAD,
+ };
+ 
+ /**
+  * struct resctrl_membw - Memory bandwidth allocation related data
+  * @min_bw:		Minimum memory bandwidth percentage user can request
+  * @bw_gran:		Granularity at which the memory bandwidth is allocated
+  * @delay_linear:	True if memory B/W delay is in linear scale
+  * @arch_needs_linear:	True if we can't configure non-linear resources
+  * @throttle_mode:	Bandwidth throttling mode when threads request
+  *			different memory bandwidths
+  * @mba_sc:		True if MBA software controller(mba_sc) is enabled
+  * @mb_map:		Mapping of memory B/W percentage to memory B/W delay
+  */
+ struct resctrl_membw {
+ 	u32				min_bw;
+ 	u32				bw_gran;
+ 	u32				delay_linear;
+ 	bool				arch_needs_linear;
+ 	enum membw_throttle_mode	throttle_mode;
+ 	bool				mba_sc;
+ 	u32				*mb_map;
+ };
+ 
+ struct rdt_parse_data;
+ struct resctrl_schema;
+ 
+ /**
+  * struct rdt_resource - attributes of a resctrl resource
+  * @rid:		The index of the resource
+  * @alloc_enabled:	Is allocation enabled on this machine
+  * @mon_enabled:	Is monitoring enabled for this feature
+  * @alloc_capable:	Is allocation available on this machine
+  * @mon_capable:	Is monitor feature available on this machine
+  * @num_rmid:		Number of RMIDs available
+  * @cache_level:	Which cache level defines scope of this resource
+  * @cache:		Cache allocation related data
+  * @membw:		If the component has bandwidth controls, their properties.
+  * @domains:		All domains for this resource
+  * @name:		Name to use in "schemata" file.
+  * @data_width:		Character width of data when displaying
+  * @default_ctrl:	Specifies default cache cbm or memory B/W percent.
+  * @format_str:		Per resource format string to show domain value
+  * @parse_ctrlval:	Per resource function pointer to parse control values
+  * @evt_list:		List of monitoring events
+  * @fflags:		flags to choose base and info files
+  */
+ struct rdt_resource {
+ 	int			rid;
+ 	bool			alloc_enabled;
+ 	bool			mon_enabled;
+ 	bool			alloc_capable;
+ 	bool			mon_capable;
+ 	int			num_rmid;
+ 	int			cache_level;
+ 	struct resctrl_cache	cache;
+ 	struct resctrl_membw	membw;
+ 	struct list_head	domains;
+ 	char			*name;
+ 	int			data_width;
+ 	u32			default_ctrl;
+ 	const char		*format_str;
+ 	int			(*parse_ctrlval)(struct rdt_parse_data *data,
+ 						 struct resctrl_schema *s,
+ 						 struct rdt_domain *d);
+ 	struct list_head	evt_list;
+ 	unsigned long		fflags;
+ 
+ };
+ 
+ /**
+  * struct resctrl_schema - configuration abilities of a resource presented to
+  *			   user-space
+  * @list:	Member of resctrl_schema_all.
+  * @conf_type:	Whether this schema is specific to code/data.
+  * @res:	The resource structure exported by the architecture to describe
+  *		the hardware that is configured by this schema.
+  * @num_closid:	The number of closid that can be used with this schema. When
+  *		features like CDP are enabled, this will be lower than the
+  *		hardware supports for the resource.
+  */
+ struct resctrl_schema {
+ 	struct list_head		list;
+ 	enum resctrl_conf_type		conf_type;
+ 	struct rdt_resource		*res;
+ 	u32				num_closid;
+ };
+ 
+ /* The number of closid supported by this resource regardless of CDP */
+ u32 resctrl_arch_get_num_closid(struct rdt_resource *r);
+ 
++>>>>>>> 1c290682c0c9 (x86/resctrl: Pass the schema to resctrl filesystem functions)
  #endif /* _RESCTRL_H */
* Unmerged path arch/x86/kernel/cpu/resctrl/ctrlmondata.c
* Unmerged path arch/x86/kernel/cpu/resctrl/internal.h
* Unmerged path arch/x86/kernel/cpu/resctrl/rdtgroup.c
* Unmerged path include/linux/resctrl.h
