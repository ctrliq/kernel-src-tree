drm/i915: Add _PICK_EVEN_2RANGES()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-502.el8
commit-author Lucas De Marchi <lucas.demarchi@intel.com>
commit 357513233d6456c9f99e34794897efd4ae907e83
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-502.el8/35751323.failed

It's a constant pattern in the driver to need to use 2 ranges of MMIOs
based on port, phy, pll, etc. When that happens, instead of using
_PICK_EVEN(), _PICK() needs to be used.  Using _PICK() is discouraged
due to some reasons like:

1) It increases the code size since the array is declared
   in each call site
2) Developers need to be careful not to incur an
   out-of-bounds array access
3) Developers need to be careful that the indexes match the
   table. For that it may be that the table needs to contain
   holes, making (1) even worse.

Add a variant of _PICK_EVEN() that works with 2 ranges and selects which
one to use depending on the index value.

v2: Fix the address expansion in the example (Anusha)
v3: Also rename macro to _PICK_EVEN_2RANGES() in the documentation
    and reword it to clarify what ranges are chosen based on the index
    (Jani)

	Signed-off-by: Lucas De Marchi <lucas.demarchi@intel.com>
	Reviewed-by: Anusha Srivatsa <anusha.srivatsa@intel.com>
	Acked-by: Jani Nikula <jani.nikula@intel.com>
Link: https://patchwork.freedesktop.org/patch/msgid/20230125182403.7526-1-lucas.demarchi@intel.com
(cherry picked from commit 357513233d6456c9f99e34794897efd4ae907e83)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/i915/i915_reg_defs.h
diff --cc drivers/gpu/drm/i915/i915_reg_defs.h
index 8f486f77609f,983c5aa3045b..000000000000
--- a/drivers/gpu/drm/i915/i915_reg_defs.h
+++ b/drivers/gpu/drm/i915/i915_reg_defs.h
@@@ -98,6 -98,63 +98,66 @@@
   */
  #define REG_FIELD_GET64(__mask, __val)	((u64)FIELD_GET(__mask, __val))
  
++<<<<<<< HEAD
++=======
+ #define __MASKED_FIELD(mask, value) ((mask) << 16 | (value))
+ #define _MASKED_FIELD(mask, value) ({					   \
+ 	if (__builtin_constant_p(mask))					   \
+ 		BUILD_BUG_ON_MSG(((mask) & 0xffff0000), "Incorrect mask"); \
+ 	if (__builtin_constant_p(value))				   \
+ 		BUILD_BUG_ON_MSG((value) & 0xffff0000, "Incorrect value"); \
+ 	if (__builtin_constant_p(mask) && __builtin_constant_p(value))	   \
+ 		BUILD_BUG_ON_MSG((value) & ~(mask),			   \
+ 				 "Incorrect value for mask");		   \
+ 	__MASKED_FIELD(mask, value); })
+ #define _MASKED_BIT_ENABLE(a)	({ typeof(a) _a = (a); _MASKED_FIELD(_a, _a); })
+ #define _MASKED_BIT_DISABLE(a)	(_MASKED_FIELD((a), 0))
+ 
+ /*
+  * Given the first two numbers __a and __b of arbitrarily many evenly spaced
+  * numbers, pick the 0-based __index'th value.
+  *
+  * Always prefer this over _PICK() if the numbers are evenly spaced.
+  */
+ #define _PICK_EVEN(__index, __a, __b) ((__a) + (__index) * ((__b) - (__a)))
+ 
+ /*
+  * Like _PICK_EVEN(), but supports 2 ranges of evenly spaced address offsets.
+  * @__c_index corresponds to the index in which the second range starts to be
+  * used. Using math interval notation, the first range is used for indexes [ 0,
+  * @__c_index), while the second range is used for [ @__c_index, ... ). Example:
+  *
+  * #define _FOO_A			0xf000
+  * #define _FOO_B			0xf004
+  * #define _FOO_C			0xf008
+  * #define _SUPER_FOO_A			0xa000
+  * #define _SUPER_FOO_B			0xa100
+  * #define FOO(x)			_MMIO(_PICK_EVEN_2RANGES(x, 3,		\
+  *					      _FOO_A, _FOO_B,			\
+  *					      _SUPER_FOO_A, _SUPER_FOO_B))
+  *
+  * This expands to:
+  *	0: 0xf000,
+  *	1: 0xf004,
+  *	2: 0xf008,
+  *	3: 0xa000,
+  *	4: 0xa100,
+  *	5: 0xa200,
+  *	...
+  */
+ #define _PICK_EVEN_2RANGES(__index, __c_index, __a, __b, __c, __d)		\
+ 	(BUILD_BUG_ON_ZERO(!__is_constexpr(__c_index)) +			\
+ 	 ((__index) < (__c_index) ? _PICK_EVEN(__index, __a, __b) :		\
+ 				   _PICK_EVEN((__index) - (__c_index), __c, __d)))
+ 
+ /*
+  * Given the arbitrary numbers in varargs, pick the 0-based __index'th number.
+  *
+  * Always prefer _PICK_EVEN() over this if the numbers are evenly spaced.
+  */
+ #define _PICK(__index, ...) (((const u32 []){ __VA_ARGS__ })[__index])
+ 
++>>>>>>> 357513233d64 (drm/i915: Add _PICK_EVEN_2RANGES())
  typedef struct {
  	u32 reg;
  } i915_reg_t;
* Unmerged path drivers/gpu/drm/i915/i915_reg_defs.h
