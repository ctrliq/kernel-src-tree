net/smc: use read semaphores to reduce unnecessary blocking in smc_buf_create() & smcr_buf_unuse()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-502.el8
commit-author D. Wythe <alibuda@linux.alibaba.com>
commit f6421014e88983c5bb7a25c71c01ae6278a01df9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-502.el8/f6421014.failed

Following is part of Off-CPU graph during frequent SMC-R short-lived
processing:

process_one_work				(51.19%)
smc_close_passive_work			(28.36%)
	smcr_buf_unuse				(28.34%)
	rwsem_down_write_slowpath		(28.22%)

smc_listen_work				(22.83%)
	smc_clc_wait_msg			(1.84%)
	smc_buf_create				(20.45%)
		smcr_buf_map_usable_links
		rwsem_down_write_slowpath	(20.43%)
	smcr_lgr_reg_rmbs			(0.53%)
		rwsem_down_write_slowpath	(0.43%)
		smc_llc_do_confirm_rkey		(0.08%)

We can clearly see that during the connection establishment time,
waiting time of connections is not on IO, but on llc_conf_mutex.

What is more important, the core critical area (smcr_buf_unuse() &
smc_buf_create()) only perfroms read semantics on links, we can
easily replace it with read semaphore.

	Signed-off-by: D. Wythe <alibuda@linux.alibaba.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit f6421014e88983c5bb7a25c71c01ae6278a01df9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/smc/smc_core.c
diff --cc net/smc/smc_core.c
index b8b18a172193,10a9e094d9d3..000000000000
--- a/net/smc/smc_core.c
+++ b/net/smc/smc_core.c
@@@ -1101,10 -1106,10 +1101,17 @@@ static void smcr_buf_unuse(struct smc_b
  		rc = smc_llc_flow_initiate(lgr, SMC_LLC_FLOW_RKEY);
  		if (!rc) {
  			/* protect against smc_llc_cli_rkey_exchange() */
++<<<<<<< HEAD
 +			mutex_lock(&lgr->llc_conf_mutex);
 +			smc_llc_do_delete_rkey(lgr, buf_desc);
 +			buf_desc->is_conf_rkey = false;
 +			mutex_unlock(&lgr->llc_conf_mutex);
++=======
+ 			down_read(&lgr->llc_conf_mutex);
+ 			smc_llc_do_delete_rkey(lgr, buf_desc);
+ 			buf_desc->is_conf_rkey = false;
+ 			up_read(&lgr->llc_conf_mutex);
++>>>>>>> f6421014e889 (net/smc: use read semaphores to reduce unnecessary blocking in smc_buf_create() & smcr_buf_unuse())
  			smc_llc_flow_stop(lgr, &lgr->llc_flow_lcl);
  		}
  	}
@@@ -2242,7 -2247,7 +2249,11 @@@ static int smcr_buf_map_usable_links(st
  	int i, rc = 0, cnt = 0;
  
  	/* protect against parallel link reconfiguration */
++<<<<<<< HEAD
 +	mutex_lock(&lgr->llc_conf_mutex);
++=======
+ 	down_read(&lgr->llc_conf_mutex);
++>>>>>>> f6421014e889 (net/smc: use read semaphores to reduce unnecessary blocking in smc_buf_create() & smcr_buf_unuse())
  	for (i = 0; i < SMC_LINKS_PER_LGR_MAX; i++) {
  		struct smc_link *lnk = &lgr->lnk[i];
  
@@@ -2255,7 -2260,7 +2266,11 @@@
  		cnt++;
  	}
  out:
++<<<<<<< HEAD
 +	mutex_unlock(&lgr->llc_conf_mutex);
++=======
+ 	up_read(&lgr->llc_conf_mutex);
++>>>>>>> f6421014e889 (net/smc: use read semaphores to reduce unnecessary blocking in smc_buf_create() & smcr_buf_unuse())
  	if (!rc && !cnt)
  		rc = -EINVAL;
  	return rc;
* Unmerged path net/smc/smc_core.c
