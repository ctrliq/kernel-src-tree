x86/resctrl: Move the schemata names into struct resctrl_schema

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-502.el8
commit-author James Morse <james.morse@arm.com>
commit e198fde3fe0892a5d1e28c0e29f1eebfb6f8c1cd
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-502.el8/e198fde3.failed

resctrl 'info' directories and schema parsing use the schema name.
This lives in the struct rdt_resource, and is specified by the
architecture code.

Once the CDP resources are merged, there will only be one resource (and
one name) in use by two schemata. To allow the CDP CODE/DATA property to
be the type of configuration the schema uses, the name should also be
per-schema.

Add a name field to struct resctrl_schema, and use this wherever
the schema name is exposed (or read from) user-space. Calculating
max_name_width for padding the schemata file also moves as this is
visible to user-space. As the names in struct rdt_resource already
include the CDP information, schemata_list_create() copies them.

schemata_list_create() includes the length of the CDP suffix when
calculating max_name_width in preparation for CDP resources being
merged.

	Signed-off-by: James Morse <james.morse@arm.com>
	Signed-off-by: Borislav Petkov <bp@suse.de>
	Reviewed-by: Jamie Iles <jamie@nuviainc.com>
	Reviewed-by: Reinette Chatre <reinette.chatre@intel.com>
	Tested-by: Babu Moger <babu.moger@amd.com>
Link: https://lkml.kernel.org/r/20210728170637.25610-13-james.morse@arm.com
(cherry picked from commit e198fde3fe0892a5d1e28c0e29f1eebfb6f8c1cd)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kernel/cpu/resctrl/ctrlmondata.c
#	arch/x86/kernel/cpu/resctrl/rdtgroup.c
#	include/linux/resctrl.h
diff --cc arch/x86/kernel/cpu/resctrl/ctrlmondata.c
index 9a768d89de37,104b285f8a60..000000000000
--- a/arch/x86/kernel/cpu/resctrl/ctrlmondata.c
+++ b/arch/x86/kernel/cpu/resctrl/ctrlmondata.c
@@@ -292,11 -289,11 +292,19 @@@ done
  static int rdtgroup_parse_resource(char *resname, char *tok,
  				   struct rdtgroup *rdtgrp)
  {
++<<<<<<< HEAD
 +	struct rdt_resource *r;
 +
 +	for_each_alloc_enabled_rdt_resource(r) {
 +		if (!strcmp(resname, r->name) && rdtgrp->closid < r->num_closid)
 +			return parse_line(tok, r, rdtgrp);
++=======
+ 	struct resctrl_schema *s;
+ 
+ 	list_for_each_entry(s, &resctrl_schema_all, list) {
+ 		if (!strcmp(resname, s->name) && rdtgrp->closid < s->num_closid)
+ 			return parse_line(tok, s, rdtgrp);
++>>>>>>> e198fde3fe08 (x86/resctrl: Move the schemata names into struct resctrl_schema)
  	}
  	rdt_last_cmd_printf("Unknown or unsupported resource name '%s'\n", resname);
  	return -EINVAL;
@@@ -385,8 -386,9 +393,8 @@@ static void show_doms(struct seq_file *
  	bool sep = false;
  	u32 ctrl_val;
  
- 	seq_printf(s, "%*s:", max_name_width, r->name);
+ 	seq_printf(s, "%*s:", max_name_width, schema->name);
  	list_for_each_entry(dom, &r->domains, list) {
 -		hw_dom = resctrl_to_arch_dom(dom);
  		if (sep)
  			seq_puts(s, ";");
  
@@@ -402,16 -404,17 +410,21 @@@
  int rdtgroup_schemata_show(struct kernfs_open_file *of,
  			   struct seq_file *s, void *v)
  {
 -	struct resctrl_schema *schema;
  	struct rdtgroup *rdtgrp;
- 	struct rdt_resource *r;
  	int ret = 0;
  	u32 closid;
  
  	rdtgrp = rdtgroup_kn_lock_live(of->kn);
  	if (rdtgrp) {
  		if (rdtgrp->mode == RDT_MODE_PSEUDO_LOCKSETUP) {
++<<<<<<< HEAD
 +			for_each_alloc_enabled_rdt_resource(r)
 +				seq_printf(s, "%s:uninitialized\n", r->name);
++=======
+ 			list_for_each_entry(schema, &resctrl_schema_all, list) {
+ 				seq_printf(s, "%s:uninitialized\n", schema->name);
+ 			}
++>>>>>>> e198fde3fe08 (x86/resctrl: Move the schemata names into struct resctrl_schema)
  		} else if (rdtgrp->mode == RDT_MODE_PSEUDO_LOCKED) {
  			if (!rdtgrp->plr->d) {
  				rdt_last_cmd_clear();
diff --cc arch/x86/kernel/cpu/resctrl/rdtgroup.c
index a8731279ffbf,1f8c8d79d00b..000000000000
--- a/arch/x86/kernel/cpu/resctrl/rdtgroup.c
+++ b/arch/x86/kernel/cpu/resctrl/rdtgroup.c
@@@ -1454,10 -1448,12 +1454,10 @@@ static int rdtgroup_size_show(struct ke
  		goto out;
  	}
  
 -	list_for_each_entry(schema, &resctrl_schema_all, list) {
 -		r = schema->res;
 +	for_each_alloc_enabled_rdt_resource(r) {
  		sep = false;
- 		seq_printf(s, "%*s:", max_name_width, r->name);
+ 		seq_printf(s, "%*s:", max_name_width, schema->name);
  		list_for_each_entry(d, &r->domains, list) {
 -			hw_dom = resctrl_to_arch_dom(d);
  			if (sep)
  				seq_putc(s, ';');
  			if (rdtgrp->mode == RDT_MODE_PSEUDO_LOCKSETUP) {
@@@ -1822,9 -1819,11 +1822,13 @@@ static int rdtgroup_create_info_dir(str
  	if (ret)
  		goto out_destroy;
  
 -	/* loop over enabled controls, these are all alloc_enabled */
 -	list_for_each_entry(s, &resctrl_schema_all, list) {
 -		r = s->res;
 +	for_each_alloc_enabled_rdt_resource(r) {
  		fflags =  r->fflags | RF_CTRL_INFO;
++<<<<<<< HEAD
 +		ret = rdtgroup_mkdir_info_resdir(r, r->name, fflags);
++=======
+ 		ret = rdtgroup_mkdir_info_resdir(s, s->name, fflags);
++>>>>>>> e198fde3fe08 (x86/resctrl: Move the schemata names into struct resctrl_schema)
  		if (ret)
  			goto out_destroy;
  	}
@@@ -2122,6 -2137,58 +2126,61 @@@ static int rdt_enable_ctx(struct rdt_fs
  	return ret;
  }
  
++<<<<<<< HEAD
++=======
+ static int schemata_list_create(void)
+ {
+ 	struct resctrl_schema *s;
+ 	struct rdt_resource *r;
+ 	int ret, cl;
+ 
+ 	for_each_alloc_enabled_rdt_resource(r) {
+ 		s = kzalloc(sizeof(*s), GFP_KERNEL);
+ 		if (!s)
+ 			return -ENOMEM;
+ 
+ 		s->res = r;
+ 		s->conf_type = resctrl_to_arch_res(r)->conf_type;
+ 		s->num_closid = resctrl_arch_get_num_closid(r);
+ 
+ 		ret = snprintf(s->name, sizeof(s->name), r->name);
+ 		if (ret >= sizeof(s->name)) {
+ 			kfree(s);
+ 			return -EINVAL;
+ 		}
+ 
+ 		cl = strlen(s->name);
+ 
+ 		/*
+ 		 * If CDP is supported by this resource, but not enabled,
+ 		 * include the suffix. This ensures the tabular format of the
+ 		 * schemata file does not change between mounts of the
+ 		 * filesystem.
+ 		 */
+ 		if (r->cdp_capable && !resctrl_arch_get_cdp_enabled(r->rid))
+ 			cl += 4;
+ 
+ 		if (cl > max_name_width)
+ 			max_name_width = cl;
+ 
+ 		INIT_LIST_HEAD(&s->list);
+ 		list_add(&s->list, &resctrl_schema_all);
+ 	}
+ 
+ 	return 0;
+ }
+ 
+ static void schemata_list_destroy(void)
+ {
+ 	struct resctrl_schema *s, *tmp;
+ 
+ 	list_for_each_entry_safe(s, tmp, &resctrl_schema_all, list) {
+ 		list_del(&s->list);
+ 		kfree(s);
+ 	}
+ }
+ 
++>>>>>>> e198fde3fe08 (x86/resctrl: Move the schemata names into struct resctrl_schema)
  static int rdt_get_tree(struct fs_context *fc)
  {
  	struct rdt_fs_context *ctx = rdt_fc2context(fc);
diff --cc include/linux/resctrl.h
index 9b05af9b3e28,e482ce790ce2..000000000000
--- a/include/linux/resctrl.h
+++ b/include/linux/resctrl.h
@@@ -13,4 -15,179 +13,182 @@@ int proc_resctrl_show(struct seq_file *
  
  #endif
  
++<<<<<<< HEAD
++=======
+ /**
+  * enum resctrl_conf_type - The type of configuration.
+  * @CDP_NONE:	No prioritisation, both code and data are controlled or monitored.
+  * @CDP_CODE:	Configuration applies to instruction fetches.
+  * @CDP_DATA:	Configuration applies to reads and writes.
+  */
+ enum resctrl_conf_type {
+ 	CDP_NONE,
+ 	CDP_CODE,
+ 	CDP_DATA,
+ };
+ 
+ /**
+  * struct rdt_domain - group of CPUs sharing a resctrl resource
+  * @list:		all instances of this resource
+  * @id:			unique id for this instance
+  * @cpu_mask:		which CPUs share this resource
+  * @new_ctrl:		new ctrl value to be loaded
+  * @have_new_ctrl:	did user provide new_ctrl for this domain
+  * @rmid_busy_llc:	bitmap of which limbo RMIDs are above threshold
+  * @mbm_total:		saved state for MBM total bandwidth
+  * @mbm_local:		saved state for MBM local bandwidth
+  * @mbm_over:		worker to periodically read MBM h/w counters
+  * @cqm_limbo:		worker to periodically read CQM h/w counters
+  * @mbm_work_cpu:	worker CPU for MBM h/w counters
+  * @cqm_work_cpu:	worker CPU for CQM h/w counters
+  * @plr:		pseudo-locked region (if any) associated with domain
+  */
+ struct rdt_domain {
+ 	struct list_head		list;
+ 	int				id;
+ 	struct cpumask			cpu_mask;
+ 	u32				new_ctrl;
+ 	bool				have_new_ctrl;
+ 	unsigned long			*rmid_busy_llc;
+ 	struct mbm_state		*mbm_total;
+ 	struct mbm_state		*mbm_local;
+ 	struct delayed_work		mbm_over;
+ 	struct delayed_work		cqm_limbo;
+ 	int				mbm_work_cpu;
+ 	int				cqm_work_cpu;
+ 	struct pseudo_lock_region	*plr;
+ };
+ 
+ /**
+  * struct resctrl_cache - Cache allocation related data
+  * @cbm_len:		Length of the cache bit mask
+  * @min_cbm_bits:	Minimum number of consecutive bits to be set
+  * @cbm_idx_mult:	Multiplier of CBM index
+  * @cbm_idx_offset:	Offset of CBM index. CBM index is computed by:
+  *			closid * cbm_idx_multi + cbm_idx_offset
+  *			in a cache bit mask
+  * @shareable_bits:	Bitmask of shareable resource with other
+  *			executing entities
+  * @arch_has_sparse_bitmaps:	True if a bitmap like f00f is valid.
+  * @arch_has_empty_bitmaps:	True if the '0' bitmap is valid.
+  * @arch_has_per_cpu_cfg:	True if QOS_CFG register for this cache
+  *				level has CPU scope.
+  */
+ struct resctrl_cache {
+ 	unsigned int	cbm_len;
+ 	unsigned int	min_cbm_bits;
+ 	unsigned int	cbm_idx_mult;	// TODO remove this
+ 	unsigned int	cbm_idx_offset; // TODO remove this
+ 	unsigned int	shareable_bits;
+ 	bool		arch_has_sparse_bitmaps;
+ 	bool		arch_has_empty_bitmaps;
+ 	bool		arch_has_per_cpu_cfg;
+ };
+ 
+ /**
+  * enum membw_throttle_mode - System's memory bandwidth throttling mode
+  * @THREAD_THROTTLE_UNDEFINED:	Not relevant to the system
+  * @THREAD_THROTTLE_MAX:	Memory bandwidth is throttled at the core
+  *				always using smallest bandwidth percentage
+  *				assigned to threads, aka "max throttling"
+  * @THREAD_THROTTLE_PER_THREAD:	Memory bandwidth is throttled at the thread
+  */
+ enum membw_throttle_mode {
+ 	THREAD_THROTTLE_UNDEFINED = 0,
+ 	THREAD_THROTTLE_MAX,
+ 	THREAD_THROTTLE_PER_THREAD,
+ };
+ 
+ /**
+  * struct resctrl_membw - Memory bandwidth allocation related data
+  * @min_bw:		Minimum memory bandwidth percentage user can request
+  * @bw_gran:		Granularity at which the memory bandwidth is allocated
+  * @delay_linear:	True if memory B/W delay is in linear scale
+  * @arch_needs_linear:	True if we can't configure non-linear resources
+  * @throttle_mode:	Bandwidth throttling mode when threads request
+  *			different memory bandwidths
+  * @mba_sc:		True if MBA software controller(mba_sc) is enabled
+  * @mb_map:		Mapping of memory B/W percentage to memory B/W delay
+  */
+ struct resctrl_membw {
+ 	u32				min_bw;
+ 	u32				bw_gran;
+ 	u32				delay_linear;
+ 	bool				arch_needs_linear;
+ 	enum membw_throttle_mode	throttle_mode;
+ 	bool				mba_sc;
+ 	u32				*mb_map;
+ };
+ 
+ struct rdt_parse_data;
+ struct resctrl_schema;
+ 
+ /**
+  * struct rdt_resource - attributes of a resctrl resource
+  * @rid:		The index of the resource
+  * @alloc_enabled:	Is allocation enabled on this machine
+  * @mon_enabled:	Is monitoring enabled for this feature
+  * @alloc_capable:	Is allocation available on this machine
+  * @mon_capable:	Is monitor feature available on this machine
+  * @num_rmid:		Number of RMIDs available
+  * @cache_level:	Which cache level defines scope of this resource
+  * @cache:		Cache allocation related data
+  * @membw:		If the component has bandwidth controls, their properties.
+  * @domains:		All domains for this resource
+  * @name:		Name to use in "schemata" file.
+  * @data_width:		Character width of data when displaying
+  * @default_ctrl:	Specifies default cache cbm or memory B/W percent.
+  * @format_str:		Per resource format string to show domain value
+  * @parse_ctrlval:	Per resource function pointer to parse control values
+  * @evt_list:		List of monitoring events
+  * @fflags:		flags to choose base and info files
+  * @cdp_capable:	Is the CDP feature available on this resource
+  */
+ struct rdt_resource {
+ 	int			rid;
+ 	bool			alloc_enabled;
+ 	bool			mon_enabled;
+ 	bool			alloc_capable;
+ 	bool			mon_capable;
+ 	int			num_rmid;
+ 	int			cache_level;
+ 	struct resctrl_cache	cache;
+ 	struct resctrl_membw	membw;
+ 	struct list_head	domains;
+ 	char			*name;
+ 	int			data_width;
+ 	u32			default_ctrl;
+ 	const char		*format_str;
+ 	int			(*parse_ctrlval)(struct rdt_parse_data *data,
+ 						 struct resctrl_schema *s,
+ 						 struct rdt_domain *d);
+ 	struct list_head	evt_list;
+ 	unsigned long		fflags;
+ 	bool			cdp_capable;
+ };
+ 
+ /**
+  * struct resctrl_schema - configuration abilities of a resource presented to
+  *			   user-space
+  * @list:	Member of resctrl_schema_all.
+  * @name:	The name to use in the "schemata" file.
+  * @conf_type:	Whether this schema is specific to code/data.
+  * @res:	The resource structure exported by the architecture to describe
+  *		the hardware that is configured by this schema.
+  * @num_closid:	The number of closid that can be used with this schema. When
+  *		features like CDP are enabled, this will be lower than the
+  *		hardware supports for the resource.
+  */
+ struct resctrl_schema {
+ 	struct list_head		list;
+ 	char				name[8];
+ 	enum resctrl_conf_type		conf_type;
+ 	struct rdt_resource		*res;
+ 	u32				num_closid;
+ };
+ 
+ /* The number of closid supported by this resource regardless of CDP */
+ u32 resctrl_arch_get_num_closid(struct rdt_resource *r);
+ 
++>>>>>>> e198fde3fe08 (x86/resctrl: Move the schemata names into struct resctrl_schema)
  #endif /* _RESCTRL_H */
diff --git a/arch/x86/kernel/cpu/resctrl/core.c b/arch/x86/kernel/cpu/resctrl/core.c
index 916eb976301b..9410c38f479b 100644
--- a/arch/x86/kernel/cpu/resctrl/core.c
+++ b/arch/x86/kernel/cpu/resctrl/core.c
@@ -740,13 +740,8 @@ static int resctrl_offline_cpu(unsigned int cpu)
 static __init void rdt_init_padding(void)
 {
 	struct rdt_resource *r;
-	int cl;
 
 	for_each_alloc_capable_rdt_resource(r) {
-		cl = strlen(r->name);
-		if (cl > max_name_width)
-			max_name_width = cl;
-
 		if (r->data_width > max_data_width)
 			max_data_width = r->data_width;
 	}
* Unmerged path arch/x86/kernel/cpu/resctrl/ctrlmondata.c
* Unmerged path arch/x86/kernel/cpu/resctrl/rdtgroup.c
* Unmerged path include/linux/resctrl.h
