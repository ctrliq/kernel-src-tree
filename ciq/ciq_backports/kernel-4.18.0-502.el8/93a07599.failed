net/mlx5e: Introduce flow steering debug macros

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-502.el8
commit-author Lama Kayal <lkayal@nvidia.com>
commit 93a07599ee0aee9947cd2df510667e5af0dcdc49
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-502.el8/93a07599.failed

Introduce flow steering debug macros family, fs_*.
These macros bring clean finish to the decoupling of flow steering
process such that all flow steering flows can report warnings and
provide debug information via these exclusive macros.

	Signed-off-by: Lama Kayal <lkayal@nvidia.com>
	Reviewed-by: Tariq Toukan <tariqt@nvidia.com>
	Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
(cherry picked from commit 93a07599ee0aee9947cd2df510667e5af0dcdc49)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en/fs_tt_redirect.c
#	drivers/net/ethernet/mellanox/mlx5/core/en_accel/fs_tcp.c
#	drivers/net/ethernet/mellanox/mlx5/core/en_fs.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en/fs_tt_redirect.c
index e153d6119e02,03cb79adf912..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en/fs_tt_redirect.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en/fs_tt_redirect.c
@@@ -106,8 -105,8 +106,13 @@@ mlx5e_fs_tt_redirect_udp_add_rule(struc
  
  	if (IS_ERR(rule)) {
  		err = PTR_ERR(rule);
++<<<<<<< HEAD
 +		netdev_err(priv->netdev, "%s: add %s rule failed, err %d\n",
 +			   __func__, fs_udp_type2str(type), err);
++=======
+ 		fs_err(fs, "%s: add %s rule failed, err %d\n",
+ 		       __func__, fs_udp_type2str(type), err);
++>>>>>>> 93a07599ee0a (net/mlx5e: Introduce flow steering debug macros)
  	}
  	return rule;
  }
@@@ -128,9 -127,8 +133,14 @@@ static int fs_udp_add_default_rule(stru
  	rule = mlx5_add_flow_rules(fs_udp_t->t, NULL, &flow_act, &dest, 1);
  	if (IS_ERR(rule)) {
  		err = PTR_ERR(rule);
++<<<<<<< HEAD
 +		netdev_err(priv->netdev,
 +			   "%s: add default rule failed, fs type=%d, err %d\n",
 +			   __func__, type, err);
++=======
+ 		fs_err(fs, "%s: add default rule failed, fs type=%d, err %d\n",
+ 		       __func__, type, err);
++>>>>>>> 93a07599ee0a (net/mlx5e: Introduce flow steering debug macros)
  		return err;
  	}
  
@@@ -259,11 -261,10 +269,16 @@@ static int fs_udp_disable(struct mlx5e_
  
  	for (i = 0; i < FS_UDP_NUM_TYPES; i++) {
  		/* Modify ttc rules destination to point back to the indir TIRs */
 -		err = mlx5_ttc_fwd_default_dest(ttc, fs_udp2tt(i));
 +		err = mlx5_ttc_fwd_default_dest(priv->fs->ttc, fs_udp2tt(i));
  		if (err) {
++<<<<<<< HEAD
 +			netdev_err(priv->netdev,
 +				   "%s: modify ttc[%d] default destination failed, err(%d)\n",
 +				   __func__, fs_udp2tt(i), err);
++=======
+ 			fs_err(fs, "%s: modify ttc[%d] default destination failed, err(%d)\n",
+ 			       __func__, fs_udp2tt(i), err);
++>>>>>>> 93a07599ee0a (net/mlx5e: Introduce flow steering debug macros)
  			return err;
  		}
  	}
@@@ -278,14 -281,13 +293,19 @@@ static int fs_udp_enable(struct mlx5e_p
  
  	dest.type = MLX5_FLOW_DESTINATION_TYPE_FLOW_TABLE;
  	for (i = 0; i < FS_UDP_NUM_TYPES; i++) {
 -		dest.ft = udp->tables[i].t;
 +		dest.ft = priv->fs->udp->tables[i].t;
  
  		/* Modify ttc rules destination to point on the accel_fs FTs */
 -		err = mlx5_ttc_fwd_dest(ttc, fs_udp2tt(i), &dest);
 +		err = mlx5_ttc_fwd_dest(priv->fs->ttc, fs_udp2tt(i), &dest);
  		if (err) {
++<<<<<<< HEAD
 +			netdev_err(priv->netdev,
 +				   "%s: modify ttc[%d] destination to accel failed, err(%d)\n",
 +				   __func__, fs_udp2tt(i), err);
++=======
+ 			fs_err(fs, "%s: modify ttc[%d] destination to accel failed, err(%d)\n",
+ 			       __func__, fs_udp2tt(i), err);
++>>>>>>> 93a07599ee0a (net/mlx5e: Introduce flow steering debug macros)
  			return err;
  		}
  	}
@@@ -383,8 -386,8 +403,13 @@@ mlx5e_fs_tt_redirect_any_add_rule(struc
  
  	if (IS_ERR(rule)) {
  		err = PTR_ERR(rule);
++<<<<<<< HEAD
 +		netdev_err(priv->netdev, "%s: add ANY rule failed, err %d\n",
 +			   __func__, err);
++=======
+ 		fs_err(fs, "%s: add ANY rule failed, err %d\n",
+ 		       __func__, err);
++>>>>>>> 93a07599ee0a (net/mlx5e: Introduce flow steering debug macros)
  	}
  	return rule;
  }
@@@ -405,9 -407,8 +430,14 @@@ static int fs_any_add_default_rule(stru
  	rule = mlx5_add_flow_rules(fs_any_t->t, NULL, &flow_act, &dest, 1);
  	if (IS_ERR(rule)) {
  		err = PTR_ERR(rule);
++<<<<<<< HEAD
 +		netdev_err(priv->netdev,
 +			   "%s: add default rule failed, fs type=ANY, err %d\n",
 +			   __func__, err);
++=======
+ 		fs_err(fs, "%s: add default rule failed, fs type=ANY, err %d\n",
+ 		       __func__, err);
++>>>>>>> 93a07599ee0a (net/mlx5e: Introduce flow steering debug macros)
  		return err;
  	}
  
@@@ -514,11 -517,12 +544,17 @@@ static int fs_any_disable(struct mlx5e_
  	int err;
  
  	/* Modify ttc rules destination to point back to the indir TIRs */
 -	err = mlx5_ttc_fwd_default_dest(ttc, MLX5_TT_ANY);
 +	err = mlx5_ttc_fwd_default_dest(priv->fs->ttc, MLX5_TT_ANY);
  	if (err) {
++<<<<<<< HEAD
 +		netdev_err(priv->netdev,
 +			   "%s: modify ttc[%d] default destination failed, err(%d)\n",
 +			   __func__, MLX5_TT_ANY, err);
++=======
+ 		fs_err(fs,
+ 		       "%s: modify ttc[%d] default destination failed, err(%d)\n",
+ 		       __func__, MLX5_TT_ANY, err);
++>>>>>>> 93a07599ee0a (net/mlx5e: Introduce flow steering debug macros)
  		return err;
  	}
  	return 0;
@@@ -530,14 -536,14 +566,20 @@@ static int fs_any_enable(struct mlx5e_p
  	int err;
  
  	dest.type = MLX5_FLOW_DESTINATION_TYPE_FLOW_TABLE;
 -	dest.ft = any->table.t;
 +	dest.ft = priv->fs->any->table.t;
  
  	/* Modify ttc rules destination to point on the accel_fs FTs */
 -	err = mlx5_ttc_fwd_dest(ttc, MLX5_TT_ANY, &dest);
 +	err = mlx5_ttc_fwd_dest(priv->fs->ttc, MLX5_TT_ANY, &dest);
  	if (err) {
++<<<<<<< HEAD
 +		netdev_err(priv->netdev,
 +			   "%s: modify ttc[%d] destination to accel failed, err(%d)\n",
 +			   __func__, MLX5_TT_ANY, err);
++=======
+ 		fs_err(fs,
+ 		       "%s: modify ttc[%d] destination to accel failed, err(%d)\n",
+ 		       __func__, MLX5_TT_ANY, err);
++>>>>>>> 93a07599ee0a (net/mlx5e: Introduce flow steering debug macros)
  		return err;
  	}
  	return 0;
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_accel/fs_tcp.c
index 20a4f1e585af,285d32d2fd08..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_accel/fs_tcp.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_accel/fs_tcp.c
@@@ -94,11 -92,11 +94,19 @@@ struct mlx5_flow_handle *mlx5e_accel_fs
  	case AF_INET:
  		accel_fs_tcp_set_ipv4_flow(spec, sk);
  		ft = &fs_tcp->tables[ACCEL_FS_IPV4_TCP];
++<<<<<<< HEAD
 +		mlx5e_dbg(HW, priv, "%s flow is %pI4:%d -> %pI4:%d\n", __func__,
 +			  &inet_sk(sk)->inet_rcv_saddr,
 +			  inet_sk(sk)->inet_sport,
 +			  &inet_sk(sk)->inet_daddr,
 +			  inet_sk(sk)->inet_dport);
++=======
+ 		fs_dbg(fs, "%s flow is %pI4:%d -> %pI4:%d\n", __func__,
+ 		       &inet_sk(sk)->inet_rcv_saddr,
+ 		       inet_sk(sk)->inet_sport,
+ 		       &inet_sk(sk)->inet_daddr,
+ 		       inet_sk(sk)->inet_dport);
++>>>>>>> 93a07599ee0a (net/mlx5e: Introduce flow steering debug macros)
  		break;
  #if IS_ENABLED(CONFIG_IPV6)
  	case AF_INET6:
@@@ -140,8 -138,7 +148,12 @@@
  	flow = mlx5_add_flow_rules(ft->t, spec, &flow_act, &dest, 1);
  
  	if (IS_ERR(flow))
++<<<<<<< HEAD
 +		netdev_err(priv->netdev, "mlx5_add_flow_rules() failed, flow is %ld\n",
 +			   PTR_ERR(flow));
++=======
+ 		fs_err(fs, "mlx5_add_flow_rules() failed, flow is %ld\n", PTR_ERR(flow));
++>>>>>>> 93a07599ee0a (net/mlx5e: Introduce flow steering debug macros)
  
  out:
  	kvfree(spec);
@@@ -165,9 -162,8 +177,14 @@@ static int accel_fs_tcp_add_default_rul
  	rule = mlx5_add_flow_rules(accel_fs_t->t, NULL, &flow_act, &dest, 1);
  	if (IS_ERR(rule)) {
  		err = PTR_ERR(rule);
++<<<<<<< HEAD
 +		netdev_err(priv->netdev,
 +			   "%s: add default rule failed, accel_fs type=%d, err %d\n",
 +			   __func__, type, err);
++=======
+ 		fs_err(fs, "%s: add default rule failed, accel_fs type=%d, err %d\n",
+ 		       __func__, type, err);
++>>>>>>> 93a07599ee0a (net/mlx5e: Introduce flow steering debug macros)
  		return err;
  	}
  
@@@ -284,8 -282,8 +301,13 @@@ static int accel_fs_tcp_create_table(st
  		return err;
  	}
  
++<<<<<<< HEAD
 +	netdev_dbg(priv->netdev, "Created fs accel table id %u level %u\n",
 +		   ft->t->id, ft->t->level);
++=======
+ 	fs_dbg(fs, "Created fs accel table id %u level %u\n",
+ 	       ft->t->id, ft->t->level);
++>>>>>>> 93a07599ee0a (net/mlx5e: Introduce flow steering debug macros)
  
  	err = accel_fs_tcp_create_groups(ft, type);
  	if (err)
@@@ -307,11 -306,11 +329,17 @@@ static int accel_fs_tcp_disable(struct 
  
  	for (i = 0; i < ACCEL_FS_TCP_NUM_TYPES; i++) {
  		/* Modify ttc rules destination to point back to the indir TIRs */
 -		err = mlx5_ttc_fwd_default_dest(ttc, fs_accel2tt(i));
 +		err = mlx5_ttc_fwd_default_dest(priv->fs->ttc, fs_accel2tt(i));
  		if (err) {
++<<<<<<< HEAD
 +			netdev_err(priv->netdev,
 +				   "%s: modify ttc[%d] default destination failed, err(%d)\n",
 +				   __func__, fs_accel2tt(i), err);
++=======
+ 			fs_err(fs,
+ 			       "%s: modify ttc[%d] default destination failed, err(%d)\n",
+ 			       __func__, fs_accel2tt(i), err);
++>>>>>>> 93a07599ee0a (net/mlx5e: Introduce flow steering debug macros)
  			return err;
  		}
  	}
@@@ -326,14 -327,13 +354,19 @@@ static int accel_fs_tcp_enable(struct m
  
  	dest.type = MLX5_FLOW_DESTINATION_TYPE_FLOW_TABLE;
  	for (i = 0; i < ACCEL_FS_TCP_NUM_TYPES; i++) {
 -		dest.ft = accel_tcp->tables[i].t;
 +		dest.ft = priv->fs->accel_tcp->tables[i].t;
  
  		/* Modify ttc rules destination to point on the accel_fs FTs */
 -		err = mlx5_ttc_fwd_dest(ttc, fs_accel2tt(i), &dest);
 +		err = mlx5_ttc_fwd_dest(priv->fs->ttc, fs_accel2tt(i), &dest);
  		if (err) {
++<<<<<<< HEAD
 +			netdev_err(priv->netdev,
 +				   "%s: modify ttc[%d] destination to accel failed, err(%d)\n",
 +				   __func__, fs_accel2tt(i), err);
++=======
+ 			fs_err(fs, "%s: modify ttc[%d] destination to accel failed, err(%d)\n",
+ 			       __func__, fs_accel2tt(i), err);
++>>>>>>> 93a07599ee0a (net/mlx5e: Introduce flow steering debug macros)
  			return err;
  		}
  	}
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_fs.c
index 6768f21c4eb1,734faf7e821d..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_fs.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_fs.c
@@@ -1267,18 -1293,19 +1264,24 @@@ int mlx5e_create_ttc_table(struct mlx5e
  
  int mlx5e_create_flow_steering(struct mlx5e_priv *priv)
  {
++<<<<<<< HEAD
++=======
+ 	struct mlx5_flow_namespace *ns = mlx5_get_flow_namespace(priv->fs->mdev,
+ 								 MLX5_FLOW_NAMESPACE_KERNEL);
+ 	struct mlx5e_flow_steering *fs = priv->fs;
+ 
++>>>>>>> 93a07599ee0a (net/mlx5e: Introduce flow steering debug macros)
  	int err;
  
 -	if (!ns)
 +	priv->fs->ns = mlx5_get_flow_namespace(priv->fs->mdev,
 +					       MLX5_FLOW_NAMESPACE_KERNEL);
 +
 +	if (!priv->fs->ns)
  		return -EOPNOTSUPP;
  
 -	mlx5e_fs_set_ns(priv->fs, ns, false);
  	err = mlx5e_arfs_create_tables(priv);
  	if (err) {
- 		mlx5_core_err(priv->fs->mdev, "Failed to create arfs tables, err=%d\n",
- 			      err);
+ 		fs_err(fs, "Failed to create arfs tables, err=%d\n", err);
  		priv->netdev->hw_features &= ~NETIF_F_NTUPLE;
  	}
  
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en/fs.h b/drivers/net/ethernet/mellanox/mlx5/core/en/fs.h
index 9b8cdf2e68ad..4ec8599422c9 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en/fs.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en/fs.h
@@ -198,5 +198,18 @@ int mlx5e_fs_vlan_rx_kill_vid(struct mlx5e_flow_steering *fs,
 			      struct net_device *netdev,
 			      __be16 proto, u16 vid);
 void mlx5e_fs_init_l2_addr(struct mlx5e_flow_steering *fs, struct net_device *netdev);
+
+#define fs_err(fs, fmt, ...) \
+	mlx5_core_err(mlx5e_fs_get_mdev(fs), fmt, ##__VA_ARGS__)
+
+#define fs_dbg(fs, fmt, ...) \
+	mlx5_core_dbg(mlx5e_fs_get_mdev(fs), fmt, ##__VA_ARGS__)
+
+#define fs_warn(fs, fmt, ...) \
+	mlx5_core_warn(mlx5e_fs_get_mdev(fs), fmt, ##__VA_ARGS__)
+
+#define fs_warn_once(fs, fmt, ...) \
+	mlx5_core_warn_once(mlx5e_fs_get_mdev(fs), fmt, ##__VA_ARGS__)
+
 #endif /* __MLX5E_FLOW_STEER_H__ */
 
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en/fs_tt_redirect.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_accel/fs_tcp.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_fs.c
