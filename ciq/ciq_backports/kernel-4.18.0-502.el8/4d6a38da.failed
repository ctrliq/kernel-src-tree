arm64: entry: always set GIC_PRIO_PSR_I_SET during entry

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-502.el8
commit-author Mark Rutland <mark.rutland@arm.com>
commit 4d6a38da8e79e94cbd1344aa90876f0f805db705
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-502.el8/4d6a38da.failed

Zenghui reports that booting a kernel with "irqchip.gicv3_pseudo_nmi=1"
on the command line hits a warning during kernel entry, due to the way
we manipulate the PMR.

Early in the entry sequence, we call lockdep_hardirqs_off() to inform
lockdep that interrupts have been masked (as the HW sets DAIF wqhen
entering an exception). Architecturally PMR_EL1 is not affected by
exception entry, and we don't set GIC_PRIO_PSR_I_SET in the PMR early in
the exception entry sequence, so early in exception entry the PMR can
indicate that interrupts are unmasked even though they are masked by
DAIF.

If DEBUG_LOCKDEP is selected, lockdep_hardirqs_off() will check that
interrupts are masked, before we set GIC_PRIO_PSR_I_SET in any of the
exception entry paths, and hence lockdep_hardirqs_off() will WARN() that
something is amiss.

We can avoid this by consistently setting GIC_PRIO_PSR_I_SET during
exception entry so that kernel code sees a consistent environment. We
must also update local_daif_inherit() to undo this, as currently only
touches DAIF. For other paths, local_daif_restore() will update both
DAIF and the PMR. With this done, we can remove the existing special
cases which set this later in the entry code.

We always use (GIC_PRIO_IRQON | GIC_PRIO_PSR_I_SET) for consistency with
local_daif_save(), as this will warn if it ever encounters
(GIC_PRIO_IRQOFF | GIC_PRIO_PSR_I_SET), and never sets this itself. This
matches the gic_prio_kentry_setup that we have to retain for
ret_to_user.

The original splat from Zenghui's report was:

| DEBUG_LOCKS_WARN_ON(!irqs_disabled())
| WARNING: CPU: 3 PID: 125 at kernel/locking/lockdep.c:4258 lockdep_hardirqs_off+0xd4/0xe8
| Modules linked in:
| CPU: 3 PID: 125 Comm: modprobe Tainted: G        W         5.12.0-rc8+ #463
| Hardware name: QEMU KVM Virtual Machine, BIOS 0.0.0 02/06/2015
| pstate: 604003c5 (nZCv DAIF +PAN -UAO -TCO BTYPE=--)
| pc : lockdep_hardirqs_off+0xd4/0xe8
| lr : lockdep_hardirqs_off+0xd4/0xe8
| sp : ffff80002a39bad0
| pmr_save: 000000e0
| x29: ffff80002a39bad0 x28: ffff0000de214bc0
| x27: ffff0000de1c0400 x26: 000000000049b328
| x25: 0000000000406f30 x24: ffff0000de1c00a0
| x23: 0000000020400005 x22: ffff8000105f747c
| x21: 0000000096000044 x20: 0000000000498ef9
| x19: ffff80002a39bc88 x18: ffffffffffffffff
| x17: 0000000000000000 x16: ffff800011c61eb0
| x15: ffff800011700a88 x14: 0720072007200720
| x13: 0720072007200720 x12: 0720072007200720
| x11: 0720072007200720 x10: 0720072007200720
| x9 : ffff80002a39bad0 x8 : ffff80002a39bad0
| x7 : ffff8000119f0800 x6 : c0000000ffff7fff
| x5 : ffff8000119f07a8 x4 : 0000000000000001
| x3 : 9bcdab23f2432800 x2 : ffff800011730538
| x1 : 9bcdab23f2432800 x0 : 0000000000000000
| Call trace:
|  lockdep_hardirqs_off+0xd4/0xe8
|  enter_from_kernel_mode.isra.5+0x7c/0xa8
|  el1_abort+0x24/0x100
|  el1_sync_handler+0x80/0xd0
|  el1_sync+0x6c/0x100
|  __arch_clear_user+0xc/0x90
|  load_elf_binary+0x9fc/0x1450
|  bprm_execve+0x404/0x880
|  kernel_execve+0x180/0x188
|  call_usermodehelper_exec_async+0xdc/0x158
|  ret_from_fork+0x10/0x18

Fixes: 23529049c684 ("arm64: entry: fix non-NMI user<->kernel transitions")
Fixes: 7cd1ea1010ac ("arm64: entry: fix non-NMI kernel<->kernel transitions")
Fixes: f0cd5ac1e4c5 ("arm64: entry: fix NMI {user, kernel}->kernel transitions")
Fixes: 2a9b3e6ac69a ("arm64: entry: fix EL1 debug transitions")
Link: https://lore.kernel.org/r/f4012761-026f-4e51-3a0c-7524e434e8b3@huawei.com
	Signed-off-by: Mark Rutland <mark.rutland@arm.com>
	Reported-by: Zenghui Yu <yuzenghui@huawei.com>
	Cc: Marc Zyngier <maz@kernel.org>
	Cc: Will Deacon <will@kernel.org>
	Acked-by: Marc Zyngier <maz@kernel.org>
Link: https://lore.kernel.org/r/20210428111555.50880-1-mark.rutland@arm.com
	Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
(cherry picked from commit 4d6a38da8e79e94cbd1344aa90876f0f805db705)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/arm64/kernel/entry-common.c
#	arch/arm64/kernel/entry.S
diff --cc arch/arm64/kernel/entry-common.c
index c764ba2d11d7,340d04e13617..000000000000
--- a/arch/arm64/kernel/entry-common.c
+++ b/arch/arm64/kernel/entry-common.c
@@@ -124,15 -230,10 +124,22 @@@ static void noinstr el1_dbg(struct pt_r
  {
  	unsigned long far = read_sysreg(far_el1);
  
++<<<<<<< HEAD
 +	/*
 +	 * The CPU masked interrupts, and we are leaving them masked during
 +	 * do_debug_exception(). Update PMR as if we had called
 +	 * local_daif_mask().
 +	 */
 +	if (system_uses_irq_prio_masking())
 +		gic_write_pmr(GIC_PRIO_IRQON | GIC_PRIO_PSR_I_SET);
 +
 +	do_debug_exception(far, esr, regs);
++=======
+ 	arm64_enter_el1_dbg(regs);
+ 	if (!cortex_a76_erratum_1463225_debug_handler(regs))
+ 		do_debug_exception(far, esr, regs);
+ 	arm64_exit_el1_dbg(regs);
++>>>>>>> 4d6a38da8e79 (arm64: entry: always set GIC_PRIO_PSR_I_SET during entry)
  }
  
  static void noinstr el1_fpac(struct pt_regs *regs, unsigned long esr)
@@@ -278,19 -396,15 +285,28 @@@ static void noinstr el0_dbg(struct pt_r
  	/* Only watchpoints write FAR_EL1, otherwise its UNKNOWN */
  	unsigned long far = read_sysreg(far_el1);
  
++<<<<<<< HEAD
 +	if (system_uses_irq_prio_masking())
 +		gic_write_pmr(GIC_PRIO_IRQON | GIC_PRIO_PSR_I_SET);
 +
 +	user_exit_irqoff();
++=======
+ 	enter_from_user_mode();
++>>>>>>> 4d6a38da8e79 (arm64: entry: always set GIC_PRIO_PSR_I_SET during entry)
  	do_debug_exception(far, esr, regs);
  	local_daif_restore(DAIF_PROCCTX_NOIRQ);
  }
  
  static void noinstr el0_svc(struct pt_regs *regs)
  {
++<<<<<<< HEAD
 +	if (system_uses_irq_prio_masking())
 +		gic_write_pmr(GIC_PRIO_IRQON | GIC_PRIO_PSR_I_SET);
 +
++=======
+ 	enter_from_user_mode();
+ 	cortex_a76_erratum_1463225_svc_handler();
++>>>>>>> 4d6a38da8e79 (arm64: entry: always set GIC_PRIO_PSR_I_SET during entry)
  	do_el0_svc(regs);
  }
  
@@@ -364,9 -478,8 +380,14 @@@ static void noinstr el0_cp15(struct pt_
  
  static void noinstr el0_svc_compat(struct pt_regs *regs)
  {
++<<<<<<< HEAD
 +	if (system_uses_irq_prio_masking())
 +		gic_write_pmr(GIC_PRIO_IRQON | GIC_PRIO_PSR_I_SET);
 +
++=======
+ 	enter_from_user_mode();
+ 	cortex_a76_erratum_1463225_svc_handler();
++>>>>>>> 4d6a38da8e79 (arm64: entry: always set GIC_PRIO_PSR_I_SET during entry)
  	do_el0_svc_compat(regs);
  }
  
diff --cc arch/arm64/kernel/entry.S
index ba52009f8045,7be1c194409b..000000000000
--- a/arch/arm64/kernel/entry.S
+++ b/arch/arm64/kernel/entry.S
@@@ -243,8 -312,17 +243,10 @@@ alternative_else_nop_endi
  alternative_if ARM64_HAS_IRQ_PRIO_MASKING
  	mrs_s	x20, SYS_ICC_PMR_EL1
  	str	x20, [sp, #S_PMR_SAVE]
+ 	mov	x20, #GIC_PRIO_IRQON | GIC_PRIO_PSR_I_SET
+ 	msr_s	SYS_ICC_PMR_EL1, x20
  alternative_else_nop_endif
  
 -	/* Re-enable tag checking (TCO set on exception entry) */
 -#ifdef CONFIG_ARM64_MTE
 -alternative_if ARM64_MTE
 -	SET_PSTATE_TCO(0)
 -alternative_else_nop_endif
 -#endif
 -
  	/*
  	 * Registers that may be useful after this macro is invoked:
  	 *
@@@ -451,13 -550,43 +453,53 @@@ tsk	.req	x28		// current thread_inf
  #endif
  	.endm
  
++<<<<<<< HEAD
 +	.macro	gic_prio_irq_setup, pmr:req, tmp:req
 +#ifdef CONFIG_ARM64_PSEUDO_NMI
 +	alternative_if ARM64_HAS_IRQ_PRIO_MASKING
 +	orr	\tmp, \pmr, #GIC_PRIO_PSR_I_SET
 +	msr_s	SYS_ICC_PMR_EL1, \tmp
 +	alternative_else_nop_endif
 +#endif
++=======
+ 	.macro el1_interrupt_handler, handler:req
+ 	enable_da
+ 
+ 	mov	x0, sp
+ 	bl	enter_el1_irq_or_nmi
+ 
+ 	irq_handler	\handler
+ 
+ #ifdef CONFIG_PREEMPTION
+ 	ldr	x24, [tsk, #TSK_TI_PREEMPT]	// get preempt count
+ alternative_if ARM64_HAS_IRQ_PRIO_MASKING
+ 	/*
+ 	 * DA were cleared at start of handling, and IF are cleared by
+ 	 * the GIC irqchip driver using gic_arch_enable_irqs() for
+ 	 * normal IRQs. If anything is set, it means we come back from
+ 	 * an NMI instead of a normal IRQ, so skip preemption
+ 	 */
+ 	mrs	x0, daif
+ 	orr	x24, x24, x0
+ alternative_else_nop_endif
+ 	cbnz	x24, 1f				// preempt count != 0 || NMI return path
+ 	bl	arm64_preempt_schedule_irq	// irq en/disable is done inside
+ 1:
+ #endif
+ 
+ 	mov	x0, sp
+ 	bl	exit_el1_irq_or_nmi
+ 	.endm
+ 
+ 	.macro el0_interrupt_handler, handler:req
+ 	user_exit_irqoff
+ 	enable_da
+ 
+ 	tbz	x22, #55, 1f
+ 	bl	do_el0_irq_bp_hardening
+ 1:
+ 	irq_handler	\handler
++>>>>>>> 4d6a38da8e79 (arm64: entry: always set GIC_PRIO_PSR_I_SET during entry)
  	.endm
  
  	.text
@@@ -699,8 -787,7 +740,12 @@@ SYM_CODE_START_LOCAL(el0_error
  	kernel_entry 0
  el0_error_naked:
  	mrs	x25, esr_el1
++<<<<<<< HEAD
 +	gic_prio_kentry_setup tmp=x2
 +	ct_user_exit_irqoff
++=======
+ 	user_exit_irqoff
++>>>>>>> 4d6a38da8e79 (arm64: entry: always set GIC_PRIO_PSR_I_SET during entry)
  	enable_dbg
  	mov	x0, sp
  	mov	x1, x25
diff --git a/arch/arm64/include/asm/daifflags.h b/arch/arm64/include/asm/daifflags.h
index 9693d33e8720..115b192cfc06 100644
--- a/arch/arm64/include/asm/daifflags.h
+++ b/arch/arm64/include/asm/daifflags.h
@@ -142,6 +142,9 @@ static inline void local_daif_inherit(struct pt_regs *regs)
 	if (interrupts_enabled(regs))
 		trace_hardirqs_on();
 
+	if (system_uses_irq_prio_masking())
+		gic_write_pmr(regs->pmr_save);
+
 	/*
 	 * We can't use local_daif_restore(regs->pstate) here as
 	 * system_has_prio_mask_debugging() won't restore the I bit if it can
* Unmerged path arch/arm64/kernel/entry-common.c
* Unmerged path arch/arm64/kernel/entry.S
