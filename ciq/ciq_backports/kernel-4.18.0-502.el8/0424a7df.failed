x86/resctrl: Clear staged_config[] before and after it is used

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-502.el8
Rebuild_CHGLOG: - x86/resctrl: Clear staged_config[] before and after it is used (Prarit Bhargava) [1989284]
Rebuild_FUZZ: 97.52%
commit-author Shawn Wang <shawnwang@linux.alibaba.com>
commit 0424a7dfe9129b93f29b277511a60e87f052ac6b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-502.el8/0424a7df.failed

As a temporary storage, staged_config[] in rdt_domain should be cleared
before and after it is used. The stale value in staged_config[] could
cause an MSR access error.

Here is a reproducer on a system with 16 usable CLOSIDs for a 15-way L3
Cache (MBA should be disabled if the number of CLOSIDs for MB is less than
16.) :
	mount -t resctrl resctrl -o cdp /sys/fs/resctrl
	mkdir /sys/fs/resctrl/p{1..7}
	umount /sys/fs/resctrl/
	mount -t resctrl resctrl /sys/fs/resctrl
	mkdir /sys/fs/resctrl/p{1..8}

An error occurs when creating resource group named p8:
    unchecked MSR access error: WRMSR to 0xca0 (tried to write 0x00000000000007ff) at rIP: 0xffffffff82249142 (cat_wrmsr+0x32/0x60)
    Call Trace:
     <IRQ>
     __flush_smp_call_function_queue+0x11d/0x170
     __sysvec_call_function+0x24/0xd0
     sysvec_call_function+0x89/0xc0
     </IRQ>
     <TASK>
     asm_sysvec_call_function+0x16/0x20

When creating a new resource control group, hardware will be configured
by the following process:
    rdtgroup_mkdir()
      rdtgroup_mkdir_ctrl_mon()
        rdtgroup_init_alloc()
          resctrl_arch_update_domains()

resctrl_arch_update_domains() iterates and updates all resctrl_conf_type
whose have_new_ctrl is true. Since staged_config[] holds the same values as
when CDP was enabled, it will continue to update the CDP_CODE and CDP_DATA
configurations. When group p8 is created, get_config_index() called in
resctrl_arch_update_domains() will return 16 and 17 as the CLOSIDs for
CDP_CODE and CDP_DATA, which will be translated to an invalid register -
0xca0 in this scenario.

Fix it by clearing staged_config[] before and after it is used.

[reinette: re-order commit tags]

Fixes: 75408e43509e ("x86/resctrl: Allow different CODE/DATA configurations to be staged")
	Suggested-by: Xin Hao <xhao@linux.alibaba.com>
	Signed-off-by: Shawn Wang <shawnwang@linux.alibaba.com>
	Signed-off-by: Reinette Chatre <reinette.chatre@intel.com>
	Signed-off-by: Dave Hansen <dave.hansen@linux.intel.com>
	Tested-by: Reinette Chatre <reinette.chatre@intel.com>
	Cc:stable@vger.kernel.org
Link: https://lore.kernel.org/all/2fad13f49fbe89687fc40e9a5a61f23a28d1507a.1673988935.git.reinette.chatre%40intel.com
(cherry picked from commit 0424a7dfe9129b93f29b277511a60e87f052ac6b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kernel/cpu/resctrl/ctrlmondata.c
#	arch/x86/kernel/cpu/resctrl/internal.h
diff --cc arch/x86/kernel/cpu/resctrl/ctrlmondata.c
index 9a768d89de37,b44c487727d4..000000000000
--- a/arch/x86/kernel/cpu/resctrl/ctrlmondata.c
+++ b/arch/x86/kernel/cpu/resctrl/ctrlmondata.c
@@@ -305,8 -366,8 +305,7 @@@ static int rdtgroup_parse_resource(cha
  ssize_t rdtgroup_schemata_write(struct kernfs_open_file *of,
  				char *buf, size_t nbytes, loff_t off)
  {
 -	struct resctrl_schema *s;
  	struct rdtgroup *rdtgrp;
- 	struct rdt_domain *dom;
  	struct rdt_resource *r;
  	char *tok, *resname;
  	int ret = 0;
@@@ -335,10 -396,7 +334,14 @@@
  		goto out;
  	}
  
++<<<<<<< HEAD
 +	for_each_alloc_enabled_rdt_resource(r) {
 +		list_for_each_entry(dom, &r->domains, list)
 +			dom->have_new_ctrl = false;
 +	}
++=======
+ 	rdt_staged_configs_clear();
++>>>>>>> 0424a7dfe912 (x86/resctrl: Clear staged_config[] before and after it is used)
  
  	while ((tok = strsep(&buf, "\n")) != NULL) {
  		resname = strim(strsep(&tok, ":"));
diff --cc arch/x86/kernel/cpu/resctrl/internal.h
index 8dea635659c1,85ceaf9a31ac..000000000000
--- a/arch/x86/kernel/cpu/resctrl/internal.h
+++ b/arch/x86/kernel/cpu/resctrl/internal.h
@@@ -631,5 -554,7 +631,10 @@@ bool has_busy_rmid(struct rdt_resource 
  void __check_limbo(struct rdt_domain *d, bool force_free);
  void rdt_domain_reconfigure_cdp(struct rdt_resource *r);
  void __init thread_throttle_mode_init(void);
++<<<<<<< HEAD
++=======
+ void __init mbm_config_rftype_init(const char *config);
+ void rdt_staged_configs_clear(void);
++>>>>>>> 0424a7dfe912 (x86/resctrl: Clear staged_config[] before and after it is used)
  
  #endif /* _ASM_X86_RESCTRL_INTERNAL_H */
* Unmerged path arch/x86/kernel/cpu/resctrl/ctrlmondata.c
* Unmerged path arch/x86/kernel/cpu/resctrl/internal.h
diff --git a/arch/x86/kernel/cpu/resctrl/rdtgroup.c b/arch/x86/kernel/cpu/resctrl/rdtgroup.c
index 2b966c66b88f..1d276a4aea74 100644
--- a/arch/x86/kernel/cpu/resctrl/rdtgroup.c
+++ b/arch/x86/kernel/cpu/resctrl/rdtgroup.c
@@ -83,6 +83,19 @@ void rdt_last_cmd_printf(const char *fmt, ...)
 	va_end(ap);
 }
 
+void rdt_staged_configs_clear(void)
+{
+	struct rdt_resource *r;
+	struct rdt_domain *dom;
+
+	lockdep_assert_held(&rdtgroup_mutex);
+
+	for_each_alloc_capable_rdt_resource(r) {
+		list_for_each_entry(dom, &r->domains, list)
+			memset(dom->staged_config, 0, sizeof(dom->staged_config));
+	}
+}
+
 /*
  * Trivial allocator for CLOSIDs. Since h/w only supports a small number,
  * we can keep a bitmap of free CLOSIDs in a single integer.
@@ -2784,7 +2797,9 @@ static void rdtgroup_init_mba(struct rdt_resource *r)
 static int rdtgroup_init_alloc(struct rdtgroup *rdtgrp)
 {
 	struct rdt_resource *r;
-	int ret;
+	int ret = 0;
+
+	rdt_staged_configs_clear();
 
 	for_each_alloc_enabled_rdt_resource(r) {
 		if (r->rid == RDT_RESOURCE_MBA) {
@@ -2792,20 +2807,22 @@ static int rdtgroup_init_alloc(struct rdtgroup *rdtgrp)
 		} else {
 			ret = rdtgroup_init_cat(r, rdtgrp->closid);
 			if (ret < 0)
-				return ret;
+				goto out;
 		}
 
 		ret = update_domains(r, rdtgrp->closid);
 		if (ret < 0) {
 			rdt_last_cmd_puts("Failed to initialize allocations\n");
-			return ret;
+			goto out;
 		}
 
 	}
 
 	rdtgrp->mode = RDT_MODE_SHAREABLE;
 
-	return 0;
+out:
+	rdt_staged_configs_clear();
+	return ret;
 }
 
 static int mkdir_rdt_prepare(struct kernfs_node *parent_kn,
