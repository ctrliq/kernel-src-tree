arm64: entry: add missing noinstr

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-502.el8
commit-author Mark Rutland <mark.rutland@arm.com>
commit 31a7f0f6c8f392f002c937f34f372943cf8be5a9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-502.el8/31a7f0f6.failed

We intend that all the early exception handling code is marked as
`noinstr`, but we forgot this for __el0_error_handler_common(), which is
called before we have completed entry from user mode. If it were
instrumented, we could run into problems with RCU, lockdep, etc.

Mark it as `noinstr` to prevent this.

The few other functions in entry-common.c which do not have `noinstr` are
called once we've completed entry, and are safe to instrument.

Fixes: bb8e93a287a5 ("arm64: entry: convert SError handlers to C")
	Signed-off-by: Mark Rutland <mark.rutland@arm.com>
	Cc: Catalin Marinas <catalin.marinas@arm.com>
	Cc: Marc Zyngier <maz@kernel.org>
	Cc: Joey Gouly <joey.gouly@arm.com>
	Cc: James Morse <james.morse@arm.com>
	Cc: Will Deacon <will@kernel.org>
Link: https://lore.kernel.org/r/20210714172801.16475-1-mark.rutland@arm.com
	Signed-off-by: Will Deacon <will@kernel.org>
(cherry picked from commit 31a7f0f6c8f392f002c937f34f372943cf8be5a9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/arm64/kernel/entry-common.c
diff --cc arch/arm64/kernel/entry-common.c
index c764ba2d11d7,db8b2e2d02c2..000000000000
--- a/arch/arm64/kernel/entry-common.c
+++ b/arch/arm64/kernel/entry-common.c
@@@ -354,6 -571,56 +354,59 @@@ asmlinkage void noinstr el0_sync_handle
  	}
  }
  
++<<<<<<< HEAD
++=======
+ static void noinstr el0_interrupt(struct pt_regs *regs,
+ 				  void (*handler)(struct pt_regs *))
+ {
+ 	enter_from_user_mode();
+ 
+ 	write_sysreg(DAIF_PROCCTX_NOIRQ, daif);
+ 
+ 	if (regs->pc & BIT(55))
+ 		arm64_apply_bp_hardening();
+ 
+ 	do_interrupt_handler(regs, handler);
+ }
+ 
+ static void noinstr __el0_irq_handler_common(struct pt_regs *regs)
+ {
+ 	el0_interrupt(regs, handle_arch_irq);
+ }
+ 
+ asmlinkage void noinstr el0t_64_irq_handler(struct pt_regs *regs)
+ {
+ 	__el0_irq_handler_common(regs);
+ }
+ 
+ static void noinstr __el0_fiq_handler_common(struct pt_regs *regs)
+ {
+ 	el0_interrupt(regs, handle_arch_fiq);
+ }
+ 
+ asmlinkage void noinstr el0t_64_fiq_handler(struct pt_regs *regs)
+ {
+ 	__el0_fiq_handler_common(regs);
+ }
+ 
+ static void noinstr __el0_error_handler_common(struct pt_regs *regs)
+ {
+ 	unsigned long esr = read_sysreg(esr_el1);
+ 
+ 	enter_from_user_mode();
+ 	local_daif_restore(DAIF_ERRCTX);
+ 	arm64_enter_nmi(regs);
+ 	do_serror(regs, esr);
+ 	arm64_exit_nmi(regs);
+ 	local_daif_restore(DAIF_PROCCTX);
+ }
+ 
+ asmlinkage void noinstr el0t_64_error_handler(struct pt_regs *regs)
+ {
+ 	__el0_error_handler_common(regs);
+ }
+ 
++>>>>>>> 31a7f0f6c8f3 (arm64: entry: add missing noinstr)
  #ifdef CONFIG_COMPAT
  static void noinstr el0_cp15(struct pt_regs *regs, unsigned long esr)
  {
* Unmerged path arch/arm64/kernel/entry-common.c
