drm/amd/pm: re-enable the gfx imu when smu resume

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-502.el8
commit-author Tim Huang <tim.huang@amd.com>
commit f7f28f268b861c29dd18086bb636abedf0ff59ff
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-502.el8/f7f28f26.failed

If the gfx imu is poweroff when suspend, then
it need to be re-enabled when resume.

	Signed-off-by: Tim Huang <tim.huang@amd.com>
	Reviewed-by: Yifan Zhang <yifan1.zhang@amd.com>
	Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
(cherry picked from commit f7f28f268b861c29dd18086bb636abedf0ff59ff)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/amd/pm/swsmu/amdgpu_smu.c
diff --cc drivers/gpu/drm/amd/pm/swsmu/amdgpu_smu.c
index 2347f7bb73d7,94fe8593444a..000000000000
--- a/drivers/gpu/drm/amd/pm/swsmu/amdgpu_smu.c
+++ b/drivers/gpu/drm/amd/pm/swsmu/amdgpu_smu.c
@@@ -137,10 -162,15 +137,20 @@@ int smu_get_dpm_freq_range(struct smu_c
  
  int smu_set_gfx_power_up_by_imu(struct smu_context *smu)
  {
++<<<<<<< HEAD
 +	if (!smu->ppt_funcs && !smu->ppt_funcs->set_gfx_power_up_by_imu)
 +		return -EOPNOTSUPP;
++=======
+ 	int ret = 0;
+ 	struct amdgpu_device *adev = smu->adev;
++>>>>>>> f7f28f268b86 (drm/amd/pm: re-enable the gfx imu when smu resume)
  
- 	return smu->ppt_funcs->set_gfx_power_up_by_imu(smu);
+ 	if (smu->ppt_funcs->set_gfx_power_up_by_imu) {
+ 		ret = smu->ppt_funcs->set_gfx_power_up_by_imu(smu);
+ 		if (ret)
+ 			dev_err(adev->dev, "Failed to enable gfx imu!\n");
+ 	}
+ 	return ret;
  }
  
  static u32 smu_get_mclk(void *handle, bool low)
* Unmerged path drivers/gpu/drm/amd/pm/swsmu/amdgpu_smu.c
