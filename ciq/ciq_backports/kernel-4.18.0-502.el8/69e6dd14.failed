drm/i915/pxp: limit drm-errors or warning on firmware API failures

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-502.el8
commit-author Alan Previn <alan.previn.teres.alexis@intel.com>
commit 69e6dd149212cdd681201352a79e6634665004e8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-502.el8/69e6dd14.failed

MESA driver is creating protected context on every driver handle
creation to query caps bits for app. So when running CI tests,
they are observing hundreds of drm_errors when enabling PXP
in .config but using SOC fusing or BIOS configuration that cannot
support PXP sessions.

The fixes tag referenced below was to resolve a related issue
where we wanted to silence error messages, but that case was due
to outdated IFWI (firmware) that definitely needed an upgrade and
was, at that point, considered a one-off case as opposed to today's
realization that default CI was enabling PXP in kernel config for
all testing.

So with this patch, let's strike a balance between issues that is
critical but are root-caused from HW/platform gaps (louder drm-warn
but just ONCE) vs other cases where it could also come from session
state machine (which cannot be a WARN_ONCE since it can be triggered
due to runtime operation events).

Let's use helpers for these so as more functions are added in future
features / HW (or as FW designers continue to bless upstreaming of
the error codes and meanings), we only need to update the helpers.

NOTE: Don't completely remove FW errors (via drm_debug) or else cusomer
apps that really needs to know that content protection failed won't
be aware of it.

v2: - Add fixes tag (Trvtko)
v3: - Break multi-line drm_dbg strings into separate drm_dbg (Daniele)
    - Fix couple of typecasting nits (Daniele)
v4: - Unsuccessful PXP FW cmd due to platform configuration shouldn't
      use drm_WARN_once (Tvrtko), Switched to use drm_info_once.
v5: - Added "reported-and-tested" by Eero.

Reported-and-tested-by: Eero Tamminen <eero.t.tamminen@intel.com>
Fixes: b762787bf767 ("drm/i915/pxp: Use drm_dbg if arb session failed due to fw version")
	Signed-off-by: Alan Previn <alan.previn.teres.alexis@intel.com>
	Reviewed-by: Daniele Ceraolo Spurio <daniele.ceraolospurio@intel.com>
	Signed-off-by: Daniele Ceraolo Spurio <daniele.ceraolospurio@intel.com>
Link: https://patchwork.freedesktop.org/patch/msgid/20230323184156.4140659-1-alan.previn.teres.alexis@intel.com
(cherry picked from commit 69e6dd149212cdd681201352a79e6634665004e8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/i915/pxp/intel_pxp_cmd_interface_cmn.h
#	drivers/gpu/drm/i915/pxp/intel_pxp_tee.c
diff --cc drivers/gpu/drm/i915/pxp/intel_pxp_tee.c
index 58471517d1e6,a2846b1dbbee..000000000000
--- a/drivers/gpu/drm/i915/pxp/intel_pxp_tee.c
+++ b/drivers/gpu/drm/i915/pxp/intel_pxp_tee.c
@@@ -11,19 -11,45 +11,50 @@@
  #include "gem/i915_gem_lmem.h"
  
  #include "i915_drv.h"
 -
  #include "intel_pxp.h"
 -#include "intel_pxp_cmd_interface_42.h"
 -#include "intel_pxp_huc.h"
  #include "intel_pxp_session.h"
  #include "intel_pxp_tee.h"
 -#include "intel_pxp_types.h"
 +#include "intel_pxp_tee_interface.h"
 +#include "intel_pxp_huc.h"
 +
 +static inline struct intel_pxp *i915_dev_to_pxp(struct device *i915_kdev)
 +{
 +	struct drm_i915_private *i915 = kdev_to_i915(i915_kdev);
 +
 +	return &to_gt(i915)->pxp;
 +}
  
+ static bool
+ is_fw_err_platform_config(u32 type)
+ {
+ 	switch (type) {
+ 	case PXP_STATUS_ERROR_API_VERSION:
+ 	case PXP_STATUS_PLATFCONFIG_KF1_NOVERIF:
+ 	case PXP_STATUS_PLATFCONFIG_KF1_BAD:
+ 		return true;
+ 	default:
+ 		break;
+ 	}
+ 	return false;
+ }
+ 
+ static const char *
+ fw_err_to_string(u32 type)
+ {
+ 	switch (type) {
+ 	case PXP_STATUS_ERROR_API_VERSION:
+ 		return "ERR_API_VERSION";
+ 	case PXP_STATUS_NOT_READY:
+ 		return "ERR_NOT_READY";
+ 	case PXP_STATUS_PLATFCONFIG_KF1_NOVERIF:
+ 	case PXP_STATUS_PLATFCONFIG_KF1_BAD:
+ 		return "ERR_PLATFORM_CONFIG";
+ 	default:
+ 		break;
+ 	}
+ 	return NULL;
+ }
+ 
  static int intel_pxp_tee_io_message(struct intel_pxp *pxp,
  				    void *msg_in, u32 msg_in_size,
  				    void *msg_out, u32 msg_out_max_size,
@@@ -301,8 -338,68 +332,76 @@@ int intel_pxp_tee_cmd_create_arb_sessio
  				       &msg_out, sizeof(msg_out),
  				       NULL);
  
++<<<<<<< HEAD
 +	if (ret)
 +		drm_err(&i915->drm, "Failed to send tee msg ret=[%d]\n", ret);
 +
 +	return ret;
 +}
++=======
+ 	if (ret) {
+ 		drm_err(&i915->drm, "Failed to send tee msg init arb session, ret=[%d]\n", ret);
+ 	} else if (msg_out.header.status != 0) {
+ 		if (is_fw_err_platform_config(msg_out.header.status)) {
+ 			drm_info_once(&i915->drm,
+ 				      "PXP init-arb-session-%d failed due to BIOS/SOC:0x%08x:%s\n",
+ 				      arb_session_id, msg_out.header.status,
+ 				      fw_err_to_string(msg_out.header.status));
+ 		} else {
+ 			drm_dbg(&i915->drm, "PXP init-arb-session--%d failed 0x%08x:%st:\n",
+ 				arb_session_id, msg_out.header.status,
+ 				fw_err_to_string(msg_out.header.status));
+ 			drm_dbg(&i915->drm, "     cmd-detail: ID=[0x%08x],API-Ver-[0x%08x]\n",
+ 				msg_in.header.command_id, msg_in.header.api_version);
+ 		}
+ 	}
+ 
+ 	return ret;
+ }
+ 
+ void intel_pxp_tee_end_arb_fw_session(struct intel_pxp *pxp, u32 session_id)
+ {
+ 	struct drm_i915_private *i915 = pxp->ctrl_gt->i915;
+ 	struct pxp42_inv_stream_key_in msg_in = {0};
+ 	struct pxp42_inv_stream_key_out msg_out = {0};
+ 	int ret, trials = 0;
+ 
+ try_again:
+ 	memset(&msg_in, 0, sizeof(msg_in));
+ 	memset(&msg_out, 0, sizeof(msg_out));
+ 	msg_in.header.api_version = PXP_APIVER(4, 2);
+ 	msg_in.header.command_id = PXP42_CMDID_INVALIDATE_STREAM_KEY;
+ 	msg_in.header.buffer_len = sizeof(msg_in) - sizeof(msg_in.header);
+ 
+ 	msg_in.header.stream_id = FIELD_PREP(PXP_CMDHDR_EXTDATA_SESSION_VALID, 1);
+ 	msg_in.header.stream_id |= FIELD_PREP(PXP_CMDHDR_EXTDATA_APP_TYPE, 0);
+ 	msg_in.header.stream_id |= FIELD_PREP(PXP_CMDHDR_EXTDATA_SESSION_ID, session_id);
+ 
+ 	ret = intel_pxp_tee_io_message(pxp,
+ 				       &msg_in, sizeof(msg_in),
+ 				       &msg_out, sizeof(msg_out),
+ 				       NULL);
+ 
+ 	/* Cleanup coherency between GT and Firmware is critical, so try again if it fails */
+ 	if ((ret || msg_out.header.status != 0x0) && ++trials < 3)
+ 		goto try_again;
+ 
+ 	if (ret) {
+ 		drm_err(&i915->drm, "Failed to send tee msg for inv-stream-key-%u, ret=[%d]\n",
+ 			session_id, ret);
+ 	} else if (msg_out.header.status != 0) {
+ 		if (is_fw_err_platform_config(msg_out.header.status)) {
+ 			drm_info_once(&i915->drm,
+ 				      "PXP inv-stream-key-%u failed due to BIOS/SOC :0x%08x:%s\n",
+ 				      session_id, msg_out.header.status,
+ 				      fw_err_to_string(msg_out.header.status));
+ 		} else {
+ 			drm_dbg(&i915->drm, "PXP inv-stream-key-%u failed 0x%08x:%s:\n",
+ 				session_id, msg_out.header.status,
+ 				fw_err_to_string(msg_out.header.status));
+ 			drm_dbg(&i915->drm, "     cmd-detail: ID=[0x%08x],API-Ver-[0x%08x]\n",
+ 				msg_in.header.command_id, msg_in.header.api_version);
+ 		}
+ 	}
+ }
++>>>>>>> 69e6dd149212 (drm/i915/pxp: limit drm-errors or warning on firmware API failures)
* Unmerged path drivers/gpu/drm/i915/pxp/intel_pxp_cmd_interface_cmn.h
* Unmerged path drivers/gpu/drm/i915/pxp/intel_pxp_cmd_interface_cmn.h
diff --git a/drivers/gpu/drm/i915/pxp/intel_pxp_session.c b/drivers/gpu/drm/i915/pxp/intel_pxp_session.c
index 8453e13e9120..3676cc61f690 100644
--- a/drivers/gpu/drm/i915/pxp/intel_pxp_session.c
+++ b/drivers/gpu/drm/i915/pxp/intel_pxp_session.c
@@ -74,7 +74,7 @@ static int pxp_create_arb_session(struct intel_pxp *pxp)
 
 	ret = pxp_wait_for_session_state(pxp, ARB_SESSION, true);
 	if (ret) {
-		drm_err(&gt->i915->drm, "arb session failed to go in play\n");
+		drm_dbg(&gt->i915->drm, "arb session failed to go in play\n");
 		return ret;
 	}
 
* Unmerged path drivers/gpu/drm/i915/pxp/intel_pxp_tee.c
