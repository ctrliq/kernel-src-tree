x86/resctrl: Fix min_cbm_bits for AMD

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-502.el8
commit-author Babu Moger <babu.moger@amd.com>
commit 67bf6493449b09590f9f71d7df29efb392b12d25
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-502.el8/67bf6493.failed

AMD systems support zero CBM (capacity bit mask) for cache allocation.
That is reflected in rdt_init_res_defs_amd() by:

  r->cache.arch_has_empty_bitmaps = true;

However given the unified code in cbm_validate(), checking for:

  val == 0 && !arch_has_empty_bitmaps

is not enough because of another check in cbm_validate():

  if ((zero_bit - first_bit) < r->cache.min_cbm_bits)

The default value of r->cache.min_cbm_bits = 1.

Leading to:

  $ cd /sys/fs/resctrl
  $ mkdir foo
  $ cd foo
  $ echo L3:0=0 > schemata
    -bash: echo: write error: Invalid argument
  $ cat /sys/fs/resctrl/info/last_cmd_status
    Need at least 1 bits in the mask

Initialize the min_cbm_bits to 0 for AMD. Also, remove the default
setting of min_cbm_bits and initialize it separately.

After the fix:

  $ cd /sys/fs/resctrl
  $ mkdir foo
  $ cd foo
  $ echo L3:0=0 > schemata
  $ cat /sys/fs/resctrl/info/last_cmd_status
    ok

Fixes: 316e7f901f5a ("x86/resctrl: Add struct rdt_cache::arch_has_{sparse, empty}_bitmaps")
Co-developed-by: Stephane Eranian <eranian@google.com>
	Signed-off-by: Stephane Eranian <eranian@google.com>
	Signed-off-by: Babu Moger <babu.moger@amd.com>
	Signed-off-by: Borislav Petkov <bp@suse.de>
	Reviewed-by: Ingo Molnar <mingo@kernel.org>
	Reviewed-by: James Morse <james.morse@arm.com>
	Reviewed-by: Reinette Chatre <reinette.chatre@intel.com>
	Reviewed-by: Fenghua Yu <fenghua.yu@intel.com>
	Cc: <stable@vger.kernel.org>
Link: https://lore.kernel.org/lkml/20220517001234.3137157-1-eranian@google.com
(cherry picked from commit 67bf6493449b09590f9f71d7df29efb392b12d25)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kernel/cpu/resctrl/core.c
diff --cc arch/x86/kernel/cpu/resctrl/core.c
index 296d8b9fc18a,3266ea36667c..000000000000
--- a/arch/x86/kernel/cpu/resctrl/core.c
+++ b/arch/x86/kernel/cpu/resctrl/core.c
@@@ -65,120 -57,48 +65,144 @@@ static voi
  mba_wrmsr_amd(struct rdt_domain *d, struct msr_param *m,
  	      struct rdt_resource *r);
  
 -#define domain_init(id) LIST_HEAD_INIT(rdt_resources_all[id].r_resctrl.domains)
 +#define domain_init(id) LIST_HEAD_INIT(rdt_resources_all[id].domains)
  
 -struct rdt_hw_resource rdt_resources_all[] = {
 +struct rdt_resource rdt_resources_all[] = {
  	[RDT_RESOURCE_L3] =
  	{
++<<<<<<< HEAD
 +		.rid			= RDT_RESOURCE_L3,
 +		.name			= "L3",
 +		.domains		= domain_init(RDT_RESOURCE_L3),
++=======
+ 		.r_resctrl = {
+ 			.rid			= RDT_RESOURCE_L3,
+ 			.name			= "L3",
+ 			.cache_level		= 3,
+ 			.domains		= domain_init(RDT_RESOURCE_L3),
+ 			.parse_ctrlval		= parse_cbm,
+ 			.format_str		= "%d=%0*x",
+ 			.fflags			= RFTYPE_RES_CACHE,
+ 		},
++>>>>>>> 67bf6493449b (x86/resctrl: Fix min_cbm_bits for AMD)
 +		.msr_base		= MSR_IA32_L3_CBM_BASE,
 +		.msr_update		= cat_wrmsr,
 +		.cache_level		= 3,
 +		.cache = {
 +			.min_cbm_bits	= 1,
 +			.cbm_idx_mult	= 1,
 +			.cbm_idx_offset	= 0,
 +		},
 +		.parse_ctrlval		= parse_cbm,
 +		.format_str		= "%d=%0*x",
 +		.fflags			= RFTYPE_RES_CACHE,
 +	},
 +	[RDT_RESOURCE_L3DATA] =
 +	{
 +		.rid			= RDT_RESOURCE_L3DATA,
 +		.name			= "L3DATA",
 +		.domains		= domain_init(RDT_RESOURCE_L3DATA),
 +		.msr_base		= MSR_IA32_L3_CBM_BASE,
 +		.msr_update		= cat_wrmsr,
 +		.cache_level		= 3,
 +		.cache = {
 +			.min_cbm_bits	= 1,
 +			.cbm_idx_mult	= 2,
 +			.cbm_idx_offset	= 0,
 +		},
 +		.parse_ctrlval		= parse_cbm,
 +		.format_str		= "%d=%0*x",
 +		.fflags			= RFTYPE_RES_CACHE,
 +	},
 +	[RDT_RESOURCE_L3CODE] =
 +	{
 +		.rid			= RDT_RESOURCE_L3CODE,
 +		.name			= "L3CODE",
 +		.domains		= domain_init(RDT_RESOURCE_L3CODE),
  		.msr_base		= MSR_IA32_L3_CBM_BASE,
  		.msr_update		= cat_wrmsr,
 +		.cache_level		= 3,
 +		.cache = {
 +			.min_cbm_bits	= 1,
 +			.cbm_idx_mult	= 2,
 +			.cbm_idx_offset	= 1,
 +		},
 +		.parse_ctrlval		= parse_cbm,
 +		.format_str		= "%d=%0*x",
 +		.fflags			= RFTYPE_RES_CACHE,
  	},
  	[RDT_RESOURCE_L2] =
  	{
++<<<<<<< HEAD
 +		.rid			= RDT_RESOURCE_L2,
 +		.name			= "L2",
 +		.domains		= domain_init(RDT_RESOURCE_L2),
++=======
+ 		.r_resctrl = {
+ 			.rid			= RDT_RESOURCE_L2,
+ 			.name			= "L2",
+ 			.cache_level		= 2,
+ 			.domains		= domain_init(RDT_RESOURCE_L2),
+ 			.parse_ctrlval		= parse_cbm,
+ 			.format_str		= "%d=%0*x",
+ 			.fflags			= RFTYPE_RES_CACHE,
+ 		},
++>>>>>>> 67bf6493449b (x86/resctrl: Fix min_cbm_bits for AMD)
  		.msr_base		= MSR_IA32_L2_CBM_BASE,
  		.msr_update		= cat_wrmsr,
 +		.cache_level		= 2,
 +		.cache = {
 +			.min_cbm_bits	= 1,
 +			.cbm_idx_mult	= 1,
 +			.cbm_idx_offset	= 0,
 +		},
 +		.parse_ctrlval		= parse_cbm,
 +		.format_str		= "%d=%0*x",
 +		.fflags			= RFTYPE_RES_CACHE,
  	},
 -	[RDT_RESOURCE_MBA] =
 +	[RDT_RESOURCE_L2DATA] =
  	{
 -		.r_resctrl = {
 -			.rid			= RDT_RESOURCE_MBA,
 -			.name			= "MB",
 -			.cache_level		= 3,
 -			.domains		= domain_init(RDT_RESOURCE_MBA),
 -			.parse_ctrlval		= parse_bw,
 -			.format_str		= "%d=%*u",
 -			.fflags			= RFTYPE_RES_MB,
 +		.rid			= RDT_RESOURCE_L2DATA,
 +		.name			= "L2DATA",
 +		.domains		= domain_init(RDT_RESOURCE_L2DATA),
 +		.msr_base		= MSR_IA32_L2_CBM_BASE,
 +		.msr_update		= cat_wrmsr,
 +		.cache_level		= 2,
 +		.cache = {
 +			.min_cbm_bits	= 1,
 +			.cbm_idx_mult	= 2,
 +			.cbm_idx_offset	= 0,
 +		},
 +		.parse_ctrlval		= parse_cbm,
 +		.format_str		= "%d=%0*x",
 +		.fflags			= RFTYPE_RES_CACHE,
 +	},
 +	[RDT_RESOURCE_L2CODE] =
 +	{
 +		.rid			= RDT_RESOURCE_L2CODE,
 +		.name			= "L2CODE",
 +		.domains		= domain_init(RDT_RESOURCE_L2CODE),
 +		.msr_base		= MSR_IA32_L2_CBM_BASE,
 +		.msr_update		= cat_wrmsr,
 +		.cache_level		= 2,
 +		.cache = {
 +			.min_cbm_bits	= 1,
 +			.cbm_idx_mult	= 2,
 +			.cbm_idx_offset	= 1,
  		},
 +		.parse_ctrlval		= parse_cbm,
 +		.format_str		= "%d=%0*x",
 +		.fflags			= RFTYPE_RES_CACHE,
 +	},
 +	[RDT_RESOURCE_MBA] =
 +	{
 +		.rid			= RDT_RESOURCE_MBA,
 +		.name			= "MB",
 +		.domains		= domain_init(RDT_RESOURCE_MBA),
 +		.cache_level		= 3,
 +		.parse_ctrlval		= parse_bw,
 +		.format_str		= "%d=%*u",
 +		.fflags			= RFTYPE_RES_MB,
  	},
  };
  
@@@ -940,9 -830,10 +964,10 @@@ static __init void rdt_init_res_defs_in
  			r->cache.arch_has_sparse_bitmaps = false;
  			r->cache.arch_has_empty_bitmaps = false;
  			r->cache.arch_has_per_cpu_cfg = false;
+ 			r->cache.min_cbm_bits = 1;
  		} else if (r->rid == RDT_RESOURCE_MBA) {
 -			hw_res->msr_base = MSR_IA32_MBA_THRTL_BASE;
 -			hw_res->msr_update = mba_wrmsr_intel;
 +			r->msr_base = MSR_IA32_MBA_THRTL_BASE;
 +			r->msr_update = mba_wrmsr_intel;
  		}
  	}
  }
@@@ -961,9 -851,10 +986,10 @@@ static __init void rdt_init_res_defs_am
  			r->cache.arch_has_sparse_bitmaps = true;
  			r->cache.arch_has_empty_bitmaps = true;
  			r->cache.arch_has_per_cpu_cfg = true;
+ 			r->cache.min_cbm_bits = 0;
  		} else if (r->rid == RDT_RESOURCE_MBA) {
 -			hw_res->msr_base = MSR_IA32_MBA_BW_BASE;
 -			hw_res->msr_update = mba_wrmsr_amd;
 +			r->msr_base = MSR_IA32_MBA_BW_BASE;
 +			r->msr_update = mba_wrmsr_amd;
  		}
  	}
  }
* Unmerged path arch/x86/kernel/cpu/resctrl/core.c
