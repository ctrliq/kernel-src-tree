net/mlx5e: Add flow steering debugfs directory

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-502.el8
commit-author Gal Pressman <gal@nvidia.com>
commit 3a3da78dd258cc164ab41ec09cf2feacca423fb4
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-502.el8/3a3da78d.failed

Add a debugfs directory for flow steering related information.
The directory is currently empty, and will hold the 'tc' subdirectory in
a downstream patch.

	Signed-off-by: Gal Pressman <gal@nvidia.com>
	Reviewed-by: Tariq Toukan <tariqt@nvidia.com>
	Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
(cherry picked from commit 3a3da78dd258cc164ab41ec09cf2feacca423fb4)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en/fs.h
#	drivers/net/ethernet/mellanox/mlx5/core/en_fs.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en/fs.h
index 9b8cdf2e68ad,5233d4daca41..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en/fs.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en/fs.h
@@@ -183,13 -145,42 +183,14 @@@ void mlx5e_destroy_flow_steering(struc
  
  struct mlx5e_flow_steering *mlx5e_fs_init(const struct mlx5e_profile *profile,
  					  struct mlx5_core_dev *mdev,
- 					  bool state_destroy);
+ 					  bool state_destroy,
+ 					  struct dentry *dfs_root);
  void mlx5e_fs_cleanup(struct mlx5e_flow_steering *fs);
 -struct mlx5e_vlan_table *mlx5e_fs_get_vlan(struct mlx5e_flow_steering *fs);
 -void mlx5e_fs_set_tc(struct mlx5e_flow_steering *fs, struct mlx5e_tc_table *tc);
 -struct mlx5e_tc_table *mlx5e_fs_get_tc(struct mlx5e_flow_steering *fs);
 -struct mlx5e_l2_table *mlx5e_fs_get_l2(struct mlx5e_flow_steering *fs);
 -struct mlx5_flow_namespace *mlx5e_fs_get_ns(struct mlx5e_flow_steering *fs, bool egress);
 -void mlx5e_fs_set_ns(struct mlx5e_flow_steering *fs, struct mlx5_flow_namespace *ns, bool egress);
 -#ifdef CONFIG_MLX5_EN_RXNFC
 -struct mlx5e_ethtool_steering *mlx5e_fs_get_ethtool(struct mlx5e_flow_steering *fs);
 -#endif
 -struct mlx5_ttc_table *mlx5e_fs_get_ttc(struct mlx5e_flow_steering *fs, bool inner);
 -void mlx5e_fs_set_ttc(struct mlx5e_flow_steering *fs, struct mlx5_ttc_table *ttc, bool inner);
 -#ifdef CONFIG_MLX5_EN_ARFS
 -struct mlx5e_arfs_tables *mlx5e_fs_get_arfs(struct mlx5e_flow_steering *fs);
 -void mlx5e_fs_set_arfs(struct mlx5e_flow_steering *fs, struct mlx5e_arfs_tables *arfs);
 -#endif
 -struct mlx5e_ptp_fs *mlx5e_fs_get_ptp(struct mlx5e_flow_steering *fs);
 -void mlx5e_fs_set_ptp(struct mlx5e_flow_steering *fs, struct mlx5e_ptp_fs *ptp_fs);
 -struct mlx5e_fs_any *mlx5e_fs_get_any(struct mlx5e_flow_steering *fs);
 -void mlx5e_fs_set_any(struct mlx5e_flow_steering *fs, struct mlx5e_fs_any *any);
 -struct mlx5e_fs_udp *mlx5e_fs_get_udp(struct mlx5e_flow_steering *fs);
 -void mlx5e_fs_set_udp(struct mlx5e_flow_steering *fs, struct mlx5e_fs_udp *udp);
 -#ifdef CONFIG_MLX5_EN_TLS
 -struct mlx5e_accel_fs_tcp *mlx5e_fs_get_accel_tcp(struct mlx5e_flow_steering *fs);
 -void mlx5e_fs_set_accel_tcp(struct mlx5e_flow_steering *fs, struct mlx5e_accel_fs_tcp *accel_tcp);
 -#endif
 -void mlx5e_fs_set_state_destroy(struct mlx5e_flow_steering *fs, bool state_destroy);
 -void mlx5e_fs_set_vlan_strip_disable(struct mlx5e_flow_steering *fs, bool vlan_strip_disable);
 -
 -struct mlx5_core_dev *mlx5e_fs_get_mdev(struct mlx5e_flow_steering *fs);
 -int mlx5e_add_vlan_trap(struct mlx5e_flow_steering *fs, int  trap_id, int tir_num);
 -void mlx5e_remove_vlan_trap(struct mlx5e_flow_steering *fs);
 -int mlx5e_add_mac_trap(struct mlx5e_flow_steering *fs, int  trap_id, int tir_num);
 -void mlx5e_remove_mac_trap(struct mlx5e_flow_steering *fs);
 +
 +int mlx5e_add_vlan_trap(struct mlx5e_priv *priv, int  trap_id, int tir_num);
 +void mlx5e_remove_vlan_trap(struct mlx5e_priv *priv);
 +int mlx5e_add_mac_trap(struct mlx5e_priv *priv, int  trap_id, int tir_num);
 +void mlx5e_remove_mac_trap(struct mlx5e_priv *priv);
  void mlx5e_fs_set_rx_mode_work(struct mlx5e_flow_steering *fs, struct net_device *netdev);
  int mlx5e_fs_vlan_rx_add_vid(struct mlx5e_flow_steering *fs,
  			     struct net_device *netdev,
@@@ -198,5 -189,20 +199,23 @@@ int mlx5e_fs_vlan_rx_kill_vid(struct ml
  			      struct net_device *netdev,
  			      __be16 proto, u16 vid);
  void mlx5e_fs_init_l2_addr(struct mlx5e_flow_steering *fs, struct net_device *netdev);
++<<<<<<< HEAD
++=======
+ 
+ struct dentry *mlx5e_fs_get_debugfs_root(struct mlx5e_flow_steering *fs);
+ 
+ #define fs_err(fs, fmt, ...) \
+ 	mlx5_core_err(mlx5e_fs_get_mdev(fs), fmt, ##__VA_ARGS__)
+ 
+ #define fs_dbg(fs, fmt, ...) \
+ 	mlx5_core_dbg(mlx5e_fs_get_mdev(fs), fmt, ##__VA_ARGS__)
+ 
+ #define fs_warn(fs, fmt, ...) \
+ 	mlx5_core_warn(mlx5e_fs_get_mdev(fs), fmt, ##__VA_ARGS__)
+ 
+ #define fs_warn_once(fs, fmt, ...) \
+ 	mlx5_core_warn_once(mlx5e_fs_get_mdev(fs), fmt, ##__VA_ARGS__)
+ 
++>>>>>>> 3a3da78dd258 (net/mlx5e: Add flow steering debugfs directory)
  #endif /* __MLX5E_FLOW_STEER_H__ */
  
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_fs.c
index 6768f21c4eb1,7298fe782e9e..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_fs.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_fs.c
@@@ -40,6 -40,36 +41,39 @@@
  #include "en_tc.h"
  #include "lib/mpfs.h"
  #include "en/ptp.h"
++<<<<<<< HEAD
++=======
+ #include "en/fs_ethtool.h"
+ 
+ struct mlx5e_flow_steering {
+ 	struct work_struct		set_rx_mode_work;
+ 	bool				state_destroy;
+ 	bool				vlan_strip_disable;
+ 	struct mlx5_core_dev		*mdev;
+ 	struct net_device		*netdev;
+ 	struct mlx5_flow_namespace      *ns;
+ 	struct mlx5_flow_namespace      *egress_ns;
+ #ifdef CONFIG_MLX5_EN_RXNFC
+ 	struct mlx5e_ethtool_steering   *ethtool;
+ #endif
+ 	struct mlx5e_tc_table           *tc;
+ 	struct mlx5e_promisc_table      promisc;
+ 	struct mlx5e_vlan_table         *vlan;
+ 	struct mlx5e_l2_table           l2;
+ 	struct mlx5_ttc_table           *ttc;
+ 	struct mlx5_ttc_table           *inner_ttc;
+ #ifdef CONFIG_MLX5_EN_ARFS
+ 	struct mlx5e_arfs_tables       *arfs;
+ #endif
+ #ifdef CONFIG_MLX5_EN_TLS
+ 	struct mlx5e_accel_fs_tcp      *accel_tcp;
+ #endif
+ 	struct mlx5e_fs_udp            *udp;
+ 	struct mlx5e_fs_any            *any;
+ 	struct mlx5e_ptp_fs            *ptp_fs;
+ 	struct dentry                  *dfs_root;
+ };
++>>>>>>> 3a3da78dd258 (net/mlx5e: Add flow steering debugfs directory)
  
  static int mlx5e_add_l2_flow_rule(struct mlx5e_flow_steering *fs,
  				  struct mlx5e_l2_rule *ai, int type);
@@@ -76,7 -106,12 +110,16 @@@ static inline int mlx5e_hash_l2(u8 *add
  	return addr[5];
  }
  
++<<<<<<< HEAD
 +static void mlx5e_add_l2_to_hash(struct hlist_head *hash, u8 *addr)
++=======
+ struct dentry *mlx5e_fs_get_debugfs_root(struct mlx5e_flow_steering *fs)
+ {
+ 	return fs->dfs_root;
+ }
+ 
+ static void mlx5e_add_l2_to_hash(struct hlist_head *hash, const u8 *addr)
++>>>>>>> 3a3da78dd258 (net/mlx5e: Add flow steering debugfs directory)
  {
  	struct mlx5e_l2_hash_node *hn;
  	int ix = mlx5e_hash_l2(addr);
@@@ -1369,9 -1410,45 +1412,48 @@@ static void mlx5e_fs_tc_free(struct mlx
  	mlx5e_tc_table_free(fs->tc);
  }
  
++<<<<<<< HEAD
++=======
+ struct mlx5e_tc_table *mlx5e_fs_get_tc(struct mlx5e_flow_steering *fs)
+ {
+ 	return fs->tc;
+ }
+ 
+ #ifdef CONFIG_MLX5_EN_RXNFC
+ static int mlx5e_fs_ethtool_alloc(struct mlx5e_flow_steering *fs)
+ {
+ 	return mlx5e_ethtool_alloc(&fs->ethtool);
+ }
+ 
+ static void mlx5e_fs_ethtool_free(struct mlx5e_flow_steering *fs)
+ {
+ 	mlx5e_ethtool_free(fs->ethtool);
+ }
+ 
+ struct mlx5e_ethtool_steering *mlx5e_fs_get_ethtool(struct mlx5e_flow_steering *fs)
+ {
+ 	return fs->ethtool;
+ }
+ #else
+ static int mlx5e_fs_ethtool_alloc(struct mlx5e_flow_steering *fs)
+ { return 0; }
+ static void mlx5e_fs_ethtool_free(struct mlx5e_flow_steering *fs) { }
+ #endif
+ 
+ static void mlx5e_fs_debugfs_init(struct mlx5e_flow_steering *fs,
+ 				  struct dentry *dfs_root)
+ {
+ 	if (IS_ERR_OR_NULL(dfs_root))
+ 		return;
+ 
+ 	fs->dfs_root = debugfs_create_dir("fs", dfs_root);
+ }
+ 
++>>>>>>> 3a3da78dd258 (net/mlx5e: Add flow steering debugfs directory)
  struct mlx5e_flow_steering *mlx5e_fs_init(const struct mlx5e_profile *profile,
  					  struct mlx5_core_dev *mdev,
- 					  bool state_destroy)
+ 					  bool state_destroy,
+ 					  struct dentry *dfs_root)
  {
  	struct mlx5e_flow_steering *fs;
  	int err;
@@@ -1394,8 -1471,15 +1476,17 @@@
  			goto err_free_vlan;
  	}
  
++<<<<<<< HEAD
++=======
+ 	err = mlx5e_fs_ethtool_alloc(fs);
+ 	if (err)
+ 		goto err_free_tc;
+ 
+ 	mlx5e_fs_debugfs_init(fs, dfs_root);
+ 
++>>>>>>> 3a3da78dd258 (net/mlx5e: Add flow steering debugfs directory)
  	return fs;
 -err_free_tc:
 -	mlx5e_fs_tc_free(fs);
 +
  err_free_vlan:
  	mlx5e_fs_vlan_free(fs);
  err_free_fs:
@@@ -1406,6 -1490,8 +1497,11 @@@ err
  
  void mlx5e_fs_cleanup(struct mlx5e_flow_steering *fs)
  {
++<<<<<<< HEAD
++=======
+ 	debugfs_remove_recursive(fs->dfs_root);
+ 	mlx5e_fs_ethtool_free(fs);
++>>>>>>> 3a3da78dd258 (net/mlx5e: Add flow steering debugfs directory)
  	mlx5e_fs_tc_free(fs);
  	mlx5e_fs_vlan_free(fs);
  	kvfree(fs);
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en/fs.h
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_fs.c
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en_main.c b/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
index ae689404b54c..117e0c6d42bc 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
@@ -5039,7 +5039,8 @@ static int mlx5e_nic_init(struct mlx5_core_dev *mdev,
 	mlx5e_timestamp_init(priv);
 
 	fs = mlx5e_fs_init(priv->profile, mdev,
-			   !test_bit(MLX5E_STATE_DESTROYING, &priv->state));
+			   !test_bit(MLX5E_STATE_DESTROYING, &priv->state),
+			   priv->dfs_root);
 	if (!fs) {
 		err = -ENOMEM;
 		mlx5_core_err(mdev, "FS initialization failed, %d\n", err);
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en_rep.c b/drivers/net/ethernet/mellanox/mlx5/core/en_rep.c
index 7c0eb504ee7f..4f7ac37b6709 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_rep.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_rep.c
@@ -798,8 +798,10 @@ static int mlx5e_init_rep(struct mlx5_core_dev *mdev,
 {
 	struct mlx5e_priv *priv = netdev_priv(netdev);
 
-	priv->fs = mlx5e_fs_init(priv->profile, mdev,
-				 !test_bit(MLX5E_STATE_DESTROYING, &priv->state));
+	priv->fs =
+		mlx5e_fs_init(priv->profile, mdev,
+			      !test_bit(MLX5E_STATE_DESTROYING, &priv->state),
+			      priv->dfs_root);
 	if (!priv->fs) {
 		netdev_err(priv->netdev, "FS allocation failed\n");
 		return -ENOMEM;
@@ -818,7 +820,8 @@ static int mlx5e_init_ul_rep(struct mlx5_core_dev *mdev,
 	int err;
 
 	priv->fs = mlx5e_fs_init(priv->profile, mdev,
-				 !test_bit(MLX5E_STATE_DESTROYING, &priv->state));
+				 !test_bit(MLX5E_STATE_DESTROYING, &priv->state),
+				 priv->dfs_root);
 	if (!priv->fs) {
 		netdev_err(priv->netdev, "FS allocation failed\n");
 		return -ENOMEM;
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/ipoib/ipoib.c b/drivers/net/ethernet/mellanox/mlx5/core/ipoib/ipoib.c
index 533b8191ac20..bc9d3357e932 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/ipoib/ipoib.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/ipoib/ipoib.c
@@ -407,7 +407,8 @@ static int mlx5i_init_rx(struct mlx5e_priv *priv)
 	int err;
 
 	priv->fs = mlx5e_fs_init(priv->profile, mdev,
-				 !test_bit(MLX5E_STATE_DESTROYING, &priv->state));
+				 !test_bit(MLX5E_STATE_DESTROYING, &priv->state),
+				 priv->dfs_root);
 	if (!priv->fs) {
 		netdev_err(priv->netdev, "FS allocation failed\n");
 		return -ENOMEM;
