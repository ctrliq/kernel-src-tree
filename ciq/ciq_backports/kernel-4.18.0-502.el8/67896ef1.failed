platform/x86/intel/ifs: Add stub driver for In-Field Scan

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-502.el8
commit-author Tony Luck <tony.luck@intel.com>
commit 67896ef13c4db88082a914e96d958044cd3392e8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-502.el8/67896ef1.failed

Cloud Service Providers that operate fleets of servers have reported
[1] occasions where they can detect that a CPU has gone bad due to
effects like electromigration, or isolated manufacturing defects.
However, that detection method is A/B testing seemingly random
application failures looking for a pattern. In-Field Scan (IFS) is
a driver for a platform capability to load a crafted 'scan image'
to run targeted low level diagnostics outside of the CPU's architectural
error detection capabilities.

Stub version of driver just does initial part of check for the IFS
feature. MSR_IA32_CORE_CAPS must enumerate the presence of the
MSR_INTEGRITY_CAPS MSR.

[1]: https://www.youtube.com/watch?v=QMF3rqhjYuM

	Reviewed-by: Dan Williams <dan.j.williams@intel.com>
	Signed-off-by: Tony Luck <tony.luck@intel.com>
	Acked-by: Hans de Goede <hdegoede@redhat.com>
	Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
	Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
Link: https://lore.kernel.org/r/20220506225410.1652287-5-tony.luck@intel.com
	Signed-off-by: Hans de Goede <hdegoede@redhat.com>
(cherry picked from commit 67896ef13c4db88082a914e96d958044cd3392e8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/platform/x86/intel/Kconfig
#	drivers/platform/x86/intel/Makefile
diff --cc drivers/platform/x86/intel/Kconfig
index 235a38a519c0,794968bda115..000000000000
--- a/drivers/platform/x86/intel/Kconfig
+++ b/drivers/platform/x86/intel/Kconfig
@@@ -3,18 -3,10 +3,25 @@@
  # Intel x86 Platform Specific Drivers
  #
  
++<<<<<<< HEAD
 +menuconfig X86_PLATFORM_DRIVERS_INTEL
 +	bool "Intel x86 Platform Specific Device Drivers"
 +	default y
 +	help
 +	  Say Y here to get to see options for device drivers for
 +	  various Intel x86 platforms, including vendor-specific
 +	  drivers. This option alone does not add any kernel code.
 +
 +	  If you say N, all options in this submenu will be skipped
 +	  and disabled.
 +
 +if X86_PLATFORM_DRIVERS_INTEL
++=======
+ source "drivers/platform/x86/intel/atomisp2/Kconfig"
+ source "drivers/platform/x86/intel/ifs/Kconfig"
+ source "drivers/platform/x86/intel/int1092/Kconfig"
+ source "drivers/platform/x86/intel/int3472/Kconfig"
++>>>>>>> 67896ef13c4d (platform/x86/intel/ifs: Add stub driver for In-Field Scan)
  source "drivers/platform/x86/intel/pmc/Kconfig"
  source "drivers/platform/x86/intel/pmt/Kconfig"
  source "drivers/platform/x86/intel/speed_select_if/Kconfig"
diff --cc drivers/platform/x86/intel/Makefile
index 46eaa0c181cd,717933dd0cfd..000000000000
--- a/drivers/platform/x86/intel/Makefile
+++ b/drivers/platform/x86/intel/Makefile
@@@ -3,6 -3,11 +3,14 @@@
  # Makefile for drivers/platform/x86/intel
  # Intel x86 Platform-Specific Drivers
  #
++<<<<<<< HEAD
++=======
+ 
+ obj-$(CONFIG_INTEL_ATOMISP2_PDX86)	+= atomisp2/
+ obj-$(CONFIG_INTEL_IFS)			+= ifs/
+ obj-$(CONFIG_INTEL_SAR_INT1092)		+= int1092/
+ obj-$(CONFIG_INTEL_SKL_INT3472)		+= int3472/
++>>>>>>> 67896ef13c4d (platform/x86/intel/ifs: Add stub driver for In-Field Scan)
  obj-$(CONFIG_INTEL_PMC_CORE)		+= pmc/
  obj-$(CONFIG_INTEL_PMT_CLASS)		+= pmt/
  obj-$(CONFIG_INTEL_SPEED_SELECT_INTERFACE) += speed_select_if/
diff --git a/MAINTAINERS b/MAINTAINERS
index 930c743afed1..78876ce7c7e1 100644
--- a/MAINTAINERS
+++ b/MAINTAINERS
@@ -7521,6 +7521,13 @@ B:	https://bugzilla.kernel.org
 T:	git git://git.kernel.org/pub/scm/linux/kernel/git/lenb/linux.git
 F:	drivers/idle/intel_idle.c
 
+INTEL IN FIELD SCAN (IFS) DEVICE
+M:	Jithu Joseph <jithu.joseph@intel.com>
+R:	Ashok Raj <ashok.raj@intel.com>
+R:	Tony Luck <tony.luck@intel.com>
+S:	Maintained
+F:	drivers/platform/x86/intel/ifs
+
 INTEL INTEGRATED SENSOR HUB DRIVER
 M:	Srinivas Pandruvada <srinivas.pandruvada@linux.intel.com>
 M:	Jiri Kosina <jikos@kernel.org>
* Unmerged path drivers/platform/x86/intel/Kconfig
* Unmerged path drivers/platform/x86/intel/Makefile
diff --git a/drivers/platform/x86/intel/ifs/Kconfig b/drivers/platform/x86/intel/ifs/Kconfig
new file mode 100644
index 000000000000..d84491cfb0db
--- /dev/null
+++ b/drivers/platform/x86/intel/ifs/Kconfig
@@ -0,0 +1,13 @@
+config INTEL_IFS
+	tristate "Intel In Field Scan"
+	depends on X86 && 64BIT && SMP
+	select INTEL_IFS_DEVICE
+	help
+	  Enable support for the In Field Scan capability in select
+	  CPUs. The capability allows for running low level tests via
+	  a scan image distributed by Intel via Github to validate CPU
+	  operation beyond baseline RAS capabilities. To compile this
+	  support as a module, choose M here. The module will be called
+	  intel_ifs.
+
+	  If unsure, say N.
diff --git a/drivers/platform/x86/intel/ifs/Makefile b/drivers/platform/x86/intel/ifs/Makefile
new file mode 100644
index 000000000000..af904880e959
--- /dev/null
+++ b/drivers/platform/x86/intel/ifs/Makefile
@@ -0,0 +1,3 @@
+obj-$(CONFIG_INTEL_IFS)		+= intel_ifs.o
+
+intel_ifs-objs			:= core.o
diff --git a/drivers/platform/x86/intel/ifs/core.c b/drivers/platform/x86/intel/ifs/core.c
new file mode 100644
index 000000000000..e3623ac691b5
--- /dev/null
+++ b/drivers/platform/x86/intel/ifs/core.c
@@ -0,0 +1,48 @@
+// SPDX-License-Identifier: GPL-2.0-only
+/* Copyright(c) 2022 Intel Corporation. */
+
+#include <linux/module.h>
+#include <linux/kdev_t.h>
+
+#include <asm/cpu_device_id.h>
+
+#define X86_MATCH(model)				\
+	X86_MATCH_VENDOR_FAM_MODEL_FEATURE(INTEL, 6,	\
+		INTEL_FAM6_##model, X86_FEATURE_CORE_CAPABILITIES, NULL)
+
+static const struct x86_cpu_id ifs_cpu_ids[] __initconst = {
+	X86_MATCH(SAPPHIRERAPIDS_X),
+	{}
+};
+MODULE_DEVICE_TABLE(x86cpu, ifs_cpu_ids);
+
+static int __init ifs_init(void)
+{
+	const struct x86_cpu_id *m;
+	u64 msrval;
+
+	m = x86_match_cpu(ifs_cpu_ids);
+	if (!m)
+		return -ENODEV;
+
+	if (rdmsrl_safe(MSR_IA32_CORE_CAPS, &msrval))
+		return -ENODEV;
+
+	if (!(msrval & MSR_IA32_CORE_CAPS_INTEGRITY_CAPS))
+		return -ENODEV;
+
+	if (rdmsrl_safe(MSR_INTEGRITY_CAPS, &msrval))
+		return -ENODEV;
+
+	return 0;
+}
+
+static void __exit ifs_exit(void)
+{
+}
+
+module_init(ifs_init);
+module_exit(ifs_exit);
+
+MODULE_LICENSE("GPL");
+MODULE_DESCRIPTION("Intel In Field Scan (IFS) device");
