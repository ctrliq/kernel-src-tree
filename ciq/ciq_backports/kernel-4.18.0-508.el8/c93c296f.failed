x86/sev: Mark snp_abort() noreturn

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-508.el8
commit-author Borislav Petkov <bp@suse.de>
commit c93c296fff6b369a7115916145047c8a3db6e27f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-508.el8/c93c296f.failed

Mark both the function prototype and definition as noreturn in order to
prevent the compiler from doing transformations which confuse objtool
like so:

  vmlinux.o: warning: objtool: sme_enable+0x71: unreachable instruction

This triggers with gcc-12.

Add it and sev_es_terminate() to the objtool noreturn tracking array
too. Sort it while at it.

	Suggested-by: Michael Matz <matz@suse.de>
	Signed-off-by: Borislav Petkov <bp@suse.de>
	Acked-by: Peter Zijlstra <peterz@infradead.org>
Link: https://lore.kernel.org/r/20220824152420.20547-1-bp@alien8.de
(cherry picked from commit c93c296fff6b369a7115916145047c8a3db6e27f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/objtool/check.c
diff --cc tools/objtool/check.c
index 7ddd16cb63a1,ad51689dfb41..000000000000
--- a/tools/objtool/check.c
+++ b/tools/objtool/check.c
@@@ -141,24 -162,39 +141,52 @@@ static bool __dead_end_function(struct 
  
  	/*
  	 * Unfortunately these have to be hard coded because the noreturn
- 	 * attribute isn't provided in ELF data.
+ 	 * attribute isn't provided in ELF data. Keep 'em sorted.
  	 */
  	static const char * const global_noreturns[] = {
++<<<<<<< HEAD
 +		"__stack_chk_fail",
 +		"panic",
 +		"do_exit",
 +		"do_task_dead",
 +		"__module_put_and_exit",
 +		"complete_and_exit",
 +		"__reiserfs_panic",
 +		"lbug_with_loc",
 +		"fortify_panic",
 +		"usercopy_abort",
 +		"machine_real_restart",
 +		"rewind_stack_do_exit",
 +		"kunit_try_catch_throw",
++=======
+ 		"__invalid_creds",
+ 		"__module_put_and_kthread_exit",
+ 		"__reiserfs_panic",
+ 		"__stack_chk_fail",
+ 		"__ubsan_handle_builtin_unreachable",
+ 		"cpu_bringup_and_idle",
+ 		"cpu_startup_entry",
+ 		"do_exit",
+ 		"do_group_exit",
+ 		"do_task_dead",
+ 		"ex_handler_msr_mce",
+ 		"fortify_panic",
+ 		"kthread_complete_and_exit",
+ 		"kthread_exit",
+ 		"kunit_try_catch_throw",
+ 		"lbug_with_loc",
+ 		"machine_real_restart",
+ 		"make_task_dead",
+ 		"panic",
+ 		"rewind_stack_and_make_dead",
+ 		"sev_es_terminate",
+ 		"snp_abort",
+ 		"stop_this_cpu",
+ 		"usercopy_abort",
+ 		"xen_start_kernel",
++>>>>>>> c93c296fff6b (x86/sev: Mark snp_abort() noreturn)
  	};
  
 -	if (!func)
 -		return false;
 -
  	if (func->bind == STB_WEAK)
  		return false;
  
diff --git a/arch/x86/include/asm/sev.h b/arch/x86/include/asm/sev.h
index 19514524f0f8..009f1602b9c5 100644
--- a/arch/x86/include/asm/sev.h
+++ b/arch/x86/include/asm/sev.h
@@ -200,7 +200,7 @@ void snp_set_memory_shared(unsigned long vaddr, unsigned int npages);
 void snp_set_memory_private(unsigned long vaddr, unsigned int npages);
 void snp_set_wakeup_secondary_cpu(void);
 bool snp_init(struct boot_params *bp);
-void snp_abort(void);
+void __init __noreturn snp_abort(void);
 int snp_issue_guest_request(u64 exit_code, struct snp_req_data *input, unsigned long *fw_err);
 #else
 static inline void sev_es_ist_enter(struct pt_regs *regs) { }
diff --git a/arch/x86/kernel/sev.c b/arch/x86/kernel/sev.c
index 75847679bc4c..4964d322f47b 100644
--- a/arch/x86/kernel/sev.c
+++ b/arch/x86/kernel/sev.c
@@ -2099,7 +2099,7 @@ bool __init snp_init(struct boot_params *bp)
 	return true;
 }
 
-void __init snp_abort(void)
+void __init __noreturn snp_abort(void)
 {
 	sev_es_terminate(SEV_TERM_SET_GEN, GHCB_SNP_UNSUPPORTED);
 }
* Unmerged path tools/objtool/check.c
