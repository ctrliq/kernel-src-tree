bpf: Add BPF_PROG_TYPE_CGROUP_SKB attach type enforcement in BPF_LINK_CREATE

jira LE-2169
cve CVE-2024-38564
Rebuild_History Non-Buildable kernel-4.18.0-553.30.1.el8_10
commit-author Stanislav Fomichev <sdf@google.com>
commit 543576ec15b17c0c93301ac8297333c7b6e84ac7
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-553.30.1.el8_10/543576ec.failed

bpf_prog_attach uses attach_type_to_prog_type to enforce proper
attach type for BPF_PROG_TYPE_CGROUP_SKB. link_create uses
bpf_prog_get and relies on bpf_prog_attach_check_attach_type
to properly verify prog_type <> attach_type association.

Add missing attach_type enforcement for the link_create case.
Otherwise, it's currently possible to attach cgroup_skb prog
types to other cgroup hooks.

Fixes: af6eea57437a ("bpf: Implement bpf_link-based cgroup BPF program attachment")
Link: https://lore.kernel.org/bpf/0000000000004792a90615a1dde0@google.com/
	Reported-by: syzbot+838346b979830606c854@syzkaller.appspotmail.com
	Signed-off-by: Stanislav Fomichev <sdf@google.com>
	Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Link: https://lore.kernel.org/r/20240426231621.2716876-2-sdf@google.com
	Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>
(cherry picked from commit 543576ec15b17c0c93301ac8297333c7b6e84ac7)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/bpf/syscall.c
diff --cc kernel/bpf/syscall.c
index bcb1bfb2cabc,cb61d8880dbe..000000000000
--- a/kernel/bpf/syscall.c
+++ b/kernel/bpf/syscall.c
@@@ -3059,10 -3968,82 +3059,84 @@@ attach_type_to_prog_type(enum bpf_attac
  	}
  }
  
 -static int bpf_prog_attach_check_attach_type(const struct bpf_prog *prog,
 -					     enum bpf_attach_type attach_type)
 -{
 -	enum bpf_prog_type ptype;
 +#define BPF_PROG_ATTACH_LAST_FIELD replace_bpf_fd
  
++<<<<<<< HEAD
 +#define BPF_F_ATTACH_MASK \
 +	(BPF_F_ALLOW_OVERRIDE | BPF_F_ALLOW_MULTI | BPF_F_REPLACE)
++=======
+ 	switch (prog->type) {
+ 	case BPF_PROG_TYPE_CGROUP_SOCK:
+ 	case BPF_PROG_TYPE_CGROUP_SOCK_ADDR:
+ 	case BPF_PROG_TYPE_CGROUP_SOCKOPT:
+ 	case BPF_PROG_TYPE_SK_LOOKUP:
+ 		return attach_type == prog->expected_attach_type ? 0 : -EINVAL;
+ 	case BPF_PROG_TYPE_CGROUP_SKB:
+ 		if (!bpf_token_capable(prog->aux->token, CAP_NET_ADMIN))
+ 			/* cg-skb progs can be loaded by unpriv user.
+ 			 * check permissions at attach time.
+ 			 */
+ 			return -EPERM;
+ 
+ 		ptype = attach_type_to_prog_type(attach_type);
+ 		if (prog->type != ptype)
+ 			return -EINVAL;
+ 
+ 		return prog->enforce_expected_attach_type &&
+ 			prog->expected_attach_type != attach_type ?
+ 			-EINVAL : 0;
+ 	case BPF_PROG_TYPE_EXT:
+ 		return 0;
+ 	case BPF_PROG_TYPE_NETFILTER:
+ 		if (attach_type != BPF_NETFILTER)
+ 			return -EINVAL;
+ 		return 0;
+ 	case BPF_PROG_TYPE_PERF_EVENT:
+ 	case BPF_PROG_TYPE_TRACEPOINT:
+ 		if (attach_type != BPF_PERF_EVENT)
+ 			return -EINVAL;
+ 		return 0;
+ 	case BPF_PROG_TYPE_KPROBE:
+ 		if (prog->expected_attach_type == BPF_TRACE_KPROBE_MULTI &&
+ 		    attach_type != BPF_TRACE_KPROBE_MULTI)
+ 			return -EINVAL;
+ 		if (prog->expected_attach_type == BPF_TRACE_UPROBE_MULTI &&
+ 		    attach_type != BPF_TRACE_UPROBE_MULTI)
+ 			return -EINVAL;
+ 		if (attach_type != BPF_PERF_EVENT &&
+ 		    attach_type != BPF_TRACE_KPROBE_MULTI &&
+ 		    attach_type != BPF_TRACE_UPROBE_MULTI)
+ 			return -EINVAL;
+ 		return 0;
+ 	case BPF_PROG_TYPE_SCHED_CLS:
+ 		if (attach_type != BPF_TCX_INGRESS &&
+ 		    attach_type != BPF_TCX_EGRESS &&
+ 		    attach_type != BPF_NETKIT_PRIMARY &&
+ 		    attach_type != BPF_NETKIT_PEER)
+ 			return -EINVAL;
+ 		return 0;
+ 	default:
+ 		ptype = attach_type_to_prog_type(attach_type);
+ 		if (ptype == BPF_PROG_TYPE_UNSPEC || ptype != prog->type)
+ 			return -EINVAL;
+ 		return 0;
+ 	}
+ }
+ 
+ #define BPF_PROG_ATTACH_LAST_FIELD expected_revision
+ 
+ #define BPF_F_ATTACH_MASK_BASE	\
+ 	(BPF_F_ALLOW_OVERRIDE |	\
+ 	 BPF_F_ALLOW_MULTI |	\
+ 	 BPF_F_REPLACE)
+ 
+ #define BPF_F_ATTACH_MASK_MPROG	\
+ 	(BPF_F_REPLACE |	\
+ 	 BPF_F_BEFORE |		\
+ 	 BPF_F_AFTER |		\
+ 	 BPF_F_ID |		\
+ 	 BPF_F_LINK)
++>>>>>>> 543576ec15b1 (bpf: Add BPF_PROG_TYPE_CGROUP_SKB attach type enforcement in BPF_LINK_CREATE)
  
  static int bpf_prog_attach(const union bpf_attr *attr)
  {
* Unmerged path kernel/bpf/syscall.c
