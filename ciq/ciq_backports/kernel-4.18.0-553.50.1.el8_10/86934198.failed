gfs2: Clear flags when withdraw prevents xmote

jira LE-2815
Rebuild_History Non-Buildable kernel-4.18.0-553.50.1.el8_10
commit-author Bob Peterson <rpeterso@redhat.com>
commit 86934198eefa10a71f35162b06c44c36d85b98ba
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-553.50.1.el8_10/86934198.failed

There are a couple places in function do_xmote where normal processing
is circumvented due to withdraws in progress. However, since we bypass
most of do_xmote() we bypass telling dlm to lock the dlm lock, which
means dlm will never respond with a completion callback. Since the
completion callback ordinarily clears GLF_LOCK, this patch changes
function do_xmote to handle those situations more gracefully so the
file system may be unmounted after withdraw.

A very similar situation happens with the GLF_DEMOTE_IN_PROGRESS flag,
which is cleared by function finish_xmote(). Since the withdraw causes
us to skip the majority of do_xmote, it therefore also skips the call
to finish_xmote() so the DEMOTE_IN_PROGRESS flag needs to be cleared
manually.

	Signed-off-by: Bob Peterson <rpeterso@redhat.com>
	Signed-off-by: Andreas Gruenbacher <agruenba@redhat.com>
(cherry picked from commit 86934198eefa10a71f35162b06c44c36d85b98ba)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/gfs2/glock.c
diff --cc fs/gfs2/glock.c
index 5dc035ea3dca,dca2cbf0338c..000000000000
--- a/fs/gfs2/glock.c
+++ b/fs/gfs2/glock.c
@@@ -62,8 -58,13 +62,14 @@@ struct gfs2_glock_iter 
  typedef void (*glock_examiner) (struct gfs2_glock * gl);
  
  static void do_xmote(struct gfs2_glock *gl, struct gfs2_holder *gh, unsigned int target);
++<<<<<<< HEAD
++=======
+ static void __gfs2_glock_dq(struct gfs2_holder *gh);
+ static void handle_callback(struct gfs2_glock *gl, unsigned int state,
+ 			    unsigned long delay, bool remote);
++>>>>>>> 86934198eefa (gfs2: Clear flags when withdraw prevents xmote)
  
  static struct dentry *gfs2_root;
 -static struct workqueue_struct *glock_workqueue;
 -struct workqueue_struct *gfs2_delete_workqueue;
  static LIST_HEAD(lru_list);
  static atomic_t lru_count = ATOMIC_INIT(0);
  static DEFINE_SPINLOCK(lru_lock);
* Unmerged path fs/gfs2/glock.c
