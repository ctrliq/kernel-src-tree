gfs2: Replace GIF_DEFER_DELETE with GLF_DEFER_DELETE

jira LE-2815
Rebuild_History Non-Buildable kernel-4.18.0-553.50.1.el8_10
commit-author Andreas Gruenbacher <agruenba@redhat.com>
commit 3774f53d7f0b30a996eab4a1264611489b48f14c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-553.50.1.el8_10/3774f53d.failed

Having this flag attached to the iopen glock instead of the inode is
much simpler; it eliminates a protential weird race in gfs2_try_evict().

	Signed-off-by: Andreas Gruenbacher <agruenba@redhat.com>
(cherry picked from commit 3774f53d7f0b30a996eab4a1264611489b48f14c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/gfs2/incore.h
diff --cc fs/gfs2/incore.h
index d242e1596a57,40e66b46718b..000000000000
--- a/fs/gfs2/incore.h
+++ b/fs/gfs2/incore.h
@@@ -334,6 -330,8 +334,11 @@@ enum 
  	GLF_UNLOCKED			= 16, /* Wait for glock to be unlocked */
  	GLF_TRY_TO_EVICT		= 17, /* iopen glocks only */
  	GLF_VERIFY_DELETE		= 18, /* iopen glocks only */
++<<<<<<< HEAD
++=======
+ 	GLF_PENDING_REPLY		= 19,
+ 	GLF_DEFER_DELETE		= 20, /* iopen glocks only */
++>>>>>>> 3774f53d7f0b (gfs2: Replace GIF_DEFER_DELETE with GLF_DEFER_DELETE)
  };
  
  struct gfs2_glock {
@@@ -380,10 -376,8 +385,9 @@@ enum 
  	GIF_QD_LOCKED		= 1,
  	GIF_ALLOC_FAILED	= 2,
  	GIF_SW_PAGED		= 3,
 +	GIF_ORDERED		= 4,
  	GIF_FREE_VFS_INODE      = 5,
  	GIF_GLOP_PENDING	= 6,
- 	GIF_DEFER_DELETE	= 7,
  };
  
  struct gfs2_inode {
diff --git a/fs/gfs2/glock.c b/fs/gfs2/glock.c
index 5dc035ea3dca..e95a5d284971 100644
--- a/fs/gfs2/glock.c
+++ b/fs/gfs2/glock.c
@@ -976,15 +976,15 @@ static void gfs2_try_evict(struct gfs2_glock *gl)
 		}
 	}
 	if (ip) {
-		set_bit(GIF_DEFER_DELETE, &ip->i_flags);
+		set_bit(GLF_DEFER_DELETE, &gl->gl_flags);
 		d_prune_aliases(&ip->i_inode);
 		iput(&ip->i_inode);
+		clear_bit(GLF_DEFER_DELETE, &gl->gl_flags);
 
 		/* If the inode was evicted, gl->gl_object will now be NULL. */
 		spin_lock(&gl->gl_lockref.lock);
 		ip = gl->gl_object;
 		if (ip) {
-			clear_bit(GIF_DEFER_DELETE, &ip->i_flags);
 			if (!igrab(&ip->i_inode))
 				ip = NULL;
 		}
@@ -2328,6 +2328,8 @@ static const char *gflags2str(char *buf, const struct gfs2_glock *gl)
 		*p++ = 'e';
 	if (test_bit(GLF_VERIFY_DELETE, gflags))
 		*p++ = 'E';
+	if (test_bit(GLF_DEFER_DELETE, gflags))
+		*p++ = 's';
 	*p = 0;
 	return buf;
 }
* Unmerged path fs/gfs2/incore.h
diff --git a/fs/gfs2/super.c b/fs/gfs2/super.c
index ab6dba97d184..7747db721a2a 100644
--- a/fs/gfs2/super.c
+++ b/fs/gfs2/super.c
@@ -1361,7 +1361,8 @@ static enum evict_behavior evict_should_delete(struct inode *inode,
 	if (unlikely(test_bit(GIF_ALLOC_FAILED, &ip->i_flags)))
 		goto should_delete;
 
-	if (test_bit(GIF_DEFER_DELETE, &ip->i_flags))
+	if (gfs2_holder_initialized(&ip->i_iopen_gh) &&
+	    test_bit(GLF_DEFER_DELETE, &ip->i_iopen_gh.gh_gl->gl_flags))
 		return EVICT_SHOULD_DEFER_DELETE;
 
 	/* Deletes should never happen under memory pressure anymore.  */
diff --git a/fs/gfs2/trace_gfs2.h b/fs/gfs2/trace_gfs2.h
index ac8ca485c46f..3c4590f404f4 100644
--- a/fs/gfs2/trace_gfs2.h
+++ b/fs/gfs2/trace_gfs2.h
@@ -63,7 +63,8 @@
 	{(1UL << GLF_INSTANTIATE_NEEDED),	"n" },		\
 	{(1UL << GLF_INSTANTIATE_IN_PROG),	"N" },		\
 	{(1UL << GLF_TRY_TO_EVICT),		"e" },		\
-	{(1UL << GLF_VERIFY_DELETE),		"E" })
+	{(1UL << GLF_VERIFY_DELETE),		"E" },		\
+	{(1UL << GLF_DEFER_DELETE),		"s" })
 
 #ifndef NUMPTY
 #define NUMPTY
