ext4: add EXT4_IGET_BAD flag to prevent unexpected bad inode

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-527.el8
commit-author Baokun Li <libaokun1@huawei.com>
commit 63b1e9bccb71fe7d7e3ddc9877dbdc85e5d2d023
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-527.el8/63b1e9bc.failed

There are many places that will get unhappy (and crash) when ext4_iget()
returns a bad inode. However, if iget the boot loader inode, allows a bad
inode to be returned, because the inode may not be initialized. This
mechanism can be used to bypass some checks and cause panic. To solve this
problem, we add a special iget flag EXT4_IGET_BAD. Only with this flag
we'd be returning bad inode from ext4_iget(), otherwise we always return
the error code if the inode is bad inode.(suggested by Jan Kara)

	Signed-off-by: Baokun Li <libaokun1@huawei.com>
	Reviewed-by: Jason Yan <yanaijie@huawei.com>
	Reviewed-by: Jan Kara <jack@suse.cz>
Link: https://lore.kernel.org/r/20221026042310.3839669-4-libaokun1@huawei.com
	Signed-off-by: Theodore Ts'o <tytso@mit.edu>
	Cc: stable@kernel.org
(cherry picked from commit 63b1e9bccb71fe7d7e3ddc9877dbdc85e5d2d023)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/ext4/inode.c
diff --cc fs/ext4/inode.c
index 2d0941b7053e,a4bf643aa08b..000000000000
--- a/fs/ext4/inode.c
+++ b/fs/ext4/inode.c
@@@ -5164,8 -5055,17 +5164,21 @@@ struct inode *__ext4_iget(struct super_
  				 "iget: bogus i_mode (%o)", inode->i_mode);
  		goto bad_inode;
  	}
++<<<<<<< HEAD
 +	brelse(iloc.bh);
++=======
+ 	if (IS_CASEFOLDED(inode) && !ext4_has_feature_casefold(inode->i_sb))
+ 		ext4_error_inode(inode, function, line, 0,
+ 				 "casefold flag without casefold feature");
+ 	if (is_bad_inode(inode) && !(flags & EXT4_IGET_BAD)) {
+ 		ext4_error_inode(inode, function, line, 0,
+ 				 "bad inode without EXT4_IGET_BAD flag");
+ 		ret = -EUCLEAN;
+ 		goto bad_inode;
+ 	}
++>>>>>>> 63b1e9bccb71 (ext4: add EXT4_IGET_BAD flag to prevent unexpected bad inode)
  
+ 	brelse(iloc.bh);
  	unlock_new_inode(inode);
  	return inode;
  
diff --git a/fs/ext4/ext4.h b/fs/ext4/ext4.h
index b9572b248929..88cc13fb7b29 100644
--- a/fs/ext4/ext4.h
+++ b/fs/ext4/ext4.h
@@ -2549,7 +2549,8 @@ int do_journal_get_write_access(handle_t *handle,
 typedef enum {
 	EXT4_IGET_NORMAL =	0,
 	EXT4_IGET_SPECIAL =	0x0001, /* OK to iget a system inode */
-	EXT4_IGET_HANDLE = 	0x0002	/* Inode # is from a handle */
+	EXT4_IGET_HANDLE = 	0x0002,	/* Inode # is from a handle */
+	EXT4_IGET_BAD =		0x0004  /* Allow to iget a bad inode */
 } ext4_iget_flags;
 
 extern struct inode *__ext4_iget(struct super_block *sb, unsigned long ino,
* Unmerged path fs/ext4/inode.c
diff --git a/fs/ext4/ioctl.c b/fs/ext4/ioctl.c
index 13f14ea35f73..4719d9e2d412 100644
--- a/fs/ext4/ioctl.c
+++ b/fs/ext4/ioctl.c
@@ -121,7 +121,8 @@ static long swap_inode_boot_loader(struct super_block *sb,
 	blkcnt_t blocks;
 	unsigned short bytes;
 
-	inode_bl = ext4_iget(sb, EXT4_BOOT_LOADER_INO, EXT4_IGET_SPECIAL);
+	inode_bl = ext4_iget(sb, EXT4_BOOT_LOADER_INO,
+			EXT4_IGET_SPECIAL | EXT4_IGET_BAD);
 	if (IS_ERR(inode_bl))
 		return PTR_ERR(inode_bl);
 	ei_bl = EXT4_I(inode_bl);
