fs/iomap: Fix buffered write page prefaulting

jira LE-1907
Rebuild_History Non-Buildable kernel-rt-4.18.0-372.16.1.rt7.173.el8_6
commit-author Andreas Gruenbacher <agruenba@redhat.com>
commit 631f871f071746789e9242e514ab0f49067fa97a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-rt-4.18.0-372.16.1.rt7.173.el8_6/631f871f.failed

When part of the user buffer passed to generic_perform_write() or
iomap_file_buffered_write() cannot be faulted in for reading, the entire
write currently fails.  The correct behavior would be to write all the
data that can be written, up to the point of failure.

Commit a6294593e8a1 ("iov_iter: Turn iov_iter_fault_in_readable into
fault_in_iov_iter_readable") gave us the information needed, so fix the
page prefaulting in generic_perform_write() and iomap_write_iter() to
only bail out when no pages could be faulted in.

We already factor in that pages that are faulted in may no longer be
resident by the time they are accessed.  Paging out pages has the same
effect as not faulting in those pages in the first place, so the code
can already deal with that.

	Signed-off-by: Andreas Gruenbacher <agruenba@redhat.com>
	Reviewed-by: Catalin Marinas <catalin.marinas@arm.com>
	Reviewed-by: Christoph Hellwig <hch@lst.de>
(cherry picked from commit 631f871f071746789e9242e514ab0f49067fa97a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/iomap/buffered-io.c
#	mm/filemap.c
diff --cc fs/iomap/buffered-io.c
index f9f2edefbc52,54516ab464cd..000000000000
--- a/fs/iomap/buffered-io.c
+++ b/fs/iomap/buffered-io.c
@@@ -850,7 -750,7 +850,11 @@@ again
  		 * same page as we're writing to, without it being marked
  		 * up-to-date.
  		 */
++<<<<<<< HEAD
 +		if (unlikely(iov_iter_fault_in_readable(i, bytes))) {
++=======
+ 		if (unlikely(fault_in_iov_iter_readable(i, bytes) == bytes)) {
++>>>>>>> 631f871f0717 (fs/iomap: Fix buffered write page prefaulting)
  			status = -EFAULT;
  			break;
  		}
diff --cc mm/filemap.c
index 8fda541f64fb,767202265048..000000000000
--- a/mm/filemap.c
+++ b/mm/filemap.c
@@@ -3379,7 -3743,7 +3379,11 @@@ again
  		 * same page as we're writing to, without it being marked
  		 * up-to-date.
  		 */
++<<<<<<< HEAD
 +		if (unlikely(iov_iter_fault_in_readable(i, bytes))) {
++=======
+ 		if (unlikely(fault_in_iov_iter_readable(i, bytes) == bytes)) {
++>>>>>>> 631f871f0717 (fs/iomap: Fix buffered write page prefaulting)
  			status = -EFAULT;
  			break;
  		}
* Unmerged path fs/iomap/buffered-io.c
* Unmerged path mm/filemap.c
