gfs2: Don't re-check for write past EOF unnecessarily

jira LE-1907
Rebuild_History Non-Buildable kernel-rt-4.18.0-372.16.1.rt7.173.el8_6
commit-author Andreas Gruenbacher <agruenba@redhat.com>
commit e57f9af73d6b0ffb5f1aeaf6cec9a751dd8535c9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-rt-4.18.0-372.16.1.rt7.173.el8_6/e57f9af7.failed

Only re-check for direct I/O writes past the end of the file after
re-acquiring the inode glock.

	Signed-off-by: Andreas Gruenbacher <agruenba@redhat.com>
(cherry picked from commit e57f9af73d6b0ffb5f1aeaf6cec9a751dd8535c9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/gfs2/file.c
diff --cc fs/gfs2/file.c
index 37f4489b53a0,8d889235afcd..000000000000
--- a/fs/gfs2/file.c
+++ b/fs/gfs2/file.c
@@@ -840,19 -898,42 +840,23 @@@ static ssize_t gfs2_file_direct_write(s
  	ret = gfs2_glock_nq(gh);
  	if (ret)
  		goto out_uninit;
++<<<<<<< HEAD
 +
++=======
++>>>>>>> e57f9af73d6b (gfs2: Don't re-check for write past EOF unnecessarily)
  	/* Silently fall back to buffered I/O when writing beyond EOF */
 -	if (iocb->ki_pos + iov_iter_count(from) > i_size_read(&ip->i_inode))
 +	if (offset + len > i_size_read(&ip->i_inode))
  		goto out;
+ retry_under_glock:
  
 -	from->nofault = true;
 -	ret = iomap_dio_rw(iocb, from, &gfs2_iomap_ops, NULL,
 -			   IOMAP_DIO_PARTIAL, read);
 -	from->nofault = false;
 -
 +	ret = iomap_dio_rw(iocb, from, &gfs2_iomap_ops, NULL, 0);
  	if (ret == -ENOTBLK)
  		ret = 0;
 -	if (ret > 0)
 -		read = ret;
 -
 -	if (should_fault_in_pages(ret, from, &prev_count, &window_size)) {
 -		size_t leftover;
 -
 -		gfs2_holder_allow_demote(gh);
 -		leftover = fault_in_iov_iter_readable(from, window_size);
 -		gfs2_holder_disallow_demote(gh);
 -		if (leftover != window_size) {
 -			if (gfs2_holder_queued(gh))
 -				goto retry_under_glock;
 -			goto retry;
 -		}
 -	}
  out:
 -	if (gfs2_holder_queued(gh))
 -		gfs2_glock_dq(gh);
 +	gfs2_glock_dq(gh);
  out_uninit:
  	gfs2_holder_uninit(gh);
 -	if (ret < 0)
 -		return ret;
 -	return read;
 +	return ret;
  }
  
  static ssize_t gfs2_file_read_iter(struct kiocb *iocb, struct iov_iter *to)
* Unmerged path fs/gfs2/file.c
