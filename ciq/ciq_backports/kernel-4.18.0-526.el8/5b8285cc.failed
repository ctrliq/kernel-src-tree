net: move dropreason.h to dropreason-core.h

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-526.el8
commit-author Johannes Berg <johannes.berg@intel.com>
commit 5b8285cca6fed9bc5baabe2e5699a5a5c0d96371
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-526.el8/5b8285cc.failed

This will, after the next patch, hold only the core
drop reasons and minimal infrastructure. Fix a small
kernel-doc issue while at it, to avoid the move
triggering a checker.

	Signed-off-by: Johannes Berg <johannes.berg@intel.com>
	Signed-off-by: Jakub Kicinski <kuba@kernel.org>
(cherry picked from commit 5b8285cca6fed9bc5baabe2e5699a5a5c0d96371)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/netdevice.h
#	include/linux/skbuff.h
#	include/net/inet_frag.h
diff --cc include/linux/netdevice.h
index 7839fc19e354,a6a3e9457d6c..000000000000
--- a/include/linux/netdevice.h
+++ b/include/linux/netdevice.h
@@@ -52,9 -47,12 +52,16 @@@
  #include <uapi/linux/netdevice.h>
  #include <uapi/linux/if_bonding.h>
  #include <uapi/linux/pkt_cls.h>
 -#include <uapi/linux/netdev.h>
  #include <linux/hashtable.h>
++<<<<<<< HEAD
 +
 +#include <linux/rh_kabi.h>
++=======
+ #include <linux/rbtree.h>
+ #include <net/net_trackers.h>
+ #include <net/net_debug.h>
+ #include <net/dropreason-core.h>
++>>>>>>> 5b8285cca6fe (net: move dropreason.h to dropreason-core.h)
  
  struct netpoll_info;
  struct device;
diff --cc include/linux/skbuff.h
index f8604f48e933,eb9e7bb76fa6..000000000000
--- a/include/linux/skbuff.h
+++ b/include/linux/skbuff.h
@@@ -26,71 -23,81 +26,80 @@@
  #include <linux/atomic.h>
  #include <asm/types.h>
  #include <linux/spinlock.h>
 +#include <linux/net.h>
 +#include <linux/textsearch.h>
  #include <net/checksum.h>
  #include <linux/rcupdate.h>
 +#include <linux/hrtimer.h>
  #include <linux/dma-mapping.h>
  #include <linux/netdev_features.h>
 +#include <linux/sched.h>
 +#include <linux/sched/clock.h>
  #include <net/flow_dissector.h>
 +#include <linux/splice.h>
  #include <linux/in6.h>
  #include <linux/if_packet.h>
 -#include <linux/llist.h>
  #include <net/flow.h>
++<<<<<<< HEAD
 +#include <net/dropreason.h>
++=======
+ #include <net/page_pool.h>
+ #if IS_ENABLED(CONFIG_NF_CONNTRACK)
+ #include <linux/netfilter/nf_conntrack_common.h>
+ #endif
+ #include <net/net_debug.h>
+ #include <net/dropreason-core.h>
++>>>>>>> 5b8285cca6fe (net: move dropreason.h to dropreason-core.h)
  
 -/**
 - * DOC: skb checksums
 - *
 - * The interface for checksum offload between the stack and networking drivers
 +#include <linux/rh_kabi.h>
 +
 +/* The interface for checksum offload between the stack and networking drivers
   * is as follows...
   *
 - * IP checksum related features
 - * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 + * A. IP checksum related features
   *
   * Drivers advertise checksum offload capabilities in the features of a device.
 - * From the stack's point of view these are capabilities offered by the driver.
 - * A driver typically only advertises features that it is capable of offloading
 + * From the stack's point of view these are capabilities offered by the driver,
 + * a driver typically only advertises features that it is capable of offloading
   * to its device.
   *
 - * .. flat-table:: Checksum related device features
 - *   :widths: 1 10
 - *
 - *   * - %NETIF_F_HW_CSUM
 - *     - The driver (or its device) is able to compute one
 - *	 IP (one's complement) checksum for any combination
 - *	 of protocols or protocol layering. The checksum is
 - *	 computed and set in a packet per the CHECKSUM_PARTIAL
 - *	 interface (see below).
 - *
 - *   * - %NETIF_F_IP_CSUM
 - *     - Driver (device) is only able to checksum plain
 - *	 TCP or UDP packets over IPv4. These are specifically
 - *	 unencapsulated packets of the form IPv4|TCP or
 - *	 IPv4|UDP where the Protocol field in the IPv4 header
 - *	 is TCP or UDP. The IPv4 header may contain IP options.
 - *	 This feature cannot be set in features for a device
 - *	 with NETIF_F_HW_CSUM also set. This feature is being
 - *	 DEPRECATED (see below).
 - *
 - *   * - %NETIF_F_IPV6_CSUM
 - *     - Driver (device) is only able to checksum plain
 - *	 TCP or UDP packets over IPv6. These are specifically
 - *	 unencapsulated packets of the form IPv6|TCP or
 - *	 IPv6|UDP where the Next Header field in the IPv6
 - *	 header is either TCP or UDP. IPv6 extension headers
 - *	 are not supported with this feature. This feature
 - *	 cannot be set in features for a device with
 - *	 NETIF_F_HW_CSUM also set. This feature is being
 - *	 DEPRECATED (see below).
 - *
 - *   * - %NETIF_F_RXCSUM
 - *     - Driver (device) performs receive checksum offload.
 - *	 This flag is only used to disable the RX checksum
 - *	 feature for a device. The stack will accept receive
 - *	 checksum indication in packets received on a device
 - *	 regardless of whether NETIF_F_RXCSUM is set.
 - *
 - * Checksumming of received packets by device
 - * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 - *
 - * Indication of checksum verification is set in &sk_buff.ip_summed.
 - * Possible values are:
 - *
 - * - %CHECKSUM_NONE
 + * The checksum related features are:
 + *
 + *	NETIF_F_HW_CSUM	- The driver (or its device) is able to compute one
 + *			  IP (one's complement) checksum for any combination
 + *			  of protocols or protocol layering. The checksum is
 + *			  computed and set in a packet per the CHECKSUM_PARTIAL
 + *			  interface (see below).
 + *
 + *	NETIF_F_IP_CSUM - Driver (device) is only able to checksum plain
 + *			  TCP or UDP packets over IPv4. These are specifically
 + *			  unencapsulated packets of the form IPv4|TCP or
 + *			  IPv4|UDP where the Protocol field in the IPv4 header
 + *			  is TCP or UDP. The IPv4 header may contain IP options
 + *			  This feature cannot be set in features for a device
 + *			  with NETIF_F_HW_CSUM also set. This feature is being
 + *			  DEPRECATED (see below).
 + *
 + *	NETIF_F_IPV6_CSUM - Driver (device) is only able to checksum plain
 + *			  TCP or UDP packets over IPv6. These are specifically
 + *			  unencapsulated packets of the form IPv6|TCP or
 + *			  IPv4|UDP where the Next Header field in the IPv6
 + *			  header is either TCP or UDP. IPv6 extension headers
 + *			  are not supported with this feature. This feature
 + *			  cannot be set in features for a device with
 + *			  NETIF_F_HW_CSUM also set. This feature is being
 + *			  DEPRECATED (see below).
 + *
 + *	NETIF_F_RXCSUM - Driver (device) performs receive checksum offload.
 + *			 This flag is used only used to disable the RX checksum
 + *			 feature for a device. The stack will accept receive
 + *			 checksum indication in packets received on a device
 + *			 regardless of whether NETIF_F_RXCSUM is set.
 + *
 + * B. Checksumming of received packets by device. Indication of checksum
 + *    verification is in set skb->ip_summed. Possible values are:
 + *
 + * CHECKSUM_NONE:
   *
   *   Device did not checksum this packet e.g. due to lack of capabilities.
   *   The packet contains full (though not verified) checksum in packet but
diff --cc include/net/inet_frag.h
index 8acbef8002dd,325ad893f624..000000000000
--- a/include/net/inet_frag.h
+++ b/include/net/inet_frag.h
@@@ -3,9 -3,14 +3,17 @@@
  #define __NET_FRAG_H__
  
  #include <linux/rhashtable-types.h>
++<<<<<<< HEAD
 +#include <net/dropreason.h>
++=======
+ #include <linux/completion.h>
+ #include <linux/in6.h>
+ #include <linux/rbtree_types.h>
+ #include <linux/refcount.h>
+ #include <net/dropreason-core.h>
++>>>>>>> 5b8285cca6fe (net: move dropreason.h to dropreason-core.h)
  
 -/* Per netns frag queues directory */
 -struct fqdir {
 +struct netns_frags {
  	/* sysctls */
  	long			high_thresh;
  	long			low_thresh;
* Unmerged path include/linux/netdevice.h
* Unmerged path include/linux/skbuff.h
diff --git a/include/net/dropreason.h b/include/net/dropreason-core.h
similarity index 98%
rename from include/net/dropreason.h
rename to include/net/dropreason-core.h
index c0a3ea806cd5..ade6d5b9186c 100644
--- a/include/net/dropreason.h
+++ b/include/net/dropreason-core.h
@@ -1,7 +1,7 @@
 /* SPDX-License-Identifier: GPL-2.0-or-later */
 
-#ifndef _LINUX_DROPREASON_H
-#define _LINUX_DROPREASON_H
+#ifndef _LINUX_DROPREASON_CORE_H
+#define _LINUX_DROPREASON_CORE_H
 
 #define DEFINE_DROP_REASON(FN, FNe)	\
 	FN(NOT_SPECIFIED)		\
@@ -334,7 +334,8 @@ enum skb_drop_reason {
 	SKB_DROP_REASON_IPV6_NDISC_BAD_CODE,
 	/** @SKB_DROP_REASON_IPV6_NDISC_BAD_OPTIONS: invalid NDISC options. */
 	SKB_DROP_REASON_IPV6_NDISC_BAD_OPTIONS,
-	/** @SKB_DROP_REASON_IPV6_NDISC_NS_OTHERHOST: NEIGHBOUR SOLICITATION
+	/**
+	 * @SKB_DROP_REASON_IPV6_NDISC_NS_OTHERHOST: NEIGHBOUR SOLICITATION
 	 * for another host.
 	 */
 	SKB_DROP_REASON_IPV6_NDISC_NS_OTHERHOST,
* Unmerged path include/net/inet_frag.h
