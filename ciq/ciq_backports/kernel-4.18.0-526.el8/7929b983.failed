docs: Remove :c:func: from process/deprecated.rst

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-526.el8
commit-author Jonathan Corbet <corbet@lwn.net>
commit 7929b9836ed0d7c051eed9f223f0f815454c5210
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-526.el8/7929b983.failed

Documentation/process/deprecated.rst has a lot of uses of :c:func:, which
is, well, deprecated.  Emacs query-replace-regexp to the rescue.

	Signed-off-by: Jonathan Corbet <corbet@lwn.net>
(cherry picked from commit 7929b9836ed0d7c051eed9f223f0f815454c5210)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	Documentation/process/deprecated.rst
diff --cc Documentation/process/deprecated.rst
index 0ef5a63c06ba,e924d3197761..000000000000
--- a/Documentation/process/deprecated.rst
+++ b/Documentation/process/deprecated.rst
@@@ -91,22 -93,44 +91,28 @@@ will be NUL terminated. This can lead t
  and other misbehavior due to the missing termination. It also NUL-pads the
  destination buffer if the source contents are shorter than the destination
  buffer size, which may be a needless performance penalty for callers using
++<<<<<<< HEAD
 +only NUL-terminated strings. The safe replacement is :c:func:`strscpy`.
 +(Users of :c:func:`strscpy` still needing NUL-padding will need an
 +explicit :c:func:`memset` added.)
++=======
+ only NUL-terminated strings. The safe replacement is strscpy().
+ (Users of strscpy() still needing NUL-padding should instead
+ use strscpy_pad().)
++>>>>>>> 7929b9836ed0 (docs: Remove :c:func: from process/deprecated.rst)
  
- If a caller is using non-NUL-terminated strings, :c:func:`strncpy()` can
+ If a caller is using non-NUL-terminated strings, strncpy()() can
  still be used, but destinations should be marked with the `__nonstring
  <https://gcc.gnu.org/onlinedocs/gcc/Common-Variable-Attributes.html>`_
  attribute to avoid future compiler warnings.
  
  strlcpy()
  ---------
- :c:func:`strlcpy` reads the entire source buffer first, possibly exceeding
+ strlcpy() reads the entire source buffer first, possibly exceeding
  the given limit of bytes to copy. This is inefficient and can lead to
  linear read overflows if a source string is not NUL-terminated. The
- safe replacement is :c:func:`strscpy`.
+ safe replacement is strscpy().
  
 -%p format specifier
 --------------------
 -Traditionally, using "%p" in format strings would lead to regular address
 -exposure flaws in dmesg, proc, sysfs, etc. Instead of leaving these to
 -be exploitable, all "%p" uses in the kernel are being printed as a hashed
 -value, rendering them unusable for addressing. New uses of "%p" should not
 -be added to the kernel. For text addresses, using "%pS" is likely better,
 -as it produces the more useful symbol name instead. For nearly everything
 -else, just do not add "%p" at all.
 -
 -Paraphrasing Linus's current `guidance <https://lore.kernel.org/lkml/CA+55aFwQEd_d40g4mUCSsVRZzrFPUJt74vc6PPpb675hYNXcKw@mail.gmail.com/>`_:
 -
 -- If the hashed "%p" value is pointless, ask yourself whether the pointer
 -  itself is important. Maybe it should be removed entirely?
 -- If you really think the true pointer value is important, why is some
 -  system state or user privilege level considered "special"? If you think
 -  you can justify it (in comments and commit log) well enough to stand
 -  up to Linus's scrutiny, maybe you can use "%px", along with making sure
 -  you have sensible permissions.
 -
 -And finally, know that a toggle for "%p" hashing will `not be accepted <https://lore.kernel.org/lkml/CA+55aFwieC1-nAs+NFq9RTwaR8ef9hWa4MjNBWL41F-8wM49eA@mail.gmail.com/>`_.
 -
  Variable Length Arrays (VLAs)
  -----------------------------
  Using stack VLAs produces much worse machine code than statically
* Unmerged path Documentation/process/deprecated.rst
