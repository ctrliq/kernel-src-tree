rbd: take header_rwsem in rbd_dev_refresh() only when updating

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-517.el8
commit-author Ilya Dryomov <idryomov@gmail.com>
commit 0b207d02bd9ab8dcc31b262ca9f60dbc1822500d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-517.el8/0b207d02.failed

rbd_dev_refresh() has been holding header_rwsem across header and
parent info read-in unnecessarily for ages.  With commit 870611e4877e
("rbd: get snapshot context after exclusive lock is ensured to be
held"), the potential for deadlocks became much more real owning to
a) header_rwsem now nesting inside lock_rwsem and b) rw_semaphores
not allowing new readers after a writer is registered.

For example, assuming that I/O request 1, I/O request 2 and header
read-in request all target the same OSD:

1. I/O request 1 comes in and gets submitted
2. watch error occurs
3. rbd_watch_errcb() takes lock_rwsem for write, clears owner_cid and
   releases lock_rwsem
4. after reestablishing the watch, rbd_reregister_watch() calls
   rbd_dev_refresh() which takes header_rwsem for write and submits
   a header read-in request
5. I/O request 2 comes in: after taking lock_rwsem for read in
   __rbd_img_handle_request(), it blocks trying to take header_rwsem
   for read in rbd_img_object_requests()
6. another watch error occurs
7. rbd_watch_errcb() blocks trying to take lock_rwsem for write
8. I/O request 1 completion is received by the messenger but can't be
   processed because lock_rwsem won't be granted anymore
9. header read-in request completion can't be received, let alone
   processed, because the messenger is stranded

Change rbd_dev_refresh() to take header_rwsem only for actually
updating rbd_dev->header.  Header and parent info read-in don't need
any locking.

	Cc: stable@vger.kernel.org # 0b035401c570: rbd: move rbd_dev_refresh() definition
	Cc: stable@vger.kernel.org # 510a7330c82a: rbd: decouple header read-in from updating rbd_dev->header
	Cc: stable@vger.kernel.org # c10311776f0a: rbd: decouple parent info read-in from updating rbd_dev
	Cc: stable@vger.kernel.org
Fixes: 870611e4877e ("rbd: get snapshot context after exclusive lock is ensured to be held")
	Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
	Reviewed-by: Dongsheng Yang <dongsheng.yang@easystack.cn>
(cherry picked from commit 0b207d02bd9ab8dcc31b262ca9f60dbc1822500d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/block/rbd.c
diff --cc drivers/block/rbd.c
index fa54f70f1561,a999b698b131..000000000000
--- a/drivers/block/rbd.c
+++ b/drivers/block/rbd.c
@@@ -6992,9 -6980,108 +6992,114 @@@ err_out_format
  	return ret;
  }
  
++<<<<<<< HEAD
 +static ssize_t do_rbd_add(struct bus_type *bus,
 +			  const char *buf,
 +			  size_t count)
++=======
+ static void rbd_dev_update_header(struct rbd_device *rbd_dev,
+ 				  struct rbd_image_header *header)
+ {
+ 	rbd_assert(rbd_image_format_valid(rbd_dev->image_format));
+ 	rbd_assert(rbd_dev->header.object_prefix); /* !first_time */
+ 
+ 	if (rbd_dev->header.image_size != header->image_size) {
+ 		rbd_dev->header.image_size = header->image_size;
+ 
+ 		if (!rbd_is_snap(rbd_dev)) {
+ 			rbd_dev->mapping.size = header->image_size;
+ 			rbd_dev_update_size(rbd_dev);
+ 		}
+ 	}
+ 
+ 	ceph_put_snap_context(rbd_dev->header.snapc);
+ 	rbd_dev->header.snapc = header->snapc;
+ 	header->snapc = NULL;
+ 
+ 	if (rbd_dev->image_format == 1) {
+ 		kfree(rbd_dev->header.snap_names);
+ 		rbd_dev->header.snap_names = header->snap_names;
+ 		header->snap_names = NULL;
+ 
+ 		kfree(rbd_dev->header.snap_sizes);
+ 		rbd_dev->header.snap_sizes = header->snap_sizes;
+ 		header->snap_sizes = NULL;
+ 	}
+ }
+ 
+ static void rbd_dev_update_parent(struct rbd_device *rbd_dev,
+ 				  struct parent_image_info *pii)
+ {
+ 	if (pii->pool_id == CEPH_NOPOOL || !pii->has_overlap) {
+ 		/*
+ 		 * Either the parent never existed, or we have
+ 		 * record of it but the image got flattened so it no
+ 		 * longer has a parent.  When the parent of a
+ 		 * layered image disappears we immediately set the
+ 		 * overlap to 0.  The effect of this is that all new
+ 		 * requests will be treated as if the image had no
+ 		 * parent.
+ 		 *
+ 		 * If !pii.has_overlap, the parent image spec is not
+ 		 * applicable.  It's there to avoid duplication in each
+ 		 * snapshot record.
+ 		 */
+ 		if (rbd_dev->parent_overlap) {
+ 			rbd_dev->parent_overlap = 0;
+ 			rbd_dev_parent_put(rbd_dev);
+ 			pr_info("%s: clone has been flattened\n",
+ 				rbd_dev->disk->disk_name);
+ 		}
+ 	} else {
+ 		rbd_assert(rbd_dev->parent_spec);
+ 
+ 		/*
+ 		 * Update the parent overlap.  If it became zero, issue
+ 		 * a warning as we will proceed as if there is no parent.
+ 		 */
+ 		if (!pii->overlap && rbd_dev->parent_overlap)
+ 			rbd_warn(rbd_dev,
+ 				 "clone has become standalone (overlap 0)");
+ 		rbd_dev->parent_overlap = pii->overlap;
+ 	}
+ }
+ 
+ static int rbd_dev_refresh(struct rbd_device *rbd_dev)
+ {
+ 	struct rbd_image_header	header = { 0 };
+ 	struct parent_image_info pii = { 0 };
+ 	int ret;
+ 
+ 	dout("%s rbd_dev %p\n", __func__, rbd_dev);
+ 
+ 	ret = rbd_dev_header_info(rbd_dev, &header, false);
+ 	if (ret)
+ 		goto out;
+ 
+ 	/*
+ 	 * If there is a parent, see if it has disappeared due to the
+ 	 * mapped image getting flattened.
+ 	 */
+ 	if (rbd_dev->parent) {
+ 		ret = rbd_dev_v2_parent_info(rbd_dev, &pii);
+ 		if (ret)
+ 			goto out;
+ 	}
+ 
+ 	down_write(&rbd_dev->header_rwsem);
+ 	rbd_dev_update_header(rbd_dev, &header);
+ 	if (rbd_dev->parent)
+ 		rbd_dev_update_parent(rbd_dev, &pii);
+ 	up_write(&rbd_dev->header_rwsem);
+ 
+ out:
+ 	rbd_parent_info_cleanup(&pii);
+ 	rbd_image_header_cleanup(&header);
+ 	return ret;
+ }
+ 
+ static ssize_t do_rbd_add(const char *buf, size_t count)
++>>>>>>> 0b207d02bd9a (rbd: take header_rwsem in rbd_dev_refresh() only when updating)
  {
  	struct rbd_device *rbd_dev = NULL;
  	struct ceph_options *ceph_opts = NULL;
* Unmerged path drivers/block/rbd.c
