rbd: decouple header read-in from updating rbd_dev->header

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-517.el8
commit-author Ilya Dryomov <idryomov@gmail.com>
commit 510a7330c82a7754d5df0117a8589e8a539067c7
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-517.el8/510a7330.failed

Make rbd_dev_header_info() populate a passed struct rbd_image_header
instead of rbd_dev->header and introduce rbd_dev_update_header() for
updating mutable fields in rbd_dev->header upon refresh.  The initial
read-in of both mutable and immutable fields in rbd_dev_image_probe()
passes in rbd_dev->header so no update step is required there.

rbd_init_layout() is now called directly from rbd_dev_image_probe()
instead of individually in format 1 and format 2 implementations.

	Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
	Reviewed-by: Dongsheng Yang <dongsheng.yang@easystack.cn>
(cherry picked from commit 510a7330c82a7754d5df0117a8589e8a539067c7)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/block/rbd.c
diff --cc drivers/block/rbd.c
index fa54f70f1561,6ed5520ef303..000000000000
--- a/drivers/block/rbd.c
+++ b/drivers/block/rbd.c
@@@ -633,9 -632,8 +633,14 @@@ void rbd_warn(struct rbd_device *rbd_de
  static void rbd_dev_remove_parent(struct rbd_device *rbd_dev);
  
  static int rbd_dev_refresh(struct rbd_device *rbd_dev);
++<<<<<<< HEAD
 +static int rbd_dev_v2_header_onetime(struct rbd_device *rbd_dev);
 +static int rbd_dev_header_info(struct rbd_device *rbd_dev);
 +static int rbd_dev_v2_parent_info(struct rbd_device *rbd_dev);
++=======
+ static int rbd_dev_v2_header_onetime(struct rbd_device *rbd_dev,
+ 				     struct rbd_image_header *header);
++>>>>>>> 510a7330c82a (rbd: decouple header read-in from updating rbd_dev->header)
  static const char *rbd_dev_v2_snap_name(struct rbd_device *rbd_dev,
  					u64 snap_id);
  static int _rbd_dev_v2_snap_size(struct rbd_device *rbd_dev, u64 snap_id,
@@@ -6992,9 -7003,67 +6991,73 @@@ err_out_format
  	return ret;
  }
  
++<<<<<<< HEAD
 +static ssize_t do_rbd_add(struct bus_type *bus,
 +			  const char *buf,
 +			  size_t count)
++=======
+ static void rbd_dev_update_header(struct rbd_device *rbd_dev,
+ 				  struct rbd_image_header *header)
+ {
+ 	rbd_assert(rbd_image_format_valid(rbd_dev->image_format));
+ 	rbd_assert(rbd_dev->header.object_prefix); /* !first_time */
+ 
+ 	rbd_dev->header.image_size = header->image_size;
+ 
+ 	ceph_put_snap_context(rbd_dev->header.snapc);
+ 	rbd_dev->header.snapc = header->snapc;
+ 	header->snapc = NULL;
+ 
+ 	if (rbd_dev->image_format == 1) {
+ 		kfree(rbd_dev->header.snap_names);
+ 		rbd_dev->header.snap_names = header->snap_names;
+ 		header->snap_names = NULL;
+ 
+ 		kfree(rbd_dev->header.snap_sizes);
+ 		rbd_dev->header.snap_sizes = header->snap_sizes;
+ 		header->snap_sizes = NULL;
+ 	}
+ }
+ 
+ static int rbd_dev_refresh(struct rbd_device *rbd_dev)
+ {
+ 	struct rbd_image_header	header = { 0 };
+ 	u64 mapping_size;
+ 	int ret;
+ 
+ 	down_write(&rbd_dev->header_rwsem);
+ 	mapping_size = rbd_dev->mapping.size;
+ 
+ 	ret = rbd_dev_header_info(rbd_dev, &header, false);
+ 	if (ret)
+ 		goto out;
+ 
+ 	/*
+ 	 * If there is a parent, see if it has disappeared due to the
+ 	 * mapped image getting flattened.
+ 	 */
+ 	if (rbd_dev->parent) {
+ 		ret = rbd_dev_v2_parent_info(rbd_dev);
+ 		if (ret)
+ 			goto out;
+ 	}
+ 
+ 	rbd_dev_update_header(rbd_dev, &header);
+ 
+ 	rbd_assert(!rbd_is_snap(rbd_dev));
+ 	rbd_dev->mapping.size = rbd_dev->header.image_size;
+ 
+ out:
+ 	up_write(&rbd_dev->header_rwsem);
+ 	if (!ret && mapping_size != rbd_dev->mapping.size)
+ 		rbd_dev_update_size(rbd_dev);
+ 
+ 	rbd_image_header_cleanup(&header);
+ 	return ret;
+ }
+ 
+ static ssize_t do_rbd_add(const char *buf, size_t count)
++>>>>>>> 510a7330c82a (rbd: decouple header read-in from updating rbd_dev->header)
  {
  	struct rbd_device *rbd_dev = NULL;
  	struct ceph_options *ceph_opts = NULL;
* Unmerged path drivers/block/rbd.c
