sched, cgroup: Restore meaning to hierarchical_quota

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-517.el8
commit-author Phil Auld <pauld@redhat.com>
commit c98c18270be115678f4295b10a5af5dcc9c4efa0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-517.el8/c98c1827.failed

In cgroupv2 cfs_b->hierarchical_quota is set to -1 for all task
groups due to the previous fix simply taking the min.  It should
reflect a limit imposed at that level or by an ancestor. Even
though cgroupv2 does not require child quota to be less than or
equal to that of its ancestors the task group will still be
constrained by such a quota so this should be shown here. Cgroupv1
continues to set this correctly.

In both cases, add initialization when a new task group is created
based on the current parent's value (or RUNTIME_INF in the case of
root_task_group). Otherwise, the field is wrong until a quota is
changed after creation and __cfs_schedulable() is called.

Fixes: c53593e5cb69 ("sched, cgroup: Don't reject lower cpu.max on ancestors")
	Signed-off-by: Phil Auld <pauld@redhat.com>
	Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
	Reviewed-by: Ben Segall <bsegall@google.com>
	Acked-by: Tejun Heo <tj@kernel.org>
Link: https://lore.kernel.org/r/20230714125746.812891-1-pauld@redhat.com
(cherry picked from commit c98c18270be115678f4295b10a5af5dcc9c4efa0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/sched/fair.c
diff --cc kernel/sched/fair.c
index 65a9e520ec65,26bfbb640894..000000000000
--- a/kernel/sched/fair.c
+++ b/kernel/sched/fair.c
@@@ -5443,6 -6051,8 +5443,11 @@@ void init_cfs_bandwidth(struct cfs_band
  	cfs_b->runtime = 0;
  	cfs_b->quota = RUNTIME_INF;
  	cfs_b->period = ns_to_ktime(default_cfs_period());
++<<<<<<< HEAD
++=======
+ 	cfs_b->burst = 0;
+ 	cfs_b->hierarchical_quota = parent ? parent->hierarchical_quota : RUNTIME_INF;
++>>>>>>> c98c18270be1 (sched, cgroup: Restore meaning to hierarchical_quota)
  
  	INIT_LIST_HEAD(&cfs_b->throttled_cfs_rq);
  	hrtimer_init(&cfs_b->period_timer, CLOCK_MONOTONIC, HRTIMER_MODE_ABS_PINNED);
@@@ -5566,8 -6218,9 +5571,13 @@@ static inline int throttled_lb_pair(str
  	return 0;
  }
  
++<<<<<<< HEAD
++=======
+ void init_cfs_bandwidth(struct cfs_bandwidth *cfs_b, struct cfs_bandwidth *parent) {}
+ 
++>>>>>>> c98c18270be1 (sched, cgroup: Restore meaning to hierarchical_quota)
  #ifdef CONFIG_FAIR_GROUP_SCHED
 +void init_cfs_bandwidth(struct cfs_bandwidth *cfs_b) {}
  static void init_cfs_rq_runtime(struct cfs_rq *cfs_rq) {}
  #endif
  
diff --git a/kernel/sched/core.c b/kernel/sched/core.c
index 5e6cb79c5be4..751a51b1a392 100644
--- a/kernel/sched/core.c
+++ b/kernel/sched/core.c
@@ -7279,7 +7279,7 @@ void __init sched_init(void)
 		ptr += nr_cpu_ids * sizeof(void **);
 
 		root_task_group.shares = ROOT_TASK_GROUP_LOAD;
-		init_cfs_bandwidth(&root_task_group.cfs_bandwidth);
+		init_cfs_bandwidth(&root_task_group.cfs_bandwidth, NULL);
 #endif /* CONFIG_FAIR_GROUP_SCHED */
 #ifdef CONFIG_RT_GROUP_SCHED
 		root_task_group.rt_se = (struct sched_rt_entity **)ptr;
@@ -8144,11 +8144,16 @@ static int tg_cfs_schedulable_down(struct task_group *tg, void *data)
 
 		/*
 		 * Ensure max(child_quota) <= parent_quota.  On cgroup2,
-		 * always take the min.  On cgroup1, only inherit when no
-		 * limit is set:
+		 * always take the non-RUNTIME_INF min.  On cgroup1, only
+		 * inherit when no limit is set. In both cases this is used
+		 * by the scheduler to determine if a given CFS task has a
+		 * bandwidth constraint at some higher level.
 		 */
 		if (cgroup_subsys_on_dfl(cpu_cgrp_subsys)) {
-			quota = min(quota, parent_quota);
+			if (quota == RUNTIME_INF)
+				quota = parent_quota;
+			else if (parent_quota != RUNTIME_INF)
+				quota = min(quota, parent_quota);
 		} else {
 			if (quota == RUNTIME_INF)
 				quota = parent_quota;
* Unmerged path kernel/sched/fair.c
diff --git a/kernel/sched/sched.h b/kernel/sched/sched.h
index 7a8900db37d8..94ef2732a1ea 100644
--- a/kernel/sched/sched.h
+++ b/kernel/sched/sched.h
@@ -493,7 +493,7 @@ extern void unregister_fair_sched_group(struct task_group *tg);
 extern void init_tg_cfs_entry(struct task_group *tg, struct cfs_rq *cfs_rq,
 			struct sched_entity *se, int cpu,
 			struct sched_entity *parent);
-extern void init_cfs_bandwidth(struct cfs_bandwidth *cfs_b);
+extern void init_cfs_bandwidth(struct cfs_bandwidth *cfs_b, struct cfs_bandwidth *parent);
 
 extern void __refill_cfs_bandwidth_runtime(struct cfs_bandwidth *cfs_b);
 extern void start_cfs_bandwidth(struct cfs_bandwidth *cfs_b);
