ACPI: PPTT: Use table offset as fw_token instead of virtual address

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Sudeep Holla <sudeep.holla@arm.com>
commit 0d4c331af4d169de26186170010c7b7acd49f266
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/0d4c331a.failed

There is need to use the cache sharing information quite early during
the boot before the secondary cores are up and running. The permanent
memory map for all the ACPI tables(via acpi_permanent_mmap) is turned
on in acpi_early_init() which is quite late for the above requirement.

As a result there is possibility that the ACPI PPTT gets mapped to
different virtual addresses. In such scenarios, using virtual address as
fw_token before the acpi_permanent_mmap is enabled results in different
fw_token for the same cache entity and hence wrong cache sharing
information will be deduced based on the same.

Instead of using virtual address, just use the table offset as the
unique firmware token for the caches. The same offset is used as
ACPI identifiers if the firmware has not set a valid one for other
entries in the ACPI PPTT.

Link: https://lore.kernel.org/r/20220704101605.1318280-2-sudeep.holla@arm.com
	Cc: linux-acpi@vger.kernel.org
	Tested-by: Ionela Voinescu <ionela.voinescu@arm.com>
	Tested-by: Conor Dooley <conor.dooley@microchip.com>
	Acked-by: Rafael J. Wysocki <rafael@kernel.org>
	Signed-off-by: Sudeep Holla <sudeep.holla@arm.com>
(cherry picked from commit 0d4c331af4d169de26186170010c7b7acd49f266)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/acpi/pptt.c
diff --cc drivers/acpi/pptt.c
index c9863c35f846,763f021d45e6..000000000000
--- a/drivers/acpi/pptt.c
+++ b/drivers/acpi/pptt.c
@@@ -437,7 -437,8 +437,12 @@@ static void cache_setup_acpi_cpu(struc
  		pr_debug("found = %p %p\n", found_cache, cpu_node);
  		if (found_cache)
  			update_cache_properties(this_leaf, found_cache,
++<<<<<<< HEAD
 +						cpu_node, table->revision);
++=======
+ 						ACPI_TO_POINTER(ACPI_PTR_DIFF(cpu_node, table)),
+ 						table->revision);
++>>>>>>> 0d4c331af4d1 (ACPI: PPTT: Use table offset as fw_token instead of virtual address)
  
  		index++;
  	}
* Unmerged path drivers/acpi/pptt.c
