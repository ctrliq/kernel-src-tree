ASoC: SOF: Intel: Add IPC-specific dai ops for IPC3

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Ranjani Sridharan <ranjani.sridharan@linux.intel.com>
commit 51ec71dc0cc90e6683ebda7f5ea0ddb71265ab23
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/51ec71dc.failed

The BE DAI driver ops involve operations that are IPC-specific. For ex:
for the HDA DAI, the trigger op involves sending the DAI_CONFIG IPC to
the DSP to stop the DMA for the stop/pause commands. This sequence is
different for IPC3 and IPC4. So, make the dai driver ops IPC-specific
and set the IPC3-specific ops during the ops_init() callback.

	Reviewed-by: Rander Wang <rander.wang@intel.com>
	Reviewed-by: Bard Liao <yung-chuan.liao@linux.intel.com>
	Reviewed-by: PÃ©ter Ujfalusi <peter.ujfalusi@linux.intel.com>
	Signed-off-by: Ranjani Sridharan <ranjani.sridharan@linux.intel.com>
	Signed-off-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
Link: https://lore.kernel.org/r/20220421203201.1550328-3-pierre-louis.bossart@linux.intel.com
	Signed-off-by: Mark Brown <broonie@kernel.org>
(cherry picked from commit 51ec71dc0cc90e6683ebda7f5ea0ddb71265ab23)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	sound/soc/sof/intel/icl.c
diff --cc sound/soc/sof/intel/icl.c
index 99a313b7f65b,f19517dffd62..000000000000
--- a/sound/soc/sof/intel/icl.c
+++ b/sound/soc/sof/intel/icl.c
@@@ -88,114 -95,44 +88,121 @@@ static int icl_dsp_post_fw_run(struct s
  }
  
  /* Icelake ops */
 -struct snd_sof_dsp_ops sof_icl_ops;
 -EXPORT_SYMBOL_NS(sof_icl_ops, SND_SOC_SOF_INTEL_HDA_COMMON);
 +struct snd_sof_dsp_ops sof_icl_ops = {
 +	/* probe/remove/shutdown */
 +	.probe		= hda_dsp_probe,
 +	.remove		= hda_dsp_remove,
 +	.shutdown	= hda_dsp_shutdown,
  
 -int sof_icl_ops_init(struct snd_sof_dev *sdev)
 -{
 -	/* common defaults */
 -	memcpy(&sof_icl_ops, &sof_hda_common_ops, sizeof(struct snd_sof_dsp_ops));
 +	/* Register IO */
 +	.write		= sof_io_write,
 +	.read		= sof_io_read,
 +	.write64	= sof_io_write64,
 +	.read64		= sof_io_read64,
  
 -	/* probe/remove/shutdown */
 -	sof_icl_ops.shutdown	= hda_dsp_shutdown;
 +	/* Block IO */
 +	.block_read	= sof_block_read,
 +	.block_write	= sof_block_write,
 +
 +	/* Mailbox IO */
 +	.mailbox_read	= sof_mailbox_read,
 +	.mailbox_write	= sof_mailbox_write,
  
  	/* doorbell */
 -	sof_icl_ops.irq_thread	= cnl_ipc_irq_thread;
 +	.irq_thread	= cnl_ipc_irq_thread,
  
  	/* ipc */
 -	sof_icl_ops.send_msg	= cnl_ipc_send_msg;
 +	.send_msg	= cnl_ipc_send_msg,
 +	.fw_ready	= sof_fw_ready,
 +	.get_mailbox_offset = hda_dsp_ipc_get_mailbox_offset,
 +	.get_window_offset = hda_dsp_ipc_get_window_offset,
 +
 +	.ipc_msg_data	= hda_ipc_msg_data,
 +	.set_stream_data_offset = hda_set_stream_data_offset,
 +
 +	/* machine driver */
 +	.machine_select = hda_machine_select,
 +	.machine_register = sof_machine_register,
 +	.machine_unregister = sof_machine_unregister,
 +	.set_mach_params = hda_set_mach_params,
  
  	/* debug */
 -	sof_icl_ops.debug_map	= icl_dsp_debugfs;
 -	sof_icl_ops.debug_map_count	= ARRAY_SIZE(icl_dsp_debugfs);
 -	sof_icl_ops.ipc_dump	= cnl_ipc_dump;
 +	.debug_map	= icl_dsp_debugfs,
 +	.debug_map_count	= ARRAY_SIZE(icl_dsp_debugfs),
 +	.dbg_dump	= hda_dsp_dump,
 +	.ipc_dump	= cnl_ipc_dump,
 +	.debugfs_add_region_item = snd_sof_debugfs_add_region_item_iomem,
 +
 +	/* stream callbacks */
 +	.pcm_open	= hda_dsp_pcm_open,
 +	.pcm_close	= hda_dsp_pcm_close,
 +	.pcm_hw_params	= hda_dsp_pcm_hw_params,
 +	.pcm_hw_free	= hda_dsp_stream_hw_free,
 +	.pcm_trigger	= hda_dsp_pcm_trigger,
 +	.pcm_pointer	= hda_dsp_pcm_pointer,
 +	.pcm_ack	= hda_dsp_pcm_ack,
 +
 +#if IS_ENABLED(CONFIG_SND_SOC_SOF_HDA_PROBES)
 +	/* probe callbacks */
 +	.probe_assign	= hda_probe_compr_assign,
 +	.probe_free	= hda_probe_compr_free,
 +	.probe_set_params	= hda_probe_compr_set_params,
 +	.probe_trigger	= hda_probe_compr_trigger,
 +	.probe_pointer	= hda_probe_compr_pointer,
 +#endif
 +
 +	/* firmware loading */
 +	.load_firmware = snd_sof_load_firmware_raw,
  
  	/* pre/post fw run */
 -	sof_icl_ops.post_fw_run = icl_dsp_post_fw_run;
 +	.pre_fw_run = hda_dsp_pre_fw_run,
 +	.post_fw_run = icl_dsp_post_fw_run,
  
 -	/* firmware run */
 -	sof_icl_ops.run = hda_dsp_cl_boot_firmware_iccmax;
 -	sof_icl_ops.stall = icl_dsp_core_stall;
 +	/* parse platform specific extended manifest */
 +	.parse_platform_ext_manifest = hda_dsp_ext_man_get_cavs_config_data,
  
  	/* dsp core get/put */
 -	sof_icl_ops.core_get = hda_dsp_core_get;
 +	.core_get = hda_dsp_core_get,
  
++<<<<<<< HEAD
 +	/* firmware run */
 +	.run = hda_dsp_cl_boot_firmware_iccmax,
 +	.stall = icl_dsp_core_stall,
 +
 +	/* trace callback */
 +	.trace_init = hda_dsp_trace_init,
 +	.trace_release = hda_dsp_trace_release,
 +	.trace_trigger = hda_dsp_trace_trigger,
 +
 +	/* DAI drivers */
 +	.drv		= skl_dai,
 +	.num_drv	= SOF_SKL_NUM_DAIS,
 +
 +	/* PM */
 +	.suspend		= hda_dsp_suspend,
 +	.resume			= hda_dsp_resume,
 +	.runtime_suspend	= hda_dsp_runtime_suspend,
 +	.runtime_resume		= hda_dsp_runtime_resume,
 +	.runtime_idle		= hda_dsp_runtime_idle,
 +	.set_hw_params_upon_resume = hda_dsp_set_hw_params_upon_resume,
 +	.set_power_state	= hda_dsp_set_power_state,
 +
 +	/* ALSA HW info flags */
 +	.hw_info =	SNDRV_PCM_INFO_MMAP |
 +			SNDRV_PCM_INFO_MMAP_VALID |
 +			SNDRV_PCM_INFO_INTERLEAVED |
 +			SNDRV_PCM_INFO_PAUSE |
 +			SNDRV_PCM_INFO_NO_PERIOD_WAKEUP,
 +
 +	.dsp_arch_ops = &sof_xtensa_arch_ops,
++=======
+ 	/* set DAI driver ops */
+ 	hda_set_dai_drv_ops(sdev, &sof_icl_ops);
+ 
+ 	return 0;
++>>>>>>> 51ec71dc0cc9 (ASoC: SOF: Intel: Add IPC-specific dai ops for IPC3)
  };
 -EXPORT_SYMBOL_NS(sof_icl_ops_init, SND_SOC_SOF_INTEL_HDA_COMMON);
 +EXPORT_SYMBOL(sof_icl_ops);
  
  const struct sof_intel_dsp_desc icl_chip_info = {
  	/* Icelake */
diff --git a/sound/soc/sof/intel/apl.c b/sound/soc/sof/intel/apl.c
index 4dc643dd7756..2ced7e2a6189 100644
--- a/sound/soc/sof/intel/apl.c
+++ b/sound/soc/sof/intel/apl.c
@@ -64,6 +64,9 @@ struct snd_sof_dsp_ops sof_apl_ops = {
 	.machine_unregister = sof_machine_unregister,
 	.set_mach_params = hda_set_mach_params,
 
+	/* set DAI driver ops */
+	hda_set_dai_drv_ops(sdev, &sof_apl_ops);
+
 	/* debug */
 	.debug_map	= apl_dsp_debugfs,
 	.debug_map_count	= ARRAY_SIZE(apl_dsp_debugfs),
diff --git a/sound/soc/sof/intel/cnl.c b/sound/soc/sof/intel/cnl.c
index 7477c9aee374..c516d70a28dc 100644
--- a/sound/soc/sof/intel/cnl.c
+++ b/sound/soc/sof/intel/cnl.c
@@ -282,6 +282,9 @@ struct snd_sof_dsp_ops sof_cnl_ops = {
 	.machine_unregister = sof_machine_unregister,
 	.set_mach_params = hda_set_mach_params,
 
+	/* set DAI driver ops */
+	hda_set_dai_drv_ops(sdev, &sof_cnl_ops);
+
 	/* debug */
 	.debug_map	= cnl_dsp_debugfs,
 	.debug_map_count	= ARRAY_SIZE(cnl_dsp_debugfs),
diff --git a/sound/soc/sof/intel/hda-dai.c b/sound/soc/sof/intel/hda-dai.c
index 97bf291cb5b8..1ee9575b60ef 100644
--- a/sound/soc/sof/intel/hda-dai.c
+++ b/sound/soc/sof/intel/hda-dai.c
@@ -338,8 +338,8 @@ static int hda_link_dai_config_pause_push_ipc(struct snd_soc_dapm_widget *w)
 	return ret;
 }
 
-static int hda_link_pcm_trigger(struct snd_pcm_substream *substream,
-				int cmd, struct snd_soc_dai *dai)
+static int ipc3_hda_link_pcm_trigger(struct snd_pcm_substream *substream,
+				     int cmd, struct snd_soc_dai *dai)
 {
 	struct hdac_ext_stream *hext_stream =
 				snd_soc_dai_get_dma_data(dai, substream);
@@ -457,10 +457,10 @@ static int hda_link_hw_free(struct snd_pcm_substream *substream,
 	return 0;
 }
 
-static const struct snd_soc_dai_ops hda_link_dai_ops = {
+static const struct snd_soc_dai_ops ipc3_hda_link_dai_ops = {
 	.hw_params = hda_link_hw_params,
 	.hw_free = hda_link_hw_free,
-	.trigger = hda_link_pcm_trigger,
+	.trigger = ipc3_hda_link_pcm_trigger,
 	.prepare = hda_link_pcm_prepare,
 };
 
@@ -553,8 +553,8 @@ static int ssp_dai_prepare(struct snd_pcm_substream *substream,
 	return ssp_dai_setup(substream, dai, true);
 }
 
-static int ssp_dai_trigger(struct snd_pcm_substream *substream,
-			   int cmd, struct snd_soc_dai *dai)
+static int ipc3_ssp_dai_trigger(struct snd_pcm_substream *substream,
+				int cmd, struct snd_soc_dai *dai)
 {
 	if (cmd != SNDRV_PCM_TRIGGER_SUSPEND)
 		return 0;
@@ -582,15 +582,39 @@ static void ssp_dai_shutdown(struct snd_pcm_substream *substream,
 	kfree(dma_data);
 }
 
-static const struct snd_soc_dai_ops ssp_dai_ops = {
+static const struct snd_soc_dai_ops ipc3_ssp_dai_ops = {
 	.startup = ssp_dai_startup,
 	.hw_params = ssp_dai_hw_params,
 	.prepare = ssp_dai_prepare,
-	.trigger = ssp_dai_trigger,
+	.trigger = ipc3_ssp_dai_trigger,
 	.hw_free = ssp_dai_hw_free,
 	.shutdown = ssp_dai_shutdown,
 };
 
+void hda_set_dai_drv_ops(struct snd_sof_dev *sdev, struct snd_sof_dsp_ops *ops)
+{
+	int i;
+
+	switch (sdev->pdata->ipc_type) {
+	case SOF_IPC:
+		for (i = 0; i < ops->num_drv; i++) {
+			if (strstr(ops->drv[i].name, "SSP")) {
+				ops->drv[i].ops = &ipc3_ssp_dai_ops;
+				continue;
+			}
+#if IS_ENABLED(CONFIG_SND_SOC_SOF_HDA)
+			if (strstr(ops->drv[i].name, "iDisp") ||
+			    strstr(ops->drv[i].name, "Analog") ||
+			    strstr(ops->drv[i].name, "Digital"))
+				ops->drv[i].ops = &ipc3_hda_link_dai_ops;
+#endif
+		}
+		break;
+	default:
+		break;
+	}
+}
+
 /*
  * common dai driver for skl+ platforms.
  * some products who use this DAI array only physically have a subset of
@@ -599,7 +623,6 @@ static const struct snd_soc_dai_ops ssp_dai_ops = {
 struct snd_soc_dai_driver skl_dai[] = {
 {
 	.name = "SSP0 Pin",
-	.ops = &ssp_dai_ops,
 	.playback = {
 		.channels_min = 1,
 		.channels_max = 8,
@@ -611,7 +634,6 @@ struct snd_soc_dai_driver skl_dai[] = {
 },
 {
 	.name = "SSP1 Pin",
-	.ops = &ssp_dai_ops,
 	.playback = {
 		.channels_min = 1,
 		.channels_max = 8,
@@ -623,7 +645,6 @@ struct snd_soc_dai_driver skl_dai[] = {
 },
 {
 	.name = "SSP2 Pin",
-	.ops = &ssp_dai_ops,
 	.playback = {
 		.channels_min = 1,
 		.channels_max = 8,
@@ -635,7 +656,6 @@ struct snd_soc_dai_driver skl_dai[] = {
 },
 {
 	.name = "SSP3 Pin",
-	.ops = &ssp_dai_ops,
 	.playback = {
 		.channels_min = 1,
 		.channels_max = 8,
@@ -647,7 +667,6 @@ struct snd_soc_dai_driver skl_dai[] = {
 },
 {
 	.name = "SSP4 Pin",
-	.ops = &ssp_dai_ops,
 	.playback = {
 		.channels_min = 1,
 		.channels_max = 8,
@@ -659,7 +678,6 @@ struct snd_soc_dai_driver skl_dai[] = {
 },
 {
 	.name = "SSP5 Pin",
-	.ops = &ssp_dai_ops,
 	.playback = {
 		.channels_min = 1,
 		.channels_max = 8,
@@ -686,7 +704,6 @@ struct snd_soc_dai_driver skl_dai[] = {
 #if IS_ENABLED(CONFIG_SND_SOC_SOF_HDA)
 {
 	.name = "iDisp1 Pin",
-	.ops = &hda_link_dai_ops,
 	.playback = {
 		.channels_min = 1,
 		.channels_max = 8,
@@ -694,7 +711,6 @@ struct snd_soc_dai_driver skl_dai[] = {
 },
 {
 	.name = "iDisp2 Pin",
-	.ops = &hda_link_dai_ops,
 	.playback = {
 		.channels_min = 1,
 		.channels_max = 8,
@@ -702,7 +718,6 @@ struct snd_soc_dai_driver skl_dai[] = {
 },
 {
 	.name = "iDisp3 Pin",
-	.ops = &hda_link_dai_ops,
 	.playback = {
 		.channels_min = 1,
 		.channels_max = 8,
@@ -710,7 +725,6 @@ struct snd_soc_dai_driver skl_dai[] = {
 },
 {
 	.name = "iDisp4 Pin",
-	.ops = &hda_link_dai_ops,
 	.playback = {
 		.channels_min = 1,
 		.channels_max = 8,
@@ -718,7 +732,6 @@ struct snd_soc_dai_driver skl_dai[] = {
 },
 {
 	.name = "Analog CPU DAI",
-	.ops = &hda_link_dai_ops,
 	.playback = {
 		.channels_min = 1,
 		.channels_max = 16,
@@ -730,7 +743,6 @@ struct snd_soc_dai_driver skl_dai[] = {
 },
 {
 	.name = "Digital CPU DAI",
-	.ops = &hda_link_dai_ops,
 	.playback = {
 		.channels_min = 1,
 		.channels_max = 16,
@@ -742,7 +754,6 @@ struct snd_soc_dai_driver skl_dai[] = {
 },
 {
 	.name = "Alt Analog CPU DAI",
-	.ops = &hda_link_dai_ops,
 	.playback = {
 		.channels_min = 1,
 		.channels_max = 16,
diff --git a/sound/soc/sof/intel/hda.h b/sound/soc/sof/intel/hda.h
index 6c683c3c492e..5c6967e2d498 100644
--- a/sound/soc/sof/intel/hda.h
+++ b/sound/soc/sof/intel/hda.h
@@ -762,4 +762,6 @@ int hda_ctrl_dai_widget_free(struct snd_soc_dapm_widget *w);
 
 extern int sof_hda_position_quirk;
 
+void hda_set_dai_drv_ops(struct snd_sof_dev *sdev, struct snd_sof_dsp_ops *ops);
+
 #endif
* Unmerged path sound/soc/sof/intel/icl.c
diff --git a/sound/soc/sof/intel/tgl.c b/sound/soc/sof/intel/tgl.c
index fceb528ed5d9..5b2f0addc7b8 100644
--- a/sound/soc/sof/intel/tgl.c
+++ b/sound/soc/sof/intel/tgl.c
@@ -99,6 +99,9 @@ struct snd_sof_dsp_ops sof_tgl_ops = {
 	.machine_unregister = sof_machine_unregister,
 	.set_mach_params = hda_set_mach_params,
 
+	/* set DAI driver ops */
+	hda_set_dai_drv_ops(sdev, &sof_tgl_ops);
+
 	/* debug */
 	.debug_map	= tgl_dsp_debugfs,
 	.debug_map_count	= ARRAY_SIZE(tgl_dsp_debugfs),
