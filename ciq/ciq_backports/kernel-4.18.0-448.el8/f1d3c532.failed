s390/boot: move sclp early buffer from fixed address in asm to C

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Alexander Egorenkov <egorenar@linux.ibm.com>
commit f1d3c5323772a215d910aeaf697d210a3671cf81
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/f1d3c532.failed

To make the decompressor relocatable, the early SCLP buffer with a fixed
address must be replaced with a relocatable C buffer of the according size
and alignment as required by SCLP.

Introduce a new function sclp_early_set_buffer() into the SCLP driver
which enables the decompressor to change the SCLP early buffer at any time.
This will be useful when the decompressor becomes fully relocatable and
might need to change the SCLP early buffer to one with an address < 2G
as required by SCLP because it was loaded at an address >= 2G.

	Signed-off-by: Alexander Egorenkov <egorenar@linux.ibm.com>
	Acked-by: Heiko Carstens <hca@linux.ibm.com>
	Signed-off-by: Heiko Carstens <hca@linux.ibm.com>
(cherry picked from commit f1d3c5323772a215d910aeaf697d210a3671cf81)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/s390/boot/boot.h
#	arch/s390/boot/compressed/vmlinux.lds.S
#	arch/s390/boot/head.S
#	arch/s390/include/asm/setup.h
#	drivers/s390/char/sclp_early_core.c
diff --cc arch/s390/boot/boot.h
index 7fca5afef68e,716c35c1d78f..000000000000
--- a/arch/s390/boot/boot.h
+++ b/arch/s390/boot/boot.h
@@@ -2,15 -2,36 +2,21 @@@
  #ifndef BOOT_BOOT_H
  #define BOOT_BOOT_H
  
 -#include <asm/extable.h>
 -#include <linux/types.h>
 -
  void startup_kernel(void);
 -unsigned long detect_memory(void);
 -bool is_ipl_block_dump(void);
 +void detect_memory(void);
  void store_ipl_parmblock(void);
  void setup_boot_command_line(void);
 -void parse_boot_command_line(void);
 +void setup_memory_end(void);
  void verify_facilities(void);
++<<<<<<< HEAD
++=======
+ void print_missing_facilities(void);
+ void sclp_early_setup_buffer(void);
+ void print_pgm_check_info(void);
++>>>>>>> f1d3c5323772 (s390/boot: move sclp early buffer from fixed address in asm to C)
  unsigned long get_random_base(unsigned long safe_addr);
 -void __printf(1, 2) decompressor_printk(const char *fmt, ...);
  
 -/* Symbols defined by linker scripts */
 -extern const char kernel_version[];
 -extern unsigned long memory_limit;
 -extern unsigned long vmalloc_size;
 -extern int vmalloc_size_set;
  extern int kaslr_enabled;
 -extern char __boot_data_start[], __boot_data_end[];
 -extern char __boot_data_preserved_start[], __boot_data_preserved_end[];
 -extern char _sdma[], _edma[];
 -extern char _stext_dma[], _etext_dma[];
 -extern struct exception_table_entry _start_dma_ex_table[];
 -extern struct exception_table_entry _stop_dma_ex_table[];
 -extern char _decompressor_syms_start[], _decompressor_syms_end[];
 -extern char _stack_start[], _stack_end[];
  
  unsigned long read_ipl_report(unsigned long safe_offset);
  
diff --cc arch/s390/boot/compressed/vmlinux.lds.S
index 5042469c301b,d6a69aa6e937..000000000000
--- a/arch/s390/boot/compressed/vmlinux.lds.S
+++ b/arch/s390/boot/compressed/vmlinux.lds.S
@@@ -1,6 -1,9 +1,12 @@@
  /* SPDX-License-Identifier: GPL-2.0 */
  #include <asm-generic/vmlinux.lds.h>
  #include <asm/vmlinux.lds.h>
++<<<<<<< HEAD
++=======
+ #include <asm/thread_info.h>
+ #include <asm/page.h>
+ #include <asm/sclp.h>
++>>>>>>> f1d3c5323772 (s390/boot: move sclp early buffer from fixed address in asm to C)
  
  OUTPUT_FORMAT("elf64-s390", "elf64-s390", "elf64-s390")
  OUTPUT_ARCH(s390:64-bit)
@@@ -52,7 -55,10 +58,14 @@@ SECTION
  		KEEP(*(.dma.ex_table))
  		_stop_dma_ex_table = .;
  	}
++<<<<<<< HEAD
 +	.dma.data : { *(.dma.data) }
++=======
+ 	.dma.data : {
+ 		*(.dma.data)
+ 	}
+ 	. = ALIGN(PAGE_SIZE);
++>>>>>>> f1d3c5323772 (s390/boot: move sclp early buffer from fixed address in asm to C)
  	_edma = .;
  
  	BOOT_DATA
diff --cc arch/s390/boot/head.S
index 732bddaa7ec5,759f77c6af45..000000000000
--- a/arch/s390/boot/head.S
+++ b/arch/s390/boot/head.S
@@@ -310,15 -319,20 +310,20 @@@ ENTRY(startup_kdump
  	mvc	__LC_LAST_UPDATE_CLOCK(8),__LC_BOOT_CLOCK+1
  	spt	6f-.LPG0(%r13)
  	mvc	__LC_LAST_UPDATE_TIMER(8),6f-.LPG0(%r13)
++<<<<<<< HEAD
 +	l	%r15,.Lstack-.LPG0(%r13)
++=======
+ 	larl	%r15,_stack_end-STACK_FRAME_OVERHEAD
+ 	brasl	%r14,sclp_early_setup_buffer
++>>>>>>> f1d3c5323772 (s390/boot: move sclp early buffer from fixed address in asm to C)
  	brasl	%r14,verify_facilities
  	brasl	%r14,startup_kernel
 -SYM_CODE_END(startup_normal)
  
 +.Lstack:
 +	.long	0x8000 + (1<<(PAGE_SHIFT+BOOT_STACK_ORDER)) - STACK_FRAME_OVERHEAD
  	.align	8
  6:	.long	0x7fffffff,0xffffffff
 -.Lext_new_psw:
 -	.quad	0x0002000180000000,0x1b0	# disabled wait
 -.Lpgm_new_psw:
 -	.quad	0x0000000180000000,startup_pgm_check_handler
 -.Lio_new_psw:
 -	.quad	0x0002000180000000,0x1f0	# disabled wait
 +
  .Lctl:	.quad	0x04040000		# cr0: AFP registers & secondary space
  	.quad	0			# cr1: primary space segment table
  	.quad	.Lduct			# cr2: dispatchable unit control table
@@@ -365,8 -408,7 +370,11 @@@
  	.org	COMMAND_LINE
  	.byte	"root=/dev/ram0 ro"
  	.byte	0
 -	.org	PARMAREA+__PARMAREA_SIZE
 -SYM_DATA_END(parmarea)
  
++<<<<<<< HEAD
 +	.org	EARLY_SCCB_OFFSET
 +	.fill	4096
 +
++=======
++>>>>>>> f1d3c5323772 (s390/boot: move sclp early buffer from fixed address in asm to C)
  	.org	HEAD_END
diff --cc arch/s390/include/asm/setup.h
index 92ba15d7bfaa,b72714c632d7..000000000000
--- a/arch/s390/include/asm/setup.h
+++ b/arch/s390/include/asm/setup.h
@@@ -6,15 -6,14 +6,23 @@@
  #ifndef _ASM_S390_SETUP_H
  #define _ASM_S390_SETUP_H
  
++<<<<<<< HEAD
 +#include <linux/const.h>
++=======
+ #include <linux/bits.h>
++>>>>>>> f1d3c5323772 (s390/boot: move sclp early buffer from fixed address in asm to C)
  #include <uapi/asm/setup.h>
  #include <linux/build_bug.h>
  
  #define EP_OFFSET		0x10008
  #define EP_STRING		"S390EP"
  #define PARMAREA		0x10400
++<<<<<<< HEAD
 +#define EARLY_SCCB_OFFSET	0x11000
 +#define HEAD_END		0x12000
++=======
+ #define HEAD_END		0x11000
++>>>>>>> f1d3c5323772 (s390/boot: move sclp early buffer from fixed address in asm to C)
  
  /*
   * Machine features detected in early.c
diff --cc drivers/s390/char/sclp_early_core.c
index 182f6776c303,676634de65a8..000000000000
--- a/drivers/s390/char/sclp_early_core.c
+++ b/drivers/s390/char/sclp_early_core.c
@@@ -17,8 -17,8 +17,13 @@@
  
  static struct read_info_sccb __bootdata(sclp_info_sccb);
  static int __bootdata(sclp_info_sccb_valid);
++<<<<<<< HEAD
 +char *sclp_early_sccb = (char *) EARLY_SCCB_OFFSET;
 +int sclp_init_state __section(.data) = sclp_init_state_uninitialized;
++=======
+ char *__bootdata(sclp_early_sccb);
+ int sclp_init_state = sclp_init_state_uninitialized;
++>>>>>>> f1d3c5323772 (s390/boot: move sclp early buffer from fixed address in asm to C)
  /*
   * Used to keep track of the size of the event masks. Qemu until version 2.11
   * only supports 4 and needs a workaround.
* Unmerged path arch/s390/boot/boot.h
* Unmerged path arch/s390/boot/compressed/vmlinux.lds.S
* Unmerged path arch/s390/boot/head.S
diff --git a/arch/s390/boot/sclp_early_core.c b/arch/s390/boot/sclp_early_core.c
index 5a19fd7020b5..6f30646afbd0 100644
--- a/arch/s390/boot/sclp_early_core.c
+++ b/arch/s390/boot/sclp_early_core.c
@@ -1,2 +1,11 @@
 // SPDX-License-Identifier: GPL-2.0
+#include "boot.h"
 #include "../../../drivers/s390/char/sclp_early_core.c"
+
+/* SCLP early buffer must stay page-aligned and below 2GB */
+static char __sclp_early_sccb[EXT_SCCB_READ_SCP] __aligned(PAGE_SIZE);
+
+void sclp_early_setup_buffer(void)
+{
+	sclp_early_set_buffer(&__sclp_early_sccb);
+}
diff --git a/arch/s390/include/asm/sclp.h b/arch/s390/include/asm/sclp.h
index c973a4bec320..4b6b58a51f8d 100644
--- a/arch/s390/include/asm/sclp.h
+++ b/arch/s390/include/asm/sclp.h
@@ -113,6 +113,7 @@ struct zpci_report_error_header {
 	u8 data[0];	/* Subsequent Data passed verbatim to SCLP ET 24 */
 } __packed;
 
+void sclp_early_set_buffer(void *sccb);
 int sclp_early_read_info(void);
 int sclp_early_read_storage_info(void);
 int sclp_early_get_core_info(struct sclp_core_info *info);
* Unmerged path arch/s390/include/asm/setup.h
* Unmerged path drivers/s390/char/sclp_early_core.c
