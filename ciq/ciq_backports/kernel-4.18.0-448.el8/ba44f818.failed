raw: use more conventional iterators

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Eric Dumazet <edumazet@google.com>
commit ba44f8182ec299c5d1c8a72fc0fde4ec127b5a6d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/ba44f818.failed

In order to prepare the following patch,
I change raw v4 & v6 code to use more conventional
iterators.

	Signed-off-by: Eric Dumazet <edumazet@google.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit ba44f8182ec299c5d1c8a72fc0fde4ec127b5a6d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/ipv4/raw.c
#	net/ipv6/raw.c
diff --cc net/ipv4/raw.c
index 946f8761caa1,05e0de4a7c7f..000000000000
--- a/net/ipv4/raw.c
+++ b/net/ipv4/raw.c
@@@ -121,25 -117,19 +121,32 @@@ void raw_unhash_sk(struct sock *sk
  }
  EXPORT_SYMBOL_GPL(raw_unhash_sk);
  
- struct sock *__raw_v4_lookup(struct net *net, struct sock *sk,
- 			     unsigned short num, __be32 raddr, __be32 laddr,
- 			     int dif, int sdif)
+ bool raw_v4_match(struct net *net, struct sock *sk, unsigned short num,
+ 		  __be32 raddr, __be32 laddr, int dif, int sdif)
  {
- 	sk_for_each_from(sk) {
- 		struct inet_sock *inet = inet_sk(sk);
+ 	struct inet_sock *inet = inet_sk(sk);
  
++<<<<<<< HEAD
 +		if (net_eq(sock_net(sk), net) && inet->inet_num == num	&&
 +		    !(inet->inet_daddr && inet->inet_daddr != raddr) 	&&
 +		    !(inet->inet_rcv_saddr && inet->inet_rcv_saddr != laddr) &&
 +		    !(sk->sk_bound_dev_if && sk->sk_bound_dev_if != dif &&
 +		      sk->sk_bound_dev_if != sdif))
 +			goto found; /* gotcha */
 +	}
 +	sk = NULL;
 +found:
 +	return sk;
++=======
+ 	if (net_eq(sock_net(sk), net) && inet->inet_num == num	&&
+ 	    !(inet->inet_daddr && inet->inet_daddr != raddr) 	&&
+ 	    !(inet->inet_rcv_saddr && inet->inet_rcv_saddr != laddr) &&
+ 	    raw_sk_bound_dev_eq(net, sk->sk_bound_dev_if, dif, sdif))
+ 		return true;
+ 	return false;
++>>>>>>> ba44f8182ec2 (raw: use more conventional iterators)
  }
- EXPORT_SYMBOL_GPL(__raw_v4_lookup);
+ EXPORT_SYMBOL_GPL(raw_v4_match);
  
  /*
   *	0 - deliver
diff --cc net/ipv6/raw.c
index 1d4284c2d260,c0f2e3475984..000000000000
--- a/net/ipv6/raw.c
+++ b/net/ipv6/raw.c
@@@ -70,42 -66,27 +70,55 @@@ struct raw_hashinfo raw_v6_hashinfo = 
  };
  EXPORT_SYMBOL_GPL(raw_v6_hashinfo);
  
- struct sock *__raw_v6_lookup(struct net *net, struct sock *sk,
- 		unsigned short num, const struct in6_addr *loc_addr,
- 		const struct in6_addr *rmt_addr, int dif, int sdif)
+ bool raw_v6_match(struct net *net, struct sock *sk, unsigned short num,
+ 		  const struct in6_addr *loc_addr,
+ 		  const struct in6_addr *rmt_addr, int dif, int sdif)
  {
- 	bool is_multicast = ipv6_addr_is_multicast(loc_addr);
- 
- 	sk_for_each_from(sk)
- 		if (inet_sk(sk)->inet_num == num) {
- 
+ 	if (inet_sk(sk)->inet_num != num ||
+ 	    !net_eq(sock_net(sk), net) ||
+ 	    (!ipv6_addr_any(&sk->sk_v6_daddr) &&
+ 	     !ipv6_addr_equal(&sk->sk_v6_daddr, rmt_addr)) ||
+ 	    !raw_sk_bound_dev_eq(net, sk->sk_bound_dev_if,
+ 				 dif, sdif))
+ 		return false;
+ 
+ 	if (ipv6_addr_any(&sk->sk_v6_rcv_saddr) ||
+ 	    ipv6_addr_equal(&sk->sk_v6_rcv_saddr, loc_addr) ||
+ 	    (ipv6_addr_is_multicast(loc_addr) &&
+ 	     inet6_mc_check(sk, loc_addr, rmt_addr)))
+ 		return true;
+ 
++<<<<<<< HEAD
 +			if (!net_eq(sock_net(sk), net))
 +				continue;
 +
 +			if (!ipv6_addr_any(&sk->sk_v6_daddr) &&
 +			    !ipv6_addr_equal(&sk->sk_v6_daddr, rmt_addr))
 +				continue;
 +
 +			if (sk->sk_bound_dev_if &&
 +			    sk->sk_bound_dev_if != dif &&
 +			    sk->sk_bound_dev_if != sdif)
 +				continue;
 +
 +			if (!ipv6_addr_any(&sk->sk_v6_rcv_saddr)) {
 +				if (ipv6_addr_equal(&sk->sk_v6_rcv_saddr, loc_addr))
 +					goto found;
 +				if (is_multicast &&
 +				    inet6_mc_check(sk, loc_addr, rmt_addr))
 +					goto found;
 +				continue;
 +			}
 +			goto found;
 +		}
 +	sk = NULL;
 +found:
 +	return sk;
++=======
+ 	return false;
++>>>>>>> ba44f8182ec2 (raw: use more conventional iterators)
  }
- EXPORT_SYMBOL_GPL(__raw_v6_lookup);
+ EXPORT_SYMBOL_GPL(raw_v6_match);
  
  /*
   *	0 - deliver
diff --git a/include/net/raw.h b/include/net/raw.h
index 9c9fa98a91a4..b1d3b9060fda 100644
--- a/include/net/raw.h
+++ b/include/net/raw.h
@@ -24,9 +24,8 @@
 extern struct proto raw_prot;
 
 extern struct raw_hashinfo raw_v4_hashinfo;
-struct sock *__raw_v4_lookup(struct net *net, struct sock *sk,
-			     unsigned short num, __be32 raddr,
-			     __be32 laddr, int dif, int sdif);
+bool raw_v4_match(struct net *net, struct sock *sk, unsigned short num,
+		  __be32 raddr, __be32 laddr, int dif, int sdif);
 
 int raw_abort(struct sock *sk, int err);
 void raw_icmp_error(struct sk_buff *, int, u32);
diff --git a/include/net/rawv6.h b/include/net/rawv6.h
index 53d86b6055e8..c48c1298699a 100644
--- a/include/net/rawv6.h
+++ b/include/net/rawv6.h
@@ -5,9 +5,9 @@
 #include <net/protocol.h>
 
 extern struct raw_hashinfo raw_v6_hashinfo;
-struct sock *__raw_v6_lookup(struct net *net, struct sock *sk,
-			     unsigned short num, const struct in6_addr *loc_addr,
-			     const struct in6_addr *rmt_addr, int dif, int sdif);
+bool raw_v6_match(struct net *net, struct sock *sk, unsigned short num,
+		  const struct in6_addr *loc_addr,
+		  const struct in6_addr *rmt_addr, int dif, int sdif);
 
 int raw_abort(struct sock *sk, int err);
 
* Unmerged path net/ipv4/raw.c
diff --git a/net/ipv4/raw_diag.c b/net/ipv4/raw_diag.c
index 5f3757d25183..297e48bc673f 100644
--- a/net/ipv4/raw_diag.c
+++ b/net/ipv4/raw_diag.c
@@ -33,31 +33,30 @@ raw_get_hashinfo(const struct inet_diag_req_v2 *r)
  * use helper to figure it out.
  */
 
-static struct sock *raw_lookup(struct net *net, struct sock *from,
-			       const struct inet_diag_req_v2 *req)
+static bool raw_lookup(struct net *net, struct sock *sk,
+		       const struct inet_diag_req_v2 *req)
 {
 	struct inet_diag_req_raw *r = (void *)req;
-	struct sock *sk = NULL;
 
 	if (r->sdiag_family == AF_INET)
-		sk = __raw_v4_lookup(net, from, r->sdiag_raw_protocol,
-				     r->id.idiag_dst[0],
-				     r->id.idiag_src[0],
-				     r->id.idiag_if, 0);
+		return raw_v4_match(net, sk, r->sdiag_raw_protocol,
+				    r->id.idiag_dst[0],
+				    r->id.idiag_src[0],
+				    r->id.idiag_if, 0);
 #if IS_ENABLED(CONFIG_IPV6)
 	else
-		sk = __raw_v6_lookup(net, from, r->sdiag_raw_protocol,
-				     (const struct in6_addr *)r->id.idiag_src,
-				     (const struct in6_addr *)r->id.idiag_dst,
-				     r->id.idiag_if, 0);
+		return raw_v6_match(net, sk, r->sdiag_raw_protocol,
+				    (const struct in6_addr *)r->id.idiag_src,
+				    (const struct in6_addr *)r->id.idiag_dst,
+				    r->id.idiag_if, 0);
 #endif
-	return sk;
+	return false;
 }
 
 static struct sock *raw_sock_get(struct net *net, const struct inet_diag_req_v2 *r)
 {
 	struct raw_hashinfo *hashinfo = raw_get_hashinfo(r);
-	struct sock *sk = NULL, *s;
+	struct sock *sk;
 	int slot;
 
 	if (IS_ERR(hashinfo))
@@ -65,9 +64,8 @@ static struct sock *raw_sock_get(struct net *net, const struct inet_diag_req_v2
 
 	read_lock(&hashinfo->lock);
 	for (slot = 0; slot < RAW_HTABLE_SIZE; slot++) {
-		sk_for_each(s, &hashinfo->ht[slot]) {
-			sk = raw_lookup(net, s, r);
-			if (sk) {
+		sk_for_each(sk, &hashinfo->ht[slot]) {
+			if (raw_lookup(net, sk, r)) {
 				/*
 				 * Grab it and keep until we fill
 				 * diag meaage to be reported, so
@@ -80,10 +78,11 @@ static struct sock *raw_sock_get(struct net *net, const struct inet_diag_req_v2
 			}
 		}
 	}
+	sk = ERR_PTR(-ENOENT);
 out_unlock:
 	read_unlock(&hashinfo->lock);
 
-	return sk ? sk : ERR_PTR(-ENOENT);
+	return sk;
 }
 
 static int raw_diag_dump_one(struct netlink_callback *cb,
* Unmerged path net/ipv6/raw.c
