fbcon: Move fbcon_bmove(_rec) functions

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Daniel Vetter <daniel.vetter@ffwll.ch>
commit 689333136327b6cd618df85d83d79f2aa620d585
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/68933313.failed

Avoids two forward declarations, and more importantly, matches what
I've done in my fbcon scrolling restore patches - so I need this to
avoid a bunch of conflicts in rebasing since we ended up merging
Helge's series instead.

	Acked-by: Thomas Zimmermann <tzimmermann@suse.de>
	Reviewed-by: Javier Martinez Canillas <javierm@redhat.com>
	Signed-off-by: Daniel Vetter <daniel.vetter@intel.com>
	Cc: Helge Deller <deller@gmx.de>
	Cc: Daniel Vetter <daniel@ffwll.ch>
	Cc: Thomas Zimmermann <tzimmermann@suse.de>
	Cc: Du Cheng <ducheng2@gmail.com>
	Cc: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
	Cc: Claudio Suarez <cssk@net-c.es>
	Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Link: https://patchwork.freedesktop.org/patch/msgid/20220405210335.3434130-3-daniel.vetter@ffwll.ch
(cherry picked from commit 689333136327b6cd618df85d83d79f2aa620d585)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/video/fbdev/core/fbcon.c
diff --cc drivers/video/fbdev/core/fbcon.c
index 1a25ce50a9fd,e925bb608e25..000000000000
--- a/drivers/video/fbdev/core/fbcon.c
+++ b/drivers/video/fbdev/core/fbcon.c
@@@ -1820,29 -1663,69 +1816,95 @@@ static void fbcon_redraw(struct vc_dat
  	}
  }
  
++<<<<<<< HEAD
 +static inline void fbcon_softback_note(struct vc_data *vc, int t,
 +				       int count)
 +{
 +	unsigned short *p;
 +
 +	if (vc->vc_num != fg_console)
 +		return;
 +	p = (unsigned short *) (vc->vc_origin + t * vc->vc_size_row);
 +
 +	while (count) {
 +		scr_memcpyw((u16 *) softback_in, p, vc->vc_size_row);
 +		count--;
 +		p = advance_row(p, 1);
 +		softback_in += vc->vc_size_row;
 +		if (softback_in == softback_end)
 +			softback_in = softback_buf;
 +		if (softback_in == softback_top) {
 +			softback_top += vc->vc_size_row;
 +			if (softback_top == softback_end)
 +				softback_top = softback_buf;
 +		}
 +	}
 +	softback_curr = softback_in;
++=======
+ static void fbcon_bmove_rec(struct vc_data *vc, struct fbcon_display *p, int sy, int sx,
+ 			    int dy, int dx, int height, int width, u_int y_break)
+ {
+ 	struct fb_info *info = registered_fb[con2fb_map[vc->vc_num]];
+ 	struct fbcon_ops *ops = info->fbcon_par;
+ 	u_int b;
+ 
+ 	if (sy < y_break && sy + height > y_break) {
+ 		b = y_break - sy;
+ 		if (dy < sy) {	/* Avoid trashing self */
+ 			fbcon_bmove_rec(vc, p, sy, sx, dy, dx, b, width,
+ 					y_break);
+ 			fbcon_bmove_rec(vc, p, sy + b, sx, dy + b, dx,
+ 					height - b, width, y_break);
+ 		} else {
+ 			fbcon_bmove_rec(vc, p, sy + b, sx, dy + b, dx,
+ 					height - b, width, y_break);
+ 			fbcon_bmove_rec(vc, p, sy, sx, dy, dx, b, width,
+ 					y_break);
+ 		}
+ 		return;
+ 	}
+ 
+ 	if (dy < y_break && dy + height > y_break) {
+ 		b = y_break - dy;
+ 		if (dy < sy) {	/* Avoid trashing self */
+ 			fbcon_bmove_rec(vc, p, sy, sx, dy, dx, b, width,
+ 					y_break);
+ 			fbcon_bmove_rec(vc, p, sy + b, sx, dy + b, dx,
+ 					height - b, width, y_break);
+ 		} else {
+ 			fbcon_bmove_rec(vc, p, sy + b, sx, dy + b, dx,
+ 					height - b, width, y_break);
+ 			fbcon_bmove_rec(vc, p, sy, sx, dy, dx, b, width,
+ 					y_break);
+ 		}
+ 		return;
+ 	}
+ 	ops->bmove(vc, info, real_y(p, sy), sx, real_y(p, dy), dx,
+ 		   height, width);
+ }
+ 
+ static void fbcon_bmove(struct vc_data *vc, int sy, int sx, int dy, int dx,
+ 			int height, int width)
+ {
+ 	struct fb_info *info = registered_fb[con2fb_map[vc->vc_num]];
+ 	struct fbcon_display *p = &fb_display[vc->vc_num];
+ 
+ 	if (fbcon_is_inactive(vc, info))
+ 		return;
+ 
+ 	if (!width || !height)
+ 		return;
+ 
+ 	/*  Split blits that cross physical y_wrap case.
+ 	 *  Pathological case involves 4 blits, better to use recursive
+ 	 *  code rather than unrolled case
+ 	 *
+ 	 *  Recursive invocations don't need to erase the cursor over and
+ 	 *  over again, so we use fbcon_bmove_rec()
+ 	 */
+ 	fbcon_bmove_rec(vc, p, sy, sx, dy, dx, height, width,
+ 			p->vrows - p->yscroll);
++>>>>>>> 689333136327 (fbcon: Move fbcon_bmove(_rec) functions)
  }
  
  static bool fbcon_scroll(struct vc_data *vc, unsigned int t, unsigned int b,
@@@ -2049,72 -1928,7 +2111,76 @@@
  }
  
  
++<<<<<<< HEAD
 +static void fbcon_bmove(struct vc_data *vc, int sy, int sx, int dy, int dx,
 +			int height, int width)
 +{
 +	struct fb_info *info = registered_fb[con2fb_map[vc->vc_num]];
 +	struct fbcon_display *p = &fb_display[vc->vc_num];
 +	
 +	if (fbcon_is_inactive(vc, info))
 +		return;
 +
 +	if (!width || !height)
 +		return;
 +
 +	/*  Split blits that cross physical y_wrap case.
 +	 *  Pathological case involves 4 blits, better to use recursive
 +	 *  code rather than unrolled case
 +	 *
 +	 *  Recursive invocations don't need to erase the cursor over and
 +	 *  over again, so we use fbcon_bmove_rec()
 +	 */
 +	fbcon_bmove_rec(vc, p, sy, sx, dy, dx, height, width,
 +			p->vrows - p->yscroll);
 +}
 +
 +static void fbcon_bmove_rec(struct vc_data *vc, struct fbcon_display *p, int sy, int sx,
 +			    int dy, int dx, int height, int width, u_int y_break)
 +{
 +	struct fb_info *info = registered_fb[con2fb_map[vc->vc_num]];
 +	struct fbcon_ops *ops = info->fbcon_par;
 +	u_int b;
 +
 +	if (sy < y_break && sy + height > y_break) {
 +		b = y_break - sy;
 +		if (dy < sy) {	/* Avoid trashing self */
 +			fbcon_bmove_rec(vc, p, sy, sx, dy, dx, b, width,
 +					y_break);
 +			fbcon_bmove_rec(vc, p, sy + b, sx, dy + b, dx,
 +					height - b, width, y_break);
 +		} else {
 +			fbcon_bmove_rec(vc, p, sy + b, sx, dy + b, dx,
 +					height - b, width, y_break);
 +			fbcon_bmove_rec(vc, p, sy, sx, dy, dx, b, width,
 +					y_break);
 +		}
 +		return;
 +	}
 +
 +	if (dy < y_break && dy + height > y_break) {
 +		b = y_break - dy;
 +		if (dy < sy) {	/* Avoid trashing self */
 +			fbcon_bmove_rec(vc, p, sy, sx, dy, dx, b, width,
 +					y_break);
 +			fbcon_bmove_rec(vc, p, sy + b, sx, dy + b, dx,
 +					height - b, width, y_break);
 +		} else {
 +			fbcon_bmove_rec(vc, p, sy + b, sx, dy + b, dx,
 +					height - b, width, y_break);
 +			fbcon_bmove_rec(vc, p, sy, sx, dy, dx, b, width,
 +					y_break);
 +		}
 +		return;
 +	}
 +	ops->bmove(vc, info, real_y(p, sy), sx, real_y(p, dy), dx,
 +		   height, width);
 +}
 +
 +static void updatescrollmode(struct fbcon_display *p,
++=======
+ static void updatescrollmode_accel(struct fbcon_display *p,
++>>>>>>> 689333136327 (fbcon: Move fbcon_bmove(_rec) functions)
  					struct fb_info *info,
  					struct vc_data *vc)
  {
* Unmerged path drivers/video/fbdev/core/fbcon.c
