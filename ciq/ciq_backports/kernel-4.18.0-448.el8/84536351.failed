scsi: lpfc: Fix multiple NVMe remoteport registration calls for the same NPort ID

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author James Smart <jsmart2021@gmail.com>
commit 845363516bb75bc35089b4093d1fae139f2fffc6
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/84536351.failed

When a target makes the mistake of registering a FC4 type with the fabric,
but then rejects a PRLI of that type, the lpfc driver incorrectly retries
the PRLI causing multiple registrations with the transport. The driver
needs to detect the reject reason data and stop any retry.

Rework the PRLI reject scenarios.

Link: https://lore.kernel.org/r/20220911221505.117655-6-jsmart2021@gmail.com
Co-developed-by: Justin Tee <justin.tee@broadcom.com>
	Signed-off-by: Justin Tee <justin.tee@broadcom.com>
	Signed-off-by: James Smart <jsmart2021@gmail.com>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit 845363516bb75bc35089b4093d1fae139f2fffc6)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/lpfc/lpfc_els.c
diff --cc drivers/scsi/lpfc/lpfc_els.c
index 45f7974bc4d8,642d90af4f09..000000000000
--- a/drivers/scsi/lpfc/lpfc_els.c
+++ b/drivers/scsi/lpfc/lpfc_els.c
@@@ -2205,11 -2200,7 +2205,15 @@@ lpfc_issue_els_plogi(struct lpfc_vport 
  	if (!elsiocb)
  		return 1;
  
++<<<<<<< HEAD
 +	spin_lock_irq(&ndlp->lock);
 +	ndlp->nlp_flag &= ~NLP_FCP_PRLI_RJT;
 +	spin_unlock_irq(&ndlp->lock);
 +
 +	pcmd = (uint8_t *) (((struct lpfc_dmabuf *) elsiocb->context2)->virt);
++=======
+ 	pcmd = (uint8_t *)elsiocb->cmd_dmabuf->virt;
++>>>>>>> 845363516bb7 (scsi: lpfc: Fix multiple NVMe remoteport registration calls for the same NPort ID)
  
  	/* For PLOGI request, remainder of payload is service parameters */
  	*((uint32_t *) (pcmd)) = ELS_CMD_PLOGI;
@@@ -4751,12 -4797,9 +4760,18 @@@ lpfc_els_retry(struct lpfc_hba *phba, s
  			 * on this rport.
  			 */
  			if (stat.un.b.lsRjtRsnCodeExp ==
++<<<<<<< HEAD
 +			    LSEXP_REQ_UNSUPPORTED && cmd == ELS_CMD_PRLI) {
 +				spin_lock_irq(&ndlp->lock);
 +				ndlp->nlp_flag |= NLP_FCP_PRLI_RJT;
 +				spin_unlock_irq(&ndlp->lock);
 +				retry = 0;
 +				goto out_retry;
++=======
+ 			    LSEXP_REQ_UNSUPPORTED) {
+ 				if (cmd == ELS_CMD_PRLI)
+ 					goto out_retry;
++>>>>>>> 845363516bb7 (scsi: lpfc: Fix multiple NVMe remoteport registration calls for the same NPort ID)
  			}
  			break;
  		}
diff --git a/drivers/scsi/lpfc/lpfc_disc.h b/drivers/scsi/lpfc/lpfc_disc.h
index b69e09812c15..c93c97ccb09e 100644
--- a/drivers/scsi/lpfc/lpfc_disc.h
+++ b/drivers/scsi/lpfc/lpfc_disc.h
@@ -188,7 +188,6 @@ struct lpfc_node_rrq {
 #define NLP_RNID_SND       0x00000400	/* sent RNID request for this entry */
 #define NLP_ELS_SND_MASK   0x000007e0	/* sent ELS request for this entry */
 #define NLP_NVMET_RECOV    0x00001000   /* NVMET auditing node for recovery. */
-#define NLP_FCP_PRLI_RJT   0x00002000   /* Rport does not support FCP PRLI. */
 #define NLP_UNREG_INP      0x00008000	/* UNREG_RPI cmd is in progress */
 #define NLP_DROPPED        0x00010000	/* Init ref count has been dropped */
 #define NLP_DELAY_TMO      0x00020000	/* delay timeout is running for node */
* Unmerged path drivers/scsi/lpfc/lpfc_els.c
diff --git a/drivers/scsi/lpfc/lpfc_hw.h b/drivers/scsi/lpfc/lpfc_hw.h
index 14a7dd7f96c8..986c4b3936da 100644
--- a/drivers/scsi/lpfc/lpfc_hw.h
+++ b/drivers/scsi/lpfc/lpfc_hw.h
@@ -702,6 +702,7 @@ struct ls_rjt {	/* Structure is in Big Endian format */
 #define LSEXP_OUT_OF_RESOURCE   0x29
 #define LSEXP_CANT_GIVE_DATA    0x2A
 #define LSEXP_REQ_UNSUPPORTED   0x2C
+#define LSEXP_NO_RSRC_ASSIGN    0x52
 			uint8_t vendorUnique;	/* FC Word 0, bit  0: 7 */
 		} b;
 	} un;
