wifi: mac80211: add link_id to eht.c code for MLO

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Johannes Berg <johannes.berg@intel.com>
commit 2b4ad30946d3117819d9a78d58a99b7c3de3ee91
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/2b4ad309.failed

Update the code in eht.c and add the link_id parameter where
necessary.

	Signed-off-by: Johannes Berg <johannes.berg@intel.com>
(cherry picked from commit 2b4ad30946d3117819d9a78d58a99b7c3de3ee91)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/mac80211/eht.c
diff --cc net/mac80211/eht.c
index 364ad0ef7692,de762a803c38..000000000000
--- a/net/mac80211/eht.c
+++ b/net/mac80211/eht.c
@@@ -12,9 -12,11 +12,15 @@@ ieee80211_eht_cap_ie_to_sta_eht_cap(str
  				    struct ieee80211_supported_band *sband,
  				    const u8 *he_cap_ie, u8 he_cap_len,
  				    const struct ieee80211_eht_cap_elem *eht_cap_ie_elem,
- 				    u8 eht_cap_len, struct sta_info *sta)
+ 				    u8 eht_cap_len, struct sta_info *sta,
+ 				    unsigned int link_id)
  {
++<<<<<<< HEAD
 +	struct ieee80211_sta_eht_cap *eht_cap = &sta->sta.eht_cap;
++=======
+ 	struct ieee80211_sta_eht_cap *eht_cap =
+ 		&sta->sta.link[link_id]->eht_cap;
++>>>>>>> 2b4ad30946d3 (wifi: mac80211: add link_id to eht.c code for MLO)
  	struct ieee80211_he_cap_elem *he_cap_ie_elem = (void *)he_cap_ie;
  	u8 eht_ppe_size = 0;
  	u8 mcs_nss_size;
@@@ -71,6 -73,8 +77,13 @@@
  
  	eht_cap->has_eht = true;
  
++<<<<<<< HEAD
 +	sta->cur_max_bandwidth = ieee80211_sta_cap_rx_bw(sta);
 +	sta->sta.bandwidth = ieee80211_sta_cur_vht_bw(sta);
++=======
+ 	sta->link[link_id]->cur_max_bandwidth =
+ 		ieee80211_sta_cap_rx_bw(sta, link_id);
+ 	sta->sta.link[link_id]->bandwidth =
+ 		ieee80211_sta_cur_vht_bw(sta, link_id);
++>>>>>>> 2b4ad30946d3 (wifi: mac80211: add link_id to eht.c code for MLO)
  }
diff --git a/net/mac80211/cfg.c b/net/mac80211/cfg.c
index f7b5957d466a..014dcdbfcdcc 100644
--- a/net/mac80211/cfg.c
+++ b/net/mac80211/cfg.c
@@ -1758,7 +1758,7 @@ static int sta_apply_parameters(struct ieee80211_local *local,
 						    params->he_capa_len,
 						    params->eht_capa,
 						    params->eht_capa_len,
-						    sta);
+						    sta, 0);
 
 	if (params->opmode_notif_used) {
 		/* returned value is only needed for rc update, but the
* Unmerged path net/mac80211/eht.c
diff --git a/net/mac80211/ieee80211_i.h b/net/mac80211/ieee80211_i.h
index aebf2fa517be..9b3eaf31b69d 100644
--- a/net/mac80211/ieee80211_i.h
+++ b/net/mac80211/ieee80211_i.h
@@ -2546,5 +2546,6 @@ ieee80211_eht_cap_ie_to_sta_eht_cap(struct ieee80211_sub_if_data *sdata,
 				    struct ieee80211_supported_band *sband,
 				    const u8 *he_cap_ie, u8 he_cap_len,
 				    const struct ieee80211_eht_cap_elem *eht_cap_ie_elem,
-				    u8 eht_cap_len, struct sta_info *sta);
+				    u8 eht_cap_len, struct sta_info *sta,
+				    unsigned int link_id);
 #endif /* IEEE80211_I_H */
diff --git a/net/mac80211/mlme.c b/net/mac80211/mlme.c
index dbd8b816487b..9d3ab0179973 100644
--- a/net/mac80211/mlme.c
+++ b/net/mac80211/mlme.c
@@ -3598,7 +3598,7 @@ static bool ieee80211_assoc_success(struct ieee80211_sub_if_data *sdata,
 							    elems->he_cap_len,
 							    elems->eht_cap,
 							    elems->eht_cap_len,
-							    sta);
+							    sta, 0);
 
 			bss_conf->eht_support = sta->sta.eht_cap.has_eht;
 		} else {
