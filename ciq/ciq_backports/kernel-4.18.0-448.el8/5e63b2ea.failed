platform/x86: i2c-multi-instantiate: Rename it for a generic serial driver name

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Lucas Tanure <tanureal@opensource.cirrus.com>
commit 5e63b2ea3dfbab9307e197004a3c5ee4e1442582
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/5e63b2ea.failed

Rename I2C multi instantiate driver to serial-multi-instantiate for
upcoming addition of SPI support

	Signed-off-by: Lucas Tanure <tanureal@opensource.cirrus.com>
	Signed-off-by: Stefan Binding <sbinding@opensource.cirrus.com>
Link: https://lore.kernel.org/r/20220121172431.6876-6-sbinding@opensource.cirrus.com
	Reviewed-by: Hans de Goede <hdegoede@redhat.com>
	Signed-off-by: Hans de Goede <hdegoede@redhat.com>
(cherry picked from commit 5e63b2ea3dfbab9307e197004a3c5ee4e1442582)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/platform/x86/Kconfig
#	drivers/platform/x86/Makefile
diff --cc drivers/platform/x86/Kconfig
index 2d2f25961e5d,2e656909a866..000000000000
--- a/drivers/platform/x86/Kconfig
+++ b/drivers/platform/x86/Kconfig
@@@ -922,108 -897,150 +922,121 @@@ config ACPI_CMP
  	  keys as input device, backlight device, tablet and accelerometer
  	  devices.
  
 -config COMPAL_LAPTOP
 -	tristate "Compal (and others) Laptop Extras"
 -	depends on ACPI
 -	depends on BACKLIGHT_CLASS_DEVICE
 -	depends on ACPI_VIDEO || ACPI_VIDEO = n
 -	depends on RFKILL
 -	depends on HWMON
 -	depends on POWER_SUPPLY
 -	help
 -	  This is a driver for laptops built by Compal, and some models by
 -	  other brands (e.g. Dell, Toshiba).
 +config INTEL_CHT_INT33FE
 +	tristate "Intel Cherry Trail ACPI INT33FE Driver"
 +	depends on X86 && ACPI && I2C && REGULATOR
 +	depends on CHARGER_BQ24190=y || (CHARGER_BQ24190=m && m)
 +	---help---
 +	  This driver add support for the INT33FE ACPI device found on
 +	  some Intel Cherry Trail devices.
 +
 +	  The INT33FE ACPI device has a CRS table with I2cSerialBusV2
 +	  resources for 3 devices: Maxim MAX17047 Fuel Gauge Controller,
 +	  FUSB302 USB Type-C Controller and PI3USB30532 USB switch.
 +	  This driver instantiates i2c-clients for these, so that standard
 +	  i2c drivers for these chips can bind to the them.
 +
 +	  If you enable this driver it is advised to also select
 +	  CONFIG_TYPEC_FUSB302=m and CONFIG_BATTERY_MAX17042=m.
 +
 +config INTEL_INT0002_VGPIO
 +	tristate "Intel ACPI INT0002 Virtual GPIO driver"
 +	depends on GPIOLIB && ACPI
 +	select GPIOLIB_IRQCHIP
 +	---help---
 +	  Some peripherals on Bay Trail and Cherry Trail platforms signal a
 +	  Power Management Event (PME) to the Power Management Controller (PMC)
 +	  to wakeup the system. When this happens software needs to explicitly
 +	  clear the PME bus 0 status bit in the GPE0a_STS register to avoid an
 +	  IRQ storm on IRQ 9.
 +
 +	  This is modelled in ACPI through the INT0002 ACPI device, which is
 +	  called a "Virtual GPIO controller" in ACPI because it defines the
 +	  event handler to call when the PME triggers through _AEI and _L02
 +	  methods as would be done for a real GPIO interrupt in ACPI.
  
 -	  It adds support for rfkill, Bluetooth, WLAN, LCD brightness, hwmon
 -	  and battery charging level control.
 +	  To compile this driver as a module, choose M here: the module will
 +	  be called intel_int0002_vgpio.
  
 -config LG_LAPTOP
 -	tristate "LG Laptop Extras"
 +config INTEL_HID_EVENT
 +	tristate "INTEL HID Event"
  	depends on ACPI
 -	depends on ACPI_WMI
  	depends on INPUT
  	select INPUT_SPARSEKMAP
 -	select NEW_LEDS
 -	select LEDS_CLASS
 -	help
 -	 This driver adds support for hotkeys as well as control of keyboard
 -	 backlight, battery maximum charge level and various other ACPI
 -	 features.
 -
 -	 If you have an LG Gram laptop, say Y or M here.
 -
 -config PANASONIC_LAPTOP
 -	tristate "Panasonic Laptop Extras"
 -	depends on INPUT && ACPI
 -	depends on BACKLIGHT_CLASS_DEVICE
 -	select INPUT_SPARSEKMAP
 -	help
 -	  This driver adds support for access to backlight control and hotkeys
 -	  on Panasonic Let's Note laptops.
 -
 -	  If you have a Panasonic Let's note laptop (such as the R1(N variant),
 -	  R2, R3, R5, T2, W2 and Y2 series), say Y.
 -
 -config SONY_LAPTOP
 -	tristate "Sony Laptop Extras"
 -	depends on ACPI
 -	depends on ACPI_VIDEO || ACPI_VIDEO = n
 -	depends on BACKLIGHT_CLASS_DEVICE
 -	depends on INPUT
 -	depends on RFKILL
 -	help
 -	  This mini-driver drives the SNC and SPIC devices present in the ACPI
 -	  BIOS of the Sony Vaio laptops.
 -
 -	  It gives access to some extra laptop functionalities like Bluetooth,
 -	  screen brightness control, Fn keys and allows powering on/off some
 -	  devices.
 -
 -	  Read <file:Documentation/admin-guide/laptops/sony-laptop.rst> for more information.
 -
 -config SONYPI_COMPAT
 -	bool "Sonypi compatibility"
 -	depends on SONY_LAPTOP
 -	help
 -	  Build the sonypi driver compatibility code into the sony-laptop driver.
 -
 -config SYSTEM76_ACPI
 -	tristate "System76 ACPI Driver"
 -	depends on ACPI
 -	depends on ACPI_BATTERY
 -	depends on HWMON
 -	depends on INPUT
 -	select NEW_LEDS
 -	select LEDS_CLASS
 -	select LEDS_TRIGGERS
  	help
 -	  This is a driver for System76 laptops running open firmware. It adds
 -	  support for Fn-Fx key combinations, keyboard backlight, and airplane mode
 -	  LEDs.
 +	  This driver provides support for the Intel HID Event hotkey interface.
 +	  Some laptops require this driver for hotkey support.
  
 -	  If you have a System76 laptop running open firmware, say Y or M here.
 +	  To compile this driver as a module, choose M here: the module will
 +	  be called intel_hid.
  
 -config TOPSTAR_LAPTOP
 -	tristate "Topstar Laptop Extras"
++<<<<<<< HEAD
 +config INTEL_VBTN
 +	tristate "INTEL VIRTUAL BUTTON"
  	depends on ACPI
  	depends on INPUT
  	select INPUT_SPARSEKMAP
 -	select LEDS_CLASS
 -	select NEW_LEDS
  	help
 -	  This driver adds support for hotkeys found on Topstar laptops.
 -
 -	  If you have a Topstar laptop, say Y or M here.
 +	  This driver provides support for the Intel Virtual Button interface.
 +	  Some laptops require this driver for power button support.
  
 +	  To compile this driver as a module, choose M here: the module will
 +	  be called intel_vbtn.
++=======
+ config SERIAL_MULTI_INSTANTIATE
+ 	tristate "Serial bus multi instantiate pseudo device driver"
+ 	depends on I2C && ACPI
+ 	help
+ 	  Some ACPI-based systems list multiple devices in a single ACPI
+ 	  firmware-node. This driver will instantiate separate clients
+ 	  for each device in the firmware-node.
+ 
+ 	  To compile this driver as a module, choose M here: the module
+ 	  will be called serial-multi-instantiate.
++>>>>>>> 5e63b2ea3dfb (platform/x86: i2c-multi-instantiate: Rename it for a generic serial driver name)
  
 -config MLX_PLATFORM
 -	tristate "Mellanox Technologies platform support"
 -	depends on I2C && REGMAP
 -	help
 -	  This option enables system support for the Mellanox Technologies
 -	  platform. The Mellanox systems provide data center networking
 -	  solutions based on Virtual Protocol Interconnect (VPI) technology
 -	  enable seamless connectivity to 56/100Gb/s InfiniBand or 10/40/56GbE
 -	  connection.
 +config INTEL_SCU_IPC
 +	bool "Intel SCU IPC Support"
 +	depends on X86_INTEL_MID
 +	default y
 +	---help---
 +	  IPC is used to bridge the communications between kernel and SCU on
 +	  some embedded Intel x86 platforms. This is not needed for PC-type
 +	  machines.
  
 -	  If you have a Mellanox system, say Y or M here.
 +config INTEL_SCU_IPC_UTIL
 +	tristate "Intel SCU IPC utility driver"
 +	depends on INTEL_SCU_IPC
 +	default y
 +	---help---
 +	  The IPC Util driver provides an interface with the SCU enabling
 +	  low level access for debug work and updating the firmware. Say
 +	  N unless you will be doing this on an Intel MID platform.
  
 -config TOUCHSCREEN_DMI
 -	bool "DMI based touchscreen configuration info"
 -	depends on ACPI && DMI && I2C=y && TOUCHSCREEN_SILEAD
 -	select EFI_EMBEDDED_FIRMWARE if EFI
 -	help
 -	  Certain ACPI based tablets with e.g. Silead or Chipone touchscreens
 -	  do not have enough data in ACPI tables for the touchscreen driver to
 -	  handle the touchscreen properly, as OEMs expect the data to be baked
 -	  into the tablet model specific version of the driver shipped with the
 -	  the OS-image for the device. This option supplies the missing info.
 -	  Enable this for x86 tablets with Silead or Chipone touchscreens.
 -
 -config X86_ANDROID_TABLETS
 -	tristate "X86 Android tablet support"
 -	depends on I2C && SERIAL_DEV_BUS && ACPI && GPIOLIB
 +config INTEL_MID_POWER_BUTTON
 +	tristate "power button driver for Intel MID platforms"
 +	depends on INTEL_SCU_IPC && INPUT
  	help
 -	  X86 tablets which ship with Android as (part of) the factory image
 -	  typically have various problems with their DSDTs. The factory kernels
 -	  shipped on these devices typically have device addresses and GPIOs
 -	  hardcoded in the kernel, rather than specified in their DSDT.
 +	  This driver handles the power button on the Intel MID platforms.
  
 -	  With the DSDT containing a random collection of devices which may or
 -	  may not actually be present. This driver contains various fixes for
 -	  such tablets, including instantiating kernel devices for devices which
 -	  are missing from the DSDT.
 +	  If unsure, say N.
  
 -	  If you have a x86 Android tablet say Y or M here, for a generic x86
 -	  distro config say M here.
 +config INTEL_MFLD_THERMAL
 +       tristate "Thermal driver for Intel Medfield platform"
 +       depends on MFD_INTEL_MSIC && THERMAL
 +       help
 +         Say Y here to enable thermal driver support for the  Intel Medfield
 +         platform.
 +
 +config INTEL_IPS
 +	tristate "Intel Intelligent Power Sharing"
 +	depends on ACPI && PCI
 +	---help---
 +	  Intel Calpella platforms support dynamic power sharing between the
 +	  CPU and GPU, maximizing performance in a given TDP.  This driver,
 +	  along with the CPU frequency and i915 drivers, provides that
 +	  functionality.  If in doubt, say Y here; it will only load on
 +	  supported platforms.
  
  config FW_ATTR_CLASS
  	tristate
diff --cc drivers/platform/x86/Makefile
index 5e3e8e990fd8,9527088bba7f..000000000000
--- a/drivers/platform/x86/Makefile
+++ b/drivers/platform/x86/Makefile
@@@ -61,43 -99,33 +61,67 @@@ obj-$(CONFIG_INTEL_WMI_THUNDERBOLT)	+= 
  # before toshiba_acpi initializes
  obj-$(CONFIG_ACPI_TOSHIBA)	+= toshiba_acpi.o
  
 -# Laptop drivers
 -obj-$(CONFIG_ACPI_CMPC)		+= classmate-laptop.o
 -obj-$(CONFIG_COMPAL_LAPTOP)	+= compal-laptop.o
 -obj-$(CONFIG_LG_LAPTOP)		+= lg-laptop.o
 -obj-$(CONFIG_PANASONIC_LAPTOP)	+= panasonic-laptop.o
 -obj-$(CONFIG_SONY_LAPTOP)	+= sony-laptop.o
 -obj-$(CONFIG_SYSTEM76_ACPI)	+= system76_acpi.o
 -obj-$(CONFIG_TOPSTAR_LAPTOP)	+= topstar-laptop.o
 -
 +obj-$(CONFIG_TOSHIBA_BT_RFKILL)	+= toshiba_bluetooth.o
 +obj-$(CONFIG_TOSHIBA_HAPS)	+= toshiba_haps.o
 +obj-$(CONFIG_TOSHIBA_WMI)	+= toshiba-wmi.o
 +obj-$(CONFIG_INTEL_CHT_INT33FE)	+= intel_cht_int33fe.o
 +obj-$(CONFIG_INTEL_INT0002_VGPIO) += intel_int0002_vgpio.o
 +obj-$(CONFIG_INTEL_HID_EVENT)	+= intel-hid.o
 +obj-$(CONFIG_INTEL_VBTN)	+= intel-vbtn.o
 +obj-$(CONFIG_INTEL_SCU_IPC)	+= intel_scu_ipc.o
 +obj-$(CONFIG_INTEL_SCU_IPC_UTIL) += intel_scu_ipcutil.o
 +obj-$(CONFIG_INTEL_MFLD_THERMAL) += intel_mid_thermal.o
 +obj-$(CONFIG_INTEL_IPS)		+= intel_ips.o
 +obj-$(CONFIG_XO1_RFKILL)	+= xo1-rfkill.o
 +obj-$(CONFIG_XO15_EBOOK)	+= xo15-ebook.o
 +obj-$(CONFIG_IBM_RTL)		+= ibm_rtl.o
 +obj-$(CONFIG_SAMSUNG_LAPTOP)	+= samsung-laptop.o
 +obj-$(CONFIG_MXM_WMI)		+= mxm-wmi.o
 +obj-$(CONFIG_INTEL_MID_POWER_BUTTON)	+= intel_mid_powerbtn.o
 +obj-$(CONFIG_INTEL_OAKTRAIL)	+= intel_oaktrail.o
 +obj-$(CONFIG_SAMSUNG_Q10)	+= samsung-q10.o
 +obj-$(CONFIG_APPLE_GMUX)	+= apple-gmux.o
 +obj-$(CONFIG_INTEL_RST)		+= intel-rst.o
 +obj-$(CONFIG_INTEL_SMARTCONNECT)	+= intel-smartconnect.o
 +
++<<<<<<< HEAD
 +obj-$(CONFIG_PVPANIC)           += pvpanic.o
 +obj-$(CONFIG_ALIENWARE_WMI)	+= alienware-wmi.o
 +obj-$(CONFIG_INTEL_PMC_IPC)	+= intel_pmc_ipc.o
 +obj-$(CONFIG_SILEAD_DMI)	+= silead_dmi.o
 +obj-$(CONFIG_SURFACE_PRO3_BUTTON)	+= surfacepro3_button.o
 +obj-$(CONFIG_SURFACE_3_BUTTON)	+= surface3_button.o
 +obj-$(CONFIG_INTEL_PUNIT_IPC)  += intel_punit_ipc.o
 +obj-$(CONFIG_INTEL_BXTWC_PMIC_TMU)	+= intel_bxtwc_tmu.o
 +obj-$(CONFIG_INTEL_TELEMETRY)	+= intel_telemetry_core.o \
 +				   intel_telemetry_pltdrv.o \
 +				   intel_telemetry_debugfs.o
 +obj-$(CONFIG_PMC_ATOM)		+= pmc_atom.o
 +obj-$(CONFIG_MLX_PLATFORM)	+= mlx-platform.o
 +obj-$(CONFIG_INTEL_TURBO_MAX_3) += intel_turbo_max_3.o
 +obj-$(CONFIG_INTEL_CHTDC_TI_PWRBTN)	+= intel_chtdc_ti_pwrbtn.o
 +obj-$(CONFIG_I2C_MULTI_INSTANTIATE)	+= i2c-multi-instantiate.o
 +obj-$(CONFIG_FW_ATTR_CLASS)		+= firmware_attributes_class.o
++=======
+ # Platform drivers
+ obj-$(CONFIG_FW_ATTR_CLASS)		+= firmware_attributes_class.o
+ obj-$(CONFIG_SERIAL_MULTI_INSTANTIATE)	+= serial-multi-instantiate.o
+ obj-$(CONFIG_MLX_PLATFORM)		+= mlx-platform.o
+ obj-$(CONFIG_TOUCHSCREEN_DMI)		+= touchscreen_dmi.o
+ obj-$(CONFIG_WIRELESS_HOTKEY)		+= wireless-hotkey.o
+ obj-$(CONFIG_X86_ANDROID_TABLETS)	+= x86-android-tablets.o
+ 
+ # Intel uncore drivers
+ obj-$(CONFIG_INTEL_IPS)				+= intel_ips.o
+ 
+ # Intel PMIC / PMC / P-Unit devices
+ obj-$(CONFIG_INTEL_SCU_IPC)		+= intel_scu_ipc.o
+ obj-$(CONFIG_INTEL_SCU_PCI)		+= intel_scu_pcidrv.o
+ obj-$(CONFIG_INTEL_SCU_PLATFORM)	+= intel_scu_pltdrv.o
+ obj-$(CONFIG_INTEL_SCU_WDT)		+= intel_scu_wdt.o
+ obj-$(CONFIG_INTEL_SCU_IPC_UTIL)	+= intel_scu_ipcutil.o
+ obj-$(CONFIG_PMC_ATOM)			+= pmc_atom.o
+ 
+ # Siemens Simatic Industrial PCs
+ obj-$(CONFIG_SIEMENS_SIMATIC_IPC)	+= simatic-ipc.o
++>>>>>>> 5e63b2ea3dfb (platform/x86: i2c-multi-instantiate: Rename it for a generic serial driver name)
diff --git a/MAINTAINERS b/MAINTAINERS
index 3132fcc81562..0f97e4576eea 100644
--- a/MAINTAINERS
+++ b/MAINTAINERS
@@ -383,11 +383,11 @@ L:	linux-acpi@vger.kernel.org
 S:	Maintained
 F:	drivers/acpi/arm64
 
-ACPI I2C MULTI INSTANTIATE DRIVER
+ACPI SERIAL MULTI INSTANTIATE DRIVER
 M:	Hans de Goede <hdegoede@redhat.com>
 L:	platform-driver-x86@vger.kernel.org
 S:	Maintained
-F:	drivers/platform/x86/i2c-multi-instantiate.c
+F:	drivers/platform/x86/serial-multi-instantiate.c
 
 ACPI PCC(Platform Communication Channel) MAILBOX DRIVER
 M:	Sudeep Holla <sudeep.holla@arm.com>
diff --git a/drivers/acpi/scan.c b/drivers/acpi/scan.c
index 2862a327af91..c27fe5356cae 100644
--- a/drivers/acpi/scan.c
+++ b/drivers/acpi/scan.c
@@ -1636,12 +1636,13 @@ static bool acpi_device_enumeration_by_parent(struct acpi_device *device)
 	struct list_head resource_list;
 	bool is_serial_bus_slave = false;
 	/*
-	 * These devices have multiple I2cSerialBus resources and an i2c-client
-	 * must be instantiated for each, each with its own i2c_device_id.
-	 * Normally we only instantiate an i2c-client for the first resource,
-	 * using the ACPI HID as id. These special cases are handled by the
-	 * drivers/platform/x86/i2c-multi-instantiate.c driver, which knows
-	 * which i2c_device_id to use for each resource.
+	 * These devices have multiple SerialBus resources and a client
+	 * device must be instantiated for each of them, each with
+	 * its own device id.
+	 * Normally we only instantiate one client device for the first
+	 * resource, using the ACPI HID as id. These special cases are handled
+	 * by the drivers/platform/x86/serial-multi-instantiate.c driver, which
+	 * knows which client device id to use for each resource.
 	 */
 	static const struct acpi_device_id i2c_multi_instantiate_ids[] = {
 		{"BSG1160", },
* Unmerged path drivers/platform/x86/Kconfig
* Unmerged path drivers/platform/x86/Makefile
diff --git a/drivers/platform/x86/i2c-multi-instantiate.c b/drivers/platform/x86/serial-multi-instantiate.c
similarity index 51%
rename from drivers/platform/x86/i2c-multi-instantiate.c
rename to drivers/platform/x86/serial-multi-instantiate.c
index 4956a1df5b90..9af5bcd466d1 100644
--- a/drivers/platform/x86/i2c-multi-instantiate.c
+++ b/drivers/platform/x86/serial-multi-instantiate.c
@@ -1,7 +1,7 @@
 // SPDX-License-Identifier: GPL-2.0+
 /*
- * I2C multi-instantiate driver, pseudo driver to instantiate multiple
- * i2c-clients from a single fwnode.
+ * Serial multi-instantiate driver, pseudo driver to instantiate multiple
+ * client devices from a single fwnode.
  *
  * Copyright 2018 Hans de Goede <hdegoede@redhat.com>
  */
@@ -21,29 +21,29 @@
 #define IRQ_RESOURCE_GPIO	1
 #define IRQ_RESOURCE_APIC	2
 
-struct i2c_inst_data {
+struct smi_instance {
 	const char *type;
 	unsigned int flags;
 	int irq_idx;
 };
 
-struct i2c_multi_inst_data {
-	int num_clients;
-	struct i2c_client *clients[];
+struct smi {
+	int i2c_num;
+	struct i2c_client *i2c_devs[];
 };
 
-static int i2c_multi_inst_probe(struct platform_device *pdev)
+static int smi_probe(struct platform_device *pdev)
 {
-	struct i2c_multi_inst_data *multi;
-	const struct i2c_inst_data *inst_data;
 	struct i2c_board_info board_info = {};
+	const struct smi_instance *inst;
 	struct device *dev = &pdev->dev;
 	struct acpi_device *adev;
+	struct smi *smi;
 	char name[32];
 	int i, ret;
 
-	inst_data = device_get_match_data(dev);
-	if (!inst_data) {
+	inst = device_get_match_data(dev);
+	if (!inst) {
 		dev_err(dev, "Error ACPI match data is missing\n");
 		return -ENODEV;
 	}
@@ -55,33 +55,32 @@ static int i2c_multi_inst_probe(struct platform_device *pdev)
 	if (ret < 0)
 		return ret;
 
-	multi = devm_kmalloc(dev, struct_size(multi, clients, ret), GFP_KERNEL);
-	if (!multi)
+	smi = devm_kmalloc(dev, struct_size(smi, i2c_devs, ret), GFP_KERNEL);
+	if (!smi)
 		return -ENOMEM;
 
-	multi->num_clients = ret;
+	smi->i2c_num = ret;
 
-	for (i = 0; i < multi->num_clients && inst_data[i].type; i++) {
+	for (i = 0; i < smi->i2c_num && inst[i].type; i++) {
 		memset(&board_info, 0, sizeof(board_info));
-		strlcpy(board_info.type, inst_data[i].type, I2C_NAME_SIZE);
-		snprintf(name, sizeof(name), "%s-%s.%d", dev_name(dev),
-			 inst_data[i].type, i);
+		strlcpy(board_info.type, inst[i].type, I2C_NAME_SIZE);
+		snprintf(name, sizeof(name), "%s-%s.%d", dev_name(dev), inst[i].type, i);
 		board_info.dev_name = name;
-		switch (inst_data[i].flags & IRQ_RESOURCE_TYPE) {
+		switch (inst[i].flags & IRQ_RESOURCE_TYPE) {
 		case IRQ_RESOURCE_GPIO:
-			ret = acpi_dev_gpio_irq_get(adev, inst_data[i].irq_idx);
+			ret = acpi_dev_gpio_irq_get(adev, inst[i].irq_idx);
 			if (ret < 0) {
 				dev_err(dev, "Error requesting irq at index %d: %d\n",
-					inst_data[i].irq_idx, ret);
+						inst[i].irq_idx, ret);
 				goto error;
 			}
 			board_info.irq = ret;
 			break;
 		case IRQ_RESOURCE_APIC:
-			ret = platform_get_irq(pdev, inst_data[i].irq_idx);
+			ret = platform_get_irq(pdev, inst[i].irq_idx);
 			if (ret < 0) {
 				dev_dbg(dev, "Error requesting irq at index %d: %d\n",
-					inst_data[i].irq_idx, ret);
+					inst[i].irq_idx, ret);
 				goto error;
 			}
 			board_info.irq = ret;
@@ -90,48 +89,48 @@ static int i2c_multi_inst_probe(struct platform_device *pdev)
 			board_info.irq = 0;
 			break;
 		}
-		multi->clients[i] = i2c_acpi_new_device(dev, i, &board_info);
-		if (IS_ERR(multi->clients[i])) {
-			ret = dev_err_probe(dev, PTR_ERR(multi->clients[i]),
+		smi->i2c_devs[i] = i2c_acpi_new_device(dev, i, &board_info);
+		if (IS_ERR(smi->i2c_devs[i])) {
+			ret = dev_err_probe(dev, PTR_ERR(smi->i2c_devs[i]),
 					    "Error creating i2c-client, idx %d\n", i);
 			goto error;
 		}
 	}
-	if (i < multi->num_clients) {
+	if (i < smi->i2c_num) {
 		dev_err(dev, "Error finding driver, idx %d\n", i);
 		ret = -ENODEV;
 		goto error;
 	}
 
-	platform_set_drvdata(pdev, multi);
+	platform_set_drvdata(pdev, smi);
 	return 0;
 
 error:
 	while (--i >= 0)
-		i2c_unregister_device(multi->clients[i]);
+		i2c_unregister_device(smi->i2c_devs[i]);
 
 	return ret;
 }
 
-static int i2c_multi_inst_remove(struct platform_device *pdev)
+static int smi_remove(struct platform_device *pdev)
 {
-	struct i2c_multi_inst_data *multi = platform_get_drvdata(pdev);
+	struct smi *smi = platform_get_drvdata(pdev);
 	int i;
 
-	for (i = 0; i < multi->num_clients; i++)
-		i2c_unregister_device(multi->clients[i]);
+	for (i = 0; i < smi->i2c_num; i++)
+		i2c_unregister_device(smi->i2c_devs[i]);
 
 	return 0;
 }
 
-static const struct i2c_inst_data bsg1160_data[]  = {
+static const struct smi_instance bsg1160_data[]  = {
 	{ "bmc150_accel", IRQ_RESOURCE_GPIO, 0 },
 	{ "bmc150_magn" },
 	{ "bmg160" },
 	{}
 };
 
-static const struct i2c_inst_data bsg2150_data[]  = {
+static const struct smi_instance bsg2150_data[]  = {
 	{ "bmc150_accel", IRQ_RESOURCE_GPIO, 0 },
 	{ "bmc150_magn" },
 	/* The resources describe a 3th client, but it is not really there. */
@@ -139,7 +138,7 @@ static const struct i2c_inst_data bsg2150_data[]  = {
 	{}
 };
 
-static const struct i2c_inst_data int3515_data[]  = {
+static const struct smi_instance int3515_data[]  = {
 	{ "tps6598x", IRQ_RESOURCE_APIC, 0 },
 	{ "tps6598x", IRQ_RESOURCE_APIC, 1 },
 	{ "tps6598x", IRQ_RESOURCE_APIC, 2 },
@@ -148,27 +147,27 @@ static const struct i2c_inst_data int3515_data[]  = {
 };
 
 /*
- * Note new device-ids must also be added to i2c_multi_instantiate_ids in
+ * Note new device-ids must also be added to ignore_serial_bus_ids in
  * drivers/acpi/scan.c: acpi_device_enumeration_by_parent().
  */
-static const struct acpi_device_id i2c_multi_inst_acpi_ids[] = {
+static const struct acpi_device_id smi_acpi_ids[] = {
 	{ "BSG1160", (unsigned long)bsg1160_data },
 	{ "BSG2150", (unsigned long)bsg2150_data },
 	{ "INT3515", (unsigned long)int3515_data },
 	{ }
 };
-MODULE_DEVICE_TABLE(acpi, i2c_multi_inst_acpi_ids);
+MODULE_DEVICE_TABLE(acpi, smi_acpi_ids);
 
-static struct platform_driver i2c_multi_inst_driver = {
+static struct platform_driver smi_driver = {
 	.driver	= {
-		.name = "I2C multi instantiate pseudo device driver",
-		.acpi_match_table = i2c_multi_inst_acpi_ids,
+		.name = "Serial bus multi instantiate pseudo device driver",
+		.acpi_match_table = smi_acpi_ids,
 	},
-	.probe = i2c_multi_inst_probe,
-	.remove = i2c_multi_inst_remove,
+	.probe = smi_probe,
+	.remove = smi_remove,
 };
-module_platform_driver(i2c_multi_inst_driver);
+module_platform_driver(smi_driver);
 
-MODULE_DESCRIPTION("I2C multi instantiate pseudo device driver");
+MODULE_DESCRIPTION("Serial multi instantiate pseudo device driver");
 MODULE_AUTHOR("Hans de Goede <hdegoede@redhat.com>");
 MODULE_LICENSE("GPL");
