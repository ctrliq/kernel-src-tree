ALSA: hda: cs35l41: Move external boost handling to lib for ASoC use

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Lucas Tanure <tanureal@opensource.cirrus.com>
commit 5577dd2329d03ef88a7c87c17d4c127f3d666192
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/5577dd23.failed

To add support for external boost for ASoC move the HDA external
boost implementation to the shared lib.

	Signed-off-by: Lucas Tanure <tanureal@opensource.cirrus.com>
Link: https://lore.kernel.org/r/20220413083728.10730-15-tanureal@opensource.cirrus.com
	Signed-off-by: Takashi Iwai <tiwai@suse.de>
(cherry picked from commit 5577dd2329d03ef88a7c87c17d4c127f3d666192)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/sound/cs35l41.h
#	sound/pci/hda/cs35l41_hda.c
#	sound/soc/codecs/cs35l41-tables.c
diff --cc include/sound/cs35l41.h
index 1f1e3c6c9be1,ac629f852f2a..000000000000
--- a/include/sound/cs35l41.h
+++ b/include/sound/cs35l41.h
@@@ -27,8 -771,43 +27,43 @@@ struct cs35l41_platform_data 
  	int bst_ipk;
  	int bst_cap;
  	int dout_hiz;
 -	struct cs35l41_gpio_cfg gpio1;
 -	struct cs35l41_gpio_cfg gpio2;
 -	unsigned int spk_pos;
 -
 -	enum cs35l41_boost_type bst_type;
 +	struct cs35l41_irq_cfg irq_config1;
 +	struct cs35l41_irq_cfg irq_config2;
  };
  
++<<<<<<< HEAD
++=======
+ struct cs35l41_otp_packed_element_t {
+ 	u32 reg;
+ 	u8 shift;
+ 	u8 size;
+ };
+ 
+ struct cs35l41_otp_map_element_t {
+ 	u32 id;
+ 	u32 num_elements;
+ 	const struct cs35l41_otp_packed_element_t *map;
+ 	u32 bit_offset;
+ 	u32 word_offset;
+ };
+ 
+ extern struct regmap_config cs35l41_regmap_i2c;
+ extern struct regmap_config cs35l41_regmap_spi;
+ 
+ int cs35l41_test_key_unlock(struct device *dev, struct regmap *regmap);
+ int cs35l41_test_key_lock(struct device *dev, struct regmap *regmap);
+ int cs35l41_otp_unpack(struct device *dev, struct regmap *regmap);
+ int cs35l41_register_errata_patch(struct device *dev, struct regmap *reg, unsigned int reg_revid);
+ int cs35l41_set_channels(struct device *dev, struct regmap *reg,
+ 			 unsigned int tx_num, unsigned int *tx_slot,
+ 			 unsigned int rx_num, unsigned int *rx_slot);
+ int cs35l41_boost_config(struct device *dev, struct regmap *regmap, int boost_ind, int boost_cap,
+ 			 int boost_ipk);
+ int cs35l41_gpio_config(struct regmap *regmap, struct cs35l41_hw_cfg *hw_cfg);
+ int cs35l41_init_boost(struct device *dev, struct regmap *regmap,
+ 		       struct cs35l41_hw_cfg *hw_cfg);
+ bool cs35l41_safe_reset(struct regmap *regmap, enum cs35l41_boost_type b_type);
+ int cs35l41_global_enable(struct regmap *regmap, enum cs35l41_boost_type b_type, int enable);
+ 
++>>>>>>> 5577dd2329d0 (ALSA: hda: cs35l41: Move external boost handling to lib for ASoC use)
  #endif /* __CS35L41_H */
diff --cc sound/soc/codecs/cs35l41-tables.c
index d1a4946ef8e0,2d3b577a63e3..000000000000
--- a/sound/soc/codecs/cs35l41-tables.c
+++ b/sound/soc/codecs/cs35l41-tables.c
@@@ -626,3 -737,477 +626,480 @@@ struct regmap_config cs35l41_regmap_sp
  	.cache_type = REGCACHE_RBTREE,
  };
  EXPORT_SYMBOL_GPL(cs35l41_regmap_spi);
++<<<<<<< HEAD:sound/soc/codecs/cs35l41-tables.c
++=======
+ 
+ static const struct cs35l41_otp_map_element_t *cs35l41_find_otp_map(u32 otp_id)
+ {
+ 	int i;
+ 
+ 	for (i = 0; i < ARRAY_SIZE(cs35l41_otp_map_map); i++) {
+ 		if (cs35l41_otp_map_map[i].id == otp_id)
+ 			return &cs35l41_otp_map_map[i];
+ 	}
+ 
+ 	return NULL;
+ }
+ 
+ int cs35l41_test_key_unlock(struct device *dev, struct regmap *regmap)
+ {
+ 	static const struct reg_sequence unlock[] = {
+ 		{ CS35L41_TEST_KEY_CTL, 0x00000055 },
+ 		{ CS35L41_TEST_KEY_CTL, 0x000000AA },
+ 	};
+ 	int ret;
+ 
+ 	ret = regmap_multi_reg_write(regmap, unlock, ARRAY_SIZE(unlock));
+ 	if (ret)
+ 		dev_err(dev, "Failed to unlock test key: %d\n", ret);
+ 
+ 	return ret;
+ }
+ EXPORT_SYMBOL_GPL(cs35l41_test_key_unlock);
+ 
+ int cs35l41_test_key_lock(struct device *dev, struct regmap *regmap)
+ {
+ 	static const struct reg_sequence unlock[] = {
+ 		{ CS35L41_TEST_KEY_CTL, 0x000000CC },
+ 		{ CS35L41_TEST_KEY_CTL, 0x00000033 },
+ 	};
+ 	int ret;
+ 
+ 	ret = regmap_multi_reg_write(regmap, unlock, ARRAY_SIZE(unlock));
+ 	if (ret)
+ 		dev_err(dev, "Failed to lock test key: %d\n", ret);
+ 
+ 	return ret;
+ }
+ EXPORT_SYMBOL_GPL(cs35l41_test_key_lock);
+ 
+ /* Must be called with the TEST_KEY unlocked */
+ int cs35l41_otp_unpack(struct device *dev, struct regmap *regmap)
+ {
+ 	const struct cs35l41_otp_map_element_t *otp_map_match;
+ 	const struct cs35l41_otp_packed_element_t *otp_map;
+ 	int bit_offset, word_offset, ret, i;
+ 	unsigned int bit_sum = 8;
+ 	u32 otp_val, otp_id_reg;
+ 	u32 *otp_mem;
+ 
+ 	otp_mem = kmalloc_array(CS35L41_OTP_SIZE_WORDS, sizeof(*otp_mem), GFP_KERNEL);
+ 	if (!otp_mem)
+ 		return -ENOMEM;
+ 
+ 	ret = regmap_read(regmap, CS35L41_OTPID, &otp_id_reg);
+ 	if (ret) {
+ 		dev_err(dev, "Read OTP ID failed: %d\n", ret);
+ 		goto err_otp_unpack;
+ 	}
+ 
+ 	otp_map_match = cs35l41_find_otp_map(otp_id_reg);
+ 
+ 	if (!otp_map_match) {
+ 		dev_err(dev, "OTP Map matching ID %d not found\n", otp_id_reg);
+ 		ret = -EINVAL;
+ 		goto err_otp_unpack;
+ 	}
+ 
+ 	ret = regmap_bulk_read(regmap, CS35L41_OTP_MEM0, otp_mem, CS35L41_OTP_SIZE_WORDS);
+ 	if (ret) {
+ 		dev_err(dev, "Read OTP Mem failed: %d\n", ret);
+ 		goto err_otp_unpack;
+ 	}
+ 
+ 	otp_map = otp_map_match->map;
+ 
+ 	bit_offset = otp_map_match->bit_offset;
+ 	word_offset = otp_map_match->word_offset;
+ 
+ 	for (i = 0; i < otp_map_match->num_elements; i++) {
+ 		dev_dbg(dev, "bitoffset= %d, word_offset=%d, bit_sum mod 32=%d\n",
+ 			bit_offset, word_offset, bit_sum % 32);
+ 		if (bit_offset + otp_map[i].size - 1 >= 32) {
+ 			otp_val = (otp_mem[word_offset] &
+ 					GENMASK(31, bit_offset)) >> bit_offset;
+ 			otp_val |= (otp_mem[++word_offset] &
+ 					GENMASK(bit_offset + otp_map[i].size - 33, 0)) <<
+ 					(32 - bit_offset);
+ 			bit_offset += otp_map[i].size - 32;
+ 		} else {
+ 			otp_val = (otp_mem[word_offset] &
+ 				   GENMASK(bit_offset + otp_map[i].size - 1, bit_offset)
+ 				  ) >> bit_offset;
+ 			bit_offset += otp_map[i].size;
+ 		}
+ 		bit_sum += otp_map[i].size;
+ 
+ 		if (bit_offset == 32) {
+ 			bit_offset = 0;
+ 			word_offset++;
+ 		}
+ 
+ 		if (otp_map[i].reg != 0) {
+ 			ret = regmap_update_bits(regmap, otp_map[i].reg,
+ 						 GENMASK(otp_map[i].shift + otp_map[i].size - 1,
+ 							 otp_map[i].shift),
+ 						 otp_val << otp_map[i].shift);
+ 			if (ret < 0) {
+ 				dev_err(dev, "Write OTP val failed: %d\n", ret);
+ 				goto err_otp_unpack;
+ 			}
+ 		}
+ 	}
+ 
+ 	ret = 0;
+ 
+ err_otp_unpack:
+ 	kfree(otp_mem);
+ 
+ 	return ret;
+ }
+ EXPORT_SYMBOL_GPL(cs35l41_otp_unpack);
+ 
+ /* Must be called with the TEST_KEY unlocked */
+ int cs35l41_register_errata_patch(struct device *dev, struct regmap *reg, unsigned int reg_revid)
+ {
+ 	char *rev;
+ 	int ret;
+ 
+ 	switch (reg_revid) {
+ 	case CS35L41_REVID_A0:
+ 		ret = regmap_register_patch(reg, cs35l41_reva0_errata_patch,
+ 					    ARRAY_SIZE(cs35l41_reva0_errata_patch));
+ 		rev = "A0";
+ 		break;
+ 	case CS35L41_REVID_B0:
+ 		ret = regmap_register_patch(reg, cs35l41_revb0_errata_patch,
+ 					    ARRAY_SIZE(cs35l41_revb0_errata_patch));
+ 		rev = "B0";
+ 		break;
+ 	case CS35L41_REVID_B2:
+ 		ret = regmap_register_patch(reg, cs35l41_revb2_errata_patch,
+ 					    ARRAY_SIZE(cs35l41_revb2_errata_patch));
+ 		rev = "B2";
+ 		break;
+ 	default:
+ 		ret = -EINVAL;
+ 		rev = "XX";
+ 		break;
+ 	}
+ 
+ 	if (ret)
+ 		dev_err(dev, "Failed to apply %s errata patch: %d\n", rev, ret);
+ 
+ 	ret = regmap_write(reg, CS35L41_DSP1_CCM_CORE_CTRL, 0);
+ 	if (ret < 0)
+ 		dev_err(dev, "Write CCM_CORE_CTRL failed: %d\n", ret);
+ 
+ 	return ret;
+ }
+ EXPORT_SYMBOL_GPL(cs35l41_register_errata_patch);
+ 
+ int cs35l41_set_channels(struct device *dev, struct regmap *reg,
+ 			 unsigned int tx_num, unsigned int *tx_slot,
+ 			 unsigned int rx_num, unsigned int *rx_slot)
+ {
+ 	unsigned int val, mask;
+ 	int i;
+ 
+ 	if (tx_num > 4 || rx_num > 2)
+ 		return -EINVAL;
+ 
+ 	val = 0;
+ 	mask = 0;
+ 	for (i = 0; i < rx_num; i++) {
+ 		dev_dbg(dev, "rx slot %d position = %d\n", i, rx_slot[i]);
+ 		val |= rx_slot[i] << (i * 8);
+ 		mask |= 0x3F << (i * 8);
+ 	}
+ 	regmap_update_bits(reg, CS35L41_SP_FRAME_RX_SLOT, mask, val);
+ 
+ 	val = 0;
+ 	mask = 0;
+ 	for (i = 0; i < tx_num; i++) {
+ 		dev_dbg(dev, "tx slot %d position = %d\n", i, tx_slot[i]);
+ 		val |= tx_slot[i] << (i * 8);
+ 		mask |= 0x3F << (i * 8);
+ 	}
+ 	regmap_update_bits(reg, CS35L41_SP_FRAME_TX_SLOT, mask, val);
+ 
+ 	return 0;
+ }
+ EXPORT_SYMBOL_GPL(cs35l41_set_channels);
+ 
+ static const unsigned char cs35l41_bst_k1_table[4][5] = {
+ 	{ 0x24, 0x32, 0x32, 0x4F, 0x57 },
+ 	{ 0x24, 0x32, 0x32, 0x4F, 0x57 },
+ 	{ 0x40, 0x32, 0x32, 0x4F, 0x57 },
+ 	{ 0x40, 0x32, 0x32, 0x4F, 0x57 }
+ };
+ 
+ static const unsigned char cs35l41_bst_k2_table[4][5] = {
+ 	{ 0x24, 0x49, 0x66, 0xA3, 0xEA },
+ 	{ 0x24, 0x49, 0x66, 0xA3, 0xEA },
+ 	{ 0x48, 0x49, 0x66, 0xA3, 0xEA },
+ 	{ 0x48, 0x49, 0x66, 0xA3, 0xEA }
+ };
+ 
+ static const unsigned char cs35l41_bst_slope_table[4] = {
+ 	0x75, 0x6B, 0x3B, 0x28
+ };
+ 
+ int cs35l41_boost_config(struct device *dev, struct regmap *regmap, int boost_ind,
+ 			 int boost_cap, int boost_ipk)
+ {
+ 	unsigned char bst_lbst_val, bst_cbst_range, bst_ipk_scaled;
+ 	int ret;
+ 
+ 	switch (boost_ind) {
+ 	case 1000:	/* 1.0 uH */
+ 		bst_lbst_val = 0;
+ 		break;
+ 	case 1200:	/* 1.2 uH */
+ 		bst_lbst_val = 1;
+ 		break;
+ 	case 1500:	/* 1.5 uH */
+ 		bst_lbst_val = 2;
+ 		break;
+ 	case 2200:	/* 2.2 uH */
+ 		bst_lbst_val = 3;
+ 		break;
+ 	default:
+ 		dev_err(dev, "Invalid boost inductor value: %d nH\n", boost_ind);
+ 		return -EINVAL;
+ 	}
+ 
+ 	switch (boost_cap) {
+ 	case 0 ... 19:
+ 		bst_cbst_range = 0;
+ 		break;
+ 	case 20 ... 50:
+ 		bst_cbst_range = 1;
+ 		break;
+ 	case 51 ... 100:
+ 		bst_cbst_range = 2;
+ 		break;
+ 	case 101 ... 200:
+ 		bst_cbst_range = 3;
+ 		break;
+ 	default:
+ 		if (boost_cap < 0) {
+ 			dev_err(dev, "Invalid boost capacitor value: %d nH\n", boost_cap);
+ 			return -EINVAL;
+ 		}
+ 		/* 201 uF and greater */
+ 		bst_cbst_range = 4;
+ 	}
+ 
+ 	if (boost_ipk < 1600 || boost_ipk > 4500) {
+ 		dev_err(dev, "Invalid boost inductor peak current: %d mA\n", boost_ipk);
+ 		return -EINVAL;
+ 	}
+ 
+ 	ret = regmap_update_bits(regmap, CS35L41_BSTCVRT_COEFF,
+ 				 CS35L41_BST_K1_MASK | CS35L41_BST_K2_MASK,
+ 				 cs35l41_bst_k1_table[bst_lbst_val][bst_cbst_range]
+ 					<< CS35L41_BST_K1_SHIFT |
+ 				 cs35l41_bst_k2_table[bst_lbst_val][bst_cbst_range]
+ 					<< CS35L41_BST_K2_SHIFT);
+ 	if (ret) {
+ 		dev_err(dev, "Failed to write boost coefficients: %d\n", ret);
+ 		return ret;
+ 	}
+ 
+ 	ret = regmap_update_bits(regmap, CS35L41_BSTCVRT_SLOPE_LBST,
+ 				 CS35L41_BST_SLOPE_MASK | CS35L41_BST_LBST_VAL_MASK,
+ 				 cs35l41_bst_slope_table[bst_lbst_val]
+ 					<< CS35L41_BST_SLOPE_SHIFT |
+ 				 bst_lbst_val << CS35L41_BST_LBST_VAL_SHIFT);
+ 	if (ret) {
+ 		dev_err(dev, "Failed to write boost slope/inductor value: %d\n", ret);
+ 		return ret;
+ 	}
+ 
+ 	bst_ipk_scaled = ((boost_ipk - 1600) / 50) + 0x10;
+ 
+ 	ret = regmap_update_bits(regmap, CS35L41_BSTCVRT_PEAK_CUR, CS35L41_BST_IPK_MASK,
+ 				 bst_ipk_scaled << CS35L41_BST_IPK_SHIFT);
+ 	if (ret) {
+ 		dev_err(dev, "Failed to write boost inductor peak current: %d\n", ret);
+ 		return ret;
+ 	}
+ 
+ 	regmap_update_bits(regmap, CS35L41_PWR_CTRL2, CS35L41_BST_EN_MASK,
+ 			   CS35L41_BST_EN_DEFAULT << CS35L41_BST_EN_SHIFT);
+ 
+ 	return 0;
+ }
+ EXPORT_SYMBOL_GPL(cs35l41_boost_config);
+ 
+ static const struct reg_sequence cs35l41_safe_to_reset[] = {
+ 	{ 0x00000040,			0x00000055 },
+ 	{ 0x00000040,			0x000000AA },
+ 	{ 0x0000393C,			0x000000C0, 6000},
+ 	{ 0x0000393C,			0x00000000 },
+ 	{ 0x00007414,			0x00C82222 },
+ 	{ 0x0000742C,			0x00000000 },
+ 	{ 0x00000040,			0x000000CC },
+ 	{ 0x00000040,			0x00000033 },
+ };
+ 
+ static const struct reg_sequence cs35l41_active_to_safe[] = {
+ 	{ 0x00000040,			0x00000055 },
+ 	{ 0x00000040,			0x000000AA },
+ 	{ 0x00007438,			0x00585941 },
+ 	{ CS35L41_PWR_CTRL1,		0x00000000 },
+ 	{ 0x0000742C,			0x00000009, 3000 },
+ 	{ 0x00007438,			0x00580941 },
+ 	{ 0x00000040,			0x000000CC },
+ 	{ 0x00000040,			0x00000033 },
+ };
+ 
+ static const struct reg_sequence cs35l41_safe_to_active[] = {
+ 	{ 0x00000040,			0x00000055 },
+ 	{ 0x00000040,			0x000000AA },
+ 	{ 0x0000742C,			0x0000000F },
+ 	{ 0x0000742C,			0x00000079 },
+ 	{ 0x00007438,			0x00585941 },
+ 	{ CS35L41_PWR_CTRL1,		0x00000001, 3000 }, // GLOBAL_EN = 1
+ 	{ 0x0000742C,			0x000000F9 },
+ 	{ 0x00007438,			0x00580941 },
+ 	{ 0x00000040,			0x000000CC },
+ 	{ 0x00000040,			0x00000033 },
+ };
+ 
+ static const struct reg_sequence cs35l41_reset_to_safe[] = {
+ 	{ 0x00000040,			0x00000055 },
+ 	{ 0x00000040,			0x000000AA },
+ 	{ 0x00007438,			0x00585941 },
+ 	{ 0x00007414,			0x08C82222 },
+ 	{ 0x0000742C,			0x00000009 },
+ 	{ 0x00000040,			0x000000CC },
+ 	{ 0x00000040,			0x00000033 },
+ };
+ 
+ int cs35l41_init_boost(struct device *dev, struct regmap *regmap,
+ 		       struct cs35l41_hw_cfg *hw_cfg)
+ {
+ 	int ret;
+ 
+ 	switch (hw_cfg->bst_type) {
+ 	case CS35L41_INT_BOOST:
+ 		ret = cs35l41_boost_config(dev, regmap, hw_cfg->bst_ind,
+ 					   hw_cfg->bst_cap, hw_cfg->bst_ipk);
+ 		if (ret)
+ 			dev_err(dev, "Error in Boost DT config: %d\n", ret);
+ 		break;
+ 	case CS35L41_EXT_BOOST:
+ 	case CS35L41_EXT_BOOST_NO_VSPK_SWITCH:
+ 		/* Only CLSA0100 doesn't use GPIO as VSPK switch, but even on that laptop we can
+ 		 * toggle GPIO1 as is not connected to anything.
+ 		 * There will be no other device without VSPK switch.
+ 		 */
+ 		regmap_write(regmap, CS35L41_GPIO1_CTRL1, 0x00000001);
+ 		regmap_multi_reg_write(regmap, cs35l41_reset_to_safe,
+ 				       ARRAY_SIZE(cs35l41_reset_to_safe));
+ 		ret = regmap_update_bits(regmap, CS35L41_PWR_CTRL2, CS35L41_BST_EN_MASK,
+ 					 CS35L41_BST_DIS_FET_OFF << CS35L41_BST_EN_SHIFT);
+ 		break;
+ 	default:
+ 		dev_err(dev, "Boost type %d not supported\n", hw_cfg->bst_type);
+ 		ret = -EINVAL;
+ 		break;
+ 	}
+ 
+ 	return ret;
+ }
+ EXPORT_SYMBOL_GPL(cs35l41_init_boost);
+ 
+ bool cs35l41_safe_reset(struct regmap *regmap, enum cs35l41_boost_type b_type)
+ {
+ 	switch (b_type) {
+ 	/* There is only one laptop that doesn't have VSPK switch. */
+ 	case CS35L41_EXT_BOOST_NO_VSPK_SWITCH:
+ 		return false;
+ 	case CS35L41_EXT_BOOST:
+ 		regmap_write(regmap, CS35L41_GPIO1_CTRL1, 0x00000001);
+ 		regmap_multi_reg_write(regmap, cs35l41_safe_to_reset,
+ 				       ARRAY_SIZE(cs35l41_safe_to_reset));
+ 		return true;
+ 	default:
+ 		return true;
+ 	}
+ }
+ EXPORT_SYMBOL_GPL(cs35l41_safe_reset);
+ 
+ int cs35l41_global_enable(struct regmap *regmap, enum cs35l41_boost_type b_type, int enable)
+ {
+ 	int ret;
+ 
+ 	switch (b_type) {
+ 	case CS35L41_INT_BOOST:
+ 		ret = regmap_update_bits(regmap, CS35L41_PWR_CTRL1, CS35L41_GLOBAL_EN_MASK,
+ 					 enable << CS35L41_GLOBAL_EN_SHIFT);
+ 		usleep_range(3000, 3100);
+ 		break;
+ 	case CS35L41_EXT_BOOST:
+ 	case CS35L41_EXT_BOOST_NO_VSPK_SWITCH:
+ 		if (enable)
+ 			ret = regmap_multi_reg_write(regmap, cs35l41_safe_to_active,
+ 						     ARRAY_SIZE(cs35l41_safe_to_active));
+ 		else
+ 			ret = regmap_multi_reg_write(regmap, cs35l41_active_to_safe,
+ 						     ARRAY_SIZE(cs35l41_active_to_safe));
+ 		break;
+ 	default:
+ 		ret = -EINVAL;
+ 		break;
+ 	}
+ 
+ 	return ret;
+ }
+ EXPORT_SYMBOL_GPL(cs35l41_global_enable);
+ 
+ int cs35l41_gpio_config(struct regmap *regmap, struct cs35l41_hw_cfg *hw_cfg)
+ {
+ 	struct cs35l41_gpio_cfg *gpio1 = &hw_cfg->gpio1;
+ 	struct cs35l41_gpio_cfg *gpio2 = &hw_cfg->gpio2;
+ 	int irq_pol = IRQF_TRIGGER_NONE;
+ 
+ 	regmap_update_bits(regmap, CS35L41_GPIO1_CTRL1,
+ 			   CS35L41_GPIO_POL_MASK | CS35L41_GPIO_DIR_MASK,
+ 			   gpio1->pol_inv << CS35L41_GPIO_POL_SHIFT |
+ 			   !gpio1->out_en << CS35L41_GPIO_DIR_SHIFT);
+ 
+ 	regmap_update_bits(regmap, CS35L41_GPIO2_CTRL1,
+ 			   CS35L41_GPIO_POL_MASK | CS35L41_GPIO_DIR_MASK,
+ 			   gpio2->pol_inv << CS35L41_GPIO_POL_SHIFT |
+ 			   !gpio2->out_en << CS35L41_GPIO_DIR_SHIFT);
+ 
+ 	if (gpio1->valid)
+ 		regmap_update_bits(regmap, CS35L41_GPIO_PAD_CONTROL, CS35L41_GPIO1_CTRL_MASK,
+ 				   gpio1->func << CS35L41_GPIO1_CTRL_SHIFT);
+ 
+ 	if (gpio2->valid) {
+ 		regmap_update_bits(regmap, CS35L41_GPIO_PAD_CONTROL, CS35L41_GPIO2_CTRL_MASK,
+ 				   gpio2->func << CS35L41_GPIO2_CTRL_SHIFT);
+ 
+ 		switch (gpio2->func) {
+ 		case CS35L41_GPIO2_INT_PUSH_PULL_LOW:
+ 		case CS35L41_GPIO2_INT_OPEN_DRAIN:
+ 			irq_pol = IRQF_TRIGGER_LOW;
+ 			break;
+ 		case CS35L41_GPIO2_INT_PUSH_PULL_HIGH:
+ 			irq_pol = IRQF_TRIGGER_HIGH;
+ 			break;
+ 		default:
+ 			break;
+ 		}
+ 	}
+ 
+ 	return irq_pol;
+ }
+ EXPORT_SYMBOL_GPL(cs35l41_gpio_config);
+ 
+ MODULE_DESCRIPTION("CS35L41 library");
+ MODULE_AUTHOR("David Rhodes, Cirrus Logic Inc, <david.rhodes@cirrus.com>");
+ MODULE_AUTHOR("Lucas Tanure, Cirrus Logic Inc, <tanureal@opensource.cirrus.com>");
+ MODULE_LICENSE("GPL");
++>>>>>>> 5577dd2329d0 (ALSA: hda: cs35l41: Move external boost handling to lib for ASoC use):sound/soc/codecs/cs35l41-lib.c
* Unmerged path sound/pci/hda/cs35l41_hda.c
* Unmerged path include/sound/cs35l41.h
* Unmerged path sound/pci/hda/cs35l41_hda.c
* Unmerged path sound/soc/codecs/cs35l41-tables.c
