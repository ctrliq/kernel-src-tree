x86/sme: Explicitly map new EFI memmap table as encrypted

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Tom Lendacky <thomas.lendacky@amd.com>
commit 1ff2fc02862d52e18fd3daabcfe840ec27e920a8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/1ff2fc02.failed

Reserving memory using efi_mem_reserve() calls into the x86
efi_arch_mem_reserve() function. This function will insert a new EFI
memory descriptor into the EFI memory map representing the area of
memory to be reserved and marking it as EFI runtime memory. As part
of adding this new entry, a new EFI memory map is allocated and mapped.
The mapping is where a problem can occur. This new memory map is mapped
using early_memremap() and generally mapped encrypted, unless the new
memory for the mapping happens to come from an area of memory that is
marked as EFI_BOOT_SERVICES_DATA memory. In this case, the new memory will
be mapped unencrypted. However, during replacement of the old memory map,
efi_mem_type() is disabled, so the new memory map will now be long-term
mapped encrypted (in efi.memmap), resulting in the map containing invalid
data and causing the kernel boot to crash.

Since it is known that the area will be mapped encrypted going forward,
explicitly map the new memory map as encrypted using early_memremap_prot().

	Cc: <stable@vger.kernel.org> # 4.14.x
Fixes: 8f716c9b5feb ("x86/mm: Add support to access boot related data in the clear")
Link: https://lore.kernel.org/all/ebf1eb2940405438a09d51d121ec0d02c8755558.1634752931.git.thomas.lendacky@amd.com/
	Signed-off-by: Tom Lendacky <thomas.lendacky@amd.com>
[ardb: incorporate Kconfig fix by Arnd]
	Signed-off-by: Ard Biesheuvel <ardb@kernel.org>
(cherry picked from commit 1ff2fc02862d52e18fd3daabcfe840ec27e920a8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/Kconfig
diff --cc arch/x86/Kconfig
index 99fd014c3c57,9636a3122496..000000000000
--- a/arch/x86/Kconfig
+++ b/arch/x86/Kconfig
@@@ -1981,7 -1932,8 +1981,12 @@@ config EF
  	depends on ACPI
  	select UCS2_STRING
  	select EFI_RUNTIME_WRAPPERS
++<<<<<<< HEAD
 +	---help---
++=======
+ 	select ARCH_USE_MEMREMAP_PROT
+ 	help
++>>>>>>> 1ff2fc02862d (x86/sme: Explicitly map new EFI memmap table as encrypted)
  	  This enables the kernel to use EFI runtime services that are
  	  available (such as the EFI variable services).
  
* Unmerged path arch/x86/Kconfig
diff --git a/arch/x86/platform/efi/quirks.c b/arch/x86/platform/efi/quirks.c
index 13c6cdc741fc..2c7efec87521 100644
--- a/arch/x86/platform/efi/quirks.c
+++ b/arch/x86/platform/efi/quirks.c
@@ -276,7 +276,8 @@ void __init efi_arch_mem_reserve(phys_addr_t addr, u64 size)
 		return;
 	}
 
-	new = early_memremap(data.phys_map, data.size);
+	new = early_memremap_prot(data.phys_map, data.size,
+				  pgprot_val(pgprot_encrypted(FIXMAP_PAGE_NORMAL)));
 	if (!new) {
 		pr_err("Failed to map new boot services memmap\n");
 		return;
