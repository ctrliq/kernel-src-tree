ASoC: SOF: IPC4: set the BE DAI ops

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Ranjani Sridharan <ranjani.sridharan@linux.intel.com>
commit 4c30004a7c6920c66a08c1aa16481c28202eefd0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/4c30004a.failed

Add BE DAI drv ops for IPC4 for DMIC, SSP and HDA type DAI's.

	Signed-off-by: Ranjani Sridharan <ranjani.sridharan@linux.intel.com>
	Reviewed-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
	Reviewed-by: PÃ©ter Ujfalusi <peter.ujfalusi@linux.intel.com>
	Reviewed-by: Bard Liao <yung-chuan.liao@linux.intel.com>
Link: https://lore.kernel.org/r/20220609032643.916882-17-ranjani.sridharan@linux.intel.com
	Signed-off-by: Mark Brown <broonie@kernel.org>
(cherry picked from commit 4c30004a7c6920c66a08c1aa16481c28202eefd0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	sound/soc/sof/intel/hda-dai.c
diff --cc sound/soc/sof/intel/hda-dai.c
index 4276d8a58f6f,5423667002e5..000000000000
--- a/sound/soc/sof/intel/hda-dai.c
+++ b/sound/soc/sof/intel/hda-dai.c
@@@ -402,39 -287,131 +406,69 @@@ static int hda_link_pcm_trigger(struct 
  	return 0;
  }
  
 -static int hda_link_dma_hw_free(struct snd_pcm_substream *substream)
 -{
 -	struct hdac_stream *hstream = substream->runtime->private_data;
 -	struct snd_soc_pcm_runtime *rtd = asoc_substream_to_rtd(substream);
 -	struct snd_soc_dai *cpu_dai = asoc_rtd_to_cpu(rtd, 0);
 -	struct snd_soc_dai *codec_dai = asoc_rtd_to_codec(rtd, 0);
 -	struct hdac_ext_stream *hext_stream;
 -
 -	hext_stream = snd_soc_dai_get_dma_data(cpu_dai, substream);
 -	if (!hext_stream)
 -		return 0;
 -
 -	return hda_link_dma_cleanup(substream, hstream, cpu_dai, codec_dai, false);
 -}
 -
 -static int hda_dai_widget_update(struct snd_soc_dapm_widget *w,
 -				 int channel, bool widget_setup)
 -{
 -	struct snd_sof_dai_config_data data;
 -
 -	data.dai_data = channel;
 -
 -	/* set up/free DAI widget and send DAI_CONFIG IPC */
 -	if (widget_setup)
 -		return hda_ctrl_dai_widget_setup(w, SOF_DAI_CONFIG_FLAGS_2_STEP_STOP, &data);
 -
 -	return hda_ctrl_dai_widget_free(w, SOF_DAI_CONFIG_FLAGS_NONE, &data);
 -}
 -
 -static int hda_dai_hw_params_update(struct snd_pcm_substream *substream,
 -				    struct snd_pcm_hw_params *params,
 -				    struct snd_soc_dai *dai)
 +static int hda_link_hw_free(struct snd_pcm_substream *substream,
 +			    struct snd_soc_dai *dai)
  {
 +	unsigned int stream_tag;
 +	struct sof_intel_hda_stream *hda_stream;
 +	struct hdac_bus *bus;
 +	struct hdac_ext_link *link;
 +	struct hdac_stream *hstream;
 +	struct snd_soc_pcm_runtime *rtd;
  	struct hdac_ext_stream *hext_stream;
  	struct snd_soc_dapm_widget *w;
 -	int stream_tag;
 -
 -	hext_stream = snd_soc_dai_get_dma_data(dai, substream);
 -	if (!hext_stream)
 -		return -EINVAL;
 -
 -	stream_tag = hdac_stream(hext_stream)->stream_tag;
 -
 -	w = snd_soc_dai_get_widget(dai, substream->stream);
 -
 -	/* set up the DAI widget and send the DAI_CONFIG with the new tag */
 -	return hda_dai_widget_update(w, stream_tag - 1, true);
 -}
 -
 -static int hda_dai_hw_params(struct snd_pcm_substream *substream,
 -			     struct snd_pcm_hw_params *params,
 -			     struct snd_soc_dai *dai)
 -{
 -	struct hdac_ext_stream *hext_stream =
 -				snd_soc_dai_get_dma_data(dai, substream);
  	int ret;
  
 -	if (hext_stream && hext_stream->link_prepared)
 -		return 0;
 -
 -	ret = hda_link_dma_hw_params(substream, params);
 -	if (ret < 0)
 -		return ret;
 -
 -	return hda_dai_hw_params_update(substream, params, dai);
 -}
 -
 -
 -static int hda_dai_config_pause_push_ipc(struct snd_soc_dapm_widget *w)
 -{
 -	struct snd_sof_widget *swidget = w->dobj.private;
 -	struct snd_soc_component *component = swidget->scomp;
 -	struct snd_sof_dev *sdev = snd_soc_component_get_drvdata(component);
 -	const struct sof_ipc_tplg_ops *tplg_ops = sdev->ipc->ops->tplg;
 -	int ret = 0;
 +	hstream = substream->runtime->private_data;
 +	bus = hstream->bus;
 +	rtd = asoc_substream_to_rtd(substream);
 +	hext_stream = snd_soc_dai_get_dma_data(dai, substream);
  
 -	if (tplg_ops->dai_config) {
 -		ret = tplg_ops->dai_config(sdev, swidget, SOF_DAI_CONFIG_FLAGS_PAUSE, NULL);
 -		if (ret < 0)
 -			dev_err(sdev->dev, "%s: DAI config failed for widget %s\n", __func__,
 -				w->name);
 +	if (!hext_stream) {
 +		dev_dbg(dai->dev,
 +			"%s: hext_stream is not assigned\n", __func__);
 +		return -EINVAL;
  	}
  
 -	return ret;
 -}
 +	hda_stream = hstream_to_sof_hda_stream(hext_stream);
  
++<<<<<<< HEAD
 +	if (substream->stream == SNDRV_PCM_STREAM_PLAYBACK)
 +		w = dai->playback_widget;
 +	else
 +		w = dai->capture_widget;
++=======
+ static int hda_dai_prepare(struct snd_pcm_substream *substream, struct snd_soc_dai *dai)
+ {
+ 	struct hdac_ext_stream *hext_stream =
+ 				snd_soc_dai_get_dma_data(dai, substream);
+ 	struct snd_sof_dev *sdev = snd_soc_component_get_drvdata(dai->component);
+ 	struct snd_soc_pcm_runtime *rtd = asoc_substream_to_rtd(substream);
+ 	int stream = substream->stream;
+ 	int ret;
+ 
+ 	if (hext_stream && hext_stream->link_prepared)
+ 		return 0;
+ 
+ 	dev_dbg(sdev->dev, "%s: prepare stream dir %d\n", __func__, substream->stream);
+ 
+ 	ret = hda_link_dma_prepare(substream);
+ 	if (ret < 0)
+ 		return ret;
+ 
+ 	return hda_dai_hw_params_update(substream, &rtd->dpcm[stream].hw_params, dai);
+ }
+ 
+ static int hda_dai_hw_free_ipc(int stream, /* direction */
+ 			       struct snd_soc_dai *dai)
+ {
+ 	struct snd_soc_dapm_widget *w;
+ 
+ 	w = snd_soc_dai_get_widget(dai, stream);
++>>>>>>> 4c30004a7c69 (ASoC: SOF: IPC4: set the BE DAI ops)
  
  	/* free the link DMA channel in the FW and the DAI widget */
 -	return hda_dai_widget_update(w, DMA_CHAN_INVALID, false);
 -}
 -
 -static int ipc3_hda_dai_trigger(struct snd_pcm_substream *substream,
 -				int cmd, struct snd_soc_dai *dai)
 -{
 -	struct snd_soc_dapm_widget *w;
 -	int ret;
 -
 -	ret = hda_link_dma_trigger(substream, cmd);
 +	ret = hda_link_dai_widget_update(hda_stream, w, DMA_CHAN_INVALID, false);
  	if (ret < 0)
  		return ret;
  
@@@ -457,11 -438,111 +491,116 @@@
  	return 0;
  }
  
++<<<<<<< HEAD
 +static const struct snd_soc_dai_ops hda_link_dai_ops = {
 +	.hw_params = hda_link_hw_params,
 +	.hw_free = hda_link_hw_free,
 +	.trigger = hda_link_pcm_trigger,
 +	.prepare = hda_link_pcm_prepare,
++=======
+ /*
+  * In contrast to IPC3, the dai trigger in IPC4 mixes pipeline state changes
+  * (over IPC channel) and DMA state change (direct host register changes).
+  */
+ static int ipc4_hda_dai_trigger(struct snd_pcm_substream *substream,
+ 				int cmd, struct snd_soc_dai *dai)
+ {
+ 	struct hdac_ext_stream *hext_stream = snd_soc_dai_get_dma_data(dai, substream);
+ 	struct snd_sof_dev *sdev = snd_soc_component_get_drvdata(dai->component);
+ 	struct snd_soc_pcm_runtime *rtd;
+ 	struct snd_sof_widget *swidget;
+ 	struct snd_soc_dapm_widget *w;
+ 	struct snd_soc_dai *codec_dai;
+ 	struct hdac_stream *hstream;
+ 	struct snd_soc_dai *cpu_dai;
+ 	int ret;
+ 
+ 	dev_dbg(dai->dev, "%s: cmd=%d dai %s direction %d\n", __func__, cmd,
+ 		dai->name, substream->stream);
+ 
+ 	hstream = substream->runtime->private_data;
+ 	rtd = asoc_substream_to_rtd(substream);
+ 	cpu_dai = asoc_rtd_to_cpu(rtd, 0);
+ 	codec_dai = asoc_rtd_to_codec(rtd, 0);
+ 
+ 	w = snd_soc_dai_get_widget(dai, substream->stream);
+ 	swidget = w->dobj.private;
+ 
+ 	switch (cmd) {
+ 	case SNDRV_PCM_TRIGGER_START:
+ 	case SNDRV_PCM_TRIGGER_PAUSE_RELEASE:
+ 		snd_hdac_ext_link_stream_start(hext_stream);
+ 		break;
+ 	case SNDRV_PCM_TRIGGER_SUSPEND:
+ 	case SNDRV_PCM_TRIGGER_STOP:
+ 	{
+ 		struct snd_sof_widget *pipe_widget = swidget->pipe_widget;
+ 		struct sof_ipc4_pipeline *pipeline = pipe_widget->private;
+ 
+ 		ret = sof_ipc4_set_pipeline_state(sdev, swidget->pipeline_id,
+ 						  SOF_IPC4_PIPE_PAUSED);
+ 		if (ret < 0)
+ 			return ret;
+ 
+ 		pipeline->state = SOF_IPC4_PIPE_PAUSED;
+ 
+ 		snd_hdac_ext_link_stream_clear(hext_stream);
+ 
+ 		ret = sof_ipc4_set_pipeline_state(sdev, swidget->pipeline_id,
+ 						  SOF_IPC4_PIPE_RESET);
+ 		if (ret < 0)
+ 			return ret;
+ 
+ 		pipeline->state = SOF_IPC4_PIPE_RESET;
+ 
+ 		ret = hda_link_dma_cleanup(substream, hstream, cpu_dai, codec_dai, false);
+ 		if (ret < 0) {
+ 			dev_err(sdev->dev, "%s: failed to clean up link DMA\n", __func__);
+ 			return ret;
+ 		}
+ 		break;
+ 	}
+ 	case SNDRV_PCM_TRIGGER_PAUSE_PUSH:
+ 	{
+ 		struct snd_sof_widget *pipe_widget = swidget->pipe_widget;
+ 		struct sof_ipc4_pipeline *pipeline = pipe_widget->private;
+ 
+ 		ret = sof_ipc4_set_pipeline_state(sdev, swidget->pipeline_id,
+ 						  SOF_IPC4_PIPE_PAUSED);
+ 		if (ret < 0)
+ 			return ret;
+ 
+ 		pipeline->state = SOF_IPC4_PIPE_PAUSED;
+ 
+ 		snd_hdac_ext_link_stream_clear(hext_stream);
+ 		break;
+ 	}
+ 	default:
+ 		dev_err(sdev->dev, "%s: unknown trigger command %d\n", __func__, cmd);
+ 		return -EINVAL;
+ 	}
+ 
+ 	return 0;
+ }
+ 
+ static int hda_dai_hw_free(struct snd_pcm_substream *substream,
+ 			   struct snd_soc_dai *dai)
+ {
+ 	int ret;
+ 
+ 	ret = hda_link_dma_hw_free(substream);
+ 	if (ret < 0)
+ 		return ret;
+ 
+ 	return hda_dai_hw_free_ipc(substream->stream, dai);
+ }
+ 
+ static const struct snd_soc_dai_ops ipc3_hda_dai_ops = {
+ 	.hw_params = hda_dai_hw_params,
+ 	.hw_free = hda_dai_hw_free,
+ 	.trigger = ipc3_hda_dai_trigger,
+ 	.prepare = hda_dai_prepare,
++>>>>>>> 4c30004a7c69 (ASoC: SOF: IPC4: set the BE DAI ops)
  };
  
  static int hda_dai_suspend(struct hdac_bus *bus)
@@@ -643,6 -704,101 +790,104 @@@ static const struct snd_soc_dai_ops ssp
  	.shutdown = ssp_dai_shutdown,
  };
  
++<<<<<<< HEAD
++=======
+ static int ipc4_be_dai_trigger(struct snd_pcm_substream *substream,
+ 			       int cmd, struct snd_soc_dai *dai)
+ {
+ 	struct snd_sof_widget *pipe_widget;
+ 	struct sof_ipc4_pipeline *pipeline;
+ 	struct snd_sof_widget *swidget;
+ 	struct snd_soc_dapm_widget *w;
+ 	struct snd_sof_dev *sdev;
+ 	int ret;
+ 
+ 	w = snd_soc_dai_get_widget(dai, substream->stream);
+ 	swidget = w->dobj.private;
+ 	pipe_widget = swidget->pipe_widget;
+ 	pipeline = pipe_widget->private;
+ 	sdev = snd_soc_component_get_drvdata(swidget->scomp);
+ 
+ 	switch (cmd) {
+ 	case SNDRV_PCM_TRIGGER_SUSPEND:
+ 	case SNDRV_PCM_TRIGGER_STOP:
+ 		ret = sof_ipc4_set_pipeline_state(sdev, swidget->pipeline_id,
+ 						  SOF_IPC4_PIPE_PAUSED);
+ 		if (ret < 0)
+ 			return ret;
+ 		pipeline->state = SOF_IPC4_PIPE_PAUSED;
+ 
+ 		ret = sof_ipc4_set_pipeline_state(sdev, swidget->pipeline_id,
+ 						  SOF_IPC4_PIPE_RESET);
+ 		if (ret < 0)
+ 			return ret;
+ 		pipeline->state = SOF_IPC4_PIPE_RESET;
+ 		break;
+ 	case SNDRV_PCM_TRIGGER_PAUSE_PUSH:
+ 		ret = sof_ipc4_set_pipeline_state(sdev, swidget->pipeline_id,
+ 						  SOF_IPC4_PIPE_PAUSED);
+ 		if (ret < 0)
+ 			return ret;
+ 		pipeline->state = SOF_IPC4_PIPE_PAUSED;
+ 		break;
+ 	default:
+ 		break;
+ 	}
+ 
+ 	return 0;
+ }
+ 
+ static const struct snd_soc_dai_ops ipc4_dmic_dai_ops = {
+ 	.trigger = ipc4_be_dai_trigger,
+ };
+ 
+ static const struct snd_soc_dai_ops ipc4_ssp_dai_ops = {
+ 	.trigger = ipc4_be_dai_trigger,
+ };
+ 
+ void hda_set_dai_drv_ops(struct snd_sof_dev *sdev, struct snd_sof_dsp_ops *ops)
+ {
+ 	int i;
+ 
+ 	switch (sdev->pdata->ipc_type) {
+ 	case SOF_IPC:
+ 		for (i = 0; i < ops->num_drv; i++) {
+ 			if (strstr(ops->drv[i].name, "SSP")) {
+ 				ops->drv[i].ops = &ipc3_ssp_dai_ops;
+ 				continue;
+ 			}
+ #if IS_ENABLED(CONFIG_SND_SOC_SOF_HDA)
+ 			if (strstr(ops->drv[i].name, "iDisp") ||
+ 			    strstr(ops->drv[i].name, "Analog") ||
+ 			    strstr(ops->drv[i].name, "Digital"))
+ 				ops->drv[i].ops = &ipc3_hda_dai_ops;
+ #endif
+ 		}
+ 		break;
+ 	case SOF_INTEL_IPC4:
+ 		for (i = 0; i < ops->num_drv; i++) {
+ 			if (strstr(ops->drv[i].name, "DMIC")) {
+ 				ops->drv[i].ops = &ipc4_dmic_dai_ops;
+ 				continue;
+ 			}
+ 			if (strstr(ops->drv[i].name, "SSP")) {
+ 				ops->drv[i].ops = &ipc4_ssp_dai_ops;
+ 				continue;
+ 			}
+ #if IS_ENABLED(CONFIG_SND_SOC_SOF_HDA)
+ 			if (strstr(ops->drv[i].name, "iDisp") ||
+ 			    strstr(ops->drv[i].name, "Analog") ||
+ 			    strstr(ops->drv[i].name, "Digital"))
+ 				ops->drv[i].ops = &ipc4_hda_dai_ops;
+ #endif
+ 		}
+ 		break;
+ 	default:
+ 		break;
+ 	}
+ }
+ 
++>>>>>>> 4c30004a7c69 (ASoC: SOF: IPC4: set the BE DAI ops)
  /*
   * common dai driver for skl+ platforms.
   * some products who use this DAI array only physically have a subset of
* Unmerged path sound/soc/sof/intel/hda-dai.c
