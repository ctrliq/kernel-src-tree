selftests: memcg: test high limit for single entry allocation

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Shakeel Butt <shakeelb@google.com>
commit 6323ec54b4504070c1e001242e3e912837b3ae3a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/6323ec54.failed

Test the enforcement of memory.high limit for large amount of memory
allocation within a single kernel entry.  There are valid use-cases
where the application can trigger large amount of memory allocation
within a single syscall e.g.  mlock() or mmap(MAP_POPULATE).

Make sure memory.high limit enforcement works for such use-cases.

Link: https://lkml.kernel.org/r/20220211064917.2028469-4-shakeelb@google.com
	Signed-off-by: Shakeel Butt <shakeelb@google.com>
	Reviewed-by: Roman Gushchin <guro@fb.com>
	Cc: Roman Gushchin <roman.gushchin@linux.dev>
	Cc: Chris Down <chris@chrisdown.name>
	Cc: Johannes Weiner <hannes@cmpxchg.org>
	Cc: Michal Hocko <mhocko@suse.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 6323ec54b4504070c1e001242e3e912837b3ae3a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/testing/selftests/cgroup/cgroup_util.c
#	tools/testing/selftests/cgroup/cgroup_util.h
diff --cc tools/testing/selftests/cgroup/cgroup_util.c
index 4cb8e4717357,dbaa7aabbb4a..000000000000
--- a/tools/testing/selftests/cgroup/cgroup_util.c
+++ b/tools/testing/selftests/cgroup/cgroup_util.c
@@@ -358,3 -534,105 +358,108 @@@ int set_oom_adj_score(int pid, int scor
  	close(fd);
  	return 0;
  }
++<<<<<<< HEAD
++=======
+ 
+ ssize_t proc_read_text(int pid, bool thread, const char *item, char *buf, size_t size)
+ {
+ 	char path[PATH_MAX];
+ 
+ 	if (!pid)
+ 		snprintf(path, sizeof(path), "/proc/%s/%s",
+ 			 thread ? "thread-self" : "self", item);
+ 	else
+ 		snprintf(path, sizeof(path), "/proc/%d/%s", pid, item);
+ 
+ 	return read_text(path, buf, size);
+ }
+ 
+ int proc_read_strstr(int pid, bool thread, const char *item, const char *needle)
+ {
+ 	char buf[PAGE_SIZE];
+ 
+ 	if (proc_read_text(pid, thread, item, buf, sizeof(buf)) < 0)
+ 		return -1;
+ 
+ 	return strstr(buf, needle) ? 0 : -1;
+ }
+ 
+ int clone_into_cgroup_run_wait(const char *cgroup)
+ {
+ 	int cgroup_fd;
+ 	pid_t pid;
+ 
+ 	cgroup_fd =  dirfd_open_opath(cgroup);
+ 	if (cgroup_fd < 0)
+ 		return -1;
+ 
+ 	pid = clone_into_cgroup(cgroup_fd);
+ 	close_prot_errno(cgroup_fd);
+ 	if (pid < 0)
+ 		return -1;
+ 
+ 	if (pid == 0)
+ 		exit(EXIT_SUCCESS);
+ 
+ 	/*
+ 	 * We don't care whether this fails. We only care whether the initial
+ 	 * clone succeeded.
+ 	 */
+ 	(void)clone_reap(pid, WEXITED);
+ 	return 0;
+ }
+ 
+ static int __prepare_for_wait(const char *cgroup, const char *filename)
+ {
+ 	int fd, ret = -1;
+ 
+ 	fd = inotify_init1(0);
+ 	if (fd == -1)
+ 		return fd;
+ 
+ 	ret = inotify_add_watch(fd, cg_control(cgroup, filename), IN_MODIFY);
+ 	if (ret == -1) {
+ 		close(fd);
+ 		fd = -1;
+ 	}
+ 
+ 	return fd;
+ }
+ 
+ int cg_prepare_for_wait(const char *cgroup)
+ {
+ 	return __prepare_for_wait(cgroup, "cgroup.events");
+ }
+ 
+ int memcg_prepare_for_wait(const char *cgroup)
+ {
+ 	return __prepare_for_wait(cgroup, "memory.events");
+ }
+ 
+ int cg_wait_for(int fd)
+ {
+ 	int ret = -1;
+ 	struct pollfd fds = {
+ 		.fd = fd,
+ 		.events = POLLIN,
+ 	};
+ 
+ 	while (true) {
+ 		ret = poll(&fds, 1, 10000);
+ 
+ 		if (ret == -1) {
+ 			if (errno == EINTR)
+ 				continue;
+ 
+ 			break;
+ 		}
+ 
+ 		if (ret > 0 && fds.revents & POLLIN) {
+ 			ret = 0;
+ 			break;
+ 		}
+ 	}
+ 
+ 	return ret;
+ }
++>>>>>>> 6323ec54b450 (selftests: memcg: test high limit for single entry allocation)
diff --cc tools/testing/selftests/cgroup/cgroup_util.h
index cabd43fd137a,628738532ac9..000000000000
--- a/tools/testing/selftests/cgroup/cgroup_util.h
+++ b/tools/testing/selftests/cgroup/cgroup_util.h
@@@ -40,3 -46,14 +40,17 @@@ extern int alloc_pagecache(int fd, size
  extern int alloc_anon(const char *cgroup, void *arg);
  extern int is_swap_enabled(void);
  extern int set_oom_adj_score(int pid, int score);
++<<<<<<< HEAD
++=======
+ extern int cg_wait_for_proc_count(const char *cgroup, int count);
+ extern int cg_killall(const char *cgroup);
+ extern ssize_t proc_read_text(int pid, bool thread, const char *item, char *buf, size_t size);
+ extern int proc_read_strstr(int pid, bool thread, const char *item, const char *needle);
+ extern pid_t clone_into_cgroup(int cgroup_fd);
+ extern int clone_reap(pid_t pid, int options);
+ extern int clone_into_cgroup_run_wait(const char *cgroup);
+ extern int dirfd_open_opath(const char *dir);
+ extern int cg_prepare_for_wait(const char *cgroup);
+ extern int memcg_prepare_for_wait(const char *cgroup);
+ extern int cg_wait_for(int fd);
++>>>>>>> 6323ec54b450 (selftests: memcg: test high limit for single entry allocation)
* Unmerged path tools/testing/selftests/cgroup/cgroup_util.c
* Unmerged path tools/testing/selftests/cgroup/cgroup_util.h
diff --git a/tools/testing/selftests/cgroup/test_memcontrol.c b/tools/testing/selftests/cgroup/test_memcontrol.c
index 631998d74d9e..e91e8dffe74c 100644
--- a/tools/testing/selftests/cgroup/test_memcontrol.c
+++ b/tools/testing/selftests/cgroup/test_memcontrol.c
@@ -16,6 +16,7 @@
 #include <netinet/in.h>
 #include <netdb.h>
 #include <errno.h>
+#include <sys/mman.h>
 
 #include "../kselftest.h"
 #include "cgroup_util.h"
@@ -624,6 +625,82 @@ static int test_memcg_high(const char *root)
 	return ret;
 }
 
+static int alloc_anon_mlock(const char *cgroup, void *arg)
+{
+	size_t size = (size_t)arg;
+	void *buf;
+
+	buf = mmap(NULL, size, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANON,
+		   0, 0);
+	if (buf == MAP_FAILED)
+		return -1;
+
+	mlock(buf, size);
+	munmap(buf, size);
+	return 0;
+}
+
+/*
+ * This test checks that memory.high is able to throttle big single shot
+ * allocation i.e. large allocation within one kernel entry.
+ */
+static int test_memcg_high_sync(const char *root)
+{
+	int ret = KSFT_FAIL, pid, fd = -1;
+	char *memcg;
+	long pre_high, pre_max;
+	long post_high, post_max;
+
+	memcg = cg_name(root, "memcg_test");
+	if (!memcg)
+		goto cleanup;
+
+	if (cg_create(memcg))
+		goto cleanup;
+
+	pre_high = cg_read_key_long(memcg, "memory.events", "high ");
+	pre_max = cg_read_key_long(memcg, "memory.events", "max ");
+	if (pre_high < 0 || pre_max < 0)
+		goto cleanup;
+
+	if (cg_write(memcg, "memory.swap.max", "0"))
+		goto cleanup;
+
+	if (cg_write(memcg, "memory.high", "30M"))
+		goto cleanup;
+
+	if (cg_write(memcg, "memory.max", "140M"))
+		goto cleanup;
+
+	fd = memcg_prepare_for_wait(memcg);
+	if (fd < 0)
+		goto cleanup;
+
+	pid = cg_run_nowait(memcg, alloc_anon_mlock, (void *)MB(200));
+	if (pid < 0)
+		goto cleanup;
+
+	cg_wait_for(fd);
+
+	post_high = cg_read_key_long(memcg, "memory.events", "high ");
+	post_max = cg_read_key_long(memcg, "memory.events", "max ");
+	if (post_high < 0 || post_max < 0)
+		goto cleanup;
+
+	if (pre_high == post_high || pre_max != post_max)
+		goto cleanup;
+
+	ret = KSFT_PASS;
+
+cleanup:
+	if (fd >= 0)
+		close(fd);
+	cg_destroy(memcg);
+	free(memcg);
+
+	return ret;
+}
+
 /*
  * This test checks that memory.max limits the amount of
  * memory which can be consumed by either anonymous memory
@@ -1176,6 +1253,7 @@ struct memcg_test {
 	T(test_memcg_min),
 	T(test_memcg_low),
 	T(test_memcg_high),
+	T(test_memcg_high_sync),
 	T(test_memcg_max),
 	T(test_memcg_oom_events),
 	T(test_memcg_swap_max),
