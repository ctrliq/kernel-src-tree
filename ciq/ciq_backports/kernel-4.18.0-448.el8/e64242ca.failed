fbcon: Prevent that screen size is smaller than font size

jira LE-1907
cve CVE-2021-33655
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Helge Deller <deller@gmx.de>
commit e64242caef18b4a5840b0e7a9bff37abd4f4f933
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/e64242ca.failed

We need to prevent that users configure a screen size which is smaller than the
currently selected font size. Otherwise rendering chars on the screen will
access memory outside the graphics memory region.

This patch adds a new function fbcon_modechange_possible() which
implements this check and which later may be extended with other checks
if necessary.  The new function is called from the FBIOPUT_VSCREENINFO
ioctl handler in fbmem.c, which will return -EINVAL if userspace asked
for a too small screen size.

	Signed-off-by: Helge Deller <deller@gmx.de>
	Reviewed-by: Geert Uytterhoeven <geert@linux-m68k.org>
	Cc: stable@vger.kernel.org # v5.4+
(cherry picked from commit e64242caef18b4a5840b0e7a9bff37abd4f4f933)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/video/fbdev/core/fbcon.c
#	drivers/video/fbdev/core/fbmem.c
#	include/linux/fbcon.h
diff --cc drivers/video/fbdev/core/fbcon.c
index ff6e864fa9a7,5632870a9aeb..000000000000
--- a/drivers/video/fbdev/core/fbcon.c
+++ b/drivers/video/fbdev/core/fbcon.c
@@@ -3030,8 -2726,46 +3030,51 @@@ static void fbcon_set_all_vcs(struct fb
  		fbcon_modechanged(info);
  }
  
++<<<<<<< HEAD
 +static int fbcon_mode_deleted(struct fb_info *info,
 +			      struct fb_videomode *mode)
++=======
+ 
+ void fbcon_update_vcs(struct fb_info *info, bool all)
+ {
+ 	if (all)
+ 		fbcon_set_all_vcs(info);
+ 	else
+ 		fbcon_modechanged(info);
+ }
+ EXPORT_SYMBOL(fbcon_update_vcs);
+ 
+ /* let fbcon check if it supports a new screen resolution */
+ int fbcon_modechange_possible(struct fb_info *info, struct fb_var_screeninfo *var)
+ {
+ 	struct fbcon_ops *ops = info->fbcon_par;
+ 	struct vc_data *vc;
+ 	unsigned int i;
+ 
+ 	WARN_CONSOLE_UNLOCKED();
+ 
+ 	if (!ops)
+ 		return 0;
+ 
+ 	/* prevent setting a screen size which is smaller than font size */
+ 	for (i = first_fb_vc; i <= last_fb_vc; i++) {
+ 		vc = vc_cons[i].d;
+ 		if (!vc || vc->vc_mode != KD_TEXT ||
+ 			   registered_fb[con2fb_map[i]] != info)
+ 			continue;
+ 
+ 		if (vc->vc_font.width  > FBCON_SWAP(var->rotate, var->xres, var->yres) ||
+ 		    vc->vc_font.height > FBCON_SWAP(var->rotate, var->yres, var->xres))
+ 			return -EINVAL;
+ 	}
+ 
+ 	return 0;
+ }
+ EXPORT_SYMBOL_GPL(fbcon_modechange_possible);
+ 
+ int fbcon_mode_deleted(struct fb_info *info,
+ 		       struct fb_videomode *mode)
++>>>>>>> e64242caef18 (fbcon: Prevent that screen size is smaller than font size)
  {
  	struct fb_info *fb_info;
  	struct fbcon_display *p;
diff --cc drivers/video/fbdev/core/fbmem.c
index 6fbe2ec3f4f5,7dc6848a96bb..000000000000
--- a/drivers/video/fbdev/core/fbmem.c
+++ b/drivers/video/fbdev/core/fbmem.c
@@@ -1090,9 -1107,11 +1090,17 @@@ static long do_fb_ioctl(struct fb_info 
  			return -EFAULT;
  		console_lock();
  		lock_fb_info(info);
++<<<<<<< HEAD
 +		info->flags |= FBINFO_MISC_USEREVENT;
 +		ret = fb_set_var(info, &var);
 +		info->flags &= ~FBINFO_MISC_USEREVENT;
++=======
+ 		ret = fbcon_modechange_possible(info, &var);
+ 		if (!ret)
+ 			ret = fb_set_var(info, &var);
+ 		if (!ret)
+ 			fbcon_update_vcs(info, var.activate & FB_ACTIVATE_ALL);
++>>>>>>> e64242caef18 (fbcon: Prevent that screen size is smaller than font size)
  		unlock_fb_info(info);
  		console_unlock();
  		if (!ret && copy_to_user(argp, &var, sizeof(var)))
diff --cc include/linux/fbcon.h
index 34abc144f9f8,2382dec6d6ab..000000000000
--- a/include/linux/fbcon.h
+++ b/include/linux/fbcon.h
@@@ -6,13 -6,41 +6,43 @@@ void __init fb_console_init(void)
  void __exit fb_console_exit(void);
  int fbcon_fb_registered(struct fb_info *info);
  void fbcon_fb_unregistered(struct fb_info *info);
++<<<<<<< HEAD
++=======
+ void fbcon_fb_unbind(struct fb_info *info);
+ void fbcon_suspended(struct fb_info *info);
+ void fbcon_resumed(struct fb_info *info);
+ int fbcon_mode_deleted(struct fb_info *info,
+ 		       struct fb_videomode *mode);
+ void fbcon_new_modelist(struct fb_info *info);
+ void fbcon_get_requirement(struct fb_info *info,
+ 			   struct fb_blit_caps *caps);
+ void fbcon_fb_blanked(struct fb_info *info, int blank);
+ int  fbcon_modechange_possible(struct fb_info *info,
+ 			       struct fb_var_screeninfo *var);
+ void fbcon_update_vcs(struct fb_info *info, bool all);
++>>>>>>> e64242caef18 (fbcon: Prevent that screen size is smaller than font size)
  void fbcon_remap_all(struct fb_info *info);
 -int fbcon_set_con2fb_map_ioctl(void __user *argp);
 -int fbcon_get_con2fb_map_ioctl(void __user *argp);
  #else
  static inline void fb_console_init(void) {}
  static inline void fb_console_exit(void) {}
  static inline int fbcon_fb_registered(struct fb_info *info) { return 0; }
  static inline void fbcon_fb_unregistered(struct fb_info *info) {}
++<<<<<<< HEAD
++=======
+ static inline void fbcon_fb_unbind(struct fb_info *info) {}
+ static inline void fbcon_suspended(struct fb_info *info) {}
+ static inline void fbcon_resumed(struct fb_info *info) {}
+ static inline int fbcon_mode_deleted(struct fb_info *info,
+ 				     struct fb_videomode *mode) { return 0; }
+ static inline void fbcon_new_modelist(struct fb_info *info) {}
+ static inline void fbcon_get_requirement(struct fb_info *info,
+ 					 struct fb_blit_caps *caps) {}
+ static inline void fbcon_fb_blanked(struct fb_info *info, int blank) {}
+ static inline int  fbcon_modechange_possible(struct fb_info *info,
+ 				struct fb_var_screeninfo *var) { return 0; }
+ static inline void fbcon_update_vcs(struct fb_info *info, bool all) {}
++>>>>>>> e64242caef18 (fbcon: Prevent that screen size is smaller than font size)
  static inline void fbcon_remap_all(struct fb_info *info) {}
 -static inline int fbcon_set_con2fb_map_ioctl(void __user *argp) { return 0; }
 -static inline int fbcon_get_con2fb_map_ioctl(void __user *argp) { return 0; }
  #endif
  
  #endif /* _LINUX_FBCON_H */
* Unmerged path drivers/video/fbdev/core/fbcon.c
* Unmerged path drivers/video/fbdev/core/fbmem.c
* Unmerged path include/linux/fbcon.h
