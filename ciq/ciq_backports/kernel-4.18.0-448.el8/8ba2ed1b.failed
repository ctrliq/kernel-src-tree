swiotlb: add a SWIOTLB_ANY flag to lift the low memory restriction

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Christoph Hellwig <hch@lst.de>
commit 8ba2ed1be90fc210126f68186564707478552c95
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/8ba2ed1b.failed

Power SVM wants to allocate a swiotlb buffer that is not restricted to
low memory for the trusted hypervisor scheme.  Consolidate the support
for this into the swiotlb_init interface by adding a new flag.

	Signed-off-by: Christoph Hellwig <hch@lst.de>
	Reviewed-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
	Tested-by: Boris Ostrovsky <boris.ostrovsky@oracle.com>
(cherry picked from commit 8ba2ed1be90fc210126f68186564707478552c95)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/powerpc/mm/mem.c
#	arch/powerpc/platforms/pseries/svm.c
#	include/linux/swiotlb.h
#	kernel/dma/swiotlb.c
diff --cc arch/powerpc/mm/mem.c
index e97f0a9e3c1f,46fb78e3bb36..000000000000
--- a/arch/powerpc/mm/mem.c
+++ b/arch/powerpc/mm/mem.c
@@@ -325,10 -241,15 +325,22 @@@ void __init mem_init(void
  	BUILD_BUG_ON(MMU_PAGE_COUNT > 16);
  
  #ifdef CONFIG_SWIOTLB
++<<<<<<< HEAD
 +	if (is_secure_guest())
 +		svm_swiotlb_init();
 +	else
 +		swiotlb_init(0);
++=======
+ 	/*
+ 	 * Some platforms (e.g. 85xx) limit DMA-able memory way below
+ 	 * 4G. We force memblock to bottom-up mode to ensure that the
+ 	 * memory allocated in swiotlb_init() is DMA-able.
+ 	 * As it's the last memblock allocation, no need to reset it
+ 	 * back to to-down.
+ 	 */
+ 	memblock_set_bottom_up(true);
+ 	swiotlb_init(ppc_swiotlb_enable, ppc_swiotlb_flags);
++>>>>>>> 8ba2ed1be90f (swiotlb: add a SWIOTLB_ANY flag to lift the low memory restriction)
  #endif
  
  	high_memory = (void *) __va(max_low_pfn * PAGE_SIZE);
diff --cc arch/powerpc/platforms/pseries/svm.c
index 87f001b4c4e4,3b4045d508ec..000000000000
--- a/arch/powerpc/platforms/pseries/svm.c
+++ b/arch/powerpc/platforms/pseries/svm.c
@@@ -36,34 -37,9 +36,37 @@@ static int __init init_svm(void
  }
  machine_early_initcall(pseries, init_svm);
  
++<<<<<<< HEAD
 +/*
 + * Initialize SWIOTLB. Essentially the same as swiotlb_init(), except that it
 + * can allocate the buffer anywhere in memory. Since the hypervisor doesn't have
 + * any addressing limitation, we don't need to allocate it in low addresses.
 + */
 +void __init svm_swiotlb_init(void)
 +{
 +	unsigned char *vstart;
 +	unsigned long bytes, io_tlb_nslabs;
 +
 +	io_tlb_nslabs = (swiotlb_size_or_default() >> IO_TLB_SHIFT);
 +	io_tlb_nslabs = ALIGN(io_tlb_nslabs, IO_TLB_SEGSIZE);
 +
 +	bytes = io_tlb_nslabs << IO_TLB_SHIFT;
 +
 +	vstart = memblock_alloc(PAGE_ALIGN(bytes), PAGE_SIZE);
 +	if (vstart && !swiotlb_init_with_tbl(vstart, io_tlb_nslabs, false))
 +		return;
 +
 +
 +	memblock_free_early(__pa(vstart),
 +			    PAGE_ALIGN(io_tlb_nslabs << IO_TLB_SHIFT));
 +	panic("SVM: Cannot allocate SWIOTLB buffer");
 +}
 +
++=======
++>>>>>>> 8ba2ed1be90f (swiotlb: add a SWIOTLB_ANY flag to lift the low memory restriction)
  int set_memory_encrypted(unsigned long addr, int numpages)
  {
 -	if (!cc_platform_has(CC_ATTR_MEM_ENCRYPT))
 +	if (!mem_encrypt_active())
  		return 0;
  
  	if (!PAGE_ALIGNED(addr))
diff --cc include/linux/swiotlb.h
index b48b26bfa0ed,eabdd8998702..000000000000
--- a/include/linux/swiotlb.h
+++ b/include/linux/swiotlb.h
@@@ -13,11 -13,9 +13,17 @@@ struct device
  struct page;
  struct scatterlist;
  
++<<<<<<< HEAD
 +enum swiotlb_force {
 +	SWIOTLB_NORMAL,		/* Default - depending on HW DMA mask etc. */
 +	SWIOTLB_FORCE,		/* swiotlb=force */
 +	SWIOTLB_NO_FORCE,	/* swiotlb=noforce */
 +};
++=======
+ #define SWIOTLB_VERBOSE	(1 << 0) /* verbose initialization */
+ #define SWIOTLB_FORCE	(1 << 1) /* force bounce buffering */
+ #define SWIOTLB_ANY	(1 << 2) /* allow any memory for the buffer */
++>>>>>>> 8ba2ed1be90f (swiotlb: add a SWIOTLB_ANY flag to lift the low memory restriction)
  
  /*
   * Maximum allowable number of contiguous slabs to map,
diff --cc kernel/dma/swiotlb.c
index 3d2f6fb48f35,f6e091424af3..000000000000
--- a/kernel/dma/swiotlb.c
+++ b/kernel/dma/swiotlb.c
@@@ -263,14 -261,23 +263,26 @@@ swiotlb_init(int verbose
  	size_t bytes = PAGE_ALIGN(default_nslabs << IO_TLB_SHIFT);
  	void *tlb;
  
 -	if (!addressing_limit && !swiotlb_force_bounce)
 -		return;
 -	if (swiotlb_force_disable)
 +	if (swiotlb_force == SWIOTLB_NO_FORCE)
  		return;
  
++<<<<<<< HEAD
 +	/* Get IO TLB memory from the low pages */
 +	tlb = memblock_alloc_low_nopanic(bytes, PAGE_SIZE);
++=======
+ 	/*
+ 	 * By default allocate the bounce buffer memory from low memory, but
+ 	 * allow to pick a location everywhere for hypervisors with guest
+ 	 * memory encryption.
+ 	 */
+ 	if (flags & SWIOTLB_ANY)
+ 		tlb = memblock_alloc(bytes, PAGE_SIZE);
+ 	else
+ 		tlb = memblock_alloc_low(bytes, PAGE_SIZE);
++>>>>>>> 8ba2ed1be90f (swiotlb: add a SWIOTLB_ANY flag to lift the low memory restriction)
  	if (!tlb)
  		goto fail;
 -	if (swiotlb_init_with_tbl(tlb, default_nslabs, flags))
 +	if (swiotlb_init_with_tbl(tlb, default_nslabs, verbose))
  		goto fail_free_mem;
  	return;
  
diff --git a/arch/powerpc/include/asm/svm.h b/arch/powerpc/include/asm/svm.h
index 7546402d796a..85580b30aba4 100644
--- a/arch/powerpc/include/asm/svm.h
+++ b/arch/powerpc/include/asm/svm.h
@@ -15,8 +15,6 @@ static inline bool is_secure_guest(void)
 	return mfmsr() & MSR_S;
 }
 
-void __init svm_swiotlb_init(void);
-
 void dtl_cache_ctor(void *addr);
 #define get_dtl_cache_ctor()	(is_secure_guest() ? dtl_cache_ctor : NULL)
 
@@ -27,8 +25,6 @@ static inline bool is_secure_guest(void)
 	return false;
 }
 
-static inline void svm_swiotlb_init(void) {}
-
 #define get_dtl_cache_ctor() NULL
 
 #endif /* CONFIG_PPC_SVM */
diff --git a/arch/powerpc/include/asm/swiotlb.h b/arch/powerpc/include/asm/swiotlb.h
index b7d082c0ec25..9b359256780c 100644
--- a/arch/powerpc/include/asm/swiotlb.h
+++ b/arch/powerpc/include/asm/swiotlb.h
@@ -14,6 +14,7 @@
 #include <linux/swiotlb.h>
 
 extern unsigned int ppc_swiotlb_enable;
+extern unsigned int ppc_swiotlb_flags;
 
 #ifdef CONFIG_SWIOTLB
 void swiotlb_detect_4g(void);
diff --git a/arch/powerpc/kernel/dma-swiotlb.c b/arch/powerpc/kernel/dma-swiotlb.c
index 132d61c91629..2f39c940a861 100644
--- a/arch/powerpc/kernel/dma-swiotlb.c
+++ b/arch/powerpc/kernel/dma-swiotlb.c
@@ -15,6 +15,7 @@
 #include <asm/swiotlb.h>
 
 unsigned int ppc_swiotlb_enable;
+unsigned int ppc_swiotlb_flags;
 
 void __init swiotlb_detect_4g(void)
 {
* Unmerged path arch/powerpc/mm/mem.c
* Unmerged path arch/powerpc/platforms/pseries/svm.c
* Unmerged path include/linux/swiotlb.h
* Unmerged path kernel/dma/swiotlb.c
