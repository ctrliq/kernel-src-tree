wifi: nl80211: reject link specific elements on assoc link

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Johannes Berg <johannes.berg@intel.com>
commit 34d76a14f8f75df1b37557247a973b9093c74a24
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/34d76a14.failed

When we associate, we'll include all the elements for the
link we're sending the association request on in the frame
and the specific ones for other links in the multi-link
element container. Prohibit adding link-specific elements
for the association link.

Fixes: d648c23024bd ("wifi: nl80211: support MLO in auth/assoc")
	Signed-off-by: Johannes Berg <johannes.berg@intel.com>
(cherry picked from commit 34d76a14f8f75df1b37557247a973b9093c74a24)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/wireless/nl80211.c
diff --cc net/wireless/nl80211.c
index a792f71e47d7,be969f64b5c3..000000000000
--- a/net/wireless/nl80211.c
+++ b/net/wireless/nl80211.c
@@@ -10536,9 -10748,89 +10536,95 @@@ static int nl80211_associate(struct sk_
  		       sizeof(req.s1g_capa));
  	}
  
++<<<<<<< HEAD
 +	req.bss = nl80211_assoc_bss(rdev, ssid, ssid_len, info->attrs, &bssid);
 +	if (IS_ERR(req.bss))
 +		return PTR_ERR(req.bss);
++=======
+ 	req.link_id = nl80211_link_id_or_invalid(info->attrs);
+ 
+ 	if (info->attrs[NL80211_ATTR_MLO_LINKS]) {
+ 		unsigned int attrsize = NUM_NL80211_ATTR * sizeof(*attrs);
+ 		struct nlattr *link;
+ 		int rem = 0;
+ 
+ 		if (req.link_id < 0)
+ 			return -EINVAL;
+ 
+ 		if (!(rdev->wiphy.flags & WIPHY_FLAG_SUPPORTS_MLO))
+ 			return -EINVAL;
+ 
+ 		if (info->attrs[NL80211_ATTR_MAC] ||
+ 		    info->attrs[NL80211_ATTR_WIPHY_FREQ] ||
+ 		    !info->attrs[NL80211_ATTR_MLD_ADDR])
+ 			return -EINVAL;
+ 
+ 		req.ap_mld_addr = nla_data(info->attrs[NL80211_ATTR_MLD_ADDR]);
+ 
+ 		attrs = kzalloc(attrsize, GFP_KERNEL);
+ 		if (!attrs)
+ 			return -ENOMEM;
+ 
+ 		nla_for_each_nested(link,
+ 				    info->attrs[NL80211_ATTR_MLO_LINKS],
+ 				    rem) {
+ 			memset(attrs, 0, attrsize);
+ 
+ 			nla_parse_nested(attrs, NL80211_ATTR_MAX,
+ 					 link, NULL, NULL);
+ 
+ 			if (!attrs[NL80211_ATTR_MLO_LINK_ID]) {
+ 				err = -EINVAL;
+ 				goto free;
+ 			}
+ 
+ 			link_id = nla_get_u8(attrs[NL80211_ATTR_MLO_LINK_ID]);
+ 			/* cannot use the same link ID again */
+ 			if (req.links[link_id].bss) {
+ 				err = -EINVAL;
+ 				goto free;
+ 			}
+ 			req.links[link_id].bss =
+ 				nl80211_assoc_bss(rdev, ssid, ssid_len, attrs,
+ 						  &bssid);
+ 			if (IS_ERR(req.links[link_id].bss)) {
+ 				err = PTR_ERR(req.links[link_id].bss);
+ 				req.links[link_id].bss = NULL;
+ 				goto free;
+ 			}
+ 
+ 			if (attrs[NL80211_ATTR_IE]) {
+ 				req.links[link_id].elems =
+ 					nla_data(attrs[NL80211_ATTR_IE]);
+ 				req.links[link_id].elems_len =
+ 					nla_len(attrs[NL80211_ATTR_IE]);
+ 			}
+ 		}
+ 
+ 		if (!req.links[req.link_id].bss) {
+ 			err = -EINVAL;
+ 			goto free;
+ 		}
+ 
+ 		if (req.links[req.link_id].elems_len) {
+ 			GENL_SET_ERR_MSG(info,
+ 					 "cannot have per-link elems on assoc link");
+ 			err = -EINVAL;
+ 			goto free;
+ 		}
+ 
+ 		kfree(attrs);
+ 		attrs = NULL;
+ 	} else {
+ 		if (req.link_id >= 0)
+ 			return -EINVAL;
+ 
+ 		req.bss = nl80211_assoc_bss(rdev, ssid, ssid_len, info->attrs,
+ 					    &bssid);
+ 		if (IS_ERR(req.bss))
+ 			return PTR_ERR(req.bss);
+ 	}
++>>>>>>> 34d76a14f8f7 (wifi: nl80211: reject link specific elements on assoc link)
  
  	err = nl80211_crypto_settings(rdev, info, &req.crypto, 1);
  	if (!err) {
* Unmerged path net/wireless/nl80211.c
