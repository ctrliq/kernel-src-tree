scsi: RDMA/srp: Use scsi_cmd_to_rq() instead of scsi_cmnd.request

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Bart Van Assche <bvanassche@acm.org>
commit 9c5274eec75b13e8d26fe562c5276b0b91a254a9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/9c5274ee.failed

Prepare for removal of the request pointer by using scsi_cmd_to_rq()
instead. This patch does not change any functionality.

Link: https://lore.kernel.org/r/20210809230355.8186-10-bvanassche@acm.org
	Reviewed-by: Hannes Reinecke <hare@suse.de>
	Signed-off-by: Bart Van Assche <bvanassche@acm.org>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit 9c5274eec75b13e8d26fe562c5276b0b91a254a9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/ulp/srp/ib_srp.c
diff --cc drivers/infiniband/ulp/srp/ib_srp.c
index 13f5bbfe62f9,71eda91e810c..000000000000
--- a/drivers/infiniband/ulp/srp/ib_srp.c
+++ b/drivers/infiniband/ulp/srp/ib_srp.c
@@@ -1289,6 -1270,25 +1289,28 @@@ static void srp_finish_req(struct srp_r
  	}
  }
  
++<<<<<<< HEAD
++=======
+ struct srp_terminate_context {
+ 	struct srp_target_port *srp_target;
+ 	int scsi_result;
+ };
+ 
+ static bool srp_terminate_cmd(struct scsi_cmnd *scmnd, void *context_ptr,
+ 			      bool reserved)
+ {
+ 	struct srp_terminate_context *context = context_ptr;
+ 	struct srp_target_port *target = context->srp_target;
+ 	u32 tag = blk_mq_unique_tag(scsi_cmd_to_rq(scmnd));
+ 	struct srp_rdma_ch *ch = &target->ch[blk_mq_unique_tag_to_hwq(tag)];
+ 	struct srp_request *req = scsi_cmd_priv(scmnd);
+ 
+ 	srp_finish_req(ch, req, NULL, context->scsi_result);
+ 
+ 	return true;
+ }
+ 
++>>>>>>> 9c5274eec75b (scsi: RDMA/srp: Use scsi_cmd_to_rq() instead of scsi_cmnd.request)
  static void srp_terminate_io(struct srp_rport *rport)
  {
  	struct srp_target_port *target = rport->lld_data;
@@@ -2166,9 -2152,10 +2188,10 @@@ static void srp_handle_qp_err(struct ib
  
  static int srp_queuecommand(struct Scsi_Host *shost, struct scsi_cmnd *scmnd)
  {
+ 	struct request *rq = scsi_cmd_to_rq(scmnd);
  	struct srp_target_port *target = host_to_target(shost);
  	struct srp_rdma_ch *ch;
 -	struct srp_request *req = scsi_cmd_priv(scmnd);
 +	struct srp_request *req;
  	struct srp_iu *iu;
  	struct srp_cmd *cmd;
  	struct ib_device *dev;
@@@ -2181,13 -2167,9 +2204,13 @@@
  	if (unlikely(scmnd->result))
  		goto err;
  
- 	WARN_ON_ONCE(scmnd->request->tag < 0);
- 	tag = blk_mq_unique_tag(scmnd->request);
+ 	WARN_ON_ONCE(rq->tag < 0);
+ 	tag = blk_mq_unique_tag(rq);
  	ch = &target->ch[blk_mq_unique_tag_to_hwq(tag)];
 +	idx = blk_mq_unique_tag_to_tag(tag);
 +	WARN_ONCE(idx >= target->req_ring_size, "%s: tag %#x: idx %d >= %d\n",
 +		  dev_name(&shost->shost_gendev), tag, idx,
 +		  target->req_ring_size);
  
  	spin_lock_irqsave(&ch->lock, flags);
  	iu = __srp_get_tx_iu(ch, SRP_IU_CMD);
* Unmerged path drivers/infiniband/ulp/srp/ib_srp.c
