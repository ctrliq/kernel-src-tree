ASoC: SOF: Add volume_get/put IPC3 ops

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Ranjani Sridharan <ranjani.sridharan@linux.intel.com>
commit 838d04f3e232c3fb8c421959e8ff09e3a918011e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/838d04f3.failed

Define and set the volume_get/put control IPC ops for IPC3.

	Signed-off-by: Ranjani Sridharan <ranjani.sridharan@linux.intel.com>
	Reviewed-by: PÃ©ter Ujfalusi <peter.ujfalusi@linux.intel.com>
	Reviewed-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
Link: https://lore.kernel.org/r/20220317175044.1752400-7-ranjani.sridharan@linux.intel.com
	Signed-off-by: Mark Brown <broonie@kernel.org>
(cherry picked from commit 838d04f3e232c3fb8c421959e8ff09e3a918011e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	sound/soc/sof/control.c
#	sound/soc/sof/ipc3-control.c
diff --cc sound/soc/sof/control.c
index ef61936dad59,9eb54b7024b3..000000000000
--- a/sound/soc/sof/control.c
+++ b/sound/soc/sof/control.c
@@@ -45,29 -45,9 +45,9 @@@ static void update_mute_led(struct snd_
  #endif
  }
  
- static inline u32 mixer_to_ipc(unsigned int value, u32 *volume_map, int size)
- {
- 	if (value >= size)
- 		return volume_map[size - 1];
- 
- 	return volume_map[value];
- }
- 
- static inline u32 ipc_to_mixer(u32 value, u32 *volume_map, int size)
- {
- 	int i;
- 
- 	for (i = 0; i < size; i++) {
- 		if (volume_map[i] >= value)
- 			return i;
- 	}
- 
- 	return i - 1;
- }
- 
  static void snd_sof_refresh_control(struct snd_sof_control *scontrol)
  {
 -	struct sof_ipc_ctrl_data *cdata = scontrol->ipc_control_data;
 +	struct sof_ipc_ctrl_data *cdata = scontrol->control_data;
  	struct snd_soc_component *scomp = scontrol->scomp;
  	int ret;
  
@@@ -94,19 -75,14 +75,19 @@@
  int snd_sof_volume_get(struct snd_kcontrol *kcontrol,
  		       struct snd_ctl_elem_value *ucontrol)
  {
- 	struct soc_mixer_control *sm =
- 		(struct soc_mixer_control *)kcontrol->private_value;
+ 	struct soc_mixer_control *sm = (struct soc_mixer_control *)kcontrol->private_value;
  	struct snd_sof_control *scontrol = sm->dobj.private;
++<<<<<<< HEAD
 +	struct sof_ipc_ctrl_data *cdata = scontrol->control_data;
 +	unsigned int i, channels = scontrol->num_channels;
++=======
+ 	struct snd_soc_component *scomp = scontrol->scomp;
+ 	struct snd_sof_dev *sdev = snd_soc_component_get_drvdata(scomp);
+ 	const struct sof_ipc_tplg_ops *tplg_ops = sdev->ipc->ops->tplg;
++>>>>>>> 838d04f3e232 (ASoC: SOF: Add volume_get/put IPC3 ops)
  
- 	snd_sof_refresh_control(scontrol);
- 
- 	/* read back each channel */
- 	for (i = 0; i < channels; i++)
- 		ucontrol->value.integer.value[i] =
- 			ipc_to_mixer(cdata->chanv[i].value,
- 				     scontrol->volume_table, sm->max + 1);
+ 	if (tplg_ops->control->volume_get)
+ 		return tplg_ops->control->volume_get(scontrol, ucontrol);
  
  	return 0;
  }
@@@ -114,28 -90,16 +95,23 @@@
  int snd_sof_volume_put(struct snd_kcontrol *kcontrol,
  		       struct snd_ctl_elem_value *ucontrol)
  {
- 	struct soc_mixer_control *sm =
- 		(struct soc_mixer_control *)kcontrol->private_value;
+ 	struct soc_mixer_control *sm = (struct soc_mixer_control *)kcontrol->private_value;
  	struct snd_sof_control *scontrol = sm->dobj.private;
  	struct snd_soc_component *scomp = scontrol->scomp;
++<<<<<<< HEAD
 +	struct sof_ipc_ctrl_data *cdata = scontrol->control_data;
 +	unsigned int i, channels = scontrol->num_channels;
 +	bool change = false;
 +	u32 value;
++=======
+ 	struct snd_sof_dev *sdev = snd_soc_component_get_drvdata(scomp);
+ 	const struct sof_ipc_tplg_ops *tplg_ops = sdev->ipc->ops->tplg;
++>>>>>>> 838d04f3e232 (ASoC: SOF: Add volume_get/put IPC3 ops)
  
- 	/* update each channel */
- 	for (i = 0; i < channels; i++) {
- 		value = mixer_to_ipc(ucontrol->value.integer.value[i],
- 				     scontrol->volume_table, sm->max + 1);
- 		change = change || (value != cdata->chanv[i].value);
- 		cdata->chanv[i].channel = i;
- 		cdata->chanv[i].value = value;
- 	}
+ 	if (tplg_ops->control->volume_put)
+ 		return tplg_ops->control->volume_put(scontrol, ucontrol);
  
- 	/* notify DSP of mixer updates */
- 	if (pm_runtime_active(scomp->dev))
- 		snd_sof_ipc_set_get_comp_data(scontrol, true);
- 	return change;
+ 	return false;
  }
  
  int snd_sof_volume_info(struct snd_kcontrol *kcontrol, struct snd_ctl_elem_info *uinfo)
* Unmerged path sound/soc/sof/ipc3-control.c
* Unmerged path sound/soc/sof/control.c
* Unmerged path sound/soc/sof/ipc3-control.c
