of: Factor out #{addr,size}-cells parsing

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Robin Murphy <robin.murphy@arm.com>
commit b68ac8dc22ebbf003e26e44bf4dd3030c076df5a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/b68ac8dc.failed

In some cases such as PCI host controllers, we may have a "parent bus"
which is an OF leaf node, but still need to correctly parse ranges from
the point of view of that bus. For that, factor out variants of the
"#addr-cells" and "#size-cells" parsers which do not assume they have a
device node and thus immediately traverse upwards before reading the
relevant property.

	Signed-off-by: Robin Murphy <robin.murphy@arm.com>
[robh: don't make of_bus_n_{addr,size}_cells() public]
	Reviewed-by: Geert Uytterhoeven <geert+renesas@glider.be>
	Tested-by: Nicolas Saenz Julienne <nsaenzjulienne@suse.de>
	Reviewed-by: Nicolas Saenz Julienne <nsaenzjulienne@suse.de>
	Signed-off-by: Rob Herring <robh@kernel.org>
(cherry picked from commit b68ac8dc22ebbf003e26e44bf4dd3030c076df5a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/of/base.c
#	drivers/of/of_private.h
diff --cc drivers/of/base.c
index 7b4dbaaf5b7a,db7fbc0c0893..000000000000
--- a/drivers/of/base.c
+++ b/drivers/of/base.c
@@@ -78,7 -79,14 +78,18 @@@ bool of_node_name_prefix(const struct d
  }
  EXPORT_SYMBOL(of_node_name_prefix);
  
++<<<<<<< HEAD
 +int of_n_addr_cells(struct device_node *np)
++=======
+ static bool __of_node_is_type(const struct device_node *np, const char *type)
+ {
+ 	const char *match = __of_get_property(np, "device_type", NULL);
+ 
+ 	return np && match && type && !strcmp(match, type);
+ }
+ 
+ int of_bus_n_addr_cells(struct device_node *np)
++>>>>>>> b68ac8dc22eb (of: Factor out #{addr,size}-cells parsing)
  {
  	u32 cells;
  
diff --cc drivers/of/of_private.h
index c4b2abe338d2,66294d29942a..000000000000
--- a/drivers/of/of_private.h
+++ b/drivers/of/of_private.h
@@@ -150,13 -158,15 +150,22 @@@ extern void __of_sysfs_remove_bin_file(
  #define for_each_transaction_entry_reverse(_oft, _te) \
  	list_for_each_entry_reverse(_te, &(_oft)->te_list, node)
  
++<<<<<<< HEAD
 +struct bus_dma_region;
 +#if defined(CONFIG_OF_ADDRESS) && defined(CONFIG_HAS_DMA)
 +int of_dma_get_range(struct device_node *np,
 +		const struct bus_dma_region **map);
++=======
+ extern int of_bus_n_addr_cells(struct device_node *np);
+ extern int of_bus_n_size_cells(struct device_node *np);
+ 
+ #ifdef CONFIG_OF_ADDRESS
+ extern int of_dma_get_range(struct device_node *np, u64 *dma_addr,
+ 			    u64 *paddr, u64 *size);
++>>>>>>> b68ac8dc22eb (of: Factor out #{addr,size}-cells parsing)
  #else
 -static inline int of_dma_get_range(struct device_node *np, u64 *dma_addr,
 -				   u64 *paddr, u64 *size)
 +static inline int of_dma_get_range(struct device_node *np,
 +		const struct bus_dma_region **map)
  {
  	return -ENODEV;
  }
diff --git a/drivers/of/address.c b/drivers/of/address.c
index 90fd064ef2a0..86f733ee4bc3 100644
--- a/drivers/of/address.c
+++ b/drivers/of/address.c
@@ -14,6 +14,8 @@
 #include <linux/slab.h>
 #include <linux/string.h>
 
+#include "of_private.h"
+
 /* Max address size we deal with */
 #define OF_MAX_ADDR_CELLS	4
 #define OF_CHECK_ADDR_COUNT(na)	((na) > 0 && (na) <= OF_MAX_ADDR_CELLS)
* Unmerged path drivers/of/base.c
* Unmerged path drivers/of/of_private.h
