RDMA/mlx5: Merge similar flows of allocating MR from the cache

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Aharon Landau <aharonl@nvidia.com>
commit 56561ac6b27d489feb5d1e7e8b2a55a15063fcad
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/56561ac6.failed

When allocating a MR from the cache, the driver calls to get_cache_mr(),
and in case of failure, retries with create_cache_mr(). This is the flow
of mlx5_mr_cache_alloc(), so use it instead.

Link: https://lore.kernel.org/r/53c85fcd4de6ec9de0b8e6cbb1bf5d5fe19900c3.1644947594.git.leonro@nvidia.com
	Signed-off-by: Aharon Landau <aharonl@nvidia.com>
	Signed-off-by: Leon Romanovsky <leonro@nvidia.com>
	Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
(cherry picked from commit 56561ac6b27d489feb5d1e7e8b2a55a15063fcad)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/hw/mlx5/mr.c
diff --cc drivers/infiniband/hw/mlx5/mr.c
index 68c0bdccc552,0c1dc13b4c45..000000000000
--- a/drivers/infiniband/hw/mlx5/mr.c
+++ b/drivers/infiniband/hw/mlx5/mr.c
@@@ -594,39 -588,6 +587,41 @@@ struct mlx5_ib_mr *mlx5_mr_cache_alloc(
  	return mr;
  }
  
++<<<<<<< HEAD
 +/* Return a MR already available in the cache */
 +static struct mlx5_ib_mr *get_cache_mr(struct mlx5_cache_ent *req_ent)
 +{
 +	struct mlx5_ib_mr *mr = NULL;
 +	struct mlx5_cache_ent *ent = req_ent;
 +
 +	spin_lock_irq(&ent->lock);
 +	if (!list_empty(&ent->head)) {
 +		mr = list_first_entry(&ent->head, struct mlx5_ib_mr, list);
 +		list_del(&mr->list);
 +		ent->available_mrs--;
 +		queue_adjust_cache_locked(ent);
 +		spin_unlock_irq(&ent->lock);
 +		mlx5_clear_mr(mr);
 +		return mr;
 +	}
 +	queue_adjust_cache_locked(ent);
 +	spin_unlock_irq(&ent->lock);
 +	req_ent->miss++;
 +	return NULL;
 +}
 +
 +static void detach_mr_from_cache(struct mlx5_ib_mr *mr)
 +{
 +	struct mlx5_cache_ent *ent = mr->cache_ent;
 +
 +	mr->cache_ent = NULL;
 +	spin_lock_irq(&ent->lock);
 +	ent->total_mrs--;
 +	spin_unlock_irq(&ent->lock);
 +}
 +
++=======
++>>>>>>> 56561ac6b27d (RDMA/mlx5: Merge similar flows of allocating MR from the cache)
  static void mlx5_mr_cache_free(struct mlx5_ib_dev *dev, struct mlx5_ib_mr *mr)
  {
  	struct mlx5_cache_ent *ent = mr->cache_ent;
@@@ -947,19 -909,21 +942,25 @@@ static struct mlx5_ib_mr *alloc_mr_from
  		return ERR_PTR(-EINVAL);
  	ent = mr_cache_ent_from_order(
  		dev, order_base_2(ib_umem_num_dma_blocks(umem, page_size)));
 -	/*
 -	 * Matches access in alloc_cache_mr(). If the MR can't come from the
 -	 * cache then synchronously create an uncached one.
 -	 */
 -	if (!ent || ent->limit == 0 ||
 -	    !mlx5_ib_can_reconfig_with_umr(dev, 0, access_flags)) {
 -		mutex_lock(&dev->slow_path_mutex);
 -		mr = reg_create(pd, umem, iova, access_flags, page_size, false);
 -		mutex_unlock(&dev->slow_path_mutex);
 -		return mr;
 -	}
 +	if (!ent)
 +		return ERR_PTR(-E2BIG);
  
 +	/* Matches access in alloc_cache_mr() */
 +	if (!mlx5_ib_can_reconfig_with_umr(dev, 0, access_flags))
 +		return ERR_PTR(-EOPNOTSUPP);
 +
++<<<<<<< HEAD
 +	mr = get_cache_mr(ent);
 +	if (!mr) {
 +		mr = create_cache_mr(ent);
 +		if (IS_ERR(mr))
 +			return mr;
 +	}
++=======
+ 	mr = mlx5_mr_cache_alloc(dev, ent, access_flags);
+ 	if (IS_ERR(mr))
+ 		return mr;
++>>>>>>> 56561ac6b27d (RDMA/mlx5: Merge similar flows of allocating MR from the cache)
  
  	mr->ibmr.pd = pd;
  	mr->umem = umem;
diff --git a/drivers/infiniband/hw/mlx5/mlx5_ib.h b/drivers/infiniband/hw/mlx5/mlx5_ib.h
index 466f1e5d7231..6ff1dd1009aa 100644
--- a/drivers/infiniband/hw/mlx5/mlx5_ib.h
+++ b/drivers/infiniband/hw/mlx5/mlx5_ib.h
@@ -1328,7 +1328,8 @@ int mlx5_mr_cache_init(struct mlx5_ib_dev *dev);
 int mlx5_mr_cache_cleanup(struct mlx5_ib_dev *dev);
 
 struct mlx5_ib_mr *mlx5_mr_cache_alloc(struct mlx5_ib_dev *dev,
-				       unsigned int entry, int access_flags);
+				       struct mlx5_cache_ent *ent,
+				       int access_flags);
 
 int mlx5_ib_check_mr_status(struct ib_mr *ibmr, u32 check_mask,
 			    struct ib_mr_status *mr_status);
* Unmerged path drivers/infiniband/hw/mlx5/mr.c
diff --git a/drivers/infiniband/hw/mlx5/odp.c b/drivers/infiniband/hw/mlx5/odp.c
index 677d9275aa78..66699d50f897 100644
--- a/drivers/infiniband/hw/mlx5/odp.c
+++ b/drivers/infiniband/hw/mlx5/odp.c
@@ -392,6 +392,7 @@ static void mlx5_ib_page_fault_resume(struct mlx5_ib_dev *dev,
 static struct mlx5_ib_mr *implicit_get_child_mr(struct mlx5_ib_mr *imr,
 						unsigned long idx)
 {
+	struct mlx5_ib_dev *dev = mr_to_mdev(imr);
 	struct ib_umem_odp *odp;
 	struct mlx5_ib_mr *mr;
 	struct mlx5_ib_mr *ret;
@@ -403,13 +404,14 @@ static struct mlx5_ib_mr *implicit_get_child_mr(struct mlx5_ib_mr *imr,
 	if (IS_ERR(odp))
 		return ERR_CAST(odp);
 
-	mr = mlx5_mr_cache_alloc(
-		mr_to_mdev(imr), MLX5_IMR_MTT_CACHE_ENTRY, imr->access_flags);
+	mr = mlx5_mr_cache_alloc(dev, &dev->cache.ent[MLX5_IMR_MTT_CACHE_ENTRY],
+				 imr->access_flags);
 	if (IS_ERR(mr)) {
 		ib_umem_odp_release(odp);
 		return mr;
 	}
 
+	mr->access_flags = imr->access_flags;
 	mr->ibmr.pd = imr->ibmr.pd;
 	mr->ibmr.device = &mr_to_mdev(imr)->ib_dev;
 	mr->umem = &odp->umem;
@@ -475,12 +477,15 @@ struct mlx5_ib_mr *mlx5_ib_alloc_implicit_mr(struct mlx5_ib_pd *pd,
 	if (IS_ERR(umem_odp))
 		return ERR_CAST(umem_odp);
 
-	imr = mlx5_mr_cache_alloc(dev, MLX5_IMR_KSM_CACHE_ENTRY, access_flags);
+	imr = mlx5_mr_cache_alloc(dev,
+				  &dev->cache.ent[MLX5_IMR_KSM_CACHE_ENTRY],
+				  access_flags);
 	if (IS_ERR(imr)) {
 		ib_umem_odp_release(umem_odp);
 		return imr;
 	}
 
+	imr->access_flags = access_flags;
 	imr->ibmr.pd = &pd->ibpd;
 	imr->mmkey.iova = 0;
 	imr->umem = &umem_odp->umem;
