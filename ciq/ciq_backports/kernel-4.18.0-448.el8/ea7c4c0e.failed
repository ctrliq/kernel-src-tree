Bluetooth: btintel: Fix the first HCI command not work with ROM device

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Tedd Ho-Jeong An <tedd.an@intel.com>
commit ea7c4c0e44ee6d8cdf149af4e4084b16154ef216
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/ea7c4c0e.failed

The some legacy ROM controllers have a bug with the first HCI command
sent to it returning number of completed commands as zero, which would
stall the command processing in the Bluetooth core.

As a workaround, send HCI Rest command first which will reset the
controller to fix the issue.

	Signed-off-by: Tedd Ho-Jeong An <tedd.an@intel.com>
	Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
(cherry picked from commit ea7c4c0e44ee6d8cdf149af4e4084b16154ef216)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/bluetooth/btintel.h
diff --cc drivers/bluetooth/btintel.h
index 773241e9644f,8a49795ad5af..000000000000
--- a/drivers/bluetooth/btintel.h
+++ b/drivers/bluetooth/btintel.h
@@@ -153,6 -138,47 +153,50 @@@ struct intel_debug_features 
  #define INTEL_CNVX_TOP_STEP(cnvx_top)	(((cnvx_top) & 0x0f000000) >> 24)
  #define INTEL_CNVX_TOP_PACK_SWAB(t, s)	__swab16(((__u16)(((t) << 4) | (s))))
  
++<<<<<<< HEAD
++=======
+ enum {
+ 	INTEL_BOOTLOADER,
+ 	INTEL_DOWNLOADING,
+ 	INTEL_FIRMWARE_LOADED,
+ 	INTEL_FIRMWARE_FAILED,
+ 	INTEL_BOOTING,
+ 	INTEL_BROKEN_INITIAL_NCMD,
+ 
+ 	__INTEL_NUM_FLAGS,
+ };
+ 
+ struct btintel_data {
+ 	DECLARE_BITMAP(flags, __INTEL_NUM_FLAGS);
+ };
+ 
+ #define btintel_set_flag(hdev, nr)					\
+ 	do {								\
+ 		struct btintel_data *intel = hci_get_priv((hdev));	\
+ 		set_bit((nr), intel->flags);				\
+ 	} while (0)
+ 
+ #define btintel_clear_flag(hdev, nr)					\
+ 	do {								\
+ 		struct btintel_data *intel = hci_get_priv((hdev));	\
+ 		clear_bit((nr), intel->flags);				\
+ 	} while (0)
+ 
+ #define btintel_wake_up_flag(hdev, nr)					\
+ 	do {								\
+ 		struct btintel_data *intel = hci_get_priv((hdev));	\
+ 		wake_up_bit(intel->flags, (nr));			\
+ 	} while (0)
+ 
+ #define btintel_get_flag(hdev)						\
+ 	(((struct btintel_data *)hci_get_priv(hdev))->flags)
+ 
+ #define btintel_test_flag(hdev, nr)	test_bit((nr), btintel_get_flag(hdev))
+ #define btintel_test_and_clear_flag(hdev, nr) test_and_clear_bit((nr), btintel_get_flag(hdev))
+ #define btintel_wait_on_flag_timeout(hdev, nr, m, to)			\
+ 		wait_on_bit_timeout(btintel_get_flag(hdev), (nr), m, to)
+ 
++>>>>>>> ea7c4c0e44ee (Bluetooth: btintel: Fix the first HCI command not work with ROM device)
  #if IS_ENABLED(CONFIG_BT_INTEL)
  
  int btintel_check_bdaddr(struct hci_dev *hdev);
diff --git a/drivers/bluetooth/btintel.c b/drivers/bluetooth/btintel.c
index 949020fa0142..be96998a7cd3 100644
--- a/drivers/bluetooth/btintel.c
+++ b/drivers/bluetooth/btintel.c
@@ -1691,6 +1691,26 @@ static int btintel_setup_combined(struct hci_dev *hdev)
 
 	BT_DBG("%s", hdev->name);
 
+	/* The some controllers have a bug with the first HCI command sent to it
+	 * returning number of completed commands as zero. This would stall the
+	 * command processing in the Bluetooth core.
+	 *
+	 * As a workaround, send HCI Reset command first which will reset the
+	 * number of completed commands and allow normal command processing
+	 * from now on.
+	 */
+	if (btintel_test_flag(hdev, INTEL_BROKEN_INITIAL_NCMD)) {
+		skb = __hci_cmd_sync(hdev, HCI_OP_RESET, 0, NULL,
+				     HCI_INIT_TIMEOUT);
+		if (IS_ERR(skb)) {
+			bt_dev_err(hdev,
+				   "sending initial HCI reset failed (%ld)",
+				   PTR_ERR(skb));
+			return PTR_ERR(skb);
+		}
+		kfree_skb(skb);
+	}
+
 	/* Starting from TyP device, the command parameter and response are
 	 * changed even though the OCF for HCI_Intel_Read_Version command
 	 * remains same. The legacy devices can handle even if the
* Unmerged path drivers/bluetooth/btintel.h
diff --git a/drivers/bluetooth/btusb.c b/drivers/bluetooth/btusb.c
index 26b67f0b060b..852168d1e0a0 100644
--- a/drivers/bluetooth/btusb.c
+++ b/drivers/bluetooth/btusb.c
@@ -76,6 +76,7 @@ static struct usb_driver btusb_driver;
 #define BTUSB_VALID_LE_STATES   0x800000
 #define BTUSB_QCA_WCN6855	0x1000000
 #define BTUSB_INTEL_NEWGEN	0x2000000
+#define BTUSB_INTEL_BROKEN_INITIAL_NCMD 0x4000000
 
 static const struct usb_device_id btusb_table[] = {
 	/* Generic Bluetooth USB device */
@@ -390,7 +391,8 @@ static const struct usb_device_id blacklist_table[] = {
 	{ USB_DEVICE(0x8087, 0x0033), .driver_info = BTUSB_INTEL_NEWGEN |
 						     BTUSB_WIDEBAND_SPEECH},
 	{ USB_DEVICE(0x8087, 0x07da), .driver_info = BTUSB_CSR },
-	{ USB_DEVICE(0x8087, 0x07dc), .driver_info = BTUSB_INTEL_COMBINED },
+	{ USB_DEVICE(0x8087, 0x07dc), .driver_info = BTUSB_INTEL_COMBINED |
+						     BTUSB_INTEL_BROKEN_INITIAL_NCMD },
 	{ USB_DEVICE(0x8087, 0x0a2a), .driver_info = BTUSB_INTEL_COMBINED },
 	{ USB_DEVICE(0x8087, 0x0a2b), .driver_info = BTUSB_INTEL_NEW |
 						     BTUSB_WIDEBAND_SPEECH },
@@ -4353,6 +4355,9 @@ static int btusb_probe(struct usb_interface *intf,
 		set_bit(HCI_QUIRK_STRICT_DUPLICATE_FILTER, &hdev->quirks);
 		set_bit(HCI_QUIRK_SIMULTANEOUS_DISCOVERY, &hdev->quirks);
 		set_bit(HCI_QUIRK_NON_PERSISTENT_DIAG, &hdev->quirks);
+
+		if (id->driver_info & BTUSB_INTEL_BROKEN_INITIAL_NCMD)
+			btintel_set_flag(hdev, INTEL_BROKEN_INITIAL_NCMD);
 	}
 
 	if (id->driver_info & BTUSB_INTEL_NEW) {
