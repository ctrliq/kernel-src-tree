scsi: sd: sd_zbc: Hide gap zones

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Damien Le Moal <damien.lemoal@opensource.wdc.com>
commit c976e588b34e4ff2fdd2922edab4b983244a17e6
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/c976e588.failed

ZBC-2 allows host-managed disks to report gap zones. This allow zoned disks
to report an offset between data zone starts that is a power of two even if
the number of logical blocks with data per zone is not a power of two.

Another new feature in ZBC-2 is support for constant zone starting LBA
offsets. For zoned disks that report a constant zone starting LBA offset,
hide the gap zones from the block layer. Report the offset between data
zone starts as zone size and report the number of logical blocks with data
per zone as the zone capacity.

Link: https://lore.kernel.org/r/20220421183023.3462291-7-bvanassche@acm.org
	Acked-by: Douglas Gilbert <dgilbert@interlog.com>
	Signed-off-by: Damien Le Moal <damien.lemoal@opensource.wdc.com>
[ bvanassche: Reworked this patch ]
	Signed-off-by: Bart Van Assche <bvanassche@acm.org>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit c976e588b34e4ff2fdd2922edab4b983244a17e6)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/sd.h
#	drivers/scsi/sd_zbc.c
diff --cc drivers/scsi/sd.h
index 8ad0c79ed938,d249933ba69e..000000000000
--- a/drivers/scsi/sd.h
+++ b/drivers/scsi/sd.h
@@@ -69,7 -67,43 +69,47 @@@ enum 
  	SD_ZERO_WS10_UNMAP,	/* Use WRITE SAME(10) with UNMAP */
  };
  
++<<<<<<< HEAD
 +struct scsi_disk_aux {
++=======
+ /**
+  * struct zoned_disk_info - Specific properties of a ZBC SCSI device.
+  * @nr_zones: number of zones.
+  * @zone_blocks: number of logical blocks per zone.
+  *
+  * This data structure holds the ZBC SCSI device properties that are retrieved
+  * twice: a first time before the gendisk capacity is known and a second time
+  * after the gendisk capacity is known.
+  */
+ struct zoned_disk_info {
+ 	u32		nr_zones;
+ 	u32		zone_blocks;
+ };
+ 
+ struct scsi_disk {
+ 	struct scsi_device *device;
+ 
+ 	/*
+ 	 * disk_dev is used to show attributes in /sys/class/scsi_disk/,
+ 	 * but otherwise not really needed.  Do not use for refcounting.
+ 	 */
+ 	struct device	disk_dev;
+ 	struct gendisk	*disk;
+ 	struct opal_dev *opal_dev;
+ #ifdef CONFIG_BLK_DEV_ZONED
+ 	/* Updated during revalidation before the gendisk capacity is known. */
+ 	struct zoned_disk_info	early_zone_info;
+ 	/* Updated during revalidation after the gendisk capacity is known. */
+ 	struct zoned_disk_info	zone_info;
+ 	u32		zones_optimal_open;
+ 	u32		zones_optimal_nonseq;
+ 	u32		zones_max_open;
+ 	/*
+ 	 * Either zero or a power of two. If not zero it means that the offset
+ 	 * between zone starting LBAs is constant.
+ 	 */
+ 	u32		zone_starting_lba_gran;
++>>>>>>> c976e588b34e (scsi: sd: sd_zbc: Hide gap zones)
  	u32		*zones_wp_offset;
  	spinlock_t	zones_wp_offset_lock;
  	u32		*rev_wp_offset;
diff --cc drivers/scsi/sd_zbc.c
index 704a2816d793,5b9fad70aa88..000000000000
--- a/drivers/scsi/sd_zbc.c
+++ b/drivers/scsi/sd_zbc.c
@@@ -261,10 -311,9 +313,14 @@@ int sd_zbc_report_zones(struct gendisk 
  						  cb, data);
  			if (ret)
  				goto out;
+ 
  			zone_idx++;
  		}
++<<<<<<< HEAD
 +
 +		lba += sdkp->zone_blocks * i;
++=======
++>>>>>>> c976e588b34e (scsi: sd: sd_zbc: Hide gap zones)
  	}
  
  	ret = zone_idx;
* Unmerged path drivers/scsi/sd.h
* Unmerged path drivers/scsi/sd_zbc.c
diff --git a/include/scsi/scsi_proto.h b/include/scsi/scsi_proto.h
index 5c106c4f249e..9f75b86db110 100644
--- a/include/scsi/scsi_proto.h
+++ b/include/scsi/scsi_proto.h
@@ -325,7 +325,9 @@ enum zbc_zone_type {
 	ZBC_ZONE_TYPE_CONV		= 0x1,
 	ZBC_ZONE_TYPE_SEQWRITE_REQ	= 0x2,
 	ZBC_ZONE_TYPE_SEQWRITE_PREF	= 0x3,
-	/* 0x4 to 0xf are reserved */
+	ZBC_ZONE_TYPE_SEQ_OR_BEFORE_REQ	= 0x4,
+	ZBC_ZONE_TYPE_GAP		= 0x5,
+	/* 0x6 to 0xf are reserved */
 };
 
 /* Zone conditions of REPORT ZONES zone descriptors */
@@ -341,6 +343,11 @@ enum zbc_zone_cond {
 	ZBC_ZONE_COND_OFFLINE		= 0xf,
 };
 
+enum zbc_zone_alignment_method {
+	ZBC_CONSTANT_ZONE_LENGTH	= 0x1,
+	ZBC_CONSTANT_ZONE_START_OFFSET	= 0x8,
+};
+
 /* Version descriptor values for INQUIRY */
 enum scsi_version_descriptor {
 	SCSI_VERSION_DESCRIPTOR_FCP4	= 0x0a40,
