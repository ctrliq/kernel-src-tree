wifi: mac80211: mlme: refactor link station setup

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Johannes Berg <johannes.berg@intel.com>
commit bbe90107e1d9e1bb5fac0e36c63d4c1649a9a77d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/bbe90107.failed

Refactor the code here since we need to have it also for each
link station after association in MLO later.

	Signed-off-by: Johannes Berg <johannes.berg@intel.com>
(cherry picked from commit bbe90107e1d9e1bb5fac0e36c63d4c1649a9a77d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/mac80211/mlme.c
diff --cc net/mac80211/mlme.c
index 446accddbebd,0d43b20d6e6f..000000000000
--- a/net/mac80211/mlme.c
+++ b/net/mac80211/mlme.c
@@@ -5583,7 -5779,7 +5644,11 @@@ static int ieee80211_prep_connection(st
  	struct ieee80211_if_managed *ifmgd = &sdata->u.mgd;
  	struct ieee80211_bss *bss = (void *)cbss->priv;
  	struct sta_info *new_sta = NULL;
++<<<<<<< HEAD
 +	struct ieee80211_supported_band *sband;
++=======
+ 	struct ieee80211_link_data *link = &sdata->deflink;
++>>>>>>> bbe90107e1d9 (wifi: mac80211: mlme: refactor link station setup)
  	bool have_sta = false;
  	int err;
  
@@@ -5622,67 -5816,20 +5685,72 @@@
  	 * it might need the new channel for that.
  	 */
  	if (new_sta) {
- 		u32 rates = 0, basic_rates = 0;
- 		bool have_higher_than_11mbit = false;
- 		int min_rate = INT_MAX, min_rate_index = -1;
  		const struct cfg80211_bss_ies *ies;
++<<<<<<< HEAD
 +		int shift = ieee80211_vif_get_shift(&sdata->vif);
 +
 +		/* TODO: S1G Basic Rate Set is expressed elsewhere */
 +		if (cbss->channel->band == NL80211_BAND_S1GHZ) {
 +			ieee80211_s1g_sta_rate_init(new_sta);
 +			goto skip_rates;
 +		}
 +
 +		ieee80211_get_rates(sband, bss->supp_rates,
 +				    bss->supp_rates_len,
 +				    &rates, &basic_rates,
 +				    &have_higher_than_11mbit,
 +				    &min_rate, &min_rate_index,
 +				    shift);
 +
 +		/*
 +		 * This used to be a workaround for basic rates missing
 +		 * in the association response frame. Now that we no
 +		 * longer use the basic rates from there, it probably
 +		 * doesn't happen any more, but keep the workaround so
 +		 * in case some *other* APs are buggy in different ways
 +		 * we can connect -- with a warning.
 +		 * Allow this workaround only in case the AP provided at least
 +		 * one rate.
 +		 */
 +		if (min_rate_index < 0) {
 +			sdata_info(sdata,
 +				   "No legacy rates in association response\n");
 +
++=======
+ 		struct ieee80211_link_sta *link_sta = &new_sta->sta.deflink;
+ 
+ 		err = ieee80211_mgd_setup_link_sta(link, new_sta,
+ 						   link_sta, cbss);
+ 		if (err) {
++>>>>>>> bbe90107e1d9 (wifi: mac80211: mlme: refactor link station setup)
  			sta_info_free(local, new_sta);
- 			return -EINVAL;
- 		} else if (!basic_rates) {
- 			sdata_info(sdata,
- 				   "No basic rates, using min rate instead\n");
- 			basic_rates = BIT(min_rate_index);
+ 			return err;
  		}
  
++<<<<<<< HEAD
 +		if (rates)
 +			new_sta->sta.supp_rates[cbss->channel->band] = rates;
 +		else
 +			sdata_info(sdata,
 +				   "No rates found, keeping mandatory only\n");
 +
 +		sdata->vif.bss_conf.basic_rates = basic_rates;
 +
 +		/* cf. IEEE 802.11 9.2.12 */
 +		if (cbss->channel->band == NL80211_BAND_2GHZ &&
 +		    have_higher_than_11mbit)
 +			sdata->flags |= IEEE80211_SDATA_OPERATING_GMODE;
 +		else
 +			sdata->flags &= ~IEEE80211_SDATA_OPERATING_GMODE;
 +
 +skip_rates:
 +		memcpy(ifmgd->bssid, cbss->bssid, ETH_ALEN);
++=======
+ 		memcpy(link->u.mgd.bssid, cbss->bssid, ETH_ALEN);
++>>>>>>> bbe90107e1d9 (wifi: mac80211: mlme: refactor link station setup)
  
  		/* set timing information */
 -		link->conf->beacon_int = cbss->beacon_interval;
 +		sdata->vif.bss_conf.beacon_int = cbss->beacon_interval;
  		rcu_read_lock();
  		ies = rcu_dereference(cbss->beacon_ies);
  		if (ies) {
* Unmerged path net/mac80211/mlme.c
