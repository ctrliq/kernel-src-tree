net/tcp: Merge TCP-MD5 inbound callbacks

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Dmitry Safonov <dima@arista.com>
commit 7bbb765b73496699a165d505ecdce962f903b422
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/7bbb765b.failed

The functions do essentially the same work to verify TCP-MD5 sign.
Code can be merged into one family-independent function in order to
reduce copy'n'paste and generated code.
Later with TCP-AO option added, this will allow to create one function
that's responsible for segment verification, that will have all the
different checks for MD5/AO/non-signed packets, which in turn will help
to see checks for all corner-cases in one function, rather than spread
around different families and functions.

	Cc: Eric Dumazet <edumazet@google.com>
	Cc: Hideaki YOSHIFUJI <yoshfuji@linux-ipv6.org>
	Signed-off-by: Dmitry Safonov <dima@arista.com>
	Reviewed-by: David Ahern <dsahern@kernel.org>
Link: https://lore.kernel.org/r/20220223175740.452397-1-dima@arista.com
	Signed-off-by: Jakub Kicinski <kuba@kernel.org>
(cherry picked from commit 7bbb765b73496699a165d505ecdce962f903b422)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/ipv4/tcp_ipv4.c
#	net/ipv6/tcp_ipv6.c
diff --cc net/ipv4/tcp_ipv4.c
index 95c80d8a7e12,411357ad9757..000000000000
--- a/net/ipv4/tcp_ipv4.c
+++ b/net/ipv4/tcp_ipv4.c
@@@ -1318,67 -1409,6 +1318,70 @@@ EXPORT_SYMBOL(tcp_v4_md5_hash_skb)
  
  #endif
  
++<<<<<<< HEAD
 +/* Called with rcu_read_lock() */
 +static bool tcp_v4_inbound_md5_hash(const struct sock *sk,
 +				    const struct sk_buff *skb,
 +				    int dif, int sdif)
 +{
 +#ifdef CONFIG_TCP_MD5SIG
 +	/*
 +	 * This gets called for each TCP segment that arrives
 +	 * so we want to be efficient.
 +	 * We have 3 drop cases:
 +	 * o No MD5 hash and one expected.
 +	 * o MD5 hash and we're not expecting one.
 +	 * o MD5 hash and its wrong.
 +	 */
 +	const __u8 *hash_location = NULL;
 +	struct tcp_md5sig_key *hash_expected;
 +	const struct iphdr *iph = ip_hdr(skb);
 +	const struct tcphdr *th = tcp_hdr(skb);
 +	const union tcp_md5_addr *addr;
 +	int genhash;
 +	unsigned char newhash[16];
 +
 +	addr = (union tcp_md5_addr *)&iph->saddr;
 +	hash_expected = tcp_md5_do_lookup(sk, addr, AF_INET);
 +	hash_location = tcp_parse_md5sig_option(th);
 +
 +	/* We've parsed the options - do we have a hash? */
 +	if (!hash_expected && !hash_location)
 +		return false;
 +
 +	if (hash_expected && !hash_location) {
 +		NET_INC_STATS(sock_net(sk), LINUX_MIB_TCPMD5NOTFOUND);
 +		return true;
 +	}
 +
 +	if (!hash_expected && hash_location) {
 +		NET_INC_STATS(sock_net(sk), LINUX_MIB_TCPMD5UNEXPECTED);
 +		return true;
 +	}
 +
 +	/* Okay, so this is hash_expected and hash_location -
 +	 * so we need to calculate the checksum.
 +	 */
 +	genhash = tcp_v4_md5_hash_skb(newhash,
 +				      hash_expected,
 +				      NULL, skb);
 +
 +	if (genhash || memcmp(hash_location, newhash, 16) != 0) {
 +		NET_INC_STATS(sock_net(sk), LINUX_MIB_TCPMD5FAILURE);
 +		net_info_ratelimited("MD5 Hash failed for (%pI4, %d)->(%pI4, %d)%s\n",
 +				     &iph->saddr, ntohs(th->source),
 +				     &iph->daddr, ntohs(th->dest),
 +				     genhash ? " tcp_v4_calc_md5_hash failed"
 +				     : "");
 +		return true;
 +	}
 +	return false;
 +#endif
 +	return false;
 +}
 +
++=======
++>>>>>>> 7bbb765b7349 (net/tcp: Merge TCP-MD5 inbound callbacks)
  static void tcp_v4_init_req(struct request_sock *req,
  			    const struct sock *sk_listener,
  			    struct sk_buff *skb)
@@@ -1913,7 -1965,9 +1916,13 @@@ process
  		struct sock *nsk;
  
  		sk = req->rsk_listener;
++<<<<<<< HEAD
 +		if (unlikely(tcp_v4_inbound_md5_hash(sk, skb, dif, sdif))) {
++=======
+ 		if (unlikely(tcp_inbound_md5_hash(sk, skb, &drop_reason,
+ 						  &iph->saddr, &iph->daddr,
+ 						  AF_INET, dif, sdif))) {
++>>>>>>> 7bbb765b7349 (net/tcp: Merge TCP-MD5 inbound callbacks)
  			sk_drops_add(sk, skb);
  			reqsk_put(req);
  			goto discard_it;
@@@ -1975,13 -2041,16 +1984,18 @@@
  		goto discard_and_relse;
  	}
  
++<<<<<<< HEAD
 +	if (tcp_v4_inbound_md5_hash(sk, skb, dif, sdif))
++=======
+ 	if (tcp_inbound_md5_hash(sk, skb, &drop_reason, &iph->saddr,
+ 				 &iph->daddr, AF_INET, dif, sdif))
++>>>>>>> 7bbb765b7349 (net/tcp: Merge TCP-MD5 inbound callbacks)
  		goto discard_and_relse;
  
 -	nf_reset_ct(skb);
 +	nf_reset(skb);
  
 -	if (tcp_filter(sk, skb)) {
 -		drop_reason = SKB_DROP_REASON_SOCKET_FILTER;
 +	if (tcp_filter(sk, skb))
  		goto discard_and_relse;
 -	}
  	th = (const struct tcphdr *)skb->data;
  	iph = ip_hdr(skb);
  	tcp_v4_fill_cb(skb, iph, th);
diff --cc net/ipv6/tcp_ipv6.c
index 8cdff0ded837,e98af869ff3a..000000000000
--- a/net/ipv6/tcp_ipv6.c
+++ b/net/ipv6/tcp_ipv6.c
@@@ -711,52 -773,6 +711,55 @@@ clear_hash_noput
  
  #endif
  
++<<<<<<< HEAD
 +static bool tcp_v6_inbound_md5_hash(const struct sock *sk,
 +				    const struct sk_buff *skb,
 +				    int dif, int sdif)
 +{
 +#ifdef CONFIG_TCP_MD5SIG
 +	const __u8 *hash_location = NULL;
 +	struct tcp_md5sig_key *hash_expected;
 +	const struct ipv6hdr *ip6h = ipv6_hdr(skb);
 +	const struct tcphdr *th = tcp_hdr(skb);
 +	int genhash;
 +	u8 newhash[16];
 +
 +	hash_expected = tcp_v6_md5_do_lookup(sk, &ip6h->saddr);
 +	hash_location = tcp_parse_md5sig_option(th);
 +
 +	/* We've parsed the options - do we have a hash? */
 +	if (!hash_expected && !hash_location)
 +		return false;
 +
 +	if (hash_expected && !hash_location) {
 +		NET_INC_STATS(sock_net(sk), LINUX_MIB_TCPMD5NOTFOUND);
 +		return true;
 +	}
 +
 +	if (!hash_expected && hash_location) {
 +		NET_INC_STATS(sock_net(sk), LINUX_MIB_TCPMD5UNEXPECTED);
 +		return true;
 +	}
 +
 +	/* check the signature */
 +	genhash = tcp_v6_md5_hash_skb(newhash,
 +				      hash_expected,
 +				      NULL, skb);
 +
 +	if (genhash || memcmp(hash_location, newhash, 16) != 0) {
 +		NET_INC_STATS(sock_net(sk), LINUX_MIB_TCPMD5FAILURE);
 +		net_info_ratelimited("MD5 Hash %s for [%pI6c]:%u->[%pI6c]:%u\n",
 +				     genhash ? "failed" : "mismatch",
 +				     &ip6h->saddr, ntohs(th->source),
 +				     &ip6h->daddr, ntohs(th->dest));
 +		return true;
 +	}
 +#endif
 +	return false;
 +}
 +
++=======
++>>>>>>> 7bbb765b7349 (net/tcp: Merge TCP-MD5 inbound callbacks)
  static void tcp_v6_init_req(struct request_sock *req,
  			    const struct sock *sk_listener,
  			    struct sk_buff *skb)
@@@ -1558,7 -1632,8 +1561,12 @@@ process
  		struct sock *nsk;
  
  		sk = req->rsk_listener;
++<<<<<<< HEAD
 +		if (tcp_v6_inbound_md5_hash(sk, skb, dif, sdif)) {
++=======
+ 		if (tcp_inbound_md5_hash(sk, skb, &drop_reason, &hdr->saddr,
+ 					 &hdr->daddr, AF_INET6, dif, sdif)) {
++>>>>>>> 7bbb765b7349 (net/tcp: Merge TCP-MD5 inbound callbacks)
  			sk_drops_add(sk, skb);
  			reqsk_put(req);
  			goto discard_it;
@@@ -1610,14 -1704,14 +1618,19 @@@
  		goto discard_and_relse;
  	}
  
++<<<<<<< HEAD
 +	if (!xfrm6_policy_check(sk, XFRM_POLICY_IN, skb))
++=======
+ 	if (tcp_inbound_md5_hash(sk, skb, &drop_reason, &hdr->saddr,
+ 				 &hdr->daddr, AF_INET6, dif, sdif))
++>>>>>>> 7bbb765b7349 (net/tcp: Merge TCP-MD5 inbound callbacks)
  		goto discard_and_relse;
  
 -	if (tcp_filter(sk, skb)) {
 -		drop_reason = SKB_DROP_REASON_SOCKET_FILTER;
 +	if (tcp_v6_inbound_md5_hash(sk, skb, dif, sdif))
 +		goto discard_and_relse;
 +
 +	if (tcp_filter(sk, skb))
  		goto discard_and_relse;
 -	}
  	th = (const struct tcphdr *)skb->data;
  	hdr = ipv6_hdr(skb);
  	tcp_v6_fill_cb(skb, hdr, th);
diff --git a/include/net/tcp.h b/include/net/tcp.h
index b28247822b8f..6dc688bc783b 100644
--- a/include/net/tcp.h
+++ b/include/net/tcp.h
@@ -1642,6 +1642,11 @@ tcp_md5_do_lookup(const struct sock *sk,
 		return NULL;
 	return __tcp_md5_do_lookup(sk, addr, family);
 }
+bool tcp_inbound_md5_hash(const struct sock *sk, const struct sk_buff *skb,
+			  enum skb_drop_reason *reason,
+			  const void *saddr, const void *daddr,
+			  int family, int dif, int sdif);
+
 
 #define tcp_twsk_md5_key(twsk)	((twsk)->tw_md5_key)
 #else
@@ -1651,6 +1656,14 @@ static inline struct tcp_md5sig_key *tcp_md5_do_lookup(const struct sock *sk,
 {
 	return NULL;
 }
+static inline bool tcp_inbound_md5_hash(const struct sock *sk,
+					const struct sk_buff *skb,
+					enum skb_drop_reason *reason,
+					const void *saddr, const void *daddr,
+					int family, int dif, int sdif)
+{
+	return false;
+}
 #define tcp_twsk_md5_key(twsk)	NULL
 #endif
 
diff --git a/net/ipv4/tcp.c b/net/ipv4/tcp.c
index 2fededb1560d..11014fad1edd 100644
--- a/net/ipv4/tcp.c
+++ b/net/ipv4/tcp.c
@@ -3921,6 +3921,76 @@ int tcp_md5_hash_key(struct tcp_md5sig_pool *hp, const struct tcp_md5sig_key *ke
 }
 EXPORT_SYMBOL(tcp_md5_hash_key);
 
+/* Called with rcu_read_lock() */
+bool tcp_inbound_md5_hash(const struct sock *sk, const struct sk_buff *skb,
+			  enum skb_drop_reason *reason,
+			  const void *saddr, const void *daddr,
+			  int family, int dif, int sdif)
+{
+	/*
+	 * This gets called for each TCP segment that arrives
+	 * so we want to be efficient.
+	 * We have 3 drop cases:
+	 * o No MD5 hash and one expected.
+	 * o MD5 hash and we're not expecting one.
+	 * o MD5 hash and its wrong.
+	 */
+	const __u8 *hash_location = NULL;
+	struct tcp_md5sig_key *hash_expected;
+	const struct tcphdr *th = tcp_hdr(skb);
+	struct tcp_sock *tp = tcp_sk(sk);
+	int genhash, l3index;
+	u8 newhash[16];
+
+	/* sdif set, means packet ingressed via a device
+	 * in an L3 domain and dif is set to the l3mdev
+	 */
+	l3index = sdif ? dif : 0;
+
+	hash_expected = tcp_md5_do_lookup(sk, l3index, saddr, family);
+	hash_location = tcp_parse_md5sig_option(th);
+
+	/* We've parsed the options - do we have a hash? */
+	if (!hash_expected && !hash_location)
+		return false;
+
+	if (hash_expected && !hash_location) {
+		*reason = SKB_DROP_REASON_TCP_MD5NOTFOUND;
+		NET_INC_STATS(sock_net(sk), LINUX_MIB_TCPMD5NOTFOUND);
+		return true;
+	}
+
+	if (!hash_expected && hash_location) {
+		*reason = SKB_DROP_REASON_TCP_MD5UNEXPECTED;
+		NET_INC_STATS(sock_net(sk), LINUX_MIB_TCPMD5UNEXPECTED);
+		return true;
+	}
+
+	/* check the signature */
+	genhash = tp->af_specific->calc_md5_hash(newhash, hash_expected,
+						 NULL, skb);
+
+	if (genhash || memcmp(hash_location, newhash, 16) != 0) {
+		*reason = SKB_DROP_REASON_TCP_MD5FAILURE;
+		NET_INC_STATS(sock_net(sk), LINUX_MIB_TCPMD5FAILURE);
+		if (family == AF_INET) {
+			net_info_ratelimited("MD5 Hash failed for (%pI4, %d)->(%pI4, %d)%s L3 index %d\n",
+					saddr, ntohs(th->source),
+					daddr, ntohs(th->dest),
+					genhash ? " tcp_v4_calc_md5_hash failed"
+					: "", l3index);
+		} else {
+			net_info_ratelimited("MD5 Hash %s for [%pI6c]:%u->[%pI6c]:%u L3 index %d\n",
+					genhash ? "failed" : "mismatch",
+					saddr, ntohs(th->source),
+					daddr, ntohs(th->dest), l3index);
+		}
+		return true;
+	}
+	return false;
+}
+EXPORT_SYMBOL(tcp_inbound_md5_hash);
+
 #endif
 
 void tcp_done(struct sock *sk)
* Unmerged path net/ipv4/tcp_ipv4.c
* Unmerged path net/ipv6/tcp_ipv6.c
