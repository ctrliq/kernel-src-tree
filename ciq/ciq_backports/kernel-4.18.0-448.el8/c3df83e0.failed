PCI: Clean up pci_scan_slot()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Niklas Schnelle <schnelle@linux.ibm.com>
commit c3df83e01a96ca569d261bcdffa2fb858b1012fa
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/c3df83e0.failed

While determining the next PCI function is factored out of pci_scan_slot()
into next_fn(), the former still handles the first function as a special
case, which duplicates the code from the scan loop.

Furthermore the non-ARI branch of next_fn() is generally hard to understand
and especially the check for multifunction devices is hidden in the
handling of NULL devices for non-contiguous multifunction. It also signals
that no further functions need to be scanned by returning 0 via wraparound
and this is a valid function number.

Improve upon this by transforming the conditions in next_fn() to be easier
to understand.

By changing next_fn() to return -ENODEV instead of 0 when there is no next
function we can then handle the initial function inside the loop and
deduplicate the shared handling. This also makes it more explicit that only
function 0 must exist.

No functional change is intended.

Link: https://lore.kernel.org/r/20220628143100.3228092-2-schnelle@linux.ibm.com
	Signed-off-by: Niklas Schnelle <schnelle@linux.ibm.com>
	Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
	Cc: Jan Kiszka <jan.kiszka@siemens.com>
(cherry picked from commit c3df83e01a96ca569d261bcdffa2fb858b1012fa)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/pci/probe.c
diff --cc drivers/pci/probe.c
index 29fcfa96d49b,b05d0ed83a24..000000000000
--- a/drivers/pci/probe.c
+++ b/drivers/pci/probe.c
@@@ -2519,7 -2579,7 +2519,11 @@@ struct pci_dev *pci_scan_single_device(
  }
  EXPORT_SYMBOL(pci_scan_single_device);
  
++<<<<<<< HEAD
 +static unsigned next_fn(struct pci_bus *bus, struct pci_dev *dev, unsigned fn)
++=======
+ static int next_fn(struct pci_bus *bus, struct pci_dev *dev, int fn)
++>>>>>>> c3df83e01a96 (PCI: Clean up pci_scan_slot())
  {
  	int pos;
  	u16 cap = 0;
@@@ -2582,8 -2644,8 +2588,12 @@@ static int only_one_child(struct pci_bu
   */
  int pci_scan_slot(struct pci_bus *bus, int devfn)
  {
++<<<<<<< HEAD
 +	unsigned fn, nr = 0;
++=======
++>>>>>>> c3df83e01a96 (PCI: Clean up pci_scan_slot())
  	struct pci_dev *dev;
+ 	int fn = 0, nr = 0;
  
  	if (only_one_child(bus) && (devfn > 0))
  		return 0; /* Already scanned the entire slot */
* Unmerged path drivers/pci/probe.c
