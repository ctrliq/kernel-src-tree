ice: Refactor vf->port_vlan_info to use ice_vlan

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Brett Creeley <brett.creeley@intel.com>
commit a19d7f7f012233aadef4fce5845f5d5737685ade
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/a19d7f7f.failed

The current vf->port_vlan_info variable is a packed u16 that contains
the port VLAN ID and QoS/prio value. This is fine, but changes are
incoming that allow for an 802.1ad port VLAN. Add flexibility by
changing the vf->port_vlan_info member to be an ice_vlan structure.

	Signed-off-by: Brett Creeley <brett.creeley@intel.com>
	Tested-by: Gurucharan G <gurucharanx.g@intel.com>
	Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
(cherry picked from commit a19d7f7f012233aadef4fce5845f5d5737685ade)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c
diff --cc drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c
index e5875fdaaf40,a36a80b64455..000000000000
--- a/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c
+++ b/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c
@@@ -812,26 -777,22 +827,37 @@@ static int ice_vf_rebuild_host_vlan_cfg
  {
  	struct device *dev = ice_pf_to_dev(vf->pf);
  	struct ice_vsi *vsi = ice_get_vf_vsi(vf);
++<<<<<<< HEAD
 +	u16 vlan_id = 0;
 +	int err;
 +
 +	if (vf->port_vlan_info) {
 +		err = ice_vsi_manage_pvid(vsi, vf->port_vlan_info, true);
++=======
+ 	int err;
+ 
+ 	if (ice_vf_is_port_vlan_ena(vf)) {
+ 		err = vsi->vlan_ops.set_port_vlan(vsi, &vf->port_vlan_info);
++>>>>>>> a19d7f7f0122 (ice: Refactor vf->port_vlan_info to use ice_vlan)
  		if (err) {
  			dev_err(dev, "failed to configure port VLAN via VSI parameters for VF %u, error %d\n",
  				vf->vf_id, err);
  			return err;
  		}
 +
 +		vlan_id = vf->port_vlan_info & VLAN_VID_MASK;
  	}
  
++<<<<<<< HEAD
 +	/* vlan_id will either be 0 or the port VLAN number */
 +	err = ice_vsi_add_vlan(vsi, vlan_id, ICE_FWD_TO_VSI);
++=======
+ 	err = vsi->vlan_ops.add_vlan(vsi, &vf->port_vlan_info);
++>>>>>>> a19d7f7f0122 (ice: Refactor vf->port_vlan_info to use ice_vlan)
  	if (err) {
- 		dev_err(dev, "failed to add %s VLAN %u filter for VF %u, error %d\n",
- 			vf->port_vlan_info ? "port" : "", vlan_id, vf->vf_id,
- 			err);
+ 		dev_err(dev, "failed to add VLAN %u filter for VF %u during VF rebuild, error %d\n",
+ 			ice_vf_is_port_vlan_ena(vf) ?
+ 			ice_vf_get_port_vlan_id(vf) : 0, vf->vf_id, err);
  		return err;
  	}
  
@@@ -3023,12 -3061,11 +3049,16 @@@ static int ice_vc_cfg_promiscuous_mode_
  
  	rm_promisc = !allmulti && !alluni;
  
++<<<<<<< HEAD
 +	if (vsi->num_vlan || vf->port_vlan_info) {
 +
++=======
+ 	if (vsi->num_vlan || ice_vf_is_port_vlan_ena(vf)) {
++>>>>>>> a19d7f7f0122 (ice: Refactor vf->port_vlan_info to use ice_vlan)
  		if (rm_promisc)
 -			ret = vsi->vlan_ops.ena_rx_filtering(vsi);
 +			ret = ice_cfg_vlan_pruning(vsi, true);
  		else
 -			ret = vsi->vlan_ops.dis_rx_filtering(vsi);
 +			ret = ice_cfg_vlan_pruning(vsi, false);
  		if (ret) {
  			dev_err(dev, "Failed to configure VLAN pruning in promiscuous mode\n");
  			v_ret = VIRTCHNL_STATUS_ERR_PARAM;
* Unmerged path drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c
diff --git a/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.h b/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.h
index 8f27255cc0cc..fbff4036c00b 100644
--- a/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.h
+++ b/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.h
@@ -5,6 +5,7 @@
 #define _ICE_VIRTCHNL_PF_H_
 #include "ice.h"
 #include "ice_virtchnl_fdir.h"
+#include "ice_vsi_vlan_ops.h"
 
 /* Restrict number of MAC Addr and VLAN that non-trusted VF can programmed */
 #define ICE_MAX_VLAN_PER_VF		8
@@ -118,7 +119,7 @@ struct ice_vf {
 	struct ice_time_mac legacy_last_added_umac;
 	DECLARE_BITMAP(txq_ena, ICE_MAX_RSS_QS_PER_VF);
 	DECLARE_BITMAP(rxq_ena, ICE_MAX_RSS_QS_PER_VF);
-	u16 port_vlan_info;		/* Port VLAN ID and QoS */
+	struct ice_vlan port_vlan_info;	/* Port VLAN ID and QoS */
 	u8 pf_set_mac:1;		/* VF MAC address set by VMM admin */
 	u8 trusted:1;
 	u8 spoofchk:1;
