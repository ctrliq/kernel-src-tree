ACPI: fan: Add additional attributes for fine grain control

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Srinivas Pandruvada <srinivas.pandruvada@linux.intel.com>
commit f1197343f07749035d74c08cf8b546c4f95614ab
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/f1197343.failed

Add additional attributes, which helps in implementing algorithm in
the user space to optimize fan control. These attributes are presented
in the same directory as the existing performance state attributes.

Additional attributes:

1. Support of fine grain control
Publish support of presence of fine grain control so that fan speed
can be tuned correctly. This attribute is called "fine_grain_control".

2. fan speed
Publish the actual fan rpm in sysfs. Knowing fan rpm is helpful to
reduce noise level and use passive control instead. Also fan performance
may not be same over time, so the same control value may not be enough
to run the fan at a speed. So a feedback value of speed is helpful. This
sysfs attribute is called "fan_speed_rpm".

	Signed-off-by: Srinivas Pandruvada <srinivas.pandruvada@linux.intel.com>
	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
(cherry picked from commit f1197343f07749035d74c08cf8b546c4f95614ab)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/acpi/fan.c
#	drivers/acpi/fan.h
#	drivers/acpi/fan_attr.c
diff --cc drivers/acpi/fan.c
index 89d33a258449,b9a9a59ddcc1..000000000000
--- a/drivers/acpi/fan.c
+++ b/drivers/acpi/fan.c
@@@ -109,13 -73,14 +109,17 @@@ static int fan_get_max_state(struct the
  	return 0;
  }
  
++<<<<<<< HEAD:drivers/acpi/fan.c
 +static int fan_get_state_acpi4(struct acpi_device *device, unsigned long *state)
++=======
+ int acpi_fan_get_fst(struct acpi_device *device, struct acpi_fan_fst *fst)
++>>>>>>> f1197343f077 (ACPI: fan: Add additional attributes for fine grain control):drivers/acpi/fan_core.c
  {
  	struct acpi_buffer buffer = { ACPI_ALLOCATE_BUFFER, NULL };
 +	struct acpi_fan *fan = acpi_driver_data(device);
  	union acpi_object *obj;
  	acpi_status status;
 -	int ret = 0;
 +	int control, i;
  
  	status = acpi_evaluate_object(device->handle, "_FST", NULL, &buffer);
  	if (ACPI_FAILURE(status)) {
diff --cc drivers/acpi/fan.h
index dd9bb8ca2244,44728529a5b6..000000000000
--- a/drivers/acpi/fan.h
+++ b/drivers/acpi/fan.h
@@@ -12,3 -16,43 +12,46 @@@
  	{"INTC1048", }, /* Fan for Alder Lake generation */ \
  	{"INTC10A2", }, /* Fan for Raptor Lake generation */ \
  	{"PNP0C0B", } /* Generic ACPI fan */
++<<<<<<< HEAD
++=======
+ 
+ #define ACPI_FPS_NAME_LEN	20
+ 
+ struct acpi_fan_fps {
+ 	u64 control;
+ 	u64 trip_point;
+ 	u64 speed;
+ 	u64 noise_level;
+ 	u64 power;
+ 	char name[ACPI_FPS_NAME_LEN];
+ 	struct device_attribute dev_attr;
+ };
+ 
+ struct acpi_fan_fif {
+ 	u8 revision;
+ 	u8 fine_grain_ctrl;
+ 	u8 step_size;
+ 	u8 low_speed_notification;
+ };
+ 
+ struct acpi_fan_fst {
+ 	u64 revision;
+ 	u64 control;
+ 	u64 speed;
+ };
+ 
+ struct acpi_fan {
+ 	bool acpi4;
+ 	struct acpi_fan_fif fif;
+ 	struct acpi_fan_fps *fps;
+ 	int fps_count;
+ 	struct thermal_cooling_device *cdev;
+ 	struct device_attribute fst_speed;
+ 	struct device_attribute fine_grain_control;
+ };
+ 
+ int acpi_fan_get_fst(struct acpi_device *device, struct acpi_fan_fst *fst);
+ int acpi_fan_create_attributes(struct acpi_device *device);
+ void acpi_fan_delete_attributes(struct acpi_device *device);
+ #endif
++>>>>>>> f1197343f077 (ACPI: fan: Add additional attributes for fine grain control)
* Unmerged path drivers/acpi/fan_attr.c
* Unmerged path drivers/acpi/fan.c
* Unmerged path drivers/acpi/fan.h
* Unmerged path drivers/acpi/fan_attr.c
