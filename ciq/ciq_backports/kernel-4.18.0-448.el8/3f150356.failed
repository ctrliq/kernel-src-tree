can: af_can: can_pernet_exit(): no need to iterate over and cleanup registered CAN devices

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Marc Kleine-Budde <mkl@pengutronix.de>
commit 3f15035606934a499975e4a5879a9499f072c179
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/3f150356.failed

The networking core takes care and unregisters every network device in
a namespace before calling the can_pernet_exit() hook. This patch
removes the unneeded cleanup.

	Acked-by: Oliver Hartkopp <socketcan@hartkopp.net>
	Suggested-by: Kirill Tkhai <ktkhai@virtuozzo.com>
	Signed-off-by: Oleksij Rempel <o.rempel@pengutronix.de>
	Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
(cherry picked from commit 3f15035606934a499975e4a5879a9499f072c179)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/can/af_can.c
diff --cc net/can/af_can.c
index f17b713dcaea,d65b19003a24..000000000000
--- a/net/can/af_can.c
+++ b/net/can/af_can.c
@@@ -921,32 -869,15 +921,36 @@@ static void can_pernet_exit(struct net 
  	if (IS_ENABLED(CONFIG_PROC_FS)) {
  		can_remove_proc(net);
  		if (stats_timer)
 -			del_timer_sync(&net->can.stattimer);
 +			del_timer_sync(&net->can.can_stattimer);
 +	}
 +
++<<<<<<< HEAD
 +	/* remove created dev_rcv_lists from still registered CAN devices */
 +	rcu_read_lock();
 +	for_each_netdev_rcu(net, dev) {
 +		if (dev->type == ARPHRD_CAN && dev->ml_priv) {
 +			struct can_dev_rcv_lists *d = dev->ml_priv;
 +
 +			BUG_ON(d->entries);
 +			kfree(d);
 +			dev->ml_priv = NULL;
 +		}
  	}
 +	rcu_read_unlock();
  
 +	kfree(net->can.can_rx_alldev_list);
 +	kfree(net->can.can_stats);
 +	kfree(net->can.can_pstats);
++=======
+ 	kfree(net->can.rx_alldev_list);
+ 	kfree(net->can.pkg_stats);
+ 	kfree(net->can.rcv_lists_stats);
++>>>>>>> 3f1503560693 (can: af_can: can_pernet_exit(): no need to iterate over and cleanup registered CAN devices)
  }
  
 -/* af_can module init/exit functions */
 +/*
 + * af_can module init/exit functions
 + */
  
  static struct packet_type can_packet __read_mostly = {
  	.type = cpu_to_be16(ETH_P_CAN),
* Unmerged path net/can/af_can.c
