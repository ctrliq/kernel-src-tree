wifi: nl80211: add EML/MLD capabilities to per-iftype capabilities

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Johannes Berg <johannes.berg@intel.com>
commit 4e9c3af398207d95957ae6c25290891574f2d7e8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/4e9c3af3.failed

We have the per-interface type capabilities, currently for
extended capabilities, add the EML/MLD capabilities there
to have this advertised by the driver.

	Signed-off-by: Johannes Berg <johannes.berg@intel.com>
(cherry picked from commit 4e9c3af398207d95957ae6c25290891574f2d7e8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/uapi/linux/nl80211.h
diff --cc include/uapi/linux/nl80211.h
index 89c2cfb97539,3fa586e38f88..000000000000
--- a/include/uapi/linux/nl80211.h
+++ b/include/uapi/linux/nl80211.h
@@@ -2653,6 -2693,27 +2655,30 @@@ enum nl80211_commands 
   *	association request when used with NL80211_CMD_NEW_STATION). Can be set
   *	only if %NL80211_STA_FLAG_WME is set.
   *
++<<<<<<< HEAD
++=======
+  * @NL80211_ATTR_MLO_LINK_ID: A (u8) link ID for use with MLO, to be used with
+  *	various commands that need a link ID to operate.
+  * @NL80211_ATTR_MLO_LINKS: A nested array of links, each containing some
+  *	per-link information and a link ID.
+  * @NL80211_ATTR_MLD_ADDR: An MLD address, used with various commands such as
+  *	authenticate/associate.
+  *
+  * @NL80211_ATTR_MLO_SUPPORT: Flag attribute to indicate user space supports MLO
+  *	connection. Used with %NL80211_CMD_CONNECT. If this attribute is not
+  *	included in NL80211_CMD_CONNECT drivers must not perform MLO connection.
+  *
+  * @NL80211_ATTR_MAX_NUM_AKM_SUITES: U16 attribute. Indicates maximum number of
+  *	AKM suites allowed for %NL80211_CMD_CONNECT, %NL80211_CMD_ASSOCIATE and
+  *	%NL80211_CMD_START_AP in %NL80211_CMD_GET_WIPHY response. If this
+  *	attribute is not present userspace shall consider maximum number of AKM
+  *	suites allowed as %NL80211_MAX_NR_AKM_SUITES which is the legacy maximum
+  *	number prior to the introduction of this attribute.
+  *
+  * @NL80211_ATTR_EML_CAPABILITY: EML Capability information (u16)
+  * @NL80211_ATTR_MLD_CAPA_AND_OPS: MLD Capabilities and Operations (u16)
+  *
++>>>>>>> 4e9c3af39820 (wifi: nl80211: add EML/MLD capabilities to per-iftype capabilities)
   * @NUM_NL80211_ATTR: total number of nl80211_attrs available
   * @NL80211_ATTR_MAX: highest attribute number currently defined
   * @__NL80211_ATTR_AFTER_LAST: internal use
@@@ -3167,6 -3228,17 +3193,20 @@@ enum nl80211_attrs 
  
  	NL80211_ATTR_DISABLE_EHT,
  
++<<<<<<< HEAD
++=======
+ 	NL80211_ATTR_MLO_LINKS,
+ 	NL80211_ATTR_MLO_LINK_ID,
+ 	NL80211_ATTR_MLD_ADDR,
+ 
+ 	NL80211_ATTR_MLO_SUPPORT,
+ 
+ 	NL80211_ATTR_MAX_NUM_AKM_SUITES,
+ 
+ 	NL80211_ATTR_EML_CAPABILITY,
+ 	NL80211_ATTR_MLD_CAPA_AND_OPS,
+ 
++>>>>>>> 4e9c3af39820 (wifi: nl80211: add EML/MLD capabilities to per-iftype capabilities)
  	/* add attributes here, update the policy in nl80211.c */
  
  	__NL80211_ATTR_AFTER_LAST,
diff --git a/include/net/cfg80211.h b/include/net/cfg80211.h
index 26d1b668cd75..4f00b487b7ef 100644
--- a/include/net/cfg80211.h
+++ b/include/net/cfg80211.h
@@ -4886,12 +4886,16 @@ struct wiphy_vendor_command {
  *	802.11-2012 8.4.2.29 for the defined fields.
  * @extended_capabilities_mask: mask of the valid values
  * @extended_capabilities_len: length of the extended capabilities
+ * @eml_capabilities: EML capabilities (for MLO)
+ * @mld_capa_and_ops: MLD capabilities and operations (for MLO)
  */
 struct wiphy_iftype_ext_capab {
 	enum nl80211_iftype iftype;
 	const u8 *extended_capabilities;
 	const u8 *extended_capabilities_mask;
 	u8 extended_capabilities_len;
+	u16 eml_capabilities;
+	u16 mld_capa_and_ops;
 };
 
 /**
* Unmerged path include/uapi/linux/nl80211.h
diff --git a/net/wireless/nl80211.c b/net/wireless/nl80211.c
index 7060846918e1..c24b093cd5f8 100644
--- a/net/wireless/nl80211.c
+++ b/net/wireless/nl80211.c
@@ -2825,6 +2825,15 @@ static int nl80211_send_wiphy(struct cfg80211_registered_device *rdev,
 					    capab->extended_capabilities_mask))
 					goto nla_put_failure;
 
+				if (rdev->wiphy.flags & WIPHY_FLAG_SUPPORTS_MLO &&
+				    (nla_put_u16(msg,
+						 NL80211_ATTR_EML_CAPABILITY,
+						 capab->eml_capabilities) ||
+				     nla_put_u16(msg,
+						 NL80211_ATTR_MLD_CAPA_AND_OPS,
+						 capab->mld_capa_and_ops)))
+					goto nla_put_failure;
+
 				nla_nest_end(msg, nested_ext_capab);
 				if (state->split)
 					break;
