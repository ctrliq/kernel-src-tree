ACPI/IORT: Make iort_iommu_msi_get_resv_regions() return void

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Shameer Kolothum <shameerali.kolothum.thodi@huawei.com>
commit 8778b1d48117055c710a01498f65fa730160fdfa
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/8778b1d4.failed

At present iort_iommu_msi_get_resv_regions() returns the number of
MSI reserved regions on success and there are no users for this.
The reserved region list will get populated anyway for platforms
that require the HW MSI region reservation. Hence, change the
function to return void instead.

	Reviewed-by: Christoph Hellwig <hch@lst.de>
	Tested-by: Steven Price <steven.price@arm.com>
	Tested-by: Laurentiu Tudor <laurentiu.tudor@nxp.com>
	Reviewed-by: Hanjun Guo <guohanjun@huawei.com>
	Signed-off-by: Shameer Kolothum <shameerali.kolothum.thodi@huawei.com>
	Acked-by: Robin Murphy <robin.murphy@arm.com>
Link: https://lore.kernel.org/r/20220615101044.1972-3-shameerali.kolothum.thodi@huawei.com
	Signed-off-by: Joerg Roedel <jroedel@suse.de>
(cherry picked from commit 8778b1d48117055c710a01498f65fa730160fdfa)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/acpi/arm64/iort.c
#	include/linux/acpi_iort.h
diff --cc drivers/acpi/arm64/iort.c
index 387675a639bf,213f61cae176..000000000000
--- a/drivers/acpi/arm64/iort.c
+++ b/drivers/acpi/arm64/iort.c
@@@ -1097,11 -1027,10 +1090,18 @@@ const struct iommu_ops *iort_iommu_conf
  }
  
  #else
++<<<<<<< HEAD
 +int iort_iommu_msi_get_resv_regions(struct device *dev, struct list_head *head)
 +{ return 0; }
 +const struct iommu_ops *iort_iommu_configure_id(struct device *dev,
 +						const u32 *input_id)
 +{ return NULL; }
++=======
+ void iort_iommu_msi_get_resv_regions(struct device *dev, struct list_head *head)
+ { }
+ int iort_iommu_configure_id(struct device *dev, const u32 *input_id)
+ { return -ENODEV; }
++>>>>>>> 8778b1d48117 (ACPI/IORT: Make iort_iommu_msi_get_resv_regions() return void)
  #endif
  
  static int nc_dma_get_range(struct device *dev, u64 *size)
diff --cc include/linux/acpi_iort.h
index 98e1a817c6f3,a8198b83753d..000000000000
--- a/include/linux/acpi_iort.h
+++ b/include/linux/acpi_iort.h
@@@ -46,10 -34,10 +46,17 @@@ struct irq_domain *iort_get_device_doma
  void acpi_configure_pmsi_domain(struct device *dev);
  int iort_pmsi_get_dev_id(struct device *dev, u32 *dev_id);
  /* IOMMU interface */
++<<<<<<< HEAD
 +void iort_dma_setup(struct device *dev, u64 *dma_addr, u64 *size);
 +const struct iommu_ops *iort_iommu_configure_id(struct device *dev,
 +						const u32 *id_in);
 +int iort_iommu_msi_get_resv_regions(struct device *dev, struct list_head *head);
++=======
+ int iort_dma_get_ranges(struct device *dev, u64 *size);
+ int iort_iommu_configure_id(struct device *dev, const u32 *id_in);
+ void iort_iommu_msi_get_resv_regions(struct device *dev, struct list_head *head);
+ phys_addr_t acpi_iort_dma_get_max_cpu_address(void);
++>>>>>>> 8778b1d48117 (ACPI/IORT: Make iort_iommu_msi_get_resv_regions() return void)
  #else
  static inline void acpi_iort_init(void) { }
  static inline u32 iort_msi_map_id(struct device *dev, u32 id)
@@@ -59,14 -47,16 +66,22 @@@ static inline struct irq_domain *iort_g
  { return NULL; }
  static inline void acpi_configure_pmsi_domain(struct device *dev) { }
  /* IOMMU interface */
 -static inline int iort_dma_get_ranges(struct device *dev, u64 *size)
 -{ return -ENODEV; }
 -static inline int iort_iommu_configure_id(struct device *dev, const u32 *id_in)
 -{ return -ENODEV; }
 +static inline void iort_dma_setup(struct device *dev, u64 *dma_addr,
 +				  u64 *size) { }
 +static inline const struct iommu_ops *iort_iommu_configure_id(
 +				      struct device *dev, const u32 *id_in)
 +{ return NULL; }
  static inline
++<<<<<<< HEAD
 +int iort_iommu_msi_get_resv_regions(struct device *dev, struct list_head *head)
 +{ return 0; }
++=======
+ void iort_iommu_msi_get_resv_regions(struct device *dev, struct list_head *head)
+ { }
+ 
+ static inline phys_addr_t acpi_iort_dma_get_max_cpu_address(void)
+ { return PHYS_ADDR_MAX; }
++>>>>>>> 8778b1d48117 (ACPI/IORT: Make iort_iommu_msi_get_resv_regions() return void)
  #endif
  
  #endif /* __ACPI_IORT_H__ */
* Unmerged path drivers/acpi/arm64/iort.c
* Unmerged path include/linux/acpi_iort.h
