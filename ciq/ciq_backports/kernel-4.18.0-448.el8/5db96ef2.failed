tty: drop tty_schedule_flip()

jira LE-1907
cve CVE-2022-1462
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Jiri Slaby <jslaby@suse.cz>
commit 5db96ef23bda6c2a61a51693c85b78b52d03f654
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/5db96ef2.failed

Since commit a9c3f68f3cd8d (tty: Fix low_latency BUG) in 2014,
tty_flip_buffer_push() is only a wrapper to tty_schedule_flip(). All
users were converted in the previous patches, so remove
tty_schedule_flip() completely while inlining its body into
tty_flip_buffer_push().

One less exported function.

	Reviewed-by: Johan Hovold <johan@kernel.org>
	Signed-off-by: Jiri Slaby <jslaby@suse.cz>
Link: https://lore.kernel.org/r/20211122111648.30379-4-jslaby@suse.cz
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit 5db96ef23bda6c2a61a51693c85b78b52d03f654)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/tty_flip.h
diff --cc include/linux/tty_flip.h
index 767f62086bd9,483d41cbcbb7..000000000000
--- a/include/linux/tty_flip.h
+++ b/include/linux/tty_flip.h
@@@ -2,17 -2,21 +2,23 @@@
  #ifndef _LINUX_TTY_FLIP_H
  #define _LINUX_TTY_FLIP_H
  
 -#include <linux/tty_buffer.h>
 -#include <linux/tty_port.h>
 -
 -struct tty_ldisc;
 -
 -int tty_buffer_set_limit(struct tty_port *port, int limit);
 -unsigned int tty_buffer_space_avail(struct tty_port *port);
 -int tty_buffer_request_room(struct tty_port *port, size_t size);
 -int tty_insert_flip_string_flags(struct tty_port *port,
 +extern int tty_buffer_set_limit(struct tty_port *port, int limit);
 +extern int tty_buffer_space_avail(struct tty_port *port);
 +extern int tty_buffer_request_room(struct tty_port *port, size_t size);
 +extern int tty_insert_flip_string_flags(struct tty_port *port,
  		const unsigned char *chars, const char *flags, size_t size);
 -int tty_insert_flip_string_fixed_flag(struct tty_port *port,
 +extern int tty_insert_flip_string_fixed_flag(struct tty_port *port,
  		const unsigned char *chars, char flag, size_t size);
++<<<<<<< HEAD
 +extern int tty_prepare_flip_string(struct tty_port *port,
 +		unsigned char **chars, size_t size);
 +extern void tty_flip_buffer_push(struct tty_port *port);
 +void tty_schedule_flip(struct tty_port *port);
++=======
+ int tty_prepare_flip_string(struct tty_port *port, unsigned char **chars,
+ 		size_t size);
+ void tty_flip_buffer_push(struct tty_port *port);
++>>>>>>> 5db96ef23bda (tty: drop tty_schedule_flip())
  int __tty_insert_flip_char(struct tty_port *port, unsigned char ch, char flag);
  
  static inline int tty_insert_flip_char(struct tty_port *port,
diff --git a/drivers/tty/tty_buffer.c b/drivers/tty/tty_buffer.c
index ae3ce330200e..4eaaf0ac3b7e 100644
--- a/drivers/tty/tty_buffer.c
+++ b/drivers/tty/tty_buffer.c
@@ -388,27 +388,6 @@ int __tty_insert_flip_char(struct tty_port *port, unsigned char ch, char flag)
 }
 EXPORT_SYMBOL(__tty_insert_flip_char);
 
-/**
- *	tty_schedule_flip	-	push characters to ldisc
- *	@port: tty port to push from
- *
- *	Takes any pending buffers and transfers their ownership to the
- *	ldisc side of the queue. It then schedules those characters for
- *	processing by the line discipline.
- */
-
-void tty_schedule_flip(struct tty_port *port)
-{
-	struct tty_bufhead *buf = &port->buf;
-
-	/* paired w/ acquire in flush_to_ldisc(); ensures
-	 * flush_to_ldisc() sees buffer data.
-	 */
-	smp_store_release(&buf->tail->commit, buf->tail->used);
-	queue_work(system_unbound_wq, &buf->work);
-}
-EXPORT_SYMBOL(tty_schedule_flip);
-
 /**
  *	tty_prepare_flip_string		-	make room for characters
  *	@port: tty port
@@ -548,7 +527,14 @@ static void flush_to_ldisc(struct work_struct *work)
 
 void tty_flip_buffer_push(struct tty_port *port)
 {
-	tty_schedule_flip(port);
+	struct tty_bufhead *buf = &port->buf;
+
+	/*
+	 * Paired w/ acquire in flush_to_ldisc(); ensures flush_to_ldisc() sees
+	 * buffer data.
+	 */
+	smp_store_release(&buf->tail->commit, buf->tail->used);
+	queue_work(system_unbound_wq, &buf->work);
 }
 EXPORT_SYMBOL(tty_flip_buffer_push);
 
* Unmerged path include/linux/tty_flip.h
