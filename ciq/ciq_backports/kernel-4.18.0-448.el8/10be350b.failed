xfs: fix type mismatches in the inode reclaim functions

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Darrick J. Wong <djwong@kernel.org>
commit 10be350b8c6c426b82d4df937f25b37eabdc3d67
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/10be350b.failed

It's currently unlikely that we will ever end up with more than 4
billion inodes waiting for reclamation, but the fs object code uses long
int for object counts and we're certainly capable of generating that
many.  Instead of truncating the internal counters, widen them and
report the object counts correctly.

	Signed-off-by: Darrick J. Wong <djwong@kernel.org>
	Reviewed-by: Christoph Hellwig <hch@lst.de>
	Reviewed-by: Chandan Babu R <chandanrlinux@gmail.com>
	Reviewed-by: Dave Chinner <dchinner@redhat.com>
(cherry picked from commit 10be350b8c6c426b82d4df937f25b37eabdc3d67)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/xfs/xfs_icache.c
#	fs/xfs/xfs_icache.h
#	fs/xfs/xfs_trace.h
diff --cc fs/xfs/xfs_icache.c
index 2ee8fefb589b,6007683482c6..000000000000
--- a/fs/xfs/xfs_icache.c
+++ b/fs/xfs/xfs_icache.c
@@@ -1152,8 -1084,16 +1152,19 @@@ xfs_reclaim_inodes
  long
  xfs_reclaim_inodes_nr(
  	struct xfs_mount	*mp,
- 	int			nr_to_scan)
+ 	unsigned long		nr_to_scan)
  {
++<<<<<<< HEAD
++=======
+ 	struct xfs_icwalk	icw = {
+ 		.icw_flags	= XFS_ICWALK_FLAG_SCAN_LIMIT,
+ 		.icw_scan_limit	= min_t(unsigned long, LONG_MAX, nr_to_scan),
+ 	};
+ 
+ 	if (xfs_want_reclaim_sick(mp))
+ 		icw.icw_flags |= XFS_ICWALK_FLAG_RECLAIM_SICK;
+ 
++>>>>>>> 10be350b8c6c (xfs: fix type mismatches in the inode reclaim functions)
  	/* kick background reclaimer and push the AIL */
  	xfs_reclaim_work_queue(mp);
  	xfs_ail_push_all(mp->m_ail);
diff --cc fs/xfs/xfs_icache.h
index 7ad0509d072c,c751cc32dc46..000000000000
--- a/fs/xfs/xfs_icache.h
+++ b/fs/xfs/xfs_icache.h
@@@ -9,14 -9,28 +9,24 @@@
  struct xfs_mount;
  struct xfs_perag;
  
++<<<<<<< HEAD
 +struct xfs_eofblocks {
 +	__u32		eof_flags;
 +	kuid_t		eof_uid;
 +	kgid_t		eof_gid;
 +	prid_t		eof_prid;
 +	__u64		eof_min_file_size;
++=======
+ struct xfs_icwalk {
+ 	__u32		icw_flags;
+ 	kuid_t		icw_uid;
+ 	kgid_t		icw_gid;
+ 	prid_t		icw_prid;
+ 	__u64		icw_min_file_size;
+ 	long		icw_scan_limit;
++>>>>>>> 10be350b8c6c (xfs: fix type mismatches in the inode reclaim functions)
  };
  
 -/* Flags that reflect xfs_fs_eofblocks functionality. */
 -#define XFS_ICWALK_FLAG_SYNC		(1U << 0) /* sync/wait mode scan */
 -#define XFS_ICWALK_FLAG_UID		(1U << 1) /* filter by uid */
 -#define XFS_ICWALK_FLAG_GID		(1U << 2) /* filter by gid */
 -#define XFS_ICWALK_FLAG_PRID		(1U << 3) /* filter by project id */
 -#define XFS_ICWALK_FLAG_MINFILESIZE	(1U << 4) /* filter by min file size */
 -
 -#define XFS_ICWALK_FLAGS_VALID		(XFS_ICWALK_FLAG_SYNC | \
 -					 XFS_ICWALK_FLAG_UID | \
 -					 XFS_ICWALK_FLAG_GID | \
 -					 XFS_ICWALK_FLAG_PRID | \
 -					 XFS_ICWALK_FLAG_MINFILESIZE)
 -
  /*
   * Flags for xfs_iget()
   */
diff --cc fs/xfs/xfs_trace.h
index 89767fe4aa4b,f9d8d605f9b1..000000000000
--- a/fs/xfs/xfs_trace.h
+++ b/fs/xfs/xfs_trace.h
@@@ -3897,20 -3895,22 +3897,28 @@@ DECLARE_EVENT_CLASS(xfs_eofblocks_class
  		__field(uint32_t, gid)
  		__field(prid_t, prid)
  		__field(__u64, min_file_size)
++<<<<<<< HEAD
++=======
+ 		__field(long, scan_limit)
++>>>>>>> 10be350b8c6c (xfs: fix type mismatches in the inode reclaim functions)
  		__field(unsigned long, caller_ip)
  	),
  	TP_fast_assign(
  		__entry->dev = mp->m_super->s_dev;
 -		__entry->flags = icw ? icw->icw_flags : 0;
 -		__entry->uid = icw ? from_kuid(mp->m_super->s_user_ns,
 -						icw->icw_uid) : 0;
 -		__entry->gid = icw ? from_kgid(mp->m_super->s_user_ns,
 -						icw->icw_gid) : 0;
 -		__entry->prid = icw ? icw->icw_prid : 0;
 -		__entry->min_file_size = icw ? icw->icw_min_file_size : 0;
 -		__entry->scan_limit = icw ? icw->icw_scan_limit : 0;
 +		__entry->flags = eofb ? eofb->eof_flags : 0;
 +		__entry->uid = eofb ? from_kuid(mp->m_super->s_user_ns,
 +						eofb->eof_uid) : 0;
 +		__entry->gid = eofb ? from_kgid(mp->m_super->s_user_ns,
 +						eofb->eof_gid) : 0;
 +		__entry->prid = eofb ? eofb->eof_prid : 0;
 +		__entry->min_file_size = eofb ? eofb->eof_min_file_size : 0;
  		__entry->caller_ip = caller_ip;
  	),
++<<<<<<< HEAD
 +	TP_printk("dev %d:%d flags 0x%x uid %u gid %u prid %u minsize %llu caller %pS",
++=======
+ 	TP_printk("dev %d:%d flags 0x%x uid %u gid %u prid %u minsize %llu scan_limit %ld caller %pS",
++>>>>>>> 10be350b8c6c (xfs: fix type mismatches in the inode reclaim functions)
  		  MAJOR(__entry->dev), MINOR(__entry->dev),
  		  __entry->flags,
  		  __entry->uid,
* Unmerged path fs/xfs/xfs_icache.c
* Unmerged path fs/xfs/xfs_icache.h
* Unmerged path fs/xfs/xfs_trace.h
