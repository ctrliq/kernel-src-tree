fbcon: Ditch error handling for con2fb_release_oldinfo

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Daniel Vetter <daniel.vetter@ffwll.ch>
commit b07db39584856e16814e2f065380e533a001535d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/b07db395.failed

It doesn't ever fail anymore.

	Acked-by: Sam Ravnborg <sam@ravnborg.org>
	Acked-by: Thomas Zimmermann <tzimmermann@suse.de>
	Signed-off-by: Daniel Vetter <daniel.vetter@intel.com>
	Cc: Daniel Vetter <daniel@ffwll.ch>
	Cc: Thomas Zimmermann <tzimmermann@suse.de>
	Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
	Cc: Claudio Suarez <cssk@net-c.es>
	Cc: Du Cheng <ducheng2@gmail.com>
	Cc: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
Link: https://patchwork.freedesktop.org/patch/msgid/20220405210335.3434130-11-daniel.vetter@ffwll.ch
(cherry picked from commit b07db39584856e16814e2f065380e533a001535d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/video/fbdev/core/fbcon.c
diff --cc drivers/video/fbdev/core/fbcon.c
index 1a25ce50a9fd,d828fef16910..000000000000
--- a/drivers/video/fbdev/core/fbcon.c
+++ b/drivers/video/fbdev/core/fbcon.c
@@@ -746,50 -739,36 +746,52 @@@ static int con2fb_acquire_newinfo(struc
  	return err;
  }
  
- static int con2fb_release_oldinfo(struct vc_data *vc, struct fb_info *oldinfo,
- 				  struct fb_info *newinfo, int unit,
- 				  int oldidx, int found)
+ static void con2fb_release_oldinfo(struct vc_data *vc, struct fb_info *oldinfo,
+ 				   struct fb_info *newinfo)
  {
  	struct fbcon_ops *ops = oldinfo->fbcon_par;
 -	int ret;
 +	int err = 0, ret;
  
 -	fbcon_release(oldinfo);
 +	if (oldinfo->fbops->fb_release &&
 +	    oldinfo->fbops->fb_release(oldinfo, 0)) {
 +		con2fb_map[unit] = oldidx;
 +		if (!found && newinfo->fbops->fb_release)
 +			newinfo->fbops->fb_release(newinfo, 0);
 +		if (!found)
 +			module_put(newinfo->fbops->owner);
 +		err = -ENODEV;
 +	}
++<<<<<<< HEAD
  
 -	fbcon_del_cursor_work(oldinfo);
 -	kfree(ops->cursor_state.mask);
 -	kfree(ops->cursor_data);
 -	kfree(ops->cursor_src);
 -	kfree(ops->fontbuffer);
 -	kfree(oldinfo->fbcon_par);
 -	oldinfo->fbcon_par = NULL;
 -	/*
 -	  If oldinfo and newinfo are driving the same hardware,
 -	  the fb_release() method of oldinfo may attempt to
 -	  restore the hardware state.  This will leave the
 -	  newinfo in an undefined state. Thus, a call to
 -	  fb_set_par() may be needed for the newinfo.
 -	*/
 -	if (newinfo && newinfo->fbops->fb_set_par) {
 -		ret = newinfo->fbops->fb_set_par(newinfo);
 +	if (!err) {
 +		fbcon_del_cursor_timer(oldinfo);
 +		kfree(ops->cursor_state.mask);
 +		kfree(ops->cursor_data);
 +		kfree(ops->cursor_src);
 +		kfree(ops->fontbuffer);
 +		kfree(oldinfo->fbcon_par);
 +		oldinfo->fbcon_par = NULL;
 +		module_put(oldinfo->fbops->owner);
 +		/*
 +		  If oldinfo and newinfo are driving the same hardware,
 +		  the fb_release() method of oldinfo may attempt to
 +		  restore the hardware state.  This will leave the
 +		  newinfo in an undefined state. Thus, a call to
 +		  fb_set_par() may be needed for the newinfo.
 +		*/
 +		if (newinfo && newinfo->fbops->fb_set_par) {
 +			ret = newinfo->fbops->fb_set_par(newinfo);
  
 -		if (ret)
 -			printk(KERN_ERR "con2fb_release_oldinfo: "
 -				"detected unhandled fb_set_par error, "
 -				"error code %d\n", ret);
 +			if (ret)
 +				printk(KERN_ERR "con2fb_release_oldinfo: "
 +					"detected unhandled fb_set_par error, "
 +					"error code %d\n", ret);
 +		}
  	}
 +
 +	return err;
++=======
++>>>>>>> b07db3958485 (fbcon: Ditch error handling for con2fb_release_oldinfo)
  }
  
  static void con2fb_init_display(struct vc_data *vc, struct fb_info *info,
@@@ -872,18 -851,15 +874,23 @@@ static int set_con2fb_map(int unit, in
  	 * fbcon should release it.
  	 */
  	if (!err && oldinfo && !search_fb_in_map(oldidx))
- 		err = con2fb_release_oldinfo(vc, oldinfo, info, unit, oldidx,
- 					     found);
+ 		con2fb_release_oldinfo(vc, oldinfo, info);
  
- 	if (!err) {
- 		int show_logo = (fg_console == 0 && !user &&
- 				 logo_shown != FBCON_LOGO_DONTSHOW);
+ 	show_logo = (fg_console == 0 && !user &&
+ 			 logo_shown != FBCON_LOGO_DONTSHOW);
  
++<<<<<<< HEAD
 +		if (!found)
 +			fbcon_add_cursor_timer(info);
 +		con2fb_map_boot[unit] = newidx;
 +		con2fb_init_display(vc, info, unit, show_logo);
 +	}
++=======
+ 	if (!found)
+ 		fbcon_add_cursor_work(info);
+ 	con2fb_map_boot[unit] = newidx;
+ 	con2fb_init_display(vc, info, unit, show_logo);
++>>>>>>> b07db3958485 (fbcon: Ditch error handling for con2fb_release_oldinfo)
  
  	if (!search_fb_in_map(info_idx))
  		info_idx = newidx;
@@@ -3103,9 -2761,10 +3110,14 @@@ static inline int fbcon_unbind(void
  #endif /* CONFIG_VT_HW_CONSOLE_BINDING */
  
  /* called with console_lock held */
 -void fbcon_fb_unbind(struct fb_info *info)
 +static int fbcon_fb_unbind(int idx)
  {
++<<<<<<< HEAD
 +	int i, new_idx = -1, ret = 0;
++=======
+ 	int i, new_idx = -1;
+ 	int idx = info->node;
++>>>>>>> b07db3958485 (fbcon: Ditch error handling for con2fb_release_oldinfo)
  
  	WARN_CONSOLE_UNLOCKED();
  
@@@ -3138,13 -2797,8 +3150,18 @@@
  			if (con2fb_map[i] == idx) {
  				con2fb_map[i] = -1;
  				if (!search_fb_in_map(idx)) {
++<<<<<<< HEAD
 +					ret = con2fb_release_oldinfo(vc_cons[i].d,
 +								     info, NULL, i,
 +								     idx, 0);
 +					if (ret) {
 +						con2fb_map[i] = idx;
 +						return ret;
 +					}
++=======
+ 					con2fb_release_oldinfo(vc_cons[i].d,
+ 							       info, NULL);
++>>>>>>> b07db3958485 (fbcon: Ditch error handling for con2fb_release_oldinfo)
  				}
  			}
  		}
* Unmerged path drivers/video/fbdev/core/fbcon.c
