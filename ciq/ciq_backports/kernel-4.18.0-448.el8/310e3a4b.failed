tracing: Remove WARN_ON in start_thread()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Vasily Averin <vvs@virtuozzo.com>
commit 310e3a4b5a4fc718a72201c1e4cf5c64ac6f5442
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/310e3a4b.failed

This patch reverts commit 978defee11a5 ("tracing: Do a WARN_ON()
 if start_thread() in hwlat is called when thread exists")

.start hook can be legally called several times if according
tracer is stopped

screen window 1
[root@localhost ~]# echo 1 > /sys/kernel/tracing/events/kmem/kfree/enable
[root@localhost ~]# echo 1 > /sys/kernel/tracing/options/pause-on-trace
[root@localhost ~]# less -F /sys/kernel/tracing/trace

screen window 2
[root@localhost ~]# cat /sys/kernel/debug/tracing/tracing_on
0
[root@localhost ~]# echo hwlat >  /sys/kernel/debug/tracing/current_tracer
[root@localhost ~]# echo 1 > /sys/kernel/debug/tracing/tracing_on
[root@localhost ~]# cat /sys/kernel/debug/tracing/tracing_on
0
[root@localhost ~]# echo 2 > /sys/kernel/debug/tracing/tracing_on

triggers warning in dmesg:
WARNING: CPU: 3 PID: 1403 at kernel/trace/trace_hwlat.c:371 hwlat_tracer_start+0xc9/0xd0

Link: https://lkml.kernel.org/r/bd4d3e70-400d-9c82-7b73-a2d695e86b58@virtuozzo.com

	Cc: Ingo Molnar <mingo@redhat.com>
	Cc: stable@vger.kernel.org
Fixes: 978defee11a5 ("tracing: Do a WARN_ON() if start_thread() in hwlat is called when thread exists")
	Signed-off-by: Vasily Averin <vvs@virtuozzo.com>
	Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
(cherry picked from commit 310e3a4b5a4fc718a72201c1e4cf5c64ac6f5442)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/trace/trace_hwlat.c
diff --cc kernel/trace/trace_hwlat.c
index 0b5aa5d35482,d071fc271eef..000000000000
--- a/kernel/trace/trace_hwlat.c
+++ b/kernel/trace/trace_hwlat.c
@@@ -417,9 -368,14 +417,20 @@@ static int start_single_kthread(struct 
  	struct task_struct *kthread;
  	int next_cpu;
  
++<<<<<<< HEAD
 +	cpus_read_lock();
 +	if (WARN_ON(kdata->kthread))
 +		goto out_put_cpus;
++=======
+ 	if (hwlat_kthread)
+ 		return 0;
+ 
+ 	/* Just pick the first CPU on first iteration */
+ 	get_online_cpus();
+ 	cpumask_and(current_mask, cpu_online_mask, tr->tracing_cpumask);
+ 	put_online_cpus();
+ 	next_cpu = cpumask_first(current_mask);
++>>>>>>> 310e3a4b5a4f (tracing: Remove WARN_ON in start_thread())
  
  	kthread = kthread_create(kthread_fn, NULL, "hwlatd");
  	if (IS_ERR(kthread)) {
* Unmerged path kernel/trace/trace_hwlat.c
