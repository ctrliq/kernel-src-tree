x86/entry: Add a fence for kernel entry SWAPGS in paranoid_entry()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Lai Jiangshan <laijs@linux.alibaba.com>
commit c07e45553da1808aa802e9f0ffa8108cfeaf7a17
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/c07e4555.failed

Commit

  18ec54fdd6d18 ("x86/speculation: Prepare entry code for Spectre v1 swapgs mitigations")

added FENCE_SWAPGS_{KERNEL|USER}_ENTRY for conditional SWAPGS. In
paranoid_entry(), it uses only FENCE_SWAPGS_KERNEL_ENTRY for both
branches. This is because the fence is required for both cases since the
CR3 write is conditional even when PTI is enabled.

But

  96b2371413e8f ("x86/entry/64: Switch CR3 before SWAPGS in paranoid entry")

changed the order of SWAPGS and the CR3 write. And it missed the needed
FENCE_SWAPGS_KERNEL_ENTRY for the user gsbase case.

Add it back by changing the branches so that FENCE_SWAPGS_KERNEL_ENTRY
can cover both branches.

  [ bp: Massage, fix typos, remove obsolete comment while at it. ]

Fixes: 96b2371413e8f ("x86/entry/64: Switch CR3 before SWAPGS in paranoid entry")
	Signed-off-by: Lai Jiangshan <laijs@linux.alibaba.com>
	Signed-off-by: Borislav Petkov <bp@suse.de>
Link: https://lkml.kernel.org/r/20211126101209.8613-2-jiangshanlai@gmail.com
(cherry picked from commit c07e45553da1808aa802e9f0ffa8108cfeaf7a17)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/entry/entry_64.S
diff --cc arch/x86/entry/entry_64.S
index cd89e5040553,f1a8b5b2af96..000000000000
--- a/arch/x86/entry/entry_64.S
+++ b/arch/x86/entry/entry_64.S
@@@ -1283,26 -898,16 +1284,37 @@@ ENTRY(paranoid_entry
  	movl	$MSR_GS_BASE, %ecx
  	rdmsr
  	testl	%edx, %edx
++<<<<<<< HEAD
 +	jns	.Lparanoid_entry_swapgs
 +	jmp	.Librs_entry
 +
 +.Lparanoid_entry_swapgs:
 +	SWAPGS
 +
 +	/*
 +	 * The above SAVE_AND_SWITCH_TO_KERNEL_CR3 macro doesn't do an
 +	 * unconditional CR3 write, even in the PTI case.  So do an lfence
 +	 * to prevent GS speculation, regardless of whether PTI is enabled.
 +	 */
 +	FENCE_SWAPGS_KERNEL_ENTRY
 +
 +	/* EBX = 0 -> SWAPGS required on exit */
 +	xorl	%ebx, %ebx
 +
 +.Librs_entry:
 +	IBRS_ENTRY_SAVE_AND_CLOBBER  save_reg=%r13d
++=======
+ 	js	.Lparanoid_kernel_gsbase
+ 
+ 	/* EBX = 0 -> SWAPGS required on exit */
+ 	xorl	%ebx, %ebx
+ 	swapgs
+ .Lparanoid_kernel_gsbase:
+ 
+ 	FENCE_SWAPGS_KERNEL_ENTRY
++>>>>>>> c07e45553da1 (x86/entry: Add a fence for kernel entry SWAPGS in paranoid_entry())
  	ret
 -SYM_CODE_END(paranoid_entry)
 +END(paranoid_entry)
  
  /*
   * "Paranoid" exit path from exception stack.  This is invoked
* Unmerged path arch/x86/entry/entry_64.S
