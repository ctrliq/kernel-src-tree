ASoC: SOF: Intel: hda-dai: protect hw_params against successive calls

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
commit c4eb48f7739fc0dae7e6b8319a77261fc1b61d74
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/c4eb48f7.failed

Once we've set-up the HDA stream and its format, we currently don't
support additional format changes. We already have a protection in the
.prepare case, but this needs to be added in the hw_params too.

In mixing use cases where two DPCM FEs are connected to the same BE,
if can happen that there are multiple calls to the BE hw_params when
the two FEs are configured simultaneously.

This could alternatively be fixed at the DPCM level but that's a more
intrusive change requiring infrastructure changes: this would need to
be paired with the definition of fixed hw_params at the mixer level.

	Signed-off-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
	Reviewed-by: Rander Wang <rander.wang@intel.com>
	Reviewed-by: Ranjani Sridharan <ranjani.sridharan@linux.intel.com>
	Reviewed-by: PÃ©ter Ujfalusi <peter.ujfalusi@linux.intel.com>
	Reviewed-by: Bard Liao <yung-chuan.liao@linux.intel.com>
Link: https://lore.kernel.org/r/20220421203201.1550328-15-pierre-louis.bossart@linux.intel.com
	Signed-off-by: Mark Brown <broonie@kernel.org>
(cherry picked from commit c4eb48f7739fc0dae7e6b8319a77261fc1b61d74)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	sound/soc/sof/intel/hda-dai.c
diff --cc sound/soc/sof/intel/hda-dai.c
index 4276d8a58f6f,9823230d2ef4..000000000000
--- a/sound/soc/sof/intel/hda-dai.c
+++ b/sound/soc/sof/intel/hda-dai.c
@@@ -402,39 -283,132 +402,70 @@@ static int hda_link_pcm_trigger(struct 
  	return 0;
  }
  
 -static int hda_link_dma_hw_free(struct snd_pcm_substream *substream)
 -{
 -	struct hdac_stream *hstream = substream->runtime->private_data;
 -	struct snd_soc_pcm_runtime *rtd = asoc_substream_to_rtd(substream);
 -	struct snd_soc_dai *cpu_dai = asoc_rtd_to_cpu(rtd, 0);
 -	struct snd_soc_dai *codec_dai = asoc_rtd_to_codec(rtd, 0);
 -	struct hdac_ext_stream *hext_stream;
 -
 -	hext_stream = snd_soc_dai_get_dma_data(cpu_dai, substream);
 -	if (!hext_stream)
 -		return 0;
 -
 -	return hda_link_dma_cleanup(substream, hstream, cpu_dai, codec_dai, false);
 -}
 -
 -static int hda_dai_widget_update(struct snd_soc_dapm_widget *w,
 -				 int channel, bool widget_setup)
 -{
 -	struct snd_sof_dai_config_data data;
 -
 -	data.dai_data = channel;
 -
 -	/* set up/free DAI widget and send DAI_CONFIG IPC */
 -	if (widget_setup)
 -		return hda_ctrl_dai_widget_setup(w, SOF_DAI_CONFIG_FLAGS_2_STEP_STOP, &data);
 -
 -	return hda_ctrl_dai_widget_free(w, SOF_DAI_CONFIG_FLAGS_NONE, &data);
 -}
 -
 -static int hda_dai_hw_params_update(struct snd_pcm_substream *substream,
 -				    struct snd_pcm_hw_params *params,
 -				    struct snd_soc_dai *dai)
 +static int hda_link_hw_free(struct snd_pcm_substream *substream,
 +			    struct snd_soc_dai *dai)
  {
 +	unsigned int stream_tag;
 +	struct sof_intel_hda_stream *hda_stream;
 +	struct hdac_bus *bus;
 +	struct hdac_ext_link *link;
 +	struct hdac_stream *hstream;
 +	struct snd_soc_pcm_runtime *rtd;
  	struct hdac_ext_stream *hext_stream;
  	struct snd_soc_dapm_widget *w;
++<<<<<<< HEAD
 +	int ret;
 +
 +	hstream = substream->runtime->private_data;
 +	bus = hstream->bus;
 +	rtd = asoc_substream_to_rtd(substream);
 +	hext_stream = snd_soc_dai_get_dma_data(dai, substream);
++=======
+ 	int stream_tag;
+ 
+ 	hext_stream = snd_soc_dai_get_dma_data(dai, substream);
+ 	if (!hext_stream)
+ 		return -EINVAL;
+ 
+ 	stream_tag = hdac_stream(hext_stream)->stream_tag;
+ 
+ 	w = snd_soc_dai_get_widget(dai, substream->stream);
+ 
+ 	/* set up the DAI widget and send the DAI_CONFIG with the new tag */
+ 	return hda_dai_widget_update(w, stream_tag - 1, true);
+ }
+ 
+ static int hda_dai_hw_params(struct snd_pcm_substream *substream,
+ 			     struct snd_pcm_hw_params *params,
+ 			     struct snd_soc_dai *dai)
+ {
+ 	struct hdac_ext_stream *hext_stream =
+ 				snd_soc_dai_get_dma_data(dai, substream);
+ 	int ret;
+ 
+ 	if (hext_stream && hext_stream->link_prepared)
+ 		return 0;
+ 
+ 	ret = hda_link_dma_hw_params(substream, params);
+ 	if (ret < 0)
+ 		return ret;
++>>>>>>> c4eb48f7739f (ASoC: SOF: Intel: hda-dai: protect hw_params against successive calls)
  
 -	return hda_dai_hw_params_update(substream, params, dai);
 -}
 -
 -
 -static int hda_dai_config_pause_push_ipc(struct snd_soc_dapm_widget *w)
 -{
 -	struct snd_sof_widget *swidget = w->dobj.private;
 -	struct snd_soc_component *component = swidget->scomp;
 -	struct snd_sof_dev *sdev = snd_soc_component_get_drvdata(component);
 -	const struct sof_ipc_tplg_ops *tplg_ops = sdev->ipc->ops->tplg;
 -	int ret = 0;
 -
 -	if (tplg_ops->dai_config) {
 -		ret = tplg_ops->dai_config(sdev, swidget, SOF_DAI_CONFIG_FLAGS_PAUSE, NULL);
 -		if (ret < 0)
 -			dev_err(sdev->dev, "%s: DAI config failed for widget %s\n", __func__,
 -				w->name);
 +	if (!hext_stream) {
 +		dev_dbg(dai->dev,
 +			"%s: hext_stream is not assigned\n", __func__);
 +		return -EINVAL;
  	}
  
 -	return ret;
 -}
 -
 -static int ipc3_hda_dai_prepare(struct snd_pcm_substream *substream,
 -				struct snd_soc_dai *dai)
 -{
 -	struct hdac_ext_stream *hext_stream =
 -				snd_soc_dai_get_dma_data(dai, substream);
 -	struct snd_sof_dev *sdev = snd_soc_component_get_drvdata(dai->component);
 -	struct snd_soc_pcm_runtime *rtd = asoc_substream_to_rtd(substream);
 -	int stream = substream->stream;
 -	int ret;
 -
 -	if (hext_stream && hext_stream->link_prepared)
 -		return 0;
 -
 -	dev_dbg(sdev->dev, "%s: prepare stream dir %d\n", __func__, substream->stream);
 -
 -	ret = hda_link_dma_prepare(substream);
 -	if (ret < 0)
 -		return ret;
 -
 -	return hda_dai_hw_params_update(substream, &rtd->dpcm[stream].hw_params, dai);
 -}
 -
 -static int hda_dai_hw_free_ipc(int stream, /* direction */
 -			       struct snd_soc_dai *dai)
 -{
 -	struct snd_soc_dapm_widget *w;
 +	hda_stream = hstream_to_sof_hda_stream(hext_stream);
  
 -	w = snd_soc_dai_get_widget(dai, stream);
 +	if (substream->stream == SNDRV_PCM_STREAM_PLAYBACK)
 +		w = dai->playback_widget;
 +	else
 +		w = dai->capture_widget;
  
  	/* free the link DMA channel in the FW and the DAI widget */
 -	return hda_dai_widget_update(w, DMA_CHAN_INVALID, false);
 -}
 -
 -static int ipc3_hda_dai_trigger(struct snd_pcm_substream *substream,
 -				int cmd, struct snd_soc_dai *dai)
 -{
 -	struct snd_soc_dapm_widget *w;
 -	int ret;
 -
 -	ret = hda_link_dma_trigger(substream, cmd);
 +	ret = hda_link_dai_widget_update(hda_stream, w, DMA_CHAN_INVALID, false);
  	if (ret < 0)
  		return ret;
  
* Unmerged path sound/soc/sof/intel/hda-dai.c
