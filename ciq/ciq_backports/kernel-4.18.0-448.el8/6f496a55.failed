arm64: kaslr: keep modules inside module region when KASAN is enabled

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Ard Biesheuvel <ard.biesheuvel@linaro.org>
commit 6f496a555d93db7a11d4860b9220d904822f586a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/6f496a55.failed

When KASLR and KASAN are both enabled, we keep the modules where they
are, and randomize the placement of the kernel so it is within 2 GB
of the module region. The reason for this is that putting modules in
the vmalloc region (like we normally do when KASLR is enabled) is not
possible in this case, given that the entire vmalloc region is already
backed by KASAN zero shadow pages, and so allocating dedicated KASAN
shadow space as required by loaded modules is not possible.

The default module allocation window is set to [_etext - 128MB, _etext]
in kaslr.c, which is appropriate for KASLR kernels booted without a
seed or with 'nokaslr' on the command line. However, as it turns out,
it is not quite correct for the KASAN case, since it still intersects
the vmalloc region at the top, where attempts to allocate shadow pages
will collide with the KASAN zero shadow pages, causing a WARN() and all
kinds of other trouble. So cap the top end to MODULES_END explicitly
when running with KASAN.

	Cc: <stable@vger.kernel.org> # 4.9+
	Acked-by: Catalin Marinas <catalin.marinas@arm.com>
	Tested-by: Catalin Marinas <catalin.marinas@arm.com>
	Signed-off-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>
	Signed-off-by: Will Deacon <will@kernel.org>
(cherry picked from commit 6f496a555d93db7a11d4860b9220d904822f586a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/arm64/kernel/module.c
diff --cc arch/arm64/kernel/module.c
index 24a30821543e,ed3706d6b3a0..000000000000
--- a/arch/arm64/kernel/module.c
+++ b/arch/arm64/kernel/module.c
@@@ -39,9 -40,12 +40,17 @@@ void *module_alloc(unsigned long size
  	if (IS_ENABLED(CONFIG_ARM64_MODULE_PLTS))
  		gfp_mask |= __GFP_NOWARN;
  
+ 	if (IS_ENABLED(CONFIG_KASAN))
+ 		/* don't exceed the static module region - see below */
+ 		module_alloc_end = MODULES_END;
+ 
  	p = __vmalloc_node_range(size, MODULE_ALIGN, module_alloc_base,
++<<<<<<< HEAD
 +				module_alloc_base + MODULES_VSIZE,
 +				gfp_mask, PAGE_KERNEL, 0,
++=======
+ 				module_alloc_end, gfp_mask, PAGE_KERNEL_EXEC, 0,
++>>>>>>> 6f496a555d93 (arm64: kaslr: keep modules inside module region when KASAN is enabled)
  				NUMA_NO_NODE, __builtin_return_address(0));
  
  	if (!p && IS_ENABLED(CONFIG_ARM64_MODULE_PLTS) &&
* Unmerged path arch/arm64/kernel/module.c
