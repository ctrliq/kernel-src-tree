fbcon: replace FB_EVENT_MODE_CHANGE/_ALL with direct calls

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Daniel Vetter <daniel.vetter@ffwll.ch>
commit 9e1467002630065ed86c65ea28bfc9194fff6f0e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/9e146700.failed

Create a new wrapper function for this, feels like there's some
refactoring room here between the two modes.

v2: backlight notifier is also interested in the mode change event,
it calls lcd->set_mode, of which there are 3 implementations. Thanks
to Maarten for spotting this. So we keep that. We can ditch the differentiation
between mode change and all mode changes (because backlight notifier
doesn't care), and we can drop the FBINFO_MISC_USEREVENT stuff too,
because that's just to prevent recursion between fbmem.c and fbcon.c.

While at it flatten the control flow a bit.

v3: Need to add a static inline to the dummy function.

v4: Add missing #include <fbcon.h> to sh_mob (Sam).

	Cc: Sam Ravnborg <sam@ravnborg.org>
	Signed-off-by: Daniel Vetter <daniel.vetter@intel.com>
	Reviewed-by: Sam Ravnborg <sam@ravnborg.org>
	Reviewed-by: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
	Acked-by: Daniel Thompson <daniel.thompson@linaro.org>
	Cc: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
	Cc: Lee Jones <lee.jones@linaro.org>
	Cc: Daniel Thompson <daniel.thompson@linaro.org>
	Cc: Jingoo Han <jingoohan1@gmail.com>
	Cc: Bartlomiej Zolnierkiewicz <b.zolnierkie@samsung.com>
	Cc: Daniel Vetter <daniel.vetter@ffwll.ch>
	Cc: Hans de Goede <hdegoede@redhat.com>
	Cc: Yisheng Xie <ysxie@foxmail.com>
	Cc: "Michał Mirosław" <mirq-linux@rere.qmqm.pl>
	Cc: Peter Rosin <peda@axentia.se>
	Cc: Mikulas Patocka <mpatocka@redhat.com>
	Cc: linux-fbdev@vger.kernel.org
Link: https://patchwork.freedesktop.org/patch/msgid/20190528090304.9388-29-daniel.vetter@ffwll.ch
(cherry picked from commit 9e1467002630065ed86c65ea28bfc9194fff6f0e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/video/fbdev/core/fbcon.c
#	include/linux/fb.h
#	include/linux/fbcon.h
diff --cc drivers/video/fbdev/core/fbcon.c
index 373fd59f6a25,1837985e1ffb..000000000000
--- a/drivers/video/fbdev/core/fbcon.c
+++ b/drivers/video/fbdev/core/fbcon.c
@@@ -3029,8 -3009,17 +3029,22 @@@ static void fbcon_set_all_vcs(struct fb
  		fbcon_modechanged(info);
  }
  
++<<<<<<< HEAD
 +static int fbcon_mode_deleted(struct fb_info *info,
 +			      struct fb_videomode *mode)
++=======
+ 
+ void fbcon_update_vcs(struct fb_info *info, bool all)
+ {
+ 	if (all)
+ 		fbcon_set_all_vcs(info);
+ 	else
+ 		fbcon_modechanged(info);
+ }
+ 
+ int fbcon_mode_deleted(struct fb_info *info,
+ 		       struct fb_videomode *mode)
++>>>>>>> 9e1467002630 (fbcon: replace FB_EVENT_MODE_CHANGE/_ALL with direct calls)
  {
  	struct fb_info *fb_info;
  	struct fbcon_display *p;
@@@ -3348,26 -3327,6 +3362,29 @@@ static int fbcon_event_notify(struct no
  	int idx, ret = 0;
  
  	switch(action) {
++<<<<<<< HEAD
 +	case FB_EVENT_SUSPEND:
 +		fbcon_suspended(info);
 +		break;
 +	case FB_EVENT_RESUME:
 +		fbcon_resumed(info);
 +		break;
 +	case FB_EVENT_MODE_CHANGE:
 +		fbcon_modechanged(info);
 +		break;
 +	case FB_EVENT_MODE_CHANGE_ALL:
 +		fbcon_set_all_vcs(info);
 +		break;
 +	case FB_EVENT_MODE_DELETE:
 +		mode = event->data;
 +		ret = fbcon_mode_deleted(info, mode);
 +		break;
 +	case FB_EVENT_FB_UNBIND:
 +		idx = info->node;
 +		ret = fbcon_fb_unbind(idx);
 +		break;
++=======
++>>>>>>> 9e1467002630 (fbcon: replace FB_EVENT_MODE_CHANGE/_ALL with direct calls)
  	case FB_EVENT_SET_CONSOLE_MAP:
  		/* called with console lock held */
  		con2fb = event->data;
diff --cc include/linux/fb.h
index 5bd1a6c3d119,f9c212f9b661..000000000000
--- a/include/linux/fb.h
+++ b/include/linux/fb.h
@@@ -147,22 -137,13 +147,28 @@@ struct fb_cursor_user 
  #define FB_EVENT_GET_CONSOLE_MAP        0x07
  /*      CONSOLE-SPECIFIC: set console to framebuffer mapping */
  #define FB_EVENT_SET_CONSOLE_MAP        0x08
 -/*      A display blank is requested       */
 +/*      A hardware display blank change occurred */
  #define FB_EVENT_BLANK                  0x09
++<<<<<<< HEAD
 +/*      Private modelist is to be replaced */
 +#define FB_EVENT_NEW_MODELIST           0x0A
 +/*	The resolution of the passed in fb_info about to change and
 +        all vc's should be changed         */
 +#define FB_EVENT_MODE_CHANGE_ALL	0x0B
 +/*	A software display blank change occurred */
 +#define FB_EVENT_CONBLANK               0x0C
 +/*      Get drawing requirements        */
 +#define FB_EVENT_GET_REQ                0x0D
 +/*      Unbind from the console if possible */
 +#define FB_EVENT_FB_UNBIND              0x0E
 +/*      A hardware display blank early change occured */
++=======
+ /*      CONSOLE-SPECIFIC: remap all consoles to new fb - for vga_switcheroo */
+ #define FB_EVENT_REMAP_ALL_CONSOLE      0x0F
+ /*      A hardware display blank early change occurred */
++>>>>>>> 9e1467002630 (fbcon: replace FB_EVENT_MODE_CHANGE/_ALL with direct calls)
  #define FB_EARLY_EVENT_BLANK		0x10
 -/*      A hardware display blank revert early change occurred */
 +/*      A hardware display blank revert early change occured */
  #define FB_R_EARLY_EVENT_BLANK		0x11
  
  struct fb_event {
diff --cc include/linux/fbcon.h
index 34abc144f9f8,de31eeb22c97..000000000000
--- a/include/linux/fbcon.h
+++ b/include/linux/fbcon.h
@@@ -6,13 -6,31 +6,39 @@@ void __init fb_console_init(void)
  void __exit fb_console_exit(void);
  int fbcon_fb_registered(struct fb_info *info);
  void fbcon_fb_unregistered(struct fb_info *info);
++<<<<<<< HEAD
 +void fbcon_remap_all(struct fb_info *info);
++=======
+ void fbcon_fb_unbind(struct fb_info *info);
+ void fbcon_suspended(struct fb_info *info);
+ void fbcon_resumed(struct fb_info *info);
+ int fbcon_mode_deleted(struct fb_info *info,
+ 		       struct fb_videomode *mode);
+ void fbcon_new_modelist(struct fb_info *info);
+ void fbcon_get_requirement(struct fb_info *info,
+ 			   struct fb_blit_caps *caps);
+ void fbcon_fb_blanked(struct fb_info *info, int blank);
+ void fbcon_update_vcs(struct fb_info *info, bool all);
++>>>>>>> 9e1467002630 (fbcon: replace FB_EVENT_MODE_CHANGE/_ALL with direct calls)
  #else
  static inline void fb_console_init(void) {}
  static inline void fb_console_exit(void) {}
  static inline int fbcon_fb_registered(struct fb_info *info) { return 0; }
  static inline void fbcon_fb_unregistered(struct fb_info *info) {}
++<<<<<<< HEAD
 +static inline void fbcon_remap_all(struct fb_info *info) {}
++=======
+ static inline void fbcon_fb_unbind(struct fb_info *info) {}
+ static inline void fbcon_suspended(struct fb_info *info) {}
+ static inline void fbcon_resumed(struct fb_info *info) {}
+ static inline int fbcon_mode_deleted(struct fb_info *info,
+ 				     struct fb_videomode *mode) { return 0; }
+ static inline void fbcon_new_modelist(struct fb_info *info) {}
+ static inline void fbcon_get_requirement(struct fb_info *info,
+ 					 struct fb_blit_caps *caps) {}
+ static inline void fbcon_fb_blanked(struct fb_info *info, int blank) {}
+ static inline void fbcon_update_vcs(struct fb_info *info, bool all) {}
++>>>>>>> 9e1467002630 (fbcon: replace FB_EVENT_MODE_CHANGE/_ALL with direct calls)
  #endif
  
  #endif /* _LINUX_FBCON_H */
diff --git a/drivers/video/backlight/lcd.c b/drivers/video/backlight/lcd.c
index 4b40c6a4d441..a758039475d0 100644
--- a/drivers/video/backlight/lcd.c
+++ b/drivers/video/backlight/lcd.c
@@ -33,7 +33,6 @@ static int fb_notifier_callback(struct notifier_block *self,
 	switch (event) {
 	case FB_EVENT_BLANK:
 	case FB_EVENT_MODE_CHANGE:
-	case FB_EVENT_MODE_CHANGE_ALL:
 	case FB_EARLY_EVENT_BLANK:
 	case FB_R_EARLY_EVENT_BLANK:
 		break;
* Unmerged path drivers/video/fbdev/core/fbcon.c
diff --git a/drivers/video/fbdev/core/fbmem.c b/drivers/video/fbdev/core/fbmem.c
index 32dffdd5addd..8cf1db6580ac 100644
--- a/drivers/video/fbdev/core/fbmem.c
+++ b/drivers/video/fbdev/core/fbmem.c
@@ -932,6 +932,7 @@ fb_set_var(struct fb_info *info, struct fb_var_screeninfo *var)
 	u32 activate;
 	struct fb_var_screeninfo old_var;
 	struct fb_videomode mode;
+	struct fb_event event;
 
 	if (var->activate & FB_ACTIVATE_INV_MODE) {
 		struct fb_videomode mode1, mode2;
@@ -1019,19 +1020,17 @@ fb_set_var(struct fb_info *info, struct fb_var_screeninfo *var)
 	    !list_empty(&info->modelist))
 		ret = fb_add_videomode(&mode, &info->modelist);
 
-	if (!ret && (flags & FBINFO_MISC_USEREVENT)) {
-		struct fb_event event;
-		int evnt = (activate & FB_ACTIVATE_ALL) ?
-			FB_EVENT_MODE_CHANGE_ALL :
-			FB_EVENT_MODE_CHANGE;
+	if (ret)
+		return ret;
 
-		info->flags &= ~FBINFO_MISC_USEREVENT;
-		event.info = info;
-		event.data = &mode;
-		fb_notifier_call_chain(evnt, &event);
-	}
+	event.info = info;
+	event.data = &mode;
+	fb_notifier_call_chain(FB_EVENT_MODE_CHANGE, &event);
 
-	return ret;
+	if (flags & FBINFO_MISC_USEREVENT)
+		fbcon_update_vcs(info, activate & FB_ACTIVATE_ALL);
+
+	return 0;
 }
 EXPORT_SYMBOL(fb_set_var);
 
diff --git a/drivers/video/fbdev/sh_mobile_lcdcfb.c b/drivers/video/fbdev/sh_mobile_lcdcfb.c
index 6d7def36f6ff..e384ce02c426 100644
--- a/drivers/video/fbdev/sh_mobile_lcdcfb.c
+++ b/drivers/video/fbdev/sh_mobile_lcdcfb.c
@@ -15,6 +15,7 @@
 #include <linux/ctype.h>
 #include <linux/dma-mapping.h>
 #include <linux/delay.h>
+#include <linux/fbcon.h>
 #include <linux/gpio.h>
 #include <linux/init.h>
 #include <linux/interrupt.h>
@@ -1841,8 +1842,6 @@ static void sh_mobile_fb_reconfig(struct fb_info *info)
 	struct sh_mobile_lcdc_chan *ch = info->par;
 	struct fb_var_screeninfo var;
 	struct fb_videomode mode;
-	struct fb_event event;
-	int evnt = FB_EVENT_MODE_CHANGE_ALL;
 
 	if (ch->use_count > 1 || (ch->use_count == 1 && !info->fbcon_par))
 		/* More framebuffer users are active */
@@ -1864,14 +1863,7 @@ static void sh_mobile_fb_reconfig(struct fb_info *info)
 		/* Couldn't reconfigure, hopefully, can continue as before */
 		return;
 
-	/*
-	 * fb_set_var() calls the notifier change internally, only if
-	 * FBINFO_MISC_USEREVENT flag is set. Since we do not want to fake a
-	 * user event, we have to call the chain ourselves.
-	 */
-	event.info = info;
-	event.data = &ch->display.mode;
-	fb_notifier_call_chain(evnt, &event);
+	fbcon_update_vcs(info, true);
 }
 
 /*
* Unmerged path include/linux/fb.h
* Unmerged path include/linux/fbcon.h
