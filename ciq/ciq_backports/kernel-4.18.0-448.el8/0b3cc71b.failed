NFS: Don't request readdirplus when revalidation was forced

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Trond Myklebust <trond.myklebust@hammerspace.com>
commit 0b3cc71b5ab31ef90eb9b8b2d8ca580fbf88c590
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/0b3cc71b.failed

If the revalidation was forced, due to the presence of a LOOKUP_EXCL or
a LOOKUP_REVAL flag, then readdirplus won't help. It also can't help
when we're doing a path component lookup.

	Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
(cherry picked from commit 0b3cc71b5ab31ef90eb9b8b2d8ca580fbf88c590)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/nfs/dir.c
diff --cc fs/nfs/dir.c
index b30d5fb16526,cf7974642a19..000000000000
--- a/fs/nfs/dir.c
+++ b/fs/nfs/dir.c
@@@ -662,6 -694,16 +662,19 @@@ void nfs_force_use_readdirplus(struct i
  	}
  }
  
++<<<<<<< HEAD
++=======
+ static void nfs_lookup_advise_force_readdirplus(struct inode *dir,
+ 						unsigned int flags)
+ {
+ 	if (nfs_server_capable(dir, NFS_CAP_CASE_INSENSITIVE))
+ 		return;
+ 	if (flags & (LOOKUP_EXCL | LOOKUP_PARENT | LOOKUP_REVAL))
+ 		return;
+ 	nfs_readdir_record_entry_cache_miss(dir);
+ }
+ 
++>>>>>>> 0b3cc71b5ab3 (NFS: Don't request readdirplus when revalidation was forced)
  static
  void nfs_prime_dcache(struct dentry *parent, struct nfs_entry *entry,
  		unsigned long dir_verifier)
@@@ -1555,8 -1643,6 +1574,11 @@@ static int nfs_lookup_revalidate_dentry
  	nfs_setsecurity(inode, fattr);
  	nfs_set_verifier(dentry, dir_verifier);
  
++<<<<<<< HEAD
 +	/* set a readdirplus hint that we had a cache miss */
 +	nfs_force_use_readdirplus(dir);
++=======
++>>>>>>> 0b3cc71b5ab3 (NFS: Don't request readdirplus when revalidation was forced)
  	ret = 1;
  out:
  	nfs_free_fattr(fattr);
@@@ -1819,7 -1902,7 +1840,11 @@@ struct dentry *nfs_lookup(struct inode 
  		goto out;
  
  	/* Notify readdir to use READDIRPLUS */
++<<<<<<< HEAD
 +	nfs_force_use_readdirplus(dir);
++=======
+ 	nfs_lookup_advise_force_readdirplus(dir, flags);
++>>>>>>> 0b3cc71b5ab3 (NFS: Don't request readdirplus when revalidation was forced)
  
  no_entry:
  	res = d_splice_alias(inode, dentry);
* Unmerged path fs/nfs/dir.c
