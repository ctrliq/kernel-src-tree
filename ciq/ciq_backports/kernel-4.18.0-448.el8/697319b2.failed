net/mlx5e: MPLSoUDP decap, use vlan push_eth instead of pedit

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Maor Dickman <maord@nvidia.com>
commit 697319b2954faae7816497ef15d731666acdc4e7
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/697319b2.failed

Currently action pedit of source and destination MACs is used
to fill the MACs in L2 push step in MPLSoUDP decap offload,
this isn't aligned to tc SW which use vlan eth_push action
to do this.

To fix that, offload support for vlan veth_push action is
added together with mpls pop action, and deprecate the use
of pedit of MACs.

Flow example:
filter protocol mpls_uc pref 1 flower chain 0
filter protocol mpls_uc pref 1 flower chain 0 handle 0x1
  eth_type 8847
  mpls_label 555
  enc_dst_port 6635
  in_hw in_hw_count 1
        action order 1: tunnel_key  unset pipe
         index 2 ref 1 bind 1
        used_hw_stats delayed

        action order 2: mpls  pop protocol ip pipe
         index 2 ref 1 bind 1
        used_hw_stats delayed

        action order 3: vlan  push_eth dst_mac de:a2:ec:d6:69:c8 src_mac de:a2:ec:d6:69:c8 pipe
         index 2 ref 1 bind 1
        used_hw_stats delayed

        action order 4: mirred (Egress Redirect to device enp8s0f0_0) stolen
        index 2 ref 1 bind 1
        used_hw_stats delayed

	Signed-off-by: Maor Dickman <maord@nvidia.com>
	Reviewed-by: Roi Dayan <roid@nvidia.com>
	Signed-off-by: Jakub Kicinski <kuba@kernel.org>
(cherry picked from commit 697319b2954faae7816497ef15d731666acdc4e7)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en/tc/act/act.c
#	drivers/net/ethernet/mellanox/mlx5/core/en/tc/act/act.h
#	drivers/net/ethernet/mellanox/mlx5/core/en/tc/act/mirred.c
#	drivers/net/ethernet/mellanox/mlx5/core/en/tc/act/mpls.c
#	drivers/net/ethernet/mellanox/mlx5/core/en/tc/act/pedit.c
#	drivers/net/ethernet/mellanox/mlx5/core/en/tc/act/pedit.h
#	drivers/net/ethernet/mellanox/mlx5/core/en/tc/act/vlan.c
#	drivers/net/ethernet/mellanox/mlx5/core/en/tc/act/vlan_mangle.c
#	drivers/net/ethernet/mellanox/mlx5/core/en/tc_priv.h
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en/tc_priv.h
index b689701ac7d8,3b74a6fd5c43..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en/tc_priv.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en/tc_priv.h
@@@ -32,11 -35,13 +32,15 @@@ enum 
  
  struct mlx5e_tc_flow_parse_attr {
  	const struct ip_tunnel_info *tun_info[MLX5_MAX_FLOW_FWD_VPORTS];
 -	struct mlx5e_mpls_info mpls_info[MLX5_MAX_FLOW_FWD_VPORTS];
  	struct net_device *filter_dev;
  	struct mlx5_flow_spec spec;
 -	struct pedit_headers_action hdrs[__PEDIT_CMD_MAX];
  	struct mlx5e_tc_mod_hdr_acts mod_hdr_acts;
  	int mirred_ifindex[MLX5_MAX_FLOW_FWD_VPORTS];
++<<<<<<< HEAD
 +	struct ethhdr eth;
++=======
+ 	struct mlx5e_tc_act_parse_state parse_state;
++>>>>>>> 697319b2954f (net/mlx5e: MPLSoUDP decap, use vlan push_eth instead of pedit)
  };
  
  /* Helper struct for accessing a struct containing list_head array.
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en/tc/act/act.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en/tc/act/act.h
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en/tc/act/mirred.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en/tc/act/mpls.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en/tc/act/pedit.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en/tc/act/pedit.h
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en/tc/act/vlan.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en/tc/act/vlan_mangle.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en/tc/act/act.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en/tc/act/act.h
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en/tc/act/mirred.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en/tc/act/mpls.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en/tc/act/pedit.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en/tc/act/pedit.h
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en/tc/act/vlan.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en/tc/act/vlan_mangle.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en/tc_priv.h
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en/tc_tun_encap.c b/drivers/net/ethernet/mellanox/mlx5/core/en/tc_tun_encap.c
index ba7b9bf6dc78..255cfb4a3ee2 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en/tc_tun_encap.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en/tc_tun_encap.c
@@ -889,20 +889,18 @@ int mlx5e_attach_decap(struct mlx5e_priv *priv,
 	struct mlx5_eswitch *esw = priv->mdev->priv.eswitch;
 	struct mlx5_esw_flow_attr *attr = flow->attr->esw_attr;
 	struct mlx5_pkt_reformat_params reformat_params;
-	struct mlx5e_tc_flow_parse_attr *parse_attr;
 	struct mlx5e_decap_entry *d;
 	struct mlx5e_decap_key key;
 	uintptr_t hash_key;
 	int err = 0;
 
-	parse_attr = flow->attr->parse_attr;
-	if (sizeof(parse_attr->eth) > MLX5_CAP_ESW(priv->mdev, max_encap_header_size)) {
+	if (sizeof(attr->eth) > MLX5_CAP_ESW(priv->mdev, max_encap_header_size)) {
 		NL_SET_ERR_MSG_MOD(extack,
 				   "encap header larger than max supported");
 		return -EOPNOTSUPP;
 	}
 
-	key.key = parse_attr->eth;
+	key.key = attr->eth;
 	hash_key = hash_decap_info(&key);
 	mutex_lock(&esw->offloads.decap_tbl_lock);
 	d = mlx5e_decap_get(priv, &key, hash_key);
@@ -932,8 +930,8 @@ int mlx5e_attach_decap(struct mlx5e_priv *priv,
 
 	memset(&reformat_params, 0, sizeof(reformat_params));
 	reformat_params.type = MLX5_REFORMAT_TYPE_L3_TUNNEL_TO_L2;
-	reformat_params.size = sizeof(parse_attr->eth);
-	reformat_params.data = &parse_attr->eth;
+	reformat_params.size = sizeof(attr->eth);
+	reformat_params.data = &attr->eth;
 	d->pkt_reformat = mlx5_packet_reformat_alloc(priv->mdev,
 						     &reformat_params,
 						     MLX5_FLOW_NAMESPACE_FDB);
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/eswitch.h b/drivers/net/ethernet/mellanox/mlx5/core/eswitch.h
index db9e94cb8fbb..dc10dbc0cdd2 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/eswitch.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/eswitch.h
@@ -482,6 +482,7 @@ struct mlx5_esw_flow_attr {
 		int src_port_rewrite_act_id;
 	} dests[MLX5_MAX_FLOW_FWD_VPORTS];
 	struct mlx5_rx_tun_attr *rx_tun_attr;
+	struct ethhdr eth;
 	struct mlx5_pkt_reformat *decap_pkt_reformat;
 };
 
