ath11k: Remove core PCI references from PCI common code

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Manikanta Pubbisetty <quic_mpubbise@quicinc.com>
commit 5b32b6dd966338005671780c1df02327582c4be4
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/5b32b6dd.failed

Remove core PCI and ath11k PCI references(struct ath11k_pci)
from PCI common code. Since, PCI common code will be used
by hybrid bus devices, this code should be independent
from ATH11K PCI references and Linux core PCI references
like struct pci_dev.

Since this change introduces function callbacks for bus wakeup
and bus release operations, wakeup_mhi HW param is no longer
needed and hence it is removed completely. Alternatively, bus
wakeup/release ops for QCA9074 are initialized to NULL as
QCA9704 does not need bus wakeup/release for register accesses.

Tested-on: WCN6855 hw2.0 PCI WLAN.HSP.1.1-01720.1-QCAHSPSWPL_V1_V2_SILICONZ_LITE-1
Tested-on: QCN9074 hw1.0 PCI WLAN.HK.2.5.0.1-01100-QCAHKSWPL_SILICONZ-1
Tested-on: IPQ8074 hw2.0 AHB WLAN.HK.2.4.0.1-00192-QCAHKSWPL_SILICONZ-1

	Signed-off-by: Manikanta Pubbisetty <quic_mpubbise@quicinc.com>
	Signed-off-by: Kalle Valo <quic_kvalo@quicinc.com>
Link: https://lore.kernel.org/r/20220328055714.6449-6-quic_mpubbise@quicinc.com
(cherry picked from commit 5b32b6dd966338005671780c1df02327582c4be4)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/wireless/ath/ath11k/core.h
#	drivers/net/wireless/ath/ath11k/mhi.c
#	drivers/net/wireless/ath/ath11k/pci.c
#	drivers/net/wireless/ath/ath11k/pci.h
#	drivers/net/wireless/ath/ath11k/pcic.c
#	drivers/net/wireless/ath/ath11k/pcic.h
diff --cc drivers/net/wireless/ath/ath11k/core.h
index f3d02f55f8ea,fa299bfb4efc..000000000000
--- a/drivers/net/wireless/ath/ath11k/core.h
+++ b/drivers/net/wireless/ath/ath11k/core.h
@@@ -873,6 -928,17 +883,20 @@@ struct ath11k_base 
  		u32 subsystem_device;
  	} id;
  
++<<<<<<< HEAD
++=======
+ 	struct {
+ 		struct {
+ 			const struct ath11k_msi_config *config;
+ 			u32 ep_base_data;
+ 			u32 addr_lo;
+ 			u32 addr_hi;
+ 		} msi;
+ 
+ 		const struct ath11k_pci_ops *ops;
+ 	} pci;
+ 
++>>>>>>> 5b32b6dd9663 (ath11k: Remove core PCI references from PCI common code)
  	/* must be last */
  	u8 drv_priv[] __aligned(sizeof(void *));
  };
diff --cc drivers/net/wireless/ath/ath11k/mhi.c
index 61d83be4841f,1aa1e0f01b85..000000000000
--- a/drivers/net/wireless/ath/ath11k/mhi.c
+++ b/drivers/net/wireless/ath/ath11k/mhi.c
@@@ -270,11 -273,10 +270,15 @@@ static int ath11k_mhi_get_msi(struct at
  	for (i = 0; i < num_vectors; i++) {
  		msi_data = base_vector;
  
- 		if (test_bit(ATH11K_PCI_FLAG_MULTI_MSI_VECTORS, &ab_pci->flags))
+ 		if (test_bit(ATH11K_FLAG_MULTI_MSI_VECTORS, &ab->dev_flags))
  			msi_data += i;
  
++<<<<<<< HEAD
 +		irq[i] = ath11k_pci_get_msi_irq(ab->dev,
 +						msi_data);
++=======
+ 		irq[i] = ath11k_pci_get_msi_irq(ab, msi_data);
++>>>>>>> 5b32b6dd9663 (ath11k: Remove core PCI references from PCI common code)
  	}
  
  	ab_pci->mhi_ctrl->irq = irq;
diff --cc drivers/net/wireless/ath/ath11k/pci.c
index ae4b3aa98fc3,3fd5b416a564..000000000000
--- a/drivers/net/wireless/ath/ath11k/pci.c
+++ b/drivers/net/wireless/ath/ath11k/pci.c
@@@ -990,9 -407,8 +1068,14 @@@ static int ath11k_pci_alloc_msi(struct 
  			ret = -EINVAL;
  			goto reset_msi_config;
  		}
++<<<<<<< HEAD
 +		clear_bit(ATH11K_PCI_FLAG_MULTI_MSI_VECTORS, &ab_pci->flags);
 +		ab_pci->msi_config = &msi_config_one_msi;
 +		ab_pci->irq_flags = IRQF_SHARED | IRQF_NOBALANCING;
++=======
+ 		clear_bit(ATH11K_FLAG_MULTI_MSI_VECTORS, &ab->dev_flags);
+ 		ab->pci.msi.config = &msi_config_one_msi;
++>>>>>>> 5b32b6dd9663 (ath11k: Remove core PCI references from PCI common code)
  		ath11k_dbg(ab, ATH11K_DBG_PCI, "request MSI one vector\n");
  	}
  	ath11k_info(ab, "MSI vectors: %d\n", num_vectors);
@@@ -1140,7 -564,7 +1223,11 @@@ static void ath11k_pci_aspm_disable(str
  	set_bit(ATH11K_PCI_ASPM_RESTORE, &ab_pci->flags);
  }
  
++<<<<<<< HEAD
 +void ath11k_pci_aspm_restore(struct ath11k_pci *ab_pci)
++=======
+ static void ath11k_pci_aspm_restore(struct ath11k_pci *ab_pci)
++>>>>>>> 5b32b6dd9663 (ath11k: Remove core PCI references from PCI common code)
  {
  	if (test_and_clear_bit(ATH11K_PCI_ASPM_RESTORE, &ab_pci->flags))
  		pcie_capability_write_word(ab_pci->pdev, PCI_EXP_LNKCTL,
@@@ -1263,57 -640,31 +1350,80 @@@ static void ath11k_pci_hif_ce_irq_enabl
  
  static void ath11k_pci_hif_ce_irq_disable(struct ath11k_base *ab)
  {
 -	ath11k_pcic_ce_irq_disable_sync(ab);
 +	ath11k_pci_ce_irq_disable_sync(ab);
 +}
 +
 +int ath11k_pci_map_service_to_pipe(struct ath11k_base *ab, u16 service_id,
 +				   u8 *ul_pipe, u8 *dl_pipe)
 +{
 +	const struct service_to_pipe *entry;
 +	bool ul_set = false, dl_set = false;
 +	int i;
 +
 +	for (i = 0; i < ab->hw_params.svc_to_ce_map_len; i++) {
 +		entry = &ab->hw_params.svc_to_ce_map[i];
 +
 +		if (__le32_to_cpu(entry->service_id) != service_id)
 +			continue;
 +
 +		switch (__le32_to_cpu(entry->pipedir)) {
 +		case PIPEDIR_NONE:
 +			break;
 +		case PIPEDIR_IN:
 +			WARN_ON(dl_set);
 +			*dl_pipe = __le32_to_cpu(entry->pipenum);
 +			dl_set = true;
 +			break;
 +		case PIPEDIR_OUT:
 +			WARN_ON(ul_set);
 +			*ul_pipe = __le32_to_cpu(entry->pipenum);
 +			ul_set = true;
 +			break;
 +		case PIPEDIR_INOUT:
 +			WARN_ON(dl_set);
 +			WARN_ON(ul_set);
 +			*dl_pipe = __le32_to_cpu(entry->pipenum);
 +			*ul_pipe = __le32_to_cpu(entry->pipenum);
 +			dl_set = true;
 +			ul_set = true;
 +			break;
 +		}
 +	}
 +
 +	if (WARN_ON(!ul_set || !dl_set))
 +		return -ENOENT;
 +
 +	return 0;
  }
  
+ static int ath11k_pci_start(struct ath11k_base *ab)
+ {
+ 	struct ath11k_pci *ab_pci = ath11k_pci_priv(ab);
+ 
+ 	/* TODO: for now don't restore ASPM in case of single MSI
+ 	 * vector as MHI register reading in M2 causes system hang.
+ 	 */
+ 	if (test_bit(ATH11K_FLAG_MULTI_MSI_VECTORS, &ab->dev_flags))
+ 		ath11k_pci_aspm_restore(ab_pci);
+ 	else
+ 		ath11k_info(ab, "leaving PCI ASPM disabled to avoid MHI M2 problems\n");
+ 
+ 	ath11k_pcic_start(ab);
+ 
+ 	return 0;
+ }
+ 
  static const struct ath11k_hif_ops ath11k_pci_hif_ops = {
  	.start = ath11k_pci_start,
++<<<<<<< HEAD
 +	.stop = ath11k_pci_stop,
 +	.read32 = ath11k_pci_read32,
 +	.write32 = ath11k_pci_write32,
++=======
+ 	.stop = ath11k_pcic_stop,
+ 	.read32 = ath11k_pcic_read32,
+ 	.write32 = ath11k_pcic_write32,
++>>>>>>> 5b32b6dd9663 (ath11k: Remove core PCI references from PCI common code)
  	.power_down = ath11k_pci_power_down,
  	.power_up = ath11k_pci_power_up,
  	.suspend = ath11k_pci_hif_suspend,
@@@ -1404,11 -764,12 +1523,17 @@@ static int ath11k_pci_probe(struct pci_
  			ret = -EOPNOTSUPP;
  			goto err_pci_free_region;
  		}
++<<<<<<< HEAD
 +		ab_pci->msi_config = &ath11k_msi_config[0];
++=======
+ 
+ 		ab->pci.ops = &ath11k_pci_ops_qca6390;
++>>>>>>> 5b32b6dd9663 (ath11k: Remove core PCI references from PCI common code)
  		break;
  	case QCN9074_DEVICE_ID:
 +		ab_pci->msi_config = &ath11k_msi_config[1];
  		ab->bus_params.static_window_map = true;
+ 		ab->pci.ops = &ath11k_pci_ops_qcn9074;
  		ab->hw_rev = ATH11K_HW_QCN9074_HW10;
  		break;
  	case WCN6855_DEVICE_ID:
@@@ -1437,7 -798,8 +1562,12 @@@ unsupported_wcn6855_soc
  			ret = -EOPNOTSUPP;
  			goto err_pci_free_region;
  		}
++<<<<<<< HEAD
 +		ab_pci->msi_config = &ath11k_msi_config[0];
++=======
+ 
+ 		ab->pci.ops = &ath11k_pci_ops_qca6390;
++>>>>>>> 5b32b6dd9663 (ath11k: Remove core PCI references from PCI common code)
  		break;
  	default:
  		dev_err(&pdev->dev, "Unknown PCI device found: 0x%x\n",
@@@ -1498,8 -872,11 +1634,11 @@@
  	}
  	return 0;
  
+ err_irq_affinity_cleanup:
+ 	ath11k_pci_set_irq_affinity_hint(ab_pci, NULL);
+ 
  err_free_irq:
 -	ath11k_pcic_free_irq(ab);
 +	ath11k_pci_free_irq(ab);
  
  err_ce_free:
  	ath11k_ce_free_pipes(ab);
diff --cc drivers/net/wireless/ath/ath11k/pci.h
index 31ee843c1cab,16a000b9cc5e..000000000000
--- a/drivers/net/wireless/ath/ath11k/pci.h
+++ b/drivers/net/wireless/ath/ath11k/pci.h
@@@ -53,38 -53,8 +53,40 @@@
  #define WLAON_QFPROM_PWR_CTRL_REG		0x01f8031c
  #define QFPROM_PWR_CTRL_VDD4BLOW_MASK		0x4
  
 +#define ATH11K_PCI_IRQ_CE0_OFFSET	3
 +#define ATH11K_PCI_IRQ_DP_OFFSET	14
 +
 +#define ATH11K_PCI_WINDOW_ENABLE_BIT		0x40000000
 +#define ATH11K_PCI_WINDOW_REG_ADDRESS		0x310c
 +#define ATH11K_PCI_WINDOW_VALUE_MASK		GENMASK(24, 19)
 +#define ATH11K_PCI_WINDOW_START			0x80000
 +#define ATH11K_PCI_WINDOW_RANGE_MASK		GENMASK(18, 0)
 +
 +/* BAR0 + 4k is always accessible, and no
 + * need to force wakeup.
 + * 4K - 32 = 0xFE0
 + */
 +#define ATH11K_PCI_ACCESS_ALWAYS_OFF 0xFE0
 +
 +struct ath11k_msi_user {
 +	char *name;
 +	int num_vectors;
 +	u32 base_vector;
 +};
 +
 +struct ath11k_msi_config {
 +	int total_vectors;
 +	int total_users;
 +	struct ath11k_msi_user *users;
 +};
 +
  enum ath11k_pci_flags {
++<<<<<<< HEAD
 +	ATH11K_PCI_FLAG_INIT_DONE,
 +	ATH11K_PCI_FLAG_IS_MSI_64,
++=======
++>>>>>>> 5b32b6dd9663 (ath11k: Remove core PCI references from PCI common code)
  	ATH11K_PCI_ASPM_RESTORE,
- 	ATH11K_PCI_FLAG_MULTI_MSI_VECTORS,
  };
  
  struct ath11k_pci {
@@@ -113,30 -79,5 +113,34 @@@ static inline struct ath11k_pci *ath11k
  	return (struct ath11k_pci *)ab->drv_priv;
  }
  
++<<<<<<< HEAD
 +int ath11k_pci_get_user_msi_assignment(struct ath11k_pci *ar_pci, char *user_name,
 +				       int *num_vectors, u32 *user_base_data,
 +				       u32 *base_vector);
 +int ath11k_pci_get_msi_irq(struct device *dev, unsigned int vector);
 +void ath11k_pci_write32(struct ath11k_base *ab, u32 offset, u32 value);
 +u32 ath11k_pci_read32(struct ath11k_base *ab, u32 offset);
 +void ath11k_pci_get_msi_address(struct ath11k_base *ab, u32 *msi_addr_lo,
 +				u32 *msi_addr_hi);
 +void ath11k_pci_get_ce_msi_idx(struct ath11k_base *ab, u32 ce_id, u32 *msi_idx);
 +void ath11k_pci_free_irq(struct ath11k_base *ab);
 +int ath11k_pci_config_irq(struct ath11k_base *ab);
 +void ath11k_pci_ext_irq_enable(struct ath11k_base *ab);
 +void ath11k_pci_ext_irq_disable(struct ath11k_base *ab);
 +void ath11k_pci_stop(struct ath11k_base *ab);
 +int ath11k_pci_start(struct ath11k_base *ab);
 +int ath11k_pci_map_service_to_pipe(struct ath11k_base *ab, u16 service_id,
 +				   u8 *ul_pipe, u8 *dl_pipe);
 +void ath11k_pci_ce_irqs_enable(struct ath11k_base *ab);
 +void ath11k_pci_ce_irq_disable_sync(struct ath11k_base *ab);
 +int ath11k_get_user_msi_assignment(struct ath11k_base *ab, char *user_name,
 +				   int *num_vectors, u32 *user_base_data,
 +				   u32 *base_vector);
 +void ath11k_pci_aspm_restore(struct ath11k_pci *ab_pci);
 +int ath11k_pci_set_irq_affinity_hint(struct ath11k_pci *ab_pci,
 +				     const struct cpumask *m);
 +
++=======
+ int ath11k_pci_get_msi_irq(struct ath11k_base *ab, unsigned int vector);
++>>>>>>> 5b32b6dd9663 (ath11k: Remove core PCI references from PCI common code)
  #endif
* Unmerged path drivers/net/wireless/ath/ath11k/pcic.c
* Unmerged path drivers/net/wireless/ath/ath11k/pcic.h
diff --git a/drivers/net/wireless/ath/ath11k/core.c b/drivers/net/wireless/ath/ath11k/core.c
index f7dbfbe84fb9..bce01e9d23b3 100644
--- a/drivers/net/wireless/ath/ath11k/core.c
+++ b/drivers/net/wireless/ath/ath11k/core.c
@@ -95,7 +95,6 @@ static const struct ath11k_hw_params ath11k_hw_params[] = {
 		.hal_params = &ath11k_hw_hal_params_ipq8074,
 		.supports_dynamic_smps_6ghz = false,
 		.alloc_cacheable_memory = true,
-		.wakeup_mhi = false,
 		.supports_rssi_stats = false,
 		.fw_wmi_diag_event = false,
 		.current_cc_support = false,
@@ -162,7 +161,6 @@ static const struct ath11k_hw_params ath11k_hw_params[] = {
 		.hal_params = &ath11k_hw_hal_params_ipq8074,
 		.supports_dynamic_smps_6ghz = false,
 		.alloc_cacheable_memory = true,
-		.wakeup_mhi = false,
 		.supports_rssi_stats = false,
 		.fw_wmi_diag_event = false,
 		.current_cc_support = false,
@@ -228,7 +226,6 @@ static const struct ath11k_hw_params ath11k_hw_params[] = {
 		.hal_params = &ath11k_hw_hal_params_qca6390,
 		.supports_dynamic_smps_6ghz = false,
 		.alloc_cacheable_memory = false,
-		.wakeup_mhi = true,
 		.supports_rssi_stats = true,
 		.fw_wmi_diag_event = true,
 		.current_cc_support = true,
@@ -294,7 +291,6 @@ static const struct ath11k_hw_params ath11k_hw_params[] = {
 		.hal_params = &ath11k_hw_hal_params_ipq8074,
 		.supports_dynamic_smps_6ghz = true,
 		.alloc_cacheable_memory = true,
-		.wakeup_mhi = false,
 		.supports_rssi_stats = false,
 		.fw_wmi_diag_event = false,
 		.current_cc_support = false,
@@ -360,7 +356,6 @@ static const struct ath11k_hw_params ath11k_hw_params[] = {
 		.hal_params = &ath11k_hw_hal_params_qca6390,
 		.supports_dynamic_smps_6ghz = false,
 		.alloc_cacheable_memory = false,
-		.wakeup_mhi = true,
 		.supports_rssi_stats = true,
 		.fw_wmi_diag_event = true,
 		.current_cc_support = true,
@@ -425,7 +420,6 @@ static const struct ath11k_hw_params ath11k_hw_params[] = {
 		.hal_params = &ath11k_hw_hal_params_qca6390,
 		.supports_dynamic_smps_6ghz = false,
 		.alloc_cacheable_memory = false,
-		.wakeup_mhi = true,
 		.supports_rssi_stats = true,
 		.fw_wmi_diag_event = true,
 		.current_cc_support = true,
* Unmerged path drivers/net/wireless/ath/ath11k/core.h
diff --git a/drivers/net/wireless/ath/ath11k/hw.h b/drivers/net/wireless/ath/ath11k/hw.h
index 44025bc5d082..08f958c03ec4 100644
--- a/drivers/net/wireless/ath/ath11k/hw.h
+++ b/drivers/net/wireless/ath/ath11k/hw.h
@@ -1,6 +1,7 @@
 /* SPDX-License-Identifier: BSD-3-Clause-Clear */
 /*
  * Copyright (c) 2018-2019 The Linux Foundation. All rights reserved.
+ * Copyright (c) 2021-2022, Qualcomm Innovation Center, Inc. All rights reserved.
  */
 
 #ifndef ATH11K_HW_H
@@ -189,7 +190,6 @@ struct ath11k_hw_params {
 	const struct ath11k_hw_hal_params *hal_params;
 	bool supports_dynamic_smps_6ghz;
 	bool alloc_cacheable_memory;
-	bool wakeup_mhi;
 	bool supports_rssi_stats;
 	bool fw_wmi_diag_event;
 	bool current_cc_support;
* Unmerged path drivers/net/wireless/ath/ath11k/mhi.c
* Unmerged path drivers/net/wireless/ath/ath11k/pci.c
* Unmerged path drivers/net/wireless/ath/ath11k/pci.h
* Unmerged path drivers/net/wireless/ath/ath11k/pcic.c
* Unmerged path drivers/net/wireless/ath/ath11k/pcic.h
