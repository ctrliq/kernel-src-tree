KVM: s390: pci: add routines to start/stop interpretive execution

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Matthew Rosato <mjrosato@linux.ibm.com>
commit 09340b2fca007509c3cbc34fdc97961e0abfc589
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/09340b2f.failed

These routines will be invoked at the time an s390x vfio-pci device is
associated with a KVM (or when the association is removed), allowing
the zPCI device to enable or disable load/store intepretation mode;
this requires the host zPCI device to inform firmware of the unique
token (GISA designation) that is associated with the owning KVM.

	Signed-off-by: Matthew Rosato <mjrosato@linux.ibm.com>
	Acked-by: Pierre Morel <pmorel@linux.ibm.com>
Link: https://lore.kernel.org/r/20220606203325.110625-17-mjrosato@linux.ibm.com
	Signed-off-by: Christian Borntraeger <borntraeger@linux.ibm.com>
(cherry picked from commit 09340b2fca007509c3cbc34fdc97961e0abfc589)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/s390/kvm/pci.h
#	arch/s390/pci/pci.c
diff --cc arch/s390/kvm/pci.h
index 1c862c772281,fb2b91b76e0c..000000000000
--- a/arch/s390/kvm/pci.h
+++ b/arch/s390/kvm/pci.h
@@@ -13,6 -13,8 +13,11 @@@
  #include <linux/kvm_host.h>
  #include <linux/pci.h>
  #include <linux/mutex.h>
++<<<<<<< HEAD
++=======
+ #include <linux/kvm.h>
+ #include <linux/kvm_host.h>
++>>>>>>> 09340b2fca00 (KVM: s390: pci: add routines to start/stop interpretive execution)
  #include <asm/airq.h>
  #include <asm/cpu.h>
  
diff --cc arch/s390/pci/pci.c
index a4d3aada2ce5,73cdc5539384..000000000000
--- a/arch/s390/pci/pci.c
+++ b/arch/s390/pci/pci.c
@@@ -123,8 -126,13 +123,9 @@@ int zpci_register_ioat(struct zpci_dev 
  	fib.pba = base;
  	fib.pal = limit;
  	fib.iota = iota | ZPCI_IOTA_RTTO_FLAG;
 -	fib.gd = zdev->gisa;
 -	cc = zpci_mod_fc(req, &fib, &status);
 -	if (cc)
 -		zpci_dbg(3, "reg ioat fid:%x, cc:%d, status:%d\n", zdev->fid, cc, status);
 -	return cc;
 +	return zpci_mod_fc(req, &fib, &status) ? -EIO : 0;
  }
+ EXPORT_SYMBOL_GPL(zpci_register_ioat);
  
  /* Modify PCI: Unregister I/O address translation parameters */
  int zpci_unregister_ioat(struct zpci_dev *zdev, u8 dmaas)
@@@ -730,24 -739,107 +731,38 @@@ int zpci_disable_device(struct zpci_de
  }
  EXPORT_SYMBOL_GPL(zpci_disable_device);
  
 -/**
 - * zpci_hot_reset_device - perform a reset of the given zPCI function
 - * @zdev: the slot which should be reset
 - *
 - * Performs a low level reset of the zPCI function. The reset is low level in
 - * the sense that the zPCI function can be reset without detaching it from the
 - * common PCI subsystem. The reset may be performed while under control of
 - * either DMA or IOMMU APIs in which case the existing DMA/IOMMU translation
 - * table is reinstated at the end of the reset.
 - *
 - * After the reset the functions internal state is reset to an initial state
 - * equivalent to its state during boot when first probing a driver.
 - * Consequently after reset the PCI function requires re-initialization via the
 - * common PCI code including re-enabling IRQs via pci_alloc_irq_vectors()
 - * and enabling the function via e.g.pci_enablde_device_flags().The caller
 - * must guard against concurrent reset attempts.
 - *
 - * In most cases this function should not be called directly but through
 - * pci_reset_function() or pci_reset_bus() which handle the save/restore and
 - * locking.
 - *
 - * Return: 0 on success and an error value otherwise
 - */
 -int zpci_hot_reset_device(struct zpci_dev *zdev)
 +void zpci_remove_device(struct zpci_dev *zdev)
  {
 -	int rc;
 -
 -	zpci_dbg(3, "rst fid:%x, fh:%x\n", zdev->fid, zdev->fh);
 -	if (zdev_enabled(zdev)) {
 -		/* Disables device access, DMAs and IRQs (reset state) */
 -		rc = zpci_disable_device(zdev);
 -		/*
 -		 * Due to a z/VM vs LPAR inconsistency in the error state the
 -		 * FH may indicate an enabled device but disable says the
 -		 * device is already disabled don't treat it as an error here.
 -		 */
 -		if (rc == -EINVAL)
 -			rc = 0;
 -		if (rc)
 -			return rc;
 -	}
 -
 -	rc = zpci_enable_device(zdev);
 -	if (rc)
 -		return rc;
 +	struct zpci_bus *zbus = zdev->zbus;
 +	struct pci_dev *pdev;
  
 -	if (zdev->dma_table)
 -		rc = zpci_register_ioat(zdev, 0, zdev->start_dma, zdev->end_dma,
 -					virt_to_phys(zdev->dma_table));
 -	else
 -		rc = zpci_dma_init_device(zdev);
 -	if (rc) {
 -		zpci_disable_device(zdev);
 -		return rc;
 +	pdev = pci_get_slot(zbus->bus, zdev->devfn);
 +	if (pdev) {
 +		if (pdev->is_virtfn)
 +			return zpci_remove_virtfn(pdev, zdev->vfn);
 +		pci_stop_and_remove_bus_device_locked(pdev);
  	}
 -
 -	return 0;
  }
++EXPORT_SYMBOL_GPL(zpci_disable_device);
  
 -/**
 - * zpci_create_device() - Create a new zpci_dev and add it to the zbus
 - * @fid: Function ID of the device to be created
 - * @fh: Current Function Handle of the device to be created
 - * @state: Initial state after creation either Standby or Configured
 - *
 - * Creates a new zpci device and adds it to its, possibly newly created, zbus
 - * as well as zpci_list.
 - *
 - * Returns: the zdev on success or an error pointer otherwise
 - */
 -struct zpci_dev *zpci_create_device(u32 fid, u32 fh, enum zpci_state state)
 +int zpci_create_device(struct zpci_dev *zdev)
  {
 -	struct zpci_dev *zdev;
  	int rc;
  
 -	zpci_dbg(1, "add fid:%x, fh:%x, c:%d\n", fid, fh, state);
 -	zdev = kzalloc(sizeof(*zdev), GFP_KERNEL);
 -	if (!zdev)
 -		return ERR_PTR(-ENOMEM);
 -
 -	/* FID and Function Handle are the static/dynamic identifiers */
 -	zdev->fid = fid;
 -	zdev->fh = fh;
 -
 -	/* Query function properties and update zdev */
 -	rc = clp_query_pci_fn(zdev);
 -	if (rc)
 -		goto error;
 -	zdev->state =  state;
 -
  	kref_init(&zdev->kref);
++<<<<<<< HEAD
++=======
+ 	mutex_init(&zdev->lock);
+ 	mutex_init(&zdev->kzdev_lock);
+ 
+ 	rc = zpci_init_iommu(zdev);
+ 	if (rc)
+ 		goto error;
+ 
+ 	rc = zpci_bus_device_register(zdev, &pci_root_ops);
+ 	if (rc)
+ 		goto error_destroy_iommu;
++>>>>>>> 09340b2fca00 (KVM: s390: pci: add routines to start/stop interpretive execution)
  
  	spin_lock(&zpci_list_lock);
  	list_add_tail(&zdev->entry, &zpci_list);
diff --git a/arch/s390/include/asm/kvm_host.h b/arch/s390/include/asm/kvm_host.h
index 502db6311e38..36ee942eb7fc 100644
--- a/arch/s390/include/asm/kvm_host.h
+++ b/arch/s390/include/asm/kvm_host.h
@@ -19,6 +19,7 @@
 #include <linux/kvm.h>
 #include <linux/seqlock.h>
 #include <linux/module.h>
+#include <linux/pci.h>
 #include <asm/debug.h>
 #include <asm/cpu.h>
 #include <asm/fpu/api.h>
@@ -981,6 +982,8 @@ struct kvm_arch{
 	DECLARE_BITMAP(idle_mask, KVM_MAX_VCPUS);
 	struct kvm_s390_gisa_interrupt gisa_int;
 	struct kvm_s390_pv pv;
+	struct list_head kzdev_list;
+	spinlock_t kzdev_list_lock;
 };
 
 #define KVM_HVA_ERR_BAD		(-1UL)
@@ -1031,4 +1034,19 @@ static inline void kvm_arch_flush_shadow_memslot(struct kvm *kvm,
 static inline void kvm_arch_vcpu_blocking(struct kvm_vcpu *vcpu) {}
 static inline void kvm_arch_vcpu_unblocking(struct kvm_vcpu *vcpu) {}
 
+#define __KVM_HAVE_ARCH_VM_FREE
+void kvm_arch_free_vm(struct kvm *kvm);
+
+#ifdef CONFIG_VFIO_PCI_ZDEV_KVM
+int kvm_s390_pci_register_kvm(struct zpci_dev *zdev, struct kvm *kvm);
+void kvm_s390_pci_unregister_kvm(struct zpci_dev *zdev);
+#else
+static inline int kvm_s390_pci_register_kvm(struct zpci_dev *dev,
+					    struct kvm *kvm)
+{
+	return -EPERM;
+}
+static inline void kvm_s390_pci_unregister_kvm(struct zpci_dev *dev) {}
+#endif
+
 #endif
diff --git a/arch/s390/include/asm/pci.h b/arch/s390/include/asm/pci.h
index 80f140b8529d..c0ead78a6205 100644
--- a/arch/s390/include/asm/pci.h
+++ b/arch/s390/include/asm/pci.h
@@ -192,6 +192,7 @@ struct zpci_dev {
 	/* IOMMU and passthrough */
 	struct s390_domain *s390_domain; /* s390 IOMMU domain data */
 	struct kvm_zdev *kzdev;
+	struct mutex kzdev_lock;
 };
 
 static inline bool zdev_enabled(struct zpci_dev *zdev)
diff --git a/arch/s390/kvm/kvm-s390.c b/arch/s390/kvm/kvm-s390.c
index d9a77ff8733f..23661d1831aa 100644
--- a/arch/s390/kvm/kvm-s390.c
+++ b/arch/s390/kvm/kvm-s390.c
@@ -2964,6 +2964,14 @@ static void sca_dispose(struct kvm *kvm)
 	kvm->arch.sca = NULL;
 }
 
+void kvm_arch_free_vm(struct kvm *kvm)
+{
+	if (IS_ENABLED(CONFIG_VFIO_PCI_ZDEV_KVM))
+		kvm_s390_pci_clear_list(kvm);
+
+	__kvm_arch_free_vm(kvm);
+}
+
 int kvm_arch_init_vm(struct kvm *kvm, unsigned long type)
 {
 	gfp_t alloc_flags = GFP_KERNEL_ACCOUNT;
@@ -3046,6 +3054,13 @@ int kvm_arch_init_vm(struct kvm *kvm, unsigned long type)
 
 	kvm_s390_crypto_init(kvm);
 
+	if (IS_ENABLED(CONFIG_VFIO_PCI_ZDEV_KVM)) {
+		mutex_lock(&kvm->lock);
+		kvm_s390_pci_init_list(kvm);
+		kvm_s390_vcpu_pci_enable_interp(kvm);
+		mutex_unlock(&kvm->lock);
+	}
+
 	mutex_init(&kvm->arch.float_int.ais_lock);
 	spin_lock_init(&kvm->arch.float_int.lock);
 	for (i = 0; i < FIRQ_LIST_COUNT; i++)
diff --git a/arch/s390/kvm/pci.c b/arch/s390/kvm/pci.c
index b232c8cbaa81..24211741deb0 100644
--- a/arch/s390/kvm/pci.c
+++ b/arch/s390/kvm/pci.c
@@ -12,7 +12,9 @@
 #include <asm/pci.h>
 #include <asm/pci_insn.h>
 #include <asm/pci_io.h>
+#include <asm/sclp.h>
 #include "pci.h"
+#include "kvm-s390.h"
 
 struct zpci_aift *aift;
 
@@ -423,6 +425,166 @@ static void kvm_s390_pci_dev_release(struct zpci_dev *zdev)
 	kfree(kzdev);
 }
 
+
+/*
+ * Register device with the specified KVM. If interpetation facilities are
+ * available, enable them and let userspace indicate whether or not they will
+ * be used (specify SHM bit to disable).
+ */
+int kvm_s390_pci_register_kvm(struct zpci_dev *zdev, struct kvm *kvm)
+{
+	int rc;
+
+	if (!zdev)
+		return -EINVAL;
+
+	mutex_lock(&zdev->kzdev_lock);
+
+	if (zdev->kzdev || zdev->gisa != 0 || !kvm) {
+		mutex_unlock(&zdev->kzdev_lock);
+		return -EINVAL;
+	}
+
+	kvm_get_kvm(kvm);
+
+	mutex_lock(&kvm->lock);
+
+	rc = kvm_s390_pci_dev_open(zdev);
+	if (rc)
+		goto err;
+
+	/*
+	 * If interpretation facilities aren't available, add the device to
+	 * the kzdev list but don't enable for interpretation.
+	 */
+	if (!kvm_s390_pci_interp_allowed())
+		goto out;
+
+	/*
+	 * If this is the first request to use an interpreted device, make the
+	 * necessary vcpu changes
+	 */
+	if (!kvm->arch.use_zpci_interp)
+		kvm_s390_vcpu_pci_enable_interp(kvm);
+
+	if (zdev_enabled(zdev)) {
+		rc = zpci_disable_device(zdev);
+		if (rc)
+			goto err;
+	}
+
+	/*
+	 * Store information about the identity of the kvm guest allowed to
+	 * access this device via interpretation to be used by host CLP
+	 */
+	zdev->gisa = (u32)virt_to_phys(&kvm->arch.sie_page2->gisa);
+
+	rc = zpci_enable_device(zdev);
+	if (rc)
+		goto clear_gisa;
+
+	/* Re-register the IOMMU that was already created */
+	rc = zpci_register_ioat(zdev, 0, zdev->start_dma, zdev->end_dma,
+				virt_to_phys(zdev->dma_table));
+	if (rc)
+		goto clear_gisa;
+
+out:
+	zdev->kzdev->kvm = kvm;
+
+	spin_lock(&kvm->arch.kzdev_list_lock);
+	list_add_tail(&zdev->kzdev->entry, &kvm->arch.kzdev_list);
+	spin_unlock(&kvm->arch.kzdev_list_lock);
+
+	mutex_unlock(&kvm->lock);
+	mutex_unlock(&zdev->kzdev_lock);
+	return 0;
+
+clear_gisa:
+	zdev->gisa = 0;
+err:
+	if (zdev->kzdev)
+		kvm_s390_pci_dev_release(zdev);
+	mutex_unlock(&kvm->lock);
+	mutex_unlock(&zdev->kzdev_lock);
+	kvm_put_kvm(kvm);
+	return rc;
+}
+EXPORT_SYMBOL_GPL(kvm_s390_pci_register_kvm);
+
+void kvm_s390_pci_unregister_kvm(struct zpci_dev *zdev)
+{
+	struct kvm *kvm;
+
+	if (!zdev)
+		return;
+
+	mutex_lock(&zdev->kzdev_lock);
+
+	if (WARN_ON(!zdev->kzdev)) {
+		mutex_unlock(&zdev->kzdev_lock);
+		return;
+	}
+
+	kvm = zdev->kzdev->kvm;
+	mutex_lock(&kvm->lock);
+
+	/*
+	 * A 0 gisa means interpretation was never enabled, just remove the
+	 * device from the list.
+	 */
+	if (zdev->gisa == 0)
+		goto out;
+
+	/* Forwarding must be turned off before interpretation */
+	if (zdev->kzdev->fib.fmt0.aibv != 0)
+		kvm_s390_pci_aif_disable(zdev, true);
+
+	/* Remove the host CLP guest designation */
+	zdev->gisa = 0;
+
+	if (zdev_enabled(zdev)) {
+		if (zpci_disable_device(zdev))
+			goto out;
+	}
+
+	if (zpci_enable_device(zdev))
+		goto out;
+
+	/* Re-register the IOMMU that was already created */
+	zpci_register_ioat(zdev, 0, zdev->start_dma, zdev->end_dma,
+			   virt_to_phys(zdev->dma_table));
+
+out:
+	spin_lock(&kvm->arch.kzdev_list_lock);
+	list_del(&zdev->kzdev->entry);
+	spin_unlock(&kvm->arch.kzdev_list_lock);
+	kvm_s390_pci_dev_release(zdev);
+
+	mutex_unlock(&kvm->lock);
+	mutex_unlock(&zdev->kzdev_lock);
+
+	kvm_put_kvm(kvm);
+}
+EXPORT_SYMBOL_GPL(kvm_s390_pci_unregister_kvm);
+
+void kvm_s390_pci_init_list(struct kvm *kvm)
+{
+	spin_lock_init(&kvm->arch.kzdev_list_lock);
+	INIT_LIST_HEAD(&kvm->arch.kzdev_list);
+}
+
+void kvm_s390_pci_clear_list(struct kvm *kvm)
+{
+	/*
+	 * This list should already be empty, either via vfio device closures
+	 * or kvm fd cleanup.
+	 */
+	spin_lock(&kvm->arch.kzdev_list_lock);
+	WARN_ON_ONCE(!list_empty(&kvm->arch.kzdev_list));
+	spin_unlock(&kvm->arch.kzdev_list_lock);
+}
+
 int kvm_s390_pci_init(void)
 {
 	aift = kzalloc(sizeof(struct zpci_aift), GFP_KERNEL);
* Unmerged path arch/s390/kvm/pci.h
* Unmerged path arch/s390/pci/pci.c
