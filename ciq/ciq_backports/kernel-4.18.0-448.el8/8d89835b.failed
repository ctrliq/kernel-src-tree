PM: suspend: Do not pause cpuidle in the suspend-to-idle path

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Rafael J. Wysocki <rafael.j.wysocki@intel.com>
commit 8d89835b0467b7e618c1c93603c1aff85a0c3c66
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/8d89835b.failed

It is pointless to pause cpuidle in the suspend-to-idle path,
because it is going to be resumed in the same path later and
pausing it does not serve any particular purpose in that case.

Rework the code to avoid doing that.

	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
	Reviewed-by: Ulf Hansson <ulf.hansson@linaro.org>
	Tested-by: Ulf Hansson <ulf.hansson@linaro.org>
(cherry picked from commit 8d89835b0467b7e618c1c93603c1aff85a0c3c66)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/power/suspend.c
diff --cc kernel/power/suspend.c
index 79b894cd5e8b,529d7818513f..000000000000
--- a/kernel/power/suspend.c
+++ b/kernel/power/suspend.c
@@@ -97,8 -96,7 +97,12 @@@ static void s2idle_enter(void
  	s2idle_state = S2IDLE_STATE_ENTER;
  	raw_spin_unlock_irq(&s2idle_lock);
  
++<<<<<<< HEAD
 +	get_online_cpus();
 +	cpuidle_resume();
++=======
+ 	cpus_read_lock();
++>>>>>>> 8d89835b0467 (PM: suspend: Do not pause cpuidle in the suspend-to-idle path)
  
  	/* Push all the CPUs into the idle loop. */
  	wake_up_all_idle_cpus();
@@@ -106,8 -104,7 +110,12 @@@
  	swait_event_exclusive(s2idle_wait_head,
  		    s2idle_state == S2IDLE_STATE_WAKE);
  
++<<<<<<< HEAD
 +	cpuidle_pause();
 +	put_online_cpus();
++=======
+ 	cpus_read_unlock();
++>>>>>>> 8d89835b0467 (PM: suspend: Do not pause cpuidle in the suspend-to-idle path)
  
  	raw_spin_lock_irq(&s2idle_lock);
  
diff --git a/drivers/base/power/main.c b/drivers/base/power/main.c
index d9545fbc2bd3..4ef342bdf68b 100644
--- a/drivers/base/power/main.c
+++ b/drivers/base/power/main.c
@@ -749,8 +749,6 @@ void dpm_resume_noirq(pm_message_t state)
 
 	resume_device_irqs();
 	device_wakeup_disarm_wake_irqs();
-
-	cpuidle_resume();
 }
 
 /**
@@ -883,6 +881,7 @@ void dpm_resume_early(pm_message_t state)
 void dpm_resume_start(pm_message_t state)
 {
 	dpm_resume_noirq(state);
+	cpuidle_resume();
 	dpm_resume_early(state);
 }
 EXPORT_SYMBOL_GPL(dpm_resume_start);
@@ -1339,8 +1338,6 @@ int dpm_suspend_noirq(pm_message_t state)
 {
 	int ret;
 
-	cpuidle_pause();
-
 	device_wakeup_arm_wake_irqs();
 	suspend_device_irqs();
 
@@ -1524,9 +1521,13 @@ int dpm_suspend_end(pm_message_t state)
 	if (error)
 		goto out;
 
+	cpuidle_pause();
+
 	error = dpm_suspend_noirq(state);
-	if (error)
+	if (error) {
+		cpuidle_resume();
 		dpm_resume_early(resume_event(state));
+	}
 
 out:
 	dpm_show_time(starttime, state, error, "end");
* Unmerged path kernel/power/suspend.c
