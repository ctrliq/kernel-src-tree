s390/kexec_file: move kernel image size check

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Sven Schnelle <svens@linux.ibm.com>
commit 277c8389386e2ccb8417afe4e36f67fc5dcd735d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/277c8389.failed

In preparation of adding support for command lines with variable
sizes on s390, the check whether the new kernel image is at least HEAD_END
bytes long isn't correct. Move the check to kexec_file_add_components()
so we can get the size of the parm area and check the size there.

The '.org HEAD_END' directive can now also be removed from head.S. This
was used in the past to reserve space for the early sccb buffer, but with
commit 9a5131b87cac1 ("s390/boot: move sclp early buffer from fixed address
in asm to C") this is no longer required.

	Signed-off-by: Sven Schnelle <svens@linux.ibm.com>
	Reviewed-by: Heiko Carstens <hca@linux.ibm.com>
	Signed-off-by: Vasily Gorbik <gor@linux.ibm.com>
(cherry picked from commit 277c8389386e2ccb8417afe4e36f67fc5dcd735d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/s390/boot/head.S
#	arch/s390/include/asm/setup.h
#	arch/s390/kernel/machine_kexec_file.c
diff --cc arch/s390/boot/head.S
index 732bddaa7ec5,5d3fc69a505c..000000000000
--- a/arch/s390/boot/head.S
+++ b/arch/s390/boot/head.S
@@@ -365,8 -398,5 +365,13 @@@ ENTRY(startup_kdump
  	.org	COMMAND_LINE
  	.byte	"root=/dev/ram0 ro"
  	.byte	0
++<<<<<<< HEAD
 +
 +	.org	EARLY_SCCB_OFFSET
 +	.fill	4096
 +
 +	.org	HEAD_END
++=======
+ 	.org	PARMAREA+__PARMAREA_SIZE
+ SYM_DATA_END(parmarea)
++>>>>>>> 277c8389386e (s390/kexec_file: move kernel image size check)
diff --cc arch/s390/include/asm/setup.h
index 92ba15d7bfaa,121e1a8c41d7..000000000000
--- a/arch/s390/include/asm/setup.h
+++ b/arch/s390/include/asm/setup.h
@@@ -10,11 -10,7 +10,14 @@@
  #include <uapi/asm/setup.h>
  #include <linux/build_bug.h>
  
 +#define EP_OFFSET		0x10008
 +#define EP_STRING		"S390EP"
  #define PARMAREA		0x10400
++<<<<<<< HEAD
 +#define EARLY_SCCB_OFFSET	0x11000
 +#define HEAD_END		0x12000
++=======
++>>>>>>> 277c8389386e (s390/kexec_file: move kernel image size check)
  
  /*
   * Machine features detected in early.c
diff --cc arch/s390/kernel/machine_kexec_file.c
index f18ed37d72f0,55382ffde9d4..000000000000
--- a/arch/s390/kernel/machine_kexec_file.c
+++ b/arch/s390/kernel/machine_kexec_file.c
@@@ -345,25 -308,3 +346,28 @@@ int arch_kexec_apply_relocations_add(st
  	}
  	return 0;
  }
++<<<<<<< HEAD
 +
 +int arch_kimage_file_post_load_cleanup(struct kimage *image)
 +{
 +	vfree(image->arch.ipl_buf);
 +	image->arch.ipl_buf = NULL;
 +
 +	return kexec_image_post_load_cleanup_default(image);
 +}
 +
 +int arch_kexec_kernel_image_probe(struct kimage *image, void *buf,
 +				  unsigned long buf_len)
 +{
 +	/* A kernel must be at least large enough to contain head.S. During
 +	 * load memory in head.S will be accessed, e.g. to register the next
 +	 * command line. If the next kernel were smaller the current kernel
 +	 * will panic at load.
 +	 */
 +	if (buf_len < HEAD_END)
 +		return -ENOEXEC;
 +
 +	return kexec_image_probe_default(image, buf, buf_len);
 +}
++=======
++>>>>>>> 277c8389386e (s390/kexec_file: move kernel image size check)
* Unmerged path arch/s390/boot/head.S
* Unmerged path arch/s390/include/asm/setup.h
* Unmerged path arch/s390/kernel/machine_kexec_file.c
