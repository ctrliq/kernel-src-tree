esp: choose the correct inner protocol for GSO on inter address family tunnels

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Sabrina Dubroca <sd@queasysnail.net>
commit 26dbd66eab8080be51759e48280da04015221e22
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/26dbd66e.failed

Commit 23c7f8d7989e ("net: Fix esp GSO on inter address family
tunnels.") is incomplete. It passes to skb_eth_gso_segment the
protocol for the outer IP version, instead of the inner IP version, so
we end up calling inet_gso_segment on an inner IPv6 packet and
ipv6_gso_segment on an inner IPv4 packet and the packets are dropped.

This patch completes the fix by selecting the correct protocol based
on the inner mode's family.

Fixes: c35fe4106b92 ("xfrm: Add mode handlers for IPsec on layer 2")
	Signed-off-by: Sabrina Dubroca <sd@queasysnail.net>
	Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
(cherry picked from commit 26dbd66eab8080be51759e48280da04015221e22)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/ipv4/esp4_offload.c
#	net/ipv6/esp6_offload.c
diff --cc net/ipv4/esp4_offload.c
index 115fef9270ae,170152772d33..000000000000
--- a/net/ipv4/esp4_offload.c
+++ b/net/ipv4/esp4_offload.c
@@@ -112,8 -110,10 +112,15 @@@ static struct sk_buff *xfrm4_tunnel_gso
  						struct sk_buff *skb,
  						netdev_features_t features)
  {
++<<<<<<< HEAD
 +	__skb_push(skb, skb->mac_len);
 +	return skb_mac_gso_segment(skb, features);
++=======
+ 	__be16 type = x->inner_mode.family == AF_INET6 ? htons(ETH_P_IPV6)
+ 						       : htons(ETH_P_IP);
+ 
+ 	return skb_eth_gso_segment(skb, features, type);
++>>>>>>> 26dbd66eab80 (esp: choose the correct inner protocol for GSO on inter address family tunnels)
  }
  
  static struct sk_buff *xfrm4_transport_gso_segment(struct xfrm_state *x,
diff --cc net/ipv6/esp6_offload.c
index a0267b23b10f,79d43548279c..000000000000
--- a/net/ipv6/esp6_offload.c
+++ b/net/ipv6/esp6_offload.c
@@@ -146,8 -145,10 +146,15 @@@ static struct sk_buff *xfrm6_tunnel_gso
  						struct sk_buff *skb,
  						netdev_features_t features)
  {
++<<<<<<< HEAD
 +	__skb_push(skb, skb->mac_len);
 +	return skb_mac_gso_segment(skb, features);
++=======
+ 	__be16 type = x->inner_mode.family == AF_INET ? htons(ETH_P_IP)
+ 						      : htons(ETH_P_IPV6);
+ 
+ 	return skb_eth_gso_segment(skb, features, type);
++>>>>>>> 26dbd66eab80 (esp: choose the correct inner protocol for GSO on inter address family tunnels)
  }
  
  static struct sk_buff *xfrm6_transport_gso_segment(struct xfrm_state *x,
* Unmerged path net/ipv4/esp4_offload.c
* Unmerged path net/ipv6/esp6_offload.c
