dmaengine: Add support for repeating transactions

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Laurent Pinchart <laurent.pinchart@ideasonboard.com>
commit 9c8ebd8b82da89c2484594b61d66288d24983348
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/9c8ebd8b.failed

DMA engines used with displays perform 2D interleaved transfers to read
framebuffers from memory and feed the data to the display engine. As the
same framebuffer can be displayed for multiple frames, the DMA
transactions need to be repeated until a new framebuffer replaces the
current one. This feature is implemented natively by some DMA engines
that have the ability to repeat transactions and switch to a new
transaction at the end of a transfer without any race condition or frame
loss.

This patch implements support for this feature in the DMA engine API. A
new DMA_PREP_REPEAT transaction flag allows DMA clients to instruct the
DMA channel to repeat the transaction automatically until one or more
new transactions are issued on the channel (or until all active DMA
transfers are explicitly terminated with the dmaengine_terminate_*()
functions). A new DMA_REPEAT transaction type is also added for DMA
engine drivers to report their support of the DMA_PREP_REPEAT flag.

A new DMA_PREP_LOAD_EOT transaction flag is also introduced (with a
corresponding DMA_LOAD_EOT capability bit), as requested during the
review of v4. The flag instructs the DMA channel that the transaction
being queued should replace the active repeated transaction when the
latter terminates (at End Of Transaction). Not setting the flag will
result in the active repeated transaction to continue being repeated,
and the new transaction being silently ignored.

The DMA_PREP_REPEAT flag is currently supported for interleaved
transactions only. Its usage can easily be extended to cover more
transaction types simply by adding an appropriate check in the
corresponding dmaengine_prep_*() function.

	Signed-off-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
	Reviewed-by: Peter Ujfalusi <peter.ujfalusi@ti.com>
Link: https://lore.kernel.org/r/20200717013337.24122-3-laurent.pinchart@ideasonboard.com
	Signed-off-by: Vinod Koul <vkoul@kernel.org>
(cherry picked from commit 9c8ebd8b82da89c2484594b61d66288d24983348)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	Documentation/driver-api/dmaengine/provider.rst
#	include/linux/dmaengine.h
diff --cc Documentation/driver-api/dmaengine/provider.rst
index ce68315482b1,f896acccdfee..000000000000
--- a/Documentation/driver-api/dmaengine/provider.rst
+++ b/Documentation/driver-api/dmaengine/provider.rst
@@@ -239,21 -239,26 +239,44 @@@ Currently, the types available are
      want to transfer a portion of uncompressed data directly to the
      display to print it
  
++<<<<<<< HEAD
 +- DMA_COMPLETION_NO_ORDER
 +
 +  - The device does not support in order completion.
 +
 +  - The driver should return DMA_OUT_OF_ORDER for device_tx_status if
 +    the device is setting this capability.
 +
 +  - All cookie tracking and checking API should be treated as invalid if
 +    the device exports this capability.
 +
 +  - At this point, this is incompatible with polling option for dmatest.
 +
 +  - If this cap is set, the user is recommended to provide an unique
 +    identifier for each descriptor sent to the DMA device in order to
 +    properly track the completion.
++=======
+ - DMA_REPEAT
+ 
+   - The device supports repeated transfers. A repeated transfer, indicated by
+     the DMA_PREP_REPEAT transfer flag, is similar to a cyclic transfer in that
+     it gets automatically repeated when it ends, but can additionally be
+     replaced by the client.
+ 
+   - This feature is limited to interleaved transfers, this flag should thus not
+     be set if the DMA_INTERLEAVE flag isn't set. This limitation is based on
+     the current needs of DMA clients, support for additional transfer types
+     should be added in the future if and when the need arises.
+ 
+ - DMA_LOAD_EOT
+ 
+   - The device supports replacing repeated transfers at end of transfer (EOT)
+     by queuing a new transfer with the DMA_PREP_LOAD_EOT flag set.
+ 
+   - Support for replacing a currently running transfer at another point (such
+     as end of burst instead of end of transfer) will be added in the future
+     based on DMA clients needs, if and when the need arises.
++>>>>>>> 9c8ebd8b82da (dmaengine: Add support for repeating transactions)
  
  These various types will also affect how the source and destination
  addresses change over time.
diff --cc include/linux/dmaengine.h
index 157f8a058a42,328e3aca7f51..000000000000
--- a/include/linux/dmaengine.h
+++ b/include/linux/dmaengine.h
@@@ -62,7 -61,8 +62,12 @@@ enum dma_transaction_type 
  	DMA_SLAVE,
  	DMA_CYCLIC,
  	DMA_INTERLEAVE,
++<<<<<<< HEAD
 +	DMA_COMPLETION_NO_ORDER,
++=======
+ 	DMA_REPEAT,
+ 	DMA_LOAD_EOT,
++>>>>>>> 9c8ebd8b82da (dmaengine: Add support for repeating transactions)
  /* last transaction type for creation of the capabilities mask */
  	DMA_TX_TYPE_END,
  };
diff --git a/Documentation/driver-api/dmaengine/client.rst b/Documentation/driver-api/dmaengine/client.rst
index ed0ba4437d45..0e76871d543b 100644
--- a/Documentation/driver-api/dmaengine/client.rst
+++ b/Documentation/driver-api/dmaengine/client.rst
@@ -86,7 +86,9 @@ The details of these operations are:
   - interleaved_dma: This is common to Slave as well as M2M clients. For slave
     address of devices' fifo could be already known to the driver.
     Various types of operations could be expressed by setting
-    appropriate values to the 'dma_interleaved_template' members.
+    appropriate values to the 'dma_interleaved_template' members. Cyclic
+    interleaved DMA transfers are also possible if supported by the channel by
+    setting the DMA_PREP_REPEAT transfer flag.
 
   A non-NULL return of this transfer API represents a "descriptor" for
   the given transaction.
* Unmerged path Documentation/driver-api/dmaengine/provider.rst
* Unmerged path include/linux/dmaengine.h
