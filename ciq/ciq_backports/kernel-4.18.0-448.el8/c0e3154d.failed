net: tcp: use kfree_skb_reason() for tcp_v6_rcv()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Menglong Dong <imagedong@tencent.com>
commit c0e3154d9c889e1aa1af098f40301395f2e33d8a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/c0e3154d.failed

Replace kfree_skb() used in tcp_v6_rcv() with kfree_skb_reason().

	Reviewed-by: Mengen Sun <mengensun@tencent.com>
	Reviewed-by: Hao Peng <flyingpeng@tencent.com>
	Signed-off-by: Menglong Dong <imagedong@tencent.com>
	Reviewed-by: Eric Dumazet <edumazet@google.com>
	Reviewed-by: David Ahern <dsahern@kernel.org>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit c0e3154d9c889e1aa1af098f40301395f2e33d8a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/ipv6/tcp_ipv6.c
diff --cc net/ipv6/tcp_ipv6.c
index a7c28f0a0d86,0aa17073df1a..000000000000
--- a/net/ipv6/tcp_ipv6.c
+++ b/net/ipv6/tcp_ipv6.c
@@@ -1506,7 -1627,9 +1506,8 @@@ static void tcp_v6_fill_cb(struct sk_bu
  
  INDIRECT_CALLABLE_SCOPE int tcp_v6_rcv(struct sk_buff *skb)
  {
+ 	enum skb_drop_reason drop_reason;
  	int sdif = inet6_sdif(skb);
 -	int dif = inet6_iif(skb);
  	const struct tcphdr *th;
  	const struct ipv6hdr *hdr;
  	bool refcounted;
@@@ -1602,19 -1738,27 +1608,23 @@@ process
  			return 0;
  		}
  	}
 -
 -	if (static_branch_unlikely(&ip6_min_hopcount)) {
 -		/* min_hopcount can be changed concurrently from do_ipv6_setsockopt() */
 -		if (hdr->hop_limit < READ_ONCE(tcp_inet6_sk(sk)->min_hopcount)) {
 -			__NET_INC_STATS(net, LINUX_MIB_TCPMINTTLDROP);
 -			goto discard_and_relse;
 -		}
 +	if (hdr->hop_limit < inet6_sk(sk)->min_hopcount) {
 +		__NET_INC_STATS(net, LINUX_MIB_TCPMINTTLDROP);
 +		goto discard_and_relse;
  	}
  
- 	if (!xfrm6_policy_check(sk, XFRM_POLICY_IN, skb))
+ 	if (!xfrm6_policy_check(sk, XFRM_POLICY_IN, skb)) {
+ 		drop_reason = SKB_DROP_REASON_XFRM_POLICY;
  		goto discard_and_relse;
+ 	}
  
 -	if (tcp_v6_inbound_md5_hash(sk, skb, dif, sdif))
 +	if (tcp_v6_inbound_md5_hash(sk, skb))
  		goto discard_and_relse;
  
- 	if (tcp_filter(sk, skb))
+ 	if (tcp_filter(sk, skb)) {
+ 		drop_reason = SKB_DROP_REASON_SOCKET_FILTER;
  		goto discard_and_relse;
+ 	}
  	th = (const struct tcphdr *)skb->data;
  	hdr = ipv6_hdr(skb);
  	tcp_v6_fill_cb(skb, hdr, th);
@@@ -1651,6 -1797,8 +1662,11 @@@ no_tcp_socket
  
  	if (tcp_checksum_complete(skb)) {
  csum_error:
++<<<<<<< HEAD
++=======
+ 		drop_reason = SKB_DROP_REASON_TCP_CSUM;
+ 		trace_tcp_bad_csum(skb);
++>>>>>>> c0e3154d9c88 (net: tcp: use kfree_skb_reason() for tcp_v6_rcv())
  		__TCP_INC_STATS(net, TCP_MIB_CSUMERRORS);
  bad_packet:
  		__TCP_INC_STATS(net, TCP_MIB_INERRS);
* Unmerged path net/ipv6/tcp_ipv6.c
