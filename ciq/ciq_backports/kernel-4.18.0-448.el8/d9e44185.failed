ath10k: mac: fix too long lines

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Kalle Valo <quic_kvalo@quicinc.com>
commit d9e441855c64e3b4c1d83b7e82d723c12d5de3fa
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/d9e44185.failed

checkpatch warns:

drivers/net/wireless/ath/ath10k/mac.c:2696: line length of 92 exceeds 90 columns
drivers/net/wireless/ath/ath10k/mac.c:6942: line length of 94 exceeds 90 columns
drivers/net/wireless/ath/ath10k/mac.c:6948: line length of 91 exceeds 90 columns

These were introduced by commit 046d2e7c50e3 ("mac80211: prepare sta handling
for MLO support").

Compile tested only.

	Signed-off-by: Kalle Valo <quic_kvalo@quicinc.com>
Link: https://lore.kernel.org/r/20220503060415.24499-2-kvalo@kernel.org
(cherry picked from commit d9e441855c64e3b4c1d83b7e82d723c12d5de3fa)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/wireless/ath/ath10k/mac.c
diff --cc drivers/net/wireless/ath/ath10k/mac.c
index 75d7a004a115,3570a5895ea8..000000000000
--- a/drivers/net/wireless/ath/ath10k/mac.c
+++ b/drivers/net/wireless/ath/ath10k/mac.c
@@@ -2691,8 -2692,10 +2691,15 @@@ static bool ath10k_mac_sta_has_ofdm_onl
  static enum wmi_phy_mode ath10k_mac_get_phymode_vht(struct ath10k *ar,
  						    struct ieee80211_sta *sta)
  {
++<<<<<<< HEAD
 +	if (sta->bandwidth == IEEE80211_STA_RX_BW_160) {
 +		switch (sta->vht_cap.cap & IEEE80211_VHT_CAP_SUPP_CHAN_WIDTH_MASK) {
++=======
+ 	struct ieee80211_sta_vht_cap *vht_cap = &sta->deflink.vht_cap;
+ 
+ 	if (sta->deflink.bandwidth == IEEE80211_STA_RX_BW_160) {
+ 		switch (vht_cap->cap & IEEE80211_VHT_CAP_SUPP_CHAN_WIDTH_MASK) {
++>>>>>>> d9e441855c64 (ath10k: mac: fix too long lines)
  		case IEEE80211_VHT_CAP_SUPP_CHAN_WIDTH_160MHZ:
  			return MODE_11AC_VHT160;
  		case IEEE80211_VHT_CAP_SUPP_CHAN_WIDTH_160_80PLUS80MHZ:
@@@ -6925,26 -6928,29 +6932,45 @@@ static int ath10k_mac_validate_rate_mas
  					 struct ieee80211_sta *sta,
  					 u32 rate_ctrl_flag, u8 nss)
  {
++<<<<<<< HEAD
 +	if (nss > sta->rx_nss) {
++=======
+ 	struct ieee80211_sta_ht_cap *ht_cap = &sta->deflink.ht_cap;
+ 	struct ieee80211_sta_vht_cap *vht_cap = &sta->deflink.vht_cap;
+ 
+ 	if (nss > sta->deflink.rx_nss) {
++>>>>>>> d9e441855c64 (ath10k: mac: fix too long lines)
  		ath10k_warn(ar, "Invalid nss field, configured %u limit %u\n",
 -			    nss, sta->deflink.rx_nss);
 +			    nss, sta->rx_nss);
  		return -EINVAL;
  	}
  
  	if (ATH10K_HW_PREAMBLE(rate_ctrl_flag) == WMI_RATE_PREAMBLE_VHT) {
++<<<<<<< HEAD
 +		if (!sta->vht_cap.vht_supported) {
++=======
+ 		if (!vht_cap->vht_supported) {
++>>>>>>> d9e441855c64 (ath10k: mac: fix too long lines)
  			ath10k_warn(ar, "Invalid VHT rate for sta %pM\n",
  				    sta->addr);
  			return -EINVAL;
  		}
  	} else if (ATH10K_HW_PREAMBLE(rate_ctrl_flag) == WMI_RATE_PREAMBLE_HT) {
++<<<<<<< HEAD
 +		if (!sta->ht_cap.ht_supported || sta->vht_cap.vht_supported) {
++=======
+ 		if (!ht_cap->ht_supported || vht_cap->vht_supported) {
++>>>>>>> d9e441855c64 (ath10k: mac: fix too long lines)
  			ath10k_warn(ar, "Invalid HT rate for sta %pM\n",
  				    sta->addr);
  			return -EINVAL;
  		}
  	} else {
++<<<<<<< HEAD
 +		if (sta->ht_cap.ht_supported || sta->vht_cap.vht_supported)
++=======
+ 		if (ht_cap->ht_supported || vht_cap->vht_supported)
++>>>>>>> d9e441855c64 (ath10k: mac: fix too long lines)
  			return -EINVAL;
  	}
  
* Unmerged path drivers/net/wireless/ath/ath10k/mac.c
