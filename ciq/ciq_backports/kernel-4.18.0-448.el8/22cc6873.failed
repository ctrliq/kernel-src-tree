ath11k: Fix RX de-fragmentation issue on WCN6750

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Manikanta Pubbisetty <quic_mpubbise@quicinc.com>
commit 22cc687326e049fe294da118d9a067538c0066cb
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/22cc6873.failed

The offset of REO register where the RX fragment destination ring
is configured is different in WCN6750 as compared to WCN6855.
Due to this differnce in offsets, on WCN6750, fragment destination
ring will be configured incorrectly, leading to RX fragments not
getting delivered to the driver. Fix this by defining HW specific
offsets for the REO MISC CTL register.

Tested-on: WCN6750 hw1.0 AHB WLAN.MSL.1.0.1-00887-QCAMSLSWPLZ-1
Tested-on: WCN6855 hw2.0 PCI WLAN.HSP.1.1-01720.1-QCAHSPSWPL_V1_V2_SILICONZ_LITE-1
Tested-on: QCN9074 hw1.0 PCI WLAN.HK.2.5.0.1-01100-QCAHKSWPL_SILICONZ-1
Tested-on: IPQ8074 hw2.0 AHB WLAN.HK.2.4.0.1-00192-QCAHKSWPL_SILICONZ-1

	Signed-off-by: Manikanta Pubbisetty <quic_mpubbise@quicinc.com>
	Signed-off-by: Kalle Valo <quic_kvalo@quicinc.com>
Link: https://lore.kernel.org/r/20220504083900.31513-1-quic_mpubbise@quicinc.com
(cherry picked from commit 22cc687326e049fe294da118d9a067538c0066cb)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/wireless/ath/ath11k/hw.c
#	drivers/net/wireless/ath/ath11k/hw.h
diff --cc drivers/net/wireless/ath/ath11k/hw.c
index 46449a18b5cb,96db85c55585..000000000000
--- a/drivers/net/wireless/ath/ath11k/hw.c
+++ b/drivers/net/wireless/ath/ath11k/hw.c
@@@ -1932,6 -1980,12 +1932,15 @@@ const struct ath11k_hw_regs ipq8074_reg
  	/* PCIe base address */
  	.pcie_qserdes_sysclk_en_sel = 0x0,
  	.pcie_pcs_osc_dtct_config_base = 0x0,
++<<<<<<< HEAD
++=======
+ 
+ 	/* Shadow register area */
+ 	.hal_shadow_base_addr = 0x0,
+ 
+ 	/* REO misc control register, not used in IPQ8074 */
+ 	.hal_reo1_misc_ctl = 0x0,
++>>>>>>> 22cc687326e0 (ath11k: Fix RX de-fragmentation issue on WCN6750)
  };
  
  const struct ath11k_hw_regs qca6390_regs = {
@@@ -2003,6 -2065,12 +2012,15 @@@
  	/* PCIe base address */
  	.pcie_qserdes_sysclk_en_sel = 0x01e0c0ac,
  	.pcie_pcs_osc_dtct_config_base = 0x01e0c628,
++<<<<<<< HEAD
++=======
+ 
+ 	/* Shadow register area */
+ 	.hal_shadow_base_addr = 0x000008fc,
+ 
+ 	/* REO misc control register, not used in QCA6390 */
+ 	.hal_reo1_misc_ctl = 0x0,
++>>>>>>> 22cc687326e0 (ath11k: Fix RX de-fragmentation issue on WCN6750)
  };
  
  const struct ath11k_hw_regs qcn9074_regs = {
@@@ -2074,6 -2150,12 +2092,15 @@@
  	/* PCIe base address */
  	.pcie_qserdes_sysclk_en_sel = 0x01e0e0a8,
  	.pcie_pcs_osc_dtct_config_base = 0x01e0f45c,
++<<<<<<< HEAD
++=======
+ 
+ 	/* Shadow register area */
+ 	.hal_shadow_base_addr = 0x0,
+ 
+ 	/* REO misc control register, not used in QCN9074 */
+ 	.hal_reo1_misc_ctl = 0x0,
++>>>>>>> 22cc687326e0 (ath11k: Fix RX de-fragmentation issue on WCN6750)
  };
  
  const struct ath11k_hw_regs wcn6855_regs = {
@@@ -2145,6 -2235,101 +2172,104 @@@
  	/* PCIe base address */
  	.pcie_qserdes_sysclk_en_sel = 0x01e0c0ac,
  	.pcie_pcs_osc_dtct_config_base = 0x01e0c628,
++<<<<<<< HEAD
++=======
+ 
+ 	/* Shadow register area */
+ 	.hal_shadow_base_addr = 0x000008fc,
+ 
+ 	/* REO misc control register, used for fragment
+ 	 * destination ring config in WCN6855.
+ 	 */
+ 	.hal_reo1_misc_ctl = 0x00000630,
+ };
+ 
+ const struct ath11k_hw_regs wcn6750_regs = {
+ 	/* SW2TCL(x) R0 ring configuration address */
+ 	.hal_tcl1_ring_base_lsb = 0x00000694,
+ 	.hal_tcl1_ring_base_msb = 0x00000698,
+ 	.hal_tcl1_ring_id = 0x0000069c,
+ 	.hal_tcl1_ring_misc = 0x000006a4,
+ 	.hal_tcl1_ring_tp_addr_lsb = 0x000006b0,
+ 	.hal_tcl1_ring_tp_addr_msb = 0x000006b4,
+ 	.hal_tcl1_ring_consumer_int_setup_ix0 = 0x000006c4,
+ 	.hal_tcl1_ring_consumer_int_setup_ix1 = 0x000006c8,
+ 	.hal_tcl1_ring_msi1_base_lsb = 0x000006dc,
+ 	.hal_tcl1_ring_msi1_base_msb = 0x000006e0,
+ 	.hal_tcl1_ring_msi1_data = 0x000006e4,
+ 	.hal_tcl2_ring_base_lsb = 0x000006ec,
+ 	.hal_tcl_ring_base_lsb = 0x0000079c,
+ 
+ 	/* TCL STATUS ring address */
+ 	.hal_tcl_status_ring_base_lsb = 0x000008a4,
+ 
+ 	/* REO2SW(x) R0 ring configuration address */
+ 	.hal_reo1_ring_base_lsb = 0x000001ec,
+ 	.hal_reo1_ring_base_msb = 0x000001f0,
+ 	.hal_reo1_ring_id = 0x000001f4,
+ 	.hal_reo1_ring_misc = 0x000001fc,
+ 	.hal_reo1_ring_hp_addr_lsb = 0x00000200,
+ 	.hal_reo1_ring_hp_addr_msb = 0x00000204,
+ 	.hal_reo1_ring_producer_int_setup = 0x00000210,
+ 	.hal_reo1_ring_msi1_base_lsb = 0x00000234,
+ 	.hal_reo1_ring_msi1_base_msb = 0x00000238,
+ 	.hal_reo1_ring_msi1_data = 0x0000023c,
+ 	.hal_reo2_ring_base_lsb = 0x00000244,
+ 	.hal_reo1_aging_thresh_ix_0 = 0x00000564,
+ 	.hal_reo1_aging_thresh_ix_1 = 0x00000568,
+ 	.hal_reo1_aging_thresh_ix_2 = 0x0000056c,
+ 	.hal_reo1_aging_thresh_ix_3 = 0x00000570,
+ 
+ 	/* REO2SW(x) R2 ring pointers (head/tail) address */
+ 	.hal_reo1_ring_hp = 0x00003028,
+ 	.hal_reo1_ring_tp = 0x0000302c,
+ 	.hal_reo2_ring_hp = 0x00003030,
+ 
+ 	/* REO2TCL R0 ring configuration address */
+ 	.hal_reo_tcl_ring_base_lsb = 0x000003fc,
+ 	.hal_reo_tcl_ring_hp = 0x00003058,
+ 
+ 	/* REO CMD ring address */
+ 	.hal_reo_cmd_ring_base_lsb = 0x000000e4,
+ 	.hal_reo_cmd_ring_hp = 0x00003010,
+ 
+ 	/* REO status address */
+ 	.hal_reo_status_ring_base_lsb = 0x00000504,
+ 	.hal_reo_status_hp = 0x00003070,
+ 
+ 	/* SW2REO ring address */
+ 	.hal_sw2reo_ring_base_lsb = 0x0000013c,
+ 	.hal_sw2reo_ring_hp = 0x00003018,
+ 
+ 	/* WCSS relative address */
+ 	.hal_seq_wcss_umac_ce0_src_reg = 0x01b80000,
+ 	.hal_seq_wcss_umac_ce0_dst_reg = 0x01b81000,
+ 	.hal_seq_wcss_umac_ce1_src_reg = 0x01b82000,
+ 	.hal_seq_wcss_umac_ce1_dst_reg = 0x01b83000,
+ 
+ 	/* WBM Idle address */
+ 	.hal_wbm_idle_link_ring_base_lsb = 0x00000874,
+ 	.hal_wbm_idle_link_ring_misc = 0x00000884,
+ 
+ 	/* SW2WBM release address */
+ 	.hal_wbm_release_ring_base_lsb = 0x000001ec,
+ 
+ 	/* WBM2SW release address */
+ 	.hal_wbm0_release_ring_base_lsb = 0x00000924,
+ 	.hal_wbm1_release_ring_base_lsb = 0x0000097c,
+ 
+ 	/* PCIe base address */
+ 	.pcie_qserdes_sysclk_en_sel = 0x0,
+ 	.pcie_pcs_osc_dtct_config_base = 0x0,
+ 
+ 	/* Shadow register area */
+ 	.hal_shadow_base_addr = 0x00000504,
+ 
+ 	/* REO misc control register, used for fragment
+ 	 * destination ring config in WCN6750.
+ 	 */
+ 	.hal_reo1_misc_ctl = 0x000005d8,
++>>>>>>> 22cc687326e0 (ath11k: Fix RX de-fragmentation issue on WCN6750)
  };
  
  const struct ath11k_hw_hal_params ath11k_hw_hal_params_ipq8074 = {
diff --cc drivers/net/wireless/ath/ath11k/hw.h
index 29546d8de738,3a2abde63489..000000000000
--- a/drivers/net/wireless/ath/ath11k/hw.h
+++ b/drivers/net/wireless/ath/ath11k/hw.h
@@@ -362,6 -377,9 +362,12 @@@ struct ath11k_hw_regs 
  
  	u32 pcie_qserdes_sysclk_en_sel;
  	u32 pcie_pcs_osc_dtct_config_base;
++<<<<<<< HEAD
++=======
+ 
+ 	u32 hal_shadow_base_addr;
+ 	u32 hal_reo1_misc_ctl;
++>>>>>>> 22cc687326e0 (ath11k: Fix RX de-fragmentation issue on WCN6750)
  };
  
  extern const struct ath11k_hw_regs ipq8074_regs;
diff --git a/drivers/net/wireless/ath/ath11k/hal.h b/drivers/net/wireless/ath/ath11k/hal.h
index a7d9b4c551ad..559cf6a0b87a 100644
--- a/drivers/net/wireless/ath/ath11k/hal.h
+++ b/drivers/net/wireless/ath/ath11k/hal.h
@@ -120,7 +120,7 @@ struct ath11k_base;
 #define HAL_REO1_DEST_RING_CTRL_IX_1		0x00000008
 #define HAL_REO1_DEST_RING_CTRL_IX_2		0x0000000c
 #define HAL_REO1_DEST_RING_CTRL_IX_3		0x00000010
-#define HAL_REO1_MISC_CTL			0x00000630
+#define HAL_REO1_MISC_CTL(ab)			ab->hw_params.regs->hal_reo1_misc_ctl
 #define HAL_REO1_RING_BASE_LSB(ab)		ab->hw_params.regs->hal_reo1_ring_base_lsb
 #define HAL_REO1_RING_BASE_MSB(ab)		ab->hw_params.regs->hal_reo1_ring_base_msb
 #define HAL_REO1_RING_ID(ab)			ab->hw_params.regs->hal_reo1_ring_id
* Unmerged path drivers/net/wireless/ath/ath11k/hw.c
* Unmerged path drivers/net/wireless/ath/ath11k/hw.h
