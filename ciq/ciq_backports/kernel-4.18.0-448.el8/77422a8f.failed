net/mlx5e: CT: Add ct driver counters

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Saeed Mahameed <saeedm@nvidia.com>
commit 77422a8f6f61be1ef64978e9a94f40fed0d1634e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/77422a8f.failed

Connection offload is translated to multiple rules over several
hardware flow tables. Unhandled end-cases may cause a hardware
resource leak causing multiple system symptoms such as a host
memory leak, decreased performance and other scale related issues.

Export the current number of firmware FTEs related to the CT table
as a debugfs counter. Also add a dropped packets counter to help
debug packets dropped on restore failure.

To show the offloaded count:
cat /sys/kernel/debug/mlx5/<PCI>/ct_nic/offloaded

To show the dropped count:
cat /sys/kernel/debug/mlx5/<PCI>/ct_nic/rx_dropped

	Signed-off-by: Paul Blakey <paulb@mellanox.com>
	Signed-off-by: Roi Dayan <paulb@mellanox.com>
	Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
	Reviewed-by: Oz Shlomo <ozsh@nvidia.com>
	Reviewed-by: Paul Blakey <paulb@nvidia.com>
(cherry picked from commit 77422a8f6f61be1ef64978e9a94f40fed0d1634e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en/tc_ct.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en/tc_ct.c
index 7dfa645682c8,bceea7a1589e..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en/tc_ct.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en/tc_ct.c
@@@ -14,6 -14,8 +14,11 @@@
  #include <linux/workqueue.h>
  #include <linux/refcount.h>
  #include <linux/xarray.h>
++<<<<<<< HEAD
++=======
+ #include <linux/if_macvlan.h>
+ #include <linux/debugfs.h>
++>>>>>>> 77422a8f6f61 (net/mlx5e: CT: Add ct driver counters)
  
  #include "lib/fs_chains.h"
  #include "en/tc_ct.h"
@@@ -61,7 -73,11 +75,9 @@@ struct mlx5_tc_ct_priv 
  	struct mapping_ctx *labels_mapping;
  	enum mlx5_flow_namespace_type ns_type;
  	struct mlx5_fs_chains *chains;
 -	struct mlx5_ct_fs *fs;
 -	struct mlx5_ct_fs_ops *fs_ops;
  	spinlock_t ht_lock; /* protects ft entries */
+ 
+ 	struct mlx5_tc_ct_debugfs debugfs;
  };
  
  struct mlx5_ct_flow {
@@@ -2162,8 -2173,15 +2204,16 @@@ mlx5_tc_ct_init(struct mlx5e_priv *priv
  	if (rhashtable_init(&ct_priv->ct_tuples_nat_ht, &tuples_nat_ht_params))
  		goto err_ct_tuples_nat_ht;
  
++<<<<<<< HEAD
++=======
+ 	err = mlx5_tc_ct_fs_init(ct_priv);
+ 	if (err)
+ 		goto err_init_fs;
+ 
+ 	mlx5_ct_tc_create_dbgfs(ct_priv);
++>>>>>>> 77422a8f6f61 (net/mlx5e: CT: Add ct driver counters)
  	return ct_priv;
  
 -err_init_fs:
 -	rhashtable_destroy(&ct_priv->ct_tuples_nat_ht);
  err_ct_tuples_nat_ht:
  	rhashtable_destroy(&ct_priv->ct_tuples_ht);
  err_ct_tuples_ht:
@@@ -2192,8 -2210,12 +2242,9 @@@ mlx5_tc_ct_clean(struct mlx5_tc_ct_pri
  	if (!ct_priv)
  		return;
  
+ 	mlx5_ct_tc_remove_dbgfs(ct_priv);
  	chains = ct_priv->chains;
  
 -	ct_priv->fs_ops->destroy(ct_priv->fs);
 -	kfree(ct_priv->fs);
 -
  	mlx5_chains_destroy_global_table(chains, ct_priv->ct_nat);
  	mlx5_chains_destroy_global_table(chains, ct_priv->ct);
  	mapping_destroy(ct_priv->zone_mapping);
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en/tc_ct.c
