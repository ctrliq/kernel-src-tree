x86/bugs: Enable STIBP for IBPB mitigated RETBleed

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Kim Phillips <kim.phillips@amd.com>
commit e6cfcdda8cbe81eaf821c897369a65fec987b404
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/e6cfcdda.failed

AMD's "Technical Guidance for Mitigating Branch Type Confusion,
Rev. 1.0 2022-07-12" whitepaper, under section 6.1.2 "IBPB On
Privileged Mode Entry / SMT Safety" says:

  Similar to the Jmp2Ret mitigation, if the code on the sibling thread
  cannot be trusted, software should set STIBP to 1 or disable SMT to
  ensure SMT safety when using this mitigation.

So, like already being done for retbleed=unret, and now also for
retbleed=ibpb, force STIBP on machines that have it, and report its SMT
vulnerability status accordingly.

 [ bp: Remove the "we" and remove "[AMD]" applicability parameter which
   doesn't work here. ]

Fixes: 3ebc17006888 ("x86/bugs: Add retbleed=ibpb")
	Signed-off-by: Kim Phillips <kim.phillips@amd.com>
	Signed-off-by: Borislav Petkov <bp@suse.de>
	Cc: stable@vger.kernel.org # 5.10, 5.15, 5.19
Link: https://bugzilla.kernel.org/show_bug.cgi?id=206537
Link: https://lore.kernel.org/r/20220804192201.439596-1-kim.phillips@amd.com
(cherry picked from commit e6cfcdda8cbe81eaf821c897369a65fec987b404)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	Documentation/admin-guide/kernel-parameters.txt
#	arch/x86/kernel/cpu/bugs.c
diff --cc Documentation/admin-guide/kernel-parameters.txt
index 58012c7c2aa7,523b19624026..000000000000
--- a/Documentation/admin-guide/kernel-parameters.txt
+++ b/Documentation/admin-guide/kernel-parameters.txt
@@@ -4537,17 -5203,45 +4537,57 @@@
  			Useful for devices that are detected asynchronously
  			(e.g. USB and MMC devices).
  
 +	hibernate=	[HIBERNATION]
 +		noresume	Don't check if there's a hibernation image
 +				present during boot.
 +		nocompress	Don't compress/decompress hibernation images.
 +		no		Disable hibernation and resume.
 +		protect_image	Turn on image protection during restoration
 +				(that will set all pages holding image data
 +				during restoration read-only).
 +
  	retain_initrd	[RAM] Keep initrd memory after extraction
  
++<<<<<<< HEAD
++=======
+ 	retbleed=	[X86] Control mitigation of RETBleed (Arbitrary
+ 			Speculative Code Execution with Return Instructions)
+ 			vulnerability.
+ 
+ 			AMD-based UNRET and IBPB mitigations alone do not stop
+ 			sibling threads from influencing the predictions of other
+ 			sibling threads. For that reason, STIBP is used on pro-
+ 			cessors that support it, and mitigate SMT on processors
+ 			that don't.
+ 
+ 			off          - no mitigation
+ 			auto         - automatically select a migitation
+ 			auto,nosmt   - automatically select a mitigation,
+ 				       disabling SMT if necessary for
+ 				       the full mitigation (only on Zen1
+ 				       and older without STIBP).
+ 			ibpb         - On AMD, mitigate short speculation
+ 				       windows on basic block boundaries too.
+ 				       Safe, highest perf impact. It also
+ 				       enables STIBP if present. Not suitable
+ 				       on Intel.
+ 			ibpb,nosmt   - Like "ibpb" above but will disable SMT
+ 				       when STIBP is not available. This is
+ 				       the alternative for systems which do not
+ 				       have STIBP.
+ 			unret        - Force enable untrained return thunks,
+ 				       only effective on AMD f15h-f17h based
+ 				       systems.
+ 			unret,nosmt  - Like unret, but will disable SMT when STIBP
+ 				       is not available. This is the alternative for
+ 				       systems which do not have STIBP.
+ 
+ 			Selecting 'auto' will choose a mitigation method at run
+ 			time according to the CPU.
+ 
+ 			Not specifying this option is equivalent to retbleed=auto.
+ 
++>>>>>>> e6cfcdda8cbe (x86/bugs: Enable STIBP for IBPB mitigated RETBleed)
  	rfkill.default_state=
  		0	"airplane mode".  All wifi, bluetooth, wimax, gps, fm,
  			etc. communication is blocked by default.
diff --cc arch/x86/kernel/cpu/bugs.c
index 951579a17911,d50686ca5870..000000000000
--- a/arch/x86/kernel/cpu/bugs.c
+++ b/arch/x86/kernel/cpu/bugs.c
@@@ -111,18 -143,23 +111,33 @@@ void __init check_bugs(void
  	/* Select the proper CPU mitigations before patching alternatives: */
  	spectre_v1_select_mitigation();
  	spectre_v2_select_mitigation();
++<<<<<<< HEAD
 +	spec_ctrl_cpu_init();
++=======
+ 	/*
+ 	 * retbleed_select_mitigation() relies on the state set by
+ 	 * spectre_v2_select_mitigation(); specifically it wants to know about
+ 	 * spectre_v2=ibrs.
+ 	 */
+ 	retbleed_select_mitigation();
+ 	/*
+ 	 * spectre_v2_user_select_mitigation() relies on the state set by
+ 	 * retbleed_select_mitigation(); specifically the STIBP selection is
+ 	 * forced for UNRET or IBPB.
+ 	 */
+ 	spectre_v2_user_select_mitigation();
++>>>>>>> e6cfcdda8cbe (x86/bugs: Enable STIBP for IBPB mitigated RETBleed)
  	ssb_select_mitigation();
  	l1tf_select_mitigation();
 -	md_clear_select_mitigation();
 +	mds_select_mitigation();
 +	taa_select_mitigation();
  	srbds_select_mitigation();
 -	l1d_flush_select_mitigation();
 +
 +	/*
 +	 * As MDS and TAA mitigations are inter-related, update and print their
 +	 * mitigation after TAA mitigation selection is done.
 +	 */
 +	md_clear_update_mitigation();
  
  	arch_smt_update();
  
@@@ -840,6 -1179,14 +855,17 @@@ spectre_v2_user_select_mitigation(enum 
  	    boot_cpu_has(X86_FEATURE_AMD_STIBP_ALWAYS_ON))
  		mode = SPECTRE_V2_USER_STRICT_PREFERRED;
  
++<<<<<<< HEAD
++=======
+ 	if (retbleed_mitigation == RETBLEED_MITIGATION_UNRET ||
+ 	    retbleed_mitigation == RETBLEED_MITIGATION_IBPB) {
+ 		if (mode != SPECTRE_V2_USER_STRICT &&
+ 		    mode != SPECTRE_V2_USER_STRICT_PREFERRED)
+ 			pr_info("Selecting STIBP always-on mode to complement retbleed mitigation\n");
+ 		mode = SPECTRE_V2_USER_STRICT_PREFERRED;
+ 	}
+ 
++>>>>>>> e6cfcdda8cbe (x86/bugs: Enable STIBP for IBPB mitigated RETBleed)
  	spectre_v2_user_stibp = mode;
  
  set_mode:
@@@ -1873,6 -2319,25 +1899,28 @@@ static ssize_t srbds_show_state(char *b
  	return sprintf(buf, "%s\n", srbds_strings[srbds_mitigation]);
  }
  
++<<<<<<< HEAD
++=======
+ static ssize_t retbleed_show_state(char *buf)
+ {
+ 	if (retbleed_mitigation == RETBLEED_MITIGATION_UNRET ||
+ 	    retbleed_mitigation == RETBLEED_MITIGATION_IBPB) {
+ 	    if (boot_cpu_data.x86_vendor != X86_VENDOR_AMD &&
+ 		boot_cpu_data.x86_vendor != X86_VENDOR_HYGON)
+ 		    return sprintf(buf, "Vulnerable: untrained return thunk / IBPB on non-AMD based uarch\n");
+ 
+ 	    return sprintf(buf, "%s; SMT %s\n",
+ 			   retbleed_strings[retbleed_mitigation],
+ 			   !sched_smt_active() ? "disabled" :
+ 			   spectre_v2_user_stibp == SPECTRE_V2_USER_STRICT ||
+ 			   spectre_v2_user_stibp == SPECTRE_V2_USER_STRICT_PREFERRED ?
+ 			   "enabled with STIBP protection" : "vulnerable");
+ 	}
+ 
+ 	return sprintf(buf, "%s\n", retbleed_strings[retbleed_mitigation]);
+ }
+ 
++>>>>>>> e6cfcdda8cbe (x86/bugs: Enable STIBP for IBPB mitigated RETBleed)
  static ssize_t cpu_show_common(struct device *dev, struct device_attribute *attr,
  			       char *buf, unsigned int bug)
  {
* Unmerged path Documentation/admin-guide/kernel-parameters.txt
* Unmerged path arch/x86/kernel/cpu/bugs.c
