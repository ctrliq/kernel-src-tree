ice: switch: use a struct to pass packet template params

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Alexander Lobakin <alexandr.lobakin@intel.com>
commit 1b699f81dba78c724f6f94b02f01e216b64bf88b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/1b699f81.failed

ice_find_dummy_packet() contains a lot of boilerplate code and a
nice room for copy-paste mistakes.
Instead of passing 3 separate pointers back and forth to get packet
template (dummy) params, directly return a structure containing
them. Then, use a macro to compose compound literals and avoid code
duplication on return path.
Now, dummy packet type/name is needed only once to return a full
correct triple pkt-pkt_len-offsets, and those are all one-liners.
dummy_ipv4_gtpu_ipv4_packet_offsets is just moved around and renamed
(as well as dummy_ipv6_gtp_packet_offsets) with no function changes.

	Signed-off-by: Alexander Lobakin <alexandr.lobakin@intel.com>
	Reviewed-by: Michal Swiatkowski <michal.swiatkowski@linux.intel.com>
	Tested-by: Marcin Szycik <marcin.szycik@linux.intel.com>
	Tested-by: Sandeep Penigalapati <sandeep.penigalapati@intel.com>
	Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
(cherry picked from commit 1b699f81dba78c724f6f94b02f01e216b64bf88b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/intel/ice/ice_switch.c
diff --cc drivers/net/ethernet/intel/ice/ice_switch.c
index 7b15835f7479,4697eb8b4c66..000000000000
--- a/drivers/net/ethernet/intel/ice/ice_switch.c
+++ b/drivers/net/ethernet/intel/ice/ice_switch.c
@@@ -5472,29 -5556,17 +5483,29 @@@ ice_find_dummy_packet(struct ice_adv_lk
  	if (tun_type == ICE_SW_TUN_GTPU) {
  		if (outer_ipv6) {
  			if (gtp_no_pay) {
- 				*pkt = dummy_ipv6_gtp_packet;
- 				*pkt_len = sizeof(dummy_ipv6_gtp_packet);
- 				*offsets = dummy_ipv6_gtp_no_pay_packet_offsets;
+ 				return ICE_PKT_PROFILE(ipv6_gtp);
  			} else if (inner_ipv6) {
- 				if (inner_udp) {
- 					*pkt = dummy_ipv6_gtpu_ipv6_udp_packet;
- 					*pkt_len = sizeof(dummy_ipv6_gtpu_ipv6_udp_packet);
- 					*offsets = dummy_ipv6_gtpu_ipv6_udp_packet_offsets;
- 				} else {
- 					*pkt = dummy_ipv6_gtpu_ipv6_tcp_packet;
- 					*pkt_len = sizeof(dummy_ipv6_gtpu_ipv6_tcp_packet);
- 					*offsets = dummy_ipv6_gtpu_ipv6_tcp_packet_offsets;
- 				}
+ 				if (inner_udp)
+ 					return ICE_PKT_PROFILE(ipv6_gtpu_ipv6_udp);
+ 				else
+ 					return ICE_PKT_PROFILE(ipv6_gtpu_ipv6_tcp);
  			} else {
++<<<<<<< HEAD
 +				if (inner_udp) {
 +					*pkt = dummy_ipv6_gtpu_ipv4_udp_packet;
 +					*pkt_len = sizeof(dummy_ipv6_gtpu_ipv4_udp_packet);
 +					*offsets = dummy_ipv6_gtpu_ipv4_udp_packet_offsets;
 +				} else {
 +					*pkt = dummy_ipv6_gtpu_ipv4_tcp_packet;
 +				*pkt_len = sizeof(dummy_ipv6_gtpu_ipv4_tcp_packet);
 +					*offsets = dummy_ipv6_gtpu_ipv4_tcp_packet_offsets;
 +				}
++=======
+ 				if (inner_udp)
+ 					return ICE_PKT_PROFILE(ipv6_gtpu_ipv4_udp);
+ 				else
+ 					return ICE_PKT_PROFILE(ipv6_gtpu_ipv4_tcp);
++>>>>>>> 1b699f81dba7 (ice: switch: use a struct to pass packet template params)
  			}
  		} else {
  			if (gtp_no_pay) {
* Unmerged path drivers/net/ethernet/intel/ice/ice_switch.c
