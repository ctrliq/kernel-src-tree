ice: switch: use convenience macros to declare dummy pkt templates

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Alexander Lobakin <alexandr.lobakin@intel.com>
commit 07a28842bb4f65e66aa297a031a57dec4828d6a0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/07a28842.failed

Declarations of dummy/template packet headers and offsets can be
minified to improve readability and simplify adding new templates.
Move all the repetitive constructions into two macros and let them
do the name and type expansions.
Linewrap removal is yet another positive side effect.

	Signed-off-by: Alexander Lobakin <alexandr.lobakin@intel.com>
	Reviewed-by: Michal Swiatkowski <michal.swiatkowski@linux.intel.com>
	Tested-by: Marcin Szycik <marcin.szycik@linux.intel.com>
	Tested-by: Sandeep Penigalapati <sandeep.penigalapati@intel.com>
	Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
(cherry picked from commit 07a28842bb4f65e66aa297a031a57dec4828d6a0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/intel/ice/ice_switch.c
diff --cc drivers/net/ethernet/intel/ice/ice_switch.c
index 7b15835f7479,cde9e480ea89..000000000000
--- a/drivers/net/ethernet/intel/ice/ice_switch.c
+++ b/drivers/net/ethernet/intel/ice/ice_switch.c
@@@ -35,7 -35,28 +35,32 @@@ struct ice_dummy_pkt_offsets 
  	u16 offset; /* ICE_PROTOCOL_LAST indicates end of list */
  };
  
++<<<<<<< HEAD
 +static const struct ice_dummy_pkt_offsets dummy_gre_tcp_packet_offsets[] = {
++=======
+ struct ice_dummy_pkt_profile {
+ 	const struct ice_dummy_pkt_offsets *offsets;
+ 	const u8 *pkt;
+ 	u16 pkt_len;
+ };
+ 
+ #define ICE_DECLARE_PKT_OFFSETS(type)					\
+ 	static const struct ice_dummy_pkt_offsets			\
+ 	ice_dummy_##type##_packet_offsets[]
+ 
+ #define ICE_DECLARE_PKT_TEMPLATE(type)					\
+ 	static const u8 ice_dummy_##type##_packet[]
+ 
+ #define ICE_PKT_PROFILE(type) ({					\
+ 	(struct ice_dummy_pkt_profile){					\
+ 		.pkt		= ice_dummy_##type##_packet,		\
+ 		.pkt_len	= sizeof(ice_dummy_##type##_packet),	\
+ 		.offsets	= ice_dummy_##type##_packet_offsets,	\
+ 	};								\
+ })
+ 
+ ICE_DECLARE_PKT_OFFSETS(gre_tcp) = {
++>>>>>>> 07a28842bb4f (ice: switch: use convenience macros to declare dummy pkt templates)
  	{ ICE_MAC_OFOS,		0 },
  	{ ICE_ETYPE_OL,		12 },
  	{ ICE_IPV4_OFOS,	14 },
@@@ -1141,7 -1148,15 +1152,19 @@@ ICE_DECLARE_PKT_TEMPLATE(ipv6_gtpu_ipv6
  	0x00, 0x00, /* 2 bytes for 4 byte alignment */
  };
  
++<<<<<<< HEAD
 +static const u8 dummy_ipv4_gtpu_ipv4_packet[] = {
++=======
+ ICE_DECLARE_PKT_OFFSETS(ipv4_gtpu_ipv4) = {
+ 	{ ICE_MAC_OFOS,		0 },
+ 	{ ICE_IPV4_OFOS,	14 },
+ 	{ ICE_UDP_OF,		34 },
+ 	{ ICE_GTP_NO_PAY,	42 },
+ 	{ ICE_PROTOCOL_LAST,	0 },
+ };
+ 
+ ICE_DECLARE_PKT_TEMPLATE(ipv4_gtpu_ipv4) = {
++>>>>>>> 07a28842bb4f (ice: switch: use convenience macros to declare dummy pkt templates)
  	0x00, 0x00, 0x00, 0x00, /* ICE_MAC_OFOS 0 */
  	0x00, 0x00, 0x00, 0x00,
  	0x00, 0x00, 0x00, 0x00,
@@@ -1171,17 -1186,7 +1194,21 @@@
  	0x00, 0x00,
  };
  
++<<<<<<< HEAD
 +static const
 +struct ice_dummy_pkt_offsets dummy_ipv4_gtp_no_pay_packet_offsets[] = {
 +	{ ICE_MAC_OFOS,		0 },
 +	{ ICE_IPV4_OFOS,	14 },
 +	{ ICE_UDP_OF,		34 },
 +	{ ICE_GTP_NO_PAY,	42 },
 +	{ ICE_PROTOCOL_LAST,	0 },
 +};
 +
 +static const
 +struct ice_dummy_pkt_offsets dummy_ipv6_gtp_no_pay_packet_offsets[] = {
++=======
+ ICE_DECLARE_PKT_OFFSETS(ipv6_gtp) = {
++>>>>>>> 07a28842bb4f (ice: switch: use convenience macros to declare dummy pkt templates)
  	{ ICE_MAC_OFOS,		0 },
  	{ ICE_IPV6_OFOS,	14 },
  	{ ICE_UDP_OF,		54 },
* Unmerged path drivers/net/ethernet/intel/ice/ice_switch.c
