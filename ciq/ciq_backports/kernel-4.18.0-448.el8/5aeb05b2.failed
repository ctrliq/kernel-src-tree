software node: balance refcount for managed software nodes

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Laurentiu Tudor <laurentiu.tudor@nxp.com>
commit 5aeb05b27f81269a2bf2e15eab9fc0f9a400d3a8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/5aeb05b2.failed

software_node_notify(), on KOBJ_REMOVE drops the refcount twice on managed
software nodes, thus leading to underflow errors. Balance the refcount by
bumping it in the device_create_managed_software_node() function.

The error [1] was encountered after adding a .shutdown() op to our
fsl-mc-bus driver.

[1]
pc : refcount_warn_saturate+0xf8/0x150
lr : refcount_warn_saturate+0xf8/0x150
sp : ffff80001009b920
x29: ffff80001009b920 x28: ffff1a2420318000 x27: 0000000000000000
x26: ffffccac15e7a038 x25: 0000000000000008 x24: ffffccac168e0030
x23: ffff1a2428a82000 x22: 0000000000080000 x21: ffff1a24287b5000
x20: 0000000000000001 x19: ffff1a24261f4400 x18: ffffffffffffffff
x17: 6f72645f726f7272 x16: 0000000000000000 x15: ffff80009009b607
x14: 0000000000000000 x13: ffffccac16602670 x12: 0000000000000a17
x11: 000000000000035d x10: ffffccac16602670 x9 : ffffccac16602670
x8 : 00000000ffffefff x7 : ffffccac1665a670 x6 : ffffccac1665a670
x5 : 0000000000000000 x4 : 0000000000000000 x3 : 00000000ffffffff
x2 : 0000000000000000 x1 : 0000000000000000 x0 : ffff1a2420318000
Call trace:
 refcount_warn_saturate+0xf8/0x150
 kobject_put+0x10c/0x120
 software_node_notify+0xd8/0x140
 device_platform_notify+0x4c/0xb4
 device_del+0x188/0x424
 fsl_mc_device_remove+0x2c/0x4c
 rebofind sp.c__fsl_mc_device_remove+0x14/0x2c
 device_for_each_child+0x5c/0xac
 dprc_remove+0x9c/0xc0
 fsl_mc_driver_remove+0x28/0x64
 __device_release_driver+0x188/0x22c
 device_release_driver+0x30/0x50
 bus_remove_device+0x128/0x134
 device_del+0x16c/0x424
 fsl_mc_bus_remove+0x8c/0x114
 fsl_mc_bus_shutdown+0x14/0x20
 platform_shutdown+0x28/0x40
 device_shutdown+0x15c/0x330
 __do_sys_reboot+0x218/0x2a0
 __arm64_sys_reboot+0x28/0x34
 invoke_syscall+0x48/0x114
 el0_svc_common+0x40/0xdc
 do_el0_svc+0x2c/0x94
 el0_svc+0x2c/0x54
 el0t_64_sync_handler+0xa8/0x12c
 el0t_64_sync+0x198/0x19c
---[ end trace 32eb1c71c7d86821 ]---

Fixes: 151f6ff78cdf ("software node: Provide replacement for device_add_properties()")
	Reported-by: Jon Nettleton <jon@solid-run.com>
	Suggested-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
	Reviewed-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
	Signed-off-by: Laurentiu Tudor <laurentiu.tudor@nxp.com>
	Cc: 5.12+ <stable@vger.kernel.org> # 5.12+
[ rjw: Fix up the software_node_notify() invocation ]
	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
(cherry picked from commit 5aeb05b27f81269a2bf2e15eab9fc0f9a400d3a8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/base/swnode.c
diff --cc drivers/base/swnode.c
index 4ea9e9108d46,c46f6a8e14d2..000000000000
--- a/drivers/base/swnode.c
+++ b/drivers/base/swnode.c
@@@ -1120,6 -1083,46 +1120,49 @@@ void device_remove_software_node(struc
  }
  EXPORT_SYMBOL_GPL(device_remove_software_node);
  
++<<<<<<< HEAD
++=======
+ /**
+  * device_create_managed_software_node - Create a software node for a device
+  * @dev: The device the software node is assigned to.
+  * @properties: Device properties for the software node.
+  * @parent: Parent of the software node.
+  *
+  * Creates a software node as a managed resource for @dev, which means the
+  * lifetime of the newly created software node is tied to the lifetime of @dev.
+  * Software nodes created with this function should not be reused or shared
+  * because of that. The function takes a deep copy of @properties for the
+  * software node.
+  *
+  * Since the new software node is assigned directly to @dev, and since it should
+  * not be shared, it is not returned to the caller. The function returns 0 on
+  * success, and errno in case of an error.
+  */
+ int device_create_managed_software_node(struct device *dev,
+ 					const struct property_entry *properties,
+ 					const struct software_node *parent)
+ {
+ 	struct fwnode_handle *p = software_node_fwnode(parent);
+ 	struct fwnode_handle *fwnode;
+ 
+ 	if (parent && !p)
+ 		return -EINVAL;
+ 
+ 	fwnode = fwnode_create_software_node(properties, p);
+ 	if (IS_ERR(fwnode))
+ 		return PTR_ERR(fwnode);
+ 
+ 	to_swnode(fwnode)->managed = true;
+ 	set_secondary_fwnode(dev, fwnode);
+ 
+ 	if (device_is_registered(dev))
+ 		software_node_notify(dev);
+ 
+ 	return 0;
+ }
+ EXPORT_SYMBOL_GPL(device_create_managed_software_node);
+ 
++>>>>>>> 5aeb05b27f81 (software node: balance refcount for managed software nodes)
  void software_node_notify(struct device *dev)
  {
  	struct swnode *swnode;
* Unmerged path drivers/base/swnode.c
