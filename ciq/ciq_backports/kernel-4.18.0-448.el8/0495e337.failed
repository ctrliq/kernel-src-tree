mm/slab_common: Deleting kobject in kmem_cache_destroy() without holding slab_mutex/cpu_hotplug_lock

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Waiman Long <longman@redhat.com>
commit 0495e337b7039191dfce6e03f5f830454b1fae6b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/0495e337.failed

A circular locking problem is reported by lockdep due to the following
circular locking dependency.

  +--> cpu_hotplug_lock --> slab_mutex --> kn->active --+
  |                                                     |
  +-----------------------------------------------------+

The forward cpu_hotplug_lock ==> slab_mutex ==> kn->active dependency
happens in

  kmem_cache_destroy():	cpus_read_lock(); mutex_lock(&slab_mutex);
  ==> sysfs_slab_unlink()
      ==> kobject_del()
          ==> kernfs_remove()
	      ==> __kernfs_remove()
	          ==> kernfs_drain(): rwsem_acquire(&kn->dep_map, ...);

The backward kn->active ==> cpu_hotplug_lock dependency happens in

  kernfs_fop_write_iter(): kernfs_get_active();
  ==> slab_attr_store()
      ==> cpu_partial_store()
          ==> flush_all(): cpus_read_lock()

One way to break this circular locking chain is to avoid holding
cpu_hotplug_lock and slab_mutex while deleting the kobject in
sysfs_slab_unlink() which should be equivalent to doing a write_lock
and write_unlock pair of the kn->active virtual lock.

Since the kobject structures are not protected by slab_mutex or the
cpu_hotplug_lock, we can certainly release those locks before doing
the delete operation.

Move sysfs_slab_unlink() and sysfs_slab_release() to the newly
created kmem_cache_release() and call it outside the slab_mutex &
cpu_hotplug_lock critical sections. There will be a slight delay
in the deletion of sysfs files if kmem_cache_release() is called
indirectly from a work function.

Fixes: 5a836bf6b09f ("mm: slub: move flush_cpu_slab() invocations __free_slab() invocations out of IRQ context")
	Signed-off-by: Waiman Long <longman@redhat.com>
	Reviewed-by: Hyeonggon Yoo <42.hyeyoo@gmail.com>
	Reviewed-by: Roman Gushchin <roman.gushchin@linux.dev>
	Acked-by: David Rientjes <rientjes@google.com>
Link: https://lore.kernel.org/all/YwOImVd+nRUsSAga@hyeyoo/
	Signed-off-by: Vlastimil Babka <vbabka@suse.cz>
(cherry picked from commit 0495e337b7039191dfce6e03f5f830454b1fae6b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	mm/slab_common.c
diff --cc mm/slab_common.c
index 6e42c1ba0546,07b948288f84..000000000000
--- a/mm/slab_common.c
+++ b/mm/slab_common.c
@@@ -450,11 -438,9 +472,17 @@@ static void slab_caches_to_rcu_destroy_
  	rcu_barrier();
  
  	list_for_each_entry_safe(s, s2, &to_destroy, list) {
++<<<<<<< HEAD
 +#ifdef SLAB_SUPPORTS_SYSFS
 +		sysfs_slab_release(s);
 +#else
 +		slab_kmem_cache_release(s);
 +#endif
++=======
+ 		debugfs_slab_release(s);
+ 		kfence_shutdown_cache(s);
+ 		kmem_cache_release(s);
++>>>>>>> 0495e337b703 (mm/slab_common: Deleting kobject in kmem_cache_destroy() without holding slab_mutex/cpu_hotplug_lock)
  	}
  }
  
@@@ -472,15 -458,8 +500,17 @@@ static int shutdown_cache(struct kmem_c
  		list_add_tail(&s->list, &slab_caches_to_rcu_destroy);
  		schedule_work(&slab_caches_to_rcu_destroy_work);
  	} else {
++<<<<<<< HEAD
 +#ifdef SLAB_SUPPORTS_SYSFS
 +		sysfs_slab_unlink(s);
 +		sysfs_slab_release(s);
 +#else
 +		slab_kmem_cache_release(s);
 +#endif
++=======
+ 		kfence_shutdown_cache(s);
+ 		debugfs_slab_release(s);
++>>>>>>> 0495e337b703 (mm/slab_common: Deleting kobject in kmem_cache_destroy() without holding slab_mutex/cpu_hotplug_lock)
  	}
  
  	return 0;
@@@ -495,7 -474,7 +525,11 @@@ void slab_kmem_cache_release(struct kme
  
  void kmem_cache_destroy(struct kmem_cache *s)
  {
++<<<<<<< HEAD
 +	int err;
++=======
+ 	int refcnt;
++>>>>>>> 0495e337b703 (mm/slab_common: Deleting kobject in kmem_cache_destroy() without holding slab_mutex/cpu_hotplug_lock)
  
  	if (unlikely(!s) || !kasan_check_byte(s))
  		return;
@@@ -503,16 -482,13 +537,16 @@@
  	cpus_read_lock();
  	mutex_lock(&slab_mutex);
  
- 	s->refcount--;
- 	if (s->refcount)
+ 	refcnt = --s->refcount;
+ 	if (refcnt)
  		goto out_unlock;
  
 -	WARN(shutdown_cache(s),
 -	     "%s %s: Slab cache still has objects when called from %pS",
 -	     __func__, s->name, (void *)_RET_IP_);
 +	err = shutdown_cache(s);
 +	if (err) {
 +		pr_err("%s %s: Slab cache still has objects\n",
 +		       __func__, s->name);
 +		dump_stack();
 +	}
  out_unlock:
  	mutex_unlock(&slab_mutex);
  	cpus_read_unlock();
* Unmerged path mm/slab_common.c
