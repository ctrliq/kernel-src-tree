mm/memcg: disable threshold event handlers on PREEMPT_RT

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Sebastian Andrzej Siewior <bigeasy@linutronix.de>
commit 2343e88d238f5de973d609d861c505890f94f22e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/2343e88d.failed

During the integration of PREEMPT_RT support, the code flow around
memcg_check_events() resulted in `twisted code'.  Moving the code around
and avoiding then would then lead to an additional local-irq-save
section within memcg_check_events().  While looking better, it adds a
local-irq-save section to code flow which is usually within an
local-irq-off block on non-PREEMPT_RT configurations.

The threshold event handler is a deprecated memcg v1 feature.  Instead
of trying to get it to work under PREEMPT_RT just disable it.  There
should be no users on PREEMPT_RT.  From that perspective it makes even
less sense to get it to work under PREEMPT_RT while having zero users.

Make memory.soft_limit_in_bytes and cgroup.event_control return
-EOPNOTSUPP on PREEMPT_RT.  Make an empty memcg_check_events() and
memcg_write_event_control() which return only -EOPNOTSUPP on PREEMPT_RT.
Document that the two knobs are disabled on PREEMPT_RT.

Link: https://lkml.kernel.org/r/20220226204144.1008339-3-bigeasy@linutronix.de
	Suggested-by: Michal Hocko <mhocko@kernel.org>
	Suggested-by: Michal Koutn√Ω <mkoutny@suse.com>
	Signed-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
	Acked-by: Roman Gushchin <guro@fb.com>
	Acked-by: Johannes Weiner <hannes@cmpxchg.org>
	Reviewed-by: Shakeel Butt <shakeelb@google.com>
	Acked-by: Michal Hocko <mhocko@suse.com>
	Cc: kernel test robot <oliver.sang@intel.com>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: Vladimir Davydov <vdavydov.dev@gmail.com>
	Cc: Waiman Long <longman@redhat.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 2343e88d238f5de973d609d861c505890f94f22e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	Documentation/cgroup-v1/memory.txt
diff --cc Documentation/cgroup-v1/memory.txt
index 2e121cb08c92,2cc502a75ef6..000000000000
--- a/Documentation/cgroup-v1/memory.txt
+++ b/Documentation/cgroup-v1/memory.txt
@@@ -54,43 -59,52 +54,82 @@@ Features
  
  Brief summary of control files.
  
++<<<<<<< HEAD:Documentation/cgroup-v1/memory.txt
 + tasks				 # attach a task(thread) and show list of threads
 + cgroup.procs			 # show list of processes
 + cgroup.event_control		 # an interface for event_fd()
 + memory.usage_in_bytes		 # show current usage for memory
 +				 (See 5.5 for details)
 + memory.memsw.usage_in_bytes	 # show current usage for memory+Swap
 +				 (See 5.5 for details)
 + memory.limit_in_bytes		 # set/show limit of memory usage
 + memory.memsw.limit_in_bytes	 # set/show limit of memory+Swap usage
 + memory.failcnt			 # show the number of memory usage hits limits
 + memory.memsw.failcnt		 # show the number of memory+Swap hits limits
 + memory.max_usage_in_bytes	 # show max memory usage recorded
 + memory.memsw.max_usage_in_bytes # show max memory+Swap usage recorded
 + memory.soft_limit_in_bytes	 # set/show soft limit of memory usage
 + memory.stat			 # show various statistics
 + memory.use_hierarchy		 # set/show hierarchical account enabled
 +				 # This knob is deprecated and shouldn't be
 +				 # used.
 + memory.force_empty		 # trigger forced move charge to parent
 + memory.pressure_level		 # set memory pressure notifications
 + memory.swappiness		 # set/show swappiness parameter of vmscan
 +				 (See sysctl's vm.swappiness)
 + memory.move_charge_at_immigrate # set/show controls of moving charges
 + memory.oom_control		 # set/show oom controls.
 + memory.numa_stat		 # show the number of memory usage per numa node
++=======
+ ==================================== ==========================================
+  tasks				     attach a task(thread) and show list of
+ 				     threads
+  cgroup.procs			     show list of processes
+  cgroup.event_control		     an interface for event_fd()
+ 				     This knob is not available on CONFIG_PREEMPT_RT systems.
+  memory.usage_in_bytes		     show current usage for memory
+ 				     (See 5.5 for details)
+  memory.memsw.usage_in_bytes	     show current usage for memory+Swap
+ 				     (See 5.5 for details)
+  memory.limit_in_bytes		     set/show limit of memory usage
+  memory.memsw.limit_in_bytes	     set/show limit of memory+Swap usage
+  memory.failcnt			     show the number of memory usage hits limits
+  memory.memsw.failcnt		     show the number of memory+Swap hits limits
+  memory.max_usage_in_bytes	     show max memory usage recorded
+  memory.memsw.max_usage_in_bytes     show max memory+Swap usage recorded
+  memory.soft_limit_in_bytes	     set/show soft limit of memory usage
+ 				     This knob is not available on CONFIG_PREEMPT_RT systems.
+  memory.stat			     show various statistics
+  memory.use_hierarchy		     set/show hierarchical account enabled
+                                      This knob is deprecated and shouldn't be
+                                      used.
+  memory.force_empty		     trigger forced page reclaim
+  memory.pressure_level		     set memory pressure notifications
+  memory.swappiness		     set/show swappiness parameter of vmscan
+ 				     (See sysctl's vm.swappiness)
+  memory.move_charge_at_immigrate     set/show controls of moving charges
+  memory.oom_control		     set/show oom controls.
+  memory.numa_stat		     show the number of memory usage per numa
+ 				     node
+  memory.kmem.limit_in_bytes          This knob is deprecated and writing to
+                                      it will return -ENOTSUPP.
+  memory.kmem.usage_in_bytes          show current kernel memory allocation
+  memory.kmem.failcnt                 show the number of kernel memory usage
+ 				     hits limits
+  memory.kmem.max_usage_in_bytes      show max kernel memory usage recorded
++>>>>>>> 2343e88d238f (mm/memcg: disable threshold event handlers on PREEMPT_RT):Documentation/admin-guide/cgroup-v1/memory.rst
  
 - memory.kmem.tcp.limit_in_bytes      set/show hard limit for tcp buf memory
 - memory.kmem.tcp.usage_in_bytes      show current tcp buf memory allocation
 - memory.kmem.tcp.failcnt             show the number of tcp buf memory usage
 -				     hits limits
 - memory.kmem.tcp.max_usage_in_bytes  show max tcp buf memory usage recorded
 -==================================== ==========================================
 + memory.kmem.limit_in_bytes      # set/show hard limit for kernel memory
 + memory.kmem.usage_in_bytes      # show current kernel memory allocation
 + memory.kmem.failcnt             # show the number of kernel memory usage hits limits
 + memory.kmem.max_usage_in_bytes  # show max kernel memory usage recorded
 +
 + memory.kmem.tcp.limit_in_bytes  # set/show hard limit for tcp buf memory
 + memory.kmem.tcp.usage_in_bytes  # show current tcp buf memory allocation
 + memory.kmem.tcp.failcnt            # show the number of tcp buf memory usage hits limits
 + memory.kmem.tcp.max_usage_in_bytes # show max tcp buf memory usage recorded
  
  1. History
 -==========
  
  The memory controller has a long history. A request for comments for the memory
  controller was posted by Balbir Singh [1]. At the time the RFC was posted
* Unmerged path Documentation/cgroup-v1/memory.txt
diff --git a/mm/memcontrol.c b/mm/memcontrol.c
index 2c5c2381d3ee..102c045ac782 100644
--- a/mm/memcontrol.c
+++ b/mm/memcontrol.c
@@ -903,6 +903,9 @@ static bool mem_cgroup_event_ratelimit(struct mem_cgroup *memcg,
  */
 static void memcg_check_events(struct mem_cgroup *memcg, struct page *page)
 {
+	if (IS_ENABLED(CONFIG_PREEMPT_RT))
+		return;
+
 	/* threshold event is triggered in finer grain than soft limit */
 	if (unlikely(mem_cgroup_event_ratelimit(memcg,
 						MEM_CGROUP_TARGET_THRESH))) {
@@ -3845,8 +3848,12 @@ static ssize_t mem_cgroup_write(struct kernfs_open_file *of,
 		}
 		break;
 	case RES_SOFT_LIMIT:
-		memcg->soft_limit = nr_pages;
-		ret = 0;
+		if (IS_ENABLED(CONFIG_PREEMPT_RT)) {
+			ret = -EOPNOTSUPP;
+		} else {
+			memcg->soft_limit = nr_pages;
+			ret = 0;
+		}
 		break;
 	}
 	return ret ?: nbytes;
@@ -4824,6 +4831,9 @@ static ssize_t memcg_write_event_control(struct kernfs_open_file *of,
 	char *endp;
 	int ret;
 
+	if (IS_ENABLED(CONFIG_PREEMPT_RT))
+		return -EOPNOTSUPP;
+
 	buf = strstrip(buf);
 
 	efd = simple_strtoul(buf, &endp, 10);
