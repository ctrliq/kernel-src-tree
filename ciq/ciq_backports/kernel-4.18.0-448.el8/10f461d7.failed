ASoC: SOF: Add IPC3 topology control ops

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Ranjani Sridharan <ranjani.sridharan@linux.intel.com>
commit 10f461d79c2d1afb22344986cc1b4631169cf25e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/10f461d7.failed

Define the topology control IPC ops for IPC3, implement the
control_notify op and use it.

	Signed-off-by: Ranjani Sridharan <ranjani.sridharan@linux.intel.com>
	Reviewed-by: PÃ©ter Ujfalusi <peter.ujfalusi@linux.intel.com>
	Reviewed-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
Link: https://lore.kernel.org/r/20220317175044.1752400-6-ranjani.sridharan@linux.intel.com
	Signed-off-by: Mark Brown <broonie@kernel.org>
(cherry picked from commit 10f461d79c2d1afb22344986cc1b4631169cf25e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	sound/soc/sof/Makefile
#	sound/soc/sof/control.c
#	sound/soc/sof/ipc.c
#	sound/soc/sof/ipc3-ops.h
#	sound/soc/sof/ipc3-topology.c
diff --cc sound/soc/sof/Makefile
index 4b9fccacc2b7,f6d68a3096d9..000000000000
--- a/sound/soc/sof/Makefile
+++ b/sound/soc/sof/Makefile
@@@ -1,9 -1,12 +1,17 @@@
  # SPDX-License-Identifier: (GPL-2.0-only OR BSD-3-Clause)
  
  snd-sof-objs := core.o ops.o loader.o ipc.o pcm.o pm.o debug.o topology.o\
++<<<<<<< HEAD
 +		control.o trace.o iomem-utils.o sof-audio.o stream-ipc.o
++=======
+ 		control.o trace.o iomem-utils.o sof-audio.o stream-ipc.o\
+ 		ipc3-topology.o ipc3.o ipc3-control.o
+ ifneq ($(CONFIG_SND_SOC_SOF_CLIENT),)
+ snd-sof-objs += sof-client.o
+ endif
++>>>>>>> 10f461d79c2d (ASoC: SOF: Add IPC3 topology control ops)
  
 +snd-sof-$(CONFIG_SND_SOC_SOF_DEBUG_PROBES) += sof-probes.o
  snd-sof-$(CONFIG_SND_SOC_SOF_COMPRESS) += compress.o
  
  snd-sof-pci-objs := sof-pci-dev.o
diff --cc sound/soc/sof/control.c
index ef61936dad59,fb2311d880d3..000000000000
--- a/sound/soc/sof/control.c
+++ b/sound/soc/sof/control.c
@@@ -526,147 -526,3 +526,150 @@@ int snd_sof_bytes_ext_get(struct snd_kc
  
  	return 0;
  }
++<<<<<<< HEAD
 +
 +static void snd_sof_update_control(struct snd_sof_control *scontrol,
 +				   struct sof_ipc_ctrl_data *cdata)
 +{
 +	struct snd_soc_component *scomp = scontrol->scomp;
 +	struct sof_ipc_ctrl_data *local_cdata;
 +	int i;
 +
 +	local_cdata = scontrol->control_data;
 +
 +	if (cdata->cmd == SOF_CTRL_CMD_BINARY) {
 +		if (cdata->num_elems != local_cdata->data->size) {
 +			dev_err(scomp->dev,
 +				"error: cdata binary size mismatch %u - %u\n",
 +				cdata->num_elems, local_cdata->data->size);
 +			return;
 +		}
 +
 +		/* copy the new binary data */
 +		memcpy(local_cdata->data, cdata->data, cdata->num_elems);
 +	} else if (cdata->num_elems != scontrol->num_channels) {
 +		dev_err(scomp->dev,
 +			"error: cdata channel count mismatch %u - %d\n",
 +			cdata->num_elems, scontrol->num_channels);
 +	} else {
 +		/* copy the new values */
 +		for (i = 0; i < cdata->num_elems; i++)
 +			local_cdata->chanv[i].value = cdata->chanv[i].value;
 +	}
 +}
 +
 +void snd_sof_control_notify(struct snd_sof_dev *sdev,
 +			    struct sof_ipc_ctrl_data *cdata)
 +{
 +	struct snd_soc_dapm_widget *widget;
 +	struct snd_sof_control *scontrol;
 +	struct snd_sof_widget *swidget;
 +	struct snd_kcontrol *kc = NULL;
 +	struct soc_mixer_control *sm;
 +	struct soc_bytes_ext *be;
 +	size_t expected_size;
 +	struct soc_enum *se;
 +	bool found = false;
 +	int i, type;
 +
 +	if (cdata->type == SOF_CTRL_TYPE_VALUE_COMP_GET ||
 +	    cdata->type == SOF_CTRL_TYPE_VALUE_COMP_SET) {
 +		dev_err(sdev->dev,
 +			"Component data is not supported in control notification\n");
 +		return;
 +	}
 +
 +	/* Find the swidget first */
 +	list_for_each_entry(swidget, &sdev->widget_list, list) {
 +		if (swidget->comp_id == cdata->comp_id) {
 +			found = true;
 +			break;
 +		}
 +	}
 +
 +	if (!found)
 +		return;
 +
 +	/* Translate SOF cmd to TPLG type */
 +	switch (cdata->cmd) {
 +	case SOF_CTRL_CMD_VOLUME:
 +	case SOF_CTRL_CMD_SWITCH:
 +		type = SND_SOC_TPLG_TYPE_MIXER;
 +		break;
 +	case SOF_CTRL_CMD_BINARY:
 +		type = SND_SOC_TPLG_TYPE_BYTES;
 +		break;
 +	case SOF_CTRL_CMD_ENUM:
 +		type = SND_SOC_TPLG_TYPE_ENUM;
 +		break;
 +	default:
 +		dev_err(sdev->dev, "error: unknown cmd %u\n", cdata->cmd);
 +		return;
 +	}
 +
 +	widget = swidget->widget;
 +	for (i = 0; i < widget->num_kcontrols; i++) {
 +		/* skip non matching types or non matching indexes within type */
 +		if (widget->dobj.widget.kcontrol_type[i] == type &&
 +		    widget->kcontrol_news[i].index == cdata->index) {
 +			kc = widget->kcontrols[i];
 +			break;
 +		}
 +	}
 +
 +	if (!kc)
 +		return;
 +
 +	switch (cdata->cmd) {
 +	case SOF_CTRL_CMD_VOLUME:
 +	case SOF_CTRL_CMD_SWITCH:
 +		sm = (struct soc_mixer_control *)kc->private_value;
 +		scontrol = sm->dobj.private;
 +		break;
 +	case SOF_CTRL_CMD_BINARY:
 +		be = (struct soc_bytes_ext *)kc->private_value;
 +		scontrol = be->dobj.private;
 +		break;
 +	case SOF_CTRL_CMD_ENUM:
 +		se = (struct soc_enum *)kc->private_value;
 +		scontrol = se->dobj.private;
 +		break;
 +	default:
 +		return;
 +	}
 +
 +	expected_size = sizeof(struct sof_ipc_ctrl_data);
 +	switch (cdata->type) {
 +	case SOF_CTRL_TYPE_VALUE_CHAN_GET:
 +	case SOF_CTRL_TYPE_VALUE_CHAN_SET:
 +		expected_size += cdata->num_elems *
 +				 sizeof(struct sof_ipc_ctrl_value_chan);
 +		break;
 +	case SOF_CTRL_TYPE_DATA_GET:
 +	case SOF_CTRL_TYPE_DATA_SET:
 +		expected_size += cdata->num_elems + sizeof(struct sof_abi_hdr);
 +		break;
 +	default:
 +		return;
 +	}
 +
 +	if (cdata->rhdr.hdr.size != expected_size) {
 +		dev_err(sdev->dev, "error: component notification size mismatch\n");
 +		return;
 +	}
 +
 +	if (cdata->num_elems)
 +		/*
 +		 * The message includes the updated value/data, update the
 +		 * control's local cache using the received notification
 +		 */
 +		snd_sof_update_control(scontrol, cdata);
 +	else
 +		/* Mark the scontrol that the value/data is changed in SOF */
 +		scontrol->comp_data_dirty = true;
 +
 +	snd_ctl_notify_one(swidget->scomp->card->snd_card,
 +			   SNDRV_CTL_EVENT_MASK_VALUE, kc, 0);
 +}
++=======
++>>>>>>> 10f461d79c2d (ASoC: SOF: Add IPC3 topology control ops)
diff --cc sound/soc/sof/ipc.c
index 477e04da5ac7,af0ae137842b..000000000000
--- a/sound/soc/sof/ipc.c
+++ b/sound/soc/sof/ipc.c
@@@ -1020,6 -1026,18 +1022,21 @@@ struct snd_sof_ipc *snd_sof_ipc_init(st
  
  	init_waitqueue_head(&msg->waitq);
  
++<<<<<<< HEAD
++=======
+ 	/*
+ 	 * Use IPC3 ops as it is the only available version now. With the addition of new IPC
+ 	 * versions, this will need to be modified to use the selected version at runtime.
+ 	 */
+ 	ipc->ops = &ipc3_ops;
+ 
+ 	/* check for mandatory ops */
+ 	if (!ipc->ops->tplg || !ipc->ops->tplg->widget || !ipc->ops->tplg->control) {
+ 		dev_err(sdev->dev, "Invalid topology IPC ops\n");
+ 		return NULL;
+ 	}
+ 
++>>>>>>> 10f461d79c2d (ASoC: SOF: Add IPC3 topology control ops)
  	return ipc;
  }
  EXPORT_SYMBOL(snd_sof_ipc_init);
* Unmerged path sound/soc/sof/ipc3-ops.h
* Unmerged path sound/soc/sof/ipc3-topology.c
* Unmerged path sound/soc/sof/Makefile
* Unmerged path sound/soc/sof/control.c
* Unmerged path sound/soc/sof/ipc.c
diff --git a/sound/soc/sof/ipc3-control.c b/sound/soc/sof/ipc3-control.c
new file mode 100644
index 000000000000..d4086e805c18
--- /dev/null
+++ b/sound/soc/sof/ipc3-control.c
@@ -0,0 +1,156 @@
+// SPDX-License-Identifier: (GPL-2.0-only OR BSD-3-Clause)
+//
+// This file is provided under a dual BSD/GPLv2 license.  When using or
+// redistributing this file, you may do so under either license.
+//
+// Copyright(c) 2021 Intel Corporation. All rights reserved.
+//
+//
+
+#include "sof-priv.h"
+#include "sof-audio.h"
+#include "ipc3-ops.h"
+
+static void snd_sof_update_control(struct snd_sof_control *scontrol,
+				   struct sof_ipc_ctrl_data *cdata)
+{
+	struct snd_soc_component *scomp = scontrol->scomp;
+	struct sof_ipc_ctrl_data *local_cdata;
+	int i;
+
+	local_cdata = scontrol->ipc_control_data;
+
+	if (cdata->cmd == SOF_CTRL_CMD_BINARY) {
+		if (cdata->num_elems != local_cdata->data->size) {
+			dev_err(scomp->dev, "cdata binary size mismatch %u - %u\n",
+				cdata->num_elems, local_cdata->data->size);
+			return;
+		}
+
+		/* copy the new binary data */
+		memcpy(local_cdata->data, cdata->data, cdata->num_elems);
+	} else if (cdata->num_elems != scontrol->num_channels) {
+		dev_err(scomp->dev, "cdata channel count mismatch %u - %d\n",
+			cdata->num_elems, scontrol->num_channels);
+	} else {
+		/* copy the new values */
+		for (i = 0; i < cdata->num_elems; i++)
+			local_cdata->chanv[i].value = cdata->chanv[i].value;
+	}
+}
+
+static void sof_ipc3_control_update(struct snd_sof_dev *sdev, void *ipc_control_message)
+{
+	struct sof_ipc_ctrl_data *cdata = ipc_control_message;
+	struct snd_soc_dapm_widget *widget;
+	struct snd_sof_control *scontrol;
+	struct snd_sof_widget *swidget;
+	struct snd_kcontrol *kc = NULL;
+	struct soc_mixer_control *sm;
+	struct soc_bytes_ext *be;
+	size_t expected_size;
+	struct soc_enum *se;
+	bool found = false;
+	int i, type;
+
+	if (cdata->type == SOF_CTRL_TYPE_VALUE_COMP_GET ||
+	    cdata->type == SOF_CTRL_TYPE_VALUE_COMP_SET) {
+		dev_err(sdev->dev, "Component data is not supported in control notification\n");
+		return;
+	}
+
+	/* Find the swidget first */
+	list_for_each_entry(swidget, &sdev->widget_list, list) {
+		if (swidget->comp_id == cdata->comp_id) {
+			found = true;
+			break;
+		}
+	}
+
+	if (!found)
+		return;
+
+	/* Translate SOF cmd to TPLG type */
+	switch (cdata->cmd) {
+	case SOF_CTRL_CMD_VOLUME:
+	case SOF_CTRL_CMD_SWITCH:
+		type = SND_SOC_TPLG_TYPE_MIXER;
+		break;
+	case SOF_CTRL_CMD_BINARY:
+		type = SND_SOC_TPLG_TYPE_BYTES;
+		break;
+	case SOF_CTRL_CMD_ENUM:
+		type = SND_SOC_TPLG_TYPE_ENUM;
+		break;
+	default:
+		dev_err(sdev->dev, "Unknown cmd %u in %s\n", cdata->cmd, __func__);
+		return;
+	}
+
+	widget = swidget->widget;
+	for (i = 0; i < widget->num_kcontrols; i++) {
+		/* skip non matching types or non matching indexes within type */
+		if (widget->dobj.widget.kcontrol_type[i] == type &&
+		    widget->kcontrol_news[i].index == cdata->index) {
+			kc = widget->kcontrols[i];
+			break;
+		}
+	}
+
+	if (!kc)
+		return;
+
+	switch (cdata->cmd) {
+	case SOF_CTRL_CMD_VOLUME:
+	case SOF_CTRL_CMD_SWITCH:
+		sm = (struct soc_mixer_control *)kc->private_value;
+		scontrol = sm->dobj.private;
+		break;
+	case SOF_CTRL_CMD_BINARY:
+		be = (struct soc_bytes_ext *)kc->private_value;
+		scontrol = be->dobj.private;
+		break;
+	case SOF_CTRL_CMD_ENUM:
+		se = (struct soc_enum *)kc->private_value;
+		scontrol = se->dobj.private;
+		break;
+	default:
+		return;
+	}
+
+	expected_size = sizeof(struct sof_ipc_ctrl_data);
+	switch (cdata->type) {
+	case SOF_CTRL_TYPE_VALUE_CHAN_GET:
+	case SOF_CTRL_TYPE_VALUE_CHAN_SET:
+		expected_size += cdata->num_elems *
+				 sizeof(struct sof_ipc_ctrl_value_chan);
+		break;
+	case SOF_CTRL_TYPE_DATA_GET:
+	case SOF_CTRL_TYPE_DATA_SET:
+		expected_size += cdata->num_elems + sizeof(struct sof_abi_hdr);
+		break;
+	default:
+		return;
+	}
+
+	if (cdata->rhdr.hdr.size != expected_size) {
+		dev_err(sdev->dev, "Component notification size mismatch\n");
+		return;
+	}
+
+	if (cdata->num_elems)
+		/*
+		 * The message includes the updated value/data, update the
+		 * control's local cache using the received notification
+		 */
+		snd_sof_update_control(scontrol, cdata);
+	else
+		/* Mark the scontrol that the value/data is changed in SOF */
+		scontrol->comp_data_dirty = true;
+
+	snd_ctl_notify_one(swidget->scomp->card->snd_card, SNDRV_CTL_EVENT_MASK_VALUE, kc, 0);
+}
+
+const struct sof_ipc_tplg_control_ops tplg_ipc3_control_ops = {
+	.update = sof_ipc3_control_update,
+};
* Unmerged path sound/soc/sof/ipc3-ops.h
* Unmerged path sound/soc/sof/ipc3-topology.c
diff --git a/sound/soc/sof/sof-audio.h b/sound/soc/sof/sof-audio.h
index 11e04ac635fc..1767273ff20a 100644
--- a/sound/soc/sof/sof-audio.h
+++ b/sound/soc/sof/sof-audio.h
@@ -34,9 +34,9 @@ struct snd_sof_widget;
 struct snd_sof_route;
 
 /**
- * struct ipc_tplg_control_ops - IPC-specific ops for topology kcontrol IO
+ * struct sof_ipc_tplg_control_ops - IPC-specific ops for topology kcontrol IO
  */
-struct ipc_tplg_control_ops {
+struct sof_ipc_tplg_control_ops {
 	bool (*volume_put)(struct snd_sof_control *scontrol, struct snd_ctl_elem_value *ucontrol);
 	int (*volume_get)(struct snd_sof_control *scontrol, struct snd_ctl_elem_value *ucontrol);
 	bool (*switch_put)(struct snd_sof_control *scontrol, struct snd_ctl_elem_value *ucontrol);
@@ -85,7 +85,7 @@ struct sof_ipc_tplg_widget_ops {
  */
 struct sof_ipc_tplg_ops {
 	const struct sof_ipc_tplg_widget_ops *widget;
-	const struct ipc_tplg_control_ops *control;
+	const struct sof_ipc_tplg_control_ops *control;
 	int (*route_setup)(struct snd_sof_dev *sdev, struct snd_sof_route *sroute);
 	const struct sof_token_info *token_list;
 };
