dm verity: allow optional args to alter primary args handling

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Mike Snitzer <snitzer@kernel.org>
commit df326e7a06990bab011afc8c17de1ab2774e4bb8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/df326e7a.failed

The previous commit ("dm verity: Add optional "try_verify_in_tasklet"
feature") imposed that CRYPTO_ALG_ASYNC mask be used even if the
optional "try_verify_in_tasklet" feature was not specified. This was
because verity_parse_opt_args() was called after handling the primary
args (due to it having data dependencies on having first parsed all
primary args).

Enhance verity_ctr() so that simple optional args, that don't have a
data dependency on primary args parsing, can alter how the primary
args are handled. In practice this means verity_parse_opt_args() gets
called twice. First with the new 'only_modifier_opts' arg set to true,
then again with it set to false _after_ parsing all primary args.

This allows the v->use_tasklet flag to be properly set and then used
when verity_ctr() parses the primary args and then calls
crypto_alloc_ahash() with CRYPTO_ALG_ASYNC conditionally set.

	Signed-off-by: Mike Snitzer <snitzer@kernel.org>
(cherry picked from commit df326e7a06990bab011afc8c17de1ab2774e4bb8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/md/dm-verity-target.c
diff --cc drivers/md/dm-verity-target.c
index 8f0dc33763bb,4895d6b30559..000000000000
--- a/drivers/md/dm-verity-target.c
+++ b/drivers/md/dm-verity-target.c
@@@ -969,12 -1078,21 +976,16 @@@ static int verity_parse_opt_args(struc
  				return r;
  			continue;
  
 -		} else if (!strcasecmp(arg_name, DM_VERITY_OPT_TASKLET_VERIFY)) {
 -			v->use_tasklet = true;
 -			continue;
 -
  		} else if (verity_is_fec_opt_arg(arg_name)) {
+ 			if (only_modifier_opts)
+ 				continue;
  			r = verity_fec_parse_opt_args(as, v, &argc, arg_name);
  			if (r)
  				return r;
  			continue;
 -
  		} else if (verity_verify_is_sig_opt_arg(arg_name)) {
+ 			if (only_modifier_opts)
+ 				continue;
  			r = verity_verify_sig_parse_opt_args(as, v,
  							     verify_args,
  							     &argc, arg_name);
@@@ -1113,7 -1239,8 +1133,12 @@@ static int verity_ctr(struct dm_target 
  		goto bad;
  	}
  
++<<<<<<< HEAD
 +	v->tfm = crypto_alloc_ahash(v->alg_name, 0, 0);
++=======
+ 	v->tfm = crypto_alloc_ahash(v->alg_name, 0,
+ 				    v->use_tasklet ? CRYPTO_ALG_ASYNC : 0);
++>>>>>>> df326e7a0699 (dm verity: allow optional args to alter primary args handling)
  	if (IS_ERR(v->tfm)) {
  		ti->error = "Cannot initialize hash function";
  		r = PTR_ERR(v->tfm);
* Unmerged path drivers/md/dm-verity-target.c
