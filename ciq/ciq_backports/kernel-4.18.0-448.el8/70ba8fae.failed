KVM: s390: pci: fix GAIT physical vs virtual pointers usage

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Matthew Rosato <mjrosato@linux.ibm.com>
commit 70ba8fae27758cc2679a948b03d8a9ca18f1dcb1
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/70ba8fae.failed

The GAIT and all of its entries must be represented by physical
addresses as this structure is shared with underlying firmware.
We can keep a virtual address of the GAIT origin in order to
handle processing in the kernel, but when traversing the entries
we must again convert the physical AISB stored in that GAIT entry
into a virtual address in order to process it.

Note: this currently doesn't fix a real bug, since virtual addresses
are indentical to physical ones.

	Reviewed-by: Pierre Morel <pmorel@linux.ibm.com>
	Acked-by: Nico Boehr <nrb@linux.ibm.com>
	Signed-off-by: Matthew Rosato <mjrosato@linux.ibm.com>
	Reviewed-by: Claudio Imbrenda <imbrenda@linux.ibm.com>
Link: https://lore.kernel.org/r/20220907155952.87356-1-mjrosato@linux.ibm.com
Message-Id: <20220907155952.87356-1-mjrosato@linux.ibm.com>
	Signed-off-by: Janosch Frank <frankja@linux.ibm.com>
(cherry picked from commit 70ba8fae27758cc2679a948b03d8a9ca18f1dcb1)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/s390/kvm/interrupt.c
diff --cc arch/s390/kvm/interrupt.c
index 6df246097f39,ab569faf0df2..000000000000
--- a/arch/s390/kvm/interrupt.c
+++ b/arch/s390/kvm/interrupt.c
@@@ -3312,10 -3313,87 +3312,82 @@@ out
  }
  EXPORT_SYMBOL_GPL(kvm_s390_gisc_unregister);
  
 -static void aen_host_forward(unsigned long si)
 +static void gib_alert_irq_handler(struct airq_struct *airq, bool floating)
  {
++<<<<<<< HEAD
++=======
+ 	struct kvm_s390_gisa_interrupt *gi;
+ 	struct zpci_gaite *gaite;
+ 	struct kvm *kvm;
+ 
+ 	gaite = (struct zpci_gaite *)aift->gait +
+ 		(si * sizeof(struct zpci_gaite));
+ 	if (gaite->count == 0)
+ 		return;
+ 	if (gaite->aisb != 0)
+ 		set_bit_inv(gaite->aisbo, phys_to_virt(gaite->aisb));
+ 
+ 	kvm = kvm_s390_pci_si_to_kvm(aift, si);
+ 	if (!kvm)
+ 		return;
+ 	gi = &kvm->arch.gisa_int;
+ 
+ 	if (!(gi->origin->g1.simm & AIS_MODE_MASK(gaite->gisc)) ||
+ 	    !(gi->origin->g1.nimm & AIS_MODE_MASK(gaite->gisc))) {
+ 		gisa_set_ipm_gisc(gi->origin, gaite->gisc);
+ 		if (hrtimer_active(&gi->timer))
+ 			hrtimer_cancel(&gi->timer);
+ 		hrtimer_start(&gi->timer, 0, HRTIMER_MODE_REL);
+ 		kvm->stat.aen_forward++;
+ 	}
+ }
+ 
+ static void aen_process_gait(u8 isc)
+ {
+ 	bool found = false, first = true;
+ 	union zpci_sic_iib iib = {{0}};
+ 	unsigned long si, flags;
+ 
+ 	spin_lock_irqsave(&aift->gait_lock, flags);
+ 
+ 	if (!aift->gait) {
+ 		spin_unlock_irqrestore(&aift->gait_lock, flags);
+ 		return;
+ 	}
+ 
+ 	for (si = 0;;) {
+ 		/* Scan adapter summary indicator bit vector */
+ 		si = airq_iv_scan(aift->sbv, si, airq_iv_end(aift->sbv));
+ 		if (si == -1UL) {
+ 			if (first || found) {
+ 				/* Re-enable interrupts. */
+ 				zpci_set_irq_ctrl(SIC_IRQ_MODE_SINGLE, isc,
+ 						  &iib);
+ 				first = found = false;
+ 			} else {
+ 				/* Interrupts on and all bits processed */
+ 				break;
+ 			}
+ 			found = false;
+ 			si = 0;
+ 			/* Scan again after re-enabling interrupts */
+ 			continue;
+ 		}
+ 		found = true;
+ 		aen_host_forward(si);
+ 	}
+ 
+ 	spin_unlock_irqrestore(&aift->gait_lock, flags);
+ }
+ 
+ static void gib_alert_irq_handler(struct airq_struct *airq,
+ 				  struct tpi_info *tpi_info)
+ {
+ 	struct tpi_adapter_info *info = (struct tpi_adapter_info *)tpi_info;
+ 
++>>>>>>> 70ba8fae2775 (KVM: s390: pci: fix GAIT physical vs virtual pointers usage)
  	inc_irq_stat(IRQIO_GAL);
 -
 -	if ((info->forward || info->error) &&
 -	    IS_ENABLED(CONFIG_VFIO_PCI_ZDEV_KVM)) {
 -		aen_process_gait(info->isc);
 -		if (info->aism != 0)
 -			process_gib_alert_list();
 -	} else {
 -		process_gib_alert_list();
 -	}
 +	process_gib_alert_list();
  }
  
  static struct airq_struct gib_alert_irq = {
* Unmerged path arch/s390/kvm/interrupt.c
diff --git a/arch/s390/kvm/pci.c b/arch/s390/kvm/pci.c
index b232c8cbaa81..b9e2a43217f1 100644
--- a/arch/s390/kvm/pci.c
+++ b/arch/s390/kvm/pci.c
@@ -69,7 +69,7 @@ static int zpci_setup_aipb(u8 nisc)
 		rc = -ENOMEM;
 		goto free_sbv;
 	}
-	aift->gait = (struct zpci_gaite *)page_to_phys(page);
+	aift->gait = (struct zpci_gaite *)page_to_virt(page);
 
 	zpci_aipb->aipb.faisb = virt_to_phys(aift->sbv->vector);
 	zpci_aipb->aipb.gait = virt_to_phys(aift->gait);
