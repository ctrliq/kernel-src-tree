ASoC: SOF: Copy compress parameters into extended data

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Daniel Baluta <daniel.baluta@nxp.com>
commit 3f70c360d484466da7420f395d4675ca02436e32
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/3f70c360.failed

Allocate memory at the end of sof_ipc_stream_params to store
snd_compr_params in order to be sent them to SOF firmware.

This will help firmware correctly configure codecs parameters.

Notice, that we use 2 bytes from the reserved pool in order to store
the extended data length. This is compatible with older FWs where
there was no extended data.

	Signed-off-by: Daniel Baluta <daniel.baluta@nxp.com>
	Reviewed-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
	Reviewed-by: Ranjani Sridharan <ranjani.sridharan@linux.intel.com>
	Reviewed-by: PÃ©ter Ujfalusi <peter.ujfalusi@linux.intel.com>
Link: https://lore.kernel.org/r/20220712141531.14599-3-daniel.baluta@oss.nxp.com
	Signed-off-by: Mark Brown <broonie@kernel.org>
(cherry picked from commit 3f70c360d484466da7420f395d4675ca02436e32)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	sound/soc/sof/compress.c
diff --cc sound/soc/sof/compress.c
index a8e908e50101,1204dce29ef9..000000000000
--- a/sound/soc/sof/compress.c
+++ b/sound/soc/sof/compress.c
@@@ -169,8 -168,9 +169,9 @@@ static int sof_compr_set_params(struct 
  	struct snd_compr_runtime *crtd = cstream->runtime;
  	struct sof_ipc_pcm_params_reply ipc_params_reply;
  	struct snd_compr_tstamp *tstamp;
 -	struct sof_ipc_pcm_params *pcm;
 +	struct sof_ipc_pcm_params pcm;
  	struct snd_sof_pcm *spcm;
+ 	size_t ext_data_size;
  	int ret;
  
  	tstamp = crtd->private_data;
@@@ -180,6 -180,15 +181,18 @@@
  	if (!spcm)
  		return -EINVAL;
  
++<<<<<<< HEAD
++=======
+ 	ext_data_size = sizeof(params->codec);
+ 
+ 	if (sizeof(*pcm) + ext_data_size > sdev->ipc->max_payload_size)
+ 		return -EINVAL;
+ 
+ 	pcm = kzalloc(sizeof(*pcm) + ext_data_size, GFP_KERNEL);
+ 	if (!pcm)
+ 		return -ENOMEM;
+ 
++>>>>>>> 3f70c360d484 (ASoC: SOF: Copy compress parameters into extended data)
  	cstream->dma_buffer.dev.type = SNDRV_DMA_TYPE_DEV_SG;
  	cstream->dma_buffer.dev.dev = sdev->dev;
  	ret = snd_compr_malloc_pages(cstream, crtd->buffer_size);
@@@ -188,28 -197,29 +201,52 @@@
  
  	ret = create_page_table(component, cstream, crtd->dma_area, crtd->dma_bytes);
  	if (ret < 0)
 -		goto out;
 +		return ret;
 +
++<<<<<<< HEAD
 +	memset(&pcm, 0, sizeof(pcm));
 +
 +	pcm.params.buffer.pages = PFN_UP(crtd->dma_bytes);
 +	pcm.hdr.size = sizeof(pcm);
 +	pcm.hdr.cmd = SOF_IPC_GLB_STREAM_MSG | SOF_IPC_STREAM_PCM_PARAMS;
 +
 +	pcm.comp_id = spcm->stream[cstream->direction].comp_id;
 +	pcm.params.hdr.size = sizeof(pcm.params);
 +	pcm.params.buffer.phy_addr = spcm->stream[cstream->direction].page_table.addr;
 +	pcm.params.buffer.size = crtd->dma_bytes;
 +	pcm.params.direction = cstream->direction;
 +	pcm.params.channels = params->codec.ch_out;
 +	pcm.params.rate = params->codec.sample_rate;
 +	pcm.params.buffer_fmt = SOF_IPC_BUFFER_INTERLEAVED;
 +	pcm.params.frame_fmt = SOF_IPC_FRAME_S32_LE;
 +	pcm.params.sample_container_bytes =
 +		snd_pcm_format_physical_width(SNDRV_PCM_FORMAT_S32) >> 3;
 +	pcm.params.host_period_bytes = params->buffer.fragment_size;
  
 +	ret = sof_ipc_tx_message(sdev->ipc, pcm.hdr.cmd, &pcm, sizeof(pcm),
++=======
+ 	pcm->params.buffer.pages = PFN_UP(crtd->dma_bytes);
+ 	pcm->hdr.size = sizeof(*pcm) + ext_data_size;
+ 	pcm->hdr.cmd = SOF_IPC_GLB_STREAM_MSG | SOF_IPC_STREAM_PCM_PARAMS;
+ 
+ 	pcm->comp_id = spcm->stream[cstream->direction].comp_id;
+ 	pcm->params.hdr.size = sizeof(pcm->params) + ext_data_size;
+ 	pcm->params.buffer.phy_addr = spcm->stream[cstream->direction].page_table.addr;
+ 	pcm->params.buffer.size = crtd->dma_bytes;
+ 	pcm->params.direction = cstream->direction;
+ 	pcm->params.channels = params->codec.ch_out;
+ 	pcm->params.rate = params->codec.sample_rate;
+ 	pcm->params.buffer_fmt = SOF_IPC_BUFFER_INTERLEAVED;
+ 	pcm->params.frame_fmt = SOF_IPC_FRAME_S32_LE;
+ 	pcm->params.sample_container_bytes =
+ 		snd_pcm_format_physical_width(SNDRV_PCM_FORMAT_S32) >> 3;
+ 	pcm->params.host_period_bytes = params->buffer.fragment_size;
+ 	pcm->params.ext_data_length = ext_data_size;
+ 
+ 	memcpy((u8 *)pcm->params.ext_data, &params->codec, ext_data_size);
+ 
+ 	ret = sof_ipc_tx_message(sdev->ipc, pcm, sizeof(*pcm) + ext_data_size,
++>>>>>>> 3f70c360d484 (ASoC: SOF: Copy compress parameters into extended data)
  				 &ipc_params_reply, sizeof(ipc_params_reply));
  	if (ret < 0) {
  		dev_err(component->dev, "error ipc failed\n");
diff --git a/include/sound/sof/stream.h b/include/sound/sof/stream.h
index 1db3bbc3e65d..9377113f13e4 100644
--- a/include/sound/sof/stream.h
+++ b/include/sound/sof/stream.h
@@ -86,9 +86,11 @@ struct sof_ipc_stream_params {
 	uint32_t host_period_bytes;
 	uint16_t no_stream_position; /**< 1 means don't send stream position */
 	uint8_t cont_update_posn; /**< 1 means continuous update stream position */
-
-	uint8_t reserved[5];
+	uint8_t reserved0;
+	int16_t ext_data_length; /**< 0, means no extended data */
+	uint8_t reserved[2];
 	uint16_t chmap[SOF_IPC_MAX_CHANNELS];	/**< channel map - SOF_CHMAP_ */
+	uint8_t ext_data[]; /**< extended data */
 } __packed;
 
 /* PCM params info - SOF_IPC_STREAM_PCM_PARAMS */
* Unmerged path sound/soc/sof/compress.c
