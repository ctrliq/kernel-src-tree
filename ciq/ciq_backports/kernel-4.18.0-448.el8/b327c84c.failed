wifi: mac80211: replace link_id with link_conf in start/stop_ap()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Gregory Greenman <gregory.greenman@intel.com>
commit b327c84c328ed2be4dbad4f5ed7c17476fe1b3bf
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/b327c84c.failed

When calling start/stop_ap(), mac80211 already has a protected
link_conf pointer. Pass it to the driver, so it shouldn't
handle RCU protection.

	Signed-off-by: Gregory Greenman <gregory.greenman@intel.com>
	Signed-off-by: Johannes Berg <johannes.berg@intel.com>
(cherry picked from commit b327c84c328ed2be4dbad4f5ed7c17476fe1b3bf)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/wireless/intel/iwlwifi/mvm/mac80211.c
#	drivers/net/wireless/realtek/rtw88/mac80211.c
#	drivers/net/wireless/realtek/rtw89/mac80211.c
#	drivers/net/wireless/silabs/wfx/sta.c
#	drivers/net/wireless/silabs/wfx/sta.h
#	include/net/mac80211.h
#	net/mac80211/cfg.c
#	net/mac80211/driver-ops.h
#	net/mac80211/trace.h
#	net/mac80211/util.c
diff --cc drivers/net/wireless/intel/iwlwifi/mvm/mac80211.c
index dd359df49b3f,126106ea62d3..000000000000
--- a/drivers/net/wireless/intel/iwlwifi/mvm/mac80211.c
+++ b/drivers/net/wireless/intel/iwlwifi/mvm/mac80211.c
@@@ -2397,7 -2396,8 +2397,12 @@@ static void iwl_mvm_bss_info_changed_st
  }
  
  static int iwl_mvm_start_ap_ibss(struct ieee80211_hw *hw,
++<<<<<<< HEAD
 +				 struct ieee80211_vif *vif)
++=======
+ 				 struct ieee80211_vif *vif,
+ 				 struct ieee80211_bss_conf *link_conf)
++>>>>>>> b327c84c328e (wifi: mac80211: replace link_id with link_conf in start/stop_ap())
  {
  	struct iwl_mvm *mvm = IWL_MAC80211_GET_MVM(hw);
  	struct iwl_mvm_vif *mvmvif = iwl_mvm_vif_from_mac80211(vif);
@@@ -2523,8 -2523,22 +2528,27 @@@ out_unlock
  	return ret;
  }
  
++<<<<<<< HEAD
 +static void iwl_mvm_stop_ap_ibss(struct ieee80211_hw *hw,
 +				 struct ieee80211_vif *vif)
++=======
+ static int iwl_mvm_start_ap(struct ieee80211_hw *hw,
+ 			    struct ieee80211_vif *vif,
+ 			    struct ieee80211_bss_conf *link_conf)
+ {
+ 	return iwl_mvm_start_ap_ibss(hw, vif, link_conf);
+ }
+ 
+ static int iwl_mvm_start_ibss(struct ieee80211_hw *hw,
+ 			      struct ieee80211_vif *vif)
+ {
+ 	return iwl_mvm_start_ap_ibss(hw, vif, &vif->bss_conf);
+ }
+ 
+ static void iwl_mvm_stop_ap_ibss(struct ieee80211_hw *hw,
+ 				 struct ieee80211_vif *vif,
+ 				 struct ieee80211_bss_conf *link_conf)
++>>>>>>> b327c84c328e (wifi: mac80211: replace link_id with link_conf in start/stop_ap())
  {
  	struct iwl_mvm *mvm = IWL_MAC80211_GET_MVM(hw);
  	struct iwl_mvm_vif *mvmvif = iwl_mvm_vif_from_mac80211(vif);
@@@ -2587,6 -2601,19 +2611,22 @@@
  	mutex_unlock(&mvm->mutex);
  }
  
++<<<<<<< HEAD
++=======
+ static void iwl_mvm_stop_ap(struct ieee80211_hw *hw,
+ 			    struct ieee80211_vif *vif,
+ 			    struct ieee80211_bss_conf *link_conf)
+ {
+ 	iwl_mvm_stop_ap_ibss(hw, vif, link_conf);
+ }
+ 
+ static void iwl_mvm_stop_ibss(struct ieee80211_hw *hw,
+ 			      struct ieee80211_vif *vif)
+ {
+ 	iwl_mvm_stop_ap_ibss(hw, vif, &vif->bss_conf);
+ }
+ 
++>>>>>>> b327c84c328e (wifi: mac80211: replace link_id with link_conf in start/stop_ap())
  static void
  iwl_mvm_bss_info_changed_ap_ibss(struct iwl_mvm *mvm,
  				 struct ieee80211_vif *vif,
diff --cc drivers/net/wireless/realtek/rtw88/mac80211.c
index 4310362dc333,c7b98a0599d5..000000000000
--- a/drivers/net/wireless/realtek/rtw88/mac80211.c
+++ b/drivers/net/wireless/realtek/rtw88/mac80211.c
@@@ -429,7 -429,9 +429,13 @@@ static void rtw_ops_bss_info_changed(st
  	mutex_unlock(&rtwdev->mutex);
  }
  
++<<<<<<< HEAD
 +static int rtw_ops_start_ap(struct ieee80211_hw *hw, struct ieee80211_vif *vif)
++=======
+ static int rtw_ops_start_ap(struct ieee80211_hw *hw,
+ 			    struct ieee80211_vif *vif,
+ 			    struct ieee80211_bss_conf *link_conf)
++>>>>>>> b327c84c328e (wifi: mac80211: replace link_id with link_conf in start/stop_ap())
  {
  	struct rtw_dev *rtwdev = hw->priv;
  	struct rtw_chip_info *chip = rtwdev->chip;
diff --cc drivers/net/wireless/realtek/rtw89/mac80211.c
index 768b1bfca382,cef27e781ae2..000000000000
--- a/drivers/net/wireless/realtek/rtw89/mac80211.c
+++ b/drivers/net/wireless/realtek/rtw89/mac80211.c
@@@ -381,7 -381,9 +381,13 @@@ static void rtw89_ops_bss_info_changed(
  	mutex_unlock(&rtwdev->mutex);
  }
  
++<<<<<<< HEAD
 +static int rtw89_ops_start_ap(struct ieee80211_hw *hw, struct ieee80211_vif *vif)
++=======
+ static int rtw89_ops_start_ap(struct ieee80211_hw *hw,
+ 			      struct ieee80211_vif *vif,
+ 			      struct ieee80211_bss_conf *link_conf)
++>>>>>>> b327c84c328e (wifi: mac80211: replace link_id with link_conf in start/stop_ap())
  {
  	struct rtw89_dev *rtwdev = hw->priv;
  	struct rtw89_vif *rtwvif = (struct rtw89_vif *)vif->drv_priv;
@@@ -401,7 -403,8 +407,12 @@@
  }
  
  static
++<<<<<<< HEAD
 +void rtw89_ops_stop_ap(struct ieee80211_hw *hw, struct ieee80211_vif *vif)
++=======
+ void rtw89_ops_stop_ap(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
+ 		       struct ieee80211_bss_conf *link_conf)
++>>>>>>> b327c84c328e (wifi: mac80211: replace link_id with link_conf in start/stop_ap())
  {
  	struct rtw89_dev *rtwdev = hw->priv;
  	struct rtw89_vif *rtwvif = (struct rtw89_vif *)vif->drv_priv;
diff --cc include/net/mac80211.h
index f38672457468,dcb8b6dac2e1..000000000000
--- a/include/net/mac80211.h
+++ b/include/net/mac80211.h
@@@ -3964,10 -4081,20 +3964,17 @@@ struct ieee80211_ops 
  	void (*bss_info_changed)(struct ieee80211_hw *hw,
  				 struct ieee80211_vif *vif,
  				 struct ieee80211_bss_conf *info,
 -				 u64 changed);
 -	void (*vif_cfg_changed)(struct ieee80211_hw *hw,
 -				struct ieee80211_vif *vif,
 -				u64 changed);
 -	void (*link_info_changed)(struct ieee80211_hw *hw,
 -				  struct ieee80211_vif *vif,
 -				  struct ieee80211_bss_conf *info,
 -				  unsigned int link_id,
 -				  u64 changed);
 +				 u32 changed);
  
++<<<<<<< HEAD
 +	int (*start_ap)(struct ieee80211_hw *hw, struct ieee80211_vif *vif);
 +	void (*stop_ap)(struct ieee80211_hw *hw, struct ieee80211_vif *vif);
++=======
+ 	int (*start_ap)(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
+ 			struct ieee80211_bss_conf *link_conf);
+ 	void (*stop_ap)(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
+ 			struct ieee80211_bss_conf *link_conf);
++>>>>>>> b327c84c328e (wifi: mac80211: replace link_id with link_conf in start/stop_ap())
  
  	u64 (*prepare_multicast)(struct ieee80211_hw *hw,
  				 struct netdev_hw_addr_list *mc_list);
diff --cc net/mac80211/cfg.c
index f176465a1e43,9214883eb0a8..000000000000
--- a/net/mac80211/cfg.c
+++ b/net/mac80211/cfg.c
@@@ -1262,9 -1296,9 +1262,13 @@@ static int ieee80211_start_ap(struct wi
  		changed |= BSS_CHANGED_UNSOL_BCAST_PROBE_RESP;
  	}
  
++<<<<<<< HEAD
 +	err = drv_start_ap(sdata->local, sdata);
++=======
+ 	err = drv_start_ap(sdata->local, sdata, link_conf);
++>>>>>>> b327c84c328e (wifi: mac80211: replace link_id with link_conf in start/stop_ap())
  	if (err) {
 -		old = sdata_dereference(link->u.ap.beacon, sdata);
 +		old = sdata_dereference(sdata->u.ap.beacon, sdata);
  
  		if (old)
  			kfree_rcu(old, rcu_head);
@@@ -1409,7 -1457,7 +1413,11 @@@ static int ieee80211_stop_ap(struct wip
  				   GFP_KERNEL);
  	}
  
++<<<<<<< HEAD
 +	drv_stop_ap(sdata->local, sdata);
++=======
+ 	drv_stop_ap(sdata->local, sdata, link_conf);
++>>>>>>> b327c84c328e (wifi: mac80211: replace link_id with link_conf in start/stop_ap())
  
  	/* free all potentially still buffered bcast frames */
  	local->total_ps_buffered -= skb_queue_len(&sdata->u.ap.ps.bc_buf);
diff --cc net/mac80211/driver-ops.h
index 173a201d5e6d,a04a88d122b7..000000000000
--- a/net/mac80211/driver-ops.h
+++ b/net/mac80211/driver-ops.h
@@@ -960,7 -986,8 +960,12 @@@ int drv_switch_vif_chanctx(struct ieee8
  			   int n_vifs, enum ieee80211_chanctx_switch_mode mode);
  
  static inline int drv_start_ap(struct ieee80211_local *local,
++<<<<<<< HEAD
 +			       struct ieee80211_sub_if_data *sdata)
++=======
+ 			       struct ieee80211_sub_if_data *sdata,
+ 			       struct ieee80211_bss_conf *link_conf)
++>>>>>>> b327c84c328e (wifi: mac80211: replace link_id with link_conf in start/stop_ap())
  {
  	int ret = 0;
  
@@@ -969,22 -999,26 +977,42 @@@
  	if (!check_sdata_in_driver(sdata))
  		return -EIO;
  
++<<<<<<< HEAD
 +	trace_drv_start_ap(local, sdata, &sdata->vif.bss_conf);
 +	if (local->ops->start_ap)
 +		ret = local->ops->start_ap(&local->hw, &sdata->vif);
++=======
+ 	trace_drv_start_ap(local, sdata, link_conf);
+ 	if (local->ops->start_ap)
+ 		ret = local->ops->start_ap(&local->hw, &sdata->vif, link_conf);
++>>>>>>> b327c84c328e (wifi: mac80211: replace link_id with link_conf in start/stop_ap())
  	trace_drv_return_int(local, ret);
  	return ret;
  }
  
  static inline void drv_stop_ap(struct ieee80211_local *local,
++<<<<<<< HEAD
 +			       struct ieee80211_sub_if_data *sdata)
++=======
+ 			       struct ieee80211_sub_if_data *sdata,
+ 			       struct ieee80211_bss_conf *link_conf)
++>>>>>>> b327c84c328e (wifi: mac80211: replace link_id with link_conf in start/stop_ap())
  {
+ 	/* make sure link_conf is protected */
+ 	sdata_assert_lock(sdata);
+ 
  	if (!check_sdata_in_driver(sdata))
  		return;
  
++<<<<<<< HEAD
 +	trace_drv_stop_ap(local, sdata);
 +	if (local->ops->stop_ap)
 +		local->ops->stop_ap(&local->hw, &sdata->vif);
++=======
+ 	trace_drv_stop_ap(local, sdata, link_conf);
+ 	if (local->ops->stop_ap)
+ 		local->ops->stop_ap(&local->hw, &sdata->vif, link_conf);
++>>>>>>> b327c84c328e (wifi: mac80211: replace link_id with link_conf in start/stop_ap())
  	trace_drv_return_void(local);
  }
  
diff --cc net/mac80211/trace.h
index 17e7760d8348,75e5c1376351..000000000000
--- a/net/mac80211/trace.h
+++ b/net/mac80211/trace.h
@@@ -1710,9 -1754,9 +1710,15 @@@ DEFINE_EVENT(local_sdata_chanctx, drv_u
  TRACE_EVENT(drv_start_ap,
  	TP_PROTO(struct ieee80211_local *local,
  		 struct ieee80211_sub_if_data *sdata,
++<<<<<<< HEAD
 +		 struct ieee80211_bss_conf *info),
 +
 +	TP_ARGS(local, sdata, info),
++=======
+ 		 struct ieee80211_bss_conf *link_conf),
+ 
+ 	TP_ARGS(local, sdata, link_conf),
++>>>>>>> b327c84c328e (wifi: mac80211: replace link_id with link_conf in start/stop_ap())
  
  	TP_STRUCT__entry(
  		LOCAL_ENTRY
@@@ -1726,10 -1771,13 +1732,20 @@@
  	TP_fast_assign(
  		LOCAL_ASSIGN;
  		VIF_ASSIGN;
++<<<<<<< HEAD
 +		__entry->dtimper = info->dtim_period;
 +		__entry->bcnint = info->beacon_int;
 +		memcpy(__get_dynamic_array(ssid), info->ssid, info->ssid_len);
 +		__entry->hidden_ssid = info->hidden_ssid;
++=======
+ 		__entry->link_id = link_conf->link_id;
+ 		__entry->dtimper = link_conf->dtim_period;
+ 		__entry->bcnint = link_conf->beacon_int;
+ 		__entry->hidden_ssid = link_conf->hidden_ssid;
+ 		memcpy(__get_dynamic_array(ssid),
+ 		       sdata->vif.cfg.ssid,
+ 		       sdata->vif.cfg.ssid_len);
++>>>>>>> b327c84c328e (wifi: mac80211: replace link_id with link_conf in start/stop_ap())
  	),
  
  	TP_printk(
@@@ -1738,10 -1786,29 +1754,34 @@@
  	)
  );
  
 -TRACE_EVENT(drv_stop_ap,
 +DEFINE_EVENT(local_sdata_evt, drv_stop_ap,
  	TP_PROTO(struct ieee80211_local *local,
++<<<<<<< HEAD
 +		 struct ieee80211_sub_if_data *sdata),
 +	TP_ARGS(local, sdata)
++=======
+ 		 struct ieee80211_sub_if_data *sdata,
+ 		 struct ieee80211_bss_conf *link_conf),
+ 
+ 	TP_ARGS(local, sdata, link_conf),
+ 
+ 	TP_STRUCT__entry(
+ 		LOCAL_ENTRY
+ 		VIF_ENTRY
+ 		__field(u32, link_id)
+ 	),
+ 
+ 	TP_fast_assign(
+ 		LOCAL_ASSIGN;
+ 		VIF_ASSIGN;
+ 		__entry->link_id = link_conf->link_id;
+ 	),
+ 
+ 	TP_printk(
+ 		LOCAL_PR_FMT  VIF_PR_FMT " link id %u",
+ 		LOCAL_PR_ARG, VIF_PR_ARG, __entry->link_id
+ 	)
++>>>>>>> b327c84c328e (wifi: mac80211: replace link_id with link_conf in start/stop_ap())
  );
  
  TRACE_EVENT(drv_reconfig_complete,
diff --cc net/mac80211/util.c
index 3f799fa971a3,cb0dd874c5df..000000000000
--- a/net/mac80211/util.c
+++ b/net/mac80211/util.c
@@@ -2564,8 -2578,9 +2564,14 @@@ int ieee80211_reconfig(struct ieee80211
  			if (sdata->vif.type == NL80211_IFTYPE_AP) {
  				changed |= BSS_CHANGED_AP_PROBE_RESP;
  
++<<<<<<< HEAD
 +				if (rcu_access_pointer(sdata->u.ap.beacon))
 +					drv_start_ap(local, sdata);
++=======
+ 				if (rcu_access_pointer(sdata->deflink.u.ap.beacon))
+ 					drv_start_ap(local, sdata,
+ 						     sdata->deflink.conf);
++>>>>>>> b327c84c328e (wifi: mac80211: replace link_id with link_conf in start/stop_ap())
  			}
  			fallthrough;
  		case NL80211_IFTYPE_MESH_POINT:
* Unmerged path drivers/net/wireless/silabs/wfx/sta.c
* Unmerged path drivers/net/wireless/silabs/wfx/sta.h
* Unmerged path drivers/net/wireless/intel/iwlwifi/mvm/mac80211.c
* Unmerged path drivers/net/wireless/realtek/rtw88/mac80211.c
* Unmerged path drivers/net/wireless/realtek/rtw89/mac80211.c
* Unmerged path drivers/net/wireless/silabs/wfx/sta.c
* Unmerged path drivers/net/wireless/silabs/wfx/sta.h
* Unmerged path include/net/mac80211.h
* Unmerged path net/mac80211/cfg.c
* Unmerged path net/mac80211/driver-ops.h
* Unmerged path net/mac80211/trace.h
* Unmerged path net/mac80211/util.c
