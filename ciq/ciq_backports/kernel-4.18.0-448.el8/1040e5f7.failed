scsi: qla2xxx: edif: Remove old doorbell interface

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Quinn Tran <qutran@marvell.com>
commit 1040e5f75ddf56fdd571a2a14b4d1a9e8ed846a9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/1040e5f7.failed

Recently driver has implemented a new doorbell mechanism via bsg.  The new
doorbell tells driver the exact buffer size application has where driver
can fill it up with events. The old doorbell guestimated application buffer
size is 256.

Remove duplicate functionality, the application has moved on to the new
doorbell interface.

Link: https://lore.kernel.org/r/20220607044627.19563-9-njavali@marvell.com
	Signed-off-by: Quinn Tran <qutran@marvell.com>
	Signed-off-by: Nilesh Javali <njavali@marvell.com>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit 1040e5f75ddf56fdd571a2a14b4d1a9e8ed846a9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/qla2xxx/qla_attr.c
#	drivers/scsi/qla2xxx/qla_edif.c
diff --cc drivers/scsi/qla2xxx/qla_attr.c
index ea2b491407ee,8b87fefda423..000000000000
--- a/drivers/scsi/qla2xxx/qla_attr.c
+++ b/drivers/scsi/qla2xxx/qla_attr.c
@@@ -2380,55 -2476,54 +2380,104 @@@ static DEVICE_ATTR(port_speed, 0644, ql
      qla2x00_port_speed_store);
  static DEVICE_ATTR(port_no, 0444, qla2x00_port_no_show, NULL);
  static DEVICE_ATTR(fw_attr, 0444, qla2x00_fw_attr_show, NULL);
- static DEVICE_ATTR_RO(edif_doorbell);
  
++<<<<<<< HEAD
 +
 +struct device_attribute *qla2x00_host_attrs[] = {
 +	&dev_attr_driver_version,
 +	&dev_attr_fw_version,
 +	&dev_attr_serial_num,
 +	&dev_attr_isp_name,
 +	&dev_attr_isp_id,
 +	&dev_attr_model_name,
 +	&dev_attr_model_desc,
 +	&dev_attr_pci_info,
 +	&dev_attr_link_state,
 +	&dev_attr_zio,
 +	&dev_attr_zio_timer,
 +	&dev_attr_beacon,
 +	&dev_attr_optrom_bios_version,
 +	&dev_attr_optrom_efi_version,
 +	&dev_attr_optrom_fcode_version,
 +	&dev_attr_optrom_fw_version,
 +	&dev_attr_84xx_fw_version,
 +	&dev_attr_total_isp_aborts,
 +	&dev_attr_serdes_version,
 +	&dev_attr_mpi_version,
 +	&dev_attr_phy_version,
 +	&dev_attr_flash_block_size,
 +	&dev_attr_vlan_id,
 +	&dev_attr_vn_port_mac_address,
 +	&dev_attr_fabric_param,
 +	&dev_attr_fw_state,
 +	&dev_attr_optrom_gold_fw_version,
 +	&dev_attr_thermal_temp,
 +	&dev_attr_diag_requests,
 +	&dev_attr_diag_megabytes,
 +	&dev_attr_fw_dump_size,
 +	&dev_attr_allow_cna_fw_dump,
 +	&dev_attr_pep_version,
 +	&dev_attr_min_supported_speed,
 +	&dev_attr_max_supported_speed,
 +	&dev_attr_zio_threshold,
 +	&dev_attr_dif_bundle_statistics,
 +	&dev_attr_port_speed,
 +	&dev_attr_port_no,
 +	&dev_attr_fw_attr,
 +	&dev_attr_edif_doorbell,
 +	&dev_attr_mpi_pause,
 +	NULL, /* reserve for qlini_mode */
 +	NULL, /* reserve for ql2xiniexchg */
 +	NULL, /* reserve for ql2xexchoffld */
++=======
+ static struct attribute *qla2x00_host_attrs[] = {
+ 	&dev_attr_driver_version.attr,
+ 	&dev_attr_fw_version.attr,
+ 	&dev_attr_serial_num.attr,
+ 	&dev_attr_isp_name.attr,
+ 	&dev_attr_isp_id.attr,
+ 	&dev_attr_model_name.attr,
+ 	&dev_attr_model_desc.attr,
+ 	&dev_attr_pci_info.attr,
+ 	&dev_attr_link_state.attr,
+ 	&dev_attr_zio.attr,
+ 	&dev_attr_zio_timer.attr,
+ 	&dev_attr_beacon.attr,
+ 	&dev_attr_beacon_config.attr,
+ 	&dev_attr_optrom_bios_version.attr,
+ 	&dev_attr_optrom_efi_version.attr,
+ 	&dev_attr_optrom_fcode_version.attr,
+ 	&dev_attr_optrom_fw_version.attr,
+ 	&dev_attr_84xx_fw_version.attr,
+ 	&dev_attr_total_isp_aborts.attr,
+ 	&dev_attr_serdes_version.attr,
+ 	&dev_attr_mpi_version.attr,
+ 	&dev_attr_phy_version.attr,
+ 	&dev_attr_flash_block_size.attr,
+ 	&dev_attr_vlan_id.attr,
+ 	&dev_attr_vn_port_mac_address.attr,
+ 	&dev_attr_fabric_param.attr,
+ 	&dev_attr_fw_state.attr,
+ 	&dev_attr_optrom_gold_fw_version.attr,
+ 	&dev_attr_thermal_temp.attr,
+ 	&dev_attr_diag_requests.attr,
+ 	&dev_attr_diag_megabytes.attr,
+ 	&dev_attr_fw_dump_size.attr,
+ 	&dev_attr_allow_cna_fw_dump.attr,
+ 	&dev_attr_pep_version.attr,
+ 	&dev_attr_min_supported_speed.attr,
+ 	&dev_attr_max_supported_speed.attr,
+ 	&dev_attr_zio_threshold.attr,
+ 	&dev_attr_dif_bundle_statistics.attr,
+ 	&dev_attr_port_speed.attr,
+ 	&dev_attr_port_no.attr,
+ 	&dev_attr_fw_attr.attr,
+ 	&dev_attr_dport_diagnostics.attr,
+ 	&dev_attr_mpi_pause.attr,
+ 	&dev_attr_qlini_mode.attr,
+ 	&dev_attr_ql2xiniexchg.attr,
+ 	&dev_attr_ql2xexchoffld.attr,
++>>>>>>> 1040e5f75ddf (scsi: qla2xxx: edif: Remove old doorbell interface)
  	NULL,
  };
  
diff --cc drivers/scsi/qla2xxx/qla_edif.c
index 32529fd74b19,3ece46ae9d6b..000000000000
--- a/drivers/scsi/qla2xxx/qla_edif.c
+++ b/drivers/scsi/qla2xxx/qla_edif.c
@@@ -2145,87 -2260,11 +2145,90 @@@ qla_edif_timer(scsi_qla_host_t *vha
  			ha->edif_post_stop_cnt_down = 60;
  		}
  	}
 +}
 +
++<<<<<<< HEAD
 +/*
 + * app uses separate thread to read this. It'll wait until the doorbell
 + * is rung by the driver or the max wait time has expired
 + */
 +ssize_t
 +edif_doorbell_show(struct device *dev, struct device_attribute *attr,
 +		char *buf)
 +{
 +	scsi_qla_host_t *vha = shost_priv(class_to_shost(dev));
 +	struct edb_node	*dbnode = NULL;
 +	struct edif_app_dbell *ap = (struct edif_app_dbell *)buf;
 +	uint32_t dat_siz, buf_size, sz;
 +
 +	/* TODO: app currently hardcoded to 256. Will transition to bsg */
 +	sz = 256;
 +
 +	/* stop new threads from waiting if we're not init'd */
 +	if (DBELL_INACTIVE(vha)) {
 +		ql_dbg(ql_dbg_edif + ql_dbg_verbose, vha, 0x09122,
 +		    "%s error - edif db not enabled\n", __func__);
 +		return 0;
 +	}
 +
 +	if (!vha->hw->flags.edif_enabled) {
 +		/* edif not enabled */
 +		ql_dbg(ql_dbg_edif + ql_dbg_verbose, vha, 0x09122,
 +		    "%s error - edif not enabled\n", __func__);
 +		return -1;
 +	}
 +
 +	buf_size = 0;
 +	while ((sz - buf_size) >= sizeof(struct edb_node)) {
 +		/* remove the next item from the doorbell list */
 +		dat_siz = 0;
 +		dbnode = qla_edb_getnext(vha);
 +		if (dbnode) {
 +			ap->event_code = dbnode->ntype;
 +			switch (dbnode->ntype) {
 +			case VND_CMD_AUTH_STATE_SESSION_SHUTDOWN:
 +			case VND_CMD_AUTH_STATE_NEEDED:
 +				ap->port_id = dbnode->u.plogi_did;
 +				dat_siz += sizeof(ap->port_id);
 +				break;
 +			case VND_CMD_AUTH_STATE_ELS_RCVD:
 +				ap->port_id = dbnode->u.els_sid;
 +				dat_siz += sizeof(ap->port_id);
 +				break;
 +			case VND_CMD_AUTH_STATE_SAUPDATE_COMPL:
 +				ap->port_id = dbnode->u.sa_aen.port_id;
 +				memcpy(ap->event_data, &dbnode->u,
 +						sizeof(struct edif_sa_update_aen));
 +				dat_siz += sizeof(struct edif_sa_update_aen);
 +				break;
 +			default:
 +				/* unknown node type, rtn unknown ntype */
 +				ap->event_code = VND_CMD_AUTH_STATE_UNDEF;
 +				memcpy(ap->event_data, &dbnode->ntype, 4);
 +				dat_siz += 4;
 +				break;
 +			}
 +
 +			ql_dbg(ql_dbg_edif, vha, 0x09102,
 +				"%s Doorbell consumed : type=%d %p\n",
 +				__func__, dbnode->ntype, dbnode);
 +			/* we're done with the db node, so free it up */
 +			qla_edb_node_free(vha, dbnode);
 +			kfree(dbnode);
 +		} else {
 +			break;
 +		}
  
 -	if (vha->e_dbell.dbell_bsg_job && time_after_eq(jiffies, vha->e_dbell.bsg_expire))
 -		qla_edif_dbell_bsg_done(vha);
 +		ap->event_data_size = dat_siz;
 +		/* 8bytes = ap->event_code + ap->event_data_size */
 +		buf_size += dat_siz + 8;
 +		ap = (struct edif_app_dbell *)(buf + buf_size);
 +	}
 +	return buf_size;
  }
  
++=======
++>>>>>>> 1040e5f75ddf (scsi: qla2xxx: edif: Remove old doorbell interface)
  static void qla_noop_sp_done(srb_t *sp, int res)
  {
  	sp->fcport->flags &= ~(FCF_ASYNC_SENT | FCF_ASYNC_ACTIVE);
* Unmerged path drivers/scsi/qla2xxx/qla_attr.c
* Unmerged path drivers/scsi/qla2xxx/qla_edif.c
diff --git a/drivers/scsi/qla2xxx/qla_gbl.h b/drivers/scsi/qla2xxx/qla_gbl.h
index 5503374c1efa..908e3098dc1d 100644
--- a/drivers/scsi/qla2xxx/qla_gbl.h
+++ b/drivers/scsi/qla2xxx/qla_gbl.h
@@ -991,7 +991,6 @@ fc_port_t *qla2x00_find_fcport_by_pid(scsi_qla_host_t *vha, port_id_t *id);
 void qla_edb_eventcreate(scsi_qla_host_t *vha, uint32_t dbtype, uint32_t data, uint32_t data2,
 		fc_port_t *fcport);
 void qla_edb_stop(scsi_qla_host_t *vha);
-ssize_t edif_doorbell_show(struct device *dev, struct device_attribute *attr, char *buf);
 int32_t qla_edif_app_mgmt(struct bsg_job *bsg_job);
 void qla_enode_init(scsi_qla_host_t *vha);
 void qla_enode_stop(scsi_qla_host_t *vha);
