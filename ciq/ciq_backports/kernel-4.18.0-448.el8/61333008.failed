selftests/xsk: Introduce XDP prog load based on existing AF_XDP socket

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Maciej Fijalkowski <maciej.fijalkowski@intel.com>
commit 61333008d01e18716a7050fdc9479cc8d6e63883
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/61333008.failed

Currently, xsk_setup_xdp_prog() uses anonymous xsk_socket struct which
means that during xsk_create_bpf_link() call, xsk->config.xdp_flags is
always 0. This in turn means that from xdpxceiver it is impossible to
use xdpgeneric attachment, so since commit 3b22523bca02 ("selftests,
xsk: Fix bpf_res cleanup test") we were not testing SKB mode at all.

To fix this, introduce a function, called xsk_setup_xdp_prog_xsk(), that
will load XDP prog based on the existing xsk_socket, so that xsk
context's refcount is correctly bumped and flags from application side
are respected. Use this from xdpxceiver side so we get coverage of
generic and native XDP program attach points.

	Signed-off-by: Maciej Fijalkowski <maciej.fijalkowski@intel.com>
	Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
	Acked-by: Magnus Karlsson <magnus.karlsson@intel.com>
Link: https://lore.kernel.org/bpf/20220629143458.934337-3-maciej.fijalkowski@intel.com
(cherry picked from commit 61333008d01e18716a7050fdc9479cc8d6e63883)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/lib/bpf/xsk.h
diff --cc tools/lib/bpf/xsk.h
index 01c12dca9c10,997723b0bfb2..000000000000
--- a/tools/lib/bpf/xsk.h
+++ b/tools/lib/bpf/xsk.h
@@@ -263,10 -269,9 +263,16 @@@ struct xsk_umem_config 
  	__u32 flags;
  };
  
++<<<<<<< HEAD:tools/lib/bpf/xsk.h
 +LIBBPF_API int xsk_setup_xdp_prog(int ifindex,
 +				  int *xsks_map_fd);
 +LIBBPF_API int xsk_socket__update_xskmap(struct xsk_socket *xsk,
 +					 int xsks_map_fd);
++=======
+ int xsk_setup_xdp_prog_xsk(struct xsk_socket *xsk, int *xsks_map_fd);
+ int xsk_setup_xdp_prog(int ifindex, int *xsks_map_fd);
+ int xsk_socket__update_xskmap(struct xsk_socket *xsk, int xsks_map_fd);
++>>>>>>> 61333008d01e (selftests/xsk: Introduce XDP prog load based on existing AF_XDP socket):tools/testing/selftests/bpf/xsk.h
  
  /* Flags for the libbpf_flags field. */
  #define XSK_LIBBPF_FLAGS__INHIBIT_PROG_LOAD (1 << 0)
diff --git a/tools/lib/bpf/xsk.c b/tools/lib/bpf/xsk.c
index e9b619aa0cdf..1550c0dcd0bc 100644
--- a/tools/lib/bpf/xsk.c
+++ b/tools/lib/bpf/xsk.c
@@ -892,6 +892,11 @@ static int __xsk_setup_xdp_prog(struct xsk_socket *_xdp, int *xsks_map_fd)
 	return err;
 }
 
+int xsk_setup_xdp_prog_xsk(struct xsk_socket *xsk, int *xsks_map_fd)
+{
+	return __xsk_setup_xdp_prog(xsk, xsks_map_fd);
+}
+
 static struct xsk_ctx *xsk_get_ctx(struct xsk_umem *umem, int ifindex,
 				   __u32 queue_id)
 {
* Unmerged path tools/lib/bpf/xsk.h
diff --git a/tools/testing/selftests/bpf/xdpxceiver.c b/tools/testing/selftests/bpf/xdpxceiver.c
index 64a5d0a6ac51..aaa5a2f42f2d 100644
--- a/tools/testing/selftests/bpf/xdpxceiver.c
+++ b/tools/testing/selftests/bpf/xdpxceiver.c
@@ -992,7 +992,7 @@ static void thread_common_ops(struct test_spec *test, struct ifobject *ifobject)
 	if (!ifindex)
 		exit_with_error(errno);
 
-	ret = xsk_setup_xdp_prog(ifindex, &ifobject->xsk_map_fd);
+	ret = xsk_setup_xdp_prog_xsk(ifobject->xsk->xsk, &ifobject->xsk_map_fd);
 	if (ret)
 		exit_with_error(-ret);
 
