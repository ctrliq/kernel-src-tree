mm/arm64: use general page fault accounting

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Peter Xu <peterx@redhat.com>
commit 6a1bb025d28e1026fead73b7b33e2dfccba3f4d2
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/6a1bb025.failed

Use the general page fault accounting by passing regs into
handle_mm_fault().  It naturally solve the issue of multiple page fault
accounting when page fault retry happened.  To do this, we pass pt_regs
pointer into __do_page_fault().

	Signed-off-by: Peter Xu <peterx@redhat.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Acked-by: Will Deacon <will@kernel.org>
	Cc: Catalin Marinas <catalin.marinas@arm.com>
Link: http://lkml.kernel.org/r/20200707225021.200906-6-peterx@redhat.com
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 6a1bb025d28e1026fead73b7b33e2dfccba3f4d2)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/arm64/mm/fault.c
diff --cc arch/arm64/mm/fault.c
index 4b9c60b9ef8f,f07333e86c2f..000000000000
--- a/arch/arm64/mm/fault.c
+++ b/arch/arm64/mm/fault.c
@@@ -455,7 -429,7 +456,11 @@@ static vm_fault_t __do_page_fault(struc
  	 */
  	if (!(vma->vm_flags & vm_flags))
  		return VM_FAULT_BADACCESS;
++<<<<<<< HEAD
 +	return handle_mm_fault(vma, addr & PAGE_MASK, mm_flags);
++=======
+ 	return handle_mm_fault(vma, addr & PAGE_MASK, mm_flags, regs);
++>>>>>>> 6a1bb025d28e (mm/arm64: use general page fault accounting)
  }
  
  static bool is_el0_instruction_abort(unsigned int esr)
@@@ -477,11 -451,11 +482,16 @@@ static int __kprobes do_page_fault(unsi
  {
  	const struct fault_info *inf;
  	struct mm_struct *mm = current->mm;
++<<<<<<< HEAD
 +	vm_fault_t fault, major = 0;
 +	unsigned long vm_flags = VM_READ | VM_WRITE | VM_EXEC;
++=======
+ 	vm_fault_t fault;
+ 	unsigned long vm_flags = VM_ACCESS_FLAGS;
++>>>>>>> 6a1bb025d28e (mm/arm64: use general page fault accounting)
  	unsigned int mm_flags = FAULT_FLAG_DEFAULT;
  
 -	if (kprobe_page_fault(regs, esr))
 +	if (notify_page_fault(regs, esr))
  		return 0;
  
  	/*
* Unmerged path arch/arm64/mm/fault.c
