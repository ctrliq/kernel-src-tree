net: Handle l3mdev in ip_tunnel_init_flow

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author David Ahern <dsahern@kernel.org>
commit db53cd3d88dc328dea2e968c9c8d3b4294a8a674
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/db53cd3d.failed

Ido reported that the commit referenced in the Fixes tag broke
a gre use case with dummy devices. Add a check to ip_tunnel_init_flow
to see if the oif is an l3mdev port and if so set the oif to 0 to
avoid the oif comparison in fib_lookup_good_nhc.

Fixes: 40867d74c374 ("net: Add l3mdev index to flow struct and avoid oif reset for port devices")
	Reported-by: Ido Schimmel <idosch@idosch.org>
	Signed-off-by: David Ahern <dsahern@kernel.org>
	Signed-off-by: Jakub Kicinski <kuba@kernel.org>
(cherry picked from commit db53cd3d88dc328dea2e968c9c8d3b4294a8a674)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlxsw/spectrum_span.c
#	include/net/ip_tunnels.h
#	net/ipv4/ip_gre.c
#	net/ipv4/ip_tunnel.c
diff --cc drivers/net/ethernet/mellanox/mlxsw/spectrum_span.c
index 06b2601e5cc3,fe663b0ab708..000000000000
--- a/drivers/net/ethernet/mellanox/mlxsw/spectrum_span.c
+++ b/drivers/net/ethernet/mellanox/mlxsw/spectrum_span.c
@@@ -424,7 -423,7 +424,11 @@@ mlxsw_sp_span_gretap4_route(const struc
  
  	parms = mlxsw_sp_ipip_netdev_parms4(to_dev);
  	ip_tunnel_init_flow(&fl4, parms.iph.protocol, *daddrp, *saddrp,
++<<<<<<< HEAD
 +			    0, 0, parms.link, tun->fwmark);
++=======
+ 			    0, 0, dev_net(to_dev), parms.link, tun->fwmark, 0);
++>>>>>>> db53cd3d88dc (net: Handle l3mdev in ip_tunnel_init_flow)
  
  	rt = ip_route_output_key(tun->net, &fl4);
  	if (IS_ERR(rt))
diff --cc include/net/ip_tunnels.h
index 1578aca19cd8,88dee57eac8a..000000000000
--- a/include/net/ip_tunnels.h
+++ b/include/net/ip_tunnels.h
@@@ -240,11 -243,18 +240,23 @@@ static inline __be32 tunnel_id_to_key32
  static inline void ip_tunnel_init_flow(struct flowi4 *fl4,
  				       int proto,
  				       __be32 daddr, __be32 saddr,
++<<<<<<< HEAD
 +				       __be32 key, __u8 tos, int oif,
 +				       __u32 mark)
++=======
+ 				       __be32 key, __u8 tos,
+ 				       struct net *net, int oif,
+ 				       __u32 mark, __u32 tun_inner_hash)
++>>>>>>> db53cd3d88dc (net: Handle l3mdev in ip_tunnel_init_flow)
  {
  	memset(fl4, 0, sizeof(*fl4));
- 	fl4->flowi4_oif = oif;
+ 
+ 	if (oif) {
+ 		fl4->flowi4_l3mdev = l3mdev_master_upper_ifindex_by_index_rcu(net, oif);
+ 		/* Legacy VRF/l3mdev use case */
+ 		fl4->flowi4_oif = fl4->flowi4_l3mdev ? 0 : oif;
+ 	}
+ 
  	fl4->daddr = daddr;
  	fl4->saddr = saddr;
  	fl4->flowi4_tos = tos;
diff --cc net/ipv4/ip_gre.c
index 32fdd1fc7154,365caebf51ab..000000000000
--- a/net/ipv4/ip_gre.c
+++ b/net/ipv4/ip_gre.c
@@@ -591,7 -605,8 +591,12 @@@ static int gre_fill_metadata_dst(struc
  	key = &info->key;
  	ip_tunnel_init_flow(&fl4, IPPROTO_GRE, key->u.ipv4.dst, key->u.ipv4.src,
  			    tunnel_id_to_key32(key->tun_id),
++<<<<<<< HEAD
 +			    key->tos & ~INET_ECN_MASK, 0, skb->mark);
++=======
+ 			    key->tos & ~INET_ECN_MASK, dev_net(dev), 0,
+ 			    skb->mark, skb_get_hash(skb));
++>>>>>>> db53cd3d88dc (net: Handle l3mdev in ip_tunnel_init_flow)
  	rt = ip_route_output_key(dev_net(dev), &fl4);
  	if (IS_ERR(rt))
  		return PTR_ERR(rt);
diff --cc net/ipv4/ip_tunnel.c
index 7f801f0f1d06,94017a8c3994..000000000000
--- a/net/ipv4/ip_tunnel.c
+++ b/net/ipv4/ip_tunnel.c
@@@ -307,8 -294,8 +307,13 @@@ static int ip_tunnel_bind_dev(struct ne
  
  		ip_tunnel_init_flow(&fl4, iph->protocol, iph->daddr,
  				    iph->saddr, tunnel->parms.o_key,
++<<<<<<< HEAD
 +				    RT_TOS(iph->tos), tunnel->parms.link,
 +				    tunnel->fwmark);
++=======
+ 				    RT_TOS(iph->tos), dev_net(dev),
+ 				    tunnel->parms.link, tunnel->fwmark, 0);
++>>>>>>> db53cd3d88dc (net: Handle l3mdev in ip_tunnel_init_flow)
  		rt = ip_route_output_key(tunnel->net, &fl4);
  
  		if (!IS_ERR(rt)) {
@@@ -585,7 -570,7 +590,11 @@@ void ip_md_tunnel_xmit(struct sk_buff *
  	}
  	ip_tunnel_init_flow(&fl4, proto, key->u.ipv4.dst, key->u.ipv4.src,
  			    tunnel_id_to_key32(key->tun_id), RT_TOS(tos),
++<<<<<<< HEAD
 +			    0, skb->mark);
++=======
+ 			    dev_net(dev), 0, skb->mark, skb_get_hash(skb));
++>>>>>>> db53cd3d88dc (net: Handle l3mdev in ip_tunnel_init_flow)
  	if (tunnel->encap.type != TUNNEL_ENCAP_NONE)
  		goto tx_error;
  
@@@ -729,8 -726,9 +738,14 @@@ void ip_tunnel_xmit(struct sk_buff *skb
  	}
  
  	ip_tunnel_init_flow(&fl4, protocol, dst, tnl_params->saddr,
++<<<<<<< HEAD
 +			    tunnel->parms.o_key, RT_TOS(tos), tunnel->parms.link,
 +			    tunnel->fwmark);
++=======
+ 			    tunnel->parms.o_key, RT_TOS(tos),
+ 			    dev_net(dev), tunnel->parms.link,
+ 			    tunnel->fwmark, skb_get_hash(skb));
++>>>>>>> db53cd3d88dc (net: Handle l3mdev in ip_tunnel_init_flow)
  
  	if (ip_tunnel_encap(skb, tunnel, &protocol, &fl4) < 0)
  		goto tx_error;
* Unmerged path drivers/net/ethernet/mellanox/mlxsw/spectrum_span.c
* Unmerged path include/net/ip_tunnels.h
* Unmerged path net/ipv4/ip_gre.c
* Unmerged path net/ipv4/ip_tunnel.c
