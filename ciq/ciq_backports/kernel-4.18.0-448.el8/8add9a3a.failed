efi: Simplify arch_efi_call_virt() macro

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Sudeep Holla <sudeep.holla@arm.com>
commit 8add9a3a2243166f8f60fc20e876caaf30a333f7
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/8add9a3a.failed

Currently, the arch_efi_call_virt() assumes all users of it will have
defined a type 'efi_##f##_t' to make use of it.

Simplify the arch_efi_call_virt() macro by eliminating the explicit
need for efi_##f##_t type for every user of this macro.

	Signed-off-by: Sudeep Holla <sudeep.holla@arm.com>
	Acked-by: Russell King (Oracle) <rmk+kernel@armlinux.org.uk>
[ardb: apply Sudeep's ARM fix to i686, Loongarch and RISC-V too]
	Signed-off-by: Ard Biesheuvel <ardb@kernel.org>
(cherry picked from commit 8add9a3a2243166f8f60fc20e876caaf30a333f7)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/loongarch/include/asm/efi.h
#	arch/riscv/include/asm/efi.h
#	arch/x86/include/asm/efi.h
diff --cc arch/x86/include/asm/efi.h
index fad80fa08378,9a63dd1b794c..000000000000
--- a/arch/x86/include/asm/efi.h
+++ b/arch/x86/include/asm/efi.h
@@@ -59,17 -100,6 +59,20 @@@ extern asmlinkage unsigned long efi_cal
  	efi_fpu_end();							\
  })
  
++<<<<<<< HEAD
 +
 +/*
 + * Wrap all the virtual calls in a way that forces the parameters on the stack.
 + */
 +#define arch_efi_call_virt(p, f, args...)				\
 +({									\
 +	((efi_##f##_t __attribute__((regparm(0)))*) p->f)(args);	\
 +})
 +
 +#define efi_ioremap(addr, size, type, attr)	ioremap_cache(addr, size)
 +
++=======
++>>>>>>> 8add9a3a2243 (efi: Simplify arch_efi_call_virt() macro)
  #else /* !CONFIG_X86_32 */
  
  #define EFI_LOADER_SIGNATURE	"EL64"
@@@ -91,11 -116,16 +94,21 @@@ struct efi_scratch 
  	efi_sync_low_kernel_mappings();					\
  	efi_fpu_begin();						\
  	firmware_restrict_branch_speculation_start();			\
 -	efi_enter_mm();							\
 +	efi_switch_mm(&efi_mm);						\
  })
  
++<<<<<<< HEAD
 +#define arch_efi_call_virt(p, f, args...)				\
 +	efi_call((void *)p->f, args)					\
++=======
+ #undef arch_efi_call_virt
+ #define arch_efi_call_virt(p, f, args...) ({				\
+ 	u64 ret, ibt = ibt_save();					\
+ 	ret = efi_call((void *)p->f, args);				\
+ 	ibt_restore(ibt);						\
+ 	ret;								\
+ })
++>>>>>>> 8add9a3a2243 (efi: Simplify arch_efi_call_virt() macro)
  
  #define arch_efi_call_virt_teardown()					\
  ({									\
* Unmerged path arch/loongarch/include/asm/efi.h
* Unmerged path arch/riscv/include/asm/efi.h
diff --git a/arch/arm/include/asm/efi.h b/arch/arm/include/asm/efi.h
index 388937e553db..db316039ebdd 100644
--- a/arch/arm/include/asm/efi.h
+++ b/arch/arm/include/asm/efi.h
@@ -28,13 +28,6 @@ int efi_set_mapping_permissions(struct mm_struct *mm, efi_memory_desc_t *md);
 #define arch_efi_call_virt_setup()	efi_virtmap_load()
 #define arch_efi_call_virt_teardown()	efi_virtmap_unload()
 
-#define arch_efi_call_virt(p, f, args...)				\
-({									\
-	efi_##f##_t *__f;						\
-	__f = p->f;							\
-	__f(args);							\
-})
-
 #define ARCH_EFI_IRQ_FLAGS_MASK \
 	(PSR_J_BIT | PSR_E_BIT | PSR_A_BIT | PSR_I_BIT | PSR_F_BIT | \
 	 PSR_T_BIT | MODE_MASK)
diff --git a/arch/arm64/include/asm/efi.h b/arch/arm64/include/asm/efi.h
index 591f4a06e821..6bb1336c32b3 100644
--- a/arch/arm64/include/asm/efi.h
+++ b/arch/arm64/include/asm/efi.h
@@ -27,12 +27,9 @@ int efi_set_mapping_permissions(struct mm_struct *mm, efi_memory_desc_t *md);
 	__efi_fpsimd_begin();						\
 })
 
+#undef arch_efi_call_virt
 #define arch_efi_call_virt(p, f, args...)				\
-({									\
-	efi_##f##_t *__f;						\
-	__f = p->f;							\
-	__efi_rt_asm_wrapper(__f, #f, args);				\
-})
+	__efi_rt_asm_wrapper((p)->f, #f, args)
 
 #define arch_efi_call_virt_teardown()					\
 ({									\
* Unmerged path arch/loongarch/include/asm/efi.h
* Unmerged path arch/riscv/include/asm/efi.h
* Unmerged path arch/x86/include/asm/efi.h
diff --git a/include/linux/efi.h b/include/linux/efi.h
index 87f30fc4c480..e060343d50a4 100644
--- a/include/linux/efi.h
+++ b/include/linux/efi.h
@@ -1844,6 +1844,8 @@ efi_enable_reset_attack_mitigation(efi_system_table_t *sys_table_arg) { }
 
 void efi_retrieve_tpm2_eventlog(efi_system_table_t *sys_table);
 
+#define arch_efi_call_virt(p, f, args...)	((p)->f(args))
+
 /*
  * Arch code can implement the following three template macros, avoiding
  * reptition for the void/non-void return cases of {__,}efi_call_virt():
