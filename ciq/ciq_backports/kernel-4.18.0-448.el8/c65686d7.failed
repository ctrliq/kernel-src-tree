net/mlx5e: Add tunnel encap/decap to tc action infra

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Roi Dayan <roid@nvidia.com>
commit c65686d79c954d2a9f522a288c57d086e5406481
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/c65686d7.failed

Add parsing support by implementing struct mlx5e_tc_act
for this action.

	Signed-off-by: Roi Dayan <roid@nvidia.com>
	Reviewed-by: Oz Shlomo <ozsh@nvidia.com>
	Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
(cherry picked from commit c65686d79c954d2a9f522a288c57d086e5406481)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/Makefile
#	drivers/net/ethernet/mellanox/mlx5/core/en/tc/act/act.c
#	drivers/net/ethernet/mellanox/mlx5/core/en/tc/act/act.h
#	drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/Makefile
index 478a0ab6470d,407e42c6f062..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/Makefile
+++ b/drivers/net/ethernet/mellanox/mlx5/core/Makefile
@@@ -46,6 -46,11 +46,14 @@@ mlx5_core-$(CONFIG_MLX5_CLS_ACT)     +
  					en/tc_tun_vxlan.o en/tc_tun_gre.o en/tc_tun_geneve.o \
  					en/tc_tun_mplsoudp.o diag/en_tc_tracepoint.o \
  					en/tc/post_act.o en/tc/int_port.o
++<<<<<<< HEAD
++=======
+ 
+ mlx5_core-$(CONFIG_MLX5_CLS_ACT)     += en/tc/act/act.o en/tc/act/drop.o en/tc/act/trap.o \
+ 					en/tc/act/accept.o en/tc/act/mark.o en/tc/act/goto.o \
+ 					en/tc/act/tun.o
+ 
++>>>>>>> c65686d79c95 (net/mlx5e: Add tunnel encap/decap to tc action infra)
  mlx5_core-$(CONFIG_MLX5_TC_CT)	     += en/tc_ct.o
  mlx5_core-$(CONFIG_MLX5_TC_SAMPLE)   += en/tc/sample.o
  
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
index abcf89c03680,8b96d88d1691..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
@@@ -3905,11 -3822,10 +3905,14 @@@ static int parse_tc_fdb_actions(struct 
  	struct mlx5_flow_attr *attr = flow->attr;
  	int ifindexes[MLX5_MAX_FLOW_FWD_VPORTS];
  	bool ft_flow = mlx5e_is_ft_flow(flow);
 -	enum mlx5_flow_namespace_type ns_type;
  	const struct flow_action_entry *act;
  	struct mlx5_esw_flow_attr *esw_attr;
++<<<<<<< HEAD
 +	bool encap = false, decap = false;
 +	u32 action = attr->action;
++=======
+ 	struct mlx5e_tc_act *tc_act;
++>>>>>>> c65686d79c95 (net/mlx5e: Add tunnel encap/decap to tc action infra)
  	int err, i, if_count = 0;
  	bool ptype_host = false;
  	bool mpls_push = false;
@@@ -4077,9 -3981,9 +4080,15 @@@
  				return -EOPNOTSUPP;
  			}
  
++<<<<<<< HEAD
 +			action |= MLX5_FLOW_CONTEXT_ACTION_FWD_DEST |
 +				  MLX5_FLOW_CONTEXT_ACTION_COUNT;
 +			if (encap) {
++=======
+ 			attr->action |= MLX5_FLOW_CONTEXT_ACTION_FWD_DEST |
+ 					MLX5_FLOW_CONTEXT_ACTION_COUNT;
+ 			if (parse_state->encap) {
++>>>>>>> c65686d79c95 (net/mlx5e: Add tunnel encap/decap to tc action infra)
  				parse_attr->mirred_ifindex[esw_attr->out_count] =
  					out_dev->ifindex;
  				parse_attr->tun_info[esw_attr->out_count] =
@@@ -4170,20 -4071,13 +4179,9 @@@
  			} else {
  				NL_SET_ERR_MSG_MOD(extack,
  						   "devices are not on same switch HW, can't offload forwarding");
 -				netdev_warn(priv->netdev,
 -					    "devices %s %s not on same switch HW, can't offload forwarding\n",
 -					    priv->netdev->name,
 -					    out_dev->name);
 -				return -EOPNOTSUPP;
 +				return -EINVAL;
  			}
  			}
- 			break;
- 		case FLOW_ACTION_TUNNEL_ENCAP:
- 			info = act->tunnel;
- 			if (info) {
- 				encap = true;
- 			} else {
- 				NL_SET_ERR_MSG_MOD(extack,
- 						   "Zero tunnel attributes is not supported");
- 				return -EOPNOTSUPP;
- 			}
- 
  			break;
  		case FLOW_ACTION_VLAN_PUSH:
  		case FLOW_ACTION_VLAN_POP:
@@@ -4213,19 -4108,6 +4211,22 @@@
  
  			esw_attr->split_count = esw_attr->out_count;
  			break;
++<<<<<<< HEAD
 +		case FLOW_ACTION_TUNNEL_DECAP:
 +			decap = true;
 +			break;
 +		case FLOW_ACTION_GOTO:
 +			err = validate_goto_chain(priv, flow, act, action,
 +						  extack);
 +			if (err)
 +				return err;
 +
 +			action |= MLX5_FLOW_CONTEXT_ACTION_FWD_DEST |
 +				  MLX5_FLOW_CONTEXT_ACTION_COUNT;
 +			attr->dest_chain = act->chain_index;
 +			break;
++=======
++>>>>>>> c65686d79c95 (net/mlx5e: Add tunnel encap/decap to tc action infra)
  		case FLOW_ACTION_CT:
  			if (flow_flag_test(flow, SAMPLE)) {
  				NL_SET_ERR_MSG_MOD(extack, "Sample action with connection tracking is not supported");
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en/tc/act/act.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en/tc/act/act.h
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/Makefile
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en/tc/act/act.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en/tc/act/act.h
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en/tc/act/tun.c b/drivers/net/ethernet/mellanox/mlx5/core/en/tc/act/tun.c
new file mode 100644
index 000000000000..6f4a2cf46afd
--- /dev/null
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en/tc/act/tun.c
@@ -0,0 +1,61 @@
+// SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB
+// Copyright (c) 2021, NVIDIA CORPORATION & AFFILIATES. All rights reserved.
+
+#include "act.h"
+#include "en/tc_tun_encap.h"
+#include "en/tc_priv.h"
+
+static bool
+tc_act_can_offload_tun_encap(struct mlx5e_tc_act_parse_state *parse_state,
+			     const struct flow_action_entry *act,
+			     int act_index)
+{
+	if (!act->tunnel) {
+		NL_SET_ERR_MSG_MOD(parse_state->extack,
+				   "Zero tunnel attributes is not supported");
+		return false;
+	}
+
+	return true;
+}
+
+static int
+tc_act_parse_tun_encap(struct mlx5e_tc_act_parse_state *parse_state,
+		       const struct flow_action_entry *act,
+		       struct mlx5e_priv *priv,
+		       struct mlx5_flow_attr *attr)
+{
+	parse_state->tun_info = act->tunnel;
+	parse_state->encap = true;
+
+	return 0;
+}
+
+static bool
+tc_act_can_offload_tun_decap(struct mlx5e_tc_act_parse_state *parse_state,
+			     const struct flow_action_entry *act,
+			     int act_index)
+{
+	return true;
+}
+
+static int
+tc_act_parse_tun_decap(struct mlx5e_tc_act_parse_state *parse_state,
+		       const struct flow_action_entry *act,
+		       struct mlx5e_priv *priv,
+		       struct mlx5_flow_attr *attr)
+{
+	parse_state->decap = true;
+
+	return 0;
+}
+
+struct mlx5e_tc_act mlx5e_tc_act_tun_encap = {
+	.can_offload = tc_act_can_offload_tun_encap,
+	.parse_action = tc_act_parse_tun_encap,
+};
+
+struct mlx5e_tc_act mlx5e_tc_act_tun_decap = {
+	.can_offload = tc_act_can_offload_tun_decap,
+	.parse_action = tc_act_parse_tun_decap,
+};
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
