tun: switch to net core provided statistics counters

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Heiner Kallweit <hkallweit1@gmail.com>
commit 497a5757ce4e8f37219a3989ac6a561eb9a8e6c7
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/497a5757.failed

Switch tun to the standard statistics pattern:
- use netdev->stats for the less frequently accessed counters
- use netdev->tstats for the frequently accessed per-cpu counters

v3:
- add atomic_long_t member rx_frame_errors for making counter updates
  atomic

	Signed-off-by: Heiner Kallweit <hkallweit1@gmail.com>
	Signed-off-by: Jakub Kicinski <kuba@kernel.org>
(cherry picked from commit 497a5757ce4e8f37219a3989ac6a561eb9a8e6c7)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/tun.c
diff --cc drivers/net/tun.c
index 4e0d05222f02,3d45d56172cb..000000000000
--- a/drivers/net/tun.c
+++ b/drivers/net/tun.c
@@@ -1334,10 -1211,10 +1298,16 @@@ resample
  		void *frame = tun_xdp_to_ptr(xdp);
  
  		if (__ptr_ring_produce(&tfile->tx_ring, frame)) {
++<<<<<<< HEAD
 +			this_cpu_inc(tun->pcpu_stats->tx_dropped);
 +			break;
++=======
+ 			atomic_long_inc(&dev->tx_dropped);
+ 			xdp_return_frame_rx_napi(xdp);
+ 			drops++;
++>>>>>>> 497a5757ce4e (tun: switch to net core provided statistics counters)
  		}
 +		nxmit++;
  	}
  	spin_unlock(&tfile->tx_ring.producer_lock);
  
@@@ -1372,12 -1245,9 +1342,12 @@@ static const struct net_device_ops tap_
  	.ndo_set_mac_address	= eth_mac_addr,
  	.ndo_validate_addr	= eth_validate_addr,
  	.ndo_select_queue	= tun_select_queue,
 +#ifdef CONFIG_NET_POLL_CONTROLLER
 +	.ndo_poll_controller	= tun_poll_controller,
 +#endif
  	.ndo_features_check	= passthru_features_check,
  	.ndo_set_rx_headroom	= tun_set_headroom,
- 	.ndo_get_stats64	= tun_net_get_stats64,
+ 	.ndo_get_stats64	= dev_get_tstats64,
  	.ndo_bpf		= tun_xdp,
  	.ndo_xdp_xmit		= tun_xdp_xmit,
  	.ndo_change_carrier	= tun_net_change_carrier,
@@@ -1666,13 -1535,13 +1636,13 @@@ static int tun_xdp_act(struct tun_struc
  	case XDP_PASS:
  		break;
  	default:
 -		bpf_warn_invalid_xdp_action(act);
 -		fallthrough;
 +		bpf_warn_invalid_xdp_action(tun->dev, xdp_prog, act);
 +		/* fall through */
  	case XDP_ABORTED:
  		trace_xdp_exception(tun->dev, xdp_prog, act);
 -		fallthrough;
 +		/* fall through */
  	case XDP_DROP:
- 		this_cpu_inc(tun->pcpu_stats->rx_dropped);
+ 		atomic_long_inc(&tun->dev->rx_dropped);
  		break;
  	}
  
@@@ -2536,20 -2396,16 +2493,16 @@@ build
  			goto out;
  	}
  
 -	if (!rcu_dereference(tun->steering_prog) && tun->numqueues > 1 &&
 -	    !tfile->detached)
 +	if (!rcu_dereference(tun->steering_prog))
  		rxhash = __skb_get_hash_symmetric(skb);
  
 +	skb_record_rx_queue(skb, tfile->queue_index);
  	netif_receive_skb(skb);
  
- 	/* No need for get_cpu_ptr() here since this function is
+ 	/* No need to disable preemption here since this function is
  	 * always called with bh disabled
  	 */
- 	stats = this_cpu_ptr(tun->pcpu_stats);
- 	u64_stats_update_begin(&stats->syncp);
- 	u64_stats_inc(&stats->rx_packets);
- 	u64_stats_add(&stats->rx_bytes, datasize);
- 	u64_stats_update_end(&stats->syncp);
+ 	dev_sw_netstats_rx_add(tun->dev, datasize);
  
  	if (rxhash)
  		tun_flow_update(tun, rxhash, tfile);
* Unmerged path drivers/net/tun.c
