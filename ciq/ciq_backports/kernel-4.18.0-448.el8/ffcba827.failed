Bluetooth: btintel: Fix the LED is not turning off immediately

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Tedd Ho-Jeong An <tedd.an@intel.com>
commit ffcba827c0a1d81933d4fdc35b925d150cee7dec
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/ffcba827.failed

Some platforms have an issue with BT LED when the interface is
down or BT radio is turned off, which takes 5 seconds to BT LED
goes off. This command turns off the BT LED immediately.

This patch sends the Intel vendor command to turn off the LED.

	Signed-off-by: Tedd Ho-Jeong An <tedd.an@intel.com>
	Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
(cherry picked from commit ffcba827c0a1d81933d4fdc35b925d150cee7dec)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/bluetooth/btintel.h
diff --cc drivers/bluetooth/btintel.h
index 773241e9644f,aef04fa0e1ef..000000000000
--- a/drivers/bluetooth/btintel.h
+++ b/drivers/bluetooth/btintel.h
@@@ -153,6 -138,48 +153,51 @@@ struct intel_debug_features 
  #define INTEL_CNVX_TOP_STEP(cnvx_top)	(((cnvx_top) & 0x0f000000) >> 24)
  #define INTEL_CNVX_TOP_PACK_SWAB(t, s)	__swab16(((__u16)(((t) << 4) | (s))))
  
++<<<<<<< HEAD
++=======
+ enum {
+ 	INTEL_BOOTLOADER,
+ 	INTEL_DOWNLOADING,
+ 	INTEL_FIRMWARE_LOADED,
+ 	INTEL_FIRMWARE_FAILED,
+ 	INTEL_BOOTING,
+ 	INTEL_BROKEN_INITIAL_NCMD,
+ 	INTEL_BROKEN_LED,
+ 
+ 	__INTEL_NUM_FLAGS,
+ };
+ 
+ struct btintel_data {
+ 	DECLARE_BITMAP(flags, __INTEL_NUM_FLAGS);
+ };
+ 
+ #define btintel_set_flag(hdev, nr)					\
+ 	do {								\
+ 		struct btintel_data *intel = hci_get_priv((hdev));	\
+ 		set_bit((nr), intel->flags);				\
+ 	} while (0)
+ 
+ #define btintel_clear_flag(hdev, nr)					\
+ 	do {								\
+ 		struct btintel_data *intel = hci_get_priv((hdev));	\
+ 		clear_bit((nr), intel->flags);				\
+ 	} while (0)
+ 
+ #define btintel_wake_up_flag(hdev, nr)					\
+ 	do {								\
+ 		struct btintel_data *intel = hci_get_priv((hdev));	\
+ 		wake_up_bit(intel->flags, (nr));			\
+ 	} while (0)
+ 
+ #define btintel_get_flag(hdev)						\
+ 	(((struct btintel_data *)hci_get_priv(hdev))->flags)
+ 
+ #define btintel_test_flag(hdev, nr)	test_bit((nr), btintel_get_flag(hdev))
+ #define btintel_test_and_clear_flag(hdev, nr) test_and_clear_bit((nr), btintel_get_flag(hdev))
+ #define btintel_wait_on_flag_timeout(hdev, nr, m, to)			\
+ 		wait_on_bit_timeout(btintel_get_flag(hdev), (nr), m, to)
+ 
++>>>>>>> ffcba827c0a1 (Bluetooth: btintel: Fix the LED is not turning off immediately)
  #if IS_ENABLED(CONFIG_BT_INTEL)
  
  int btintel_check_bdaddr(struct hci_dev *hdev);
diff --git a/drivers/bluetooth/btintel.c b/drivers/bluetooth/btintel.c
index 949020fa0142..e585889cd437 100644
--- a/drivers/bluetooth/btintel.c
+++ b/drivers/bluetooth/btintel.c
@@ -1732,6 +1732,13 @@ static int btintel_setup_combined(struct hci_dev *hdev)
 		case 0x07:	/* WP */
 		case 0x08:	/* StP */
 			/* Legacy ROM product */
+
+			/* These devices have an issue with LED which doesn't
+			 * go off immediately during shutdown. Set the flag
+			 * here to send the LED OFF command during shutdown.
+			 */
+			btintel_set_flag(hdev, INTEL_BROKEN_LED);
+
 			err = btintel_legacy_rom_setup(hdev, &ver);
 			break;
 		case 0x0b:      /* SfP */
@@ -1780,6 +1787,7 @@ static int btintel_setup_combined(struct hci_dev *hdev)
 static int btintel_shutdown_combined(struct hci_dev *hdev)
 {
 	struct sk_buff *skb;
+	int ret;
 
 	/* Send HCI Reset to the controller to stop any BT activity which
 	 * were triggered. This will help to save power and maintain the
@@ -1792,6 +1800,21 @@ static int btintel_shutdown_combined(struct hci_dev *hdev)
 	}
 	kfree_skb(skb);
 
+
+	/* Some platforms have an issue with BT LED when the interface is
+	 * down or BT radio is turned off, which takes 5 seconds to BT LED
+	 * goes off. This command turns off the BT LED immediately.
+	 */
+	if (btintel_test_flag(hdev, INTEL_BROKEN_LED)) {
+		skb = __hci_cmd_sync(hdev, 0xfc3f, 0, NULL, HCI_INIT_TIMEOUT);
+		if (IS_ERR(skb)) {
+			ret = PTR_ERR(skb);
+			bt_dev_err(hdev, "turning off Intel device LED failed");
+			return ret;
+		}
+		kfree_skb(skb);
+	}
+
 	return 0;
 }
 
* Unmerged path drivers/bluetooth/btintel.h
