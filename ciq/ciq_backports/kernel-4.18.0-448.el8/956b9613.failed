wifi: mac80211: more station handling sanity checks

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Johannes Berg <johannes.berg@intel.com>
commit 956b96133763dcfdf1b78de0910631f610df2d7b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/956b9613.failed

Add more sanity checks to the API handling, we shouldn't
be able to create a station without links, nor should we
be able to add a link to a station that wasn't created as
an MLD with links in the first place.

	Signed-off-by: Johannes Berg <johannes.berg@intel.com>
(cherry picked from commit 956b96133763dcfdf1b78de0910631f610df2d7b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/mac80211/cfg.c
diff --cc net/mac80211/cfg.c
index 968555a65d49,f519d9cf6e23..000000000000
--- a/net/mac80211/cfg.c
+++ b/net/mac80211/cfg.c
@@@ -4535,6 -4638,118 +4535,121 @@@ static void ieee80211_del_intf_link(str
  	ieee80211_vif_set_links(sdata, wdev->valid_links);
  }
  
++<<<<<<< HEAD
++=======
+ static int sta_add_link_station(struct ieee80211_local *local,
+ 				struct ieee80211_sub_if_data *sdata,
+ 				struct link_station_parameters *params)
+ {
+ 	struct sta_info *sta;
+ 	int ret;
+ 
+ 	sta = sta_info_get_bss(sdata, params->mld_mac);
+ 	if (!sta)
+ 		return -ENOENT;
+ 
+ 	if (!sta->sta.valid_links)
+ 		return -EINVAL;
+ 
+ 	if (sta->sta.valid_links & BIT(params->link_id))
+ 		return -EALREADY;
+ 
+ 	ret = ieee80211_sta_allocate_link(sta, params->link_id);
+ 	if (ret)
+ 		return ret;
+ 
+ 	ret = sta_link_apply_parameters(local, sta, true, params);
+ 	if (ret) {
+ 		ieee80211_sta_free_link(sta, params->link_id);
+ 		return ret;
+ 	}
+ 
+ 	/* ieee80211_sta_activate_link frees the link upon failure */
+ 	return ieee80211_sta_activate_link(sta, params->link_id);
+ }
+ 
+ static int
+ ieee80211_add_link_station(struct wiphy *wiphy, struct net_device *dev,
+ 			   struct link_station_parameters *params)
+ {
+ 	struct ieee80211_sub_if_data *sdata = IEEE80211_DEV_TO_SUB_IF(dev);
+ 	struct ieee80211_local *local = wiphy_priv(wiphy);
+ 	int ret;
+ 
+ 	mutex_lock(&sdata->local->sta_mtx);
+ 	ret = sta_add_link_station(local, sdata, params);
+ 	mutex_unlock(&sdata->local->sta_mtx);
+ 
+ 	return ret;
+ }
+ 
+ static int sta_mod_link_station(struct ieee80211_local *local,
+ 				struct ieee80211_sub_if_data *sdata,
+ 				struct link_station_parameters *params)
+ {
+ 	struct sta_info *sta;
+ 
+ 	sta = sta_info_get_bss(sdata, params->mld_mac);
+ 	if (!sta)
+ 		return -ENOENT;
+ 
+ 	if (!(sta->sta.valid_links & BIT(params->link_id)))
+ 		return -EINVAL;
+ 
+ 	return sta_link_apply_parameters(local, sta, false, params);
+ }
+ 
+ static int
+ ieee80211_mod_link_station(struct wiphy *wiphy, struct net_device *dev,
+ 			   struct link_station_parameters *params)
+ {
+ 	struct ieee80211_sub_if_data *sdata = IEEE80211_DEV_TO_SUB_IF(dev);
+ 	struct ieee80211_local *local = wiphy_priv(wiphy);
+ 	int ret;
+ 
+ 	mutex_lock(&sdata->local->sta_mtx);
+ 	ret = sta_mod_link_station(local, sdata, params);
+ 	mutex_unlock(&sdata->local->sta_mtx);
+ 
+ 	return ret;
+ }
+ 
+ static int sta_del_link_station(struct ieee80211_sub_if_data *sdata,
+ 				struct link_station_del_parameters *params)
+ {
+ 	struct sta_info *sta;
+ 
+ 	sta = sta_info_get_bss(sdata, params->mld_mac);
+ 	if (!sta)
+ 		return -ENOENT;
+ 
+ 	if (!(sta->sta.valid_links & BIT(params->link_id)))
+ 		return -EINVAL;
+ 
+ 	/* must not create a STA without links */
+ 	if (sta->sta.valid_links == BIT(params->link_id))
+ 		return -EINVAL;
+ 
+ 	ieee80211_sta_remove_link(sta, params->link_id);
+ 
+ 	return 0;
+ }
+ 
+ static int
+ ieee80211_del_link_station(struct wiphy *wiphy, struct net_device *dev,
+ 			   struct link_station_del_parameters *params)
+ {
+ 	struct ieee80211_sub_if_data *sdata = IEEE80211_DEV_TO_SUB_IF(dev);
+ 	int ret;
+ 
+ 	mutex_lock(&sdata->local->sta_mtx);
+ 	ret = sta_del_link_station(sdata, params);
+ 	mutex_unlock(&sdata->local->sta_mtx);
+ 
+ 	return ret;
+ }
+ 
++>>>>>>> 956b96133763 (wifi: mac80211: more station handling sanity checks)
  const struct cfg80211_ops mac80211_config_ops = {
  	.add_virtual_intf = ieee80211_add_iface,
  	.del_virtual_intf = ieee80211_del_iface,
* Unmerged path net/mac80211/cfg.c
