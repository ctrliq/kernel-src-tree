mm/sparse.c: remove NULL check in clear_hwpoisoned_pages()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Alastair D'Silva <alastair@d-silva.org>
commit 5ed867037eb1f15b7e8cc92497671fd4b3864e4a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/5ed86703.failed

There is no possibility for memmap to be NULL in the current codebase.

This check was added in commit 95a4774d055c ("memory-hotplug: update
mce_bad_pages when removing the memory") where memmap was originally
inited to NULL, and only conditionally given a value.

The code that could have passed a NULL has been removed by commit
ba72b4c8cf60 ("mm/sparsemem: support sub-section hotplug"), so there is no
longer a possibility that memmap can be NULL.

Link: http://lkml.kernel.org/r/20190829035151.20975-1-alastair@d-silva.org
	Signed-off-by: Alastair D'Silva <alastair@d-silva.org>
	Acked-by: Michal Hocko <mhocko@suse.com>
	Reviewed-by: David Hildenbrand <david@redhat.com>
	Cc: Mike Rapoport <rppt@linux.ibm.com>
	Cc: Wei Yang <richard.weiyang@gmail.com>
	Cc: Qian Cai <cai@lca.pw>
	Cc: Alexander Duyck <alexander.h.duyck@linux.intel.com>
	Cc: Logan Gunthorpe <logang@deltatee.com>
	Cc: Baoquan He <bhe@redhat.com>
	Cc: Balbir Singh <bsingharora@gmail.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 5ed867037eb1f15b7e8cc92497671fd4b3864e4a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	mm/sparse.c
diff --cc mm/sparse.c
index 9d3f6b9d8626,bf32de9e666b..000000000000
--- a/mm/sparse.c
+++ b/mm/sparse.c
@@@ -857,7 -896,13 +857,17 @@@ static void clear_hwpoisoned_pages(stru
  {
  	int i;
  
++<<<<<<< HEAD
 +	if (!memmap)
++=======
+ 	/*
+ 	 * A further optimization is to have per section refcounted
+ 	 * num_poisoned_pages.  But that would need more space per memmap, so
+ 	 * for now just do a quick global check to speed up this routine in the
+ 	 * absence of bad pages.
+ 	 */
+ 	if (atomic_long_read(&num_poisoned_pages) == 0)
++>>>>>>> 5ed867037eb1 (mm/sparse.c: remove NULL check in clear_hwpoisoned_pages())
  		return;
  
  	for (i = 0; i < nr_pages; i++) {
* Unmerged path mm/sparse.c
