s390/mm: do not trigger write fault when vma does not allow VM_WRITE

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Gerald Schaefer <gerald.schaefer@linux.ibm.com>
commit 41ac42f137080bc230b5882e3c88c392ab7f2d32
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/41ac42f1.failed

For non-protection pXd_none() page faults in do_dat_exception(), we
call do_exception() with access == (VM_READ | VM_WRITE | VM_EXEC).
In do_exception(), vma->vm_flags is checked against that before
calling handle_mm_fault().

Since commit 92f842eac7ee3 ("[S390] store indication fault optimization"),
we call handle_mm_fault() with FAULT_FLAG_WRITE, when recognizing that
it was a write access. However, the vma flags check is still only
checking against (VM_READ | VM_WRITE | VM_EXEC), and therefore also
calling handle_mm_fault() with FAULT_FLAG_WRITE in cases where the vma
does not allow VM_WRITE.

Fix this by changing access check in do_exception() to VM_WRITE only,
when recognizing write access.

Link: https://lkml.kernel.org/r/20220811103435.188481-3-david@redhat.com
Fixes: 92f842eac7ee3 ("[S390] store indication fault optimization")
	Cc: <stable@vger.kernel.org>
	Reported-by: David Hildenbrand <david@redhat.com>
	Reviewed-by: Heiko Carstens <hca@linux.ibm.com>
	Signed-off-by: Gerald Schaefer <gerald.schaefer@linux.ibm.com>
	Signed-off-by: Vasily Gorbik <gor@linux.ibm.com>
(cherry picked from commit 41ac42f137080bc230b5882e3c88c392ab7f2d32)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/s390/mm/fault.c
diff --cc arch/s390/mm/fault.c
index 0a355616545d,09b6e756d521..000000000000
--- a/arch/s390/mm/fault.c
+++ b/arch/s390/mm/fault.c
@@@ -466,7 -379,9 +466,13 @@@ static inline vm_fault_t do_exception(s
  	flags = FAULT_FLAG_DEFAULT;
  	if (user_mode(regs))
  		flags |= FAULT_FLAG_USER;
++<<<<<<< HEAD
 +	if (access == VM_WRITE || (trans_exc_code & store_indication) == 0x400)
++=======
+ 	if (is_write)
+ 		access = VM_WRITE;
+ 	if (access == VM_WRITE)
++>>>>>>> 41ac42f13708 (s390/mm: do not trigger write fault when vma does not allow VM_WRITE)
  		flags |= FAULT_FLAG_WRITE;
  	mmap_read_lock(mm);
  
* Unmerged path arch/s390/mm/fault.c
