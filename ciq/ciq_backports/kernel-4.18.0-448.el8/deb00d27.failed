fbdev: make unregister/unlink functions not fail

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Daniel Vetter <daniel.vetter@ffwll.ch>
commit deb00d2785bedd379caa7aaf18c1ffb824580b9d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/deb00d27.failed

Except for driver bugs (which we'll catch with a WARN_ON) this is only
to report failures of the new driver taking over the console. There's
nothing the outgoing driver can do about that, and no one ever
bothered to actually look at these return values. So remove them all.

v2: fixup unregister_framebuffer in savagefb, fbtft, ivtvfb, and neofb
drivers, reported by kbuild.

	Signed-off-by: Daniel Vetter <daniel.vetter@intel.com>
	Reviewed-by: Sam Ravnborg <sam@ravnborg.org>
	Reviewed-by: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
	Cc: Bartlomiej Zolnierkiewicz <b.zolnierkie@samsung.com>
	Cc: Daniel Vetter <daniel.vetter@ffwll.ch>
	Cc: "Michał Mirosław" <mirq-linux@rere.qmqm.pl>
	Cc: Peter Rosin <peda@axentia.se>
	Cc: Hans de Goede <hdegoede@redhat.com>
	Cc: Mikulas Patocka <mpatocka@redhat.com>
	Cc: linux-fbdev@vger.kernel.org
Link: https://patchwork.freedesktop.org/patch/msgid/20190528090304.9388-19-daniel.vetter@ffwll.ch
(cherry picked from commit deb00d2785bedd379caa7aaf18c1ffb824580b9d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/video/fbdev/core/fbmem.c
#	include/linux/fb.h
diff --cc drivers/video/fbdev/core/fbmem.c
index e0a48e4a47a0,f3bcad30d3ba..000000000000
--- a/drivers/video/fbdev/core/fbmem.c
+++ b/drivers/video/fbdev/core/fbmem.c
@@@ -1570,19 -1590,17 +1570,19 @@@ static bool fb_do_apertures_overlap(str
  	return false;
  }
  
- static int do_unregister_framebuffer(struct fb_info *fb_info);
+ static void do_unregister_framebuffer(struct fb_info *fb_info);
  
  #define VGA_FB_PHYS 0xA0000
- static int do_remove_conflicting_framebuffers(struct apertures_struct *a,
- 					      const char *name, bool primary)
+ static void do_remove_conflicting_framebuffers(struct apertures_struct *a,
+ 					       const char *name, bool primary)
  {
- 	int i, ret;
+ 	int i;
  
  	/* check all firmware fbs and kick off if the base addr overlaps */
 -	for_each_registered_fb(i) {
 +	for (i = 0 ; i < FB_MAX; i++) {
  		struct apertures_struct *gen_aper;
 +		if (!registered_fb[i])
 +			continue;
  
  		if (!(registered_fb[i]->flags & FBINFO_MISC_FIRMWARE))
  			continue;
@@@ -1686,41 -1698,35 +1680,48 @@@ static int do_register_framebuffer(stru
  	lock_fb_info(fb_info);
  	ret = fbcon_fb_registered(fb_info);
  	unlock_fb_info(fb_info);
 -
  	if (!lockless_register_fb)
  		console_unlock();
 -	else
 -		atomic_dec(&ignore_console_lock_warning);
 -	return ret;
 +	return 0;
  }
  
- static int unbind_console(struct fb_info *fb_info)
+ static void unbind_console(struct fb_info *fb_info)
  {
 +	struct fb_event event;
 +	int ret;
  	int i = fb_info->node;
  
- 	if (i < 0 || i >= FB_MAX || registered_fb[i] != fb_info)
- 		return -EINVAL;
+ 	if (WARN_ON(i < 0 || i >= FB_MAX || registered_fb[i] != fb_info))
+ 		return;
  
  	console_lock();
  	lock_fb_info(fb_info);
 -	fbcon_fb_unbind(fb_info);
 +	event.info = fb_info;
 +	ret = fb_notifier_call_chain(FB_EVENT_FB_UNBIND, &event);
  	unlock_fb_info(fb_info);
  	console_unlock();
++<<<<<<< HEAD
 +
 +	return ret;
++=======
++>>>>>>> deb00d2785be (fbdev: make unregister/unlink functions not fail)
  }
  
- static int __unlink_framebuffer(struct fb_info *fb_info);
+ static void __unlink_framebuffer(struct fb_info *fb_info);
  
- static int do_unregister_framebuffer(struct fb_info *fb_info)
+ static void do_unregister_framebuffer(struct fb_info *fb_info)
  {
++<<<<<<< HEAD
 +	struct fb_event event;
 +	int ret;
 +
 +	ret = unbind_console(fb_info);
 +
 +	if (ret)
 +		return -EINVAL;
++=======
+ 	unbind_console(fb_info);
++>>>>>>> deb00d2785be (fbdev: make unregister/unlink functions not fail)
  
  	pm_vt_switch_unregister(fb_info->dev);
  
diff --cc include/linux/fb.h
index 5bd1a6c3d119,b90cf7d56bd8..000000000000
--- a/include/linux/fb.h
+++ b/include/linux/fb.h
@@@ -635,9 -634,9 +635,15 @@@ extern ssize_t fb_sys_write(struct fb_i
  
  /* drivers/video/fbmem.c */
  extern int register_framebuffer(struct fb_info *fb_info);
++<<<<<<< HEAD
 +extern int unregister_framebuffer(struct fb_info *fb_info);
 +extern int unlink_framebuffer(struct fb_info *fb_info);
 +extern int remove_conflicting_pci_framebuffers(struct pci_dev *pdev,
++=======
+ extern void unregister_framebuffer(struct fb_info *fb_info);
+ extern void unlink_framebuffer(struct fb_info *fb_info);
+ extern int remove_conflicting_pci_framebuffers(struct pci_dev *pdev, int res_id,
++>>>>>>> deb00d2785be (fbdev: make unregister/unlink functions not fail)
  					       const char *name);
  extern int remove_conflicting_framebuffers(struct apertures_struct *a,
  					   const char *name, bool primary);
diff --git a/drivers/media/pci/ivtv/ivtvfb.c b/drivers/media/pci/ivtv/ivtvfb.c
index a5dcff692b58..b42eeb0397d2 100644
--- a/drivers/media/pci/ivtv/ivtvfb.c
+++ b/drivers/media/pci/ivtv/ivtvfb.c
@@ -1246,11 +1246,7 @@ static int ivtvfb_callback_cleanup(struct device *dev, void *p)
 	struct osd_info *oi = itv->osd_info;
 
 	if (itv->v4l2_cap & V4L2_CAP_VIDEO_OUTPUT) {
-		if (unregister_framebuffer(&itv->osd_info->ivtvfb_info)) {
-			IVTVFB_WARN("Framebuffer %d is in use, cannot unload\n",
-				       itv->instance);
-			return 0;
-		}
+		unregister_framebuffer(&itv->osd_info->ivtvfb_info);
 		IVTVFB_INFO("Unregister framebuffer %d\n", itv->instance);
 		itv->ivtvfb_restore = NULL;
 		ivtvfb_blank(FB_BLANK_VSYNC_SUSPEND, &oi->ivtvfb_info);
diff --git a/drivers/staging/fbtft/fbtft-core.c b/drivers/staging/fbtft/fbtft-core.c
index 9a15c0fc4525..c2322977e964 100644
--- a/drivers/staging/fbtft/fbtft-core.c
+++ b/drivers/staging/fbtft/fbtft-core.c
@@ -1009,7 +1009,9 @@ int fbtft_unregister_framebuffer(struct fb_info *fb_info)
 	if (par->fbtftops.unregister_backlight)
 		par->fbtftops.unregister_backlight(par);
 	fbtft_sysfs_exit(par);
-	return unregister_framebuffer(fb_info);
+	unregister_framebuffer(fb_info);
+
+	return 0;
 }
 EXPORT_SYMBOL(fbtft_unregister_framebuffer);
 
* Unmerged path drivers/video/fbdev/core/fbmem.c
diff --git a/drivers/video/fbdev/neofb.c b/drivers/video/fbdev/neofb.c
index 5d3a444083f7..b770946a0920 100644
--- a/drivers/video/fbdev/neofb.c
+++ b/drivers/video/fbdev/neofb.c
@@ -2122,14 +2122,7 @@ static void neofb_remove(struct pci_dev *dev)
 	DBG("neofb_remove");
 
 	if (info) {
-		/*
-		 * If unregister_framebuffer fails, then
-		 * we will be leaving hooks that could cause
-		 * oopsen laying around.
-		 */
-		if (unregister_framebuffer(info))
-			printk(KERN_WARNING
-			       "neofb: danger danger!  Oopsen imminent!\n");
+		unregister_framebuffer(info);
 
 		neo_unmap_video(info);
 		fb_destroy_modedb(info->monspecs.modedb);
diff --git a/drivers/video/fbdev/savage/savagefb_driver.c b/drivers/video/fbdev/savage/savagefb_driver.c
index c09d7426cd92..3f1f2746357f 100644
--- a/drivers/video/fbdev/savage/savagefb_driver.c
+++ b/drivers/video/fbdev/savage/savagefb_driver.c
@@ -2333,14 +2333,7 @@ static void savagefb_remove(struct pci_dev *dev)
 	DBG("savagefb_remove");
 
 	if (info) {
-		/*
-		 * If unregister_framebuffer fails, then
-		 * we will be leaving hooks that could cause
-		 * oopsen laying around.
-		 */
-		if (unregister_framebuffer(info))
-			printk(KERN_WARNING "savagefb: danger danger! "
-			       "Oopsen imminent!\n");
+		unregister_framebuffer(info);
 
 #ifdef CONFIG_FB_SAVAGE_I2C
 		savagefb_delete_i2c_busses(info);
* Unmerged path include/linux/fb.h
