ath11k: Refactor MSI logic to support WCN6750

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Manikanta Pubbisetty <quic_mpubbise@quicinc.com>
commit 0cfaf2243e9eef8ed32cdde6467a7e123a9f915f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/0cfaf224.failed

Refactor MSI logic in order to support hybrid bus devices
like WCN6750.

Tested-on: WCN6855 hw2.0 PCI WLAN.HSP.1.1-01720.1-QCAHSPSWPL_V1_V2_SILICONZ_LITE-1
Tested-on: QCN9074 hw1.0 PCI WLAN.HK.2.5.0.1-01100-QCAHKSWPL_SILICONZ-1
Tested-on: IPQ8074 hw2.0 AHB WLAN.HK.2.4.0.1-00192-QCAHKSWPL_SILICONZ-1

	Signed-off-by: Manikanta Pubbisetty <quic_mpubbise@quicinc.com>
	Signed-off-by: Kalle Valo <quic_kvalo@quicinc.com>
Link: https://lore.kernel.org/r/20220328055714.6449-5-quic_mpubbise@quicinc.com
(cherry picked from commit 0cfaf2243e9eef8ed32cdde6467a7e123a9f915f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/wireless/ath/ath11k/mhi.c
#	drivers/net/wireless/ath/ath11k/pci.c
#	drivers/net/wireless/ath/ath11k/pci.h
#	drivers/net/wireless/ath/ath11k/pcic.c
#	drivers/net/wireless/ath/ath11k/pcic.h
diff --cc drivers/net/wireless/ath/ath11k/mhi.c
index 61d83be4841f,5de255969364..000000000000
--- a/drivers/net/wireless/ath/ath11k/mhi.c
+++ b/drivers/net/wireless/ath/ath11k/mhi.c
@@@ -254,9 -258,8 +254,14 @@@ static int ath11k_mhi_get_msi(struct at
  	int *irq;
  	unsigned int msi_data;
  
++<<<<<<< HEAD
 +	ret = ath11k_pci_get_user_msi_assignment(ab_pci,
 +						 "MHI", &num_vectors,
 +						 &user_base_data, &base_vector);
++=======
+ 	ret = ath11k_pcic_get_user_msi_assignment(ab, "MHI", &num_vectors,
+ 						  &user_base_data, &base_vector);
++>>>>>>> 0cfaf2243e9e (ath11k: Refactor MSI logic to support WCN6750)
  	if (ret)
  		return ret;
  
diff --cc drivers/net/wireless/ath/ath11k/pci.c
index ae4b3aa98fc3,fd5487d7045e..000000000000
--- a/drivers/net/wireless/ath/ath11k/pci.c
+++ b/drivers/net/wireless/ath/ath11k/pci.c
@@@ -1006,11 -345,19 +1007,25 @@@ static int ath11k_pci_alloc_msi(struct 
  		goto free_msi_vector;
  	}
  
++<<<<<<< HEAD
 +	ab_pci->msi_ep_base_data = msi_desc->msg.data;
 +	if (msi_desc->msi_attrib.is_64)
 +		set_bit(ATH11K_PCI_FLAG_IS_MSI_64, &ab_pci->flags);
++=======
+ 	ab->pci.msi.ep_base_data = msi_desc->msg.data;
++>>>>>>> 0cfaf2243e9e (ath11k: Refactor MSI logic to support WCN6750)
  
- 	ath11k_dbg(ab, ATH11K_DBG_PCI, "msi base data is %d\n", ab_pci->msi_ep_base_data);
+ 	pci_read_config_dword(pci_dev, pci_dev->msi_cap + PCI_MSI_ADDRESS_LO,
+ 			      &ab->pci.msi.addr_lo);
+ 
+ 	if (msi_desc->pci.msi_attrib.is_64) {
+ 		pci_read_config_dword(pci_dev, pci_dev->msi_cap + PCI_MSI_ADDRESS_HI,
+ 				      &ab->pci.msi.addr_hi);
+ 	} else {
+ 		ab->pci.msi.addr_hi = 0;
+ 	}
+ 
+ 	ath11k_dbg(ab, ATH11K_DBG_PCI, "msi base data is %d\n", ab->pci.msi.ep_base_data);
  
  	return 0;
  
@@@ -1318,14 -568,14 +1333,22 @@@ static const struct ath11k_hif_ops ath1
  	.power_up = ath11k_pci_power_up,
  	.suspend = ath11k_pci_hif_suspend,
  	.resume = ath11k_pci_hif_resume,
++<<<<<<< HEAD
 +	.irq_enable = ath11k_pci_ext_irq_enable,
 +	.irq_disable = ath11k_pci_ext_irq_disable,
 +	.get_msi_address =  ath11k_pci_get_msi_address,
 +	.get_user_msi_vector = ath11k_get_user_msi_assignment,
 +	.map_service_to_pipe = ath11k_pci_map_service_to_pipe,
++=======
+ 	.irq_enable = ath11k_pcic_ext_irq_enable,
+ 	.irq_disable = ath11k_pcic_ext_irq_disable,
+ 	.get_msi_address =  ath11k_pcic_get_msi_address,
+ 	.get_user_msi_vector = ath11k_pcic_get_user_msi_assignment,
+ 	.map_service_to_pipe = ath11k_pcic_map_service_to_pipe,
++>>>>>>> 0cfaf2243e9e (ath11k: Refactor MSI logic to support WCN6750)
  	.ce_irq_enable = ath11k_pci_hif_ce_irq_enable,
  	.ce_irq_disable = ath11k_pci_hif_ce_irq_disable,
 -	.get_ce_msi_idx = ath11k_pcic_get_ce_msi_idx,
 +	.get_ce_msi_idx = ath11k_pci_get_ce_msi_idx,
  };
  
  static void ath11k_pci_read_hw_version(struct ath11k_base *ab, u32 *major, u32 *minor)
diff --cc drivers/net/wireless/ath/ath11k/pci.h
index 31ee843c1cab,c9cae48d784e..000000000000
--- a/drivers/net/wireless/ath/ath11k/pci.h
+++ b/drivers/net/wireless/ath/ath11k/pci.h
@@@ -53,36 -53,8 +53,38 @@@
  #define WLAON_QFPROM_PWR_CTRL_REG		0x01f8031c
  #define QFPROM_PWR_CTRL_VDD4BLOW_MASK		0x4
  
++<<<<<<< HEAD
 +#define ATH11K_PCI_IRQ_CE0_OFFSET	3
 +#define ATH11K_PCI_IRQ_DP_OFFSET	14
 +
 +#define ATH11K_PCI_WINDOW_ENABLE_BIT		0x40000000
 +#define ATH11K_PCI_WINDOW_REG_ADDRESS		0x310c
 +#define ATH11K_PCI_WINDOW_VALUE_MASK		GENMASK(24, 19)
 +#define ATH11K_PCI_WINDOW_START			0x80000
 +#define ATH11K_PCI_WINDOW_RANGE_MASK		GENMASK(18, 0)
 +
 +/* BAR0 + 4k is always accessible, and no
 + * need to force wakeup.
 + * 4K - 32 = 0xFE0
 + */
 +#define ATH11K_PCI_ACCESS_ALWAYS_OFF 0xFE0
 +
 +struct ath11k_msi_user {
 +	char *name;
 +	int num_vectors;
 +	u32 base_vector;
 +};
 +
 +struct ath11k_msi_config {
 +	int total_vectors;
 +	int total_users;
 +	struct ath11k_msi_user *users;
 +};
 +
++=======
++>>>>>>> 0cfaf2243e9e (ath11k: Refactor MSI logic to support WCN6750)
  enum ath11k_pci_flags {
  	ATH11K_PCI_FLAG_INIT_DONE,
- 	ATH11K_PCI_FLAG_IS_MSI_64,
  	ATH11K_PCI_ASPM_RESTORE,
  	ATH11K_PCI_FLAG_MULTI_MSI_VECTORS,
  };
* Unmerged path drivers/net/wireless/ath/ath11k/pcic.c
* Unmerged path drivers/net/wireless/ath/ath11k/pcic.h
diff --git a/drivers/net/wireless/ath/ath11k/core.h b/drivers/net/wireless/ath/ath11k/core.h
index f3d02f55f8ea..7755f4dae946 100644
--- a/drivers/net/wireless/ath/ath11k/core.h
+++ b/drivers/net/wireless/ath/ath11k/core.h
@@ -749,6 +749,19 @@ struct ath11k_soc_dp_stats {
 	struct ath11k_dp_ring_bp_stats bp_stats;
 };
 
+struct ath11k_msi_user {
+	char *name;
+	int num_vectors;
+	u32 base_vector;
+};
+
+struct ath11k_msi_config {
+	int total_vectors;
+	int total_users;
+	struct ath11k_msi_user *users;
+	u16 hw_rev;
+};
+
 /* Master structure to hold the hw data which may be used in core module */
 struct ath11k_base {
 	enum ath11k_hw_rev hw_rev;
@@ -873,6 +886,15 @@ struct ath11k_base {
 		u32 subsystem_device;
 	} id;
 
+	struct {
+		struct {
+			const struct ath11k_msi_config *config;
+			u32 ep_base_data;
+			u32 addr_lo;
+			u32 addr_hi;
+		} msi;
+	} pci;
+
 	/* must be last */
 	u8 drv_priv[] __aligned(sizeof(void *));
 };
* Unmerged path drivers/net/wireless/ath/ath11k/mhi.c
* Unmerged path drivers/net/wireless/ath/ath11k/pci.c
* Unmerged path drivers/net/wireless/ath/ath11k/pci.h
* Unmerged path drivers/net/wireless/ath/ath11k/pcic.c
* Unmerged path drivers/net/wireless/ath/ath11k/pcic.h
