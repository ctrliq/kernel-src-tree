net/mlx5: DR, Remove 4 members from mlx5dr_ste_htbl to reduce memory

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Rongwei Liu <rongweil@nvidia.com>
commit 597534bd56335c9e7bdb6c52d9abcb66e9cb9275
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/597534bd.failed

Remove chunk_size in struct mlx5dr_icm_chunk and use
chunk->size instead.

Remove ste_arr/hw_ste_arr/miss_list since they can be accessed
from htbl->chunk pointer, no need to keep a copy.

This commit reduces 28 bytes from struct mlx5dr_ste_htbl and its
size is 32 bytes now.

	Signed-off-by: Rongwei Liu <rongweil@nvidia.com>
	Reviewed-by: Shun Hao <shunh@nvidia.com>
	Reviewed-by: Yevgeny Kliteynik <kliteyn@nvidia.com>
	Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
(cherry picked from commit 597534bd56335c9e7bdb6c52d9abcb66e9cb9275)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/steering/dr_rule.c
#	drivers/net/ethernet/mellanox/mlx5/core/steering/dr_send.c
#	drivers/net/ethernet/mellanox/mlx5/core/steering/dr_ste.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/steering/dr_rule.c
index b4374578425b,698e1cfc9571..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/steering/dr_rule.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/steering/dr_rule.c
@@@ -53,9 -54,9 +53,15 @@@ dr_rule_create_collision_htbl(struct ml
  	}
  
  	/* One and only entry, never grows */
++<<<<<<< HEAD
 +	ste = new_htbl->ste_arr;
 +	mlx5dr_ste_set_miss_addr(ste_ctx, hw_ste,
 +				 nic_matcher->e_anchor->chunk->icm_addr);
++=======
+ 	ste = new_htbl->chunk->ste_arr;
+ 	icm_addr = mlx5dr_icm_pool_get_chunk_icm_addr(nic_matcher->e_anchor->chunk);
+ 	mlx5dr_ste_set_miss_addr(ste_ctx, hw_ste, icm_addr);
++>>>>>>> 597534bd5633 (net/mlx5: DR, Remove 4 members from mlx5dr_ste_htbl to reduce memory)
  	mlx5dr_htbl_get(new_htbl);
  
  	return ste;
@@@ -243,12 -245,12 +249,12 @@@ dr_rule_rehash_copy_ste(struct mlx5dr_m
  	mlx5dr_ste_set_bit_mask(hw_ste, nic_matcher->ste_builder[sb_idx].bit_mask);
  
  	/* Copy STE control and tag */
 -	icm_addr = mlx5dr_icm_pool_get_chunk_icm_addr(nic_matcher->e_anchor->chunk);
  	memcpy(hw_ste, cur_ste->hw_ste, DR_STE_SIZE_REDUCED);
 -	mlx5dr_ste_set_miss_addr(dmn->ste_ctx, hw_ste, icm_addr);
 +	mlx5dr_ste_set_miss_addr(dmn->ste_ctx, hw_ste,
 +				 nic_matcher->e_anchor->chunk->icm_addr);
  
  	new_idx = mlx5dr_ste_calc_hash_index(hw_ste, new_htbl);
- 	new_ste = &new_htbl->ste_arr[new_idx];
+ 	new_ste = &new_htbl->chunk->ste_arr[new_idx];
  
  	if (mlx5dr_ste_is_not_used(new_ste)) {
  		mlx5dr_htbl_get(new_htbl);
@@@ -446,11 -448,11 +452,17 @@@ dr_rule_rehash_htbl(struct mlx5dr_rule 
  		 * (48B len) which works only on first 32B
  		 */
  		mlx5dr_ste_set_hit_addr(dmn->ste_ctx,
++<<<<<<< HEAD
 +					prev_htbl->ste_arr[0].hw_ste,
 +					new_htbl->chunk->icm_addr,
 +					new_htbl->chunk->num_of_entries);
++=======
+ 					prev_htbl->chunk->ste_arr[0].hw_ste,
+ 					mlx5dr_icm_pool_get_chunk_icm_addr(new_htbl->chunk),
+ 					mlx5dr_icm_pool_get_chunk_num_of_entries(new_htbl->chunk));
++>>>>>>> 597534bd5633 (net/mlx5: DR, Remove 4 members from mlx5dr_ste_htbl to reduce memory)
  
- 		ste_to_update = &prev_htbl->ste_arr[0];
+ 		ste_to_update = &prev_htbl->chunk->ste_arr[0];
  	} else {
  		mlx5dr_ste_set_hit_addr_by_next_htbl(dmn->ste_ctx,
  						     cur_htbl->pointing_ste->hw_ste,
diff --cc drivers/net/ethernet/mellanox/mlx5/core/steering/dr_send.c
index bfb14b4b1906,26a91c4415c5..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/steering/dr_send.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/steering/dr_send.c
@@@ -511,8 -511,8 +511,13 @@@ int mlx5dr_send_postsend_htbl(struct ml
  		send_info.write.length = byte_size;
  		send_info.write.lkey = 0;
  		send_info.remote_addr =
++<<<<<<< HEAD
 +			mlx5dr_ste_get_mr_addr(htbl->ste_arr + ste_index);
 +		send_info.rkey = htbl->chunk->rkey;
++=======
+ 			mlx5dr_ste_get_mr_addr(htbl->chunk->ste_arr + ste_index);
+ 		send_info.rkey = mlx5dr_icm_pool_get_chunk_rkey(htbl->chunk);
++>>>>>>> 597534bd5633 (net/mlx5: DR, Remove 4 members from mlx5dr_ste_htbl to reduce memory)
  
  		ret = dr_postsend_icm_data(dmn, &send_info);
  		if (ret)
@@@ -568,8 -568,8 +573,13 @@@ int mlx5dr_send_postsend_formatted_htbl
  		send_info.write.length = byte_size;
  		send_info.write.lkey = 0;
  		send_info.remote_addr =
++<<<<<<< HEAD
 +			mlx5dr_ste_get_mr_addr(htbl->ste_arr + ste_index);
 +		send_info.rkey = htbl->chunk->rkey;
++=======
+ 			mlx5dr_ste_get_mr_addr(htbl->chunk->ste_arr + ste_index);
+ 		send_info.rkey = mlx5dr_icm_pool_get_chunk_rkey(htbl->chunk);
++>>>>>>> 597534bd5633 (net/mlx5: DR, Remove 4 members from mlx5dr_ste_htbl to reduce memory)
  
  		ret = dr_postsend_icm_data(dmn, &send_info);
  		if (ret)
diff --cc drivers/net/ethernet/mellanox/mlx5/core/steering/dr_ste.c
index 518e949847a3,3ab155feba5e..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/steering/dr_ste.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/steering/dr_ste.c
@@@ -113,16 -114,17 +113,21 @@@ void mlx5dr_ste_set_hit_addr(struct mlx
  
  u64 mlx5dr_ste_get_icm_addr(struct mlx5dr_ste *ste)
  {
++<<<<<<< HEAD
 +	u32 index = ste - ste->htbl->ste_arr;
++=======
+ 	u64 base_icm_addr = mlx5dr_icm_pool_get_chunk_icm_addr(ste->htbl->chunk);
+ 	u32 index = ste - ste->htbl->chunk->ste_arr;
++>>>>>>> 597534bd5633 (net/mlx5: DR, Remove 4 members from mlx5dr_ste_htbl to reduce memory)
  
 -	return base_icm_addr + DR_STE_SIZE * index;
 +	return ste->htbl->chunk->icm_addr + DR_STE_SIZE * index;
  }
  
  u64 mlx5dr_ste_get_mr_addr(struct mlx5dr_ste *ste)
  {
- 	u32 index = ste - ste->htbl->ste_arr;
+ 	u32 index = ste - ste->htbl->chunk->ste_arr;
  
 -	return mlx5dr_icm_pool_get_chunk_mr_addr(ste->htbl->chunk) + DR_STE_SIZE * index;
 +	return ste->htbl->chunk->mr_addr + DR_STE_SIZE * index;
  }
  
  struct list_head *mlx5dr_ste_get_miss_list(struct mlx5dr_ste *ste)
@@@ -483,15 -490,13 +488,17 @@@ struct mlx5dr_ste_htbl *mlx5dr_ste_htbl
  	htbl->chunk = chunk;
  	htbl->lu_type = lu_type;
  	htbl->byte_mask = byte_mask;
- 	htbl->ste_arr = chunk->ste_arr;
- 	htbl->hw_ste_arr = chunk->hw_ste_arr;
- 	htbl->miss_list = chunk->miss_list;
  	htbl->refcount = 0;
 -	num_entries = mlx5dr_icm_pool_get_chunk_num_of_entries(chunk);
  
++<<<<<<< HEAD
 +	for (i = 0; i < chunk->num_of_entries; i++) {
 +		struct mlx5dr_ste *ste = &htbl->ste_arr[i];
++=======
+ 	for (i = 0; i < num_entries; i++) {
+ 		struct mlx5dr_ste *ste = &chunk->ste_arr[i];
++>>>>>>> 597534bd5633 (net/mlx5: DR, Remove 4 members from mlx5dr_ste_htbl to reduce memory)
  
- 		ste->hw_ste = htbl->hw_ste_arr + i * DR_STE_SIZE_REDUCED;
+ 		ste->hw_ste = chunk->hw_ste_arr + i * DR_STE_SIZE_REDUCED;
  		ste->htbl = htbl;
  		ste->refcount = 0;
  		INIT_LIST_HEAD(&ste->miss_list_node);
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/steering/dr_matcher.c b/drivers/net/ethernet/mellanox/mlx5/core/steering/dr_matcher.c
index a4b5b415df90..f8fdeac18ed5 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/steering/dr_matcher.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/steering/dr_matcher.c
@@ -726,12 +726,14 @@ static int dr_nic_matcher_connect(struct mlx5dr_domain *dmn,
 		return ret;
 
 	/* Update the pointing ste and next hash table */
-	curr_nic_matcher->s_htbl->pointing_ste = prev_htbl->ste_arr;
-	prev_htbl->ste_arr[0].next_htbl = curr_nic_matcher->s_htbl;
+	curr_nic_matcher->s_htbl->pointing_ste = prev_htbl->chunk->ste_arr;
+	prev_htbl->chunk->ste_arr[0].next_htbl = curr_nic_matcher->s_htbl;
 
 	if (next_nic_matcher) {
-		next_nic_matcher->s_htbl->pointing_ste = curr_nic_matcher->e_anchor->ste_arr;
-		curr_nic_matcher->e_anchor->ste_arr[0].next_htbl = next_nic_matcher->s_htbl;
+		next_nic_matcher->s_htbl->pointing_ste =
+			curr_nic_matcher->e_anchor->chunk->ste_arr;
+		curr_nic_matcher->e_anchor->chunk->ste_arr[0].next_htbl =
+			next_nic_matcher->s_htbl;
 	}
 
 	return 0;
@@ -1043,12 +1045,12 @@ static int dr_matcher_disconnect_nic(struct mlx5dr_domain *dmn,
 	if (next_nic_matcher) {
 		info.type = CONNECT_HIT;
 		info.hit_next_htbl = next_nic_matcher->s_htbl;
-		next_nic_matcher->s_htbl->pointing_ste = prev_anchor->ste_arr;
-		prev_anchor->ste_arr[0].next_htbl = next_nic_matcher->s_htbl;
+		next_nic_matcher->s_htbl->pointing_ste = prev_anchor->chunk->ste_arr;
+		prev_anchor->chunk->ste_arr[0].next_htbl = next_nic_matcher->s_htbl;
 	} else {
 		info.type = CONNECT_MISS;
 		info.miss_icm_addr = nic_tbl->default_icm_addr;
-		prev_anchor->ste_arr[0].next_htbl = NULL;
+		prev_anchor->chunk->ste_arr[0].next_htbl = NULL;
 	}
 
 	return mlx5dr_ste_htbl_init_and_postsend(dmn, nic_dmn, prev_anchor,
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/steering/dr_rule.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/steering/dr_send.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/steering/dr_ste.c
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/steering/dr_types.h b/drivers/net/ethernet/mellanox/mlx5/core/steering/dr_types.h
index 40f78ab4676e..584bac9cf4d8 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/steering/dr_types.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/steering/dr_types.h
@@ -181,14 +181,7 @@ struct mlx5dr_ste_htbl {
 	u16 byte_mask;
 	u32 refcount;
 	struct mlx5dr_icm_chunk *chunk;
-	struct mlx5dr_ste *ste_arr;
-	u8 *hw_ste_arr;
-
-	struct list_head *miss_list;
-
-	enum mlx5dr_icm_chunk_size chunk_size;
 	struct mlx5dr_ste *pointing_ste;
-
 	struct mlx5dr_ste_htbl_ctrl ctrl;
 };
 
@@ -1178,7 +1171,7 @@ static inline int
 mlx5dr_ste_htbl_increase_threshold(struct mlx5dr_ste_htbl *htbl)
 {
 	int num_of_entries =
-		mlx5dr_icm_pool_chunk_size_to_entries(htbl->chunk_size);
+		mlx5dr_icm_pool_chunk_size_to_entries(htbl->chunk->size);
 
 	/* Threshold is 50%, one is added to table of size 1 */
 	return (num_of_entries + 1) / 2;
@@ -1187,7 +1180,7 @@ mlx5dr_ste_htbl_increase_threshold(struct mlx5dr_ste_htbl *htbl)
 static inline bool
 mlx5dr_ste_htbl_may_grow(struct mlx5dr_ste_htbl *htbl)
 {
-	if (htbl->chunk_size == DR_CHUNK_SIZE_MAX - 1 || !htbl->byte_mask)
+	if (htbl->chunk->size == DR_CHUNK_SIZE_MAX - 1 || !htbl->byte_mask)
 		return false;
 
 	return true;
