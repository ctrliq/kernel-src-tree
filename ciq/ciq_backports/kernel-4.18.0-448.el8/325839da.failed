wifi: cfg80211: simplify cfg80211_mlme_auth() prototype

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Johannes Berg <johannes.berg@intel.com>
commit 325839da9581ee3e881e9c318cbebbdd680cb101
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/325839da.failed

This function has far too many parameters now, move out
the BSS lookup and pass the request struct instead.

	Signed-off-by: Johannes Berg <johannes.berg@intel.com>
(cherry picked from commit 325839da9581ee3e881e9c318cbebbdd680cb101)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/wireless/mlme.c
diff --cc net/wireless/mlme.c
index dde8de9bb5a5,532113937469..000000000000
--- a/net/wireless/mlme.c
+++ b/net/wireless/mlme.c
@@@ -245,35 -238,20 +239,35 @@@ int cfg80211_mlme_auth(struct cfg80211_
  
  	ASSERT_WDEV_LOCK(wdev);
  
++<<<<<<< HEAD
 +	if (auth_type == NL80211_AUTHTYPE_SHARED_KEY)
 +		if (!key || !key_len || key_idx < 0 || key_idx > 3)
 +			return -EINVAL;
 +
 +	if (wdev->current_bss &&
 +	    ether_addr_equal(bssid, wdev->current_bss->pub.bssid))
 +		return -EALREADY;
 +
 +	req.bss = cfg80211_get_bss(&rdev->wiphy, chan, bssid, ssid, ssid_len,
 +				   IEEE80211_BSS_TYPE_ESS,
 +				   IEEE80211_PRIVACY_ANY);
 +	if (!req.bss)
++=======
+ 	if (!req->bss)
++>>>>>>> 325839da9581 (wifi: cfg80211: simplify cfg80211_mlme_auth() prototype)
  		return -ENOENT;
  
- 	err = rdev_auth(rdev, dev, &req);
+ 	if (req->auth_type == NL80211_AUTHTYPE_SHARED_KEY) {
+ 		if (!req->key || !req->key_len ||
+ 		    req->key_idx < 0 || req->key_idx > 3)
+ 			return -EINVAL;
+ 	}
+ 
+ 	if (wdev->connected &&
+ 	    ether_addr_equal(req->bss->bssid, wdev->u.client.connected_addr))
+ 		return -EALREADY;
  
- 	cfg80211_put_bss(&rdev->wiphy, req.bss);
- 	return err;
+ 	return rdev_auth(rdev, dev, req);
  }
  
  /*  Do a logical ht_capa &= ht_capa_mask.  */
diff --git a/net/wireless/core.h b/net/wireless/core.h
index de29999a1dc9..63f91d833ee1 100644
--- a/net/wireless/core.h
+++ b/net/wireless/core.h
@@ -360,13 +360,7 @@ int cfg80211_stop_ap(struct cfg80211_registered_device *rdev,
 /* MLME */
 int cfg80211_mlme_auth(struct cfg80211_registered_device *rdev,
 		       struct net_device *dev,
-		       struct ieee80211_channel *chan,
-		       enum nl80211_auth_type auth_type,
-		       const u8 *bssid,
-		       const u8 *ssid, int ssid_len,
-		       const u8 *ie, int ie_len,
-		       const u8 *key, int key_len, int key_idx,
-		       const u8 *auth_data, int auth_data_len);
+		       struct cfg80211_auth_request *req);
 int cfg80211_mlme_assoc(struct cfg80211_registered_device *rdev,
 			struct net_device *dev,
 			struct cfg80211_assoc_request *req);
* Unmerged path net/wireless/mlme.c
diff --git a/net/wireless/nl80211.c b/net/wireless/nl80211.c
index 61943281a64c..95762b578045 100644
--- a/net/wireless/nl80211.c
+++ b/net/wireless/nl80211.c
@@ -10055,11 +10055,12 @@ static int nl80211_authenticate(struct sk_buff *skb, struct genl_info *info)
 	struct cfg80211_registered_device *rdev = info->user_ptr[0];
 	struct net_device *dev = info->user_ptr[1];
 	struct ieee80211_channel *chan;
-	const u8 *bssid, *ssid, *ie = NULL, *auth_data = NULL;
-	int err, ssid_len, ie_len = 0, auth_data_len = 0;
+	const u8 *bssid, *ssid;
+	int err, ssid_len;
 	enum nl80211_auth_type auth_type;
 	struct key_parse key;
 	bool local_state_change;
+	struct cfg80211_auth_request req = {};
 	u32 freq;
 
 	if (!info->attrs[NL80211_ATTR_MAC])
@@ -10130,8 +10131,8 @@ static int nl80211_authenticate(struct sk_buff *skb, struct genl_info *info)
 	ssid_len = nla_len(info->attrs[NL80211_ATTR_SSID]);
 
 	if (info->attrs[NL80211_ATTR_IE]) {
-		ie = nla_data(info->attrs[NL80211_ATTR_IE]);
-		ie_len = nla_len(info->attrs[NL80211_ATTR_IE]);
+		req.ie = nla_data(info->attrs[NL80211_ATTR_IE]);
+		req.ie_len = nla_len(info->attrs[NL80211_ATTR_IE]);
 	}
 
 	auth_type = nla_get_u32(info->attrs[NL80211_ATTR_AUTH_TYPE]);
@@ -10151,8 +10152,8 @@ static int nl80211_authenticate(struct sk_buff *skb, struct genl_info *info)
 		    auth_type != NL80211_AUTHTYPE_FILS_SK_PFS &&
 		    auth_type != NL80211_AUTHTYPE_FILS_PK)
 			return -EINVAL;
-		auth_data = nla_data(info->attrs[NL80211_ATTR_AUTH_DATA]);
-		auth_data_len = nla_len(info->attrs[NL80211_ATTR_AUTH_DATA]);
+		req.auth_data = nla_data(info->attrs[NL80211_ATTR_AUTH_DATA]);
+		req.auth_data_len = nla_len(info->attrs[NL80211_ATTR_AUTH_DATA]);
 	}
 
 	local_state_change = !!info->attrs[NL80211_ATTR_LOCAL_STATE_CHANGE];
@@ -10164,12 +10165,23 @@ static int nl80211_authenticate(struct sk_buff *skb, struct genl_info *info)
 	if (local_state_change)
 		return 0;
 
+	req.auth_type = auth_type;
+	req.key = key.p.key;
+	req.key_len = key.p.key_len;
+	req.key_idx = key.idx;
+
+	req.bss = cfg80211_get_bss(&rdev->wiphy, chan, bssid, ssid, ssid_len,
+				   IEEE80211_BSS_TYPE_ESS,
+				   IEEE80211_PRIVACY_ANY);
+	if (!req.bss)
+		return -ENOENT;
+
 	wdev_lock(dev->ieee80211_ptr);
-	err = cfg80211_mlme_auth(rdev, dev, chan, auth_type, bssid,
-				 ssid, ssid_len, ie, ie_len,
-				 key.p.key, key.p.key_len, key.idx,
-				 auth_data, auth_data_len);
+	err = cfg80211_mlme_auth(rdev, dev, &req);
 	wdev_unlock(dev->ieee80211_ptr);
+
+	cfg80211_put_bss(&rdev->wiphy, req.bss);
+
 	return err;
 }
 
diff --git a/net/wireless/sme.c b/net/wireless/sme.c
index 1001c6b3bcf5..28d09cab42d0 100644
--- a/net/wireless/sme.c
+++ b/net/wireless/sme.c
@@ -147,6 +147,7 @@ static int cfg80211_conn_do_work(struct wireless_dev *wdev,
 {
 	struct cfg80211_registered_device *rdev = wiphy_to_rdev(wdev->wiphy);
 	struct cfg80211_connect_params *params;
+	struct cfg80211_auth_request auth_req = {};
 	struct cfg80211_assoc_request req = {};
 	int err;
 
@@ -167,13 +168,18 @@ static int cfg80211_conn_do_work(struct wireless_dev *wdev,
 		if (WARN_ON(!rdev->ops->auth))
 			return -EOPNOTSUPP;
 		wdev->conn->state = CFG80211_CONN_AUTHENTICATING;
-		return cfg80211_mlme_auth(rdev, wdev->netdev,
-					  params->channel, params->auth_type,
-					  params->bssid,
-					  params->ssid, params->ssid_len,
-					  NULL, 0,
-					  params->key, params->key_len,
-					  params->key_idx, NULL, 0);
+		auth_req.key = params->key;
+		auth_req.key_len = params->key_len;
+		auth_req.key_idx = params->key_idx;
+		auth_req.auth_type = params->auth_type;
+		auth_req.bss = cfg80211_get_bss(&rdev->wiphy, params->channel,
+						params->bssid,
+						params->ssid, params->ssid_len,
+						IEEE80211_BSS_TYPE_ESS,
+						IEEE80211_PRIVACY_ANY);
+		err = cfg80211_mlme_auth(rdev, wdev->netdev, &auth_req);
+		cfg80211_put_bss(&rdev->wiphy, auth_req.bss);
+		return err;
 	case CFG80211_CONN_AUTH_FAILED_TIMEOUT:
 		*treason = NL80211_TIMEOUT_AUTH;
 		return -ENOTCONN;
