wifi: mac80211: sta_info: fix a missing kernel-doc struct element

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Mauro Carvalho Chehab <mchehab@kernel.org>
commit fe37f73d1109367d749e2771045ae28e0c1543a9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/fe37f73d.failed

struct link_sta_info has now a cur_max_bandwidth data:

	net/mac80211/sta_info.h:569: warning: Function parameter or member 'cur_max_bandwidth' not described in 'link_sta_info'

Copy the meaning from struct sta_info, documenting it.

	Signed-off-by: Mauro Carvalho Chehab <mchehab@kernel.org>
Link: https://lore.kernel.org/r/37d898634bb30776442a33833c48cbb21c90ecc6.1656409369.git.mchehab@kernel.org
	Signed-off-by: Johannes Berg <johannes.berg@intel.com>
(cherry picked from commit fe37f73d1109367d749e2771045ae28e0c1543a9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/mac80211/sta_info.h
diff --cc net/mac80211/sta_info.h
index addc78b398f0,4e0b969891de..000000000000
--- a/net/mac80211/sta_info.h
+++ b/net/mac80211/sta_info.h
@@@ -484,6 -484,92 +484,95 @@@ struct ieee80211_fragment_cache 
  #define STA_SLOW_THRESHOLD 6000 /* 6 Mbps */
  
  /**
++<<<<<<< HEAD
++=======
+  * struct link_sta_info - Link STA information
+  * All link specific sta info are stored here for reference. This can be
+  * a single entry for non-MLD STA or multiple entries for MLD STA
+  * @addr: Link MAC address - Can be same as MLD STA mac address and is always
+  *	same for non-MLD STA. This is used as key for searching link STA
+  * @link_id: Link ID uniquely identifying the link STA. This is 0 for non-MLD
+  *	and set to the corresponding vif LinkId for MLD STA
+  * @link_hash_node: hash node for rhashtable
+  * @sta: Points to the STA info
+  * @gtk: group keys negotiated with this station, if any
+  * @tx_stats: TX statistics
+  * @tx_stats.packets: # of packets transmitted
+  * @tx_stats.bytes: # of bytes in all packets transmitted
+  * @tx_stats.last_rate: last TX rate
+  * @tx_stats.msdu: # of transmitted MSDUs per TID
+  * @rx_stats: RX statistics
+  * @rx_stats_avg: averaged RX statistics
+  * @rx_stats_avg.signal: averaged signal
+  * @rx_stats_avg.chain_signal: averaged per-chain signal
+  * @pcpu_rx_stats: per-CPU RX statistics, assigned only if the driver needs
+  *	this (by advertising the USES_RSS hw flag)
+  * @status_stats: TX status statistics
+  * @status_stats.filtered: # of filtered frames
+  * @status_stats.retry_failed: # of frames that failed after retry
+  * @status_stats.retry_count: # of retries attempted
+  * @status_stats.lost_packets: # of lost packets
+  * @status_stats.last_pkt_time: timestamp of last ACKed packet
+  * @status_stats.msdu_retries: # of MSDU retries
+  * @status_stats.msdu_failed: # of failed MSDUs
+  * @status_stats.last_ack: last ack timestamp (jiffies)
+  * @status_stats.last_ack_signal: last ACK signal
+  * @status_stats.ack_signal_filled: last ACK signal validity
+  * @status_stats.avg_ack_signal: average ACK signal
+  * @cur_max_bandwidth: maximum bandwidth to use for TX to the station,
+  *	taken from HT/VHT capabilities or VHT operating mode notification
+  * @pub: public (driver visible) link STA data
+  * TODO Move other link params from sta_info as required for MLD operation
+  */
+ struct link_sta_info {
+ 	u8 addr[ETH_ALEN];
+ 	u8 link_id;
+ 
+ 	struct rhlist_head link_hash_node;
+ 
+ 	struct sta_info *sta;
+ 	struct ieee80211_key __rcu *gtk[NUM_DEFAULT_KEYS +
+ 					NUM_DEFAULT_MGMT_KEYS +
+ 					NUM_DEFAULT_BEACON_KEYS];
+ 	struct ieee80211_sta_rx_stats __percpu *pcpu_rx_stats;
+ 
+ 	/* Updated from RX path only, no locking requirements */
+ 	struct ieee80211_sta_rx_stats rx_stats;
+ 	struct {
+ 		struct ewma_signal signal;
+ 		struct ewma_signal chain_signal[IEEE80211_MAX_CHAINS];
+ 	} rx_stats_avg;
+ 
+ 	/* Updated from TX status path only, no locking requirements */
+ 	struct {
+ 		unsigned long filtered;
+ 		unsigned long retry_failed, retry_count;
+ 		unsigned int lost_packets;
+ 		unsigned long last_pkt_time;
+ 		u64 msdu_retries[IEEE80211_NUM_TIDS + 1];
+ 		u64 msdu_failed[IEEE80211_NUM_TIDS + 1];
+ 		unsigned long last_ack;
+ 		s8 last_ack_signal;
+ 		bool ack_signal_filled;
+ 		struct ewma_avg_signal avg_ack_signal;
+ 	} status_stats;
+ 
+ 	/* Updated from TX path only, no locking requirements */
+ 	struct {
+ 		u64 packets[IEEE80211_NUM_ACS];
+ 		u64 bytes[IEEE80211_NUM_ACS];
+ 		struct ieee80211_tx_rate last_rate;
+ 		struct rate_info last_rate_info;
+ 		u64 msdu[IEEE80211_NUM_TIDS + 1];
+ 	} tx_stats;
+ 
+ 	enum ieee80211_sta_rx_bandwidth cur_max_bandwidth;
+ 
+ 	struct ieee80211_link_sta *pub;
+ };
+ 
+ /**
++>>>>>>> fe37f73d1109 (wifi: mac80211: sta_info: fix a missing kernel-doc struct element)
   * struct sta_info - STA information
   *
   * This structure collects information about a station that
* Unmerged path net/mac80211/sta_info.h
