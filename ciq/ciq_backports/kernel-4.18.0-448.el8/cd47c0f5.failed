wifi: cfg80211: put cfg80211_rx_assoc_resp() arguments into a struct

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Johannes Berg <johannes.berg@intel.com>
commit cd47c0f57ae6607cfa3d161e341cbdd283bc444f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/cd47c0f5.failed

For MLO we'll need a lot more arguments, including all the
BSS pointers and link addresses, so move the data to a struct
to be able to extend it more easily later.

	Signed-off-by: Johannes Berg <johannes.berg@intel.com>
(cherry picked from commit cd47c0f57ae6607cfa3d161e341cbdd283bc444f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/mac80211/mlme.c
#	net/wireless/mlme.c
diff --cc net/mac80211/mlme.c
index 58887336ec66,ecbd70a1fbb7..000000000000
--- a/net/mac80211/mlme.c
+++ b/net/mac80211/mlme.c
@@@ -3936,10 -3987,10 +3939,15 @@@ static void ieee80211_rx_mgmt_assoc_res
  		ieee80211_destroy_assoc_data(sdata, ASSOC_SUCCESS);
  
  		/* get uapsd queues configuration */
- 		uapsd_queues = 0;
+ 		resp.uapsd_queues = 0;
  		for (ac = 0; ac < IEEE80211_NUM_ACS; ac++)
++<<<<<<< HEAD
 +			if (sdata->tx_conf[ac].uapsd)
 +				uapsd_queues |= ieee80211_ac_to_qos_mask[ac];
++=======
+ 			if (sdata->deflink.tx_conf[ac].uapsd)
+ 				resp.uapsd_queues |= ieee80211_ac_to_qos_mask[ac];
++>>>>>>> cd47c0f57ae6 (wifi: cfg80211: put cfg80211_rx_assoc_resp() arguments into a struct)
  
  		info.success = 1;
  	}
diff --cc net/wireless/mlme.c
index 54121647d29f,a6ad696f131b..000000000000
--- a/net/wireless/mlme.c
+++ b/net/wireless/mlme.c
@@@ -42,10 -41,10 +41,17 @@@ void cfg80211_rx_assoc_resp(struct net_
  
  	memset(&cr, 0, sizeof(cr));
  	cr.status = (int)le16_to_cpu(mgmt->u.assoc_resp.status_code);
++<<<<<<< HEAD
 +	cr.bssid = mgmt->bssid;
 +	cr.bss = bss;
 +	cr.req_ie = req_ies;
 +	cr.req_ie_len = req_ies_len;
++=======
+ 	cr.links[0].bssid = mgmt->bssid;
+ 	cr.links[0].bss = data->bss;
+ 	cr.req_ie = data->req_ies;
+ 	cr.req_ie_len = data->req_ies_len;
++>>>>>>> cd47c0f57ae6 (wifi: cfg80211: put cfg80211_rx_assoc_resp() arguments into a struct)
  	cr.resp_ie = resp_ie;
  	cr.resp_ie_len = resp_ie_len;
  	cr.timeout_reason = NL80211_TIMEOUT_UNSPECIFIED;
diff --git a/include/net/cfg80211.h b/include/net/cfg80211.h
index d9d8fef7db3d..554c9cdfb903 100644
--- a/include/net/cfg80211.h
+++ b/include/net/cfg80211.h
@@ -6699,16 +6699,29 @@ void cfg80211_rx_mlme_mgmt(struct net_device *dev, const u8 *buf, size_t len);
 void cfg80211_auth_timeout(struct net_device *dev, const u8 *addr);
 
 /**
- * cfg80211_rx_assoc_resp - notification of processed association response
- * @dev: network device
+ * struct cfg80211_rx_assoc_resp - association response data
  * @bss: the BSS that association was requested with, ownership of the pointer
- *	moves to cfg80211 in this call
+ *	moves to cfg80211 in the call to cfg80211_rx_assoc_resp()
  * @buf: (Re)Association Response frame (header + body)
  * @len: length of the frame data
  * @uapsd_queues: bitmap of queues configured for uapsd. Same format
  *	as the AC bitmap in the QoS info field
  * @req_ies: information elements from the (Re)Association Request frame
  * @req_ies_len: length of req_ies data
+ */
+struct cfg80211_rx_assoc_resp {
+	struct cfg80211_bss *bss;
+	const u8 *buf;
+	size_t len;
+	const u8 *req_ies;
+	size_t req_ies_len;
+	int uapsd_queues;
+};
+
+/**
+ * cfg80211_rx_assoc_resp - notification of processed association response
+ * @dev: network device
+ * @data: association response data, &struct cfg80211_rx_assoc_resp
  *
  * After being asked to associate via cfg80211_ops::assoc() the driver must
  * call either this function or cfg80211_auth_timeout().
@@ -6716,10 +6729,7 @@ void cfg80211_auth_timeout(struct net_device *dev, const u8 *addr);
  * This function may sleep. The caller must hold the corresponding wdev's mutex.
  */
 void cfg80211_rx_assoc_resp(struct net_device *dev,
-			    struct cfg80211_bss *bss,
-			    const u8 *buf, size_t len,
-			    int uapsd_queues,
-			    const u8 *req_ies, size_t req_ies_len);
+			    struct cfg80211_rx_assoc_resp *data);
 
 /**
  * struct cfg80211_assoc_failure - association failure data
* Unmerged path net/mac80211/mlme.c
* Unmerged path net/wireless/mlme.c
diff --git a/net/wireless/nl80211.c b/net/wireless/nl80211.c
index 7060846918e1..fd6dacfb4879 100644
--- a/net/wireless/nl80211.c
+++ b/net/wireless/nl80211.c
@@ -16834,13 +16834,13 @@ void nl80211_send_rx_auth(struct cfg80211_registered_device *rdev,
 }
 
 void nl80211_send_rx_assoc(struct cfg80211_registered_device *rdev,
-			   struct net_device *netdev, const u8 *buf,
-			   size_t len, gfp_t gfp, int uapsd_queues,
-			   const u8 *req_ies, size_t req_ies_len)
+			   struct net_device *netdev,
+			   struct cfg80211_rx_assoc_resp *data)
 {
-	nl80211_send_mlme_event(rdev, netdev, buf, len,
-				NL80211_CMD_ASSOCIATE, gfp, uapsd_queues,
-				req_ies, req_ies_len, false);
+	nl80211_send_mlme_event(rdev, netdev, data->buf, data->len,
+				NL80211_CMD_ASSOCIATE, GFP_KERNEL,
+				data->uapsd_queues,
+				data->req_ies, data->req_ies_len, false);
 }
 
 void nl80211_send_deauth(struct cfg80211_registered_device *rdev,
diff --git a/net/wireless/nl80211.h b/net/wireless/nl80211.h
index d642e3be4ee7..a7e8e0917c1c 100644
--- a/net/wireless/nl80211.h
+++ b/net/wireless/nl80211.h
@@ -60,9 +60,7 @@ void nl80211_send_rx_auth(struct cfg80211_registered_device *rdev,
 			  const u8 *buf, size_t len, gfp_t gfp);
 void nl80211_send_rx_assoc(struct cfg80211_registered_device *rdev,
 			   struct net_device *netdev,
-			   const u8 *buf, size_t len, gfp_t gfp,
-			   int uapsd_queues,
-			   const u8 *req_ies, size_t req_ies_len);
+			   struct cfg80211_rx_assoc_resp *data);
 void nl80211_send_deauth(struct cfg80211_registered_device *rdev,
 			 struct net_device *netdev,
 			 const u8 *buf, size_t len,
