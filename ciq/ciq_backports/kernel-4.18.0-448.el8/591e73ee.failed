wifi: mac80211: properly skip link info driver update

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Johannes Berg <johannes.berg@intel.com>
commit 591e73ee3f737098723406bcfae43673add31881
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/591e73ee.failed

If the interface isn't (yet) added to the driver, skip the
link info update. This was previously done for the BSS info
changes, but I forgot to copy the same check here.

Fixes: 7b7090b4c6a9 ("wifi: mac80211: split bss_info_changed method")
	Reported-by: syzbot+bce2ca140cc00578ed07@syzkaller.appspotmail.com
	Signed-off-by: Johannes Berg <johannes.berg@intel.com>
(cherry picked from commit 591e73ee3f737098723406bcfae43673add31881)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/mac80211/main.c
diff --cc net/mac80211/main.c
index ae06e4025b16,c34f06039dda..000000000000
--- a/net/mac80211/main.c
+++ b/net/mac80211/main.c
@@@ -208,7 -214,77 +208,79 @@@ void ieee80211_bss_info_change_notify(s
  	if (!changed || sdata->vif.type == NL80211_IFTYPE_AP_VLAN)
  		return;
  
++<<<<<<< HEAD
 +	drv_bss_info_changed(local, sdata, &sdata->vif.bss_conf, changed);
++=======
+ 	if (WARN_ON_ONCE(changed & (BSS_CHANGED_BEACON |
+ 				    BSS_CHANGED_BEACON_ENABLED) &&
+ 			 sdata->vif.type != NL80211_IFTYPE_AP &&
+ 			 sdata->vif.type != NL80211_IFTYPE_ADHOC &&
+ 			 sdata->vif.type != NL80211_IFTYPE_MESH_POINT &&
+ 			 sdata->vif.type != NL80211_IFTYPE_OCB))
+ 		return;
+ 
+ 	if (WARN_ON_ONCE(sdata->vif.type == NL80211_IFTYPE_P2P_DEVICE ||
+ 			 sdata->vif.type == NL80211_IFTYPE_NAN ||
+ 			 (sdata->vif.type == NL80211_IFTYPE_MONITOR &&
+ 			  !sdata->vif.bss_conf.mu_mimo_owner &&
+ 			  !(changed & BSS_CHANGED_TXPOWER))))
+ 		return;
+ 
+ 	if (!check_sdata_in_driver(sdata))
+ 		return;
+ 
+ 	if (changed & BSS_CHANGED_VIF_CFG_FLAGS) {
+ 		u64 ch = changed & BSS_CHANGED_VIF_CFG_FLAGS;
+ 
+ 		trace_drv_vif_cfg_changed(local, sdata, changed);
+ 		if (local->ops->vif_cfg_changed)
+ 			local->ops->vif_cfg_changed(&local->hw, &sdata->vif, ch);
+ 	}
+ 
+ 	if (changed & ~BSS_CHANGED_VIF_CFG_FLAGS) {
+ 		u64 ch = changed & ~BSS_CHANGED_VIF_CFG_FLAGS;
+ 
+ 		/* FIXME: should be for each link */
+ 		trace_drv_link_info_changed(local, sdata, 0, changed);
+ 		if (local->ops->link_info_changed)
+ 			local->ops->link_info_changed(&local->hw, &sdata->vif,
+ 						      0, ch);
+ 	}
+ 
+ 	if (local->ops->bss_info_changed)
+ 		local->ops->bss_info_changed(&local->hw, &sdata->vif,
+ 					     &sdata->vif.bss_conf, changed);
+ 	trace_drv_return_void(local);
+ }
+ 
+ void ieee80211_vif_cfg_change_notify(struct ieee80211_sub_if_data *sdata,
+ 				     u64 changed)
+ {
+ 	struct ieee80211_local *local = sdata->local;
+ 
+ 	WARN_ON_ONCE(changed & ~BSS_CHANGED_VIF_CFG_FLAGS);
+ 
+ 	if (!changed || sdata->vif.type == NL80211_IFTYPE_AP_VLAN)
+ 		return;
+ 
+ 	drv_vif_cfg_changed(local, sdata, changed);
+ }
+ 
+ void ieee80211_link_info_change_notify(struct ieee80211_sub_if_data *sdata,
+ 				       int link_id, u64 changed)
+ {
+ 	struct ieee80211_local *local = sdata->local;
+ 
+ 	WARN_ON_ONCE(changed & BSS_CHANGED_VIF_CFG_FLAGS);
+ 
+ 	if (!changed || sdata->vif.type == NL80211_IFTYPE_AP_VLAN)
+ 		return;
+ 
+ 	if (!check_sdata_in_driver(sdata))
+ 		return;
+ 
+ 	drv_link_info_changed(local, sdata, link_id, changed);
++>>>>>>> 591e73ee3f73 (wifi: mac80211: properly skip link info driver update)
  }
  
  u32 ieee80211_reset_erp_info(struct ieee80211_sub_if_data *sdata)
* Unmerged path net/mac80211/main.c
