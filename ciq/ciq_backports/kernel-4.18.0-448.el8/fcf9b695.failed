ice: add i2c write command

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Karol Kolacinski <karol.kolacinski@intel.com>
commit fcf9b695a554dd8b74863ea59b639515f95b10ee
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/fcf9b695.failed

Add the possibility to write to connected i2c devices using the AQ
command. FW may reject the write if the device is not on allowlist.

	Signed-off-by: Karol Kolacinski <karol.kolacinski@intel.com>
	Tested-by: Gurucharan <gurucharanx.g@intel.com> (A Contingent worker at Intel)
	Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
(cherry picked from commit fcf9b695a554dd8b74863ea59b639515f95b10ee)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/intel/ice/ice_adminq_cmd.h
#	drivers/net/ethernet/intel/ice/ice_common.c
#	drivers/net/ethernet/intel/ice/ice_common.h
diff --cc drivers/net/ethernet/intel/ice/ice_adminq_cmd.h
index 476310d43e3b,9939238573a4..000000000000
--- a/drivers/net/ethernet/intel/ice/ice_adminq_cmd.h
+++ b/drivers/net/ethernet/intel/ice/ice_adminq_cmd.h
@@@ -1339,6 -1395,24 +1339,27 @@@ struct ice_aqc_get_link_topo 
  	u8 rsvd[9];
  };
  
++<<<<<<< HEAD
++=======
+ /* Read/Write I2C (direct, 0x06E2/0x06E3) */
+ struct ice_aqc_i2c {
+ 	struct ice_aqc_link_topo_addr topo_addr;
+ 	__le16 i2c_addr;
+ 	u8 i2c_params;
+ #define ICE_AQC_I2C_DATA_SIZE_M		GENMASK(3, 0)
+ #define ICE_AQC_I2C_USE_REPEATED_START	BIT(7)
+ 
+ 	u8 rsvd;
+ 	__le16 i2c_bus_addr;
+ 	u8 i2c_data[4]; /* Used only by write command, reserved in read. */
+ };
+ 
+ /* Read I2C Response (direct, 0x06E2) */
+ struct ice_aqc_read_i2c_resp {
+ 	u8 i2c_data[16];
+ };
+ 
++>>>>>>> fcf9b695a554 (ice: add i2c write command)
  /* Set Port Identification LED (direct, 0x06E9) */
  struct ice_aqc_set_port_id_led {
  	u8 lport_num;
@@@ -2049,6 -2124,8 +2070,11 @@@ struct ice_aq_desc 
  		struct ice_aqc_get_link_status get_link_status;
  		struct ice_aqc_event_lan_overflow lan_overflow;
  		struct ice_aqc_get_link_topo get_link_topo;
++<<<<<<< HEAD
++=======
+ 		struct ice_aqc_i2c read_write_i2c;
+ 		struct ice_aqc_read_i2c_resp read_i2c_resp;
++>>>>>>> fcf9b695a554 (ice: add i2c write command)
  	} params;
  };
  
@@@ -2160,6 -2240,8 +2186,11 @@@ enum ice_adminq_opc 
  	ice_aqc_opc_set_event_mask			= 0x0613,
  	ice_aqc_opc_set_mac_lb				= 0x0620,
  	ice_aqc_opc_get_link_topo			= 0x06E0,
++<<<<<<< HEAD
++=======
+ 	ice_aqc_opc_read_i2c				= 0x06E2,
+ 	ice_aqc_opc_write_i2c				= 0x06E3,
++>>>>>>> fcf9b695a554 (ice: add i2c write command)
  	ice_aqc_opc_set_port_id_led			= 0x06E9,
  	ice_aqc_opc_set_gpio				= 0x06EC,
  	ice_aqc_opc_get_gpio				= 0x06ED,
diff --cc drivers/net/ethernet/intel/ice/ice_common.c
index 8ce77be21a7c,27d0cbbd29da..000000000000
--- a/drivers/net/ethernet/intel/ice/ice_common.c
+++ b/drivers/net/ethernet/intel/ice/ice_common.c
@@@ -4764,6 -4798,104 +4764,107 @@@ ice_sched_query_elem(struct ice_hw *hw
  }
  
  /**
++<<<<<<< HEAD
++=======
+  * ice_aq_read_i2c
+  * @hw: pointer to the hw struct
+  * @topo_addr: topology address for a device to communicate with
+  * @bus_addr: 7-bit I2C bus address
+  * @addr: I2C memory address (I2C offset) with up to 16 bits
+  * @params: I2C parameters: bit [7] - Repeated start,
+  *			    bits [6:5] data offset size,
+  *			    bit [4] - I2C address type,
+  *			    bits [3:0] - data size to read (0-16 bytes)
+  * @data: pointer to data (0 to 16 bytes) to be read from the I2C device
+  * @cd: pointer to command details structure or NULL
+  *
+  * Read I2C (0x06E2)
+  */
+ int
+ ice_aq_read_i2c(struct ice_hw *hw, struct ice_aqc_link_topo_addr topo_addr,
+ 		u16 bus_addr, __le16 addr, u8 params, u8 *data,
+ 		struct ice_sq_cd *cd)
+ {
+ 	struct ice_aq_desc desc = { 0 };
+ 	struct ice_aqc_i2c *cmd;
+ 	u8 data_size;
+ 	int status;
+ 
+ 	ice_fill_dflt_direct_cmd_desc(&desc, ice_aqc_opc_read_i2c);
+ 	cmd = &desc.params.read_write_i2c;
+ 
+ 	if (!data)
+ 		return -EINVAL;
+ 
+ 	data_size = FIELD_GET(ICE_AQC_I2C_DATA_SIZE_M, params);
+ 
+ 	cmd->i2c_bus_addr = cpu_to_le16(bus_addr);
+ 	cmd->topo_addr = topo_addr;
+ 	cmd->i2c_params = params;
+ 	cmd->i2c_addr = addr;
+ 
+ 	status = ice_aq_send_cmd(hw, &desc, NULL, 0, cd);
+ 	if (!status) {
+ 		struct ice_aqc_read_i2c_resp *resp;
+ 		u8 i;
+ 
+ 		resp = &desc.params.read_i2c_resp;
+ 		for (i = 0; i < data_size; i++) {
+ 			*data = resp->i2c_data[i];
+ 			data++;
+ 		}
+ 	}
+ 
+ 	return status;
+ }
+ 
+ /**
+  * ice_aq_write_i2c
+  * @hw: pointer to the hw struct
+  * @topo_addr: topology address for a device to communicate with
+  * @bus_addr: 7-bit I2C bus address
+  * @addr: I2C memory address (I2C offset) with up to 16 bits
+  * @params: I2C parameters: bit [4] - I2C address type, bits [3:0] - data size to write (0-7 bytes)
+  * @data: pointer to data (0 to 4 bytes) to be written to the I2C device
+  * @cd: pointer to command details structure or NULL
+  *
+  * Write I2C (0x06E3)
+  *
+  * * Return:
+  * * 0             - Successful write to the i2c device
+  * * -EINVAL       - Data size greater than 4 bytes
+  * * -EIO          - FW error
+  */
+ int
+ ice_aq_write_i2c(struct ice_hw *hw, struct ice_aqc_link_topo_addr topo_addr,
+ 		 u16 bus_addr, __le16 addr, u8 params, u8 *data,
+ 		 struct ice_sq_cd *cd)
+ {
+ 	struct ice_aq_desc desc = { 0 };
+ 	struct ice_aqc_i2c *cmd;
+ 	u8 data_size;
+ 
+ 	ice_fill_dflt_direct_cmd_desc(&desc, ice_aqc_opc_write_i2c);
+ 	cmd = &desc.params.read_write_i2c;
+ 
+ 	data_size = FIELD_GET(ICE_AQC_I2C_DATA_SIZE_M, params);
+ 
+ 	/* data_size limited to 4 */
+ 	if (data_size > 4)
+ 		return -EINVAL;
+ 
+ 	cmd->i2c_bus_addr = cpu_to_le16(bus_addr);
+ 	cmd->topo_addr = topo_addr;
+ 	cmd->i2c_params = params;
+ 	cmd->i2c_addr = addr;
+ 
+ 	memcpy(cmd->i2c_data, data, data_size);
+ 
+ 	return ice_aq_send_cmd(hw, &desc, NULL, 0, cd);
+ }
+ 
+ /**
++>>>>>>> fcf9b695a554 (ice: add i2c write command)
   * ice_aq_set_driver_param - Set driver parameter to share via firmware
   * @hw: pointer to the HW struct
   * @idx: parameter index to set
diff --cc drivers/net/ethernet/intel/ice/ice_common.h
index 1c57097ddf0b,61b7c60db689..000000000000
--- a/drivers/net/ethernet/intel/ice/ice_common.h
+++ b/drivers/net/ethernet/intel/ice/ice_common.h
@@@ -205,5 -210,13 +205,16 @@@ ice_aq_set_lldp_mib(struct ice_hw *hw, 
  bool ice_fw_supports_lldp_fltr_ctrl(struct ice_hw *hw);
  int
  ice_lldp_fltr_add_remove(struct ice_hw *hw, u16 vsi_num, bool add);
++<<<<<<< HEAD
++=======
+ int
+ ice_aq_read_i2c(struct ice_hw *hw, struct ice_aqc_link_topo_addr topo_addr,
+ 		u16 bus_addr, __le16 addr, u8 params, u8 *data,
+ 		struct ice_sq_cd *cd);
+ int
+ ice_aq_write_i2c(struct ice_hw *hw, struct ice_aqc_link_topo_addr topo_addr,
+ 		 u16 bus_addr, __le16 addr, u8 params, u8 *data,
+ 		 struct ice_sq_cd *cd);
++>>>>>>> fcf9b695a554 (ice: add i2c write command)
  bool ice_fw_supports_report_dflt_cfg(struct ice_hw *hw);
  #endif /* _ICE_COMMON_H_ */
* Unmerged path drivers/net/ethernet/intel/ice/ice_adminq_cmd.h
* Unmerged path drivers/net/ethernet/intel/ice/ice_common.c
* Unmerged path drivers/net/ethernet/intel/ice/ice_common.h
