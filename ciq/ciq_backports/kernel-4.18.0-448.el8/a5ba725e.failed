ASoC: SOF: topology: Skip parsing DAI link tokens if not needed

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Ranjani Sridharan <ranjani.sridharan@linux.intel.com>
commit a5ba725e9dc928832ba97a4418e36fef8d0244c6
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/a5ba725e.failed

Do not parse these tokens if they are not defined in the IPC version
specific token list. In the case of IPC4 with HDA topologies for
example, no DAI link specific tokens need to be added in topology.

	Signed-off-by: Ranjani Sridharan <ranjani.sridharan@linux.intel.com>
	Reviewed-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
	Reviewed-by: Bard Liao <yung-chuan.liao@linux.intel.com>
	Reviewed-by: PÃ©ter Ujfalusi <peter.ujfalusi@linux.intel.com>
Link: https://lore.kernel.org/r/20220426171743.171061-10-ranjani.sridharan@linux.intel.com
	Signed-off-by: Mark Brown <broonie@kernel.org>
(cherry picked from commit a5ba725e9dc928832ba97a4418e36fef8d0244c6)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	sound/soc/sof/topology.c
diff --cc sound/soc/sof/topology.c
index 9d9e8416c0b0,b1fcab7ce48e..000000000000
--- a/sound/soc/sof/topology.c
+++ b/sound/soc/sof/topology.c
@@@ -3452,7 -1713,69 +3452,73 @@@ static int sof_link_load(struct snd_soc
  		break;
  	}
  
++<<<<<<< HEAD
 +	kfree(config);
++=======
+ 	/* allocate memory for tuples array */
+ 	slink->tuples = kcalloc(num_tuples, sizeof(*slink->tuples), GFP_KERNEL);
+ 	if (!slink->tuples) {
+ 		kfree(slink->hw_configs);
+ 		kfree(slink);
+ 		return -ENOMEM;
+ 	}
+ 
+ 	if (token_list[SOF_DAI_LINK_TOKENS].tokens) {
+ 		/* parse one set of DAI link tokens */
+ 		ret = sof_copy_tuples(sdev, private->array, le32_to_cpu(private->size),
+ 				      SOF_DAI_LINK_TOKENS, 1, slink->tuples,
+ 				      num_tuples, &slink->num_tuples);
+ 		if (ret < 0) {
+ 			dev_err(scomp->dev, "failed to parse %s for dai link %s\n",
+ 				token_list[SOF_DAI_LINK_TOKENS].name, link->name);
+ 			goto err;
+ 		}
+ 	}
+ 
+ 	/* nothing more to do if there are no DAI type-specific tokens defined */
+ 	if (!token_id || !token_list[token_id].tokens)
+ 		goto out;
+ 
+ 	/* parse "num_sets" sets of DAI-specific tokens */
+ 	ret = sof_copy_tuples(sdev, private->array, le32_to_cpu(private->size),
+ 			      token_id, num_sets, slink->tuples, num_tuples, &slink->num_tuples);
+ 	if (ret < 0) {
+ 		dev_err(scomp->dev, "failed to parse %s for dai link %s\n",
+ 			token_list[token_id].name, link->name);
+ 		goto err;
+ 	}
+ 
+ 	/* for DMIC, also parse all sets of DMIC PDM tokens based on active PDM count */
+ 	if (token_id == SOF_DMIC_TOKENS) {
+ 		num_sets = sof_get_token_value(SOF_TKN_INTEL_DMIC_NUM_PDM_ACTIVE,
+ 					       slink->tuples, slink->num_tuples);
+ 
+ 		if (num_sets < 0) {
+ 			dev_err(sdev->dev, "Invalid active PDM count for %s\n", link->name);
+ 			ret = num_sets;
+ 			goto err;
+ 		}
+ 
+ 		ret = sof_copy_tuples(sdev, private->array, le32_to_cpu(private->size),
+ 				      SOF_DMIC_PDM_TOKENS, num_sets, slink->tuples,
+ 				      num_tuples, &slink->num_tuples);
+ 		if (ret < 0) {
+ 			dev_err(scomp->dev, "failed to parse %s for dai link %s\n",
+ 				token_list[SOF_DMIC_PDM_TOKENS].name, link->name);
+ 			goto err;
+ 		}
+ 	}
+ out:
+ 	link->dobj.private = slink;
+ 	list_add(&slink->list, &sdev->dai_link_list);
+ 
+ 	return 0;
+ 
+ err:
+ 	kfree(slink->tuples);
+ 	kfree(slink->hw_configs);
+ 	kfree(slink);
++>>>>>>> a5ba725e9dc9 (ASoC: SOF: topology: Skip parsing DAI link tokens if not needed)
  
  	return ret;
  }
* Unmerged path sound/soc/sof/topology.c
