gve: Update adminq commands to support DQO queues

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Bailey Forrest <bcf@google.com>
commit 1f6228e459f8bcfcda2f6a157bbd1ceb57b566f4
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/1f6228e4.failed

DQO queue creation requires additional parameters:
- TX completion/RX buffer queue size
- TX completion/RX buffer queue address
- TX/RX queue size
- RX buffer size

	Signed-off-by: Bailey Forrest <bcf@google.com>
	Reviewed-by: Willem de Bruijn <willemb@google.com>
	Reviewed-by: Catherine Sullivan <csully@google.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 1f6228e459f8bcfcda2f6a157bbd1ceb57b566f4)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/google/gve/gve.h
#	drivers/net/ethernet/google/gve/gve_adminq.c
diff --cc drivers/net/ethernet/google/gve/gve.h
index c3c095d645bd,8a2a8d125090..000000000000
--- a/drivers/net/ethernet/google/gve/gve.h
+++ b/drivers/net/ethernet/google/gve/gve.h
@@@ -503,6 -544,14 +503,17 @@@ struct gve_priv 
  
  	/* Gvnic device link speed from hypervisor. */
  	u64 link_speed;
++<<<<<<< HEAD
++=======
+ 
+ 	struct gve_options_dqo_rda options_dqo_rda;
+ 	struct gve_ptype_lut *ptype_lut_dqo;
+ 
+ 	/* Must be a power of two. */
+ 	int data_buffer_size_dqo;
+ 
+ 	enum gve_queue_format queue_format;
++>>>>>>> 1f6228e459f8 (gve: Update adminq commands to support DQO queues)
  };
  
  enum gve_service_task_flags_bit {
diff --cc drivers/net/ethernet/google/gve/gve_adminq.c
index 763187f38df6,cf017a499119..000000000000
--- a/drivers/net/ethernet/google/gve/gve_adminq.c
+++ b/drivers/net/ethernet/google/gve/gve_adminq.c
@@@ -457,7 -463,6 +458,10 @@@ static int gve_adminq_create_tx_queue(s
  {
  	struct gve_tx_ring *tx = &priv->tx[queue_index];
  	union gve_adminq_command cmd;
++<<<<<<< HEAD
 +	int err;
++=======
++>>>>>>> 1f6228e459f8 (gve: Update adminq commands to support DQO queues)
  
  	memset(&cmd, 0, sizeof(cmd));
  	cmd.opcode = cpu_to_be32(GVE_ADMINQ_CREATE_TX_QUEUE);
@@@ -466,8 -471,6 +470,10 @@@
  		.queue_resources_addr =
  			cpu_to_be64(tx->q_resources_bus),
  		.tx_ring_addr = cpu_to_be64(tx->bus),
++<<<<<<< HEAD
 +		.queue_page_list_id = cpu_to_be32(tx->tx_fifo.qpl->id),
++=======
++>>>>>>> 1f6228e459f8 (gve: Update adminq commands to support DQO queues)
  		.ntfy_id = cpu_to_be32(tx->ntfy_id),
  	};
  
@@@ -496,10 -509,7 +512,11 @@@ static int gve_adminq_create_rx_queue(s
  {
  	struct gve_rx_ring *rx = &priv->rx[queue_index];
  	union gve_adminq_command cmd;
- 	u32 qpl_id;
- 	int err;
  
++<<<<<<< HEAD
 +	qpl_id = priv->raw_addressing ? GVE_RAW_ADDRESSING_QPL_ID : rx->data.qpl->id;
++=======
++>>>>>>> 1f6228e459f8 (gve: Update adminq commands to support DQO queues)
  	memset(&cmd, 0, sizeof(cmd));
  	cmd.opcode = cpu_to_be32(GVE_ADMINQ_CREATE_RX_QUEUE);
  	cmd.create_rx_queue = (struct gve_adminq_create_rx_queue) {
* Unmerged path drivers/net/ethernet/google/gve/gve.h
* Unmerged path drivers/net/ethernet/google/gve/gve_adminq.c
diff --git a/drivers/net/ethernet/google/gve/gve_adminq.h b/drivers/net/ethernet/google/gve/gve_adminq.h
index 63cdd1a24ae1..436ed0137e53 100644
--- a/drivers/net/ethernet/google/gve/gve_adminq.h
+++ b/drivers/net/ethernet/google/gve/gve_adminq.h
@@ -138,9 +138,11 @@ struct gve_adminq_configure_device_resources {
 	__be32 num_irq_dbs;
 	__be32 irq_db_stride;
 	__be32 ntfy_blk_msix_base_idx;
+	u8 queue_format;
+	u8 padding[7];
 };
 
-static_assert(sizeof(struct gve_adminq_configure_device_resources) == 32);
+static_assert(sizeof(struct gve_adminq_configure_device_resources) == 40);
 
 struct gve_adminq_register_page_list {
 	__be32 page_list_id;
@@ -165,9 +167,13 @@ struct gve_adminq_create_tx_queue {
 	__be64 tx_ring_addr;
 	__be32 queue_page_list_id;
 	__be32 ntfy_id;
+	__be64 tx_comp_ring_addr;
+	__be16 tx_ring_size;
+	__be16 tx_comp_ring_size;
+	u8 padding[4];
 };
 
-static_assert(sizeof(struct gve_adminq_create_tx_queue) == 32);
+static_assert(sizeof(struct gve_adminq_create_tx_queue) == 48);
 
 struct gve_adminq_create_rx_queue {
 	__be32 queue_id;
@@ -178,10 +184,14 @@ struct gve_adminq_create_rx_queue {
 	__be64 rx_desc_ring_addr;
 	__be64 rx_data_ring_addr;
 	__be32 queue_page_list_id;
-	u8 padding[4];
+	__be16 rx_ring_size;
+	__be16 packet_buffer_size;
+	__be16 rx_buff_ring_size;
+	u8 enable_rsc;
+	u8 padding[5];
 };
 
-static_assert(sizeof(struct gve_adminq_create_rx_queue) == 48);
+static_assert(sizeof(struct gve_adminq_create_rx_queue) == 56);
 
 /* Queue resources that are shared with the device */
 struct gve_queue_resources {
diff --git a/drivers/net/ethernet/google/gve/gve_ethtool.c b/drivers/net/ethernet/google/gve/gve_ethtool.c
index e8a09d3163e6..4b22d75d08aa 100644
--- a/drivers/net/ethernet/google/gve/gve_ethtool.c
+++ b/drivers/net/ethernet/google/gve/gve_ethtool.c
@@ -1,7 +1,7 @@
 // SPDX-License-Identifier: (GPL-2.0 OR MIT)
 /* Google virtual Ethernet (gve) driver
  *
- * Copyright (C) 2015-2019 Google, Inc.
+ * Copyright (C) 2015-2021 Google, Inc.
  */
 
 #include <linux/rtnetlink.h>
@@ -452,11 +452,16 @@ static int gve_set_tunable(struct net_device *netdev,
 
 	switch (etuna->id) {
 	case ETHTOOL_RX_COPYBREAK:
+	{
+		u32 max_copybreak = gve_is_gqi(priv) ?
+			(PAGE_SIZE / 2) : priv->data_buffer_size_dqo;
+
 		len = *(u32 *)value;
-		if (len > PAGE_SIZE / 2)
+		if (len > max_copybreak)
 			return -EINVAL;
 		priv->rx_copybreak = len;
 		return 0;
+	}
 	default:
 		return -EOPNOTSUPP;
 	}
