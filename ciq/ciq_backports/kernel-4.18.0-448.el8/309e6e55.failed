ASOC: SOF: Intel: hda-dai: consistent naming for HDA DAI and HDA link DMA

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
commit 309e6e557482415c32338b118f0eb17600d98060
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/309e6e55.failed

The Intel documentation refers to the concepts of 'HDAudio host
DMA' (system memory <--> DSP) and 'HDaudio link DMA' (DSP <-->
peripherals). We currently use the prefix 'hda_link' to describe DAI
operations, which can be confused for dailink operations.

Since the topology tokens refer unambiguously to the 'HDA' dai, let's
drop the link prefix for dai-related ops/callbacks. Conversely let's
use 'hda_link_dma' for routines related to the DMA management. In a
follow-up patch we will introduce the 'hda_dai_link' prefix for dailink
ops/callbacks.

	Signed-off-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
	Reviewed-by: Rander Wang <rander.wang@intel.com>
	Reviewed-by: Ranjani Sridharan <ranjani.sridharan@linux.intel.com>
	Reviewed-by: PÃ©ter Ujfalusi <peter.ujfalusi@linux.intel.com>
	Reviewed-by: Bard Liao <yung-chuan.liao@linux.intel.com>
Link: https://lore.kernel.org/r/20220421203201.1550328-4-pierre-louis.bossart@linux.intel.com
	Signed-off-by: Mark Brown <broonie@kernel.org>
(cherry picked from commit 309e6e557482415c32338b118f0eb17600d98060)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	sound/soc/sof/intel/hda-dai.c
diff --cc sound/soc/sof/intel/hda-dai.c
index 97bf291cb5b8,65f3ff519624..000000000000
--- a/sound/soc/sof/intel/hda-dai.c
+++ b/sound/soc/sof/intel/hda-dai.c
@@@ -166,63 -162,24 +166,69 @@@ static int hda_link_dma_params(struct h
  	return 0;
  }
  
++<<<<<<< HEAD
 +/* Update config for the DAI widget */
 +static struct sof_ipc_dai_config *hda_dai_update_config(struct snd_soc_dapm_widget *w,
 +							int channel)
 +{
 +	struct snd_sof_widget *swidget = w->dobj.private;
 +	struct sof_dai_private_data *private;
 +	struct sof_ipc_dai_config *config;
 +	struct snd_sof_dai *sof_dai;
 +
 +	if (!swidget)
 +		return NULL;
 +
 +	sof_dai = swidget->private;
 +
 +	if (!sof_dai || !sof_dai->private) {
 +		dev_err(swidget->scomp->dev, "%s: No private data for DAI %s\n", __func__,
 +			w->name);
 +		return NULL;
 +	}
 +
 +	private = sof_dai->private;
 +	if (!private->dai_config) {
 +		dev_err(swidget->scomp->dev, "%s: No config for DAI %s\n", __func__, w->name);
 +		return NULL;
 +	}
 +
 +	config = &private->dai_config[sof_dai->current_config];
 +
 +	/* update config with stream tag */
 +	config->hda.link_dma_ch = channel;
 +
 +	return config;
 +}
 +
 +static int hda_link_dai_widget_update(struct sof_intel_hda_stream *hda_stream,
 +				      struct snd_soc_dapm_widget *w,
 +				      int channel, bool widget_setup)
++=======
+ static int hda_dai_widget_update(struct sof_intel_hda_stream *hda_stream,
+ 				 struct snd_soc_dapm_widget *w,
+ 				 int channel, bool widget_setup)
++>>>>>>> 309e6e557482 (ASOC: SOF: Intel: hda-dai: consistent naming for HDA DAI and HDA link DMA)
  {
 -	struct snd_sof_dai_config_data data;
 +	struct snd_sof_dev *sdev = hda_stream->sdev;
 +	struct sof_ipc_dai_config *config;
  
 -	data.dai_data = channel;
 +	config = hda_dai_update_config(w, channel);
 +	if (!config) {
 +		dev_err(sdev->dev, "error: no config for DAI %s\n", w->name);
 +		return -ENOENT;
 +	}
  
  	/* set up/free DAI widget and send DAI_CONFIG IPC */
  	if (widget_setup)
 -		return hda_ctrl_dai_widget_setup(w, SOF_DAI_CONFIG_FLAGS_2_STEP_STOP, &data);
 +		return hda_ctrl_dai_widget_setup(w);
  
 -	return hda_ctrl_dai_widget_free(w, SOF_DAI_CONFIG_FLAGS_NONE, &data);
 +	return hda_ctrl_dai_widget_free(w);
  }
  
- static int hda_link_hw_params(struct snd_pcm_substream *substream,
- 			      struct snd_pcm_hw_params *params,
- 			      struct snd_soc_dai *dai)
+ static int hda_dai_hw_params(struct snd_pcm_substream *substream,
+ 			     struct snd_pcm_hw_params *params,
+ 			     struct snd_soc_dai *dai)
  {
  	struct hdac_stream *hstream = substream->runtime->private_data;
  	struct hdac_bus *bus = hstream->bus;
@@@ -338,7 -276,7 +344,11 @@@ static int hda_dai_config_pause_push_ip
  	return ret;
  }
  
++<<<<<<< HEAD
 +static int hda_link_pcm_trigger(struct snd_pcm_substream *substream,
++=======
+ static int ipc3_hda_dai_trigger(struct snd_pcm_substream *substream,
++>>>>>>> 309e6e557482 (ASOC: SOF: Intel: hda-dai: consistent naming for HDA DAI and HDA link DMA)
  				int cmd, struct snd_soc_dai *dai)
  {
  	struct hdac_ext_stream *hext_stream =
@@@ -457,11 -395,11 +467,19 @@@ static int hda_dai_hw_free(struct snd_p
  	return 0;
  }
  
++<<<<<<< HEAD
 +static const struct snd_soc_dai_ops hda_link_dai_ops = {
 +	.hw_params = hda_link_hw_params,
 +	.hw_free = hda_link_hw_free,
 +	.trigger = hda_link_pcm_trigger,
 +	.prepare = hda_link_pcm_prepare,
++=======
+ static const struct snd_soc_dai_ops ipc3_hda_dai_ops = {
+ 	.hw_params = hda_dai_hw_params,
+ 	.hw_free = hda_dai_hw_free,
+ 	.trigger = ipc3_hda_dai_trigger,
+ 	.prepare = hda_dai_prepare,
++>>>>>>> 309e6e557482 (ASOC: SOF: Intel: hda-dai: consistent naming for HDA DAI and HDA link DMA)
  };
  
  #endif
@@@ -591,6 -516,30 +609,33 @@@ static const struct snd_soc_dai_ops ssp
  	.shutdown = ssp_dai_shutdown,
  };
  
++<<<<<<< HEAD
++=======
+ void hda_set_dai_drv_ops(struct snd_sof_dev *sdev, struct snd_sof_dsp_ops *ops)
+ {
+ 	int i;
+ 
+ 	switch (sdev->pdata->ipc_type) {
+ 	case SOF_IPC:
+ 		for (i = 0; i < ops->num_drv; i++) {
+ 			if (strstr(ops->drv[i].name, "SSP")) {
+ 				ops->drv[i].ops = &ipc3_ssp_dai_ops;
+ 				continue;
+ 			}
+ #if IS_ENABLED(CONFIG_SND_SOC_SOF_HDA)
+ 			if (strstr(ops->drv[i].name, "iDisp") ||
+ 			    strstr(ops->drv[i].name, "Analog") ||
+ 			    strstr(ops->drv[i].name, "Digital"))
+ 				ops->drv[i].ops = &ipc3_hda_dai_ops;
+ #endif
+ 		}
+ 		break;
+ 	default:
+ 		break;
+ 	}
+ }
+ 
++>>>>>>> 309e6e557482 (ASOC: SOF: Intel: hda-dai: consistent naming for HDA DAI and HDA link DMA)
  /*
   * common dai driver for skl+ platforms.
   * some products who use this DAI array only physically have a subset of
* Unmerged path sound/soc/sof/intel/hda-dai.c
