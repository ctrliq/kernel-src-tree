s390/vfio-ap: sysfs attribute to display the guest's matrix

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Tony Krowiak <akrowiak@linux.ibm.com>
commit f7f795c54d7117d06d002e06f9fca5baec3f293d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/f7f795c5.failed

The matrix of adapters and domains configured in a guest's APCB may
differ from the matrix of adapters and domains assigned to the matrix mdev,
so this patch introduces a sysfs attribute to display the matrix of
adapters and domains that are or will be assigned to the APCB of a guest
that is or will be using the matrix mdev. For a matrix mdev denoted by
$uuid, the guest matrix can be displayed as follows:

   cat /sys/devices/vfio_ap/matrix/$uuid/guest_matrix

	Signed-off-by: Tony Krowiak <akrowiak@linux.ibm.com>
	Reviewed-by: Jason J. Herne <jjherne@linux.ibm.com>
	Signed-off-by: Alexander Gordeev <agordeev@linux.ibm.com>
(cherry picked from commit f7f795c54d7117d06d002e06f9fca5baec3f293d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/s390/crypto/vfio_ap_ops.c
diff --cc drivers/s390/crypto/vfio_ap_ops.c
index 69b05ef08538,6d722de44e8d..000000000000
--- a/drivers/s390/crypto/vfio_ap_ops.c
+++ b/drivers/s390/crypto/vfio_ap_ops.c
@@@ -966,11 -1427,8 +966,13 @@@ static ssize_t control_domains_show(str
  }
  static DEVICE_ATTR_RO(control_domains);
  
- static ssize_t matrix_show(struct device *dev, struct device_attribute *attr,
- 			   char *buf)
+ static ssize_t vfio_ap_mdev_matrix_show(struct ap_matrix *matrix, char *buf)
  {
++<<<<<<< HEAD
 +	struct mdev_device *mdev = mdev_from_dev(dev);
 +	struct ap_matrix_mdev *matrix_mdev = mdev_get_drvdata(mdev);
++=======
++>>>>>>> f7f795c54d71 (s390/vfio-ap: sysfs attribute to display the guest's matrix)
  	char *bufpos = buf;
  	unsigned long apid;
  	unsigned long apqi;
@@@ -981,14 -1439,12 +983,19 @@@
  	int nchars = 0;
  	int n;
  
++<<<<<<< HEAD
 +	apid1 = find_first_bit_inv(matrix_mdev->matrix.apm, napm_bits);
 +	apqi1 = find_first_bit_inv(matrix_mdev->matrix.aqm, naqm_bits);
 +
 +	mutex_lock(&matrix_dev->lock);
++=======
+ 	apid1 = find_first_bit_inv(matrix->apm, napm_bits);
+ 	apqi1 = find_first_bit_inv(matrix->aqm, naqm_bits);
++>>>>>>> f7f795c54d71 (s390/vfio-ap: sysfs attribute to display the guest's matrix)
  
  	if ((apid1 < napm_bits) && (apqi1 < naqm_bits)) {
- 		for_each_set_bit_inv(apid, matrix_mdev->matrix.apm, napm_bits) {
- 			for_each_set_bit_inv(apqi, matrix_mdev->matrix.aqm,
+ 		for_each_set_bit_inv(apid, matrix->apm, napm_bits) {
+ 			for_each_set_bit_inv(apqi, matrix->aqm,
  					     naqm_bits) {
  				n = sprintf(bufpos, "%02lx.%04lx\n", apid,
  					    apqi);
@@@ -1010,7 -1466,18 +1017,22 @@@
  		}
  	}
  
++<<<<<<< HEAD
 +	mutex_unlock(&matrix_dev->lock);
++=======
+ 	return nchars;
+ }
+ 
+ static ssize_t matrix_show(struct device *dev, struct device_attribute *attr,
+ 			   char *buf)
+ {
+ 	ssize_t nchars;
+ 	struct ap_matrix_mdev *matrix_mdev = dev_get_drvdata(dev);
+ 
+ 	mutex_lock(&matrix_dev->mdevs_lock);
+ 	nchars = vfio_ap_mdev_matrix_show(&matrix_mdev->matrix, buf);
+ 	mutex_unlock(&matrix_dev->mdevs_lock);
++>>>>>>> f7f795c54d71 (s390/vfio-ap: sysfs attribute to display the guest's matrix)
  
  	return nchars;
  }
* Unmerged path drivers/s390/crypto/vfio_ap_ops.c
