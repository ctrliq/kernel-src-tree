iommu: Remove mode argument from iommu_set_dma_strict()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author John Garry <john.garry@huawei.com>
commit 308723e3580027f0cd7c86a5edfe6b5acb6863d2
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/308723e3.failed

We only ever now set strict mode enabled in iommu_set_dma_strict(), so
just remove the argument.

	Signed-off-by: John Garry <john.garry@huawei.com>
	Reviewed-by: Robin Murphy <robin.murphy@arm.com>
	Reviewed-by: Lu Baolu <baolu.lu@linux.intel.com>
Link: https://lore.kernel.org/r/1626088340-5838-7-git-send-email-john.garry@huawei.com
	Signed-off-by: Joerg Roedel <jroedel@suse.de>
(cherry picked from commit 308723e3580027f0cd7c86a5edfe6b5acb6863d2)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/iommu/amd/init.c
#	drivers/iommu/intel/iommu.c
diff --cc drivers/iommu/amd/init.c
index 44780e91ab3c,6e12a615117b..000000000000
--- a/drivers/iommu/amd/init.c
+++ b/drivers/iommu/amd/init.c
@@@ -3145,7 -3099,7 +3145,11 @@@ static int __init parse_amd_iommu_optio
  	for (; *str; ++str) {
  		if (strncmp(str, "fullflush", 9) == 0) {
  			pr_warn("amd_iommu=fullflush deprecated; use iommu.strict=1 instead\n");
++<<<<<<< HEAD
 +			amd_iommu_unmap_flush = true;
++=======
+ 			iommu_set_dma_strict();
++>>>>>>> 308723e35800 (iommu: Remove mode argument from iommu_set_dma_strict())
  		}
  		if (strncmp(str, "force_enable", 12) == 0)
  			amd_iommu_force_enable = true;
diff --cc drivers/iommu/intel/iommu.c
index 46171dfe60a5,da9afa730df1..000000000000
--- a/drivers/iommu/intel/iommu.c
+++ b/drivers/iommu/intel/iommu.c
@@@ -449,8 -454,7 +449,12 @@@ static int __init intel_iommu_setup(cha
  			iommu_dma_forcedac = true;
  		} else if (!strncmp(str, "strict", 6)) {
  			pr_warn("intel_iommu=strict deprecated; use iommu.strict=1 instead\n");
++<<<<<<< HEAD
 +			pr_info("Disable batched IOTLB flush\n");
 +			intel_iommu_strict = 1;
++=======
+ 			iommu_set_dma_strict();
++>>>>>>> 308723e35800 (iommu: Remove mode argument from iommu_set_dma_strict())
  		} else if (!strncmp(str, "sp_off", 6)) {
  			pr_info("Disable supported super page\n");
  			intel_iommu_superpage = 0;
@@@ -4562,9 -4392,9 +4566,15 @@@ int __init intel_iommu_init(void
  		 * is likely to be much lower than the overhead of synchronizing
  		 * the virtual and physical IOMMU page-tables.
  		 */
++<<<<<<< HEAD
 +		if (!intel_iommu_strict && cap_caching_mode(iommu->cap)) {
 +			pr_warn("IOMMU batching is disabled due to virtualization");
 +			intel_iommu_strict = 1;
++=======
+ 		if (cap_caching_mode(iommu->cap)) {
+ 			pr_info_once("IOMMU batching disallowed due to virtualization\n");
+ 			iommu_set_dma_strict();
++>>>>>>> 308723e35800 (iommu: Remove mode argument from iommu_set_dma_strict())
  		}
  		iommu_device_sysfs_add(&iommu->iommu, NULL,
  				       intel_iommu_groups,
@@@ -5827,8 -5712,8 +5837,13 @@@ static void quirk_calpella_no_shadow_gt
  	} else if (dmar_map_gfx) {
  		/* we have to ensure the gfx device is idle before we flush */
  		pci_info(dev, "Disabling batched IOTLB flush on Ironlake\n");
++<<<<<<< HEAD
 +		intel_iommu_strict = 1;
 +       }
++=======
+ 		iommu_set_dma_strict();
+ 	}
++>>>>>>> 308723e35800 (iommu: Remove mode argument from iommu_set_dma_strict())
  }
  DECLARE_PCI_FIXUP_HEADER(PCI_VENDOR_ID_INTEL, 0x0040, quirk_calpella_no_shadow_gtt);
  DECLARE_PCI_FIXUP_HEADER(PCI_VENDOR_ID_INTEL, 0x0044, quirk_calpella_no_shadow_gtt);
* Unmerged path drivers/iommu/amd/init.c
* Unmerged path drivers/iommu/intel/iommu.c
diff --git a/drivers/iommu/iommu.c b/drivers/iommu/iommu.c
index e3b387fd5b1a..89202ebd1077 100644
--- a/drivers/iommu/iommu.c
+++ b/drivers/iommu/iommu.c
@@ -373,10 +373,9 @@ static int __init iommu_dma_setup(char *str)
 }
 early_param("iommu.strict", iommu_dma_setup);
 
-void iommu_set_dma_strict(bool strict)
+void iommu_set_dma_strict(void)
 {
-	if (strict || !(iommu_cmd_line & IOMMU_CMD_LINE_STRICT))
-		iommu_dma_strict = strict;
+	iommu_dma_strict = true;
 }
 
 bool iommu_get_dma_strict(struct iommu_domain *domain)
diff --git a/include/linux/iommu.h b/include/linux/iommu.h
index 3d8eac931f9c..a2d8cdb530c0 100644
--- a/include/linux/iommu.h
+++ b/include/linux/iommu.h
@@ -537,7 +537,7 @@ int iommu_enable_nesting(struct iommu_domain *domain);
 int iommu_set_pgtable_quirks(struct iommu_domain *domain,
 		unsigned long quirks);
 
-void iommu_set_dma_strict(bool val);
+void iommu_set_dma_strict(void);
 bool iommu_get_dma_strict(struct iommu_domain *domain);
 
 extern int report_iommu_fault(struct iommu_domain *domain, struct device *dev,
