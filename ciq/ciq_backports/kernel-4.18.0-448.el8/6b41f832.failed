wifi: mac80211: HT: make ieee80211_ht_cap_ie_to_sta_ht_cap() MLO-aware

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Johannes Berg <johannes.berg@intel.com>
commit 6b41f832a26e41d82b751afc4bfc3ce8034d68d0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/6b41f832.failed

Update ieee80211_ht_cap_ie_to_sta_ht_cap() to handle per-link
data.

	Signed-off-by: Johannes Berg <johannes.berg@intel.com>
(cherry picked from commit 6b41f832a26e41d82b751afc4bfc3ce8034d68d0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/mac80211/ht.c
diff --cc net/mac80211/ht.c
index 2eb7641f5556,22677df83ed8..000000000000
--- a/net/mac80211/ht.c
+++ b/net/mac80211/ht.c
@@@ -243,11 -243,12 +243,18 @@@ bool ieee80211_ht_cap_ie_to_sta_ht_cap(
  		sta->sta.max_amsdu_len = IEEE80211_MAX_MPDU_LEN_HT_3839;
  
   apply:
++<<<<<<< HEAD
 +	changed = memcmp(&sta->sta.ht_cap, &ht_cap, sizeof(ht_cap));
 +
 +	memcpy(&sta->sta.ht_cap, &ht_cap, sizeof(ht_cap));
++=======
+ 	changed = memcmp(&sta->sta.link[link_id]->ht_cap,
+ 			 &ht_cap, sizeof(ht_cap));
  
- 	switch (sdata->vif.bss_conf.chandef.width) {
+ 	memcpy(&sta->sta.link[link_id]->ht_cap, &ht_cap, sizeof(ht_cap));
++>>>>>>> 6b41f832a26e (wifi: mac80211: HT: make ieee80211_ht_cap_ie_to_sta_ht_cap() MLO-aware)
+ 
+ 	switch (sdata->vif.link_conf[link_id]->chandef.width) {
  	default:
  		WARN_ON_ONCE(1);
  		fallthrough;
@@@ -264,9 -265,9 +271,15 @@@
  		break;
  	}
  
++<<<<<<< HEAD
 +	sta->sta.bandwidth = bw;
 +
 +	sta->cur_max_bandwidth =
++=======
+ 	sta->sta.link[link_id]->bandwidth = bw;
+ 
+ 	sta->link[link_id]->cur_max_bandwidth =
++>>>>>>> 6b41f832a26e (wifi: mac80211: HT: make ieee80211_ht_cap_ie_to_sta_ht_cap() MLO-aware)
  		ht_cap.cap & IEEE80211_HT_CAP_SUP_WIDTH_20_40 ?
  				IEEE80211_STA_RX_BW_40 : IEEE80211_STA_RX_BW_20;
  
diff --git a/net/mac80211/cfg.c b/net/mac80211/cfg.c
index f7b5957d466a..8b77542ca8bb 100644
--- a/net/mac80211/cfg.c
+++ b/net/mac80211/cfg.c
@@ -1738,7 +1738,7 @@ static int sta_apply_parameters(struct ieee80211_local *local,
 
 	if (params->ht_capa)
 		ieee80211_ht_cap_ie_to_sta_ht_cap(sdata, sband,
-						  params->ht_capa, sta);
+						  params->ht_capa, sta, 0);
 
 	/* VHT can override some HT caps such as the A-MSDU max length */
 	if (params->vht_capa)
* Unmerged path net/mac80211/ht.c
diff --git a/net/mac80211/ibss.c b/net/mac80211/ibss.c
index cfd5e16e19ac..08efe196422e 100644
--- a/net/mac80211/ibss.c
+++ b/net/mac80211/ibss.c
@@ -1051,7 +1051,7 @@ static void ieee80211_update_sta_info(struct ieee80211_sub_if_data *sdata,
 		memcpy(&htcap_ie, elems->ht_cap_elem, sizeof(htcap_ie));
 		rates_updated |= ieee80211_ht_cap_ie_to_sta_ht_cap(sdata, sband,
 								   &htcap_ie,
-								   sta);
+								   sta, 0);
 
 		if (elems->vht_operation && elems->vht_cap_elem &&
 		    sdata->u.ibss.chandef.width != NL80211_CHAN_WIDTH_20 &&
diff --git a/net/mac80211/ieee80211_i.h b/net/mac80211/ieee80211_i.h
index aebf2fa517be..6be0735ad374 100644
--- a/net/mac80211/ieee80211_i.h
+++ b/net/mac80211/ieee80211_i.h
@@ -2038,7 +2038,7 @@ void ieee80211_apply_htcap_overrides(struct ieee80211_sub_if_data *sdata,
 bool ieee80211_ht_cap_ie_to_sta_ht_cap(struct ieee80211_sub_if_data *sdata,
 				       struct ieee80211_supported_band *sband,
 				       const struct ieee80211_ht_cap *ht_cap_ie,
-				       struct sta_info *sta);
+				       struct sta_info *sta, unsigned int link_id);
 void ieee80211_send_delba(struct ieee80211_sub_if_data *sdata,
 			  const u8 *da, u16 tid,
 			  u16 initiator, u16 reason_code);
diff --git a/net/mac80211/mesh_plink.c b/net/mac80211/mesh_plink.c
index a829470dd59e..2484511211c3 100644
--- a/net/mac80211/mesh_plink.c
+++ b/net/mac80211/mesh_plink.c
@@ -438,7 +438,7 @@ static void mesh_sta_info_init(struct ieee80211_sub_if_data *sdata,
 	sta->sta.supp_rates[sband->band] = rates;
 
 	if (ieee80211_ht_cap_ie_to_sta_ht_cap(sdata, sband,
-					      elems->ht_cap_elem, sta))
+					      elems->ht_cap_elem, sta, 0))
 		changed |= IEEE80211_RC_BW_CHANGED;
 
 	ieee80211_vht_cap_ie_to_sta_vht_cap(sdata, sband,
diff --git a/net/mac80211/mlme.c b/net/mac80211/mlme.c
index dbd8b816487b..26aa7b390b45 100644
--- a/net/mac80211/mlme.c
+++ b/net/mac80211/mlme.c
@@ -3566,7 +3566,7 @@ static bool ieee80211_assoc_success(struct ieee80211_sub_if_data *sdata,
 	/* Set up internal HT/VHT capabilities */
 	if (elems->ht_cap_elem && !(ifmgd->flags & IEEE80211_STA_DISABLE_HT))
 		ieee80211_ht_cap_ie_to_sta_ht_cap(sdata, sband,
-						  elems->ht_cap_elem, sta);
+						  elems->ht_cap_elem, sta, 0);
 
 	if (elems->vht_cap_elem && !(ifmgd->flags & IEEE80211_STA_DISABLE_VHT))
 		ieee80211_vht_cap_ie_to_sta_vht_cap(sdata, sband,
