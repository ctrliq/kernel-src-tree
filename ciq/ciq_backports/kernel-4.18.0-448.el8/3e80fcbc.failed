ath11k: mhi: add error handling for suspend and resume

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Kalle Valo <quic_kvalo@quicinc.com>
commit 3e80fcbca37221cd1e5a33eea4b0f215f66a7a00
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/3e80fcbc.failed

While reviewing the mhi.c I noticed we were just ignoring the errors coming
from MHI subsystem during suspend and resume. Add proper checks and warning
messages. Also pass the error value to callers.

Tested-on: WCN6855 hw2.0 PCI WLAN.HSP.1.1-03003-QCAHSPSWPL_V1_V2_SILICONZ_LITE-2

	Signed-off-by: Kalle Valo <quic_kvalo@quicinc.com>
Link: https://lore.kernel.org/r/20220401173042.17467-3-kvalo@kernel.org
(cherry picked from commit 3e80fcbca37221cd1e5a33eea4b0f215f66a7a00)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/wireless/ath/ath11k/mhi.c
diff --cc drivers/net/wireless/ath/ath11k/mhi.c
index 61d83be4841f,defdf641df0b..000000000000
--- a/drivers/net/wireless/ath/ath11k/mhi.c
+++ b/drivers/net/wireless/ath/ath11k/mhi.c
@@@ -661,16 -485,38 +661,46 @@@ out
  
  void ath11k_mhi_stop(struct ath11k_pci *ab_pci)
  {
 -	mhi_power_down(ab_pci->mhi_ctrl, true);
 -	mhi_unprepare_after_power_down(ab_pci->mhi_ctrl);
 +	ath11k_mhi_set_state(ab_pci, ATH11K_MHI_POWER_OFF);
 +	ath11k_mhi_set_state(ab_pci, ATH11K_MHI_DEINIT);
  }
  
- void ath11k_mhi_suspend(struct ath11k_pci *ab_pci)
+ int ath11k_mhi_suspend(struct ath11k_pci *ab_pci)
  {
++<<<<<<< HEAD
 +	ath11k_mhi_set_state(ab_pci, ATH11K_MHI_SUSPEND);
++=======
+ 	struct ath11k_base *ab = ab_pci->ab;
+ 	int ret;
+ 
+ 	ret = mhi_pm_suspend(ab_pci->mhi_ctrl);
+ 	if (ret) {
+ 		ath11k_warn(ab, "failed to suspend mhi: %d", ret);
+ 		return ret;
+ 	}
+ 
+ 	return 0;
++>>>>>>> 3e80fcbca372 (ath11k: mhi: add error handling for suspend and resume)
  }
  
- void ath11k_mhi_resume(struct ath11k_pci *ab_pci)
+ int ath11k_mhi_resume(struct ath11k_pci *ab_pci)
  {
++<<<<<<< HEAD
 +	ath11k_mhi_set_state(ab_pci, ATH11K_MHI_RESUME);
++=======
+ 	struct ath11k_base *ab = ab_pci->ab;
+ 	int ret;
+ 
+ 	/* Do force MHI resume as some devices like QCA6390, WCN6855
+ 	 * are not in M3 state but they are functional. So just ignore
+ 	 * the MHI state while resuming.
+ 	 */
+ 	ret = mhi_pm_resume_force(ab_pci->mhi_ctrl);
+ 	if (ret) {
+ 		ath11k_warn(ab, "failed to resume mhi: %d", ret);
+ 		return ret;
+ 	}
+ 
+ 	return 0;
++>>>>>>> 3e80fcbca372 (ath11k: mhi: add error handling for suspend and resume)
  }
* Unmerged path drivers/net/wireless/ath/ath11k/mhi.c
diff --git a/drivers/net/wireless/ath/ath11k/mhi.h b/drivers/net/wireless/ath/ath11k/mhi.h
index 488dada5d31c..fe55514939dc 100644
--- a/drivers/net/wireless/ath/ath11k/mhi.h
+++ b/drivers/net/wireless/ath/ath11k/mhi.h
@@ -36,7 +36,7 @@ void ath11k_mhi_unregister(struct ath11k_pci *ar_pci);
 void ath11k_mhi_set_mhictrl_reset(struct ath11k_base *ab);
 void ath11k_mhi_clear_vector(struct ath11k_base *ab);
 
-void ath11k_mhi_suspend(struct ath11k_pci *ar_pci);
-void ath11k_mhi_resume(struct ath11k_pci *ar_pci);
+int ath11k_mhi_suspend(struct ath11k_pci *ar_pci);
+int ath11k_mhi_resume(struct ath11k_pci *ar_pci);
 
 #endif
diff --git a/drivers/net/wireless/ath/ath11k/pci.c b/drivers/net/wireless/ath/ath11k/pci.c
index ae4b3aa98fc3..d484e70363d5 100644
--- a/drivers/net/wireless/ath/ath11k/pci.c
+++ b/drivers/net/wireless/ath/ath11k/pci.c
@@ -1195,18 +1195,14 @@ static int ath11k_pci_hif_suspend(struct ath11k_base *ab)
 {
 	struct ath11k_pci *ar_pci = ath11k_pci_priv(ab);
 
-	ath11k_mhi_suspend(ar_pci);
-
-	return 0;
+	return ath11k_mhi_suspend(ar_pci);
 }
 
 static int ath11k_pci_hif_resume(struct ath11k_base *ab)
 {
 	struct ath11k_pci *ar_pci = ath11k_pci_priv(ab);
 
-	ath11k_mhi_resume(ar_pci);
-
-	return 0;
+	return ath11k_mhi_resume(ar_pci);
 }
 
 static void ath11k_pci_kill_tasklets(struct ath11k_base *ab)
