net/mlx5: Refcount mlx5_irq with integer

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Shay Drory <shayd@nvidia.com>
commit 2d0b41a3767941b53160c940cdaf596a99f50fb6
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/2d0b41a3.failed

Currently, all access to mlx5 IRQs are done undere a lock. Hance, there
isn't a reason to have kref in struct mlx5_irq.
Switch it to integer.

	Signed-off-by: Shay Drory <shayd@nvidia.com>
	Reviewed-by: Parav Pandit <parav@nvidia.com>
	Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
(cherry picked from commit 2d0b41a3767941b53160c940cdaf596a99f50fb6)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/pci_irq.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/pci_irq.c
index 8beec040712e,60bfcad1873c..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/pci_irq.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/pci_irq.c
@@@ -214,8 -234,7 +234,12 @@@ static struct mlx5_irq *irq_request(str
  		err = -ENOMEM;
  		goto err_cpumask;
  	}
++<<<<<<< HEAD
 +	irq->pool = pool;
 +	kref_init(&irq->kref);
++=======
+ 	irq->refcount = 1;
++>>>>>>> 2d0b41a37679 (net/mlx5: Refcount mlx5_irq with integer)
  	irq->index = i;
  	err = xa_err(xa_store(&pool->irqs, irq->index, irq, GFP_KERNEL));
  	if (err) {
@@@ -459,10 -475,13 +482,14 @@@ static void irq_pool_free(struct mlx5_i
  	struct mlx5_irq *irq;
  	unsigned long index;
  
+ 	/* There are cases in which we are destrying the irq_table before
+ 	 * freeing all the IRQs, fast teardown for example. Hence, free the irqs
+ 	 * which might not have been freed.
+ 	 */
  	xa_for_each(&pool->irqs, index, irq)
- 		irq_release(&irq->kref);
+ 		irq_release(irq);
  	xa_destroy(&pool->irqs);
 +	mutex_destroy(&pool->lock);
  	kvfree(pool);
  }
  
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/pci_irq.c
