ASoC: SOF: Intel: add trigger callback into sdw_callback

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Bard Liao <yung-chuan.liao@linux.intel.com>
commit 2a1be12c4d77d4f7b122568383382e006a60381b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/2a1be12c.failed

For IPC4, we need to set pipeline state in BE DAI trigger.

	Signed-off-by: Bard Liao <yung-chuan.liao@linux.intel.com>
	Reviewed-by: Rander Wang <rander.wang@intel.com>
	Reviewed-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
	Reviewed-by: Ranjani Sridharan <ranjani.sridharan@linux.intel.com>
Link: https://lore.kernel.org/r/20220708061312.25878-3-yung-chuan.liao@linux.intel.com
	Signed-off-by: Mark Brown <broonie@kernel.org>
(cherry picked from commit 2a1be12c4d77d4f7b122568383382e006a60381b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	sound/soc/sof/intel/hda-dai.c
#	sound/soc/sof/intel/hda.h
diff --cc sound/soc/sof/intel/hda-dai.c
index 4276d8a58f6f,556e883a32ed..000000000000
--- a/sound/soc/sof/intel/hda-dai.c
+++ b/sound/soc/sof/intel/hda-dai.c
@@@ -643,6 -708,128 +643,131 @@@ static const struct snd_soc_dai_ops ssp
  	.shutdown = ssp_dai_shutdown,
  };
  
++<<<<<<< HEAD
++=======
+ static int ipc4_be_dai_common_trigger(struct snd_soc_dai *dai, int cmd, int stream)
+ {
+ 	struct snd_sof_widget *pipe_widget;
+ 	struct sof_ipc4_pipeline *pipeline;
+ 	struct snd_sof_widget *swidget;
+ 	struct snd_soc_dapm_widget *w;
+ 	struct snd_sof_dev *sdev;
+ 	int ret;
+ 
+ 	w = snd_soc_dai_get_widget(dai, stream);
+ 	swidget = w->dobj.private;
+ 	pipe_widget = swidget->pipe_widget;
+ 	pipeline = pipe_widget->private;
+ 	sdev = snd_soc_component_get_drvdata(swidget->scomp);
+ 
+ 	switch (cmd) {
+ 	case SNDRV_PCM_TRIGGER_SUSPEND:
+ 	case SNDRV_PCM_TRIGGER_STOP:
+ 		ret = sof_ipc4_set_pipeline_state(sdev, swidget->pipeline_id,
+ 						  SOF_IPC4_PIPE_PAUSED);
+ 		if (ret < 0)
+ 			return ret;
+ 		pipeline->state = SOF_IPC4_PIPE_PAUSED;
+ 
+ 		ret = sof_ipc4_set_pipeline_state(sdev, swidget->pipeline_id,
+ 						  SOF_IPC4_PIPE_RESET);
+ 		if (ret < 0)
+ 			return ret;
+ 		pipeline->state = SOF_IPC4_PIPE_RESET;
+ 		break;
+ 	case SNDRV_PCM_TRIGGER_PAUSE_PUSH:
+ 		ret = sof_ipc4_set_pipeline_state(sdev, swidget->pipeline_id,
+ 						  SOF_IPC4_PIPE_PAUSED);
+ 		if (ret < 0)
+ 			return ret;
+ 		pipeline->state = SOF_IPC4_PIPE_PAUSED;
+ 		break;
+ 	default:
+ 		break;
+ 	}
+ 
+ 	return 0;
+ }
+ 
+ static int ipc4_be_dai_trigger(struct snd_pcm_substream *substream,
+ 			       int cmd, struct snd_soc_dai *dai)
+ {
+ 	return ipc4_be_dai_common_trigger(dai, cmd, substream->stream);
+ }
+ 
+ static const struct snd_soc_dai_ops ipc4_dmic_dai_ops = {
+ 	.trigger = ipc4_be_dai_trigger,
+ };
+ 
+ static const struct snd_soc_dai_ops ipc4_ssp_dai_ops = {
+ 	.trigger = ipc4_be_dai_trigger,
+ };
+ 
+ void hda_set_dai_drv_ops(struct snd_sof_dev *sdev, struct snd_sof_dsp_ops *ops)
+ {
+ 	int i;
+ 
+ 	switch (sdev->pdata->ipc_type) {
+ 	case SOF_IPC:
+ 		for (i = 0; i < ops->num_drv; i++) {
+ 			if (strstr(ops->drv[i].name, "SSP")) {
+ 				ops->drv[i].ops = &ipc3_ssp_dai_ops;
+ 				continue;
+ 			}
+ #if IS_ENABLED(CONFIG_SND_SOC_SOF_HDA)
+ 			if (strstr(ops->drv[i].name, "iDisp") ||
+ 			    strstr(ops->drv[i].name, "Analog") ||
+ 			    strstr(ops->drv[i].name, "Digital"))
+ 				ops->drv[i].ops = &ipc3_hda_dai_ops;
+ #endif
+ 		}
+ 		break;
+ 	case SOF_INTEL_IPC4:
+ 	{
+ 		struct sof_ipc4_fw_data *ipc4_data = sdev->private;
+ 
+ 		for (i = 0; i < ops->num_drv; i++) {
+ 			if (strstr(ops->drv[i].name, "DMIC")) {
+ 				ops->drv[i].ops = &ipc4_dmic_dai_ops;
+ 				continue;
+ 			}
+ 			if (strstr(ops->drv[i].name, "SSP")) {
+ 				ops->drv[i].ops = &ipc4_ssp_dai_ops;
+ 				continue;
+ 			}
+ #if IS_ENABLED(CONFIG_SND_SOC_SOF_HDA)
+ 			if (strstr(ops->drv[i].name, "iDisp") ||
+ 			    strstr(ops->drv[i].name, "Analog") ||
+ 			    strstr(ops->drv[i].name, "Digital"))
+ 				ops->drv[i].ops = &ipc4_hda_dai_ops;
+ #endif
+ 		}
+ 
+ 		if (!hda_use_tplg_nhlt)
+ 			ipc4_data->nhlt = intel_nhlt_init(sdev->dev);
+ 
+ 		if (IS_ENABLED(CONFIG_SND_SOC_SOF_INTEL_SOUNDWIRE))
+ 			sdw_callback.trigger = ipc4_be_dai_common_trigger;
+ 
+ 		break;
+ 	}
+ 	default:
+ 		break;
+ 	}
+ }
+ 
+ void hda_ops_free(struct snd_sof_dev *sdev)
+ {
+ 	if (sdev->pdata->ipc_type == SOF_INTEL_IPC4) {
+ 		struct sof_ipc4_fw_data *ipc4_data = sdev->private;
+ 
+ 		if (!hda_use_tplg_nhlt)
+ 			intel_nhlt_free(ipc4_data->nhlt);
+ 	}
+ }
+ EXPORT_SYMBOL_NS(hda_ops_free, SND_SOC_SOF_INTEL_HDA_COMMON);
+ 
++>>>>>>> 2a1be12c4d77 (ASoC: SOF: Intel: add trigger callback into sdw_callback)
  /*
   * common dai driver for skl+ platforms.
   * some products who use this DAI array only physically have a subset of
diff --cc sound/soc/sof/intel/hda.h
index 35e370ef6d71,5ef3e8775e36..000000000000
--- a/sound/soc/sof/intel/hda.h
+++ b/sound/soc/sof/intel/hda.h
@@@ -832,4 -834,14 +832,17 @@@ int hda_ctrl_dai_widget_free(struct snd
  
  extern int sof_hda_position_quirk;
  
++<<<<<<< HEAD
++=======
+ void hda_set_dai_drv_ops(struct snd_sof_dev *sdev, struct snd_sof_dsp_ops *ops);
+ void hda_ops_free(struct snd_sof_dev *sdev);
+ 
+ /* IPC4 */
+ irqreturn_t cnl_ipc4_irq_thread(int irq, void *context);
+ int cnl_ipc4_send_msg(struct snd_sof_dev *sdev, struct snd_sof_ipc_msg *msg);
+ irqreturn_t hda_dsp_ipc4_irq_thread(int irq, void *context);
+ int hda_dsp_ipc4_send_msg(struct snd_sof_dev *sdev, struct snd_sof_ipc_msg *msg);
+ extern struct sdw_intel_ops sdw_callback;
+ 
++>>>>>>> 2a1be12c4d77 (ASoC: SOF: Intel: add trigger callback into sdw_callback)
  #endif
* Unmerged path sound/soc/sof/intel/hda-dai.c
diff --git a/sound/soc/sof/intel/hda.c b/sound/soc/sof/intel/hda.c
index 6fb3f7ffba51..04e1beaf01d0 100644
--- a/sound/soc/sof/intel/hda.c
+++ b/sound/soc/sof/intel/hda.c
@@ -225,7 +225,7 @@ static int sdw_free_stream(struct device *dev,
 	return sdw_dai_config_ipc(sdev, w, free_data->link_id, 0xFFFF, d->id, false);
 }
 
-static const struct sdw_intel_ops sdw_callback = {
+struct sdw_intel_ops sdw_callback = {
 	.params_stream = sdw_params_stream,
 	.free_stream = sdw_free_stream,
 };
* Unmerged path sound/soc/sof/intel/hda.h
