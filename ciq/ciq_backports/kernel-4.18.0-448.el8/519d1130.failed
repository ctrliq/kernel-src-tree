ASoC: SOF: Intel: hda-dai: enhance debug messages

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
commit 519d1130b66e000ce363ad82c0d61ae36a5392dc
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/519d1130.failed

The same message was added twice for dai and link_dma, remove the
latter one and add dai name and direction to better understand
problematic sequences.

	Signed-off-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
	Reviewed-by: Ranjani Sridharan <ranjani.sridharan@linux.intel.com>
	Reviewed-by: PÃ©ter Ujfalusi <peter.ujfalusi@linux.intel.com>
Link: https://lore.kernel.org/r/20220610214504.42974-1-pierre-louis.bossart@linux.intel.com
	Signed-off-by: Mark Brown <broonie@kernel.org>
(cherry picked from commit 519d1130b66e000ce363ad82c0d61ae36a5392dc)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	sound/soc/sof/intel/hda-dai.c
diff --cc sound/soc/sof/intel/hda-dai.c
index 4276d8a58f6f,70721defca46..000000000000
--- a/sound/soc/sof/intel/hda-dai.c
+++ b/sound/soc/sof/intel/hda-dai.c
@@@ -282,8 -253,100 +282,105 @@@ static int hda_link_hw_params(struct sn
  	return hda_link_dma_params(hext_stream, &p_params);
  }
  
++<<<<<<< HEAD
 +static int hda_link_pcm_prepare(struct snd_pcm_substream *substream,
 +				struct snd_soc_dai *dai)
++=======
+ static int hda_link_dma_prepare(struct snd_pcm_substream *substream)
+ {
+ 	struct snd_soc_pcm_runtime *rtd = asoc_substream_to_rtd(substream);
+ 	int stream = substream->stream;
+ 
+ 	return hda_link_dma_hw_params(substream, &rtd->dpcm[stream].hw_params);
+ }
+ 
+ static int hda_link_dma_trigger(struct snd_pcm_substream *substream, int cmd)
+ {
+ 	struct hdac_stream *hstream = substream->runtime->private_data;
+ 	struct snd_soc_pcm_runtime *rtd = asoc_substream_to_rtd(substream);
+ 	struct snd_soc_dai *cpu_dai = asoc_rtd_to_cpu(rtd, 0);
+ 	struct snd_soc_dai *codec_dai = asoc_rtd_to_codec(rtd, 0);
+ 	struct hdac_ext_stream *hext_stream = snd_soc_dai_get_dma_data(cpu_dai, substream);
+ 	int ret;
+ 
+ 	if (!hext_stream)
+ 		return 0;
+ 
+ 	switch (cmd) {
+ 	case SNDRV_PCM_TRIGGER_START:
+ 	case SNDRV_PCM_TRIGGER_PAUSE_RELEASE:
+ 		snd_hdac_ext_link_stream_start(hext_stream);
+ 		break;
+ 	case SNDRV_PCM_TRIGGER_SUSPEND:
+ 	case SNDRV_PCM_TRIGGER_STOP:
+ 		ret = hda_link_dma_cleanup(substream, hstream, cpu_dai, codec_dai, true);
+ 		if (ret < 0)
+ 			return ret;
+ 
+ 		break;
+ 	case SNDRV_PCM_TRIGGER_PAUSE_PUSH:
+ 		snd_hdac_ext_link_stream_clear(hext_stream);
+ 
+ 		break;
+ 	default:
+ 		return -EINVAL;
+ 	}
+ 	return 0;
+ }
+ 
+ static int hda_link_dma_hw_free(struct snd_pcm_substream *substream)
+ {
+ 	struct hdac_stream *hstream = substream->runtime->private_data;
+ 	struct snd_soc_pcm_runtime *rtd = asoc_substream_to_rtd(substream);
+ 	struct snd_soc_dai *cpu_dai = asoc_rtd_to_cpu(rtd, 0);
+ 	struct snd_soc_dai *codec_dai = asoc_rtd_to_codec(rtd, 0);
+ 	struct hdac_ext_stream *hext_stream;
+ 
+ 	hext_stream = snd_soc_dai_get_dma_data(cpu_dai, substream);
+ 	if (!hext_stream)
+ 		return 0;
+ 
+ 	return hda_link_dma_cleanup(substream, hstream, cpu_dai, codec_dai, false);
+ }
+ 
+ static int hda_dai_widget_update(struct snd_soc_dapm_widget *w,
+ 				 int channel, bool widget_setup)
+ {
+ 	struct snd_sof_dai_config_data data;
+ 
+ 	data.dai_data = channel;
+ 
+ 	/* set up/free DAI widget and send DAI_CONFIG IPC */
+ 	if (widget_setup)
+ 		return hda_ctrl_dai_widget_setup(w, SOF_DAI_CONFIG_FLAGS_2_STEP_STOP, &data);
+ 
+ 	return hda_ctrl_dai_widget_free(w, SOF_DAI_CONFIG_FLAGS_NONE, &data);
+ }
+ 
+ static int hda_dai_hw_params_update(struct snd_pcm_substream *substream,
+ 				    struct snd_pcm_hw_params *params,
+ 				    struct snd_soc_dai *dai)
+ {
+ 	struct hdac_ext_stream *hext_stream;
+ 	struct snd_soc_dapm_widget *w;
+ 	int stream_tag;
+ 
+ 	hext_stream = snd_soc_dai_get_dma_data(dai, substream);
+ 	if (!hext_stream)
+ 		return -EINVAL;
+ 
+ 	stream_tag = hdac_stream(hext_stream)->stream_tag;
+ 
+ 	w = snd_soc_dai_get_widget(dai, substream->stream);
+ 
+ 	/* set up the DAI widget and send the DAI_CONFIG with the new tag */
+ 	return hda_dai_widget_update(w, stream_tag - 1, true);
+ }
+ 
+ static int hda_dai_hw_params(struct snd_pcm_substream *substream,
+ 			     struct snd_pcm_hw_params *params,
+ 			     struct snd_soc_dai *dai)
++>>>>>>> 519d1130b66e (ASoC: SOF: Intel: hda-dai: enhance debug messages)
  {
  	struct hdac_ext_stream *hext_stream =
  				snd_soc_dai_get_dma_data(dai, substream);
@@@ -343,28 -385,99 +440,106 @@@ static int hda_link_pcm_trigger(struct 
  {
  	struct hdac_ext_stream *hext_stream =
  				snd_soc_dai_get_dma_data(dai, substream);
++<<<<<<< HEAD
 +	struct sof_intel_hda_stream *hda_stream;
++=======
+ 	struct snd_sof_dev *sdev = snd_soc_component_get_drvdata(dai->component);
+ 	struct snd_soc_pcm_runtime *rtd = asoc_substream_to_rtd(substream);
+ 	int stream = substream->stream;
+ 	int ret;
+ 
+ 	if (hext_stream && hext_stream->link_prepared)
+ 		return 0;
+ 
+ 	dev_dbg(sdev->dev, "%s: prepare stream dir %d\n", __func__, substream->stream);
+ 
+ 	ret = hda_link_dma_prepare(substream);
+ 	if (ret < 0)
+ 		return ret;
+ 
+ 	return hda_dai_hw_params_update(substream, &rtd->dpcm[stream].hw_params, dai);
+ }
+ 
+ static int hda_dai_hw_free_ipc(int stream, /* direction */
+ 			       struct snd_soc_dai *dai)
+ {
+ 	struct snd_soc_dapm_widget *w;
+ 
+ 	w = snd_soc_dai_get_widget(dai, stream);
+ 
+ 	/* free the link DMA channel in the FW and the DAI widget */
+ 	return hda_dai_widget_update(w, DMA_CHAN_INVALID, false);
+ }
+ 
+ static int ipc3_hda_dai_trigger(struct snd_pcm_substream *substream,
+ 				int cmd, struct snd_soc_dai *dai)
+ {
+ 	struct snd_soc_dapm_widget *w;
+ 	int ret;
+ 
+ 	dev_dbg(dai->dev, "%s: cmd=%d dai %s direction %d\n", __func__, cmd,
+ 		dai->name, substream->stream);
+ 
+ 	ret = hda_link_dma_trigger(substream, cmd);
+ 	if (ret < 0)
+ 		return ret;
+ 
+ 	w = snd_soc_dai_get_widget(dai, substream->stream);
+ 
+ 	switch (cmd) {
+ 	case SNDRV_PCM_TRIGGER_SUSPEND:
+ 	case SNDRV_PCM_TRIGGER_STOP:
+ 		/*
+ 		 * free DAI widget during stop/suspend to keep widget use_count's balanced.
+ 		 */
+ 		ret = hda_dai_hw_free_ipc(substream->stream, dai);
+ 		if (ret < 0)
+ 			return ret;
+ 
+ 		break;
+ 	case SNDRV_PCM_TRIGGER_PAUSE_PUSH:
+ 		ret = hda_dai_config_pause_push_ipc(w);
+ 		if (ret < 0)
+ 			return ret;
+ 		break;
+ 
+ 	default:
+ 		break;
+ 	}
+ 	return 0;
+ }
+ 
+ /*
+  * In contrast to IPC3, the dai trigger in IPC4 mixes pipeline state changes
+  * (over IPC channel) and DMA state change (direct host register changes).
+  */
+ static int ipc4_hda_dai_trigger(struct snd_pcm_substream *substream,
+ 				int cmd, struct snd_soc_dai *dai)
+ {
+ 	struct hdac_ext_stream *hext_stream = snd_soc_dai_get_dma_data(dai, substream);
+ 	struct snd_sof_dev *sdev = snd_soc_component_get_drvdata(dai->component);
++>>>>>>> 519d1130b66e (ASoC: SOF: Intel: hda-dai: enhance debug messages)
  	struct snd_soc_pcm_runtime *rtd;
 -	struct snd_sof_widget *swidget;
  	struct snd_soc_dapm_widget *w;
 -	struct snd_soc_dai *codec_dai;
 +	struct hdac_ext_link *link;
  	struct hdac_stream *hstream;
 -	struct snd_soc_dai *cpu_dai;
 +	struct hdac_bus *bus;
 +	int stream_tag;
  	int ret;
  
 -	dev_dbg(dai->dev, "%s: cmd=%d dai %s direction %d\n", __func__, cmd,
 -		dai->name, substream->stream);
 -
  	hstream = substream->runtime->private_data;
 +	bus = hstream->bus;
  	rtd = asoc_substream_to_rtd(substream);
 -	cpu_dai = asoc_rtd_to_cpu(rtd, 0);
 -	codec_dai = asoc_rtd_to_codec(rtd, 0);
 +
 +	link = snd_hdac_ext_bus_get_link(bus, asoc_rtd_to_codec(rtd, 0)->component->name);
 +	if (!link)
 +		return -EINVAL;
 +
 +	hda_stream = hstream_to_sof_hda_stream(hext_stream);
 +
 +	dev_dbg(dai->dev, "In %s cmd=%d\n", __func__, cmd);
  
  	w = snd_soc_dai_get_widget(dai, substream->stream);
 -	swidget = w->dobj.private;
  
  	switch (cmd) {
  	case SNDRV_PCM_TRIGGER_START:
* Unmerged path sound/soc/sof/intel/hda-dai.c
