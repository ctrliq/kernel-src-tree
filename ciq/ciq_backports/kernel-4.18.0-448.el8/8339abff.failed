mmc: sdhci-acpi: Remove special handling for GPD win/pocket devices

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Hans de Goede <hdegoede@redhat.com>
commit 8339abffd30cbddafce4a896c8620d0abe482c58
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/8339abff.failed

Remove the special sdhci_acpi_no_fixup_child_power() helper which was
added to avoid triggering an ACPI tables bug on the GPD win/pocket
devices.

The ACPI child-device triggering this bug has now been added to the
acpi_device_override_status() quirk table, so that its status
field is set to all 0 (instead of the wrong return value from the _STA
ACPI method). This removes the need for the special handling in
the sdhci-acpi code.

	Signed-off-by: Hans de Goede <hdegoede@redhat.com>
	Acked-by: Adrian Hunter <adrian.hunter@intel.com>
	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
(cherry picked from commit 8339abffd30cbddafce4a896c8620d0abe482c58)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/mmc/host/sdhci-acpi.c
diff --cc drivers/mmc/host/sdhci-acpi.c
index 1e58b5925a40,1461aae13c19..000000000000
--- a/drivers/mmc/host/sdhci-acpi.c
+++ b/drivers/mmc/host/sdhci-acpi.c
@@@ -307,45 -293,6 +296,48 @@@ static bool sdhci_acpi_byt_defer(struc
  	return false;
  }
  
++<<<<<<< HEAD
 +static bool sdhci_acpi_cht_pci_wifi(unsigned int vendor, unsigned int device,
 +				    unsigned int slot, unsigned int parent_slot)
 +{
 +	struct pci_dev *dev, *parent, *from = NULL;
 +
 +	while (1) {
 +		dev = pci_get_device(vendor, device, from);
 +		pci_dev_put(from);
 +		if (!dev)
 +			break;
 +		parent = pci_upstream_bridge(dev);
 +		if (ACPI_COMPANION(&dev->dev) && PCI_SLOT(dev->devfn) == slot &&
 +		    parent && PCI_SLOT(parent->devfn) == parent_slot &&
 +		    !pci_upstream_bridge(parent)) {
 +			pci_dev_put(dev);
 +			return true;
 +		}
 +		from = dev;
 +	}
 +
 +	return false;
 +}
 +
 +/*
 + * GPDwin uses PCI wifi which conflicts with SDIO's use of
 + * acpi_device_fix_up_power() on child device nodes. Identifying GPDwin is
 + * problematic, but since SDIO is only used for wifi, the presence of the PCI
 + * wifi card in the expected slot with an ACPI companion node, is used to
 + * indicate that acpi_device_fix_up_power() should be avoided.
 + */
 +static inline bool sdhci_acpi_no_fixup_child_power(const char *hid,
 +						   const char *uid)
 +{
 +	return sdhci_acpi_cht() &&
 +	       !strcmp(hid, "80860F14") &&
 +	       !strcmp(uid, "2") &&
 +	       sdhci_acpi_cht_pci_wifi(0x14e4, 0x43ec, 0, 28);
 +}
 +
++=======
++>>>>>>> 8339abffd30c (mmc: sdhci-acpi: Remove special handling for GPD win/pocket devices)
  #else
  
  static inline void sdhci_acpi_byt_setting(struct device *dev)
@@@ -357,12 -304,6 +349,15 @@@ static inline bool sdhci_acpi_byt_defer
  	return false;
  }
  
++<<<<<<< HEAD
 +static inline bool sdhci_acpi_no_fixup_child_power(const char *hid,
 +						   const char *uid)
 +{
 +	return false;
 +}
 +
++=======
++>>>>>>> 8339abffd30c (mmc: sdhci-acpi: Remove special handling for GPD win/pocket devices)
  #endif
  
  static int bxt_get_cd(struct mmc_host *mmc)
@@@ -645,11 -808,9 +640,17 @@@ static int sdhci_acpi_probe(struct plat
  
  	/* Power on the SDHCI controller and its children */
  	acpi_device_fix_up_power(device);
++<<<<<<< HEAD
 +	if (!sdhci_acpi_no_fixup_child_power(hid, uid)) {
 +		list_for_each_entry(child, &device->children, node)
 +			if (child->status.present && child->status.enabled)
 +				acpi_device_fix_up_power(child);
 +	}
++=======
+ 	list_for_each_entry(child, &device->children, node)
+ 		if (child->status.present && child->status.enabled)
+ 			acpi_device_fix_up_power(child);
++>>>>>>> 8339abffd30c (mmc: sdhci-acpi: Remove special handling for GPD win/pocket devices)
  
  	if (sdhci_acpi_byt_defer(dev))
  		return -EPROBE_DEFER;
* Unmerged path drivers/mmc/host/sdhci-acpi.c
