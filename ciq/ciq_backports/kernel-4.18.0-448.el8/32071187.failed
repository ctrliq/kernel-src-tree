net/mlx5: Add debugfs counters for page commands failures

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Moshe Shemesh <moshe@nvidia.com>
commit 32071187e9fb18da62f5be569bd2ea0d7a981ee8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/32071187.failed

Add the following new debugfs counters for debug and verbosity:
fw_pages_alloc_failed - number of pages FW requested but driver failed
to allocate.
give_pages_dropped - number of pages given to FW, but command give pages
failed by FW.
reclaim_pages_discard - number of pages which were about to reclaim back
and FW failed the command.

	Signed-off-by: Moshe Shemesh <moshe@nvidia.com>
	Reviewed-by: Leon Romanovsky <leonro@nvidia.com>
	Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
(cherry picked from commit 32071187e9fb18da62f5be569bd2ea0d7a981ee8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/debugfs.c
#	include/linux/mlx5/driver.h
diff --cc drivers/net/ethernet/mellanox/mlx5/core/debugfs.c
index 18b04e977bb8,d69bac93a83b..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/debugfs.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/debugfs.c
@@@ -203,7 -209,28 +203,32 @@@ void mlx5_cq_debugfs_init(struct mlx5_c
  
  void mlx5_cq_debugfs_cleanup(struct mlx5_core_dev *dev)
  {
++<<<<<<< HEAD
 +	debugfs_remove_recursive(dev->priv.cq_debugfs);
++=======
+ 	debugfs_remove_recursive(dev->priv.dbg.cq_debugfs);
+ }
+ 
+ void mlx5_pages_debugfs_init(struct mlx5_core_dev *dev)
+ {
+ 	struct dentry *pages;
+ 
+ 	dev->priv.dbg.pages_debugfs = debugfs_create_dir("pages", dev->priv.dbg.dbg_root);
+ 	pages = dev->priv.dbg.pages_debugfs;
+ 
+ 	debugfs_create_u32("fw_pages_total", 0400, pages, &dev->priv.fw_pages);
+ 	debugfs_create_u32("fw_pages_vfs", 0400, pages, &dev->priv.vfs_pages);
+ 	debugfs_create_u32("fw_pages_host_pf", 0400, pages, &dev->priv.host_pf_pages);
+ 	debugfs_create_u32("fw_pages_alloc_failed", 0400, pages, &dev->priv.fw_pages_alloc_failed);
+ 	debugfs_create_u32("fw_pages_give_dropped", 0400, pages, &dev->priv.give_pages_dropped);
+ 	debugfs_create_u32("fw_pages_reclaim_discard", 0400, pages,
+ 			   &dev->priv.reclaim_pages_discard);
+ }
+ 
+ void mlx5_pages_debugfs_cleanup(struct mlx5_core_dev *dev)
+ {
+ 	debugfs_remove_recursive(dev->priv.dbg.pages_debugfs);
++>>>>>>> 32071187e9fb (net/mlx5: Add debugfs counters for page commands failures)
  }
  
  static u64 qp_read_field(struct mlx5_core_dev *dev, struct mlx5_core_qp *qp,
diff --cc include/linux/mlx5/driver.h
index 7534ff2d1f7f,00a914b0716e..000000000000
--- a/include/linux/mlx5/driver.h
+++ b/include/linux/mlx5/driver.h
@@@ -577,11 -570,14 +577,19 @@@ struct mlx5_priv 
  	struct mlx5_nb          pg_nb;
  	struct workqueue_struct *pg_wq;
  	struct xarray           page_root_xa;
 -	u32			fw_pages;
 +	int			fw_pages;
  	atomic_t		reg_pages;
  	struct list_head	free_list;
++<<<<<<< HEAD
 +	int			vfs_pages;
 +	int			host_pf_pages;
++=======
+ 	u32			vfs_pages;
+ 	u32			host_pf_pages;
+ 	u32			fw_pages_alloc_failed;
+ 	u32			give_pages_dropped;
+ 	u32			reclaim_pages_discard;
++>>>>>>> 32071187e9fb (net/mlx5: Add debugfs counters for page commands failures)
  
  	struct mlx5_core_health health;
  	struct list_head	traps;
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/debugfs.c
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/pagealloc.c b/drivers/net/ethernet/mellanox/mlx5/core/pagealloc.c
index c82d59d4ca22..8fc9a55dc536 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/pagealloc.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/pagealloc.c
@@ -356,8 +356,10 @@ static int give_pages(struct mlx5_core_dev *dev, u16 func_id, int npages,
 		if (err) {
 			if (err == -ENOMEM)
 				err = alloc_system_page(dev, function);
-			if (err)
+			if (err) {
+				dev->priv.fw_pages_alloc_failed += (npages - i);
 				goto out_4k;
+			}
 
 			goto retry;
 		}
@@ -376,14 +378,14 @@ static int give_pages(struct mlx5_core_dev *dev, u16 func_id, int npages,
 		/* if triggered by FW and failed by FW ignore */
 		if (event) {
 			err = 0;
-			goto out_4k;
+			goto out_dropped;
 		}
 	}
 	if (err) {
 		err = mlx5_cmd_check(dev, err, in, out);
 		mlx5_core_warn(dev, "func_id 0x%x, npages %d, err %d\n",
 			       func_id, npages, err);
-		goto out_4k;
+		goto out_dropped;
 	}
 
 	dev->priv.fw_pages += npages;
@@ -398,6 +400,8 @@ static int give_pages(struct mlx5_core_dev *dev, u16 func_id, int npages,
 	kvfree(in);
 	return 0;
 
+out_dropped:
+	dev->priv.give_pages_dropped += npages;
 out_4k:
 	for (i--; i >= 0; i--)
 		free_4k(dev, MLX5_GET64(manage_pages_in, in, pas[i]), function);
@@ -520,6 +524,10 @@ static int reclaim_pages(struct mlx5_core_dev *dev, u16 func_id, int npages,
 	mlx5_core_dbg(dev, "func 0x%x, npages %d, outlen %d\n",
 		      func_id, npages, outlen);
 	err = reclaim_pages_cmd(dev, in, sizeof(in), out, outlen);
+	if (err) {
+		npages = MLX5_GET(manage_pages_in, in, input_num_entries);
+		dev->priv.reclaim_pages_discard += npages;
+	}
 	/* if triggered by FW event and failed by FW then ignore */
 	if (event && err == -EREMOTEIO)
 		err = 0;
* Unmerged path include/linux/mlx5/driver.h
