Bluetooth: btintel: Fix the legacy bootloader returns tlv based version

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Tedd Ho-Jeong An <tedd.an@intel.com>
commit c86c7285bb087b709e31f46e1aedeebb7e2a40d7
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/c86c7285.failed

From the ThP, it supports both legacy and TLV based HCI_Intel_Read_Version
command after downloading the operational firmware, and it causes the
driver to choose the wrong setup routines and missing firmware/ddc file.

So, as a workaround, this patch checks the fw variant from the TLV based
version, and if the device is legacy bootloader device, the legacy
HCI_Intel_Read_Version command is used to get the legacy version
information and run the legacy bootloader setup with it.

	Signed-off-by: Tedd Ho-Jeong An <tedd.an@intel.com>
	Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
(cherry picked from commit c86c7285bb087b709e31f46e1aedeebb7e2a40d7)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/bluetooth/btintel.c
diff --cc drivers/bluetooth/btintel.c
index 949020fa0142,2941d33d0bc2..000000000000
--- a/drivers/bluetooth/btintel.c
+++ b/drivers/bluetooth/btintel.c
@@@ -1765,11 -2304,58 +1765,48 @@@ static int btintel_setup_combined(struc
  		goto exit_error;
  	}
  
++<<<<<<< HEAD
 +	/* Display version information of TLV type */
 +	btintel_version_info_tlv(hdev, &ver_tlv);
++=======
+ 	/* Check for supported iBT hardware variants of this firmware
+ 	 * loading method.
+ 	 *
+ 	 * This check has been put in place to ensure correct forward
+ 	 * compatibility options when newer hardware variants come
+ 	 * along.
+ 	 */
+ 	switch (INTEL_HW_VARIANT(ver_tlv.cnvi_bt)) {
+ 	case 0x11:      /* JfP */
+ 	case 0x12:      /* ThP */
+ 	case 0x13:      /* HrP */
+ 	case 0x14:      /* CcP */
+ 		/* Some legacy bootloader devices from JfP supports both old
+ 		 * and TLV based HCI_Intel_Read_Version command. But we don't
+ 		 * want to use the TLV based setup routines for those legacy
+ 		 * bootloader device.
+ 		 *
+ 		 * Also, it is not easy to convert TLV based version from the
+ 		 * legacy version format.
+ 		 *
+ 		 * So, as a workaround for those devices, use the legacy
+ 		 * HCI_Intel_Read_Version to get the version information and
+ 		 * run the legacy bootloader setup.
+ 		 */
+ 		err = btintel_read_version(hdev, &ver);
+ 		if (err)
+ 			return err;
+ 		err = btintel_bootloader_setup(hdev, &ver);
+ 		break;
+ 	case 0x17:
+ 	case 0x18:
+ 	case 0x19:
+ 		/* Display version information of TLV type */
+ 		btintel_version_info_tlv(hdev, &ver_tlv);
++>>>>>>> c86c7285bb08 (Bluetooth: btintel: Fix the legacy bootloader returns tlv based version)
  
 -		/* Apply the device specific HCI quirks for TLV based devices
 -		 *
 -		 * All TLV based devices support WBS
 -		 */
 -		set_bit(HCI_QUIRK_WIDEBAND_SPEECH_SUPPORTED, &hdev->quirks);
 -
 -		/* Valid LE States quirk for GfP */
 -		if (INTEL_HW_VARIANT(ver_tlv.cnvi_bt) == 0x18)
 -			set_bit(HCI_QUIRK_VALID_LE_STATES, &hdev->quirks);
 -
 -		err = btintel_bootloader_setup_tlv(hdev, &ver_tlv);
 -		break;
 -	default:
 -		bt_dev_err(hdev, "Unsupported Intel hw variant (%u)",
 -			   INTEL_HW_VARIANT(ver_tlv.cnvi_bt));
 -		return -EINVAL;
 -	}
 +	/* TODO: Need to filter the device for new generation */
 +	/* TODO: call setup routine for tlv based bootloader product */
  
  exit_error:
  	kfree_skb(skb);
* Unmerged path drivers/bluetooth/btintel.c
