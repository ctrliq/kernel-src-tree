ASoC: SOF: pcm: Move the call to snd_sof_pcm_platform_hw_params()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Ranjani Sridharan <ranjani.sridharan@linux.intel.com>
commit f0d31dbb3fc44ac9cb0d9991cc0a629c88e80ac8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/f0d31dbb.failed

IPC4 requires the platform_params be passed when invoking
sof_pcm_setup_connected_widgets(). So move the call to
snd_sof_pcm_platform_hw_params() before calling
sof_pcm_setup_connected_widgets(). This has no functional impact.

sof_pcm_setup_connected_widgets will be modified in the follow up
patches to accept the platform params as an argument.

	Signed-off-by: Ranjani Sridharan <ranjani.sridharan@linux.intel.com>
	Reviewed-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
	Reviewed-by: Bard Liao <yung-chuan.liao@linux.intel.com>
	Reviewed-by: PÃ©ter Ujfalusi <peter.ujfalusi@linux.intel.com>
Link: https://lore.kernel.org/r/20220426171743.171061-5-ranjani.sridharan@linux.intel.com
	Signed-off-by: Mark Brown <broonie@kernel.org>
(cherry picked from commit f0d31dbb3fc44ac9cb0d9991cc0a629c88e80ac8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	sound/soc/sof/pcm.c
diff --cc sound/soc/sof/pcm.c
index 0575011ac242,2d21e531ac4f..000000000000
--- a/sound/soc/sof/pcm.c
+++ b/sound/soc/sof/pcm.c
@@@ -167,94 -139,23 +167,103 @@@ static int sof_pcm_hw_params(struct snd
  	 * Handle repeated calls to hw_params() without free_pcm() in
  	 * between. At least ALSA OSS emulation depends on this.
  	 */
 -	if (pcm_ops->hw_free && spcm->prepared[substream->stream]) {
 -		ret = pcm_ops->hw_free(component, substream);
 +	ret = sof_pcm_dsp_pcm_free(substream, sdev, spcm);
 +	if (ret < 0)
 +		return ret;
 +
 +	dev_dbg(component->dev, "pcm: hw params stream %d dir %d\n",
 +		spcm->pcm.pcm_id, substream->stream);
 +
++<<<<<<< HEAD
 +	memset(&pcm, 0, sizeof(pcm));
 +
 +	/* create compressed page table for audio firmware */
 +	if (runtime->buffer_changed) {
 +		ret = create_page_table(component, substream, runtime->dma_area,
 +					runtime->dma_bytes);
  		if (ret < 0)
  			return ret;
 +	}
  
 -		spcm->prepared[substream->stream] = false;
 +	/* number of pages should be rounded up */
 +	pcm.params.buffer.pages = PFN_UP(runtime->dma_bytes);
 +
 +	/* set IPC PCM parameters */
 +	pcm.hdr.size = sizeof(pcm);
 +	pcm.hdr.cmd = SOF_IPC_GLB_STREAM_MSG | SOF_IPC_STREAM_PCM_PARAMS;
 +	pcm.comp_id = spcm->stream[substream->stream].comp_id;
 +	pcm.params.hdr.size = sizeof(pcm.params);
 +	pcm.params.buffer.phy_addr =
 +		spcm->stream[substream->stream].page_table.addr;
 +	pcm.params.buffer.size = runtime->dma_bytes;
 +	pcm.params.direction = substream->stream;
 +	pcm.params.sample_valid_bytes = params_width(params) >> 3;
 +	pcm.params.buffer_fmt = SOF_IPC_BUFFER_INTERLEAVED;
 +	pcm.params.rate = params_rate(params);
 +	pcm.params.channels = params_channels(params);
 +	pcm.params.host_period_bytes = params_period_bytes(params);
 +
 +	/* container size */
 +	ret = snd_pcm_format_physical_width(params_format(params));
 +	if (ret < 0)
 +		return ret;
 +	pcm.params.sample_container_bytes = ret >> 3;
 +
 +	/* format */
 +	switch (params_format(params)) {
 +	case SNDRV_PCM_FORMAT_S16:
 +		pcm.params.frame_fmt = SOF_IPC_FRAME_S16_LE;
 +		break;
 +	case SNDRV_PCM_FORMAT_S24:
 +		pcm.params.frame_fmt = SOF_IPC_FRAME_S24_4LE;
 +		break;
 +	case SNDRV_PCM_FORMAT_S32:
 +		pcm.params.frame_fmt = SOF_IPC_FRAME_S32_LE;
 +		break;
 +	case SNDRV_PCM_FORMAT_FLOAT:
 +		pcm.params.frame_fmt = SOF_IPC_FRAME_FLOAT;
 +		break;
 +	default:
 +		return -EINVAL;
  	}
  
 -	dev_dbg(component->dev, "pcm: hw params stream %d dir %d\n",
 -		spcm->pcm.pcm_id, substream->stream);
 +	/* firmware already configured host stream */
 +	ret = snd_sof_pcm_platform_hw_params(sdev,
 +					     substream,
 +					     params,
 +					     &platform_params);
 +	if (ret < 0) {
 +		dev_err(component->dev, "error: platform hw params failed\n");
 +		return ret;
 +	}
  
 +	/* Update the IPC message with information from the platform */
 +	pcm.params.stream_tag = platform_params.stream_tag;
 +
 +	if (platform_params.use_phy_address)
 +		pcm.params.buffer.phy_addr = platform_params.phy_addr;
 +
 +	if (platform_params.no_ipc_position) {
 +		/* For older ABIs set host_period_bytes to zero to inform
 +		 * FW we don't want position updates. Newer versions use
 +		 * no_stream_position for this purpose.
 +		 */
 +		if (v->abi_version < SOF_ABI_VER(3, 10, 0))
 +			pcm.params.host_period_bytes = 0;
 +		else
 +			pcm.params.no_stream_position = 1;
 +	}
 +
 +	dev_dbg(component->dev, "stream_tag %d", pcm.params.stream_tag);
 +
++=======
+ 	ret = snd_sof_pcm_platform_hw_params(sdev, substream, params, &platform_params);
+ 	if (ret < 0) {
+ 		dev_err(component->dev, "platform hw params failed\n");
+ 		return ret;
+ 	}
+ 
++>>>>>>> f0d31dbb3fc4 (ASoC: SOF: pcm: Move the call to snd_sof_pcm_platform_hw_params())
  	/* if this is a repeated hw_params without hw_free, skip setting up widgets */
  	if (!spcm->stream[substream->stream].list) {
  		ret = sof_pcm_setup_connected_widgets(sdev, rtd, spcm, substream->stream);
@@@ -262,21 -163,19 +271,37 @@@
  			return ret;
  	}
  
++<<<<<<< HEAD
 +	/* send hw_params IPC to the DSP */
 +	ret = sof_ipc_tx_message(sdev->ipc, pcm.hdr.cmd, &pcm, sizeof(pcm),
 +				 &ipc_params_reply, sizeof(ipc_params_reply));
 +	if (ret < 0) {
 +		dev_err(component->dev, "error: hw params ipc failed for stream %d\n",
 +			pcm.params.stream_tag);
 +		return ret;
 +	}
 +
 +	ret = snd_sof_set_stream_data_offset(sdev, substream,
 +					     ipc_params_reply.posn_offset);
 +	if (ret < 0) {
 +		dev_err(component->dev, "%s: invalid stream data offset for PCM %d\n",
 +			__func__, spcm->pcm.pcm_id);
 +		return ret;
++=======
+ 	/* create compressed page table for audio firmware */
+ 	if (runtime->buffer_changed) {
+ 		ret = create_page_table(component, substream, runtime->dma_area,
+ 					runtime->dma_bytes);
+ 
+ 		if (ret < 0)
+ 			return ret;
+ 	}
+ 
+ 	if (pcm_ops->hw_params) {
+ 		ret = pcm_ops->hw_params(component, substream, params, &platform_params);
+ 		if (ret < 0)
+ 			return ret;
++>>>>>>> f0d31dbb3fc4 (ASoC: SOF: pcm: Move the call to snd_sof_pcm_platform_hw_params())
  	}
  
  	spcm->prepared[substream->stream] = true;
* Unmerged path sound/soc/sof/pcm.c
