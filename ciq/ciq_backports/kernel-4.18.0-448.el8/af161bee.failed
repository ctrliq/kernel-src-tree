include/linux/sched/mm.h: optimize current_gfp_context()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Waiman Long <longman@redhat.com>
commit af161bee93332a1ff10ba029f41936d21850ae82
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/af161bee.failed

The current_gfp_context() converts a number of PF_MEMALLOC_* per-process
flags into the corresponding GFP_* flags for memory allocation.  In that
function, current->flags is accessed 3 times.  That may lead to duplicated
access of the same memory location.

This is not usually a problem with minimal debug config options on as the
compiler can optimize away the duplicated memory accesses.  With most of
the debug config options on, however, that may not be the case.  For
example, the x86-64 object size of the __need_fs_reclaim() in a debug
kernel that calls current_gfp_context() was 309 bytes.  With this patch
applied, the object size is reduced to 202 bytes.  This is a saving of 107
bytes and will probably be slightly faster too.

Use READ_ONCE() to access current->flags to prevent the compiler from
possibly accessing current->flags multiple times.

	Signed-off-by: Waiman Long <longman@redhat.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Ingo Molnar <mingo@redhat.com>
	Cc: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
	Cc: Michel Lespinasse <walken@google.com>
Link: http://lkml.kernel.org/r/20200618212936.9776-1-longman@redhat.com
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit af161bee93332a1ff10ba029f41936d21850ae82)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/sched/mm.h
diff --cc include/linux/sched/mm.h
index 0b21b5736e43,f889e332912f..000000000000
--- a/include/linux/sched/mm.h
+++ b/include/linux/sched/mm.h
@@@ -180,20 -178,17 +180,26 @@@ static inline bool in_vfork(struct task
   */
  static inline gfp_t current_gfp_context(gfp_t flags)
  {
++<<<<<<< HEAD
 +	if (unlikely(current->flags &
 +		     (PF_MEMALLOC_NOIO | PF_MEMALLOC_NOFS | PF_MEMALLOC_NOCMA))) {
++=======
+ 	unsigned int pflags = READ_ONCE(current->flags);
+ 
+ 	if (unlikely(pflags & (PF_MEMALLOC_NOIO | PF_MEMALLOC_NOFS))) {
++>>>>>>> af161bee9333 (include/linux/sched/mm.h: optimize current_gfp_context())
  		/*
  		 * NOIO implies both NOIO and NOFS and it is a weaker context
  		 * so always make sure it makes precedence
  		 */
- 		if (current->flags & PF_MEMALLOC_NOIO)
+ 		if (pflags & PF_MEMALLOC_NOIO)
  			flags &= ~(__GFP_IO | __GFP_FS);
- 		else if (current->flags & PF_MEMALLOC_NOFS)
+ 		else if (pflags & PF_MEMALLOC_NOFS)
  			flags &= ~__GFP_FS;
 +#ifdef CONFIG_CMA
 +		if (current->flags & PF_MEMALLOC_NOCMA)
 +			flags &= ~__GFP_MOVABLE;
 +#endif
  	}
  	return flags;
  }
* Unmerged path include/linux/sched/mm.h
