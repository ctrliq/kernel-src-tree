wifi: nl80211: add MLO link ID to the NL80211_CMD_FRAME TX API

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Johannes Berg <johannes.berg@intel.com>
commit 95f498bb49f7030c1f40236107e5241e50f79ade
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/95f498bb.failed

Allow optionally specifying the link ID to transmit on,
which can be done instead of the link frequency, on an
MLD addressed frame. Both can also be omitted in which
case the frame must be MLD addressed and link selection
(and address translation) will be done on lower layers.

	Signed-off-by: Johannes Berg <johannes.berg@intel.com>
(cherry picked from commit 95f498bb49f7030c1f40236107e5241e50f79ade)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/uapi/linux/nl80211.h
diff --cc include/uapi/linux/nl80211.h
index 062d5c455741,ffb7c573e299..000000000000
--- a/include/uapi/linux/nl80211.h
+++ b/include/uapi/linux/nl80211.h
@@@ -745,6 -764,13 +745,16 @@@
   *	%NL80211_ATTR_CSA_C_OFFSETS_TX is an array of offsets to CSA
   *	counters which will be updated to the current value. This attribute
   *	is used during CSA period.
++<<<<<<< HEAD
++=======
+  *	For TX on an MLD, the frequency can be omitted and the link ID be
+  *	specified, or if transmitting to a known peer MLD (with MLD addresses
+  *	in the frame) both can be omitted and the link will be selected by
+  *	lower layers.
+  *	For RX notification, %NL80211_ATTR_RX_HW_TIMESTAMP may be included to
+  *	indicate the frame RX timestamp and %NL80211_ATTR_TX_HW_TIMESTAMP may
+  *	be included to indicate the ack TX timestamp.
++>>>>>>> 95f498bb49f7 (wifi: nl80211: add MLO link ID to the NL80211_CMD_FRAME TX API)
   * @NL80211_CMD_FRAME_WAIT_CANCEL: When an off-channel TX was requested, this
   *	command may be used with the corresponding cookie to cancel the wait
   *	time if it is known that it is no longer necessary.  This command is
diff --git a/include/net/cfg80211.h b/include/net/cfg80211.h
index 6fd986072e79..06d341b8d2ae 100644
--- a/include/net/cfg80211.h
+++ b/include/net/cfg80211.h
@@ -3334,6 +3334,9 @@ struct cfg80211_update_ft_ies_params {
  * @dont_wait_for_ack: tells the low level not to wait for an ack
  * @n_csa_offsets: length of csa_offsets array
  * @csa_offsets: array of all the csa offsets in the frame
+ * @link_id: for MLO, the link ID to transmit on, -1 if not given; note
+ *	that the link ID isn't validated (much), it's in range but the
+ *	link might not exist (or be used by the receiver STA)
  */
 struct cfg80211_mgmt_tx_params {
 	struct ieee80211_channel *chan;
@@ -3345,6 +3348,7 @@ struct cfg80211_mgmt_tx_params {
 	bool dont_wait_for_ack;
 	int n_csa_offsets;
 	const u16 *csa_offsets;
+	int link_id;
 };
 
 /**
* Unmerged path include/uapi/linux/nl80211.h
diff --git a/net/wireless/nl80211.c b/net/wireless/nl80211.c
index 683fe4fdb368..82be213dd476 100644
--- a/net/wireless/nl80211.c
+++ b/net/wireless/nl80211.c
@@ -11918,6 +11918,18 @@ static int nl80211_tx_mgmt(struct sk_buff *skb, struct genl_info *info)
 		wdev_unlock(wdev);
 		return -EBUSY;
 	}
+
+	params.link_id = nl80211_link_id_or_invalid(info->attrs);
+	/*
+	 * This now races due to the unlock, but we cannot check
+	 * the valid links for the _station_ anyway, so that's up
+	 * to the driver.
+	 */
+	if (params.link_id >= 0 &&
+	    !(wdev->valid_links & BIT(params.link_id))) {
+		wdev_unlock(wdev);
+		return -EINVAL;
+	}
 	wdev_unlock(wdev);
 
 	params.buf = nla_data(info->attrs[NL80211_ATTR_FRAME]);
