Bluetooth: btintel: Move hci quirks to setup routine

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Tedd Ho-Jeong An <tedd.an@intel.com>
commit 3df4dfbec0f291e2b6efbe7b1c46ba58111ea3cd
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/3df4dfbe.failed

This patch moves the hci quirks for Intel devices into the setup
routines and cleaned up the driver flags.

	Signed-off-by: Tedd Ho-Jeong An <tedd.an@intel.com>
	Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
(cherry picked from commit 3df4dfbec0f291e2b6efbe7b1c46ba58111ea3cd)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/bluetooth/btintel.c
#	drivers/bluetooth/btusb.c
diff --cc drivers/bluetooth/btintel.c
index 949020fa0142,421357831f3d..000000000000
--- a/drivers/bluetooth/btintel.c
+++ b/drivers/bluetooth/btintel.c
@@@ -1732,6 -2248,23 +1737,26 @@@ static int btintel_setup_combined(struc
  		case 0x07:	/* WP */
  		case 0x08:	/* StP */
  			/* Legacy ROM product */
++<<<<<<< HEAD
++=======
+ 			btintel_set_flag(hdev, INTEL_ROM_LEGACY);
+ 
+ 			/* Apply the device specific HCI quirks
+ 			 *
+ 			 * WBS for SdP - SdP and Stp have a same hw_varaint but
+ 			 * different fw_variant
+ 			 */
+ 			if (ver.hw_variant == 0x08 && ver.fw_variant == 0x22)
+ 				set_bit(HCI_QUIRK_WIDEBAND_SPEECH_SUPPORTED,
+ 					&hdev->quirks);
+ 
+ 			/* These devices have an issue with LED which doesn't
+ 			 * go off immediately during shutdown. Set the flag
+ 			 * here to send the LED OFF command during shutdown.
+ 			 */
+ 			btintel_set_flag(hdev, INTEL_BROKEN_LED);
+ 
++>>>>>>> 3df4dfbec0f2 (Bluetooth: btintel: Move hci quirks to setup routine)
  			err = btintel_legacy_rom_setup(hdev, &ver);
  			break;
  		case 0x0b:      /* SfP */
@@@ -1740,7 -2273,19 +1765,23 @@@
  		case 0x12:      /* ThP */
  		case 0x13:      /* HrP */
  		case 0x14:      /* CcP */
++<<<<<<< HEAD
 +			/* TODO: call setup routine for bootloader product */
++=======
+ 			/* Apply the device specific HCI quirks
+ 			 *
+ 			 * All Legacy bootloader devices support WBS
+ 			 */
+ 			set_bit(HCI_QUIRK_WIDEBAND_SPEECH_SUPPORTED,
+ 				&hdev->quirks);
+ 
+ 			/* Valid LE States quirk for JfP/ThP familiy */
+ 			if (ver.hw_variant == 0x11 || ver.hw_variant == 0x12)
+ 				set_bit(HCI_QUIRK_VALID_LE_STATES,
+ 					&hdev->quirks);
+ 
+ 			err = btintel_bootloader_setup(hdev, &ver);
++>>>>>>> 3df4dfbec0f2 (Bluetooth: btintel: Move hci quirks to setup routine)
  			break;
  		default:
  			bt_dev_err(hdev, "Unsupported Intel hw variant (%u)",
@@@ -1765,11 -2310,37 +1806,31 @@@
  		goto exit_error;
  	}
  
 -	/* Check for supported iBT hardware variants of this firmware
 -	 * loading method.
 -	 *
 -	 * This check has been put in place to ensure correct forward
 -	 * compatibility options when newer hardware variants come
 -	 * along.
 -	 */
 -	switch (INTEL_HW_VARIANT(ver_tlv.cnvi_bt)) {
 -	case 0x17:
 -	case 0x18:
 -	case 0x19:
 -		/* Display version information of TLV type */
 -		btintel_version_info_tlv(hdev, &ver_tlv);
 +	/* Display version information of TLV type */
 +	btintel_version_info_tlv(hdev, &ver_tlv);
  
++<<<<<<< HEAD
 +	/* TODO: Need to filter the device for new generation */
 +	/* TODO: call setup routine for tlv based bootloader product */
++=======
+ 		/* Apply the device specific HCI quirks for TLV based devices
+ 		 *
+ 		 * All TLV based devices support WBS
+ 		 */
+ 		set_bit(HCI_QUIRK_WIDEBAND_SPEECH_SUPPORTED, &hdev->quirks);
+ 
+ 		/* Valid LE States quirk for GfP */
+ 		if (INTEL_HW_VARIANT(ver_tlv.cnvi_bt) == 0x18)
+ 			set_bit(HCI_QUIRK_VALID_LE_STATES, &hdev->quirks);
+ 
+ 		err = btintel_bootloader_setup_tlv(hdev, &ver_tlv);
+ 		break;
+ 	default:
+ 		bt_dev_err(hdev, "Unsupported Intel hw variant (%u)",
+ 			   INTEL_HW_VARIANT(ver_tlv.cnvi_bt));
+ 		return -EINVAL;
+ 	}
++>>>>>>> 3df4dfbec0f2 (Bluetooth: btintel: Move hci quirks to setup routine)
  
  exit_error:
  	kfree_skb(skb);
diff --cc drivers/bluetooth/btusb.c
index 26b67f0b060b,a97af4ef6bc4..000000000000
--- a/drivers/bluetooth/btusb.c
+++ b/drivers/bluetooth/btusb.c
@@@ -376,38 -358,18 +376,52 @@@ static const struct usb_device_id black
  	{ USB_DEVICE(0x1286, 0x204e), .driver_info = BTUSB_MARVELL },
  
  	/* Intel Bluetooth devices */
++<<<<<<< HEAD
 +	{ USB_DEVICE(0x8087, 0x0025), .driver_info = BTUSB_INTEL_NEW |
 +						     BTUSB_WIDEBAND_SPEECH |
 +						     BTUSB_VALID_LE_STATES },
 +	{ USB_DEVICE(0x8087, 0x0026), .driver_info = BTUSB_INTEL_NEW |
 +						     BTUSB_WIDEBAND_SPEECH },
 +	{ USB_DEVICE(0x8087, 0x0029), .driver_info = BTUSB_INTEL_NEW |
 +						     BTUSB_WIDEBAND_SPEECH },
 +	{ USB_DEVICE(0x8087, 0x0032), .driver_info = BTUSB_INTEL_NEWGEN |
 +						     BTUSB_WIDEBAND_SPEECH},
 +	{ USB_DEVICE(0x8087, 0x0033), .driver_info = BTUSB_INTEL_NEWGEN |
 +						     BTUSB_WIDEBAND_SPEECH},
 +	{ USB_DEVICE(0x8087, 0x0033), .driver_info = BTUSB_INTEL_NEWGEN |
 +						     BTUSB_WIDEBAND_SPEECH},
++=======
+ 	{ USB_DEVICE(0x8087, 0x0025), .driver_info = BTUSB_INTEL_COMBINED },
+ 	{ USB_DEVICE(0x8087, 0x0026), .driver_info = BTUSB_INTEL_COMBINED },
+ 	{ USB_DEVICE(0x8087, 0x0029), .driver_info = BTUSB_INTEL_COMBINED },
+ 	{ USB_DEVICE(0x8087, 0x0032), .driver_info = BTUSB_INTEL_COMBINED },
+ 	{ USB_DEVICE(0x8087, 0x0033), .driver_info = BTUSB_INTEL_COMBINED },
++>>>>>>> 3df4dfbec0f2 (Bluetooth: btintel: Move hci quirks to setup routine)
  	{ USB_DEVICE(0x8087, 0x07da), .driver_info = BTUSB_CSR },
 -	{ USB_DEVICE(0x8087, 0x07dc), .driver_info = BTUSB_INTEL_COMBINED |
 -						     BTUSB_INTEL_BROKEN_INITIAL_NCMD },
 +	{ USB_DEVICE(0x8087, 0x07dc), .driver_info = BTUSB_INTEL_COMBINED },
  	{ USB_DEVICE(0x8087, 0x0a2a), .driver_info = BTUSB_INTEL_COMBINED },
++<<<<<<< HEAD
 +	{ USB_DEVICE(0x8087, 0x0a2b), .driver_info = BTUSB_INTEL_NEW |
 +						     BTUSB_WIDEBAND_SPEECH },
 +	{ USB_DEVICE(0x8087, 0x0aa7), .driver_info = BTUSB_INTEL_COMBINED |
 +						     BTUSB_WIDEBAND_SPEECH },
 +	{ USB_DEVICE(0x8087, 0x0aaa), .driver_info = BTUSB_INTEL_NEW |
 +						     BTUSB_WIDEBAND_SPEECH |
 +						     BTUSB_VALID_LE_STATES },
 +	{ USB_DEVICE(0x0489, 0xe0cc), .driver_info = BTUSB_QCA_WCN6855 |
 +						     BTUSB_WIDEBAND_SPEECH |
 +						     BTUSB_VALID_LE_STATES },
 +	{ USB_DEVICE(0x0489, 0xe0d6), .driver_info = BTUSB_QCA_WCN6855 |
 +						     BTUSB_WIDEBAND_SPEECH |
 +						     BTUSB_VALID_LE_STATES },
 +	{ USB_DEVICE(0x0489, 0xe0e3), .driver_info = BTUSB_QCA_WCN6855 |
 +						     BTUSB_WIDEBAND_SPEECH |
 +						     BTUSB_VALID_LE_STATES },
++=======
+ 	{ USB_DEVICE(0x8087, 0x0a2b), .driver_info = BTUSB_INTEL_COMBINED },
+ 	{ USB_DEVICE(0x8087, 0x0aa7), .driver_info = BTUSB_INTEL_COMBINED },
+ 	{ USB_DEVICE(0x8087, 0x0aaa), .driver_info = BTUSB_INTEL_COMBINED },
++>>>>>>> 3df4dfbec0f2 (Bluetooth: btintel: Move hci quirks to setup routine)
  
  	/* Other Intel Bluetooth devices */
  	{ USB_VENDOR_AND_INTERFACE_INFO(0x8087, 0xe0, 0x01, 0x01),
@@@ -4348,43 -3807,11 +4362,48 @@@ static int btusb_probe(struct usb_inter
  			goto out_free_dev;
  
  		/* Transport specific configuration */
 +		hdev->cmd_timeout = btusb_intel_cmd_timeout;
 +
++<<<<<<< HEAD
 +		set_bit(HCI_QUIRK_STRICT_DUPLICATE_FILTER, &hdev->quirks);
 +		set_bit(HCI_QUIRK_SIMULTANEOUS_DISCOVERY, &hdev->quirks);
 +		set_bit(HCI_QUIRK_NON_PERSISTENT_DIAG, &hdev->quirks);
 +	}
 +
 +	if (id->driver_info & BTUSB_INTEL_NEW) {
 +		hdev->manufacturer = 2;
 +		hdev->send = btusb_send_frame_intel;
 +		hdev->setup = btusb_setup_intel_new;
 +		hdev->shutdown = btusb_shutdown_intel_new;
 +		hdev->hw_error = btintel_hw_error;
 +		hdev->set_diag = btintel_set_diag;
 +		hdev->set_bdaddr = btintel_set_bdaddr;
 +		hdev->cmd_timeout = btusb_intel_cmd_timeout;
 +		set_bit(HCI_QUIRK_STRICT_DUPLICATE_FILTER, &hdev->quirks);
 +		set_bit(HCI_QUIRK_SIMULTANEOUS_DISCOVERY, &hdev->quirks);
 +		set_bit(HCI_QUIRK_NON_PERSISTENT_DIAG, &hdev->quirks);
 +	}
 +
 +	if (id->driver_info & BTUSB_INTEL_NEWGEN) {
 +		hdev->manufacturer = 2;
  		hdev->send = btusb_send_frame_intel;
 +		hdev->setup = btusb_setup_intel_newgen;
 +		hdev->shutdown = btusb_shutdown_intel_new;
 +		hdev->hw_error = btintel_hw_error;
 +		hdev->set_diag = btintel_set_diag;
 +		hdev->set_bdaddr = btintel_set_bdaddr;
  		hdev->cmd_timeout = btusb_intel_cmd_timeout;
 +		set_bit(HCI_QUIRK_STRICT_DUPLICATE_FILTER, &hdev->quirks);
 +		set_bit(HCI_QUIRK_SIMULTANEOUS_DISCOVERY, &hdev->quirks);
 +		set_bit(HCI_QUIRK_NON_PERSISTENT_DIAG, &hdev->quirks);
  
 +		data->recv_event = btusb_recv_event_intel;
 +		data->recv_bulk = btusb_recv_bulk_intel;
 +		set_bit(BTUSB_BOOTLOADER, &data->flags);
++=======
+ 		if (id->driver_info & BTUSB_INTEL_BROKEN_INITIAL_NCMD)
+ 			btintel_set_flag(hdev, INTEL_BROKEN_INITIAL_NCMD);
++>>>>>>> 3df4dfbec0f2 (Bluetooth: btintel: Move hci quirks to setup routine)
  	}
  
  	if (id->driver_info & BTUSB_MARVELL)
* Unmerged path drivers/bluetooth/btintel.c
* Unmerged path drivers/bluetooth/btusb.c
