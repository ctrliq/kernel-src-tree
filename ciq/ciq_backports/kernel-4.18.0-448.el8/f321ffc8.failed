ASoC: SOF: Intel: hda-dai: split link DMA and dai operations

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
commit f321ffc8d93639181af0512938e2b0630ca28051
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/f321ffc8.failed

The link DMA state management is handled completely on the host side,
while the DAI operations require an IPC. Split the first part in
dedicated helpers.

	Signed-off-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
	Reviewed-by: Rander Wang <rander.wang@intel.com>
	Reviewed-by: Ranjani Sridharan <ranjani.sridharan@linux.intel.com>
	Reviewed-by: PÃ©ter Ujfalusi <peter.ujfalusi@linux.intel.com>
	Reviewed-by: Bard Liao <yung-chuan.liao@linux.intel.com>
Link: https://lore.kernel.org/r/20220421203201.1550328-7-pierre-louis.bossart@linux.intel.com
	Signed-off-by: Mark Brown <broonie@kernel.org>
(cherry picked from commit f321ffc8d93639181af0512938e2b0630ca28051)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	sound/soc/sof/intel/hda-dai.c
diff --cc sound/soc/sof/intel/hda-dai.c
index 97bf291cb5b8,d5ca5b1fefe6..000000000000
--- a/sound/soc/sof/intel/hda-dai.c
+++ b/sound/soc/sof/intel/hda-dai.c
@@@ -215,51 -171,33 +215,57 @@@ static int hda_link_dai_widget_update(s
  
  	/* set up/free DAI widget and send DAI_CONFIG IPC */
  	if (widget_setup)
 -		return hda_ctrl_dai_widget_setup(w, SOF_DAI_CONFIG_FLAGS_2_STEP_STOP, &data);
 +		return hda_ctrl_dai_widget_setup(w);
  
 -	return hda_ctrl_dai_widget_free(w, SOF_DAI_CONFIG_FLAGS_NONE, &data);
 +	return hda_ctrl_dai_widget_free(w);
  }
  
++<<<<<<< HEAD
 +static int hda_link_hw_params(struct snd_pcm_substream *substream,
 +			      struct snd_pcm_hw_params *params,
 +			      struct snd_soc_dai *dai)
++=======
+ static int hda_link_dma_hw_params(struct snd_pcm_substream *substream,
+ 				  struct snd_pcm_hw_params *params)
++>>>>>>> f321ffc8d936 (ASoC: SOF: Intel: hda-dai: split link DMA and dai operations)
  {
  	struct hdac_stream *hstream = substream->runtime->private_data;
- 	struct hdac_bus *bus = hstream->bus;
  	struct hdac_ext_stream *hext_stream;
  	struct snd_soc_pcm_runtime *rtd = asoc_substream_to_rtd(substream);
+ 	struct snd_soc_dai *cpu_dai = asoc_rtd_to_cpu(rtd, 0);
  	struct snd_soc_dai *codec_dai = asoc_rtd_to_codec(rtd, 0);
 +	struct sof_intel_hda_stream *hda_stream;
  	struct hda_pipe_params p_params = {0};
- 	struct snd_soc_dapm_widget *w;
+ 	struct hdac_bus *bus = hstream->bus;
  	struct hdac_ext_link *link;
- 	int stream_tag;
- 	int ret;
  
  	/* get stored dma data if resuming from system suspend */
- 	hext_stream = snd_soc_dai_get_dma_data(dai, substream);
+ 	hext_stream = snd_soc_dai_get_dma_data(cpu_dai, substream);
  	if (!hext_stream) {
  		hext_stream = hda_link_stream_assign(bus, substream);
  		if (!hext_stream)
  			return -EBUSY;
  
- 		snd_soc_dai_set_dma_data(dai, substream, (void *)hext_stream);
+ 		snd_soc_dai_set_dma_data(cpu_dai, substream, (void *)hext_stream);
  	}
  
++<<<<<<< HEAD
 +	stream_tag = hdac_stream(hext_stream)->stream_tag;
 +
 +	hda_stream = hstream_to_sof_hda_stream(hext_stream);
 +
 +	if (substream->stream == SNDRV_PCM_STREAM_PLAYBACK)
 +		w = dai->playback_widget;
 +	else
 +		w = dai->capture_widget;
 +
 +	/* set up the DAI widget and send the DAI_CONFIG with the new tag */
 +	ret = hda_link_dai_widget_update(hda_stream, w, stream_tag - 1, true);
 +	if (ret < 0)
 +		return ret;
 +
++=======
++>>>>>>> f321ffc8d936 (ASoC: SOF: Intel: hda-dai: split link DMA and dai operations)
  	link = snd_hdac_ext_bus_get_link(bus, codec_dai->component->name);
  	if (!link)
  		return -EINVAL;
@@@ -282,26 -220,48 +288,63 @@@
  	return hda_link_dma_params(hext_stream, &p_params);
  }
  
++<<<<<<< HEAD
 +static int hda_link_pcm_prepare(struct snd_pcm_substream *substream,
 +				struct snd_soc_dai *dai)
++=======
+ static int hda_dai_hw_params_update(struct snd_pcm_substream *substream,
+ 				    struct snd_pcm_hw_params *params,
+ 				    struct snd_soc_dai *dai)
+ {
+ 	struct hdac_ext_stream *hext_stream;
+ 	struct snd_soc_dapm_widget *w;
+ 	int stream_tag;
+ 
+ 	hext_stream = snd_soc_dai_get_dma_data(dai, substream);
+ 	if (!hext_stream)
+ 		return -EINVAL;
+ 
+ 	stream_tag = hdac_stream(hext_stream)->stream_tag;
+ 
+ 	w = snd_soc_dai_get_widget(dai, substream->stream);
+ 
+ 	/* set up the DAI widget and send the DAI_CONFIG with the new tag */
+ 	return hda_dai_widget_update(w, stream_tag - 1, true);
+ }
+ 
+ static int hda_dai_hw_params(struct snd_pcm_substream *substream,
+ 			     struct snd_pcm_hw_params *params,
+ 			     struct snd_soc_dai *dai)
+ {
+ 	int ret;
+ 
+ 	ret = hda_link_dma_hw_params(substream, params);
+ 	if (ret < 0)
+ 		return ret;
+ 
+ 	return hda_dai_hw_params_update(substream, params, dai);
+ }
+ 
+ static int hda_link_dma_prepare(struct snd_pcm_substream *substream)
++>>>>>>> f321ffc8d936 (ASoC: SOF: Intel: hda-dai: split link DMA and dai operations)
  {
- 	struct hdac_ext_stream *hext_stream =
- 				snd_soc_dai_get_dma_data(dai, substream);
- 	struct snd_sof_dev *sdev =
- 				snd_soc_component_get_drvdata(dai->component);
  	struct snd_soc_pcm_runtime *rtd = asoc_substream_to_rtd(substream);
  	int stream = substream->stream;
  
++<<<<<<< HEAD
 +	if (hext_stream->link_prepared)
 +		return 0;
 +
 +	dev_dbg(sdev->dev, "hda: prepare stream dir %d\n", substream->stream);
 +
 +	return hda_link_hw_params(substream, &rtd->dpcm[stream].hw_params,
 +				  dai);
++=======
+ 	return hda_link_dma_hw_params(substream, &rtd->dpcm[stream].hw_params);
++>>>>>>> f321ffc8d936 (ASoC: SOF: Intel: hda-dai: split link DMA and dai operations)
  }
  
 -static int hda_dai_config_pause_push_ipc(struct snd_soc_dapm_widget *w)
 +static int hda_link_dai_config_pause_push_ipc(struct snd_soc_dapm_widget *w)
  {
  	struct snd_sof_widget *swidget = w->dobj.private;
  	struct snd_soc_component *component = swidget->scomp;
@@@ -338,34 -279,44 +381,68 @@@
  	return ret;
  }
  
++<<<<<<< HEAD
 +static int hda_link_pcm_trigger(struct snd_pcm_substream *substream,
 +				int cmd, struct snd_soc_dai *dai)
 +{
 +	struct hdac_ext_stream *hext_stream =
 +				snd_soc_dai_get_dma_data(dai, substream);
 +	struct sof_intel_hda_stream *hda_stream;
 +	struct snd_soc_pcm_runtime *rtd;
 +	struct snd_soc_dapm_widget *w;
 +	struct hdac_ext_link *link;
 +	struct hdac_stream *hstream;
 +	struct hdac_bus *bus;
 +	int stream_tag;
++=======
+ static int ipc3_hda_dai_prepare(struct snd_pcm_substream *substream,
+ 				struct snd_soc_dai *dai)
+ {
+ 	struct hdac_ext_stream *hext_stream =
+ 				snd_soc_dai_get_dma_data(dai, substream);
+ 	struct snd_sof_dev *sdev = snd_soc_component_get_drvdata(dai->component);
+ 	struct snd_soc_pcm_runtime *rtd = asoc_substream_to_rtd(substream);
+ 	int stream = substream->stream;
++>>>>>>> f321ffc8d936 (ASoC: SOF: Intel: hda-dai: split link DMA and dai operations)
  	int ret;
  
- 	hstream = substream->runtime->private_data;
- 	bus = hstream->bus;
- 	rtd = asoc_substream_to_rtd(substream);
+ 	if (hext_stream->link_prepared)
+ 		return 0;
  
- 	link = snd_hdac_ext_bus_get_link(bus, asoc_rtd_to_codec(rtd, 0)->component->name);
+ 	dev_dbg(sdev->dev, "%s: prepare stream dir %d\n", __func__, substream->stream);
+ 
+ 	ret = hda_link_dma_prepare(substream);
+ 	if (ret < 0)
+ 		return ret;
+ 
+ 	return hda_dai_hw_params_update(substream, &rtd->dpcm[stream].hw_params, dai);
+ }
+ 
+ static int hda_link_dma_trigger(struct snd_pcm_substream *substream, int cmd)
+ {
+ 	struct hdac_stream *hstream = substream->runtime->private_data;
+ 	struct snd_soc_pcm_runtime *rtd = asoc_substream_to_rtd(substream);
+ 	struct snd_soc_dai *cpu_dai = asoc_rtd_to_cpu(rtd, 0);
+ 	struct snd_soc_dai *codec_dai = asoc_rtd_to_codec(rtd, 0);
+ 	struct hdac_ext_stream *hext_stream = snd_soc_dai_get_dma_data(cpu_dai, substream);
+ 	struct hdac_ext_link *link;
+ 	struct hdac_bus *bus = hstream->bus;
+ 	int stream_tag;
+ 
+ 	link = snd_hdac_ext_bus_get_link(bus, codec_dai->component->name);
  	if (!link)
  		return -EINVAL;
  
++<<<<<<< HEAD
 +	hda_stream = hstream_to_sof_hda_stream(hext_stream);
 +
 +	dev_dbg(dai->dev, "In %s cmd=%d\n", __func__, cmd);
 +
 +	w = snd_soc_dai_get_widget(dai, substream->stream);
 +
++=======
+ 	dev_dbg(cpu_dai->dev, "%s: cmd=%d\n", __func__, cmd);
++>>>>>>> f321ffc8d936 (ASoC: SOF: Intel: hda-dai: split link DMA and dai operations)
  	switch (cmd) {
  	case SNDRV_PCM_TRIGGER_START:
  	case SNDRV_PCM_TRIGGER_PAUSE_RELEASE:
@@@ -375,13 -326,6 +452,16 @@@
  	case SNDRV_PCM_TRIGGER_STOP:
  		snd_hdac_ext_link_stream_clear(hext_stream);
  
++<<<<<<< HEAD
 +		/*
 +		 * free DAI widget during stop/suspend to keep widget use_count's balanced.
 +		 */
 +		ret = hda_link_dai_widget_update(hda_stream, w, DMA_CHAN_INVALID, false);
 +		if (ret < 0)
 +			return ret;
 +
++=======
++>>>>>>> f321ffc8d936 (ASoC: SOF: Intel: hda-dai: split link DMA and dai operations)
  		if (substream->stream == SNDRV_PCM_STREAM_PLAYBACK) {
  			stream_tag = hdac_stream(hext_stream)->stream_tag;
  			snd_hdac_ext_link_clear_stream_id(link, stream_tag);
@@@ -392,9 -336,6 +472,12 @@@
  	case SNDRV_PCM_TRIGGER_PAUSE_PUSH:
  		snd_hdac_ext_link_stream_clear(hext_stream);
  
++<<<<<<< HEAD
 +		ret = hda_link_dai_config_pause_push_ipc(w);
 +		if (ret < 0)
 +			return ret;
++=======
++>>>>>>> f321ffc8d936 (ASoC: SOF: Intel: hda-dai: split link DMA and dai operations)
  		break;
  	default:
  		return -EINVAL;
@@@ -402,16 -343,9 +485,14 @@@
  	return 0;
  }
  
++<<<<<<< HEAD
 +static int hda_link_hw_free(struct snd_pcm_substream *substream,
 +			    struct snd_soc_dai *dai)
++=======
+ static int ipc3_hda_dai_trigger(struct snd_pcm_substream *substream,
+ 				int cmd, struct snd_soc_dai *dai)
++>>>>>>> f321ffc8d936 (ASoC: SOF: Intel: hda-dai: split link DMA and dai operations)
  {
- 	unsigned int stream_tag;
- 	struct sof_intel_hda_stream *hda_stream;
- 	struct hdac_bus *bus;
- 	struct hdac_ext_link *link;
- 	struct hdac_stream *hstream;
- 	struct snd_soc_pcm_runtime *rtd;
- 	struct hdac_ext_stream *hext_stream;
  	struct snd_soc_dapm_widget *w;
  	int ret;
  
@@@ -426,19 -398,7 +545,23 @@@ static int hda_link_dma_hw_free(struct 
  		return -EINVAL;
  	}
  
++<<<<<<< HEAD
 +	hda_stream = hstream_to_sof_hda_stream(hext_stream);
 +
 +	if (substream->stream == SNDRV_PCM_STREAM_PLAYBACK)
 +		w = dai->playback_widget;
 +	else
 +		w = dai->capture_widget;
 +
 +	/* free the link DMA channel in the FW and the DAI widget */
 +	ret = hda_link_dai_widget_update(hda_stream, w, DMA_CHAN_INVALID, false);
 +	if (ret < 0)
 +		return ret;
 +
 +	link = snd_hdac_ext_bus_get_link(bus, asoc_rtd_to_codec(rtd, 0)->component->name);
++=======
+ 	link = snd_hdac_ext_bus_get_link(bus, codec_dai->component->name);
++>>>>>>> f321ffc8d936 (ASoC: SOF: Intel: hda-dai: split link DMA and dai operations)
  	if (!link)
  		return -EINVAL;
  
@@@ -457,11 -418,31 +581,39 @@@
  	return 0;
  }
  
++<<<<<<< HEAD
 +static const struct snd_soc_dai_ops hda_link_dai_ops = {
 +	.hw_params = hda_link_hw_params,
 +	.hw_free = hda_link_hw_free,
 +	.trigger = hda_link_pcm_trigger,
 +	.prepare = hda_link_pcm_prepare,
++=======
+ static int hda_dai_hw_free(struct snd_pcm_substream *substream,
+ 			   struct snd_soc_dai *dai)
+ {
+ 	struct snd_soc_dapm_widget *w;
+ 	int ret;
+ 
+ 	ret = hda_link_dma_hw_free(substream);
+ 	if (ret < 0)
+ 		return ret;
+ 
+ 	w = snd_soc_dai_get_widget(dai, substream->stream);
+ 
+ 	/* free the link DMA channel in the FW and the DAI widget */
+ 	ret = hda_dai_widget_update(w, DMA_CHAN_INVALID, false);
+ 	if (ret < 0)
+ 		return ret;
+ 
+ 	return 0;
+ }
+ 
+ static const struct snd_soc_dai_ops ipc3_hda_dai_ops = {
+ 	.hw_params = hda_dai_hw_params,
+ 	.hw_free = hda_dai_hw_free,
+ 	.trigger = ipc3_hda_dai_trigger,
+ 	.prepare = ipc3_hda_dai_prepare,
++>>>>>>> f321ffc8d936 (ASoC: SOF: Intel: hda-dai: split link DMA and dai operations)
  };
  
  #endif
* Unmerged path sound/soc/sof/intel/hda-dai.c
