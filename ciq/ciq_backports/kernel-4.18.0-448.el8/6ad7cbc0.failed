Makefile: Add clang-tidy and static analyzer support to makefile

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Nathan Huckleberry <nhuck@google.com>
commit 6ad7cbc01527223f3f92baac9b122f15651cf76b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/6ad7cbc0.failed

This patch adds clang-tidy and the clang static-analyzer as make
targets. The goal of this patch is to make static analysis tools
usable and extendable by any developer or researcher who is familiar
with basic c++.

The current static analysis tools require intimate knowledge of the
internal workings of the static analysis. Clang-tidy and the clang
static analyzers expose an easy to use api and allow users unfamiliar
with clang to write new checks with relative ease.

===Clang-tidy===

Clang-tidy is an easily extendable 'linter' that runs on the AST.
Clang-tidy checks are easy to write and understand. A check consists of
two parts, a matcher and a checker. The matcher is created using a
domain specific language that acts on the AST
(https://clang.llvm.org/docs/LibASTMatchersReference.html).  When AST
nodes are found by the matcher a callback is made to the checker. The
checker can then execute additional checks and issue warnings.

Here is an example clang-tidy check to report functions that have calls
to local_irq_disable without calls to local_irq_enable and vice-versa.
Functions flagged with __attribute((annotation("ignore_irq_balancing")))
are ignored for analysis. (https://reviews.llvm.org/D65828)

===Clang static analyzer===

The clang static analyzer is a more powerful static analysis tool that
uses symbolic execution to find bugs. Currently there is a check that
looks for potential security bugs from invalid uses of kmalloc and
kfree. There are several more general purpose checks that are useful for
the kernel.

The clang static analyzer is well documented and designed to be
extensible.
(https://clang-analyzer.llvm.org/checker_dev_manual.html)
(https://github.com/haoNoQ/clang-analyzer-guide/releases/download/v0.1/clang-analyzer-guide-v0.1.pdf)

The main draw of the clang tools is how accessible they are. The clang
documentation is very nice and these tools are built specifically to be
easily extendable by any developer. They provide an accessible method of
bug-finding and research to people who are not overly familiar with the
kernel codebase.

	Signed-off-by: Nathan Huckleberry <nhuck@google.com>
	Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>
	Tested-by: Nick Desaulniers <ndesaulniers@google.com>
	Tested-by: Lukas Bulwahn <lukas.bulwahn@gmail.com>
	Signed-off-by: Masahiro Yamada <masahiroy@kernel.org>
(cherry picked from commit 6ad7cbc01527223f3f92baac9b122f15651cf76b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	MAINTAINERS
#	Makefile
diff --cc MAINTAINERS
index aa8a8ffebe7a,05bebba204cf..000000000000
--- a/MAINTAINERS
+++ b/MAINTAINERS
@@@ -3630,6 -4235,21 +3630,24 @@@ M:	Dave Goodell <dgoodell@cisco.com
  S:	Supported
  F:	drivers/infiniband/hw/usnic/
  
++<<<<<<< HEAD
++=======
+ CLANG-FORMAT FILE
+ M:	Miguel Ojeda <miguel.ojeda.sandonis@gmail.com>
+ S:	Maintained
+ F:	.clang-format
+ 
+ CLANG/LLVM BUILD SUPPORT
+ L:	clang-built-linux@googlegroups.com
+ S:	Supported
+ W:	https://clangbuiltlinux.github.io/
+ B:	https://github.com/ClangBuiltLinux/linux/issues
+ C:	irc://chat.freenode.net/clangbuiltlinux
+ F:	Documentation/kbuild/llvm.rst
+ F:	scripts/clang-tools/
+ K:	\b(?i:clang|llvm)\b
+ 
++>>>>>>> 6ad7cbc01527 (Makefile: Add clang-tidy and static analyzer support to makefile)
  CLEANCACHE API
  M:	Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
  L:	linux-kernel@vger.kernel.org
diff --cc Makefile
index d19eb4028fc8,37739ee53f27..000000000000
--- a/Makefile
+++ b/Makefile
@@@ -573,7 -634,7 +573,11 @@@ endi
  # in addition to whatever we do anyway.
  # Just "make" or "make all" shall build modules as well
  
++<<<<<<< HEAD
 +ifneq ($(filter all _all modules,$(MAKECMDGOALS)),)
++=======
+ ifneq ($(filter all modules nsdeps %compile_commands.json clang-%,$(MAKECMDGOALS)),)
++>>>>>>> 6ad7cbc01527 (Makefile: Add clang-tidy and static analyzer support to makefile)
    KBUILD_MODULES := 1
  endif
  
@@@ -1470,18 -1581,33 +1474,20 @@@ help
  	@echo  '  versioncheck    - Sanity check on version.h usage'
  	@echo  '  includecheck    - Check for duplicate included header files'
  	@echo  '  export_report   - List the usages of all exported symbols'
 +	@echo  '  headers_check   - Sanity check on exported headers'
  	@echo  '  headerdep       - Detect inclusion cycles in headers'
  	@echo  '  coccicheck      - Check with Coccinelle'
+ 	@echo  '  clang-analyzer  - Check with clang static analyzer'
+ 	@echo  '  clang-tidy      - Check with clang-tidy'
  	@echo  ''
 -	@echo  'Tools:'
 -	@echo  '  nsdeps          - Generate missing symbol namespace dependencies'
 -	@echo  ''
  	@echo  'Kernel selftest:'
 -	@echo  '  kselftest         - Build and run kernel selftest'
 -	@echo  '                      Build, install, and boot kernel before'
 -	@echo  '                      running kselftest on it'
 -	@echo  '                      Run as root for full coverage'
 -	@echo  '  kselftest-all     - Build kernel selftest'
 -	@echo  '  kselftest-install - Build and install kernel selftest'
 -	@echo  '  kselftest-clean   - Remove all generated kselftest files'
 -	@echo  '  kselftest-merge   - Merge all the config dependencies of'
 -	@echo  '		      kselftest to existing .config.'
 +	@echo  '  kselftest       - Build and run kernel selftest (run as root)'
 +	@echo  '                    Build, install, and boot kernel before'
 +	@echo  '                    running kselftest on it'
 +	@echo  '  kselftest-clean - Remove all generated kselftest files'
 +	@echo  '  kselftest-merge - Merge all the config dependencies of kselftest to existing'
 +	@echo  '                    .config.'
  	@echo  ''
 -	@$(if $(dtstree), \
 -		echo 'Devicetree:'; \
 -		echo '* dtbs             - Build device tree blobs for enabled boards'; \
 -		echo '  dtbs_install     - Install dtbs to $(INSTALL_DTBS_PATH)'; \
 -		echo '  dt_binding_check - Validate device tree binding documents'; \
 -		echo '  dtbs_check       - Validate device tree source files';\
 -		echo '')
 -
  	@echo 'Userspace tools targets:'
  	@echo '  use "make tools/help"'
  	@echo '  or  "cd tools; make help"'
@@@ -1647,6 -1836,41 +1653,44 @@@ quiet_cmd_tags = GEN     $
  tags TAGS cscope gtags: FORCE
  	$(call cmd,tags)
  
++<<<<<<< HEAD
++=======
+ # Script to generate missing namespace dependencies
+ # ---------------------------------------------------------------------------
+ 
+ PHONY += nsdeps
+ nsdeps: export KBUILD_NSDEPS=1
+ nsdeps: modules
+ 	$(Q)$(CONFIG_SHELL) $(srctree)/scripts/nsdeps
+ 
+ # Clang Tooling
+ # ---------------------------------------------------------------------------
+ 
+ quiet_cmd_gen_compile_commands = GEN     $@
+       cmd_gen_compile_commands = $(PYTHON3) $< -a $(AR) -o $@ $(filter-out $<, $(real-prereqs))
+ 
+ $(extmod-prefix)compile_commands.json: scripts/clang-tools/gen_compile_commands.py \
+ 	$(if $(KBUILD_EXTMOD),,$(KBUILD_VMLINUX_OBJS) $(KBUILD_VMLINUX_LIBS)) \
+ 	$(if $(CONFIG_MODULES), $(MODORDER)) FORCE
+ 	$(call if_changed,gen_compile_commands)
+ 
+ targets += $(extmod-prefix)compile_commands.json
+ 
+ PHONY += clang-tidy clang-analyzer
+ 
+ ifdef CONFIG_CC_IS_CLANG
+ quiet_cmd_clang_tools = CHECK   $<
+       cmd_clang_tools = $(PYTHON3) $(srctree)/scripts/clang-tools/run-clang-tools.py $@ $<
+ 
+ clang-tidy clang-analyzer: $(extmod-prefix)compile_commands.json
+ 	$(call cmd,clang_tools)
+ else
+ clang-tidy clang-analyzer:
+ 	@echo "$@ requires CC=clang" >&2
+ 	@false
+ endif
+ 
++>>>>>>> 6ad7cbc01527 (Makefile: Add clang-tidy and static analyzer support to makefile)
  # Scripts to check various things for consistency
  # ---------------------------------------------------------------------------
  
* Unmerged path MAINTAINERS
* Unmerged path Makefile
diff --git a/scripts/gen_compile_commands.py b/scripts/clang-tools/gen_compile_commands.py
similarity index 100%
rename from scripts/gen_compile_commands.py
rename to scripts/clang-tools/gen_compile_commands.py
diff --git a/scripts/clang-tools/run-clang-tools.py b/scripts/clang-tools/run-clang-tools.py
new file mode 100755
index 000000000000..fa7655c7cec0
--- /dev/null
+++ b/scripts/clang-tools/run-clang-tools.py
@@ -0,0 +1,74 @@
+#!/usr/bin/env python
+# SPDX-License-Identifier: GPL-2.0
+#
+# Copyright (C) Google LLC, 2020
+#
+# Author: Nathan Huckleberry <nhuck@google.com>
+#
+"""A helper routine run clang-tidy and the clang static-analyzer on
+compile_commands.json.
+"""
+
+import argparse
+import json
+import multiprocessing
+import os
+import subprocess
+import sys
+
+
+def parse_arguments():
+    """Set up and parses command-line arguments.
+    Returns:
+        args: Dict of parsed args
+        Has keys: [path, type]
+    """
+    usage = """Run clang-tidy or the clang static-analyzer on a
+        compilation database."""
+    parser = argparse.ArgumentParser(description=usage)
+
+    type_help = "Type of analysis to be performed"
+    parser.add_argument("type",
+                        choices=["clang-tidy", "clang-analyzer"],
+                        help=type_help)
+    path_help = "Path to the compilation database to parse"
+    parser.add_argument("path", type=str, help=path_help)
+
+    return parser.parse_args()
+
+
+def init(l, a):
+    global lock
+    global args
+    lock = l
+    args = a
+
+
+def run_analysis(entry):
+    # Disable all checks, then re-enable the ones we want
+    checks = "-checks=-*,"
+    if args.type == "clang-tidy":
+        checks += "linuxkernel-*"
+    else:
+        checks += "clang-analyzer-*"
+    p = subprocess.run(["clang-tidy", "-p", args.path, checks, entry["file"]],
+                       stdout=subprocess.PIPE,
+                       stderr=subprocess.STDOUT,
+                       cwd=entry["directory"])
+    with lock:
+        sys.stderr.buffer.write(p.stdout)
+
+
+def main():
+    args = parse_arguments()
+
+    lock = multiprocessing.Lock()
+    pool = multiprocessing.Pool(initializer=init, initargs=(lock, args))
+    # Read JSON data into the datastore variable
+    with open(args.path, "r") as f:
+        datastore = json.load(f)
+        pool.map(run_analysis, datastore)
+
+
+if __name__ == "__main__":
+    main()
