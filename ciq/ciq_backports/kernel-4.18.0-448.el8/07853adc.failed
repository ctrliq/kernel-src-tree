KVM: VMX: Prevent RSB underflow before vmenter

jira LE-1907
cve CVE-2022-29901
cve CVE-2022-29900
cve CVE-2022-23825
cve CVE-2022-23816
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Josh Poimboeuf <jpoimboe@kernel.org>
commit 07853adc29a058c5fd143c14e5ac528448a72ed9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/07853adc.failed

On VMX, there are some balanced returns between the time the guest's
SPEC_CTRL value is written, and the vmenter.

Balanced returns (matched by a preceding call) are usually ok, but it's
at least theoretically possible an NMI with a deep call stack could
empty the RSB before one of the returns.

For maximum paranoia, don't allow *any* returns (balanced or otherwise)
between the SPEC_CTRL write and the vmenter.

  [ bp: Fix 32-bit build. ]

	Signed-off-by: Josh Poimboeuf <jpoimboe@kernel.org>
	Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
	Signed-off-by: Borislav Petkov <bp@suse.de>
(cherry picked from commit 07853adc29a058c5fd143c14e5ac528448a72ed9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kernel/asm-offsets.c
#	arch/x86/kernel/cpu/bugs.c
#	arch/x86/kvm/vmx/vmx.h
diff --cc arch/x86/kernel/asm-offsets.c
index 4a66ffd3d5c9,cb50589a7102..000000000000
--- a/arch/x86/kernel/asm-offsets.c
+++ b/arch/x86/kernel/asm-offsets.c
@@@ -18,7 -18,8 +18,12 @@@
  #include <asm/bootparam.h>
  #include <asm/suspend.h>
  #include <asm/tlbflush.h>
++<<<<<<< HEAD
 +#include <asm/spec_ctrl.h>
++=======
+ #include <asm/tdx.h>
+ #include "../kvm/vmx/vmx.h"
++>>>>>>> 07853adc29a0 (KVM: VMX: Prevent RSB underflow before vmenter)
  
  #ifdef CONFIG_XEN
  #include <xen/interface/xen.h>
@@@ -109,8 -109,8 +114,15 @@@ void common(void) 
  	OFFSET(TSS_sp1, tss_struct, x86_tss.sp1);
  	OFFSET(TSS_sp2, tss_struct, x86_tss.sp2);
  
++<<<<<<< HEAD
 +	/* Kernel IBRS speculation control structure */
 +	OFFSET(KERNEL_IBRS_SPEC_CTRL_entry, kernel_ibrs_spec_ctrl, entry);
 +	OFFSET(KERNEL_IBRS_SPEC_CTRL_exit, kernel_ibrs_spec_ctrl, exit);
 +	OFFSET(KERNEL_IBRS_SPEC_CTRL_hi32, kernel_ibrs_spec_ctrl, hi32);
++=======
+ 	if (IS_ENABLED(CONFIG_KVM_INTEL)) {
+ 		BLANK();
+ 		OFFSET(VMX_spec_ctrl, vcpu_vmx, spec_ctrl);
+ 	}
++>>>>>>> 07853adc29a0 (KVM: VMX: Prevent RSB underflow before vmenter)
  }
diff --cc arch/x86/kernel/cpu/bugs.c
index 951579a17911,182f8b2e8a3c..000000000000
--- a/arch/x86/kernel/cpu/bugs.c
+++ b/arch/x86/kernel/cpu/bugs.c
@@@ -158,6 -195,10 +158,13 @@@ void __init check_bugs(void
  #endif
  }
  
++<<<<<<< HEAD
++=======
+ /*
+  * NOTE: This function is *only* called for SVM.  VMX spec_ctrl handling is
+  * done in vmenter.S.
+  */
++>>>>>>> 07853adc29a0 (KVM: VMX: Prevent RSB underflow before vmenter)
  void
  x86_virt_spec_ctrl(u64 guest_spec_ctrl, u64 guest_virt_spec_ctrl, bool setguest)
  {
diff --cc arch/x86/kvm/vmx/vmx.h
index b98c7e96697a,1e7f9453894b..000000000000
--- a/arch/x86/kvm/vmx/vmx.h
+++ b/arch/x86/kvm/vmx/vmx.h
@@@ -12,7 -12,8 +12,12 @@@
  #include "posted_intr.h"
  #include "vmcs.h"
  #include "vmx_ops.h"
++<<<<<<< HEAD
 +#include "cpuid.h"
++=======
+ #include "../cpuid.h"
+ #include "run_flags.h"
++>>>>>>> 07853adc29a0 (KVM: VMX: Prevent RSB underflow before vmenter)
  
  #define MSR_TYPE_R	1
  #define MSR_TYPE_W	2
* Unmerged path arch/x86/kernel/asm-offsets.c
* Unmerged path arch/x86/kernel/cpu/bugs.c
diff --git a/arch/x86/kvm/vmx/capabilities.h b/arch/x86/kvm/vmx/capabilities.h
index cfefd18b6287..7c4e0644b81c 100644
--- a/arch/x86/kvm/vmx/capabilities.h
+++ b/arch/x86/kvm/vmx/capabilities.h
@@ -4,8 +4,8 @@
 
 #include <asm/vmx.h>
 
-#include "lapic.h"
-#include "x86.h"
+#include "../lapic.h"
+#include "../x86.h"
 
 extern bool __read_mostly enable_vpid;
 extern bool __read_mostly flexpriority_enabled;
diff --git a/arch/x86/kvm/vmx/vmenter.S b/arch/x86/kvm/vmx/vmenter.S
index fd0a4aadb374..fe193320d065 100644
--- a/arch/x86/kvm/vmx/vmenter.S
+++ b/arch/x86/kvm/vmx/vmenter.S
@@ -1,9 +1,11 @@
 /* SPDX-License-Identifier: GPL-2.0 */
 #include <linux/linkage.h>
 #include <asm/asm.h>
+#include <asm/asm-offsets.h>
 #include <asm/bitsperlong.h>
 #include <asm/kvm_vcpu_regs.h>
 #include <asm/nospec-branch.h>
+#include <asm/percpu.h>
 #include <asm/segment.h>
 
 #define WORD_SIZE (BITS_PER_LONG / 8)
@@ -128,6 +130,33 @@ SYM_FUNC_START(__vmx_vcpu_run)
 	lea -WORD_SIZE(%_ASM_SP), %_ASM_ARG2
 	call vmx_update_host_rsp
 
+	ALTERNATIVE "jmp .Lspec_ctrl_done", "", X86_FEATURE_MSR_SPEC_CTRL
+
+	/*
+	 * SPEC_CTRL handling: if the guest's SPEC_CTRL value differs from the
+	 * host's, write the MSR.
+	 *
+	 * IMPORTANT: To avoid RSB underflow attacks and any other nastiness,
+	 * there must not be any returns or indirect branches between this code
+	 * and vmentry.
+	 */
+	mov 2*WORD_SIZE(%_ASM_SP), %_ASM_DI
+	movl VMX_spec_ctrl(%_ASM_DI), %edi
+	movl PER_CPU_VAR(x86_spec_ctrl_current), %esi
+	cmp %edi, %esi
+	je .Lspec_ctrl_done
+	mov $MSR_IA32_SPEC_CTRL, %ecx
+	xor %edx, %edx
+	mov %edi, %eax
+	wrmsr
+
+.Lspec_ctrl_done:
+
+	/*
+	 * Since vmentry is serializing on affected CPUs, there's no need for
+	 * an LFENCE to stop speculation from skipping the wrmsr.
+	 */
+
 	/* Load @regs to RAX. */
 	mov (%_ASM_SP), %_ASM_AX
 
diff --git a/arch/x86/kvm/vmx/vmx.c b/arch/x86/kvm/vmx/vmx.c
index 020468feb063..f9a5944eeabc 100644
--- a/arch/x86/kvm/vmx/vmx.c
+++ b/arch/x86/kvm/vmx/vmx.c
@@ -6876,14 +6876,6 @@ static fastpath_t vmx_vcpu_run(struct kvm_vcpu *vcpu)
 
 	kvm_wait_lapic_expire(vcpu);
 
-	/*
-	 * If this vCPU has touched SPEC_CTRL, restore the guest's value if
-	 * it's non-zero. Since vmentry is serialising on affected CPUs, there
-	 * is no need to worry about the conditional branch over the wrmsr
-	 * being speculatively taken.
-	 */
-	x86_spec_ctrl_set_guest(vmx->spec_ctrl, 0);
-
 	/* The actual VMENTER/EXIT is in the .noinstr.text section. */
 	vmx_vcpu_enter_exit(vcpu, vmx);
 
* Unmerged path arch/x86/kvm/vmx/vmx.h
diff --git a/arch/x86/kvm/vmx/vmx_ops.h b/arch/x86/kvm/vmx/vmx_ops.h
index 67f745250e50..7ec1a37fa073 100644
--- a/arch/x86/kvm/vmx/vmx_ops.h
+++ b/arch/x86/kvm/vmx/vmx_ops.h
@@ -8,7 +8,7 @@
 
 #include "evmcs.h"
 #include "vmcs.h"
-#include "x86.h"
+#include "../x86.h"
 
 asmlinkage void vmread_error(unsigned long field, bool fault);
 __attribute__((regparm(0))) void vmread_error_trampoline(unsigned long field,
