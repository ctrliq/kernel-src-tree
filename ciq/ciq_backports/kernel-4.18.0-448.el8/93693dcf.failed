ASoC: Intel: boards: rename RTL1019 compatible driver to rt1019p

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Yong Zhi <yong.zhi@intel.com>
commit 93693dcf2a4d7ab6a355f80c14653cd9c27a1422
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/93693dcf.failed

Use rt1019p for rt1015p.c compatible codec and reserve the name rt1019
for 10EC1019 matched driver in sof_realtek_common.

	Reviewed-by: Bard Liao <yung-chuan.liao@linux.intel.com>
	Signed-off-by: Yong Zhi <yong.zhi@intel.com>
	Signed-off-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
Link: https://lore.kernel.org/r/20220606204622.144424-3-pierre-louis.bossart@linux.intel.com
	Signed-off-by: Mark Brown <broonie@kernel.org>
(cherry picked from commit 93693dcf2a4d7ab6a355f80c14653cd9c27a1422)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	sound/soc/intel/boards/sof_realtek_common.c
#	sound/soc/intel/boards/sof_realtek_common.h
#	sound/soc/intel/boards/sof_rt5682.c
diff --cc sound/soc/intel/boards/sof_realtek_common.c
index 4cf131310ad3,b9643ca2e2f2..000000000000
--- a/sound/soc/intel/boards/sof_realtek_common.c
+++ b/sound/soc/intel/boards/sof_realtek_common.c
@@@ -354,3 -361,142 +354,145 @@@ void sof_rt1015_dai_link(struct snd_soc
  	if (fs == 100)
  		rt1015_ops.hw_params = rt1015_hw_params_pll_and_tdm;
  }
++<<<<<<< HEAD
++=======
+ EXPORT_SYMBOL_NS(sof_rt1015_dai_link, SND_SOC_INTEL_SOF_REALTEK_COMMON);
+ 
+ /*
+  * RT1308 audio amplifier
+  */
+ static const struct snd_kcontrol_new rt1308_kcontrols[] = {
+ 	SOC_DAPM_PIN_SWITCH("Speakers"),
+ };
+ 
+ static const struct snd_soc_dapm_widget rt1308_dapm_widgets[] = {
+ 	SND_SOC_DAPM_SPK("Speakers", NULL),
+ };
+ 
+ static const struct snd_soc_dapm_route rt1308_dapm_routes[] = {
+ 	/* speaker */
+ 	{"Speakers", NULL, "SPOL"},
+ 	{"Speakers", NULL, "SPOR"},
+ };
+ 
+ static struct snd_soc_dai_link_component rt1308_components[] = {
+ 	{
+ 		.name = RT1308_DEV0_NAME,
+ 		.dai_name = RT1308_CODEC_DAI,
+ 	}
+ };
+ 
+ static int rt1308_init(struct snd_soc_pcm_runtime *rtd)
+ {
+ 	struct snd_soc_card *card = rtd->card;
+ 	int ret;
+ 
+ 	ret = snd_soc_dapm_new_controls(&card->dapm, rt1308_dapm_widgets,
+ 					ARRAY_SIZE(rt1308_dapm_widgets));
+ 	if (ret) {
+ 		dev_err(rtd->dev, "fail to add dapm controls, ret %d\n", ret);
+ 		return ret;
+ 	}
+ 
+ 	ret = snd_soc_add_card_controls(card, rt1308_kcontrols,
+ 					ARRAY_SIZE(rt1308_kcontrols));
+ 	if (ret) {
+ 		dev_err(rtd->dev, "fail to add card controls, ret %d\n", ret);
+ 		return ret;
+ 	}
+ 
+ 	ret = snd_soc_dapm_add_routes(&card->dapm, rt1308_dapm_routes,
+ 				      ARRAY_SIZE(rt1308_dapm_routes));
+ 
+ 	if (ret)
+ 		dev_err(rtd->dev, "fail to add dapm routes, ret %d\n", ret);
+ 
+ 	return ret;
+ }
+ 
+ static int rt1308_hw_params(struct snd_pcm_substream *substream,
+ 			    struct snd_pcm_hw_params *params)
+ {
+ 	struct snd_soc_pcm_runtime *rtd = asoc_substream_to_rtd(substream);
+ 	struct snd_soc_card *card = rtd->card;
+ 	struct snd_soc_dai *codec_dai = asoc_rtd_to_codec(rtd, 0);
+ 	int clk_id, clk_freq, pll_out;
+ 	int ret;
+ 
+ 	clk_id = RT1308_PLL_S_MCLK;
+ 	/* get the tplg configured mclk. */
+ 	clk_freq = sof_dai_get_mclk(rtd);
+ 
+ 	pll_out = params_rate(params) * 512;
+ 
+ 	/* Set rt1308 pll */
+ 	ret = snd_soc_dai_set_pll(codec_dai, 0, clk_id, clk_freq, pll_out);
+ 	if (ret < 0) {
+ 		dev_err(card->dev, "Failed to set RT1308 PLL: %d\n", ret);
+ 		return ret;
+ 	}
+ 
+ 	/* Set rt1308 sysclk */
+ 	ret = snd_soc_dai_set_sysclk(codec_dai, RT1308_FS_SYS_S_PLL, pll_out,
+ 				     SND_SOC_CLOCK_IN);
+ 	if (ret < 0)
+ 		dev_err(card->dev, "Failed to set RT1308 SYSCLK: %d\n", ret);
+ 
+ 	return ret;
+ }
+ 
+ static const struct snd_soc_ops rt1308_ops = {
+ 	.hw_params = rt1308_hw_params,
+ };
+ 
+ void sof_rt1308_dai_link(struct snd_soc_dai_link *link)
+ {
+ 	link->codecs = rt1308_components;
+ 	link->num_codecs = ARRAY_SIZE(rt1308_components);
+ 	link->init = rt1308_init;
+ 	link->ops = &rt1308_ops;
+ }
+ EXPORT_SYMBOL_NS(sof_rt1308_dai_link, SND_SOC_INTEL_SOF_REALTEK_COMMON);
+ 
+ /*
+  * 2-amp Configuration for RT1019
+  */
+ 
+ static const struct snd_soc_dapm_route rt1019p_dapm_routes[] = {
+ 	/* speaker */
+ 	{ "Left Spk", NULL, "Speaker" },
+ 	{ "Right Spk", NULL, "Speaker" },
+ };
+ 
+ static struct snd_soc_dai_link_component rt1019p_components[] = {
+ 	{
+ 		.name = RT1019P_DEV0_NAME,
+ 		.dai_name = RT1019P_CODEC_DAI,
+ 	},
+ };
+ 
+ static int rt1019p_init(struct snd_soc_pcm_runtime *rtd)
+ {
+ 	struct snd_soc_card *card = rtd->card;
+ 	int ret;
+ 
+ 	ret = snd_soc_dapm_add_routes(&card->dapm, rt1019p_dapm_routes,
+ 				      ARRAY_SIZE(rt1019p_dapm_routes));
+ 	if (ret) {
+ 		dev_err(rtd->dev, "Speaker map addition failed: %d\n", ret);
+ 		return ret;
+ 	}
+ 	return ret;
+ }
+ 
+ void sof_rt1019p_dai_link(struct snd_soc_dai_link *link)
+ {
+ 	link->codecs = rt1019p_components;
+ 	link->num_codecs = ARRAY_SIZE(rt1019p_components);
+ 	link->init = rt1019p_init;
+ }
+ EXPORT_SYMBOL_NS(sof_rt1019p_dai_link, SND_SOC_INTEL_SOF_REALTEK_COMMON);
+ 
+ MODULE_DESCRIPTION("ASoC Intel SOF Realtek helpers");
+ MODULE_LICENSE("GPL");
++>>>>>>> 93693dcf2a4d (ASoC: Intel: boards: rename RTL1019 compatible driver to rt1019p)
diff --cc sound/soc/intel/boards/sof_realtek_common.h
index 228ac9c08430,778443421090..000000000000
--- a/sound/soc/intel/boards/sof_realtek_common.h
+++ b/sound/soc/intel/boards/sof_realtek_common.h
@@@ -35,4 -35,13 +35,16 @@@ void sof_rt1015p_codec_conf(struct snd_
  void sof_rt1015_dai_link(struct snd_soc_dai_link *link, unsigned int fs);
  void sof_rt1015_codec_conf(struct snd_soc_card *card);
  
++<<<<<<< HEAD
++=======
+ #define RT1308_CODEC_DAI	"rt1308-aif"
+ #define RT1308_DEV0_NAME	"i2c-10EC1308:00"
+ void sof_rt1308_dai_link(struct snd_soc_dai_link *link);
+ 
+ #define RT1019P_CODEC_DAI	"HiFi"
+ #define RT1019P_DEV0_NAME	"RTL1019:00"
+ 
+ void sof_rt1019p_dai_link(struct snd_soc_dai_link *link);
+ 
++>>>>>>> 93693dcf2a4d (ASoC: Intel: boards: rename RTL1019 compatible driver to rt1019p)
  #endif /* __SOF_REALTEK_COMMON_H */
diff --cc sound/soc/intel/boards/sof_rt5682.c
index 65b407c294a8,f28dae64587e..000000000000
--- a/sound/soc/intel/boards/sof_rt5682.c
+++ b/sound/soc/intel/boards/sof_rt5682.c
@@@ -734,6 -734,8 +734,11 @@@ static struct snd_soc_dai_link *sof_car
  					SOF_RT1015_SPEAKER_AMP_100FS) ? 100 : 64);
  		} else if (sof_rt5682_quirk & SOF_RT1015P_SPEAKER_AMP_PRESENT) {
  			sof_rt1015p_dai_link(&links[id]);
++<<<<<<< HEAD
++=======
+ 		} else if (sof_rt5682_quirk & SOF_RT1019_SPEAKER_AMP_PRESENT) {
+ 			sof_rt1019p_dai_link(&links[id]);
++>>>>>>> 93693dcf2a4d (ASoC: Intel: boards: rename RTL1019 compatible driver to rt1019p)
  		} else if (sof_rt5682_quirk &
  				SOF_MAX98373_SPEAKER_AMP_PRESENT) {
  			links[id].codecs = max_98373_components;
* Unmerged path sound/soc/intel/boards/sof_realtek_common.c
* Unmerged path sound/soc/intel/boards/sof_realtek_common.h
* Unmerged path sound/soc/intel/boards/sof_rt5682.c
