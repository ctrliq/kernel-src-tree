net: Remove the obsolte u64_stats_fetch_*_irq() users (drivers).

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Thomas Gleixner <tglx@linutronix.de>
commit 068c38ad88ccb09e5e966d4db5cedab0e02b3b95
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/068c38ad.failed

Now that the 32bit UP oddity is gone and 32bit uses always a sequence
count, there is no need for the fetch_irq() variants anymore.

Convert to the regular interface.

	Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
	Signed-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
	Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>
	Signed-off-by: Jakub Kicinski <kuba@kernel.org>
(cherry picked from commit 068c38ad88ccb09e5e966d4db5cedab0e02b3b95)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/aquantia/atlantic/aq_ring.c
#	drivers/net/ethernet/asix/ax88796c_main.c
#	drivers/net/ethernet/fungible/funeth/funeth_txrx.h
#	drivers/net/ethernet/hisilicon/hns3/hns3_enet.c
#	drivers/net/ethernet/huawei/hinic/hinic_rx.c
#	drivers/net/ethernet/huawei/hinic/hinic_tx.c
#	drivers/net/ethernet/marvell/mvneta.c
#	drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c
#	drivers/net/ethernet/mediatek/mtk_eth_soc.c
#	drivers/net/ethernet/nvidia/forcedeth.c
#	drivers/net/ethernet/qualcomm/rmnet/rmnet_vnd.c
#	drivers/net/ethernet/ti/am65-cpsw-nuss.c
#	drivers/net/ethernet/xilinx/xilinx_axienet_main.c
#	drivers/net/ifb.c
#	drivers/net/ipvlan/ipvlan_main.c
#	drivers/net/loopback.c
#	drivers/net/macvlan.c
#	drivers/net/team/team.c
#	drivers/net/virtio_net.c
#	drivers/net/vxlan/vxlan_vnifilter.c
#	drivers/net/wwan/mhi_wwan_mbim.c
diff --cc drivers/net/ethernet/aquantia/atlantic/aq_ring.c
index 4f913658eea4,1e8d902e1c8e..000000000000
--- a/drivers/net/ethernet/aquantia/atlantic/aq_ring.c
+++ b/drivers/net/ethernet/aquantia/atlantic/aq_ring.c
@@@ -613,7 -942,16 +613,20 @@@ unsigned int aq_ring_fill_stats_data(st
  			data[++count] = self->stats.rx.alloc_fails;
  			data[++count] = self->stats.rx.skb_alloc_fails;
  			data[++count] = self->stats.rx.polls;
++<<<<<<< HEAD
 +		} while (u64_stats_fetch_retry_irq(&self->stats.rx.syncp, start));
++=======
+ 			data[++count] = self->stats.rx.pg_flips;
+ 			data[++count] = self->stats.rx.pg_reuses;
+ 			data[++count] = self->stats.rx.pg_losts;
+ 			data[++count] = self->stats.rx.xdp_aborted;
+ 			data[++count] = self->stats.rx.xdp_drop;
+ 			data[++count] = self->stats.rx.xdp_pass;
+ 			data[++count] = self->stats.rx.xdp_tx;
+ 			data[++count] = self->stats.rx.xdp_invalid;
+ 			data[++count] = self->stats.rx.xdp_redirect;
+ 		} while (u64_stats_fetch_retry(&self->stats.rx.syncp, start));
++>>>>>>> 068c38ad88cc (net: Remove the obsolte u64_stats_fetch_*_irq() users (drivers).)
  	} else {
  		/* This data should mimic aq_ethtool_queue_tx_stat_names structure */
  		do {
diff --cc drivers/net/ethernet/hisilicon/hns3/hns3_enet.c
index bacc04a8bb9a,813d5b3d7b58..000000000000
--- a/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c
+++ b/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c
@@@ -1324,6 -2449,80 +1324,83 @@@ static int hns3_nic_set_features(struc
  	return 0;
  }
  
++<<<<<<< HEAD
++=======
+ static netdev_features_t hns3_features_check(struct sk_buff *skb,
+ 					     struct net_device *dev,
+ 					     netdev_features_t features)
+ {
+ #define HNS3_MAX_HDR_LEN	480U
+ #define HNS3_MAX_L4_HDR_LEN	60U
+ 
+ 	size_t len;
+ 
+ 	if (skb->ip_summed != CHECKSUM_PARTIAL)
+ 		return features;
+ 
+ 	if (skb->encapsulation)
+ 		len = skb_inner_transport_header(skb) - skb->data;
+ 	else
+ 		len = skb_transport_header(skb) - skb->data;
+ 
+ 	/* Assume L4 is 60 byte as TCP is the only protocol with a
+ 	 * a flexible value, and it's max len is 60 bytes.
+ 	 */
+ 	len += HNS3_MAX_L4_HDR_LEN;
+ 
+ 	/* Hardware only supports checksum on the skb with a max header
+ 	 * len of 480 bytes.
+ 	 */
+ 	if (len > HNS3_MAX_HDR_LEN)
+ 		features &= ~(NETIF_F_CSUM_MASK | NETIF_F_GSO_MASK);
+ 
+ 	return features;
+ }
+ 
+ static void hns3_fetch_stats(struct rtnl_link_stats64 *stats,
+ 			     struct hns3_enet_ring *ring, bool is_tx)
+ {
+ 	unsigned int start;
+ 
+ 	do {
+ 		start = u64_stats_fetch_begin(&ring->syncp);
+ 		if (is_tx) {
+ 			stats->tx_bytes += ring->stats.tx_bytes;
+ 			stats->tx_packets += ring->stats.tx_pkts;
+ 			stats->tx_dropped += ring->stats.sw_err_cnt;
+ 			stats->tx_dropped += ring->stats.tx_vlan_err;
+ 			stats->tx_dropped += ring->stats.tx_l4_proto_err;
+ 			stats->tx_dropped += ring->stats.tx_l2l3l4_err;
+ 			stats->tx_dropped += ring->stats.tx_tso_err;
+ 			stats->tx_dropped += ring->stats.over_max_recursion;
+ 			stats->tx_dropped += ring->stats.hw_limitation;
+ 			stats->tx_dropped += ring->stats.copy_bits_err;
+ 			stats->tx_dropped += ring->stats.skb2sgl_err;
+ 			stats->tx_dropped += ring->stats.map_sg_err;
+ 			stats->tx_errors += ring->stats.sw_err_cnt;
+ 			stats->tx_errors += ring->stats.tx_vlan_err;
+ 			stats->tx_errors += ring->stats.tx_l4_proto_err;
+ 			stats->tx_errors += ring->stats.tx_l2l3l4_err;
+ 			stats->tx_errors += ring->stats.tx_tso_err;
+ 			stats->tx_errors += ring->stats.over_max_recursion;
+ 			stats->tx_errors += ring->stats.hw_limitation;
+ 			stats->tx_errors += ring->stats.copy_bits_err;
+ 			stats->tx_errors += ring->stats.skb2sgl_err;
+ 			stats->tx_errors += ring->stats.map_sg_err;
+ 		} else {
+ 			stats->rx_bytes += ring->stats.rx_bytes;
+ 			stats->rx_packets += ring->stats.rx_pkts;
+ 			stats->rx_dropped += ring->stats.l2_err;
+ 			stats->rx_errors += ring->stats.l2_err;
+ 			stats->rx_errors += ring->stats.l3l4_csum_err;
+ 			stats->rx_crc_errors += ring->stats.l2_err;
+ 			stats->multicast += ring->stats.rx_multicast;
+ 			stats->rx_length_errors += ring->stats.err_pkt_len;
+ 		}
+ 	} while (u64_stats_fetch_retry(&ring->syncp, start));
+ }
+ 
++>>>>>>> 068c38ad88cc (net: Remove the obsolte u64_stats_fetch_*_irq() users (drivers).)
  static void hns3_nic_get_stats64(struct net_device *netdev,
  				 struct rtnl_link_stats64 *stats)
  {
diff --cc drivers/net/ethernet/huawei/hinic/hinic_rx.c
index b6d218768ec1,ceec8be2a73b..000000000000
--- a/drivers/net/ethernet/huawei/hinic/hinic_rx.c
+++ b/drivers/net/ethernet/huawei/hinic/hinic_rx.c
@@@ -74,8 -77,11 +74,16 @@@ void hinic_rxq_get_stats(struct hinic_r
  		start = u64_stats_fetch_begin(&rxq_stats->syncp);
  		stats->pkts = rxq_stats->pkts;
  		stats->bytes = rxq_stats->bytes;
++<<<<<<< HEAD
 +	} while (u64_stats_fetch_retry(&rxq_stats->syncp, start));
 +	u64_stats_update_end(&stats->syncp);
++=======
+ 		stats->errors = rxq_stats->csum_errors +
+ 				rxq_stats->other_errors;
+ 		stats->csum_errors = rxq_stats->csum_errors;
+ 		stats->other_errors = rxq_stats->other_errors;
+ 	} while (u64_stats_fetch_retry(&rxq_stats->syncp, start));
++>>>>>>> 068c38ad88cc (net: Remove the obsolte u64_stats_fetch_*_irq() users (drivers).)
  }
  
  /**
diff --cc drivers/net/ethernet/huawei/hinic/hinic_tx.c
index 0fbe8046824b,ad47ac51a139..000000000000
--- a/drivers/net/ethernet/huawei/hinic/hinic_tx.c
+++ b/drivers/net/ethernet/huawei/hinic/hinic_tx.c
@@@ -113,8 -105,8 +113,13 @@@ void hinic_txq_get_stats(struct hinic_t
  		stats->tx_busy = txq_stats->tx_busy;
  		stats->tx_wake = txq_stats->tx_wake;
  		stats->tx_dropped = txq_stats->tx_dropped;
++<<<<<<< HEAD
 +	} while (u64_stats_fetch_retry(&txq_stats->syncp, start));
 +	u64_stats_update_end(&stats->syncp);
++=======
+ 		stats->big_frags_pkts = txq_stats->big_frags_pkts;
+ 	} while (u64_stats_fetch_retry(&txq_stats->syncp, start));
++>>>>>>> 068c38ad88cc (net: Remove the obsolte u64_stats_fetch_*_irq() users (drivers).)
  }
  
  /**
diff --cc drivers/net/ethernet/marvell/mvneta.c
index 6038965452d4,81dc57a69fd0..000000000000
--- a/drivers/net/ethernet/marvell/mvneta.c
+++ b/drivers/net/ethernet/marvell/mvneta.c
@@@ -691,12 -813,14 +691,23 @@@ mvneta_get_stats64(struct net_device *d
  
  		cpu_stats = per_cpu_ptr(pp->stats, cpu);
  		do {
++<<<<<<< HEAD
 +			start = u64_stats_fetch_begin_irq(&cpu_stats->syncp);
 +			rx_packets = cpu_stats->rx_packets;
 +			rx_bytes   = cpu_stats->rx_bytes;
 +			tx_packets = cpu_stats->tx_packets;
 +			tx_bytes   = cpu_stats->tx_bytes;
 +		} while (u64_stats_fetch_retry_irq(&cpu_stats->syncp, start));
++=======
+ 			start = u64_stats_fetch_begin(&cpu_stats->syncp);
+ 			rx_packets = cpu_stats->es.ps.rx_packets;
+ 			rx_bytes   = cpu_stats->es.ps.rx_bytes;
+ 			rx_dropped = cpu_stats->rx_dropped;
+ 			rx_errors  = cpu_stats->rx_errors;
+ 			tx_packets = cpu_stats->es.ps.tx_packets;
+ 			tx_bytes   = cpu_stats->es.ps.tx_bytes;
+ 		} while (u64_stats_fetch_retry(&cpu_stats->syncp, start));
++>>>>>>> 068c38ad88cc (net: Remove the obsolte u64_stats_fetch_*_irq() users (drivers).)
  
  		stats->rx_packets += rx_packets;
  		stats->rx_bytes   += rx_bytes;
@@@ -3951,6 -4735,54 +3962,57 @@@ static void mvneta_ethtool_get_strings(
  		for (i = 0; i < ARRAY_SIZE(mvneta_statistics); i++)
  			memcpy(data + i * ETH_GSTRING_LEN,
  			       mvneta_statistics[i].name, ETH_GSTRING_LEN);
++<<<<<<< HEAD
++=======
+ 
+ 		data += ETH_GSTRING_LEN * ARRAY_SIZE(mvneta_statistics);
+ 		page_pool_ethtool_stats_get_strings(data);
+ 	}
+ }
+ 
+ static void
+ mvneta_ethtool_update_pcpu_stats(struct mvneta_port *pp,
+ 				 struct mvneta_ethtool_stats *es)
+ {
+ 	unsigned int start;
+ 	int cpu;
+ 
+ 	for_each_possible_cpu(cpu) {
+ 		struct mvneta_pcpu_stats *stats;
+ 		u64 skb_alloc_error;
+ 		u64 refill_error;
+ 		u64 xdp_redirect;
+ 		u64 xdp_xmit_err;
+ 		u64 xdp_tx_err;
+ 		u64 xdp_pass;
+ 		u64 xdp_drop;
+ 		u64 xdp_xmit;
+ 		u64 xdp_tx;
+ 
+ 		stats = per_cpu_ptr(pp->stats, cpu);
+ 		do {
+ 			start = u64_stats_fetch_begin(&stats->syncp);
+ 			skb_alloc_error = stats->es.skb_alloc_error;
+ 			refill_error = stats->es.refill_error;
+ 			xdp_redirect = stats->es.ps.xdp_redirect;
+ 			xdp_pass = stats->es.ps.xdp_pass;
+ 			xdp_drop = stats->es.ps.xdp_drop;
+ 			xdp_xmit = stats->es.ps.xdp_xmit;
+ 			xdp_xmit_err = stats->es.ps.xdp_xmit_err;
+ 			xdp_tx = stats->es.ps.xdp_tx;
+ 			xdp_tx_err = stats->es.ps.xdp_tx_err;
+ 		} while (u64_stats_fetch_retry(&stats->syncp, start));
+ 
+ 		es->skb_alloc_error += skb_alloc_error;
+ 		es->refill_error += refill_error;
+ 		es->ps.xdp_redirect += xdp_redirect;
+ 		es->ps.xdp_pass += xdp_pass;
+ 		es->ps.xdp_drop += xdp_drop;
+ 		es->ps.xdp_xmit += xdp_xmit;
+ 		es->ps.xdp_xmit_err += xdp_xmit_err;
+ 		es->ps.xdp_tx += xdp_tx;
+ 		es->ps.xdp_tx_err += xdp_tx_err;
++>>>>>>> 068c38ad88cc (net: Remove the obsolte u64_stats_fetch_*_irq() users (drivers).)
  	}
  }
  
diff --cc drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c
index e63128b6b7c2,116e53172072..000000000000
--- a/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c
+++ b/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c
@@@ -1309,12 -1907,188 +1309,154 @@@ static const struct mvpp2_ethtool_count
  static void mvpp2_ethtool_get_strings(struct net_device *netdev, u32 sset,
  				      u8 *data)
  {
 -	struct mvpp2_port *port = netdev_priv(netdev);
 -	int i, q;
 +	if (sset == ETH_SS_STATS) {
 +		int i;
  
++<<<<<<< HEAD
 +		for (i = 0; i < ARRAY_SIZE(mvpp2_ethtool_regs); i++)
 +			memcpy(data + i * ETH_GSTRING_LEN,
 +			       &mvpp2_ethtool_regs[i].string, ETH_GSTRING_LEN);
++=======
+ 	if (sset != ETH_SS_STATS)
+ 		return;
+ 
+ 	for (i = 0; i < ARRAY_SIZE(mvpp2_ethtool_mib_regs); i++) {
+ 		strscpy(data, mvpp2_ethtool_mib_regs[i].string,
+ 			ETH_GSTRING_LEN);
+ 		data += ETH_GSTRING_LEN;
+ 	}
+ 
+ 	for (i = 0; i < ARRAY_SIZE(mvpp2_ethtool_port_regs); i++) {
+ 		strscpy(data, mvpp2_ethtool_port_regs[i].string,
+ 			ETH_GSTRING_LEN);
+ 		data += ETH_GSTRING_LEN;
+ 	}
+ 
+ 	for (q = 0; q < port->ntxqs; q++) {
+ 		for (i = 0; i < ARRAY_SIZE(mvpp2_ethtool_txq_regs); i++) {
+ 			snprintf(data, ETH_GSTRING_LEN,
+ 				 mvpp2_ethtool_txq_regs[i].string, q);
+ 			data += ETH_GSTRING_LEN;
+ 		}
+ 	}
+ 
+ 	for (q = 0; q < port->nrxqs; q++) {
+ 		for (i = 0; i < ARRAY_SIZE(mvpp2_ethtool_rxq_regs); i++) {
+ 			snprintf(data, ETH_GSTRING_LEN,
+ 				 mvpp2_ethtool_rxq_regs[i].string,
+ 				 q);
+ 			data += ETH_GSTRING_LEN;
+ 		}
+ 	}
+ 
+ 	for (i = 0; i < ARRAY_SIZE(mvpp2_ethtool_xdp); i++) {
+ 		strscpy(data, mvpp2_ethtool_xdp[i].string,
+ 			ETH_GSTRING_LEN);
+ 		data += ETH_GSTRING_LEN;
+ 	}
+ }
+ 
+ static void
+ mvpp2_get_xdp_stats(struct mvpp2_port *port, struct mvpp2_pcpu_stats *xdp_stats)
+ {
+ 	unsigned int start;
+ 	unsigned int cpu;
+ 
+ 	/* Gather XDP Statistics */
+ 	for_each_possible_cpu(cpu) {
+ 		struct mvpp2_pcpu_stats *cpu_stats;
+ 		u64	xdp_redirect;
+ 		u64	xdp_pass;
+ 		u64	xdp_drop;
+ 		u64	xdp_xmit;
+ 		u64	xdp_xmit_err;
+ 		u64	xdp_tx;
+ 		u64	xdp_tx_err;
+ 
+ 		cpu_stats = per_cpu_ptr(port->stats, cpu);
+ 		do {
+ 			start = u64_stats_fetch_begin(&cpu_stats->syncp);
+ 			xdp_redirect = cpu_stats->xdp_redirect;
+ 			xdp_pass   = cpu_stats->xdp_pass;
+ 			xdp_drop = cpu_stats->xdp_drop;
+ 			xdp_xmit   = cpu_stats->xdp_xmit;
+ 			xdp_xmit_err   = cpu_stats->xdp_xmit_err;
+ 			xdp_tx   = cpu_stats->xdp_tx;
+ 			xdp_tx_err   = cpu_stats->xdp_tx_err;
+ 		} while (u64_stats_fetch_retry(&cpu_stats->syncp, start));
+ 
+ 		xdp_stats->xdp_redirect += xdp_redirect;
+ 		xdp_stats->xdp_pass   += xdp_pass;
+ 		xdp_stats->xdp_drop += xdp_drop;
+ 		xdp_stats->xdp_xmit   += xdp_xmit;
+ 		xdp_stats->xdp_xmit_err   += xdp_xmit_err;
+ 		xdp_stats->xdp_tx   += xdp_tx;
+ 		xdp_stats->xdp_tx_err   += xdp_tx_err;
+ 	}
+ }
+ 
+ static void mvpp2_read_stats(struct mvpp2_port *port)
+ {
+ 	struct mvpp2_pcpu_stats xdp_stats = {};
+ 	const struct mvpp2_ethtool_counter *s;
+ 	u64 *pstats;
+ 	int i, q;
+ 
+ 	pstats = port->ethtool_stats;
+ 
+ 	for (i = 0; i < ARRAY_SIZE(mvpp2_ethtool_mib_regs); i++)
+ 		*pstats++ += mvpp2_read_count(port, &mvpp2_ethtool_mib_regs[i]);
+ 
+ 	for (i = 0; i < ARRAY_SIZE(mvpp2_ethtool_port_regs); i++)
+ 		*pstats++ += mvpp2_read(port->priv,
+ 					mvpp2_ethtool_port_regs[i].offset +
+ 					4 * port->id);
+ 
+ 	for (q = 0; q < port->ntxqs; q++)
+ 		for (i = 0; i < ARRAY_SIZE(mvpp2_ethtool_txq_regs); i++)
+ 			*pstats++ += mvpp2_read_index(port->priv,
+ 						      MVPP22_CTRS_TX_CTR(port->id, q),
+ 						      mvpp2_ethtool_txq_regs[i].offset);
+ 
+ 	/* Rxqs are numbered from 0 from the user standpoint, but not from the
+ 	 * driver's. We need to add the  port->first_rxq offset.
+ 	 */
+ 	for (q = 0; q < port->nrxqs; q++)
+ 		for (i = 0; i < ARRAY_SIZE(mvpp2_ethtool_rxq_regs); i++)
+ 			*pstats++ += mvpp2_read_index(port->priv,
+ 						      port->first_rxq + q,
+ 						      mvpp2_ethtool_rxq_regs[i].offset);
+ 
+ 	/* Gather XDP Statistics */
+ 	mvpp2_get_xdp_stats(port, &xdp_stats);
+ 
+ 	for (i = 0, s = mvpp2_ethtool_xdp;
+ 		 s < mvpp2_ethtool_xdp + ARRAY_SIZE(mvpp2_ethtool_xdp);
+ 	     s++, i++) {
+ 		switch (s->offset) {
+ 		case ETHTOOL_XDP_REDIRECT:
+ 			*pstats++ = xdp_stats.xdp_redirect;
+ 			break;
+ 		case ETHTOOL_XDP_PASS:
+ 			*pstats++ = xdp_stats.xdp_pass;
+ 			break;
+ 		case ETHTOOL_XDP_DROP:
+ 			*pstats++ = xdp_stats.xdp_drop;
+ 			break;
+ 		case ETHTOOL_XDP_TX:
+ 			*pstats++ = xdp_stats.xdp_tx;
+ 			break;
+ 		case ETHTOOL_XDP_TX_ERR:
+ 			*pstats++ = xdp_stats.xdp_tx_err;
+ 			break;
+ 		case ETHTOOL_XDP_XMIT:
+ 			*pstats++ = xdp_stats.xdp_xmit;
+ 			break;
+ 		case ETHTOOL_XDP_XMIT_ERR:
+ 			*pstats++ = xdp_stats.xdp_xmit_err;
+ 			break;
+ 		}
++>>>>>>> 068c38ad88cc (net: Remove the obsolte u64_stats_fetch_*_irq() users (drivers).)
  	}
  }
  
diff --cc drivers/net/ethernet/mediatek/mtk_eth_soc.c
index 3e2b333879e7,789268b15106..000000000000
--- a/drivers/net/ethernet/mediatek/mtk_eth_soc.c
+++ b/drivers/net/ethernet/mediatek/mtk_eth_soc.c
@@@ -2290,7 -3688,9 +2290,13 @@@ static void mtk_get_ethtool_stats(struc
  
  		for (i = 0; i < ARRAY_SIZE(mtk_ethtool_stats); i++)
  			*data_dst++ = *(data_src + mtk_ethtool_stats[i].offset);
++<<<<<<< HEAD
 +	} while (u64_stats_fetch_retry_irq(&hwstats->syncp, start));
++=======
+ 		if (mtk_page_pool_enabled(mac->hw))
+ 			mtk_ethtool_pp_stats(mac->hw, data_dst);
+ 	} while (u64_stats_fetch_retry(&hwstats->syncp, start));
++>>>>>>> 068c38ad88cc (net: Remove the obsolte u64_stats_fetch_*_irq() users (drivers).)
  }
  
  static int mtk_get_rxnfc(struct net_device *dev, struct ethtool_rxnfc *cmd,
diff --cc drivers/net/ethernet/nvidia/forcedeth.c
index 0e4f9e8c5826,0605d1ee490d..000000000000
--- a/drivers/net/ethernet/nvidia/forcedeth.c
+++ b/drivers/net/ethernet/nvidia/forcedeth.c
@@@ -1733,6 -1725,39 +1733,42 @@@ static void nv_update_stats(struct net_
  	}
  }
  
++<<<<<<< HEAD
++=======
+ static void nv_get_stats(int cpu, struct fe_priv *np,
+ 			 struct rtnl_link_stats64 *storage)
+ {
+ 	struct nv_txrx_stats *src = per_cpu_ptr(np->txrx_stats, cpu);
+ 	unsigned int syncp_start;
+ 	u64 rx_packets, rx_bytes, rx_dropped, rx_missed_errors;
+ 	u64 tx_packets, tx_bytes, tx_dropped;
+ 
+ 	do {
+ 		syncp_start = u64_stats_fetch_begin(&np->swstats_rx_syncp);
+ 		rx_packets       = src->stat_rx_packets;
+ 		rx_bytes         = src->stat_rx_bytes;
+ 		rx_dropped       = src->stat_rx_dropped;
+ 		rx_missed_errors = src->stat_rx_missed_errors;
+ 	} while (u64_stats_fetch_retry(&np->swstats_rx_syncp, syncp_start));
+ 
+ 	storage->rx_packets       += rx_packets;
+ 	storage->rx_bytes         += rx_bytes;
+ 	storage->rx_dropped       += rx_dropped;
+ 	storage->rx_missed_errors += rx_missed_errors;
+ 
+ 	do {
+ 		syncp_start = u64_stats_fetch_begin(&np->swstats_tx_syncp);
+ 		tx_packets  = src->stat_tx_packets;
+ 		tx_bytes    = src->stat_tx_bytes;
+ 		tx_dropped  = src->stat_tx_dropped;
+ 	} while (u64_stats_fetch_retry(&np->swstats_tx_syncp, syncp_start));
+ 
+ 	storage->tx_packets += tx_packets;
+ 	storage->tx_bytes   += tx_bytes;
+ 	storage->tx_dropped += tx_dropped;
+ }
+ 
++>>>>>>> 068c38ad88cc (net: Remove the obsolte u64_stats_fetch_*_irq() users (drivers).)
  /*
   * nv_get_stats64: dev->ndo_get_stats64 function
   * Get latest stats value from the nic.
diff --cc drivers/net/ethernet/qualcomm/rmnet/rmnet_vnd.c
index b9a7548ec6a0,3f5e6572d20e..000000000000
--- a/drivers/net/ethernet/qualcomm/rmnet/rmnet_vnd.c
+++ b/drivers/net/ethernet/qualcomm/rmnet/rmnet_vnd.c
@@@ -124,14 -135,15 +124,20 @@@ static void rmnet_get_stats64(struct ne
  		pcpu_ptr = per_cpu_ptr(priv->pcpu_stats, cpu);
  
  		do {
++<<<<<<< HEAD
 +			start = u64_stats_fetch_begin_irq(&pcpu_ptr->syncp);
 +			total_stats.rx_pkts += pcpu_ptr->stats.rx_pkts;
 +			total_stats.rx_bytes += pcpu_ptr->stats.rx_bytes;
 +			total_stats.tx_pkts += pcpu_ptr->stats.tx_pkts;
 +			total_stats.tx_bytes += pcpu_ptr->stats.tx_bytes;
 +		} while (u64_stats_fetch_retry_irq(&pcpu_ptr->syncp, start));
++=======
+ 			start = u64_stats_fetch_begin(&pcpu_ptr->syncp);
+ 			snapshot = pcpu_ptr->stats;	/* struct assignment */
+ 		} while (u64_stats_fetch_retry(&pcpu_ptr->syncp, start));
++>>>>>>> 068c38ad88cc (net: Remove the obsolte u64_stats_fetch_*_irq() users (drivers).)
  
 -		total_stats.rx_pkts += snapshot.rx_pkts;
 -		total_stats.rx_bytes += snapshot.rx_bytes;
 -		total_stats.tx_pkts += snapshot.tx_pkts;
 -		total_stats.tx_bytes += snapshot.tx_bytes;
 -		total_stats.tx_drops += snapshot.tx_drops;
 +		total_stats.tx_drops += pcpu_ptr->stats.tx_drops;
  	}
  
  	s->rx_packets = total_stats.rx_pkts;
diff --cc drivers/net/ethernet/xilinx/xilinx_axienet_main.c
index 01416fbdb4f0,441e1058104f..000000000000
--- a/drivers/net/ethernet/xilinx/xilinx_axienet_main.c
+++ b/drivers/net/ethernet/xilinx/xilinx_axienet_main.c
@@@ -1053,6 -1286,37 +1053,40 @@@ static void axienet_poll_controller(str
  }
  #endif
  
++<<<<<<< HEAD
++=======
+ static int axienet_ioctl(struct net_device *dev, struct ifreq *rq, int cmd)
+ {
+ 	struct axienet_local *lp = netdev_priv(dev);
+ 
+ 	if (!netif_running(dev))
+ 		return -EINVAL;
+ 
+ 	return phylink_mii_ioctl(lp->phylink, rq, cmd);
+ }
+ 
+ static void
+ axienet_get_stats64(struct net_device *dev, struct rtnl_link_stats64 *stats)
+ {
+ 	struct axienet_local *lp = netdev_priv(dev);
+ 	unsigned int start;
+ 
+ 	netdev_stats_to_stats64(stats, &dev->stats);
+ 
+ 	do {
+ 		start = u64_stats_fetch_begin(&lp->rx_stat_sync);
+ 		stats->rx_packets = u64_stats_read(&lp->rx_packets);
+ 		stats->rx_bytes = u64_stats_read(&lp->rx_bytes);
+ 	} while (u64_stats_fetch_retry(&lp->rx_stat_sync, start));
+ 
+ 	do {
+ 		start = u64_stats_fetch_begin(&lp->tx_stat_sync);
+ 		stats->tx_packets = u64_stats_read(&lp->tx_packets);
+ 		stats->tx_bytes = u64_stats_read(&lp->tx_bytes);
+ 	} while (u64_stats_fetch_retry(&lp->tx_stat_sync, start));
+ }
+ 
++>>>>>>> 068c38ad88cc (net: Remove the obsolte u64_stats_fetch_*_irq() users (drivers).)
  static const struct net_device_ops axienet_netdev_ops = {
  	.ndo_open = axienet_open,
  	.ndo_stop = axienet_stop,
diff --cc drivers/net/ifb.c
index 5241d0d80576,78253ad57b2e..000000000000
--- a/drivers/net/ifb.c
+++ b/drivers/net/ifb.c
@@@ -137,18 -162,18 +137,32 @@@ static void ifb_stats64(struct net_devi
  
  	for (i = 0; i < dev->num_tx_queues; i++,txp++) {
  		do {
++<<<<<<< HEAD
 +			start = u64_stats_fetch_begin_irq(&txp->rsync);
 +			packets = txp->rx_packets;
 +			bytes = txp->rx_bytes;
 +		} while (u64_stats_fetch_retry_irq(&txp->rsync, start));
++=======
+ 			start = u64_stats_fetch_begin(&txp->rx_stats.sync);
+ 			packets = txp->rx_stats.packets;
+ 			bytes = txp->rx_stats.bytes;
+ 		} while (u64_stats_fetch_retry(&txp->rx_stats.sync, start));
++>>>>>>> 068c38ad88cc (net: Remove the obsolte u64_stats_fetch_*_irq() users (drivers).)
  		stats->rx_packets += packets;
  		stats->rx_bytes += bytes;
  
  		do {
++<<<<<<< HEAD
 +			start = u64_stats_fetch_begin_irq(&txp->tsync);
 +			packets = txp->tx_packets;
 +			bytes = txp->tx_bytes;
 +		} while (u64_stats_fetch_retry_irq(&txp->tsync, start));
++=======
+ 			start = u64_stats_fetch_begin(&txp->tx_stats.sync);
+ 			packets = txp->tx_stats.packets;
+ 			bytes = txp->tx_stats.bytes;
+ 		} while (u64_stats_fetch_retry(&txp->tx_stats.sync, start));
++>>>>>>> 068c38ad88cc (net: Remove the obsolte u64_stats_fetch_*_irq() users (drivers).)
  		stats->tx_packets += packets;
  		stats->tx_bytes += bytes;
  	}
@@@ -180,6 -204,75 +194,78 @@@ static int ifb_dev_init(struct net_devi
  	return 0;
  }
  
++<<<<<<< HEAD
++=======
+ static void ifb_get_strings(struct net_device *dev, u32 stringset, u8 *buf)
+ {
+ 	u8 *p = buf;
+ 	int i, j;
+ 
+ 	switch (stringset) {
+ 	case ETH_SS_STATS:
+ 		for (i = 0; i < dev->real_num_rx_queues; i++)
+ 			for (j = 0; j < IFB_Q_STATS_LEN; j++)
+ 				ethtool_sprintf(&p, "rx_queue_%u_%.18s",
+ 						i, ifb_q_stats_desc[j].desc);
+ 
+ 		for (i = 0; i < dev->real_num_tx_queues; i++)
+ 			for (j = 0; j < IFB_Q_STATS_LEN; j++)
+ 				ethtool_sprintf(&p, "tx_queue_%u_%.18s",
+ 						i, ifb_q_stats_desc[j].desc);
+ 
+ 		break;
+ 	}
+ }
+ 
+ static int ifb_get_sset_count(struct net_device *dev, int sset)
+ {
+ 	switch (sset) {
+ 	case ETH_SS_STATS:
+ 		return IFB_Q_STATS_LEN * (dev->real_num_rx_queues +
+ 					  dev->real_num_tx_queues);
+ 	default:
+ 		return -EOPNOTSUPP;
+ 	}
+ }
+ 
+ static void ifb_fill_stats_data(u64 **data,
+ 				struct ifb_q_stats *q_stats)
+ {
+ 	void *stats_base = (void *)q_stats;
+ 	unsigned int start;
+ 	size_t offset;
+ 	int j;
+ 
+ 	do {
+ 		start = u64_stats_fetch_begin(&q_stats->sync);
+ 		for (j = 0; j < IFB_Q_STATS_LEN; j++) {
+ 			offset = ifb_q_stats_desc[j].offset;
+ 			(*data)[j] = *(u64 *)(stats_base + offset);
+ 		}
+ 	} while (u64_stats_fetch_retry(&q_stats->sync, start));
+ 
+ 	*data += IFB_Q_STATS_LEN;
+ }
+ 
+ static void ifb_get_ethtool_stats(struct net_device *dev,
+ 				  struct ethtool_stats *stats, u64 *data)
+ {
+ 	struct ifb_dev_private *dp = netdev_priv(dev);
+ 	struct ifb_q_private *txp;
+ 	int i;
+ 
+ 	for (i = 0; i < dev->real_num_rx_queues; i++) {
+ 		txp = dp->tx_private + i;
+ 		ifb_fill_stats_data(&data, &txp->rx_stats);
+ 	}
+ 
+ 	for (i = 0; i < dev->real_num_tx_queues; i++) {
+ 		txp = dp->tx_private + i;
+ 		ifb_fill_stats_data(&data, &txp->tx_stats);
+ 	}
+ }
+ 
++>>>>>>> 068c38ad88cc (net: Remove the obsolte u64_stats_fetch_*_irq() users (drivers).)
  static const struct net_device_ops ifb_netdev_ops = {
  	.ndo_open	= ifb_open,
  	.ndo_stop	= ifb_close,
diff --cc drivers/net/ipvlan/ipvlan_main.c
index 030c2fcbb691,b6bfa9fdca62..000000000000
--- a/drivers/net/ipvlan/ipvlan_main.c
+++ b/drivers/net/ipvlan/ipvlan_main.c
@@@ -375,13 -299,13 +375,23 @@@ static void ipvlan_get_stats64(struct n
  		for_each_possible_cpu(idx) {
  			pcptr = per_cpu_ptr(ipvlan->pcpu_stats, idx);
  			do {
++<<<<<<< HEAD
 +				strt= u64_stats_fetch_begin_irq(&pcptr->syncp);
 +				rx_pkts = pcptr->rx_pkts;
 +				rx_bytes = pcptr->rx_bytes;
 +				rx_mcast = pcptr->rx_mcast;
 +				tx_pkts = pcptr->tx_pkts;
 +				tx_bytes = pcptr->tx_bytes;
 +			} while (u64_stats_fetch_retry_irq(&pcptr->syncp,
++=======
+ 				strt = u64_stats_fetch_begin(&pcptr->syncp);
+ 				rx_pkts = u64_stats_read(&pcptr->rx_pkts);
+ 				rx_bytes = u64_stats_read(&pcptr->rx_bytes);
+ 				rx_mcast = u64_stats_read(&pcptr->rx_mcast);
+ 				tx_pkts = u64_stats_read(&pcptr->tx_pkts);
+ 				tx_bytes = u64_stats_read(&pcptr->tx_bytes);
+ 			} while (u64_stats_fetch_retry(&pcptr->syncp,
++>>>>>>> 068c38ad88cc (net: Remove the obsolte u64_stats_fetch_*_irq() users (drivers).)
  							   strt));
  
  			s->rx_packets += rx_pkts;
diff --cc drivers/net/loopback.c
index 2df7f60fe052,c4ad98d39ea6..000000000000
--- a/drivers/net/loopback.c
+++ b/drivers/net/loopback.c
@@@ -110,13 -106,23 +110,22 @@@ static void loopback_get_stats64(struc
  
  		lb_stats = per_cpu_ptr(dev->lstats, i);
  		do {
++<<<<<<< HEAD
 +			start = u64_stats_fetch_begin_irq(&lb_stats->syncp);
 +			tbytes = lb_stats->bytes;
 +			tpackets = lb_stats->packets;
 +		} while (u64_stats_fetch_retry_irq(&lb_stats->syncp, start));
 +		bytes   += tbytes;
 +		packets += tpackets;
++=======
+ 			start = u64_stats_fetch_begin(&lb_stats->syncp);
+ 			tpackets = u64_stats_read(&lb_stats->packets);
+ 			tbytes = u64_stats_read(&lb_stats->bytes);
+ 		} while (u64_stats_fetch_retry(&lb_stats->syncp, start));
+ 		*bytes   += tbytes;
+ 		*packets += tpackets;
++>>>>>>> 068c38ad88cc (net: Remove the obsolte u64_stats_fetch_*_irq() users (drivers).)
  	}
 -}
 -EXPORT_SYMBOL(dev_lstats_read);
 -
 -static void loopback_get_stats64(struct net_device *dev,
 -				 struct rtnl_link_stats64 *stats)
 -{
 -	u64 packets, bytes;
 -
 -	dev_lstats_read(dev, &packets, &bytes);
 -
  	stats->rx_packets = packets;
  	stats->tx_packets = packets;
  	stats->rx_bytes   = bytes;
diff --cc drivers/net/macvlan.c
index 1332eafc331a,c58fea63be7d..000000000000
--- a/drivers/net/macvlan.c
+++ b/drivers/net/macvlan.c
@@@ -938,13 -948,13 +938,23 @@@ static void macvlan_dev_get_stats64(str
  		for_each_possible_cpu(i) {
  			p = per_cpu_ptr(vlan->pcpu_stats, i);
  			do {
++<<<<<<< HEAD
 +				start = u64_stats_fetch_begin_irq(&p->syncp);
 +				rx_packets	= p->rx_packets;
 +				rx_bytes	= p->rx_bytes;
 +				rx_multicast	= p->rx_multicast;
 +				tx_packets	= p->tx_packets;
 +				tx_bytes	= p->tx_bytes;
 +			} while (u64_stats_fetch_retry_irq(&p->syncp, start));
++=======
+ 				start = u64_stats_fetch_begin(&p->syncp);
+ 				rx_packets	= u64_stats_read(&p->rx_packets);
+ 				rx_bytes	= u64_stats_read(&p->rx_bytes);
+ 				rx_multicast	= u64_stats_read(&p->rx_multicast);
+ 				tx_packets	= u64_stats_read(&p->tx_packets);
+ 				tx_bytes	= u64_stats_read(&p->tx_bytes);
+ 			} while (u64_stats_fetch_retry(&p->syncp, start));
++>>>>>>> 068c38ad88cc (net: Remove the obsolte u64_stats_fetch_*_irq() users (drivers).)
  
  			stats->rx_packets	+= rx_packets;
  			stats->rx_bytes		+= rx_bytes;
diff --cc drivers/net/team/team.c
index 933a33789599,d10606f257c4..000000000000
--- a/drivers/net/team/team.c
+++ b/drivers/net/team/team.c
@@@ -1865,13 -1865,13 +1865,23 @@@ team_get_stats64(struct net_device *dev
  	for_each_possible_cpu(i) {
  		p = per_cpu_ptr(team->pcpu_stats, i);
  		do {
++<<<<<<< HEAD
 +			start = u64_stats_fetch_begin_irq(&p->syncp);
 +			rx_packets	= p->rx_packets;
 +			rx_bytes	= p->rx_bytes;
 +			rx_multicast	= p->rx_multicast;
 +			tx_packets	= p->tx_packets;
 +			tx_bytes	= p->tx_bytes;
 +		} while (u64_stats_fetch_retry_irq(&p->syncp, start));
++=======
+ 			start = u64_stats_fetch_begin(&p->syncp);
+ 			rx_packets	= u64_stats_read(&p->rx_packets);
+ 			rx_bytes	= u64_stats_read(&p->rx_bytes);
+ 			rx_multicast	= u64_stats_read(&p->rx_multicast);
+ 			tx_packets	= u64_stats_read(&p->tx_packets);
+ 			tx_bytes	= u64_stats_read(&p->tx_bytes);
+ 		} while (u64_stats_fetch_retry(&p->syncp, start));
++>>>>>>> 068c38ad88cc (net: Remove the obsolte u64_stats_fetch_*_irq() users (drivers).)
  
  		stats->rx_packets	+= rx_packets;
  		stats->rx_bytes		+= rx_bytes;
diff --cc drivers/net/virtio_net.c
index 8f71eb2ce0d1,56dbd645d7c8..000000000000
--- a/drivers/net/virtio_net.c
+++ b/drivers/net/virtio_net.c
@@@ -1818,13 -2069,14 +1818,18 @@@ static void virtnet_stats(struct net_de
  		struct send_queue *sq = &vi->sq[i];
  
  		do {
- 			start = u64_stats_fetch_begin_irq(&sq->stats.syncp);
+ 			start = u64_stats_fetch_begin(&sq->stats.syncp);
  			tpackets = sq->stats.packets;
  			tbytes   = sq->stats.bytes;
++<<<<<<< HEAD
 +		} while (u64_stats_fetch_retry_irq(&sq->stats.syncp, start));
++=======
+ 			terrors  = sq->stats.tx_timeouts;
+ 		} while (u64_stats_fetch_retry(&sq->stats.syncp, start));
++>>>>>>> 068c38ad88cc (net: Remove the obsolte u64_stats_fetch_*_irq() users (drivers).)
  
  		do {
- 			start = u64_stats_fetch_begin_irq(&rq->stats.syncp);
+ 			start = u64_stats_fetch_begin(&rq->stats.syncp);
  			rpackets = rq->stats.packets;
  			rbytes   = rq->stats.bytes;
  			rdrops   = rq->stats.drops;
* Unmerged path drivers/net/ethernet/asix/ax88796c_main.c
* Unmerged path drivers/net/ethernet/fungible/funeth/funeth_txrx.h
* Unmerged path drivers/net/ethernet/ti/am65-cpsw-nuss.c
* Unmerged path drivers/net/vxlan/vxlan_vnifilter.c
* Unmerged path drivers/net/wwan/mhi_wwan_mbim.c
diff --git a/drivers/net/ethernet/alacritech/slic.h b/drivers/net/ethernet/alacritech/slic.h
index d0c388cfd52f..6ec56f776ffe 100644
--- a/drivers/net/ethernet/alacritech/slic.h
+++ b/drivers/net/ethernet/alacritech/slic.h
@@ -291,13 +291,13 @@ do {						\
 	u64_stats_update_end(&(st)->syncp);	\
 } while (0)
 
-#define SLIC_GET_STATS_COUNTER(newst, st, counter)			\
-{									\
-	unsigned int start;						\
+#define SLIC_GET_STATS_COUNTER(newst, st, counter)		\
+{								\
+	unsigned int start;					\
 	do {							\
-		start = u64_stats_fetch_begin_irq(&(st)->syncp);	\
-		newst = (st)->counter;					\
-	} while (u64_stats_fetch_retry_irq(&(st)->syncp, start));	\
+		start = u64_stats_fetch_begin(&(st)->syncp);	\
+		newst = (st)->counter;				\
+	} while (u64_stats_fetch_retry(&(st)->syncp, start));	\
 }
 
 struct slic_upr {
diff --git a/drivers/net/ethernet/amazon/ena/ena_ethtool.c b/drivers/net/ethernet/amazon/ena/ena_ethtool.c
index e374e655159e..e09ef4ebe35c 100644
--- a/drivers/net/ethernet/amazon/ena/ena_ethtool.c
+++ b/drivers/net/ethernet/amazon/ena/ena_ethtool.c
@@ -117,9 +117,9 @@ static void ena_safe_update_stat(u64 *src, u64 *dst,
 	unsigned int start;
 
 	do {
-		start = u64_stats_fetch_begin_irq(syncp);
+		start = u64_stats_fetch_begin(syncp);
 		*(dst) = *src;
-	} while (u64_stats_fetch_retry_irq(syncp, start));
+	} while (u64_stats_fetch_retry(syncp, start));
 }
 
 static void ena_queue_stats(struct ena_adapter *adapter, u64 **data)
diff --git a/drivers/net/ethernet/amazon/ena/ena_netdev.c b/drivers/net/ethernet/amazon/ena/ena_netdev.c
index 39bb25e3fcb5..590bb54600b1 100644
--- a/drivers/net/ethernet/amazon/ena/ena_netdev.c
+++ b/drivers/net/ethernet/amazon/ena/ena_netdev.c
@@ -3275,10 +3275,10 @@ static void ena_get_stats64(struct net_device *netdev,
 		tx_ring = &adapter->tx_ring[i];
 
 		do {
-			start = u64_stats_fetch_begin_irq(&tx_ring->syncp);
+			start = u64_stats_fetch_begin(&tx_ring->syncp);
 			packets = tx_ring->tx_stats.cnt;
 			bytes = tx_ring->tx_stats.bytes;
-		} while (u64_stats_fetch_retry_irq(&tx_ring->syncp, start));
+		} while (u64_stats_fetch_retry(&tx_ring->syncp, start));
 
 		stats->tx_packets += packets;
 		stats->tx_bytes += bytes;
@@ -3286,20 +3286,20 @@ static void ena_get_stats64(struct net_device *netdev,
 		rx_ring = &adapter->rx_ring[i];
 
 		do {
-			start = u64_stats_fetch_begin_irq(&rx_ring->syncp);
+			start = u64_stats_fetch_begin(&rx_ring->syncp);
 			packets = rx_ring->rx_stats.cnt;
 			bytes = rx_ring->rx_stats.bytes;
-		} while (u64_stats_fetch_retry_irq(&rx_ring->syncp, start));
+		} while (u64_stats_fetch_retry(&rx_ring->syncp, start));
 
 		stats->rx_packets += packets;
 		stats->rx_bytes += bytes;
 	}
 
 	do {
-		start = u64_stats_fetch_begin_irq(&adapter->syncp);
+		start = u64_stats_fetch_begin(&adapter->syncp);
 		rx_drops = adapter->dev_stats.rx_drops;
 		tx_drops = adapter->dev_stats.tx_drops;
-	} while (u64_stats_fetch_retry_irq(&adapter->syncp, start));
+	} while (u64_stats_fetch_retry(&adapter->syncp, start));
 
 	stats->rx_dropped = rx_drops;
 	stats->tx_dropped = tx_drops;
* Unmerged path drivers/net/ethernet/aquantia/atlantic/aq_ring.c
* Unmerged path drivers/net/ethernet/asix/ax88796c_main.c
diff --git a/drivers/net/ethernet/broadcom/b44.c b/drivers/net/ethernet/broadcom/b44.c
index 1764ef799fcb..585217d60a2d 100644
--- a/drivers/net/ethernet/broadcom/b44.c
+++ b/drivers/net/ethernet/broadcom/b44.c
@@ -1683,7 +1683,7 @@ static void b44_get_stats64(struct net_device *dev,
 	unsigned int start;
 
 	do {
-		start = u64_stats_fetch_begin_irq(&hwstat->syncp);
+		start = u64_stats_fetch_begin(&hwstat->syncp);
 
 		/* Convert HW stats into rtnl_link_stats64 stats. */
 		nstat->rx_packets = hwstat->rx_pkts;
@@ -1717,7 +1717,7 @@ static void b44_get_stats64(struct net_device *dev,
 		/* Carrier lost counter seems to be broken for some devices */
 		nstat->tx_carrier_errors = hwstat->tx_carrier_lost;
 #endif
-	} while (u64_stats_fetch_retry_irq(&hwstat->syncp, start));
+	} while (u64_stats_fetch_retry(&hwstat->syncp, start));
 
 }
 
@@ -2085,12 +2085,12 @@ static void b44_get_ethtool_stats(struct net_device *dev,
 	do {
 		data_src = &hwstat->tx_good_octets;
 		data_dst = data;
-		start = u64_stats_fetch_begin_irq(&hwstat->syncp);
+		start = u64_stats_fetch_begin(&hwstat->syncp);
 
 		for (i = 0; i < ARRAY_SIZE(b44_gstrings); i++)
 			*data_dst++ = *data_src++;
 
-	} while (u64_stats_fetch_retry_irq(&hwstat->syncp, start));
+	} while (u64_stats_fetch_retry(&hwstat->syncp, start));
 }
 
 static void b44_get_wol(struct net_device *dev, struct ethtool_wolinfo *wol)
diff --git a/drivers/net/ethernet/broadcom/bcmsysport.c b/drivers/net/ethernet/broadcom/bcmsysport.c
index 558f39fe3bac..4a039132fd31 100644
--- a/drivers/net/ethernet/broadcom/bcmsysport.c
+++ b/drivers/net/ethernet/broadcom/bcmsysport.c
@@ -442,10 +442,10 @@ static void bcm_sysport_update_tx_stats(struct bcm_sysport_priv *priv,
 	for (q = 0; q < priv->netdev->num_tx_queues; q++) {
 		ring = &priv->tx_rings[q];
 		do {
-			start = u64_stats_fetch_begin_irq(&priv->syncp);
+			start = u64_stats_fetch_begin(&priv->syncp);
 			bytes = ring->bytes;
 			packets = ring->packets;
-		} while (u64_stats_fetch_retry_irq(&priv->syncp, start));
+		} while (u64_stats_fetch_retry(&priv->syncp, start));
 
 		*tx_bytes += bytes;
 		*tx_packets += packets;
@@ -489,9 +489,9 @@ static void bcm_sysport_get_stats(struct net_device *dev,
 		if (s->stat_sizeof == sizeof(u64) &&
 		    s->type == BCM_SYSPORT_STAT_NETDEV64) {
 			do {
-				start = u64_stats_fetch_begin_irq(syncp);
+				start = u64_stats_fetch_begin(syncp);
 				data[i] = *(u64 *)p;
-			} while (u64_stats_fetch_retry_irq(syncp, start));
+			} while (u64_stats_fetch_retry(syncp, start));
 		} else
 			data[i] = *(u32 *)p;
 		j++;
@@ -1844,10 +1844,10 @@ static void bcm_sysport_get_stats64(struct net_device *dev,
 				    &stats->tx_packets);
 
 	do {
-		start = u64_stats_fetch_begin_irq(&priv->syncp);
+		start = u64_stats_fetch_begin(&priv->syncp);
 		stats->rx_packets = stats64->rx_packets;
 		stats->rx_bytes = stats64->rx_bytes;
-	} while (u64_stats_fetch_retry_irq(&priv->syncp, start));
+	} while (u64_stats_fetch_retry(&priv->syncp, start));
 }
 
 static void bcm_sysport_netif_start(struct net_device *dev)
diff --git a/drivers/net/ethernet/emulex/benet/be_ethtool.c b/drivers/net/ethernet/emulex/benet/be_ethtool.c
index c2db9bd5882f..72262441e03c 100644
--- a/drivers/net/ethernet/emulex/benet/be_ethtool.c
+++ b/drivers/net/ethernet/emulex/benet/be_ethtool.c
@@ -390,10 +390,10 @@ static void be_get_ethtool_stats(struct net_device *netdev,
 		struct be_rx_stats *stats = rx_stats(rxo);
 
 		do {
-			start = u64_stats_fetch_begin_irq(&stats->sync);
+			start = u64_stats_fetch_begin(&stats->sync);
 			data[base] = stats->rx_bytes;
 			data[base + 1] = stats->rx_pkts;
-		} while (u64_stats_fetch_retry_irq(&stats->sync, start));
+		} while (u64_stats_fetch_retry(&stats->sync, start));
 
 		for (i = 2; i < ETHTOOL_RXSTATS_NUM; i++) {
 			p = (u8 *)stats + et_rx_stats[i].offset;
@@ -406,19 +406,19 @@ static void be_get_ethtool_stats(struct net_device *netdev,
 		struct be_tx_stats *stats = tx_stats(txo);
 
 		do {
-			start = u64_stats_fetch_begin_irq(&stats->sync_compl);
+			start = u64_stats_fetch_begin(&stats->sync_compl);
 			data[base] = stats->tx_compl;
-		} while (u64_stats_fetch_retry_irq(&stats->sync_compl, start));
+		} while (u64_stats_fetch_retry(&stats->sync_compl, start));
 
 		do {
-			start = u64_stats_fetch_begin_irq(&stats->sync);
+			start = u64_stats_fetch_begin(&stats->sync);
 			for (i = 1; i < ETHTOOL_TXSTATS_NUM; i++) {
 				p = (u8 *)stats + et_tx_stats[i].offset;
 				data[base + i] =
 					(et_tx_stats[i].size == sizeof(u64)) ?
 						*(u64 *)p : *(u32 *)p;
 			}
-		} while (u64_stats_fetch_retry_irq(&stats->sync, start));
+		} while (u64_stats_fetch_retry(&stats->sync, start));
 		base += ETHTOOL_TXSTATS_NUM;
 	}
 }
diff --git a/drivers/net/ethernet/emulex/benet/be_main.c b/drivers/net/ethernet/emulex/benet/be_main.c
index df2e15abf150..f5f398b23d22 100644
--- a/drivers/net/ethernet/emulex/benet/be_main.c
+++ b/drivers/net/ethernet/emulex/benet/be_main.c
@@ -673,10 +673,10 @@ static void be_get_stats64(struct net_device *netdev,
 		const struct be_rx_stats *rx_stats = rx_stats(rxo);
 
 		do {
-			start = u64_stats_fetch_begin_irq(&rx_stats->sync);
+			start = u64_stats_fetch_begin(&rx_stats->sync);
 			pkts = rx_stats(rxo)->rx_pkts;
 			bytes = rx_stats(rxo)->rx_bytes;
-		} while (u64_stats_fetch_retry_irq(&rx_stats->sync, start));
+		} while (u64_stats_fetch_retry(&rx_stats->sync, start));
 		stats->rx_packets += pkts;
 		stats->rx_bytes += bytes;
 		stats->multicast += rx_stats(rxo)->rx_mcast_pkts;
@@ -688,10 +688,10 @@ static void be_get_stats64(struct net_device *netdev,
 		const struct be_tx_stats *tx_stats = tx_stats(txo);
 
 		do {
-			start = u64_stats_fetch_begin_irq(&tx_stats->sync);
+			start = u64_stats_fetch_begin(&tx_stats->sync);
 			pkts = tx_stats(txo)->tx_pkts;
 			bytes = tx_stats(txo)->tx_bytes;
-		} while (u64_stats_fetch_retry_irq(&tx_stats->sync, start));
+		} while (u64_stats_fetch_retry(&tx_stats->sync, start));
 		stats->tx_packets += pkts;
 		stats->tx_bytes += bytes;
 	}
@@ -2163,16 +2163,16 @@ static int be_get_new_eqd(struct be_eq_obj *eqo)
 
 	for_all_rx_queues_on_eq(adapter, eqo, rxo, i) {
 		do {
-			start = u64_stats_fetch_begin_irq(&rxo->stats.sync);
+			start = u64_stats_fetch_begin(&rxo->stats.sync);
 			rx_pkts += rxo->stats.rx_pkts;
-		} while (u64_stats_fetch_retry_irq(&rxo->stats.sync, start));
+		} while (u64_stats_fetch_retry(&rxo->stats.sync, start));
 	}
 
 	for_all_tx_queues_on_eq(adapter, eqo, txo, i) {
 		do {
-			start = u64_stats_fetch_begin_irq(&txo->stats.sync);
+			start = u64_stats_fetch_begin(&txo->stats.sync);
 			tx_pkts += txo->stats.tx_reqs;
-		} while (u64_stats_fetch_retry_irq(&txo->stats.sync, start));
+		} while (u64_stats_fetch_retry(&txo->stats.sync, start));
 	}
 
 	/* Skip, if wrapped around or first calculation */
* Unmerged path drivers/net/ethernet/fungible/funeth/funeth_txrx.h
* Unmerged path drivers/net/ethernet/hisilicon/hns3/hns3_enet.c
* Unmerged path drivers/net/ethernet/huawei/hinic/hinic_rx.c
* Unmerged path drivers/net/ethernet/huawei/hinic/hinic_tx.c
diff --git a/drivers/net/ethernet/intel/fm10k/fm10k_netdev.c b/drivers/net/ethernet/intel/fm10k/fm10k_netdev.c
index 5c19ff452558..09306c2fcd5e 100644
--- a/drivers/net/ethernet/intel/fm10k/fm10k_netdev.c
+++ b/drivers/net/ethernet/intel/fm10k/fm10k_netdev.c
@@ -1229,10 +1229,10 @@ static void fm10k_get_stats64(struct net_device *netdev,
 			continue;
 
 		do {
-			start = u64_stats_fetch_begin_irq(&ring->syncp);
+			start = u64_stats_fetch_begin(&ring->syncp);
 			packets = ring->stats.packets;
 			bytes   = ring->stats.bytes;
-		} while (u64_stats_fetch_retry_irq(&ring->syncp, start));
+		} while (u64_stats_fetch_retry(&ring->syncp, start));
 
 		stats->rx_packets += packets;
 		stats->rx_bytes   += bytes;
@@ -1245,10 +1245,10 @@ static void fm10k_get_stats64(struct net_device *netdev,
 			continue;
 
 		do {
-			start = u64_stats_fetch_begin_irq(&ring->syncp);
+			start = u64_stats_fetch_begin(&ring->syncp);
 			packets = ring->stats.packets;
 			bytes   = ring->stats.bytes;
-		} while (u64_stats_fetch_retry_irq(&ring->syncp, start));
+		} while (u64_stats_fetch_retry(&ring->syncp, start));
 
 		stats->tx_packets += packets;
 		stats->tx_bytes   += bytes;
diff --git a/drivers/net/ethernet/intel/i40e/i40e_ethtool.c b/drivers/net/ethernet/intel/i40e/i40e_ethtool.c
index ca8e0acaea8d..bb6f9ffe4a94 100644
--- a/drivers/net/ethernet/intel/i40e/i40e_ethtool.c
+++ b/drivers/net/ethernet/intel/i40e/i40e_ethtool.c
@@ -154,7 +154,7 @@ __i40e_add_ethtool_stats(u64 **data, void *pointer,
  * @ring: the ring to copy
  *
  * Queue statistics must be copied while protected by
- * u64_stats_fetch_begin_irq, so we can't directly use i40e_add_ethtool_stats.
+ * u64_stats_fetch_begin, so we can't directly use i40e_add_ethtool_stats.
  * Assumes that queue stats are defined in i40e_gstrings_queue_stats. If the
  * ring pointer is null, zero out the queue stat values and update the data
  * pointer. Otherwise safely copy the stats from the ring into the supplied
@@ -172,16 +172,16 @@ i40e_add_queue_stats(u64 **data, struct i40e_ring *ring)
 
 	/* To avoid invalid statistics values, ensure that we keep retrying
 	 * the copy until we get a consistent value according to
-	 * u64_stats_fetch_retry_irq. But first, make sure our ring is
+	 * u64_stats_fetch_retry. But first, make sure our ring is
 	 * non-null before attempting to access its syncp.
 	 */
 	do {
-		start = !ring ? 0 : u64_stats_fetch_begin_irq(&ring->syncp);
+		start = !ring ? 0 : u64_stats_fetch_begin(&ring->syncp);
 		for (i = 0; i < size; i++) {
 			i40e_add_one_ethtool_stat(&(*data)[i], ring,
 						  &stats[i]);
 		}
-	} while (ring && u64_stats_fetch_retry_irq(&ring->syncp, start));
+	} while (ring && u64_stats_fetch_retry(&ring->syncp, start));
 
 	/* Once we successfully copy the stats in, update the data pointer */
 	*data += size;
diff --git a/drivers/net/ethernet/intel/i40e/i40e_main.c b/drivers/net/ethernet/intel/i40e/i40e_main.c
index 685af1b4efe8..9932eef9ada0 100644
--- a/drivers/net/ethernet/intel/i40e/i40e_main.c
+++ b/drivers/net/ethernet/intel/i40e/i40e_main.c
@@ -420,10 +420,10 @@ static void i40e_get_netdev_stats_struct_tx(struct i40e_ring *ring,
 	unsigned int start;
 
 	do {
-		start = u64_stats_fetch_begin_irq(&ring->syncp);
+		start = u64_stats_fetch_begin(&ring->syncp);
 		packets = ring->stats.packets;
 		bytes   = ring->stats.bytes;
-	} while (u64_stats_fetch_retry_irq(&ring->syncp, start));
+	} while (u64_stats_fetch_retry(&ring->syncp, start));
 
 	stats->tx_packets += packets;
 	stats->tx_bytes   += bytes;
@@ -473,10 +473,10 @@ static void i40e_get_netdev_stats_struct(struct net_device *netdev,
 		if (!ring)
 			continue;
 		do {
-			start   = u64_stats_fetch_begin_irq(&ring->syncp);
+			start   = u64_stats_fetch_begin(&ring->syncp);
 			packets = ring->stats.packets;
 			bytes   = ring->stats.bytes;
-		} while (u64_stats_fetch_retry_irq(&ring->syncp, start));
+		} while (u64_stats_fetch_retry(&ring->syncp, start));
 
 		stats->rx_packets += packets;
 		stats->rx_bytes   += bytes;
@@ -898,10 +898,10 @@ static void i40e_update_vsi_stats(struct i40e_vsi *vsi)
 			continue;
 
 		do {
-			start = u64_stats_fetch_begin_irq(&p->syncp);
+			start = u64_stats_fetch_begin(&p->syncp);
 			packets = p->stats.packets;
 			bytes = p->stats.bytes;
-		} while (u64_stats_fetch_retry_irq(&p->syncp, start));
+		} while (u64_stats_fetch_retry(&p->syncp, start));
 		tx_b += bytes;
 		tx_p += packets;
 		tx_restart += p->tx_stats.restart_queue;
@@ -916,10 +916,10 @@ static void i40e_update_vsi_stats(struct i40e_vsi *vsi)
 			continue;
 
 		do {
-			start = u64_stats_fetch_begin_irq(&p->syncp);
+			start = u64_stats_fetch_begin(&p->syncp);
 			packets = p->stats.packets;
 			bytes = p->stats.bytes;
-		} while (u64_stats_fetch_retry_irq(&p->syncp, start));
+		} while (u64_stats_fetch_retry(&p->syncp, start));
 		rx_b += bytes;
 		rx_p += packets;
 		rx_buf += p->rx_stats.alloc_buff_failed;
@@ -936,10 +936,10 @@ static void i40e_update_vsi_stats(struct i40e_vsi *vsi)
 				continue;
 
 			do {
-				start = u64_stats_fetch_begin_irq(&p->syncp);
+				start = u64_stats_fetch_begin(&p->syncp);
 				packets = p->stats.packets;
 				bytes = p->stats.bytes;
-			} while (u64_stats_fetch_retry_irq(&p->syncp, start));
+			} while (u64_stats_fetch_retry(&p->syncp, start));
 			tx_b += bytes;
 			tx_p += packets;
 			tx_restart += p->tx_stats.restart_queue;
diff --git a/drivers/net/ethernet/intel/iavf/iavf_ethtool.c b/drivers/net/ethernet/intel/iavf/iavf_ethtool.c
index e535d4c3da49..fafa3406e0bc 100644
--- a/drivers/net/ethernet/intel/iavf/iavf_ethtool.c
+++ b/drivers/net/ethernet/intel/iavf/iavf_ethtool.c
@@ -147,7 +147,7 @@ __iavf_add_ethtool_stats(u64 **data, void *pointer,
  * @ring: the ring to copy
  *
  * Queue statistics must be copied while protected by
- * u64_stats_fetch_begin_irq, so we can't directly use iavf_add_ethtool_stats.
+ * u64_stats_fetch_begin, so we can't directly use iavf_add_ethtool_stats.
  * Assumes that queue stats are defined in iavf_gstrings_queue_stats. If the
  * ring pointer is null, zero out the queue stat values and update the data
  * pointer. Otherwise safely copy the stats from the ring into the supplied
@@ -165,14 +165,14 @@ iavf_add_queue_stats(u64 **data, struct iavf_ring *ring)
 
 	/* To avoid invalid statistics values, ensure that we keep retrying
 	 * the copy until we get a consistent value according to
-	 * u64_stats_fetch_retry_irq. But first, make sure our ring is
+	 * u64_stats_fetch_retry. But first, make sure our ring is
 	 * non-null before attempting to access its syncp.
 	 */
 	do {
-		start = !ring ? 0 : u64_stats_fetch_begin_irq(&ring->syncp);
+		start = !ring ? 0 : u64_stats_fetch_begin(&ring->syncp);
 		for (i = 0; i < size; i++)
 			iavf_add_one_ethtool_stat(&(*data)[i], ring, &stats[i]);
-	} while (ring && u64_stats_fetch_retry_irq(&ring->syncp, start));
+	} while (ring && u64_stats_fetch_retry(&ring->syncp, start));
 
 	/* Once we successfully copy the stats in, update the data pointer */
 	*data += size;
diff --git a/drivers/net/ethernet/intel/ice/ice_main.c b/drivers/net/ethernet/intel/ice/ice_main.c
index 3b7f482178f2..d32759d13766 100644
--- a/drivers/net/ethernet/intel/ice/ice_main.c
+++ b/drivers/net/ethernet/intel/ice/ice_main.c
@@ -6015,10 +6015,10 @@ ice_fetch_u64_stats_per_ring(struct u64_stats_sync *syncp,
 	unsigned int start;
 
 	do {
-		start = u64_stats_fetch_begin_irq(syncp);
+		start = u64_stats_fetch_begin(syncp);
 		*pkts = stats.pkts;
 		*bytes = stats.bytes;
-	} while (u64_stats_fetch_retry_irq(syncp, start));
+	} while (u64_stats_fetch_retry(syncp, start));
 }
 
 /**
diff --git a/drivers/net/ethernet/intel/igb/igb_ethtool.c b/drivers/net/ethernet/intel/igb/igb_ethtool.c
index c14fc871dd41..23c6fcfcb905 100644
--- a/drivers/net/ethernet/intel/igb/igb_ethtool.c
+++ b/drivers/net/ethernet/intel/igb/igb_ethtool.c
@@ -2311,15 +2311,15 @@ static void igb_get_ethtool_stats(struct net_device *netdev,
 
 		ring = adapter->tx_ring[j];
 		do {
-			start = u64_stats_fetch_begin_irq(&ring->tx_syncp);
+			start = u64_stats_fetch_begin(&ring->tx_syncp);
 			data[i]   = ring->tx_stats.packets;
 			data[i+1] = ring->tx_stats.bytes;
 			data[i+2] = ring->tx_stats.restart_queue;
-		} while (u64_stats_fetch_retry_irq(&ring->tx_syncp, start));
+		} while (u64_stats_fetch_retry(&ring->tx_syncp, start));
 		do {
-			start = u64_stats_fetch_begin_irq(&ring->tx_syncp2);
+			start = u64_stats_fetch_begin(&ring->tx_syncp2);
 			restart2  = ring->tx_stats.restart_queue2;
-		} while (u64_stats_fetch_retry_irq(&ring->tx_syncp2, start));
+		} while (u64_stats_fetch_retry(&ring->tx_syncp2, start));
 		data[i+2] += restart2;
 
 		i += IGB_TX_QUEUE_STATS_LEN;
@@ -2327,13 +2327,13 @@ static void igb_get_ethtool_stats(struct net_device *netdev,
 	for (j = 0; j < adapter->num_rx_queues; j++) {
 		ring = adapter->rx_ring[j];
 		do {
-			start = u64_stats_fetch_begin_irq(&ring->rx_syncp);
+			start = u64_stats_fetch_begin(&ring->rx_syncp);
 			data[i]   = ring->rx_stats.packets;
 			data[i+1] = ring->rx_stats.bytes;
 			data[i+2] = ring->rx_stats.drops;
 			data[i+3] = ring->rx_stats.csum_err;
 			data[i+4] = ring->rx_stats.alloc_failed;
-		} while (u64_stats_fetch_retry_irq(&ring->rx_syncp, start));
+		} while (u64_stats_fetch_retry(&ring->rx_syncp, start));
 		i += IGB_RX_QUEUE_STATS_LEN;
 	}
 	spin_unlock(&adapter->stats64_lock);
diff --git a/drivers/net/ethernet/intel/igb/igb_main.c b/drivers/net/ethernet/intel/igb/igb_main.c
index 4e65ffe3f4e3..5a55728ae493 100644
--- a/drivers/net/ethernet/intel/igb/igb_main.c
+++ b/drivers/net/ethernet/intel/igb/igb_main.c
@@ -6594,10 +6594,10 @@ void igb_update_stats(struct igb_adapter *adapter)
 		}
 
 		do {
-			start = u64_stats_fetch_begin_irq(&ring->rx_syncp);
+			start = u64_stats_fetch_begin(&ring->rx_syncp);
 			_bytes = ring->rx_stats.bytes;
 			_packets = ring->rx_stats.packets;
-		} while (u64_stats_fetch_retry_irq(&ring->rx_syncp, start));
+		} while (u64_stats_fetch_retry(&ring->rx_syncp, start));
 		bytes += _bytes;
 		packets += _packets;
 	}
@@ -6610,10 +6610,10 @@ void igb_update_stats(struct igb_adapter *adapter)
 	for (i = 0; i < adapter->num_tx_queues; i++) {
 		struct igb_ring *ring = adapter->tx_ring[i];
 		do {
-			start = u64_stats_fetch_begin_irq(&ring->tx_syncp);
+			start = u64_stats_fetch_begin(&ring->tx_syncp);
 			_bytes = ring->tx_stats.bytes;
 			_packets = ring->tx_stats.packets;
-		} while (u64_stats_fetch_retry_irq(&ring->tx_syncp, start));
+		} while (u64_stats_fetch_retry(&ring->tx_syncp, start));
 		bytes += _bytes;
 		packets += _packets;
 	}
diff --git a/drivers/net/ethernet/intel/igc/igc_ethtool.c b/drivers/net/ethernet/intel/igc/igc_ethtool.c
index 8cc077b712ad..5a26a7805ef8 100644
--- a/drivers/net/ethernet/intel/igc/igc_ethtool.c
+++ b/drivers/net/ethernet/intel/igc/igc_ethtool.c
@@ -839,15 +839,15 @@ static void igc_ethtool_get_stats(struct net_device *netdev,
 
 		ring = adapter->tx_ring[j];
 		do {
-			start = u64_stats_fetch_begin_irq(&ring->tx_syncp);
+			start = u64_stats_fetch_begin(&ring->tx_syncp);
 			data[i]   = ring->tx_stats.packets;
 			data[i + 1] = ring->tx_stats.bytes;
 			data[i + 2] = ring->tx_stats.restart_queue;
-		} while (u64_stats_fetch_retry_irq(&ring->tx_syncp, start));
+		} while (u64_stats_fetch_retry(&ring->tx_syncp, start));
 		do {
-			start = u64_stats_fetch_begin_irq(&ring->tx_syncp2);
+			start = u64_stats_fetch_begin(&ring->tx_syncp2);
 			restart2  = ring->tx_stats.restart_queue2;
-		} while (u64_stats_fetch_retry_irq(&ring->tx_syncp2, start));
+		} while (u64_stats_fetch_retry(&ring->tx_syncp2, start));
 		data[i + 2] += restart2;
 
 		i += IGC_TX_QUEUE_STATS_LEN;
@@ -855,13 +855,13 @@ static void igc_ethtool_get_stats(struct net_device *netdev,
 	for (j = 0; j < adapter->num_rx_queues; j++) {
 		ring = adapter->rx_ring[j];
 		do {
-			start = u64_stats_fetch_begin_irq(&ring->rx_syncp);
+			start = u64_stats_fetch_begin(&ring->rx_syncp);
 			data[i]   = ring->rx_stats.packets;
 			data[i + 1] = ring->rx_stats.bytes;
 			data[i + 2] = ring->rx_stats.drops;
 			data[i + 3] = ring->rx_stats.csum_err;
 			data[i + 4] = ring->rx_stats.alloc_failed;
-		} while (u64_stats_fetch_retry_irq(&ring->rx_syncp, start));
+		} while (u64_stats_fetch_retry(&ring->rx_syncp, start));
 		i += IGC_RX_QUEUE_STATS_LEN;
 	}
 	spin_unlock(&adapter->stats64_lock);
diff --git a/drivers/net/ethernet/intel/igc/igc_main.c b/drivers/net/ethernet/intel/igc/igc_main.c
index 4137f694fc60..5a7b83f38ac5 100644
--- a/drivers/net/ethernet/intel/igc/igc_main.c
+++ b/drivers/net/ethernet/intel/igc/igc_main.c
@@ -4647,10 +4647,10 @@ void igc_update_stats(struct igc_adapter *adapter)
 		}
 
 		do {
-			start = u64_stats_fetch_begin_irq(&ring->rx_syncp);
+			start = u64_stats_fetch_begin(&ring->rx_syncp);
 			_bytes = ring->rx_stats.bytes;
 			_packets = ring->rx_stats.packets;
-		} while (u64_stats_fetch_retry_irq(&ring->rx_syncp, start));
+		} while (u64_stats_fetch_retry(&ring->rx_syncp, start));
 		bytes += _bytes;
 		packets += _packets;
 	}
@@ -4664,10 +4664,10 @@ void igc_update_stats(struct igc_adapter *adapter)
 		struct igc_ring *ring = adapter->tx_ring[i];
 
 		do {
-			start = u64_stats_fetch_begin_irq(&ring->tx_syncp);
+			start = u64_stats_fetch_begin(&ring->tx_syncp);
 			_bytes = ring->tx_stats.bytes;
 			_packets = ring->tx_stats.packets;
-		} while (u64_stats_fetch_retry_irq(&ring->tx_syncp, start));
+		} while (u64_stats_fetch_retry(&ring->tx_syncp, start));
 		bytes += _bytes;
 		packets += _packets;
 	}
diff --git a/drivers/net/ethernet/intel/ixgbe/ixgbe_ethtool.c b/drivers/net/ethernet/intel/ixgbe/ixgbe_ethtool.c
index 6b4227a3b000..ac58544caa7a 100644
--- a/drivers/net/ethernet/intel/ixgbe/ixgbe_ethtool.c
+++ b/drivers/net/ethernet/intel/ixgbe/ixgbe_ethtool.c
@@ -1334,10 +1334,10 @@ static void ixgbe_get_ethtool_stats(struct net_device *netdev,
 		}
 
 		do {
-			start = u64_stats_fetch_begin_irq(&ring->syncp);
+			start = u64_stats_fetch_begin(&ring->syncp);
 			data[i]   = ring->stats.packets;
 			data[i+1] = ring->stats.bytes;
-		} while (u64_stats_fetch_retry_irq(&ring->syncp, start));
+		} while (u64_stats_fetch_retry(&ring->syncp, start));
 		i += 2;
 	}
 	for (j = 0; j < IXGBE_NUM_RX_QUEUES; j++) {
@@ -1350,10 +1350,10 @@ static void ixgbe_get_ethtool_stats(struct net_device *netdev,
 		}
 
 		do {
-			start = u64_stats_fetch_begin_irq(&ring->syncp);
+			start = u64_stats_fetch_begin(&ring->syncp);
 			data[i]   = ring->stats.packets;
 			data[i+1] = ring->stats.bytes;
-		} while (u64_stats_fetch_retry_irq(&ring->syncp, start));
+		} while (u64_stats_fetch_retry(&ring->syncp, start));
 		i += 2;
 	}
 
diff --git a/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c b/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c
index a809d702dedd..b7314bb79b67 100644
--- a/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c
+++ b/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c
@@ -8925,10 +8925,10 @@ static void ixgbe_get_ring_stats64(struct rtnl_link_stats64 *stats,
 
 	if (ring) {
 		do {
-			start = u64_stats_fetch_begin_irq(&ring->syncp);
+			start = u64_stats_fetch_begin(&ring->syncp);
 			packets = ring->stats.packets;
 			bytes   = ring->stats.bytes;
-		} while (u64_stats_fetch_retry_irq(&ring->syncp, start));
+		} while (u64_stats_fetch_retry(&ring->syncp, start));
 		stats->tx_packets += packets;
 		stats->tx_bytes   += bytes;
 	}
@@ -8948,10 +8948,10 @@ static void ixgbe_get_stats64(struct net_device *netdev,
 
 		if (ring) {
 			do {
-				start = u64_stats_fetch_begin_irq(&ring->syncp);
+				start = u64_stats_fetch_begin(&ring->syncp);
 				packets = ring->stats.packets;
 				bytes   = ring->stats.bytes;
-			} while (u64_stats_fetch_retry_irq(&ring->syncp, start));
+			} while (u64_stats_fetch_retry(&ring->syncp, start));
 			stats->rx_packets += packets;
 			stats->rx_bytes   += bytes;
 		}
diff --git a/drivers/net/ethernet/intel/ixgbevf/ethtool.c b/drivers/net/ethernet/intel/ixgbevf/ethtool.c
index fed46872af2b..b4632b67ab14 100644
--- a/drivers/net/ethernet/intel/ixgbevf/ethtool.c
+++ b/drivers/net/ethernet/intel/ixgbevf/ethtool.c
@@ -458,10 +458,10 @@ static void ixgbevf_get_ethtool_stats(struct net_device *netdev,
 		}
 
 		do {
-			start = u64_stats_fetch_begin_irq(&ring->syncp);
+			start = u64_stats_fetch_begin(&ring->syncp);
 			data[i]   = ring->stats.packets;
 			data[i + 1] = ring->stats.bytes;
-		} while (u64_stats_fetch_retry_irq(&ring->syncp, start));
+		} while (u64_stats_fetch_retry(&ring->syncp, start));
 		i += 2;
 	}
 
@@ -475,10 +475,10 @@ static void ixgbevf_get_ethtool_stats(struct net_device *netdev,
 		}
 
 		do {
-			start = u64_stats_fetch_begin_irq(&ring->syncp);
+			start = u64_stats_fetch_begin(&ring->syncp);
 			data[i] = ring->stats.packets;
 			data[i + 1] = ring->stats.bytes;
-		} while (u64_stats_fetch_retry_irq(&ring->syncp, start));
+		} while (u64_stats_fetch_retry(&ring->syncp, start));
 		i += 2;
 	}
 
@@ -492,10 +492,10 @@ static void ixgbevf_get_ethtool_stats(struct net_device *netdev,
 		}
 
 		do {
-			start = u64_stats_fetch_begin_irq(&ring->syncp);
+			start = u64_stats_fetch_begin(&ring->syncp);
 			data[i]   = ring->stats.packets;
 			data[i + 1] = ring->stats.bytes;
-		} while (u64_stats_fetch_retry_irq(&ring->syncp, start));
+		} while (u64_stats_fetch_retry(&ring->syncp, start));
 		i += 2;
 	}
 }
diff --git a/drivers/net/ethernet/intel/ixgbevf/ixgbevf_main.c b/drivers/net/ethernet/intel/ixgbevf/ixgbevf_main.c
index 37577993782a..5d342e16cb64 100644
--- a/drivers/net/ethernet/intel/ixgbevf/ixgbevf_main.c
+++ b/drivers/net/ethernet/intel/ixgbevf/ixgbevf_main.c
@@ -4345,10 +4345,10 @@ static void ixgbevf_get_tx_ring_stats(struct rtnl_link_stats64 *stats,
 
 	if (ring) {
 		do {
-			start = u64_stats_fetch_begin_irq(&ring->syncp);
+			start = u64_stats_fetch_begin(&ring->syncp);
 			bytes = ring->stats.bytes;
 			packets = ring->stats.packets;
-		} while (u64_stats_fetch_retry_irq(&ring->syncp, start));
+		} while (u64_stats_fetch_retry(&ring->syncp, start));
 		stats->tx_bytes += bytes;
 		stats->tx_packets += packets;
 	}
@@ -4371,10 +4371,10 @@ static void ixgbevf_get_stats(struct net_device *netdev,
 	for (i = 0; i < adapter->num_rx_queues; i++) {
 		ring = adapter->rx_ring[i];
 		do {
-			start = u64_stats_fetch_begin_irq(&ring->syncp);
+			start = u64_stats_fetch_begin(&ring->syncp);
 			bytes = ring->stats.bytes;
 			packets = ring->stats.packets;
-		} while (u64_stats_fetch_retry_irq(&ring->syncp, start));
+		} while (u64_stats_fetch_retry(&ring->syncp, start));
 		stats->rx_bytes += bytes;
 		stats->rx_packets += packets;
 	}
* Unmerged path drivers/net/ethernet/marvell/mvneta.c
* Unmerged path drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c
diff --git a/drivers/net/ethernet/marvell/sky2.c b/drivers/net/ethernet/marvell/sky2.c
index 01ad6616f75f..8dd84b9e13b4 100644
--- a/drivers/net/ethernet/marvell/sky2.c
+++ b/drivers/net/ethernet/marvell/sky2.c
@@ -3906,19 +3906,19 @@ static void sky2_get_stats(struct net_device *dev,
 	u64 _bytes, _packets;
 
 	do {
-		start = u64_stats_fetch_begin_irq(&sky2->rx_stats.syncp);
+		start = u64_stats_fetch_begin(&sky2->rx_stats.syncp);
 		_bytes = sky2->rx_stats.bytes;
 		_packets = sky2->rx_stats.packets;
-	} while (u64_stats_fetch_retry_irq(&sky2->rx_stats.syncp, start));
+	} while (u64_stats_fetch_retry(&sky2->rx_stats.syncp, start));
 
 	stats->rx_packets = _packets;
 	stats->rx_bytes = _bytes;
 
 	do {
-		start = u64_stats_fetch_begin_irq(&sky2->tx_stats.syncp);
+		start = u64_stats_fetch_begin(&sky2->tx_stats.syncp);
 		_bytes = sky2->tx_stats.bytes;
 		_packets = sky2->tx_stats.packets;
-	} while (u64_stats_fetch_retry_irq(&sky2->tx_stats.syncp, start));
+	} while (u64_stats_fetch_retry(&sky2->tx_stats.syncp, start));
 
 	stats->tx_packets = _packets;
 	stats->tx_bytes = _bytes;
* Unmerged path drivers/net/ethernet/mediatek/mtk_eth_soc.c
diff --git a/drivers/net/ethernet/mellanox/mlxsw/spectrum.c b/drivers/net/ethernet/mellanox/mlxsw/spectrum.c
index e5609782136d..58601775910d 100644
--- a/drivers/net/ethernet/mellanox/mlxsw/spectrum.c
+++ b/drivers/net/ethernet/mellanox/mlxsw/spectrum.c
@@ -697,12 +697,12 @@ mlxsw_sp_port_get_sw_stats64(const struct net_device *dev,
 	for_each_possible_cpu(i) {
 		p = per_cpu_ptr(mlxsw_sp_port->pcpu_stats, i);
 		do {
-			start = u64_stats_fetch_begin_irq(&p->syncp);
+			start = u64_stats_fetch_begin(&p->syncp);
 			rx_packets	= p->rx_packets;
 			rx_bytes	= p->rx_bytes;
 			tx_packets	= p->tx_packets;
 			tx_bytes	= p->tx_bytes;
-		} while (u64_stats_fetch_retry_irq(&p->syncp, start));
+		} while (u64_stats_fetch_retry(&p->syncp, start));
 
 		stats->rx_packets	+= rx_packets;
 		stats->rx_bytes		+= rx_bytes;
diff --git a/drivers/net/ethernet/microsoft/mana/mana_en.c b/drivers/net/ethernet/microsoft/mana/mana_en.c
index b2ebf9aaa0a8..d2822cb27643 100644
--- a/drivers/net/ethernet/microsoft/mana/mana_en.c
+++ b/drivers/net/ethernet/microsoft/mana/mana_en.c
@@ -313,10 +313,10 @@ static void mana_get_stats64(struct net_device *ndev,
 		rx_stats = &apc->rxqs[q]->stats;
 
 		do {
-			start = u64_stats_fetch_begin_irq(&rx_stats->syncp);
+			start = u64_stats_fetch_begin(&rx_stats->syncp);
 			packets = rx_stats->packets;
 			bytes = rx_stats->bytes;
-		} while (u64_stats_fetch_retry_irq(&rx_stats->syncp, start));
+		} while (u64_stats_fetch_retry(&rx_stats->syncp, start));
 
 		st->rx_packets += packets;
 		st->rx_bytes += bytes;
@@ -326,10 +326,10 @@ static void mana_get_stats64(struct net_device *ndev,
 		tx_stats = &apc->tx_qp[q].txq.stats;
 
 		do {
-			start = u64_stats_fetch_begin_irq(&tx_stats->syncp);
+			start = u64_stats_fetch_begin(&tx_stats->syncp);
 			packets = tx_stats->packets;
 			bytes = tx_stats->bytes;
-		} while (u64_stats_fetch_retry_irq(&tx_stats->syncp, start));
+		} while (u64_stats_fetch_retry(&tx_stats->syncp, start));
 
 		st->tx_packets += packets;
 		st->tx_bytes += bytes;
diff --git a/drivers/net/ethernet/microsoft/mana/mana_ethtool.c b/drivers/net/ethernet/microsoft/mana/mana_ethtool.c
index c530db76880f..96d55c91c969 100644
--- a/drivers/net/ethernet/microsoft/mana/mana_ethtool.c
+++ b/drivers/net/ethernet/microsoft/mana/mana_ethtool.c
@@ -90,13 +90,13 @@ static void mana_get_ethtool_stats(struct net_device *ndev,
 		rx_stats = &apc->rxqs[q]->stats;
 
 		do {
-			start = u64_stats_fetch_begin_irq(&rx_stats->syncp);
+			start = u64_stats_fetch_begin(&rx_stats->syncp);
 			packets = rx_stats->packets;
 			bytes = rx_stats->bytes;
 			xdp_drop = rx_stats->xdp_drop;
 			xdp_tx = rx_stats->xdp_tx;
 			xdp_redirect = rx_stats->xdp_redirect;
-		} while (u64_stats_fetch_retry_irq(&rx_stats->syncp, start));
+		} while (u64_stats_fetch_retry(&rx_stats->syncp, start));
 
 		data[i++] = packets;
 		data[i++] = bytes;
@@ -109,11 +109,11 @@ static void mana_get_ethtool_stats(struct net_device *ndev,
 		tx_stats = &apc->tx_qp[q].txq.stats;
 
 		do {
-			start = u64_stats_fetch_begin_irq(&tx_stats->syncp);
+			start = u64_stats_fetch_begin(&tx_stats->syncp);
 			packets = tx_stats->packets;
 			bytes = tx_stats->bytes;
 			xdp_xmit = tx_stats->xdp_xmit;
-		} while (u64_stats_fetch_retry_irq(&tx_stats->syncp, start));
+		} while (u64_stats_fetch_retry(&tx_stats->syncp, start));
 
 		data[i++] = packets;
 		data[i++] = bytes;
diff --git a/drivers/net/ethernet/netronome/nfp/nfp_net_repr.c b/drivers/net/ethernet/netronome/nfp/nfp_net_repr.c
index d53ef087792c..b2e571911490 100644
--- a/drivers/net/ethernet/netronome/nfp/nfp_net_repr.c
+++ b/drivers/net/ethernet/netronome/nfp/nfp_net_repr.c
@@ -133,13 +133,13 @@ nfp_repr_get_host_stats64(const struct net_device *netdev,
 
 		repr_stats = per_cpu_ptr(repr->stats, i);
 		do {
-			start = u64_stats_fetch_begin_irq(&repr_stats->syncp);
+			start = u64_stats_fetch_begin(&repr_stats->syncp);
 			tbytes = repr_stats->tx_bytes;
 			tpkts = repr_stats->tx_packets;
 			tdrops = repr_stats->tx_drops;
 			rbytes = repr_stats->rx_bytes;
 			rpkts = repr_stats->rx_packets;
-		} while (u64_stats_fetch_retry_irq(&repr_stats->syncp, start));
+		} while (u64_stats_fetch_retry(&repr_stats->syncp, start));
 
 		stats->tx_bytes += tbytes;
 		stats->tx_packets += tpkts;
* Unmerged path drivers/net/ethernet/nvidia/forcedeth.c
* Unmerged path drivers/net/ethernet/qualcomm/rmnet/rmnet_vnd.c
diff --git a/drivers/net/ethernet/realtek/8139too.c b/drivers/net/ethernet/realtek/8139too.c
index a481c12b8ce8..73262e208ec5 100644
--- a/drivers/net/ethernet/realtek/8139too.c
+++ b/drivers/net/ethernet/realtek/8139too.c
@@ -2530,16 +2530,16 @@ rtl8139_get_stats64(struct net_device *dev, struct rtnl_link_stats64 *stats)
 	netdev_stats_to_stats64(stats, &dev->stats);
 
 	do {
-		start = u64_stats_fetch_begin_irq(&tp->rx_stats.syncp);
+		start = u64_stats_fetch_begin(&tp->rx_stats.syncp);
 		stats->rx_packets = tp->rx_stats.packets;
 		stats->rx_bytes = tp->rx_stats.bytes;
-	} while (u64_stats_fetch_retry_irq(&tp->rx_stats.syncp, start));
+	} while (u64_stats_fetch_retry(&tp->rx_stats.syncp, start));
 
 	do {
-		start = u64_stats_fetch_begin_irq(&tp->tx_stats.syncp);
+		start = u64_stats_fetch_begin(&tp->tx_stats.syncp);
 		stats->tx_packets = tp->tx_stats.packets;
 		stats->tx_bytes = tp->tx_stats.bytes;
-	} while (u64_stats_fetch_retry_irq(&tp->tx_stats.syncp, start));
+	} while (u64_stats_fetch_retry(&tp->tx_stats.syncp, start));
 }
 
 /* Set or clear the multicast filter for this adaptor.
diff --git a/drivers/net/ethernet/socionext/sni_ave.c b/drivers/net/ethernet/socionext/sni_ave.c
index 4d0244d7b05b..c3373894cf07 100644
--- a/drivers/net/ethernet/socionext/sni_ave.c
+++ b/drivers/net/ethernet/socionext/sni_ave.c
@@ -1493,16 +1493,16 @@ static void ave_get_stats64(struct net_device *ndev,
 	unsigned int start;
 
 	do {
-		start = u64_stats_fetch_begin_irq(&priv->stats_rx.syncp);
+		start = u64_stats_fetch_begin(&priv->stats_rx.syncp);
 		stats->rx_packets = priv->stats_rx.packets;
 		stats->rx_bytes	  = priv->stats_rx.bytes;
-	} while (u64_stats_fetch_retry_irq(&priv->stats_rx.syncp, start));
+	} while (u64_stats_fetch_retry(&priv->stats_rx.syncp, start));
 
 	do {
-		start = u64_stats_fetch_begin_irq(&priv->stats_tx.syncp);
+		start = u64_stats_fetch_begin(&priv->stats_tx.syncp);
 		stats->tx_packets = priv->stats_tx.packets;
 		stats->tx_bytes	  = priv->stats_tx.bytes;
-	} while (u64_stats_fetch_retry_irq(&priv->stats_tx.syncp, start));
+	} while (u64_stats_fetch_retry(&priv->stats_tx.syncp, start));
 
 	stats->rx_errors      = priv->stats_rx.errors;
 	stats->tx_errors      = priv->stats_tx.errors;
* Unmerged path drivers/net/ethernet/ti/am65-cpsw-nuss.c
diff --git a/drivers/net/ethernet/ti/netcp_core.c b/drivers/net/ethernet/ti/netcp_core.c
index e784f05c40fc..bbe44e0fda29 100644
--- a/drivers/net/ethernet/ti/netcp_core.c
+++ b/drivers/net/ethernet/ti/netcp_core.c
@@ -1931,16 +1931,16 @@ netcp_get_stats(struct net_device *ndev, struct rtnl_link_stats64 *stats)
 	unsigned int start;
 
 	do {
-		start = u64_stats_fetch_begin_irq(&p->syncp_rx);
+		start = u64_stats_fetch_begin(&p->syncp_rx);
 		rxpackets       = p->rx_packets;
 		rxbytes         = p->rx_bytes;
-	} while (u64_stats_fetch_retry_irq(&p->syncp_rx, start));
+	} while (u64_stats_fetch_retry(&p->syncp_rx, start));
 
 	do {
-		start = u64_stats_fetch_begin_irq(&p->syncp_tx);
+		start = u64_stats_fetch_begin(&p->syncp_tx);
 		txpackets       = p->tx_packets;
 		txbytes         = p->tx_bytes;
-	} while (u64_stats_fetch_retry_irq(&p->syncp_tx, start));
+	} while (u64_stats_fetch_retry(&p->syncp_tx, start));
 
 	stats->rx_packets = rxpackets;
 	stats->rx_bytes = rxbytes;
diff --git a/drivers/net/ethernet/via/via-rhine.c b/drivers/net/ethernet/via/via-rhine.c
index 7fe6d9ebf3af..b85a273895ed 100644
--- a/drivers/net/ethernet/via/via-rhine.c
+++ b/drivers/net/ethernet/via/via-rhine.c
@@ -2231,16 +2231,16 @@ rhine_get_stats64(struct net_device *dev, struct rtnl_link_stats64 *stats)
 	netdev_stats_to_stats64(stats, &dev->stats);
 
 	do {
-		start = u64_stats_fetch_begin_irq(&rp->rx_stats.syncp);
+		start = u64_stats_fetch_begin(&rp->rx_stats.syncp);
 		stats->rx_packets = rp->rx_stats.packets;
 		stats->rx_bytes = rp->rx_stats.bytes;
-	} while (u64_stats_fetch_retry_irq(&rp->rx_stats.syncp, start));
+	} while (u64_stats_fetch_retry(&rp->rx_stats.syncp, start));
 
 	do {
-		start = u64_stats_fetch_begin_irq(&rp->tx_stats.syncp);
+		start = u64_stats_fetch_begin(&rp->tx_stats.syncp);
 		stats->tx_packets = rp->tx_stats.packets;
 		stats->tx_bytes = rp->tx_stats.bytes;
-	} while (u64_stats_fetch_retry_irq(&rp->tx_stats.syncp, start));
+	} while (u64_stats_fetch_retry(&rp->tx_stats.syncp, start));
 }
 
 static void rhine_set_rx_mode(struct net_device *dev)
* Unmerged path drivers/net/ethernet/xilinx/xilinx_axienet_main.c
diff --git a/drivers/net/hyperv/netvsc_drv.c b/drivers/net/hyperv/netvsc_drv.c
index a8cff7cc2b19..02d18000e085 100644
--- a/drivers/net/hyperv/netvsc_drv.c
+++ b/drivers/net/hyperv/netvsc_drv.c
@@ -1287,12 +1287,12 @@ static void netvsc_get_vf_stats(struct net_device *net,
 		unsigned int start;
 
 		do {
-			start = u64_stats_fetch_begin_irq(&stats->syncp);
+			start = u64_stats_fetch_begin(&stats->syncp);
 			rx_packets = stats->rx_packets;
 			tx_packets = stats->tx_packets;
 			rx_bytes = stats->rx_bytes;
 			tx_bytes = stats->tx_bytes;
-		} while (u64_stats_fetch_retry_irq(&stats->syncp, start));
+		} while (u64_stats_fetch_retry(&stats->syncp, start));
 
 		tot->rx_packets += rx_packets;
 		tot->tx_packets += tx_packets;
@@ -1317,12 +1317,12 @@ static void netvsc_get_pcpu_stats(struct net_device *net,
 		unsigned int start;
 
 		do {
-			start = u64_stats_fetch_begin_irq(&stats->syncp);
+			start = u64_stats_fetch_begin(&stats->syncp);
 			this_tot->vf_rx_packets = stats->rx_packets;
 			this_tot->vf_tx_packets = stats->tx_packets;
 			this_tot->vf_rx_bytes = stats->rx_bytes;
 			this_tot->vf_tx_bytes = stats->tx_bytes;
-		} while (u64_stats_fetch_retry_irq(&stats->syncp, start));
+		} while (u64_stats_fetch_retry(&stats->syncp, start));
 		this_tot->rx_packets = this_tot->vf_rx_packets;
 		this_tot->tx_packets = this_tot->vf_tx_packets;
 		this_tot->rx_bytes   = this_tot->vf_rx_bytes;
@@ -1341,20 +1341,20 @@ static void netvsc_get_pcpu_stats(struct net_device *net,
 
 		tx_stats = &nvchan->tx_stats;
 		do {
-			start = u64_stats_fetch_begin_irq(&tx_stats->syncp);
+			start = u64_stats_fetch_begin(&tx_stats->syncp);
 			packets = tx_stats->packets;
 			bytes = tx_stats->bytes;
-		} while (u64_stats_fetch_retry_irq(&tx_stats->syncp, start));
+		} while (u64_stats_fetch_retry(&tx_stats->syncp, start));
 
 		this_tot->tx_bytes	+= bytes;
 		this_tot->tx_packets	+= packets;
 
 		rx_stats = &nvchan->rx_stats;
 		do {
-			start = u64_stats_fetch_begin_irq(&rx_stats->syncp);
+			start = u64_stats_fetch_begin(&rx_stats->syncp);
 			packets = rx_stats->packets;
 			bytes = rx_stats->bytes;
-		} while (u64_stats_fetch_retry_irq(&rx_stats->syncp, start));
+		} while (u64_stats_fetch_retry(&rx_stats->syncp, start));
 
 		this_tot->rx_bytes	+= bytes;
 		this_tot->rx_packets	+= packets;
@@ -1393,21 +1393,21 @@ static void netvsc_get_stats64(struct net_device *net,
 
 		tx_stats = &nvchan->tx_stats;
 		do {
-			start = u64_stats_fetch_begin_irq(&tx_stats->syncp);
+			start = u64_stats_fetch_begin(&tx_stats->syncp);
 			packets = tx_stats->packets;
 			bytes = tx_stats->bytes;
-		} while (u64_stats_fetch_retry_irq(&tx_stats->syncp, start));
+		} while (u64_stats_fetch_retry(&tx_stats->syncp, start));
 
 		t->tx_bytes	+= bytes;
 		t->tx_packets	+= packets;
 
 		rx_stats = &nvchan->rx_stats;
 		do {
-			start = u64_stats_fetch_begin_irq(&rx_stats->syncp);
+			start = u64_stats_fetch_begin(&rx_stats->syncp);
 			packets = rx_stats->packets;
 			bytes = rx_stats->bytes;
 			multicast = rx_stats->multicast + rx_stats->broadcast;
-		} while (u64_stats_fetch_retry_irq(&rx_stats->syncp, start));
+		} while (u64_stats_fetch_retry(&rx_stats->syncp, start));
 
 		t->rx_bytes	+= bytes;
 		t->rx_packets	+= packets;
@@ -1550,24 +1550,24 @@ static void netvsc_get_ethtool_stats(struct net_device *dev,
 		tx_stats = &nvdev->chan_table[j].tx_stats;
 
 		do {
-			start = u64_stats_fetch_begin_irq(&tx_stats->syncp);
+			start = u64_stats_fetch_begin(&tx_stats->syncp);
 			packets = tx_stats->packets;
 			bytes = tx_stats->bytes;
 			xdp_xmit = tx_stats->xdp_xmit;
-		} while (u64_stats_fetch_retry_irq(&tx_stats->syncp, start));
+		} while (u64_stats_fetch_retry(&tx_stats->syncp, start));
 		data[i++] = packets;
 		data[i++] = bytes;
 		data[i++] = xdp_xmit;
 
 		rx_stats = &nvdev->chan_table[j].rx_stats;
 		do {
-			start = u64_stats_fetch_begin_irq(&rx_stats->syncp);
+			start = u64_stats_fetch_begin(&rx_stats->syncp);
 			packets = rx_stats->packets;
 			bytes = rx_stats->bytes;
 			xdp_drop = rx_stats->xdp_drop;
 			xdp_redirect = rx_stats->xdp_redirect;
 			xdp_tx = rx_stats->xdp_tx;
-		} while (u64_stats_fetch_retry_irq(&rx_stats->syncp, start));
+		} while (u64_stats_fetch_retry(&rx_stats->syncp, start));
 		data[i++] = packets;
 		data[i++] = bytes;
 		data[i++] = xdp_drop;
* Unmerged path drivers/net/ifb.c
* Unmerged path drivers/net/ipvlan/ipvlan_main.c
* Unmerged path drivers/net/loopback.c
diff --git a/drivers/net/macsec.c b/drivers/net/macsec.c
index 78a3d5a82afb..2ea13ae75770 100644
--- a/drivers/net/macsec.c
+++ b/drivers/net/macsec.c
@@ -2213,9 +2213,9 @@ static int copy_rx_sc_stats(struct sk_buff *skb,
 
 		stats = per_cpu_ptr(pstats, cpu);
 		do {
-			start = u64_stats_fetch_begin_irq(&stats->syncp);
+			start = u64_stats_fetch_begin(&stats->syncp);
 			memcpy(&tmp, &stats->stats, sizeof(tmp));
-		} while (u64_stats_fetch_retry_irq(&stats->syncp, start));
+		} while (u64_stats_fetch_retry(&stats->syncp, start));
 
 		sum.InOctetsValidated += tmp.InOctetsValidated;
 		sum.InOctetsDecrypted += tmp.InOctetsDecrypted;
@@ -2277,9 +2277,9 @@ static int copy_tx_sc_stats(struct sk_buff *skb,
 
 		stats = per_cpu_ptr(pstats, cpu);
 		do {
-			start = u64_stats_fetch_begin_irq(&stats->syncp);
+			start = u64_stats_fetch_begin(&stats->syncp);
 			memcpy(&tmp, &stats->stats, sizeof(tmp));
-		} while (u64_stats_fetch_retry_irq(&stats->syncp, start));
+		} while (u64_stats_fetch_retry(&stats->syncp, start));
 
 		sum.OutPktsProtected   += tmp.OutPktsProtected;
 		sum.OutPktsEncrypted   += tmp.OutPktsEncrypted;
@@ -2317,9 +2317,9 @@ static int copy_secy_stats(struct sk_buff *skb,
 
 		stats = per_cpu_ptr(pstats, cpu);
 		do {
-			start = u64_stats_fetch_begin_irq(&stats->syncp);
+			start = u64_stats_fetch_begin(&stats->syncp);
 			memcpy(&tmp, &stats->stats, sizeof(tmp));
-		} while (u64_stats_fetch_retry_irq(&stats->syncp, start));
+		} while (u64_stats_fetch_retry(&stats->syncp, start));
 
 		sum.OutPktsUntagged  += tmp.OutPktsUntagged;
 		sum.InPktsUntagged   += tmp.InPktsUntagged;
* Unmerged path drivers/net/macvlan.c
diff --git a/drivers/net/mhi_net.c b/drivers/net/mhi_net.c
index aaa628f859fd..944b111a6e9b 100644
--- a/drivers/net/mhi_net.c
+++ b/drivers/net/mhi_net.c
@@ -104,19 +104,19 @@ static void mhi_ndo_get_stats64(struct net_device *ndev,
 	unsigned int start;
 
 	do {
-		start = u64_stats_fetch_begin_irq(&mhi_netdev->stats.rx_syncp);
+		start = u64_stats_fetch_begin(&mhi_netdev->stats.rx_syncp);
 		stats->rx_packets = u64_stats_read(&mhi_netdev->stats.rx_packets);
 		stats->rx_bytes = u64_stats_read(&mhi_netdev->stats.rx_bytes);
 		stats->rx_errors = u64_stats_read(&mhi_netdev->stats.rx_errors);
-	} while (u64_stats_fetch_retry_irq(&mhi_netdev->stats.rx_syncp, start));
+	} while (u64_stats_fetch_retry(&mhi_netdev->stats.rx_syncp, start));
 
 	do {
-		start = u64_stats_fetch_begin_irq(&mhi_netdev->stats.tx_syncp);
+		start = u64_stats_fetch_begin(&mhi_netdev->stats.tx_syncp);
 		stats->tx_packets = u64_stats_read(&mhi_netdev->stats.tx_packets);
 		stats->tx_bytes = u64_stats_read(&mhi_netdev->stats.tx_bytes);
 		stats->tx_errors = u64_stats_read(&mhi_netdev->stats.tx_errors);
 		stats->tx_dropped = u64_stats_read(&mhi_netdev->stats.tx_dropped);
-	} while (u64_stats_fetch_retry_irq(&mhi_netdev->stats.tx_syncp, start));
+	} while (u64_stats_fetch_retry(&mhi_netdev->stats.tx_syncp, start));
 }
 
 static const struct net_device_ops mhi_netdev_ops = {
* Unmerged path drivers/net/team/team.c
diff --git a/drivers/net/team/team_mode_loadbalance.c b/drivers/net/team/team_mode_loadbalance.c
index 5541e1c19936..8b7c6e5f4403 100644
--- a/drivers/net/team/team_mode_loadbalance.c
+++ b/drivers/net/team/team_mode_loadbalance.c
@@ -470,9 +470,9 @@ static void __lb_one_cpu_stats_add(struct lb_stats *acc_stats,
 	struct lb_stats tmp;
 
 	do {
-		start = u64_stats_fetch_begin_irq(syncp);
+		start = u64_stats_fetch_begin(syncp);
 		tmp.tx_bytes = cpu_stats->tx_bytes;
-	} while (u64_stats_fetch_retry_irq(syncp, start));
+	} while (u64_stats_fetch_retry(syncp, start));
 	acc_stats->tx_bytes += tmp.tx_bytes;
 }
 
diff --git a/drivers/net/veth.c b/drivers/net/veth.c
index b75844dafda8..2c5a0d835c27 100644
--- a/drivers/net/veth.c
+++ b/drivers/net/veth.c
@@ -188,12 +188,12 @@ static void veth_get_ethtool_stats(struct net_device *dev,
 		size_t offset;
 
 		do {
-			start = u64_stats_fetch_begin_irq(&rq_stats->syncp);
+			start = u64_stats_fetch_begin(&rq_stats->syncp);
 			for (j = 0; j < VETH_RQ_STATS_LEN; j++) {
 				offset = veth_rq_stats_desc[j].offset;
 				data[idx + j] = *(u64 *)(stats_base + offset);
 			}
-		} while (u64_stats_fetch_retry_irq(&rq_stats->syncp, start));
+		} while (u64_stats_fetch_retry(&rq_stats->syncp, start));
 		idx += VETH_RQ_STATS_LEN;
 	}
 
@@ -209,12 +209,12 @@ static void veth_get_ethtool_stats(struct net_device *dev,
 
 		tx_idx += (i % dev->real_num_tx_queues) * VETH_TQ_STATS_LEN;
 		do {
-			start = u64_stats_fetch_begin_irq(&rq_stats->syncp);
+			start = u64_stats_fetch_begin(&rq_stats->syncp);
 			for (j = 0; j < VETH_TQ_STATS_LEN; j++) {
 				offset = veth_tq_stats_desc[j].offset;
 				data[tx_idx + j] += *(u64 *)(base + offset);
 			}
-		} while (u64_stats_fetch_retry_irq(&rq_stats->syncp, start));
+		} while (u64_stats_fetch_retry(&rq_stats->syncp, start));
 	}
 }
 
@@ -406,13 +406,13 @@ static void veth_stats_rx(struct veth_stats *result, struct net_device *dev)
 		unsigned int start;
 
 		do {
-			start = u64_stats_fetch_begin_irq(&stats->syncp);
+			start = u64_stats_fetch_begin(&stats->syncp);
 			peer_tq_xdp_xmit_err = stats->vs.peer_tq_xdp_xmit_err;
 			xdp_tx_err = stats->vs.xdp_tx_err;
 			packets = stats->vs.xdp_packets;
 			bytes = stats->vs.xdp_bytes;
 			drops = stats->vs.rx_drops;
-		} while (u64_stats_fetch_retry_irq(&stats->syncp, start));
+		} while (u64_stats_fetch_retry(&stats->syncp, start));
 		result->peer_tq_xdp_xmit_err += peer_tq_xdp_xmit_err;
 		result->xdp_tx_err += xdp_tx_err;
 		result->xdp_packets += packets;
* Unmerged path drivers/net/virtio_net.c
diff --git a/drivers/net/vrf.c b/drivers/net/vrf.c
index e18fe47406ae..a40f40610194 100644
--- a/drivers/net/vrf.c
+++ b/drivers/net/vrf.c
@@ -92,13 +92,13 @@ static void vrf_get_stats64(struct net_device *dev,
 
 		dstats = per_cpu_ptr(dev->dstats, i);
 		do {
-			start = u64_stats_fetch_begin_irq(&dstats->syncp);
+			start = u64_stats_fetch_begin(&dstats->syncp);
 			tbytes = dstats->tx_bytes;
 			tpkts = dstats->tx_pkts;
 			tdrops = dstats->tx_drps;
 			rbytes = dstats->rx_bytes;
 			rpkts = dstats->rx_pkts;
-		} while (u64_stats_fetch_retry_irq(&dstats->syncp, start));
+		} while (u64_stats_fetch_retry(&dstats->syncp, start));
 		stats->tx_bytes += tbytes;
 		stats->tx_packets += tpkts;
 		stats->tx_dropped += tdrops;
* Unmerged path drivers/net/vxlan/vxlan_vnifilter.c
* Unmerged path drivers/net/wwan/mhi_wwan_mbim.c
diff --git a/drivers/net/xen-netfront.c b/drivers/net/xen-netfront.c
index c9ad8431e87a..b09587abe919 100644
--- a/drivers/net/xen-netfront.c
+++ b/drivers/net/xen-netfront.c
@@ -1101,16 +1101,16 @@ static void xennet_get_stats64(struct net_device *dev,
 		unsigned int start;
 
 		do {
-			start = u64_stats_fetch_begin_irq(&tx_stats->syncp);
+			start = u64_stats_fetch_begin(&tx_stats->syncp);
 			tx_packets = tx_stats->packets;
 			tx_bytes = tx_stats->bytes;
-		} while (u64_stats_fetch_retry_irq(&tx_stats->syncp, start));
+		} while (u64_stats_fetch_retry(&tx_stats->syncp, start));
 
 		do {
-			start = u64_stats_fetch_begin_irq(&rx_stats->syncp);
+			start = u64_stats_fetch_begin(&rx_stats->syncp);
 			rx_packets = rx_stats->packets;
 			rx_bytes = rx_stats->bytes;
-		} while (u64_stats_fetch_retry_irq(&rx_stats->syncp, start));
+		} while (u64_stats_fetch_retry(&rx_stats->syncp, start));
 
 		tot->rx_packets += rx_packets;
 		tot->tx_packets += tx_packets;
