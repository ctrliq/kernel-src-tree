net/mlx5: DR, Remove hw_ste from mlx5dr_ste to reduce memory

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Rongwei Liu <rongweil@nvidia.com>
commit 0d7f1595bb96bcf1d673d6541eb453bec800f051
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/0d7f1595.failed

It can be calculated via function mlx5dr_ste_get_hw_ste().
Very simple and lightweight, no need to use a dedicated member.

Reduce 8 bytes from struct mlx5dr_ste and its size is 48 bytes now.

	Signed-off-by: Rongwei Liu <rongweil@nvidia.com>
	Reviewed-by: Shun Hao <shunh@nvidia.com>
	Reviewed-by: Yevgeny Kliteynik <kliteyn@nvidia.com>
	Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
(cherry picked from commit 0d7f1595bb96bcf1d673d6541eb453bec800f051)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/steering/dr_rule.c
#	drivers/net/ethernet/mellanox/mlx5/core/steering/dr_send.c
#	drivers/net/ethernet/mellanox/mlx5/core/steering/dr_ste.c
#	drivers/net/ethernet/mellanox/mlx5/core/steering/dr_types.h
diff --cc drivers/net/ethernet/mellanox/mlx5/core/steering/dr_rule.c
index b4374578425b,ddfaf7891188..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/steering/dr_rule.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/steering/dr_rule.c
@@@ -243,12 -247,12 +245,18 @@@ dr_rule_rehash_copy_ste(struct mlx5dr_m
  	mlx5dr_ste_set_bit_mask(hw_ste, nic_matcher->ste_builder[sb_idx].bit_mask);
  
  	/* Copy STE control and tag */
++<<<<<<< HEAD
 +	memcpy(hw_ste, cur_ste->hw_ste, DR_STE_SIZE_REDUCED);
 +	mlx5dr_ste_set_miss_addr(dmn->ste_ctx, hw_ste,
 +				 nic_matcher->e_anchor->chunk->icm_addr);
++=======
+ 	icm_addr = mlx5dr_icm_pool_get_chunk_icm_addr(nic_matcher->e_anchor->chunk);
+ 	memcpy(hw_ste, mlx5dr_ste_get_hw_ste(cur_ste), DR_STE_SIZE_REDUCED);
+ 	mlx5dr_ste_set_miss_addr(dmn->ste_ctx, hw_ste, icm_addr);
++>>>>>>> 0d7f1595bb96 (net/mlx5: DR, Remove hw_ste from mlx5dr_ste to reduce memory)
  
  	new_idx = mlx5dr_ste_calc_hash_index(hw_ste, new_htbl);
 -	new_ste = &new_htbl->chunk->ste_arr[new_idx];
 +	new_ste = &new_htbl->ste_arr[new_idx];
  
  	if (mlx5dr_ste_is_not_used(new_ste)) {
  		mlx5dr_htbl_get(new_htbl);
@@@ -446,14 -450,14 +454,20 @@@ dr_rule_rehash_htbl(struct mlx5dr_rule 
  		 * (48B len) which works only on first 32B
  		 */
  		mlx5dr_ste_set_hit_addr(dmn->ste_ctx,
++<<<<<<< HEAD
 +					prev_htbl->ste_arr[0].hw_ste,
 +					new_htbl->chunk->icm_addr,
 +					new_htbl->chunk->num_of_entries);
++=======
+ 					prev_htbl->chunk->hw_ste_arr,
+ 					mlx5dr_icm_pool_get_chunk_icm_addr(new_htbl->chunk),
+ 					mlx5dr_icm_pool_get_chunk_num_of_entries(new_htbl->chunk));
++>>>>>>> 0d7f1595bb96 (net/mlx5: DR, Remove hw_ste from mlx5dr_ste to reduce memory)
  
 -		ste_to_update = &prev_htbl->chunk->ste_arr[0];
 +		ste_to_update = &prev_htbl->ste_arr[0];
  	} else {
  		mlx5dr_ste_set_hit_addr_by_next_htbl(dmn->ste_ctx,
- 						     cur_htbl->pointing_ste->hw_ste,
+ 						     mlx5dr_ste_get_hw_ste(cur_htbl->pointing_ste),
  						     new_htbl);
  		ste_to_update = cur_htbl->pointing_ste;
  	}
diff --cc drivers/net/ethernet/mellanox/mlx5/core/steering/dr_send.c
index bfb14b4b1906,ef19a66f5233..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/steering/dr_send.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/steering/dr_send.c
@@@ -495,7 -495,8 +495,12 @@@ int mlx5dr_send_postsend_htbl(struct ml
  			} else {
  				/* Copy data */
  				memcpy(data + ste_off,
++<<<<<<< HEAD
 +				       htbl->ste_arr[ste_index + j].hw_ste,
++=======
+ 				       htbl->chunk->hw_ste_arr +
+ 				       DR_STE_SIZE_REDUCED * (ste_index + j),
++>>>>>>> 0d7f1595bb96 (net/mlx5: DR, Remove hw_ste from mlx5dr_ste to reduce memory)
  				       DR_STE_SIZE_REDUCED);
  				/* Copy bit_mask */
  				memcpy(data + ste_off + DR_STE_SIZE_REDUCED,
diff --cc drivers/net/ethernet/mellanox/mlx5/core/steering/dr_ste.c
index 518e949847a3,09ebd3088857..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/steering/dr_ste.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/steering/dr_ste.c
@@@ -120,16 -120,23 +118,23 @@@ u64 mlx5dr_ste_get_icm_addr(struct mlx5
  
  u64 mlx5dr_ste_get_mr_addr(struct mlx5dr_ste *ste)
  {
 -	u32 index = ste - ste->htbl->chunk->ste_arr;
 +	u32 index = ste - ste->htbl->ste_arr;
  
 -	return mlx5dr_icm_pool_get_chunk_mr_addr(ste->htbl->chunk) + DR_STE_SIZE * index;
 +	return ste->htbl->chunk->mr_addr + DR_STE_SIZE * index;
  }
  
+ u8 *mlx5dr_ste_get_hw_ste(struct mlx5dr_ste *ste)
+ {
+ 	u64 index = ste - ste->htbl->chunk->ste_arr;
+ 
+ 	return ste->htbl->chunk->hw_ste_arr + DR_STE_SIZE_REDUCED * index;
+ }
+ 
  struct list_head *mlx5dr_ste_get_miss_list(struct mlx5dr_ste *ste)
  {
 -	u32 index = ste - ste->htbl->chunk->ste_arr;
 +	u32 index = ste - ste->htbl->ste_arr;
  
 -	return &ste->htbl->chunk->miss_list[index];
 +	return &ste->htbl->miss_list[index];
  }
  
  static void dr_ste_always_hit_htbl(struct mlx5dr_ste_ctx *ste_ctx,
@@@ -140,10 -147,10 +145,9 @@@
  
  	ste_ctx->set_byte_mask(hw_ste, next_htbl->byte_mask);
  	ste_ctx->set_next_lu_type(hw_ste, next_htbl->lu_type);
 -	ste_ctx->set_hit_addr(hw_ste, mlx5dr_icm_pool_get_chunk_icm_addr(chunk),
 -			      mlx5dr_icm_pool_get_chunk_num_of_entries(chunk));
 +	ste_ctx->set_hit_addr(hw_ste, chunk->icm_addr, chunk->num_of_entries);
  
- 	dr_ste_set_always_hit((struct dr_hw_ste_format *)ste->hw_ste);
+ 	dr_ste_set_always_hit((struct dr_hw_ste_format *)hw_ste);
  }
  
  bool mlx5dr_ste_is_last_in_rule(struct mlx5dr_matcher_rx_tx *nic_matcher,
@@@ -191,11 -198,11 +195,18 @@@ dr_ste_remove_head_ste(struct mlx5dr_st
  
  	/* Use temp ste because dr_ste_always_miss_addr
  	 * touches bit_mask area which doesn't exist at ste->hw_ste.
+ 	 * Need to use a full-sized (DR_STE_SIZE) hw_ste.
  	 */
++<<<<<<< HEAD
 +	memcpy(tmp_ste.hw_ste, ste->hw_ste, DR_STE_SIZE_REDUCED);
 +	miss_addr = nic_matcher->e_anchor->chunk->icm_addr;
 +	dr_ste_always_miss_addr(ste_ctx, &tmp_ste, miss_addr);
 +	memcpy(ste->hw_ste, tmp_ste.hw_ste, DR_STE_SIZE_REDUCED);
++=======
+ 	memcpy(tmp_data_ste, mlx5dr_ste_get_hw_ste(ste), DR_STE_SIZE_REDUCED);
+ 	dr_ste_always_miss_addr(ste_ctx, tmp_data_ste, miss_addr);
+ 	memcpy(mlx5dr_ste_get_hw_ste(ste), tmp_data_ste, DR_STE_SIZE_REDUCED);
++>>>>>>> 0d7f1595bb96 (net/mlx5: DR, Remove hw_ste from mlx5dr_ste to reduce memory)
  
  	list_del_init(&ste->miss_list_node);
  
@@@ -483,15 -502,12 +502,18 @@@ struct mlx5dr_ste_htbl *mlx5dr_ste_htbl
  	htbl->chunk = chunk;
  	htbl->lu_type = lu_type;
  	htbl->byte_mask = byte_mask;
 +	htbl->ste_arr = chunk->ste_arr;
 +	htbl->hw_ste_arr = chunk->hw_ste_arr;
 +	htbl->miss_list = chunk->miss_list;
  	htbl->refcount = 0;
 -	num_entries = mlx5dr_icm_pool_get_chunk_num_of_entries(chunk);
  
 -	for (i = 0; i < num_entries; i++) {
 -		struct mlx5dr_ste *ste = &chunk->ste_arr[i];
 +	for (i = 0; i < chunk->num_of_entries; i++) {
 +		struct mlx5dr_ste *ste = &htbl->ste_arr[i];
  
++<<<<<<< HEAD
 +		ste->hw_ste = htbl->hw_ste_arr + i * DR_STE_SIZE_REDUCED;
++=======
++>>>>>>> 0d7f1595bb96 (net/mlx5: DR, Remove hw_ste from mlx5dr_ste to reduce memory)
  		ste->htbl = htbl;
  		ste->refcount = 0;
  		INIT_LIST_HEAD(&ste->miss_list_node);
diff --cc drivers/net/ethernet/mellanox/mlx5/core/steering/dr_types.h
index 40f78ab4676e,46866a5fc5ca..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/steering/dr_types.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/steering/dr_types.h
@@@ -1146,6 -1134,13 +1145,16 @@@ int mlx5dr_matcher_select_builders(stru
  				   enum mlx5dr_ipv outer_ipv,
  				   enum mlx5dr_ipv inner_ipv);
  
++<<<<<<< HEAD
++=======
+ u64 mlx5dr_icm_pool_get_chunk_mr_addr(struct mlx5dr_icm_chunk *chunk);
+ u32 mlx5dr_icm_pool_get_chunk_rkey(struct mlx5dr_icm_chunk *chunk);
+ u64 mlx5dr_icm_pool_get_chunk_icm_addr(struct mlx5dr_icm_chunk *chunk);
+ u32 mlx5dr_icm_pool_get_chunk_num_of_entries(struct mlx5dr_icm_chunk *chunk);
+ u32 mlx5dr_icm_pool_get_chunk_byte_size(struct mlx5dr_icm_chunk *chunk);
+ u8 *mlx5dr_ste_get_hw_ste(struct mlx5dr_ste *ste);
+ 
++>>>>>>> 0d7f1595bb96 (net/mlx5: DR, Remove hw_ste from mlx5dr_ste to reduce memory)
  static inline int
  mlx5dr_icm_pool_dm_type_to_entry_size(enum mlx5dr_icm_type icm_type)
  {
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/steering/dr_dbg.c b/drivers/net/ethernet/mellanox/mlx5/core/steering/dr_dbg.c
index 687ff58688b6..124db34ed2e6 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/steering/dr_dbg.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/steering/dr_dbg.c
@@ -217,7 +217,8 @@ dr_dump_rule_mem(struct seq_file *file, struct mlx5dr_ste *ste,
 				       DR_DUMP_REC_TYPE_RULE_TX_ENTRY_V1;
 	}
 
-	dr_dump_hex_print(hw_ste_dump, (char *)ste->hw_ste, DR_STE_SIZE_REDUCED);
+	dr_dump_hex_print(hw_ste_dump, (char *)mlx5dr_ste_get_hw_ste(ste),
+			  DR_STE_SIZE_REDUCED);
 
 	seq_printf(file, "%d,0x%llx,0x%llx,%s\n", mem_rec_type,
 		   dr_dump_icm_to_idx(mlx5dr_ste_get_icm_addr(ste)), rule_id,
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/steering/dr_rule.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/steering/dr_send.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/steering/dr_ste.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/steering/dr_types.h
