iommu: Clarify default domain Kconfig

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Robin Murphy <robin.murphy@arm.com>
commit 8cc633190b524c678b740c87fa1fc37447151a6b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/8cc63319.failed

Although strictly it is the AMD and Intel drivers which have an existing
expectation of lazy behaviour by default, it ends up being rather
unintuitive to describe this literally in Kconfig. Express it instead as
an architecture dependency, to clarify that it is a valid config-time
decision. The end result is the same since virtio-iommu doesn't support
lazy mode and thus falls back to strict at runtime regardless.

The per-architecture disparity is a matter of historical expectations:
the AMD and Intel drivers have been lazy by default since 2008, and
changing that gets noticed by people asking where their I/O throughput
has gone. Conversely, Arm-based systems with their wider assortment of
IOMMU drivers mostly only support strict mode anyway; only the Arm SMMU
drivers have later grown support for passthrough and lazy mode, for
users who wanted to explicitly trade off isolation for performance.
These days, reducing the default level of isolation in a way which may
go unnoticed by users who expect otherwise hardly seems worth risking
for the sake of one line of Kconfig, so here's where we are.

	Reported-by: Linus Torvalds <torvalds@linux-foundation.org>
	Signed-off-by: Robin Murphy <robin.murphy@arm.com>
Link: https://lore.kernel.org/r/69a0c6f17b000b54b8333ee42b3124c1d5a869e2.1631105737.git.robin.murphy@arm.com
	Signed-off-by: Joerg Roedel <jroedel@suse.de>
(cherry picked from commit 8cc633190b524c678b740c87fa1fc37447151a6b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/iommu/Kconfig
diff --cc drivers/iommu/Kconfig
index bead5de04ae1,4aa626cf00d8..000000000000
--- a/drivers/iommu/Kconfig
+++ b/drivers/iommu/Kconfig
@@@ -78,16 -79,57 +78,59 @@@ config IOMMU_DEBUGF
  	  debug/iommu directory, and then populate a subdirectory with
  	  entries as required.
  
++<<<<<<< HEAD
++=======
+ choice
+ 	prompt "IOMMU default domain type"
+ 	depends on IOMMU_API
+ 	default IOMMU_DEFAULT_DMA_LAZY if X86 || IA64
+ 	default IOMMU_DEFAULT_DMA_STRICT
+ 	help
+ 	  Choose the type of IOMMU domain used to manage DMA API usage by
+ 	  device drivers. The options here typically represent different
+ 	  levels of tradeoff between robustness/security and performance,
+ 	  depending on the IOMMU driver. Not all IOMMUs support all options.
+ 	  This choice can be overridden at boot via the command line, and for
+ 	  some devices also at runtime via sysfs.
+ 
+ 	  If unsure, keep the default.
+ 
+ config IOMMU_DEFAULT_DMA_STRICT
+ 	bool "Translated - Strict"
+ 	help
+ 	  Trusted devices use translation to restrict their access to only
+ 	  DMA-mapped pages, with strict TLB invalidation on unmap. Equivalent
+ 	  to passing "iommu.passthrough=0 iommu.strict=1" on the command line.
+ 
+ 	  Untrusted devices always use this mode, with an additional layer of
+ 	  bounce-buffering such that they cannot gain access to any unrelated
+ 	  data within a mapped page.
+ 
+ config IOMMU_DEFAULT_DMA_LAZY
+ 	bool "Translated - Lazy"
+ 	help
+ 	  Trusted devices use translation to restrict their access to only
+ 	  DMA-mapped pages, but with "lazy" batched TLB invalidation. This
+ 	  mode allows higher performance with some IOMMUs due to reduced TLB
+ 	  flushing, but at the cost of reduced isolation since devices may be
+ 	  able to access memory for some time after it has been unmapped.
+ 	  Equivalent to passing "iommu.passthrough=0 iommu.strict=0" on the
+ 	  command line.
+ 
+ 	  If this mode is not supported by the IOMMU driver, the effective
+ 	  runtime default will fall back to IOMMU_DEFAULT_DMA_STRICT.
+ 
++>>>>>>> 8cc633190b52 (iommu: Clarify default domain Kconfig)
  config IOMMU_DEFAULT_PASSTHROUGH
 -	bool "Passthrough"
 +	bool "IOMMU passthrough by default"
 +	depends on IOMMU_API
  	help
 -	  Trusted devices are identity-mapped, giving them unrestricted access
 -	  to memory with minimal performance overhead. Equivalent to passing
 -	  "iommu.passthrough=1" (historically "iommu=pt") on the command line.
 -
 -	  If this mode is not supported by the IOMMU driver, the effective
 -	  runtime default will fall back to IOMMU_DEFAULT_DMA_STRICT.
 +	  Enable passthrough by default, removing the need to pass in
 +	  iommu.passthrough=on or iommu=pt through command line. If this
 +	  is enabled, you can still disable with iommu.passthrough=off
 +	  or iommu=nopt depending on the architecture.
  
 -endchoice
 +	  If unsure, say N here.
  
  config OF_IOMMU
  	def_bool y
* Unmerged path drivers/iommu/Kconfig
