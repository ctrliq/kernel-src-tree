wifi: mac80211: make ieee80211_he_cap_ie_to_sta_he_cap() MLO-aware

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Johannes Berg <johannes.berg@intel.com>
commit 40a27ea07949a022a083de28da99f8f472242e2e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/40a27ea0.failed

Add the link_id parameter and adjust the code accordingly.

	Signed-off-by: Johannes Berg <johannes.berg@intel.com>
(cherry picked from commit 40a27ea07949a022a083de28da99f8f472242e2e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/mac80211/he.c
diff --cc net/mac80211/he.c
index c05af7018f79,e48e9a021622..000000000000
--- a/net/mac80211/he.c
+++ b/net/mac80211/he.c
@@@ -49,7 -49,7 +49,11 @@@ ieee80211_update_from_he_6ghz_capa(cons
  		break;
  	}
  
++<<<<<<< HEAD
 +	sta->sta.he_6ghz_capa = *he_6ghz_capa;
++=======
+ 	sta->sta.link[link_id]->he_6ghz_capa = *he_6ghz_capa;
++>>>>>>> 40a27ea07949 (wifi: mac80211: make ieee80211_he_cap_ie_to_sta_he_cap() MLO-aware)
  }
  
  static void ieee80211_he_mcs_disable(__le16 *he_mcs)
@@@ -108,9 -108,9 +112,13 @@@ ieee80211_he_cap_ie_to_sta_he_cap(struc
  				  struct ieee80211_supported_band *sband,
  				  const u8 *he_cap_ie, u8 he_cap_len,
  				  const struct ieee80211_he_6ghz_capa *he_6ghz_capa,
- 				  struct sta_info *sta)
+ 				  struct sta_info *sta, unsigned int link_id)
  {
++<<<<<<< HEAD
 +	struct ieee80211_sta_he_cap *he_cap = &sta->sta.he_cap;
++=======
+ 	struct ieee80211_sta_he_cap *he_cap = &sta->sta.link[link_id]->he_cap;
++>>>>>>> 40a27ea07949 (wifi: mac80211: make ieee80211_he_cap_ie_to_sta_he_cap() MLO-aware)
  	struct ieee80211_sta_he_cap own_he_cap;
  	struct ieee80211_he_cap_elem *he_cap_ie_elem = (void *)he_cap_ie;
  	u8 he_ppe_size;
@@@ -153,11 -153,13 +161,18 @@@
  
  	he_cap->has_he = true;
  
++<<<<<<< HEAD
 +	sta->cur_max_bandwidth = ieee80211_sta_cap_rx_bw(sta);
 +	sta->sta.bandwidth = ieee80211_sta_cur_vht_bw(sta);
++=======
+ 	sta->link[link_id]->cur_max_bandwidth =
+ 		ieee80211_sta_cap_rx_bw(sta, link_id);
+ 	sta->sta.link[link_id]->bandwidth =
+ 		ieee80211_sta_cur_vht_bw(sta, link_id);
++>>>>>>> 40a27ea07949 (wifi: mac80211: make ieee80211_he_cap_ie_to_sta_he_cap() MLO-aware)
  
  	if (sband->band == NL80211_BAND_6GHZ && he_6ghz_capa)
- 		ieee80211_update_from_he_6ghz_capa(he_6ghz_capa, sta);
+ 		ieee80211_update_from_he_6ghz_capa(he_6ghz_capa, sta, link_id);
  
  	ieee80211_he_mcs_intersection(&own_he_cap.he_mcs_nss_supp.rx_mcs_80,
  				      &he_cap->he_mcs_nss_supp.rx_mcs_80,
diff --git a/net/mac80211/cfg.c b/net/mac80211/cfg.c
index f7b5957d466a..5d8fcd2de993 100644
--- a/net/mac80211/cfg.c
+++ b/net/mac80211/cfg.c
@@ -1750,7 +1750,7 @@ static int sta_apply_parameters(struct ieee80211_local *local,
 						  (void *)params->he_capa,
 						  params->he_capa_len,
 						  (void *)params->he_6ghz_capa,
-						  sta);
+						  sta, 0);
 
 	if (params->eht_capa)
 		ieee80211_eht_cap_ie_to_sta_eht_cap(sdata, sband,
* Unmerged path net/mac80211/he.c
diff --git a/net/mac80211/ieee80211_i.h b/net/mac80211/ieee80211_i.h
index aebf2fa517be..c4db08d5f244 100644
--- a/net/mac80211/ieee80211_i.h
+++ b/net/mac80211/ieee80211_i.h
@@ -2122,7 +2122,7 @@ ieee80211_he_cap_ie_to_sta_he_cap(struct ieee80211_sub_if_data *sdata,
 				  struct ieee80211_supported_band *sband,
 				  const u8 *he_cap_ie, u8 he_cap_len,
 				  const struct ieee80211_he_6ghz_capa *he_6ghz_capa,
-				  struct sta_info *sta);
+				  struct sta_info *sta, unsigned int link_id);
 void
 ieee80211_he_spr_ie_to_bss_conf(struct ieee80211_vif *vif,
 				const struct ieee80211_he_spr *he_spr_ie_elem);
diff --git a/net/mac80211/mesh_plink.c b/net/mac80211/mesh_plink.c
index a829470dd59e..2e2f75bb2437 100644
--- a/net/mac80211/mesh_plink.c
+++ b/net/mac80211/mesh_plink.c
@@ -447,7 +447,7 @@ static void mesh_sta_info_init(struct ieee80211_sub_if_data *sdata,
 	ieee80211_he_cap_ie_to_sta_he_cap(sdata, sband, elems->he_cap,
 					  elems->he_cap_len,
 					  elems->he_6ghz_capa,
-					  sta);
+					  sta, 0);
 
 	if (bw != sta->sta.bandwidth)
 		changed |= IEEE80211_RC_BW_CHANGED;
diff --git a/net/mac80211/mlme.c b/net/mac80211/mlme.c
index dbd8b816487b..872b343e9f74 100644
--- a/net/mac80211/mlme.c
+++ b/net/mac80211/mlme.c
@@ -3578,7 +3578,7 @@ static bool ieee80211_assoc_success(struct ieee80211_sub_if_data *sdata,
 						  elems->he_cap,
 						  elems->he_cap_len,
 						  elems->he_6ghz_capa,
-						  sta);
+						  sta, 0);
 
 		bss_conf->he_support = sta->sta.he_cap.has_he;
 		if (elems->rsnx && elems->rsnx_len &&
