wifi: cfg80211: Increase akm_suites array size in cfg80211_crypto_settings

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Veerendranath Jakkam <quic_vjakkam@quicinc.com>
commit ecad3b0b99bff7247a11f8c7cb19ac9b0cb28b09
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/ecad3b0b.failed

Increase akm_suites array size in struct cfg80211_crypto_settings to 10
and advertise the capability to userspace. This allows userspace to send
more than two AKMs to driver in netlink commands such as
NL80211_CMD_CONNECT.

This capability is needed for implementing WPA3-Personal transition mode
correctly with any driver that handles roaming internally. Currently,
the possible AKMs for multi-AKM connect can include PSK, PSK-SHA-256,
SAE, FT-PSK and FT-SAE. Since the count is already 5, increasing
the akm_suites array size to 10 should be reasonable for future
usecases.

	Signed-off-by: Veerendranath Jakkam <quic_vjakkam@quicinc.com>
Link: https://lore.kernel.org/r/1653312358-12321-1-git-send-email-quic_vjakkam@quicinc.com
	Signed-off-by: Johannes Berg <johannes.berg@intel.com>
(cherry picked from commit ecad3b0b99bff7247a11f8c7cb19ac9b0cb28b09)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/uapi/linux/nl80211.h
#	net/wireless/nl80211.c
diff --cc include/uapi/linux/nl80211.h
index 89c2cfb97539,279f9715919e..000000000000
--- a/include/uapi/linux/nl80211.h
+++ b/include/uapi/linux/nl80211.h
@@@ -2653,6 -2683,24 +2653,27 @@@ enum nl80211_commands 
   *	association request when used with NL80211_CMD_NEW_STATION). Can be set
   *	only if %NL80211_STA_FLAG_WME is set.
   *
++<<<<<<< HEAD
++=======
+  * @NL80211_ATTR_MLO_LINK_ID: A (u8) link ID for use with MLO, to be used with
+  *	various commands that need a link ID to operate.
+  * @NL80211_ATTR_MLO_LINKS: A nested array of links, each containing some
+  *	per-link information and a link ID.
+  * @NL80211_ATTR_MLD_ADDR: An MLD address, used with various commands such as
+  *	authenticate/associate.
+  *
+  * @NL80211_ATTR_MLO_SUPPORT: Flag attribute to indicate user space supports MLO
+  *	connection. Used with %NL80211_CMD_CONNECT. If this attribute is not
+  *	included in NL80211_CMD_CONNECT drivers must not perform MLO connection.
+  *
+  * @NL80211_ATTR_MAX_NUM_AKM_SUITES: U16 attribute. Indicates maximum number of
+  *	AKM suites allowed for %NL80211_CMD_CONNECT, %NL80211_CMD_ASSOCIATE and
+  *	%NL80211_CMD_START_AP in %NL80211_CMD_GET_WIPHY response. If this
+  *	attribute is not present userspace shall consider maximum number of AKM
+  *	suites allowed as %NL80211_MAX_NR_AKM_SUITES which is the legacy maximum
+  *	number prior to the introduction of this attribute.
+  *
++>>>>>>> ecad3b0b99bf (wifi: cfg80211: Increase akm_suites array size in cfg80211_crypto_settings)
   * @NUM_NL80211_ATTR: total number of nl80211_attrs available
   * @NL80211_ATTR_MAX: highest attribute number currently defined
   * @__NL80211_ATTR_AFTER_LAST: internal use
@@@ -3167,6 -3215,14 +3188,17 @@@ enum nl80211_attrs 
  
  	NL80211_ATTR_DISABLE_EHT,
  
++<<<<<<< HEAD
++=======
+ 	NL80211_ATTR_MLO_LINKS,
+ 	NL80211_ATTR_MLO_LINK_ID,
+ 	NL80211_ATTR_MLD_ADDR,
+ 
+ 	NL80211_ATTR_MLO_SUPPORT,
+ 
+ 	NL80211_ATTR_MAX_NUM_AKM_SUITES,
+ 
++>>>>>>> ecad3b0b99bf (wifi: cfg80211: Increase akm_suites array size in cfg80211_crypto_settings)
  	/* add attributes here, update the policy in nl80211.c */
  
  	__NL80211_ATTR_AFTER_LAST,
diff --cc net/wireless/nl80211.c
index 1c8f0d4587fd,e2b6740268a6..000000000000
--- a/net/wireless/nl80211.c
+++ b/net/wireless/nl80211.c
@@@ -792,6 -792,13 +792,16 @@@ static const struct nla_policy nl80211_
  				 NL80211_EHT_MIN_CAPABILITY_LEN,
  				 NL80211_EHT_MAX_CAPABILITY_LEN),
  	[NL80211_ATTR_DISABLE_EHT] = { .type = NLA_FLAG },
++<<<<<<< HEAD
++=======
+ 	[NL80211_ATTR_MLO_LINKS] =
+ 		NLA_POLICY_NESTED_ARRAY(nl80211_policy),
+ 	[NL80211_ATTR_MLO_LINK_ID] =
+ 		NLA_POLICY_RANGE(NLA_U8, 0, IEEE80211_MLD_MAX_NUM_LINKS),
+ 	[NL80211_ATTR_MLD_ADDR] = NLA_POLICY_EXACT_LEN(ETH_ALEN),
+ 	[NL80211_ATTR_MLO_SUPPORT] = { .type = NLA_FLAG },
+ 	[NL80211_ATTR_MAX_NUM_AKM_SUITES] = { .type = NLA_REJECT },
++>>>>>>> ecad3b0b99bf (wifi: cfg80211: Increase akm_suites array size in cfg80211_crypto_settings)
  };
  
  /* policy for the key attributes */
diff --git a/drivers/net/wireless/quantenna/qtnfmac/commands.c b/drivers/net/wireless/quantenna/qtnfmac/commands.c
index d74b72367adc..b73e9d3abd1f 100644
--- a/drivers/net/wireless/quantenna/qtnfmac/commands.c
+++ b/drivers/net/wireless/quantenna/qtnfmac/commands.c
@@ -231,6 +231,7 @@ int qtnf_cmd_send_start_ap(struct qtnf_vif *vif,
 	u16 res_code = QLINK_CMD_RESULT_OK;
 	int ret;
 	int i;
+	int n;
 
 	if (!qtnf_cmd_start_ap_can_fit(vif, s))
 		return -E2BIG;
@@ -262,8 +263,9 @@ int qtnf_cmd_send_start_ap(struct qtnf_vif *vif,
 	for (i = 0; i < QLINK_MAX_NR_CIPHER_SUITES; i++)
 		aen->ciphers_pairwise[i] =
 				cpu_to_le32(s->crypto.ciphers_pairwise[i]);
-	aen->n_akm_suites = cpu_to_le32(s->crypto.n_akm_suites);
-	for (i = 0; i < QLINK_MAX_NR_AKM_SUITES; i++)
+	n = min(QLINK_MAX_NR_AKM_SUITES, s->crypto.n_akm_suites);
+	aen->n_akm_suites = cpu_to_le32(n);
+	for (i = 0; i < n; i++)
 		aen->akm_suites[i] = cpu_to_le32(s->crypto.akm_suites[i]);
 	aen->control_port = s->crypto.control_port;
 	aen->control_port_no_encrypt = s->crypto.control_port_no_encrypt;
@@ -2319,6 +2321,7 @@ int qtnf_cmd_send_connect(struct qtnf_vif *vif,
 	u16 res_code = QLINK_CMD_RESULT_OK;
 	int ret;
 	int i;
+	int n;
 	u32 connect_flags = 0;
 
 	cmd_skb = qtnf_cmd_alloc_new_cmdskb(vif->mac->macid, vif->vifid,
@@ -2375,9 +2378,10 @@ int qtnf_cmd_send_connect(struct qtnf_vif *vif,
 		aen->ciphers_pairwise[i] =
 			cpu_to_le32(sme->crypto.ciphers_pairwise[i]);
 
-	aen->n_akm_suites = cpu_to_le32(sme->crypto.n_akm_suites);
+	n = min(QLINK_MAX_NR_AKM_SUITES, sme->crypto.n_akm_suites);
+	aen->n_akm_suites = cpu_to_le32(n);
 
-	for (i = 0; i < QLINK_MAX_NR_AKM_SUITES; i++)
+	for (i = 0; i < n; i++)
 		aen->akm_suites[i] = cpu_to_le32(sme->crypto.akm_suites[i]);
 
 	aen->control_port = sme->crypto.control_port;
diff --git a/include/net/cfg80211.h b/include/net/cfg80211.h
index 5ef76aa56d74..71aaf9a36d9d 100644
--- a/include/net/cfg80211.h
+++ b/include/net/cfg80211.h
@@ -1060,6 +1060,7 @@ struct survey_info {
 };
 
 #define CFG80211_MAX_WEP_KEYS	4
+#define CFG80211_MAX_NUM_AKM_SUITES	10
 
 /**
  * struct cfg80211_crypto_settings - Crypto settings
@@ -1111,7 +1112,7 @@ struct cfg80211_crypto_settings {
 	int n_ciphers_pairwise;
 	u32 ciphers_pairwise[NL80211_MAX_NR_CIPHER_SUITES];
 	int n_akm_suites;
-	u32 akm_suites[NL80211_MAX_NR_AKM_SUITES];
+	u32 akm_suites[CFG80211_MAX_NUM_AKM_SUITES];
 	bool control_port;
 	__be16 control_port_ethertype;
 	bool control_port_no_encrypt;
@@ -5133,6 +5134,13 @@ struct wiphy_iftype_akm_suites {
  * @ema_max_profile_periodicity: maximum profile periodicity supported by
  *	the driver. Setting this field to a non-zero value indicates that the
  *	driver supports enhanced multi-BSSID advertisements (EMA AP).
+ * @max_num_akm_suites: maximum number of AKM suites allowed for
+ *	configuration through %NL80211_CMD_CONNECT, %NL80211_CMD_ASSOCIATE and
+ *	%NL80211_CMD_START_AP. Set to NL80211_MAX_NR_AKM_SUITES if not set by
+ *	driver. If set by driver minimum allowed value is
+ *	NL80211_MAX_NR_AKM_SUITES in order to avoid compatibility issues with
+ *	legacy userspace and maximum allowed value is
+ *	CFG80211_MAX_NUM_AKM_SUITES.
  */
 struct wiphy {
 	struct mutex mtx;
@@ -5279,6 +5287,7 @@ struct wiphy {
 
 	u8 mbssid_max_interfaces;
 	u8 ema_max_profile_periodicity;
+	u16 max_num_akm_suites;
 
 	char priv[] __aligned(NETDEV_ALIGN);
 };
* Unmerged path include/uapi/linux/nl80211.h
diff --git a/net/wireless/core.c b/net/wireless/core.c
index f08d4b3bb148..8d42fc4604b5 100644
--- a/net/wireless/core.c
+++ b/net/wireless/core.c
@@ -913,6 +913,12 @@ int wiphy_register(struct wiphy *wiphy)
 		return -EINVAL;
 #endif
 
+	if (!wiphy->max_num_akm_suites)
+		wiphy->max_num_akm_suites = NL80211_MAX_NR_AKM_SUITES;
+	else if (wiphy->max_num_akm_suites < NL80211_MAX_NR_AKM_SUITES ||
+		 wiphy->max_num_akm_suites > CFG80211_MAX_NUM_AKM_SUITES)
+		return -EINVAL;
+
 	/* check and set up bitrates */
 	ieee80211_set_bitrate_flags(wiphy);
 
* Unmerged path net/wireless/nl80211.c
