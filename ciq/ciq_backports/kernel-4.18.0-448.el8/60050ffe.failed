certs: Move load_certificate_list() to be with the asymmetric keys code

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author David Howells <dhowells@redhat.com>
commit 60050ffe3d770dd1df5b641aa48f49d07a54bd84
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/60050ffe.failed

Move load_certificate_list(), which loads a series of binary X.509
certificates from a blob and inserts them as keys into a keyring, to be
with the asymmetric keys code that it drives.

This makes it easier to add FIPS selftest code in which we need to load up
a private keyring for the tests to use.

	Signed-off-by: David Howells <dhowells@redhat.com>
	Reviewed-by: Simo Sorce <simo@redhat.com>
	Reviewed-by: Herbert Xu <herbert@gondor.apana.org.au>
cc: keyrings@vger.kernel.org
cc: linux-crypto@vger.kernel.org
Link: https://lore.kernel.org/r/165515742145.1554877.13488098107542537203.stgit@warthog.procyon.org.uk/
(cherry picked from commit 60050ffe3d770dd1df5b641aa48f49d07a54bd84)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	certs/blacklist.c
#	certs/system_keyring.c
diff --cc certs/blacklist.c
index 34666e9183ca,41f10601cc72..000000000000
--- a/certs/blacklist.c
+++ b/certs/blacklist.c
@@@ -18,10 -14,24 +18,14 @@@
  #include <linux/ctype.h>
  #include <linux/err.h>
  #include <linux/seq_file.h>
++<<<<<<< HEAD
++=======
+ #include <linux/uidgid.h>
+ #include <keys/asymmetric-type.h>
++>>>>>>> 60050ffe3d77 (certs: Move load_certificate_list() to be with the asymmetric keys code)
  #include <keys/system_keyring.h>
  #include "blacklist.h"
- #include "common.h"
  
 -/*
 - * According to crypto/asymmetric_keys/x509_cert_parser.c:x509_note_pkey_algo(),
 - * the size of the currently longest supported hash algorithm is 512 bits,
 - * which translates into 128 hex characters.
 - */
 -#define MAX_HASH_LEN	128
 -
 -#define BLACKLIST_KEY_PERM (KEY_POS_SEARCH | KEY_POS_VIEW | \
 -			    KEY_USR_SEARCH | KEY_USR_VIEW)
 -
 -static const char tbs_prefix[] = "tbs";
 -static const char bin_prefix[] = "bin";
 -
  static struct key *blacklist_keyring;
  
  #ifdef CONFIG_SYSTEM_REVOCATION_LIST
diff --cc certs/system_keyring.c
index c95357e28745,5042cc54fa5e..000000000000
--- a/certs/system_keyring.c
+++ b/certs/system_keyring.c
@@@ -136,15 -175,36 +135,41 @@@ static __init int system_trusted_keyrin
   */
  device_initcall(system_trusted_keyring_init);
  
++<<<<<<< HEAD
++=======
+ __init int load_module_cert(struct key *keyring)
+ {
+ 	if (!IS_ENABLED(CONFIG_IMA_APPRAISE_MODSIG))
+ 		return 0;
+ 
+ 	pr_notice("Loading compiled-in module X.509 certificates\n");
+ 
+ 	return x509_load_certificate_list(system_certificate_list,
+ 					  module_cert_size, keyring);
+ }
+ 
++>>>>>>> 60050ffe3d77 (certs: Move load_certificate_list() to be with the asymmetric keys code)
  /*
   * Load the compiled-in list of X.509 certificates.
   */
  static __init int load_system_certificate_list(void)
  {
 -	const u8 *p;
 -	unsigned long size;
 -
  	pr_notice("Loading compiled-in X.509 certificates\n");
  
++<<<<<<< HEAD
 +	return load_certificate_list(system_certificate_list, system_certificate_list_size,
 +				     builtin_trusted_keys);
++=======
+ #ifdef CONFIG_MODULE_SIG
+ 	p = system_certificate_list;
+ 	size = system_certificate_list_size;
+ #else
+ 	p = system_certificate_list + module_cert_size;
+ 	size = system_certificate_list_size - module_cert_size;
+ #endif
+ 
+ 	return x509_load_certificate_list(p, size, builtin_trusted_keys);
++>>>>>>> 60050ffe3d77 (certs: Move load_certificate_list() to be with the asymmetric keys code)
  }
  late_initcall(load_system_certificate_list);
  
diff --git a/certs/Makefile b/certs/Makefile
index c10a97d60468..313426e023c0 100644
--- a/certs/Makefile
+++ b/certs/Makefile
@@ -3,8 +3,8 @@
 # Makefile for the linux kernel signature checking certificates.
 #
 
-obj-$(CONFIG_SYSTEM_TRUSTED_KEYRING) += system_keyring.o system_certificates.o common.o
-obj-$(CONFIG_SYSTEM_BLACKLIST_KEYRING) += blacklist.o common.o
+obj-$(CONFIG_SYSTEM_TRUSTED_KEYRING) += system_keyring.o system_certificates.o
+obj-$(CONFIG_SYSTEM_BLACKLIST_KEYRING) += blacklist.o
 obj-$(CONFIG_SYSTEM_REVOCATION_LIST) += revocation_certificates.o
 ifneq ($(CONFIG_SYSTEM_BLACKLIST_HASH_LIST),"")
 obj-$(CONFIG_SYSTEM_BLACKLIST_KEYRING) += blacklist_hashes.o
* Unmerged path certs/blacklist.c
diff --git a/certs/common.h b/certs/common.h
deleted file mode 100644
index abdb5795936b..000000000000
--- a/certs/common.h
+++ /dev/null
@@ -1,9 +0,0 @@
-/* SPDX-License-Identifier: GPL-2.0-or-later */
-
-#ifndef _CERT_COMMON_H
-#define _CERT_COMMON_H
-
-int load_certificate_list(const u8 cert_list[], const unsigned long list_size,
-			  const struct key *keyring);
-
-#endif
* Unmerged path certs/system_keyring.c
diff --git a/crypto/asymmetric_keys/Makefile b/crypto/asymmetric_keys/Makefile
index d4b2e1b2dc65..9d65233f1c22 100644
--- a/crypto/asymmetric_keys/Makefile
+++ b/crypto/asymmetric_keys/Makefile
@@ -20,6 +20,7 @@ x509_key_parser-y := \
 	x509.asn1.o \
 	x509_akid.asn1.o \
 	x509_cert_parser.o \
+	x509_loader.o \
 	x509_public_key.o
 
 $(obj)/x509_cert_parser.o: \
diff --git a/certs/common.c b/crypto/asymmetric_keys/x509_loader.c
similarity index 87%
rename from certs/common.c
rename to crypto/asymmetric_keys/x509_loader.c
index 16a220887a53..1bc169dee22e 100644
--- a/certs/common.c
+++ b/crypto/asymmetric_keys/x509_loader.c
@@ -2,11 +2,11 @@
 
 #include <linux/kernel.h>
 #include <linux/key.h>
-#include "common.h"
+#include <keys/asymmetric-type.h>
 
-int load_certificate_list(const u8 cert_list[],
-			  const unsigned long list_size,
-			  const struct key *keyring)
+int x509_load_certificate_list(const u8 cert_list[],
+			       const unsigned long list_size,
+			       const struct key *keyring)
 {
 	key_ref_t key;
 	const u8 *p, *end;
diff --git a/include/keys/asymmetric-type.h b/include/keys/asymmetric-type.h
index 1cb77cd5135e..5afba14fe1b8 100644
--- a/include/keys/asymmetric-type.h
+++ b/include/keys/asymmetric-type.h
@@ -81,6 +81,9 @@ extern struct key *find_asymmetric_key(struct key *keyring,
 				       const struct asymmetric_key_id *id_1,
 				       bool partial);
 
+int x509_load_certificate_list(const u8 cert_list[], const unsigned long list_size,
+			       const struct key *keyring);
+
 /*
  * The payload is at the discretion of the subtype.
  */
