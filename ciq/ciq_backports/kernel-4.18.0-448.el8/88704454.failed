vsock/virtio: enable VQs early on probe

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Stefano Garzarella <sgarzare@redhat.com>
commit 88704454ef8b00ea91537ae0d47d9348077e0e72
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/88704454.failed

virtio spec requires drivers to set DRIVER_OK before using VQs.
This is set automatically after probe returns, but virtio-vsock
driver uses VQs in the probe function to fill rx and event VQs
with new buffers.

Let's fix this, calling virtio_device_ready() before using VQs
in the probe function.

Fixes: 0ea9e1d3a9e3 ("VSOCK: Introduce virtio_transport.ko")
	Signed-off-by: Stefano Garzarella <sgarzare@redhat.com>
	Acked-by: Michael S. Tsirkin <mst@redhat.com>
	Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
	Signed-off-by: Jakub Kicinski <kuba@kernel.org>
(cherry picked from commit 88704454ef8b00ea91537ae0d47d9348077e0e72)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/vmw_vsock/virtio_transport.c
diff --cc net/vmw_vsock/virtio_transport.c
index 8a7958e6e9ce,ba1c8cc0c467..000000000000
--- a/net/vmw_vsock/virtio_transport.c
+++ b/net/vmw_vsock/virtio_transport.c
@@@ -599,6 -622,13 +599,16 @@@ static int virtio_vsock_probe(struct vi
  	INIT_WORK(&vsock->event_work, virtio_transport_event_work);
  	INIT_WORK(&vsock->send_pkt_work, virtio_transport_send_pkt_work);
  
++<<<<<<< HEAD
++=======
+ 	if (virtio_has_feature(vdev, VIRTIO_VSOCK_F_SEQPACKET))
+ 		vsock->seqpacket_allow = true;
+ 
+ 	vdev->priv = vsock;
+ 
+ 	virtio_device_ready(vdev);
+ 
++>>>>>>> 88704454ef8b (vsock/virtio: enable VQs early on probe)
  	mutex_lock(&vsock->tx_lock);
  	vsock->tx_run = true;
  	mutex_unlock(&vsock->tx_lock);
* Unmerged path net/vmw_vsock/virtio_transport.c
