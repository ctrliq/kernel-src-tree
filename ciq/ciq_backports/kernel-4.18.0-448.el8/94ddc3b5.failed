wifi: mac80211: move ieee80211_request_smps_mgd_work

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Johannes Berg <johannes.berg@intel.com>
commit 94ddc3b5aa21c261be277eab8bc80f7520038a34
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/94ddc3b5.failed

This function can be static.

	Signed-off-by: Johannes Berg <johannes.berg@intel.com>
(cherry picked from commit 94ddc3b5aa21c261be277eab8bc80f7520038a34)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/mac80211/ht.c
#	net/mac80211/ieee80211_i.h
diff --cc net/mac80211/ht.c
index 2eb7641f5556,8c24817cd497..000000000000
--- a/net/mac80211/ht.c
+++ b/net/mac80211/ht.c
@@@ -539,18 -550,7 +539,22 @@@ int ieee80211_send_smps_action(struct i
  	return 0;
  }
  
++<<<<<<< HEAD
 +void ieee80211_request_smps_mgd_work(struct work_struct *work)
 +{
 +	struct ieee80211_sub_if_data *sdata =
 +		container_of(work, struct ieee80211_sub_if_data,
 +			     u.mgd.request_smps_work);
 +
 +	sdata_lock(sdata);
 +	__ieee80211_request_smps_mgd(sdata, sdata->u.mgd.driver_smps_mode);
 +	sdata_unlock(sdata);
 +}
 +
 +void ieee80211_request_smps(struct ieee80211_vif *vif,
++=======
+ void ieee80211_request_smps(struct ieee80211_vif *vif, unsigned int link_id,
++>>>>>>> 94ddc3b5aa21 (wifi: mac80211: move ieee80211_request_smps_mgd_work)
  			    enum ieee80211_smps_mode smps_mode)
  {
  	struct ieee80211_sub_if_data *sdata = vif_to_sdata(vif);
diff --cc net/mac80211/ieee80211_i.h
index 9f2fe5f6d317,8c14274c9aaf..000000000000
--- a/net/mac80211/ieee80211_i.h
+++ b/net/mac80211/ieee80211_i.h
@@@ -2062,8 -1951,6 +2062,11 @@@ void ieee80211_send_delba(struct ieee80
  int ieee80211_send_smps_action(struct ieee80211_sub_if_data *sdata,
  			       enum ieee80211_smps_mode smps, const u8 *da,
  			       const u8 *bssid);
++<<<<<<< HEAD
 +void ieee80211_request_smps_ap_work(struct work_struct *work);
 +void ieee80211_request_smps_mgd_work(struct work_struct *work);
++=======
++>>>>>>> 94ddc3b5aa21 (wifi: mac80211: move ieee80211_request_smps_mgd_work)
  bool ieee80211_smps_is_restrictive(enum ieee80211_smps_mode smps_mode_old,
  				   enum ieee80211_smps_mode smps_mode_new);
  
* Unmerged path net/mac80211/ht.c
* Unmerged path net/mac80211/ieee80211_i.h
diff --git a/net/mac80211/mlme.c b/net/mac80211/mlme.c
index 6cd411ed25d6..0b81727ed971 100644
--- a/net/mac80211/mlme.c
+++ b/net/mac80211/mlme.c
@@ -5000,6 +5000,18 @@ void ieee80211_sta_restart(struct ieee80211_sub_if_data *sdata)
 	sdata_unlock(sdata);
 }
 
+static void ieee80211_request_smps_mgd_work(struct work_struct *work)
+{
+	struct ieee80211_link_data *link =
+		container_of(work, struct ieee80211_link_data,
+			     u.mgd.request_smps_work);
+
+	sdata_lock(link->sdata);
+	__ieee80211_request_smps_mgd(link->sdata, link,
+				     link->u.mgd.driver_smps_mode);
+	sdata_unlock(link->sdata);
+}
+
 /* interface setup */
 void ieee80211_sta_setup_sdata(struct ieee80211_sub_if_data *sdata)
 {
