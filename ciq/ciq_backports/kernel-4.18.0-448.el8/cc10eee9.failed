PCI/ACPI: add a helper for retrieving _OSC Control DWORDs

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Vishal Verma <vishal.l.verma@intel.com>
commit cc10eee95204579fcd66fd5965073fdcbf629676
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/cc10eee9.failed

During _OSC negotiation, when the 'Control' DWORD is needed from the
result buffer after running _OSC, a couple of places performed manual
pointer arithmetic to offset into the right spot in the raw buffer.
Add a acpi_osc_ctx_get_pci_control() helper to use the #define'd
DWORD offsets to fetch the DWORDs needed from @acpi_osc_context, and
replace the above instances of the open-coded arithmetic.

	Cc: "Rafael J. Wysocki" <rafael@kernel.org>
	Suggested-by: Davidlohr Bueso <dave@stgolabs.net>
	Acked-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
	Reviewed-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
	Reviewed-by: Davidlohr Bueso <dave@stgolabs.net>
Reviewed by: Adam Manzanares <a.manzanares@samsung.com>
	Signed-off-by: Vishal Verma <vishal.l.verma@intel.com>
Link: https://lore.kernel.org/r/20220413073618.291335-2-vishal.l.verma@intel.com
	Signed-off-by: Dan Williams <dan.j.williams@intel.com>
(cherry picked from commit cc10eee95204579fcd66fd5965073fdcbf629676)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/acpi.h
diff --cc include/linux/acpi.h
index b6368da6f899,04e5a038dd57..000000000000
--- a/include/linux/acpi.h
+++ b/include/linux/acpi.h
@@@ -993,6 -1002,21 +1000,24 @@@ static inline int acpi_get_local_addres
  	return -ENODEV;
  }
  
++<<<<<<< HEAD
++=======
+ static inline int acpi_register_wakeup_handler(int wake_irq,
+ 	bool (*wakeup)(void *context), void *context)
+ {
+ 	return -ENXIO;
+ }
+ 
+ static inline void acpi_unregister_wakeup_handler(
+ 	bool (*wakeup)(void *context), void *context) { }
+ 
+ struct acpi_osc_context;
+ static inline u32 acpi_osc_ctx_get_pci_control(struct acpi_osc_context *context)
+ {
+ 	return 0;
+ }
+ 
++>>>>>>> cc10eee95204 (PCI/ACPI: add a helper for retrieving _OSC Control DWORDs)
  #endif	/* !CONFIG_ACPI */
  
  #ifdef CONFIG_ACPI_HOTPLUG_IOAPIC
diff --git a/drivers/acpi/bus.c b/drivers/acpi/bus.c
index b4d279cc20e0..f68f8640c007 100644
--- a/drivers/acpi/bus.c
+++ b/drivers/acpi/bus.c
@@ -457,7 +457,7 @@ static void acpi_bus_osc_negotiate_usb_control(void)
 	}
 
 	osc_sb_native_usb4_control =
-		control & ((u32 *)context.ret.pointer)[OSC_CONTROL_DWORD];
+		control &  acpi_osc_ctx_get_pci_control(&context);
 
 	acpi_bus_decode_usb_osc("USB4 _OSC: OS supports", control);
 	acpi_bus_decode_usb_osc("USB4 _OSC: OS controls",
diff --git a/drivers/acpi/pci_root.c b/drivers/acpi/pci_root.c
index a9d30b192fcf..e32c1469edc1 100644
--- a/drivers/acpi/pci_root.c
+++ b/drivers/acpi/pci_root.c
@@ -198,7 +198,7 @@ static acpi_status acpi_pci_run_osc(acpi_handle handle,
 
 	status = acpi_run_osc(handle, &context);
 	if (ACPI_SUCCESS(status)) {
-		*retval = *((u32 *)(context.ret.pointer + 8));
+		*retval = acpi_osc_ctx_get_pci_control(&context);
 		kfree(context.ret.pointer);
 	}
 	return status;
* Unmerged path include/linux/acpi.h
