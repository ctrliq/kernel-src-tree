s390/ap: fix crash on older machines based on QCI info missing

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Harald Freudenberger <freude@linux.ibm.com>
commit 0fef40be5d1f8e7af3d61e8827a63c5862cd99f7
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/0fef40be.failed

On older z series machines (z12 and older) there is no QCI info
available. The AP code took care of this and the AP bus scan then
switched to simple probing via TAPQ.

With commit
283915850a44 ("s390/ap: notify drivers on config changed and scan complete callbacks")
some code was introduced which silently assumed that the QCI info is
always available. However, with KVM simulating an older machine (z12)
the result was a kernel crash. Funnily the same crash does not happen
on LPAR - maybe because NULL is a valid pointer and reading some data
from address 0 also works fine.

This fix now improves the code to be aware that the QCI instruction
may not be available on older machines and thus the two pointers to
QCI info structs may simple be NULL.

However, on a machine not providing the QCI info the two callbacks to
the zcrypt device drivers on_config_changed() and on_scan_complete()
provide parameters which are pointers to a QCI info struct.
These both callbacks are NOT served if there is no QCI info available.
The only consumer of these callbacks is the vfio device driver. This
driver only supports CEX4 and higher. All physical machines which are
able to provide CEX4 cards have QCI support available. So there is
no sense in for example fill the QCI info struct by hand with looping
over cards and queues and TAPQ each APQN.

	Signed-off-by: Harald Freudenberger <freude@linux.ibm.com>
	Signed-off-by: Tony Krowiak <akrowiak@linux.ibm.com>
	Cc: stable@vger.kernel.org
Fixes: 283915850a44 ("s390/ap: notify drivers on config changed and scan complete callbacks")
	Signed-off-by: Alexander Gordeev <agordeev@linux.ibm.com>
(cherry picked from commit 0fef40be5d1f8e7af3d61e8827a63c5862cd99f7)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/s390/crypto/ap_bus.c
#	drivers/s390/crypto/ap_bus.h
diff --cc drivers/s390/crypto/ap_bus.c
index 9836d571846d,59ac98f2bd27..000000000000
--- a/drivers/s390/crypto/ap_bus.c
+++ b/drivers/s390/crypto/ap_bus.c
@@@ -1956,8 -2075,31 +1956,33 @@@ static inline void ap_scan_adapter(int 
  }
  
  /**
++<<<<<<< HEAD
++=======
+  * ap_get_configuration - get the host AP configuration
+  *
+  * Stores the host AP configuration information returned from the previous call
+  * to Query Configuration Information (QCI), then retrieves and stores the
+  * current AP configuration returned from QCI.
+  *
+  * Return: true if the host AP configuration changed between calls to QCI;
+  * otherwise, return false.
+  */
+ static bool ap_get_configuration(void)
+ {
+ 	if (!ap_qci_info)	/* QCI not supported */
+ 		return false;
+ 
+ 	memcpy(ap_qci_info_old, ap_qci_info, sizeof(*ap_qci_info));
+ 	ap_fetch_qci_info(ap_qci_info);
+ 
+ 	return memcmp(ap_qci_info, ap_qci_info_old,
+ 		      sizeof(struct ap_config_info)) != 0;
+ }
+ 
+ /**
++>>>>>>> 0fef40be5d1f (s390/ap: fix crash on older machines based on QCI info missing)
   * ap_scan_bus(): Scan the AP bus for new devices
   * Runs periodically, workqueue timer (ap_config_time)
 - * @unused: Unused pointer.
   */
  static void ap_scan_bus(struct work_struct *unused)
  {
diff --cc drivers/s390/crypto/ap_bus.h
index d5cf546b9de0,0f17933954fb..000000000000
--- a/drivers/s390/crypto/ap_bus.h
+++ b/drivers/s390/crypto/ap_bus.h
@@@ -144,8 -144,23 +144,28 @@@ struct ap_driver 
  
  	int (*probe)(struct ap_device *);
  	void (*remove)(struct ap_device *);
++<<<<<<< HEAD
 +	void (*suspend)(struct ap_device *);
 +	void (*resume)(struct ap_device *);
++=======
+ 	int (*in_use)(unsigned long *apm, unsigned long *aqm);
+ 	/*
+ 	 * Called at the start of the ap bus scan function when
+ 	 * the crypto config information (qci) has changed.
+ 	 * This callback is not invoked if there is no AP
+ 	 * QCI support available.
+ 	 */
+ 	void (*on_config_changed)(struct ap_config_info *new_config_info,
+ 				  struct ap_config_info *old_config_info);
+ 	/*
+ 	 * Called at the end of the ap bus scan function when
+ 	 * the crypto config information (qci) has changed.
+ 	 * This callback is not invoked if there is no AP
+ 	 * QCI support available.
+ 	 */
+ 	void (*on_scan_complete)(struct ap_config_info *new_config_info,
+ 				 struct ap_config_info *old_config_info);
++>>>>>>> 0fef40be5d1f (s390/ap: fix crash on older machines based on QCI info missing)
  };
  
  #define to_ap_drv(x) container_of((x), struct ap_driver, driver)
* Unmerged path drivers/s390/crypto/ap_bus.c
* Unmerged path drivers/s390/crypto/ap_bus.h
