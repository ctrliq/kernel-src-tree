ath11k: Add register access logic for WCN6750

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Manikanta Pubbisetty <quic_mpubbise@quicinc.com>
commit 56c8ccf331bd2ebf8b85f70efb4844803ef3f768
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/56c8ccf3.failed

WCN6750 uses static window mapping to access the HW registers.
Unlike QCN9074 which uses 3rd window for UMAC and 2nd window
for CE register access, WCN6750 uses 1st window for UMAC
and 2nd window for CE registers.

Also, refactor the code so that WCN6750 can use the existing
ath11k_pci_read32/write32() APIs for accessing the registers.

Tested-on: WCN6750 hw1.0 AHB WLAN.MSL.1.0.1-00887-QCAMSLSWPLZ-1
Tested-on: WCN6855 hw2.0 PCI WLAN.HSP.1.1-01720.1-QCAHSPSWPL_V1_V2_SILICONZ_LITE-1
Tested-on: QCN9074 hw1.0 PCI WLAN.HK.2.5.0.1-01100-QCAHKSWPL_SILICONZ-1
Tested-on: IPQ8074 hw2.0 AHB WLAN.HK.2.4.0.1-00192-QCAHKSWPL_SILICONZ-1

	Signed-off-by: Manikanta Pubbisetty <quic_mpubbise@quicinc.com>
	Signed-off-by: Kalle Valo <quic_kvalo@quicinc.com>
Link: https://lore.kernel.org/r/20220429170502.20080-5-quic_mpubbise@quicinc.com
(cherry picked from commit 56c8ccf331bd2ebf8b85f70efb4844803ef3f768)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/wireless/ath/ath11k/core.c
#	drivers/net/wireless/ath/ath11k/hw.h
#	drivers/net/wireless/ath/ath11k/pcic.c
diff --cc drivers/net/wireless/ath/ath11k/core.c
index 241b5e0c8d3f,3be4327b4d9c..000000000000
--- a/drivers/net/wireless/ath/ath11k/core.c
+++ b/drivers/net/wireless/ath/ath11k/core.c
@@@ -102,6 -102,13 +102,16 @@@ static const struct ath11k_hw_params at
  		.dbr_debug_support = true,
  		.global_reset = false,
  		.bios_sar_capa = NULL,
++<<<<<<< HEAD
++=======
+ 		.m3_fw_support = false,
+ 		.fixed_bdf_addr = true,
+ 		.fixed_mem_region = true,
+ 		.static_window_map = false,
+ 		.hybrid_bus_type = false,
+ 		.dp_window_idx = 0,
+ 		.ce_window_idx = 0,
++>>>>>>> 56c8ccf331bd (ath11k: Add register access logic for WCN6750)
  	},
  	{
  		.hw_rev = ATH11K_HW_IPQ6018_HW10,
@@@ -170,6 -176,13 +180,16 @@@
  		.dbr_debug_support = true,
  		.global_reset = false,
  		.bios_sar_capa = NULL,
++<<<<<<< HEAD
++=======
+ 		.m3_fw_support = false,
+ 		.fixed_bdf_addr = true,
+ 		.fixed_mem_region = true,
+ 		.static_window_map = false,
+ 		.hybrid_bus_type = false,
+ 		.dp_window_idx = 0,
+ 		.ce_window_idx = 0,
++>>>>>>> 56c8ccf331bd (ath11k: Add register access logic for WCN6750)
  	},
  	{
  		.name = "qca6390 hw2.0",
@@@ -237,6 -249,13 +257,16 @@@
  		.dbr_debug_support = false,
  		.global_reset = true,
  		.bios_sar_capa = NULL,
++<<<<<<< HEAD
++=======
+ 		.m3_fw_support = true,
+ 		.fixed_bdf_addr = false,
+ 		.fixed_mem_region = false,
+ 		.static_window_map = false,
+ 		.hybrid_bus_type = false,
+ 		.dp_window_idx = 0,
+ 		.ce_window_idx = 0,
++>>>>>>> 56c8ccf331bd (ath11k: Add register access logic for WCN6750)
  	},
  	{
  		.name = "qcn9074 hw1.0",
@@@ -304,6 -322,13 +334,16 @@@
  		.dbr_debug_support = true,
  		.global_reset = false,
  		.bios_sar_capa = NULL,
++<<<<<<< HEAD
++=======
+ 		.m3_fw_support = true,
+ 		.fixed_bdf_addr = false,
+ 		.fixed_mem_region = false,
+ 		.static_window_map = true,
+ 		.hybrid_bus_type = false,
+ 		.dp_window_idx = 3,
+ 		.ce_window_idx = 2,
++>>>>>>> 56c8ccf331bd (ath11k: Add register access logic for WCN6750)
  	},
  	{
  		.name = "wcn6855 hw2.0",
@@@ -371,6 -395,13 +411,16 @@@
  		.dbr_debug_support = false,
  		.global_reset = true,
  		.bios_sar_capa = &ath11k_hw_sar_capa_wcn6855,
++<<<<<<< HEAD
++=======
+ 		.m3_fw_support = true,
+ 		.fixed_bdf_addr = false,
+ 		.fixed_mem_region = false,
+ 		.static_window_map = false,
+ 		.hybrid_bus_type = false,
+ 		.dp_window_idx = 0,
+ 		.ce_window_idx = 0,
++>>>>>>> 56c8ccf331bd (ath11k: Add register access logic for WCN6750)
  	},
  	{
  		.name = "wcn6855 hw2.1",
@@@ -437,6 -467,82 +487,85 @@@
  		.dbr_debug_support = false,
  		.global_reset = true,
  		.bios_sar_capa = &ath11k_hw_sar_capa_wcn6855,
++<<<<<<< HEAD
++=======
+ 		.m3_fw_support = true,
+ 		.fixed_bdf_addr = false,
+ 		.fixed_mem_region = false,
+ 		.static_window_map = false,
+ 		.hybrid_bus_type = false,
+ 		.dp_window_idx = 0,
+ 		.ce_window_idx = 0,
+ 	},
+ 	{
+ 		.name = "wcn6750 hw1.0",
+ 		.hw_rev = ATH11K_HW_WCN6750_HW10,
+ 		.fw = {
+ 			.dir = "WCN6750/hw1.0",
+ 			.board_size = 256 * 1024,
+ 			.cal_offset = 128 * 1024,
+ 		},
+ 		.max_radios = 1,
+ 		.bdf_addr = 0x4B0C0000,
+ 		.ring_mask = &ath11k_hw_ring_mask_qca6390,
+ 		.internal_sleep_clock = false,
+ 		.qmi_service_ins_id = ATH11K_QMI_WLFW_SERVICE_INS_ID_V01_WCN6750,
+ 		.host_ce_config = ath11k_host_ce_config_qca6390,
+ 		.ce_count = 9,
+ 		.target_ce_config = ath11k_target_ce_config_wlan_qca6390,
+ 		.target_ce_count = 9,
+ 		.svc_to_ce_map = ath11k_target_service_to_ce_map_wlan_qca6390,
+ 		.svc_to_ce_map_len = 14,
+ 		.rfkill_pin = 0,
+ 		.rfkill_cfg = 0,
+ 		.rfkill_on_level = 0,
+ 		.single_pdev_only = true,
+ 		.rxdma1_enable = false,
+ 		.num_rxmda_per_pdev = 1,
+ 		.rx_mac_buf_ring = true,
+ 		.vdev_start_delay = true,
+ 		.htt_peer_map_v2 = false,
+ 
+ 		.spectral = {
+ 			.fft_sz = 0,
+ 			.fft_pad_sz = 0,
+ 			.summary_pad_sz = 0,
+ 			.fft_hdr_len = 0,
+ 			.max_fft_bins = 0,
+ 		},
+ 
+ 		.interface_modes = BIT(NL80211_IFTYPE_STATION) |
+ 					BIT(NL80211_IFTYPE_AP),
+ 		.supports_monitor = false,
+ 		.supports_shadow_regs = true,
+ 		.idle_ps = true,
+ 		.supports_sta_ps = true,
+ 		.cold_boot_calib = false,
+ 		.fw_mem_mode = 0,
+ 		.num_vdevs = 16 + 1,
+ 		.num_peers = 512,
+ 		.supports_suspend = false,
+ 		.supports_regdb = true,
+ 		.fix_l1ss = false,
+ 		.credit_flow = true,
+ 		.max_tx_ring = DP_TCL_NUM_RING_MAX_QCA6390,
+ 		.hal_params = &ath11k_hw_hal_params_qca6390,
+ 		.supports_dynamic_smps_6ghz = false,
+ 		.alloc_cacheable_memory = false,
+ 		.supports_rssi_stats = true,
+ 		.fw_wmi_diag_event = false,
+ 		.current_cc_support = true,
+ 		.dbr_debug_support = false,
+ 		.global_reset = false,
+ 		.bios_sar_capa = NULL,
+ 		.m3_fw_support = false,
+ 		.fixed_bdf_addr = false,
+ 		.fixed_mem_region = false,
+ 		.static_window_map = true,
+ 		.hybrid_bus_type = true,
+ 		.dp_window_idx = 1,
+ 		.ce_window_idx = 2,
++>>>>>>> 56c8ccf331bd (ath11k: Add register access logic for WCN6750)
  	},
  };
  
diff --cc drivers/net/wireless/ath/ath11k/hw.h
index 29546d8de738,b63538084215..000000000000
--- a/drivers/net/wireless/ath/ath11k/hw.h
+++ b/drivers/net/wireless/ath/ath11k/hw.h
@@@ -196,6 -196,13 +196,16 @@@ struct ath11k_hw_params 
  	bool dbr_debug_support;
  	bool global_reset;
  	const struct cfg80211_sar_capa *bios_sar_capa;
++<<<<<<< HEAD
++=======
+ 	bool m3_fw_support;
+ 	bool fixed_bdf_addr;
+ 	bool fixed_mem_region;
+ 	bool static_window_map;
+ 	bool hybrid_bus_type;
+ 	u8 dp_window_idx;
+ 	u8 ce_window_idx;
++>>>>>>> 56c8ccf331bd (ath11k: Add register access logic for WCN6750)
  };
  
  struct ath11k_hw_ops {
* Unmerged path drivers/net/wireless/ath/ath11k/pcic.c
* Unmerged path drivers/net/wireless/ath/ath11k/core.c
* Unmerged path drivers/net/wireless/ath/ath11k/hw.h
* Unmerged path drivers/net/wireless/ath/ath11k/pcic.c
