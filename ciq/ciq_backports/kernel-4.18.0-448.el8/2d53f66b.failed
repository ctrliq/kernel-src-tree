xfs: change the prefix of XFS_EOF_FLAGS_* to XFS_ICWALK_FLAG_

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Darrick J. Wong <djwong@kernel.org>
commit 2d53f66baffde66fe72c360e3b9b0c8a2d7ce7c6
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/2d53f66b.failed

In preparation for renaming struct xfs_eofblocks to struct xfs_icwalk,
change the prefix of the existing XFS_EOF_FLAGS_* flags to
XFS_ICWALK_FLAG_ and convert all the existing users.  This adds a degree
of interface separation between the ioctl definitions and the incore
parameters.  Since FLAGS_UNION is only used in xfs_icache.c, move it
there as a private flag.

	Signed-off-by: Darrick J. Wong <djwong@kernel.org>
	Reviewed-by: Dave Chinner <dchinner@redhat.com>
	Reviewed-by: Carlos Maiolino <cmaiolino@redhat.com>
(cherry picked from commit 2d53f66baffde66fe72c360e3b9b0c8a2d7ce7c6)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/xfs/xfs_icache.c
diff --cc fs/xfs/xfs_icache.c
index bcf460a4fea6,cbfb5cec7f18..000000000000
--- a/fs/xfs/xfs_icache.c
+++ b/fs/xfs/xfs_icache.c
@@@ -67,9 -68,18 +67,24 @@@ static int xfs_icwalk_ag(struct xfs_per
  #define XFS_ICWALK_FLAG_DROP_GDQUOT	(1U << 30)
  #define XFS_ICWALK_FLAG_DROP_PDQUOT	(1U << 29)
  
++<<<<<<< HEAD
 +#define XFS_ICWALK_PRIVATE_FLAGS	(XFS_ICWALK_FLAG_DROP_UDQUOT | \
 +					 XFS_ICWALK_FLAG_DROP_GDQUOT | \
 +					 XFS_ICWALK_FLAG_DROP_PDQUOT)
++=======
+ /* Stop scanning after icw_scan_limit inodes. */
+ #define XFS_ICWALK_FLAG_SCAN_LIMIT	(1U << 28)
+ 
+ #define XFS_ICWALK_FLAG_RECLAIM_SICK	(1U << 27)
+ #define XFS_ICWALK_FLAG_UNION		(1U << 26) /* union filter algorithm */
+ 
+ #define XFS_ICWALK_PRIVATE_FLAGS	(XFS_ICWALK_FLAG_DROP_UDQUOT | \
+ 					 XFS_ICWALK_FLAG_DROP_GDQUOT | \
+ 					 XFS_ICWALK_FLAG_DROP_PDQUOT | \
+ 					 XFS_ICWALK_FLAG_SCAN_LIMIT | \
+ 					 XFS_ICWALK_FLAG_RECLAIM_SICK | \
+ 					 XFS_ICWALK_FLAG_UNION)
++>>>>>>> 2d53f66baffd (xfs: change the prefix of XFS_EOF_FLAGS_* to XFS_ICWALK_FLAG_)
  
  /*
   * Allocate and initialise an xfs_inode.
diff --git a/fs/xfs/xfs_file.c b/fs/xfs/xfs_file.c
index 50a5bdf7fede..167358031de6 100644
--- a/fs/xfs/xfs_file.c
+++ b/fs/xfs/xfs_file.c
@@ -766,7 +766,7 @@ xfs_file_buffered_write(
 	 */
 	if (ret == -EDQUOT && !cleared_space) {
 		xfs_iunlock(ip, iolock);
-		xfs_blockgc_free_quota(ip, XFS_EOF_FLAGS_SYNC);
+		xfs_blockgc_free_quota(ip, XFS_ICWALK_FLAG_SYNC);
 		cleared_space = true;
 		goto write_retry;
 	} else if (ret == -ENOSPC && !cleared_space) {
@@ -776,7 +776,7 @@ xfs_file_buffered_write(
 		xfs_flush_inodes(ip->i_mount);
 
 		xfs_iunlock(ip, iolock);
-		eofb.eof_flags = XFS_EOF_FLAGS_SYNC;
+		eofb.eof_flags = XFS_ICWALK_FLAG_SYNC;
 		xfs_blockgc_free_space(ip->i_mount, &eofb);
 		goto write_retry;
 	}
* Unmerged path fs/xfs/xfs_icache.c
diff --git a/fs/xfs/xfs_icache.h b/fs/xfs/xfs_icache.h
index 7ad0509d072c..5cb8450c06b6 100644
--- a/fs/xfs/xfs_icache.h
+++ b/fs/xfs/xfs_icache.h
@@ -17,6 +17,19 @@ struct xfs_eofblocks {
 	__u64		eof_min_file_size;
 };
 
+/* Flags that reflect xfs_fs_eofblocks functionality. */
+#define XFS_ICWALK_FLAG_SYNC		(1U << 0) /* sync/wait mode scan */
+#define XFS_ICWALK_FLAG_UID		(1U << 1) /* filter by uid */
+#define XFS_ICWALK_FLAG_GID		(1U << 2) /* filter by gid */
+#define XFS_ICWALK_FLAG_PRID		(1U << 3) /* filter by project id */
+#define XFS_ICWALK_FLAG_MINFILESIZE	(1U << 4) /* filter by min file size */
+
+#define XFS_ICWALK_FLAGS_VALID		(XFS_ICWALK_FLAG_SYNC | \
+					 XFS_ICWALK_FLAG_UID | \
+					 XFS_ICWALK_FLAG_GID | \
+					 XFS_ICWALK_FLAG_PRID | \
+					 XFS_ICWALK_FLAG_MINFILESIZE)
+
 /*
  * Flags for xfs_iget()
  */
@@ -42,8 +55,8 @@ void xfs_inode_mark_reclaimable(struct xfs_inode *ip);
 
 int xfs_blockgc_free_dquots(struct xfs_mount *mp, struct xfs_dquot *udqp,
 		struct xfs_dquot *gdqp, struct xfs_dquot *pdqp,
-		unsigned int eof_flags);
-int xfs_blockgc_free_quota(struct xfs_inode *ip, unsigned int eof_flags);
+		unsigned int iwalk_flags);
+int xfs_blockgc_free_quota(struct xfs_inode *ip, unsigned int iwalk_flags);
 int xfs_blockgc_free_space(struct xfs_mount *mp, struct xfs_eofblocks *eofb);
 
 void xfs_inode_set_eofblocks_tag(struct xfs_inode *ip);
diff --git a/fs/xfs/xfs_ioctl.c b/fs/xfs/xfs_ioctl.c
index 614ad024026b..92707c7961b8 100644
--- a/fs/xfs/xfs_ioctl.c
+++ b/fs/xfs/xfs_ioctl.c
@@ -2026,7 +2026,18 @@ xfs_fs_eofblocks_from_user(
 	    memchr_inv(src->pad64, 0, sizeof(src->pad64)))
 		return -EINVAL;
 
-	dst->eof_flags = src->eof_flags;
+	dst->eof_flags = 0;
+	if (src->eof_flags & XFS_EOF_FLAGS_SYNC)
+		dst->eof_flags |= XFS_ICWALK_FLAG_SYNC;
+	if (src->eof_flags & XFS_EOF_FLAGS_UID)
+		dst->eof_flags |= XFS_ICWALK_FLAG_UID;
+	if (src->eof_flags & XFS_EOF_FLAGS_GID)
+		dst->eof_flags |= XFS_ICWALK_FLAG_GID;
+	if (src->eof_flags & XFS_EOF_FLAGS_PRID)
+		dst->eof_flags |= XFS_ICWALK_FLAG_PRID;
+	if (src->eof_flags & XFS_EOF_FLAGS_MINFILESIZE)
+		dst->eof_flags |= XFS_ICWALK_FLAG_MINFILESIZE;
+
 	dst->eof_prid = src->eof_prid;
 	dst->eof_min_file_size = src->eof_min_file_size;
 
