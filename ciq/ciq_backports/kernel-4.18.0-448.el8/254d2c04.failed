x86/alternative: Add text_opcode_size()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Peter Zijlstra <peterz@infradead.org>
commit 254d2c04515ea4532a503cc5d8649e1513042e56
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/254d2c04.failed

Introduce a common helper to map *_INSN_OPCODE to *_INSN_SIZE.

	Tested-by: Alexei Starovoitov <ast@kernel.org>
	Tested-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
	Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
	Acked-by: Alexei Starovoitov <ast@kernel.org>
	Cc: Andy Lutomirski <luto@kernel.org>
	Cc: Borislav Petkov <bp@alien8.de>
	Cc: H. Peter Anvin <hpa@zytor.com>
	Cc: Josh Poimboeuf <jpoimboe@redhat.com>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Thomas Gleixner <tglx@linutronix.de>
Link: https://lkml.kernel.org/r/20191111132457.875666061@infradead.org
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit 254d2c04515ea4532a503cc5d8649e1513042e56)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/include/asm/text-patching.h
#	arch/x86/kernel/alternative.c
diff --cc arch/x86/include/asm/text-patching.h
index 47a8c6185e2b,93e4266cd5a3..000000000000
--- a/arch/x86/include/asm/text-patching.h
+++ b/arch/x86/include/asm/text-patching.h
@@@ -49,16 -49,6 +49,19 @@@ extern void text_poke_bp(void *addr, co
  extern void text_poke_queue(void *addr, const void *opcode, size_t len, const void *emulate);
  extern void text_poke_finish(void);
  
++<<<<<<< HEAD
 +extern int after_bootmem;
 +extern __ro_after_init struct mm_struct *poking_mm;
 +extern __ro_after_init unsigned long poking_addr;
 +
 +#ifndef CONFIG_UML_X86
 +static inline void int3_emulate_jmp(struct pt_regs *regs, unsigned long ip)
 +{
 +	regs->ip = ip;
 +}
 +
++=======
++>>>>>>> 254d2c04515e (x86/alternative: Add text_opcode_size())
  #define INT3_INSN_SIZE		1
  #define INT3_INSN_OPCODE	0xCC
  
diff --cc arch/x86/kernel/alternative.c
index 57fff6ac78c6,f8f34f94d13d..000000000000
--- a/arch/x86/kernel/alternative.c
+++ b/arch/x86/kernel/alternative.c
@@@ -1084,3 -1242,34 +1084,32 @@@ void text_poke_bp(void *addr, const voi
  	text_poke_loc_init(&tp, addr, opcode, len, emulate);
  	text_poke_bp_batch(&tp, 1);
  }
++<<<<<<< HEAD
++=======
+ 
+ union text_poke_insn {
+ 	u8 text[POKE_MAX_OPCODE_SIZE];
+ 	struct {
+ 		u8 opcode;
+ 		s32 disp;
+ 	} __attribute__((packed));
+ };
+ 
+ void *text_gen_insn(u8 opcode, const void *addr, const void *dest)
+ {
+ 	static union text_poke_insn insn; /* text_mutex */
+ 	int size = text_opcode_size(opcode);
+ 
+ 	lockdep_assert_held(&text_mutex);
+ 
+ 	insn.opcode = opcode;
+ 
+ 	if (size > 1) {
+ 		insn.disp = (long)dest - (long)(addr + size);
+ 		if (size == 2)
+ 			BUG_ON((insn.disp >> 31) != (insn.disp >> 7));
+ 	}
+ 
+ 	return &insn.text;
+ }
++>>>>>>> 254d2c04515e (x86/alternative: Add text_opcode_size())
* Unmerged path arch/x86/include/asm/text-patching.h
* Unmerged path arch/x86/kernel/alternative.c
