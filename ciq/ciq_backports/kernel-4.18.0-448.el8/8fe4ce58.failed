scsi: core: Fix a use-after-free

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Bart Van Assche <bvanassche@acm.org>
commit 8fe4ce5836e932f5766317cb651c1ff2a4cd0506
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/8fe4ce58.failed

There are two .exit_cmd_priv implementations. Both implementations use
resources associated with the SCSI host. Make sure that these resources are
still available when .exit_cmd_priv is called by waiting inside
scsi_remove_host() until the tag set has been freed.

This commit fixes the following use-after-free:

==================================================================
BUG: KASAN: use-after-free in srp_exit_cmd_priv+0x27/0xd0 [ib_srp]
Read of size 8 at addr ffff888100337000 by task multipathd/16727
Call Trace:
 <TASK>
 dump_stack_lvl+0x34/0x44
 print_report.cold+0x5e/0x5db
 kasan_report+0xab/0x120
 srp_exit_cmd_priv+0x27/0xd0 [ib_srp]
 scsi_mq_exit_request+0x4d/0x70
 blk_mq_free_rqs+0x143/0x410
 __blk_mq_free_map_and_rqs+0x6e/0x100
 blk_mq_free_tag_set+0x2b/0x160
 scsi_host_dev_release+0xf3/0x1a0
 device_release+0x54/0xe0
 kobject_put+0xa5/0x120
 device_release+0x54/0xe0
 kobject_put+0xa5/0x120
 scsi_device_dev_release_usercontext+0x4c1/0x4e0
 execute_in_process_context+0x23/0x90
 device_release+0x54/0xe0
 kobject_put+0xa5/0x120
 scsi_disk_release+0x3f/0x50
 device_release+0x54/0xe0
 kobject_put+0xa5/0x120
 disk_release+0x17f/0x1b0
 device_release+0x54/0xe0
 kobject_put+0xa5/0x120
 dm_put_table_device+0xa3/0x160 [dm_mod]
 dm_put_device+0xd0/0x140 [dm_mod]
 free_priority_group+0xd8/0x110 [dm_multipath]
 free_multipath+0x94/0xe0 [dm_multipath]
 dm_table_destroy+0xa2/0x1e0 [dm_mod]
 __dm_destroy+0x196/0x350 [dm_mod]
 dev_remove+0x10c/0x160 [dm_mod]
 ctl_ioctl+0x2c2/0x590 [dm_mod]
 dm_ctl_ioctl+0x5/0x10 [dm_mod]
 __x64_sys_ioctl+0xb4/0xf0
 dm_ctl_ioctl+0x5/0x10 [dm_mod]
 __x64_sys_ioctl+0xb4/0xf0
 do_syscall_64+0x3b/0x90
 entry_SYSCALL_64_after_hwframe+0x46/0xb0

Link: https://lore.kernel.org/r/20220826002635.919423-1-bvanassche@acm.org
Fixes: 65ca846a5314 ("scsi: core: Introduce {init,exit}_cmd_priv()")
	Cc: Ming Lei <ming.lei@redhat.com>
	Cc: Christoph Hellwig <hch@lst.de>
	Cc: Mike Christie <michael.christie@oracle.com>
	Cc: Hannes Reinecke <hare@suse.de>
	Cc: John Garry <john.garry@huawei.com>
	Cc: Li Zhijian <lizhijian@fujitsu.com>
	Reported-by: Li Zhijian <lizhijian@fujitsu.com>
	Tested-by: Li Zhijian <lizhijian@fujitsu.com>
	Signed-off-by: Bart Van Assche <bvanassche@acm.org>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit 8fe4ce5836e932f5766317cb651c1ff2a4cd0506)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/hosts.c
#	drivers/scsi/scsi_sysfs.c
diff --cc drivers/scsi/hosts.c
index ac8ea8ae2e3b,9857dba09c95..000000000000
--- a/drivers/scsi/hosts.c
+++ b/drivers/scsi/hosts.c
@@@ -239,6 -245,18 +248,21 @@@ int scsi_add_host_with_dma(struct Scsi_
  
  	shost->dma_dev = dma_dev;
  
++<<<<<<< HEAD
++=======
+ 	if (dma_dev->dma_mask) {
+ 		shost->max_sectors = min_t(unsigned int, shost->max_sectors,
+ 				dma_max_mapping_size(dma_dev) >> SECTOR_SHIFT);
+ 	}
+ 
+ 	error = scsi_mq_setup_tags(shost);
+ 	if (error)
+ 		goto fail;
+ 
+ 	kref_init(&shost->tagset_refcnt);
+ 	init_completion(&shost->tagset_freed);
+ 
++>>>>>>> 8fe4ce5836e9 (scsi: core: Fix a use-after-free)
  	/*
  	 * Increase usage count temporarily here so that calling
  	 * scsi_autopm_put_host() will trigger runtime idle if there is
diff --cc drivers/scsi/scsi_sysfs.c
index 6143030f9cf5,5d61f58399dc..000000000000
--- a/drivers/scsi/scsi_sysfs.c
+++ b/drivers/scsi/scsi_sysfs.c
@@@ -1507,7 -1475,8 +1507,12 @@@ void __scsi_remove_device(struct scsi_d
  	scsi_device_set_state(sdev, SDEV_DEL);
  	mutex_unlock(&sdev->state_mutex);
  
++<<<<<<< HEAD
 +	blk_cleanup_queue(sdev->request_queue);
++=======
+ 	blk_mq_destroy_queue(sdev->request_queue);
+ 	kref_put(&sdev->host->tagset_refcnt, scsi_mq_free_tags);
++>>>>>>> 8fe4ce5836e9 (scsi: core: Fix a use-after-free)
  	cancel_work_sync(&sdev->requeue_work);
  
  	if (sdev->host->hostt->slave_destroy)
* Unmerged path drivers/scsi/hosts.c
diff --git a/drivers/scsi/scsi_lib.c b/drivers/scsi/scsi_lib.c
index 313b703dc3a1..141cc1a6b531 100644
--- a/drivers/scsi/scsi_lib.c
+++ b/drivers/scsi/scsi_lib.c
@@ -1951,9 +1951,13 @@ int scsi_mq_setup_tags(struct Scsi_Host *shost)
 	return blk_mq_alloc_tag_set(tag_set);
 }
 
-void scsi_mq_destroy_tags(struct Scsi_Host *shost)
+void scsi_mq_free_tags(struct kref *kref)
 {
+	struct Scsi_Host *shost = container_of(kref, typeof(*shost),
+					       tagset_refcnt);
+
 	blk_mq_free_tag_set(&shost->tag_set);
+	complete(&shost->tagset_freed);
 }
 
 /**
diff --git a/drivers/scsi/scsi_priv.h b/drivers/scsi/scsi_priv.h
index 410585475d29..3c3805f9b84e 100644
--- a/drivers/scsi/scsi_priv.h
+++ b/drivers/scsi/scsi_priv.h
@@ -96,7 +96,7 @@ extern void scsi_run_host_queues(struct Scsi_Host *shost);
 extern void scsi_requeue_run_queue(struct work_struct *work);
 extern void scsi_start_queue(struct scsi_device *sdev);
 extern int scsi_mq_setup_tags(struct Scsi_Host *shost);
-extern void scsi_mq_destroy_tags(struct Scsi_Host *shost);
+extern void scsi_mq_free_tags(struct kref *kref);
 extern void scsi_exit_queue(void);
 extern void scsi_evt_thread(struct work_struct *work);
 
diff --git a/drivers/scsi/scsi_scan.c b/drivers/scsi/scsi_scan.c
index d230b7aa678b..4160c924cb32 100644
--- a/drivers/scsi/scsi_scan.c
+++ b/drivers/scsi/scsi_scan.c
@@ -323,6 +323,7 @@ static struct scsi_device *scsi_alloc_sdev(struct scsi_target *starget,
 		kfree(sdev);
 		goto out;
 	}
+	kref_get(&sdev->host->tagset_refcnt);
 	sdev->request_queue = q;
 	q->queuedata = sdev;
 	__scsi_init_queue(sdev->host, q);
* Unmerged path drivers/scsi/scsi_sysfs.c
diff --git a/include/scsi/scsi_host.h b/include/scsi/scsi_host.h
index c1a1725deb41..bc613620a9df 100644
--- a/include/scsi/scsi_host.h
+++ b/include/scsi/scsi_host.h
@@ -569,6 +569,8 @@ struct Scsi_Host {
 	struct scsi_host_template *hostt;
 	struct scsi_transport_template *transportt;
 
+	struct kref		tagset_refcnt;
+	struct completion	tagset_freed;
 	/* Area to keep a shared tag map */
 	struct blk_mq_tag_set	tag_set;
 
