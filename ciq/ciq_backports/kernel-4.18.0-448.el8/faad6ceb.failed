scsi: sr: Do not leak information in ioctl

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Tom Rix <trix@redhat.com>
commit faad6cebded8e0fd902b672f220449b93db479eb
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/faad6ceb.failed

sr_ioctl.c uses this pattern:

  result = sr_do_ioctl(cd, &cgc);
  to-user = buffer[];
  kfree(buffer);
  return result;

Use of a buffer without checking leaks information. Check result and jump
over the use of buffer if there is an error.

  result = sr_do_ioctl(cd, &cgc);
  if (result)
    goto err;
  to-user = buffer[];
err:
  kfree(buffer);
  return result;

Additionally, initialize the buffer to zero.

This problem can be seen in the 2.4.0 kernel.

Link: https://lore.kernel.org/r/20220411174756.2418435-1-trix@redhat.com
Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
	Reviewed-by: Christoph Hellwig <hch@lst.de>
	Signed-off-by: Tom Rix <trix@redhat.com>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit faad6cebded8e0fd902b672f220449b93db479eb)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/sr_ioctl.c
diff --cc drivers/scsi/sr_ioctl.c
index 4b0ba55380aa,fbdb5124d7f7..000000000000
--- a/drivers/scsi/sr_ioctl.c
+++ b/drivers/scsi/sr_ioctl.c
@@@ -45,7 -41,7 +45,11 @@@ static int sr_read_tochdr(struct cdrom_
  	int result;
  	unsigned char *buffer;
  
++<<<<<<< HEAD
 +	buffer = kmalloc(32, GFP_KERNEL | SR_GFP_DMA(cd));
++=======
+ 	buffer = kzalloc(32, GFP_KERNEL);
++>>>>>>> faad6cebded8 (scsi: sr: Do not leak information in ioctl)
  	if (!buffer)
  		return -ENOMEM;
  
@@@ -75,7 -74,7 +82,11 @@@ static int sr_read_tocentry(struct cdro
  	int result;
  	unsigned char *buffer;
  
++<<<<<<< HEAD
 +	buffer = kmalloc(32, GFP_KERNEL | SR_GFP_DMA(cd));
++=======
+ 	buffer = kzalloc(32, GFP_KERNEL);
++>>>>>>> faad6cebded8 (scsi: sr: Do not leak information in ioctl)
  	if (!buffer)
  		return -ENOMEM;
  
@@@ -384,7 -390,7 +398,11 @@@ int sr_get_mcn(struct cdrom_device_inf
  {
  	Scsi_CD *cd = cdi->handle;
  	struct packet_command cgc;
++<<<<<<< HEAD
 +	char *buffer = kmalloc(32, GFP_KERNEL | SR_GFP_DMA(cd));
++=======
+ 	char *buffer = kzalloc(32, GFP_KERNEL);
++>>>>>>> faad6cebded8 (scsi: sr: Do not leak information in ioctl)
  	int result;
  
  	if (!buffer)
* Unmerged path drivers/scsi/sr_ioctl.c
