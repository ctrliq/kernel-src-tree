mm: move free_devmap_managed_page to memremap.c

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Christoph Hellwig <hch@lst.de>
commit 75e55d8a107edb2fd6e02b1fa8a81531209cda04
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/75e55d8a.failed

free_devmap_managed_page has nothing to do with the code in swap.c,
move it to live with the rest of the code for devmap handling.

Link: https://lkml.kernel.org/r/20220210072828.2930359-5-hch@lst.de
	Signed-off-by: Christoph Hellwig <hch@lst.de>
	Reviewed-by: Logan Gunthorpe <logang@deltatee.com>
	Reviewed-by: Jason Gunthorpe <jgg@nvidia.com>
	Reviewed-by: Chaitanya Kulkarni <kch@nvidia.com>
	Reviewed-by: Muchun Song <songmuchun@bytedance.com>
	Reviewed-by: Dan Williams <dan.j.williams@intel.com>
	Tested-by: "Sierra Guiza, Alejandro (Alex)" <alex.sierra@amd.com>

	Cc: Alex Deucher <alexander.deucher@amd.com>
	Cc: Alistair Popple <apopple@nvidia.com>
	Cc: Ben Skeggs <bskeggs@redhat.com>
	Cc: Christian Knig <christian.koenig@amd.com>
	Cc: Felix Kuehling <Felix.Kuehling@amd.com>
	Cc: Karol Herbst <kherbst@redhat.com>
	Cc: Lyude Paul <lyude@redhat.com>
	Cc: Miaohe Lin <linmiaohe@huawei.com>
	Cc: "Pan, Xinhui" <Xinhui.Pan@amd.com>
	Cc: Ralph Campbell <rcampbell@nvidia.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Matthew Wilcox (Oracle) <willy@infradead.org>
(cherry picked from commit 75e55d8a107edb2fd6e02b1fa8a81531209cda04)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	mm/swap.c
diff --cc mm/swap.c
index c9fe61e3a5e4,e499df864ef7..000000000000
--- a/mm/swap.c
+++ b/mm/swap.c
@@@ -1072,35 -1154,3 +1072,38 @@@ void __init swap_setup(void
  	 * _really_ don't want to cluster much more
  	 */
  }
++<<<<<<< HEAD
 +
 +#ifdef CONFIG_DEV_PAGEMAP_OPS
 +void put_devmap_managed_page(struct page *page)
 +{
 +	int count;
 +
 +	if (WARN_ON_ONCE(!page_is_devmap_managed(page)))
 +		return;
 +
 +	count = page_ref_dec_return(page);
 +
 +	/*
 +	 * devmap page refcounts are 1-based, rather than 0-based: if
 +	 * refcount is 1, then the page is free and the refcount is
 +	 * stable because nobody holds a reference on the page.
 +	 */
 +	if (count == 1)
 +		free_devmap_managed_page(page);
 +	else if (!count)
 +		__put_page(page);
 +}
 +EXPORT_SYMBOL(put_devmap_managed_page);
 +#endif
 +
 +/*
 + * Retain lru_cache_add_file() for kABI compatbility.
 + */
 +void lru_cache_add_file(struct page *page)
 +{
 +	lru_cache_add(page);
 +}
 +EXPORT_SYMBOL(lru_cache_add_file);
++=======
++>>>>>>> 75e55d8a107e (mm: move free_devmap_managed_page to memremap.c)
diff --git a/include/linux/mm.h b/include/linux/mm.h
index e3b1a16638a0..a9d38a168379 100644
--- a/include/linux/mm.h
+++ b/include/linux/mm.h
@@ -1004,7 +1004,6 @@ static inline bool is_zone_device_page(const struct page *page)
 #endif
 
 #ifdef CONFIG_DEV_PAGEMAP_OPS
-void free_devmap_managed_page(struct page *page);
 DECLARE_STATIC_KEY_FALSE(devmap_managed_key);
 
 static inline bool page_is_devmap_managed(struct page *page)
diff --git a/mm/memremap.c b/mm/memremap.c
index 2455bac89506..8e64561374eb 100644
--- a/mm/memremap.c
+++ b/mm/memremap.c
@@ -528,4 +528,25 @@ void free_devmap_managed_page(struct page *page)
 	page->mapping = NULL;
 	page->pgmap->ops->page_free(page);
 }
+
+void put_devmap_managed_page(struct page *page)
+{
+	int count;
+
+	if (WARN_ON_ONCE(!page_is_devmap_managed(page)))
+		return;
+
+	count = page_ref_dec_return(page);
+
+	/*
+	 * devmap page refcounts are 1-based, rather than 0-based: if
+	 * refcount is 1, then the page is free and the refcount is
+	 * stable because nobody holds a reference on the page.
+	 */
+	if (count == 1)
+		free_devmap_managed_page(page);
+	else if (!count)
+		__put_page(page);
+}
+EXPORT_SYMBOL(put_devmap_managed_page);
 #endif /* CONFIG_DEV_PAGEMAP_OPS */
* Unmerged path mm/swap.c
