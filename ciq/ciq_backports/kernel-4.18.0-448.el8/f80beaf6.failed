ASoC: SOF: ipc3: Remove the ipc3-ops.h header file

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Peter Ujfalusi <peter.ujfalusi@linux.intel.com>
commit f80beaf6f2b1eb55fb1b2128a43e0a0c9c4d19de
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/f80beaf6.failed

Only the main IPC ops struct should be visible outside of IPC3 code to make
sure that the code is correctly abstracted.

Instead of keeping the ipc3-ops.h with only the high level ops struct
declaration, put the ipc3_ops to sof-priv.h and move all other ops struct
declaration into ipc3-priv.h

New IPC implementation should follow this route: the main IPC ops should be
declared in sof-priv.h and no other IPC version related header be used
for generic code.

	Signed-off-by: Peter Ujfalusi <peter.ujfalusi@linux.intel.com>
	Reviewed-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
	Reviewed-by: Ranjani Sridharan <ranjani.sridharan@linux.intel.com>
	Reviewed-by: Bard Liao <yung-chuan.liao@linux.intel.com>
Link: https://lore.kernel.org/r/20220504102831.10071-1-peter.ujfalusi@linux.intel.com
	Signed-off-by: Mark Brown <broonie@kernel.org>
(cherry picked from commit f80beaf6f2b1eb55fb1b2128a43e0a0c9c4d19de)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	sound/soc/sof/ipc.c
#	sound/soc/sof/ipc3-control.c
#	sound/soc/sof/ipc3-loader.c
#	sound/soc/sof/ipc3-pcm.c
#	sound/soc/sof/ipc3-priv.h
#	sound/soc/sof/ipc3-topology.c
#	sound/soc/sof/ipc3.c
#	sound/soc/sof/sof-priv.h
diff --cc sound/soc/sof/ipc.c
index ed366c99fce2,41f3a217be5d..000000000000
--- a/sound/soc/sof/ipc.c
+++ b/sound/soc/sof/ipc.c
@@@ -17,327 -17,6 +17,330 @@@
  #include "sof-priv.h"
  #include "sof-audio.h"
  #include "ops.h"
++<<<<<<< HEAD
 +
 +typedef void (*ipc_rx_callback)(struct snd_sof_dev *sdev, void *msg_buf);
 +
 +static void ipc_trace_message(struct snd_sof_dev *sdev, void *msg_buf);
 +static void ipc_stream_message(struct snd_sof_dev *sdev, void *msg_buf);
 +
 +/*
 + * IPC message Tx/Rx message handling.
 + */
 +
 +struct sof_ipc_ctrl_data_params {
 +	size_t msg_bytes;
 +	size_t hdr_bytes;
 +	size_t pl_size;
 +	size_t elems;
 +	u32 num_msg;
 +	u8 *src;
 +	u8 *dst;
 +};
 +
 +#if IS_ENABLED(CONFIG_SND_SOC_SOF_DEBUG_VERBOSE_IPC)
 +static void ipc_log_header(struct device *dev, u8 *text, u32 cmd)
 +{
 +	u8 *str;
 +	u8 *str2 = NULL;
 +	u32 glb;
 +	u32 type;
 +	bool vdbg = false;
 +
 +	glb = cmd & SOF_GLB_TYPE_MASK;
 +	type = cmd & SOF_CMD_TYPE_MASK;
 +
 +	switch (glb) {
 +	case SOF_IPC_GLB_REPLY:
 +		str = "GLB_REPLY"; break;
 +	case SOF_IPC_GLB_COMPOUND:
 +		str = "GLB_COMPOUND"; break;
 +	case SOF_IPC_GLB_TPLG_MSG:
 +		str = "GLB_TPLG_MSG";
 +		switch (type) {
 +		case SOF_IPC_TPLG_COMP_NEW:
 +			str2 = "COMP_NEW"; break;
 +		case SOF_IPC_TPLG_COMP_FREE:
 +			str2 = "COMP_FREE"; break;
 +		case SOF_IPC_TPLG_COMP_CONNECT:
 +			str2 = "COMP_CONNECT"; break;
 +		case SOF_IPC_TPLG_PIPE_NEW:
 +			str2 = "PIPE_NEW"; break;
 +		case SOF_IPC_TPLG_PIPE_FREE:
 +			str2 = "PIPE_FREE"; break;
 +		case SOF_IPC_TPLG_PIPE_CONNECT:
 +			str2 = "PIPE_CONNECT"; break;
 +		case SOF_IPC_TPLG_PIPE_COMPLETE:
 +			str2 = "PIPE_COMPLETE"; break;
 +		case SOF_IPC_TPLG_BUFFER_NEW:
 +			str2 = "BUFFER_NEW"; break;
 +		case SOF_IPC_TPLG_BUFFER_FREE:
 +			str2 = "BUFFER_FREE"; break;
 +		default:
 +			str2 = "unknown type"; break;
 +		}
 +		break;
 +	case SOF_IPC_GLB_PM_MSG:
 +		str = "GLB_PM_MSG";
 +		switch (type) {
 +		case SOF_IPC_PM_CTX_SAVE:
 +			str2 = "CTX_SAVE"; break;
 +		case SOF_IPC_PM_CTX_RESTORE:
 +			str2 = "CTX_RESTORE"; break;
 +		case SOF_IPC_PM_CTX_SIZE:
 +			str2 = "CTX_SIZE"; break;
 +		case SOF_IPC_PM_CLK_SET:
 +			str2 = "CLK_SET"; break;
 +		case SOF_IPC_PM_CLK_GET:
 +			str2 = "CLK_GET"; break;
 +		case SOF_IPC_PM_CLK_REQ:
 +			str2 = "CLK_REQ"; break;
 +		case SOF_IPC_PM_CORE_ENABLE:
 +			str2 = "CORE_ENABLE"; break;
 +		case SOF_IPC_PM_GATE:
 +			str2 = "GATE"; break;
 +		default:
 +			str2 = "unknown type"; break;
 +		}
 +		break;
 +	case SOF_IPC_GLB_COMP_MSG:
 +		str = "GLB_COMP_MSG";
 +		switch (type) {
 +		case SOF_IPC_COMP_SET_VALUE:
 +			str2 = "SET_VALUE"; break;
 +		case SOF_IPC_COMP_GET_VALUE:
 +			str2 = "GET_VALUE"; break;
 +		case SOF_IPC_COMP_SET_DATA:
 +			str2 = "SET_DATA"; break;
 +		case SOF_IPC_COMP_GET_DATA:
 +			str2 = "GET_DATA"; break;
 +		default:
 +			str2 = "unknown type"; break;
 +		}
 +		break;
 +	case SOF_IPC_GLB_STREAM_MSG:
 +		str = "GLB_STREAM_MSG";
 +		switch (type) {
 +		case SOF_IPC_STREAM_PCM_PARAMS:
 +			str2 = "PCM_PARAMS"; break;
 +		case SOF_IPC_STREAM_PCM_PARAMS_REPLY:
 +			str2 = "PCM_REPLY"; break;
 +		case SOF_IPC_STREAM_PCM_FREE:
 +			str2 = "PCM_FREE"; break;
 +		case SOF_IPC_STREAM_TRIG_START:
 +			str2 = "TRIG_START"; break;
 +		case SOF_IPC_STREAM_TRIG_STOP:
 +			str2 = "TRIG_STOP"; break;
 +		case SOF_IPC_STREAM_TRIG_PAUSE:
 +			str2 = "TRIG_PAUSE"; break;
 +		case SOF_IPC_STREAM_TRIG_RELEASE:
 +			str2 = "TRIG_RELEASE"; break;
 +		case SOF_IPC_STREAM_TRIG_DRAIN:
 +			str2 = "TRIG_DRAIN"; break;
 +		case SOF_IPC_STREAM_TRIG_XRUN:
 +			str2 = "TRIG_XRUN"; break;
 +		case SOF_IPC_STREAM_POSITION:
 +			vdbg = true;
 +			str2 = "POSITION"; break;
 +		case SOF_IPC_STREAM_VORBIS_PARAMS:
 +			str2 = "VORBIS_PARAMS"; break;
 +		case SOF_IPC_STREAM_VORBIS_FREE:
 +			str2 = "VORBIS_FREE"; break;
 +		default:
 +			str2 = "unknown type"; break;
 +		}
 +		break;
 +	case SOF_IPC_FW_READY:
 +		str = "FW_READY"; break;
 +	case SOF_IPC_GLB_DAI_MSG:
 +		str = "GLB_DAI_MSG";
 +		switch (type) {
 +		case SOF_IPC_DAI_CONFIG:
 +			str2 = "CONFIG"; break;
 +		case SOF_IPC_DAI_LOOPBACK:
 +			str2 = "LOOPBACK"; break;
 +		default:
 +			str2 = "unknown type"; break;
 +		}
 +		break;
 +	case SOF_IPC_GLB_TRACE_MSG:
 +		str = "GLB_TRACE_MSG";
 +		switch (type) {
 +		case SOF_IPC_TRACE_DMA_PARAMS:
 +			str2 = "DMA_PARAMS"; break;
 +		case SOF_IPC_TRACE_DMA_POSITION:
 +			str2 = "DMA_POSITION"; break;
 +		case SOF_IPC_TRACE_DMA_PARAMS_EXT:
 +			str2 = "DMA_PARAMS_EXT"; break;
 +		case SOF_IPC_TRACE_FILTER_UPDATE:
 +			str2 = "FILTER_UPDATE"; break;
 +		case SOF_IPC_TRACE_DMA_FREE:
 +			str2 = "DMA_FREE"; break;
 +		default:
 +			str2 = "unknown type"; break;
 +		}
 +		break;
 +	case SOF_IPC_GLB_TEST_MSG:
 +		str = "GLB_TEST_MSG";
 +		switch (type) {
 +		case SOF_IPC_TEST_IPC_FLOOD:
 +			str2 = "IPC_FLOOD"; break;
 +		default:
 +			str2 = "unknown type"; break;
 +		}
 +		break;
 +	case SOF_IPC_GLB_DEBUG:
 +		str = "GLB_DEBUG";
 +		switch (type) {
 +		case SOF_IPC_DEBUG_MEM_USAGE:
 +			str2 = "MEM_USAGE"; break;
 +		default:
 +			str2 = "unknown type"; break;
 +		}
 +		break;
 +	case SOF_IPC_GLB_PROBE:
 +		str = "GLB_PROBE";
 +		switch (type) {
 +		case SOF_IPC_PROBE_INIT:
 +			str2 = "INIT"; break;
 +		case SOF_IPC_PROBE_DEINIT:
 +			str2 = "DEINIT"; break;
 +		case SOF_IPC_PROBE_DMA_ADD:
 +			str2 = "DMA_ADD"; break;
 +		case SOF_IPC_PROBE_DMA_INFO:
 +			str2 = "DMA_INFO"; break;
 +		case SOF_IPC_PROBE_DMA_REMOVE:
 +			str2 = "DMA_REMOVE"; break;
 +		case SOF_IPC_PROBE_POINT_ADD:
 +			str2 = "POINT_ADD"; break;
 +		case SOF_IPC_PROBE_POINT_INFO:
 +			str2 = "POINT_INFO"; break;
 +		case SOF_IPC_PROBE_POINT_REMOVE:
 +			str2 = "POINT_REMOVE"; break;
 +		default:
 +			str2 = "unknown type"; break;
 +		}
 +		break;
 +	default:
 +		str = "unknown GLB command"; break;
 +	}
 +
 +	if (str2) {
 +		if (vdbg)
 +			dev_vdbg(dev, "%s: 0x%x: %s: %s\n", text, cmd, str, str2);
 +		else
 +			dev_dbg(dev, "%s: 0x%x: %s: %s\n", text, cmd, str, str2);
 +	} else {
 +		dev_dbg(dev, "%s: 0x%x: %s\n", text, cmd, str);
 +	}
 +}
 +#else
 +static inline void ipc_log_header(struct device *dev, u8 *text, u32 cmd)
 +{
 +	if ((cmd & SOF_GLB_TYPE_MASK) != SOF_IPC_GLB_TRACE_MSG)
 +		dev_dbg(dev, "%s: 0x%x\n", text, cmd);
 +}
 +#endif
 +
 +/* wait for IPC message reply */
 +static int tx_wait_done(struct snd_sof_ipc *ipc, struct snd_sof_ipc_msg *msg,
 +			void *reply_data)
 +{
 +	struct snd_sof_dev *sdev = ipc->sdev;
 +	struct sof_ipc_cmd_hdr *hdr = msg->msg_data;
 +	int ret;
 +
 +	/* wait for DSP IPC completion */
 +	ret = wait_event_timeout(msg->waitq, msg->ipc_complete,
 +				 msecs_to_jiffies(sdev->ipc_timeout));
 +
 +	if (ret == 0) {
 +		dev_err(sdev->dev,
 +			"ipc tx timed out for %#x (msg/reply size: %d/%zu)\n",
 +			hdr->cmd, hdr->size, msg->reply_size);
 +		snd_sof_handle_fw_exception(ipc->sdev);
 +		ret = -ETIMEDOUT;
 +	} else {
 +		ret = msg->reply_error;
 +		if (ret < 0) {
 +			dev_err(sdev->dev,
 +				"ipc tx error for %#x (msg/reply size: %d/%zu): %d\n",
 +				hdr->cmd, hdr->size, msg->reply_size, ret);
 +		} else {
 +			ipc_log_header(sdev->dev, "ipc tx succeeded", hdr->cmd);
 +			if (msg->reply_size)
 +				/* copy the data returned from DSP */
 +				memcpy(reply_data, msg->reply_data,
 +				       msg->reply_size);
 +		}
 +
 +		/* re-enable dumps after successful IPC tx */
 +		if (sdev->ipc_dump_printed) {
 +			sdev->dbg_dump_printed = false;
 +			sdev->ipc_dump_printed = false;
 +		}
 +	}
 +
 +	return ret;
 +}
 +
 +/* send IPC message from host to DSP */
 +static int sof_ipc_tx_message_unlocked(struct snd_sof_ipc *ipc,
 +				       void *msg_data, size_t msg_bytes,
 +				       void *reply_data, size_t reply_bytes)
 +{
 +	struct sof_ipc_cmd_hdr *hdr = msg_data;
 +	struct snd_sof_dev *sdev = ipc->sdev;
 +	struct snd_sof_ipc_msg *msg;
 +	int ret;
 +
 +	if (!msg_data || msg_bytes < sizeof(*hdr)) {
 +		dev_err_ratelimited(sdev->dev, "No IPC message to send\n");
 +		return -EINVAL;
 +	}
 +
 +	if (ipc->disable_ipc_tx || sdev->fw_state != SOF_FW_BOOT_COMPLETE)
 +		return -ENODEV;
 +
 +	/*
 +	 * The spin-lock is also still needed to protect message objects against
 +	 * other atomic contexts.
 +	 */
 +	spin_lock_irq(&sdev->ipc_lock);
 +
 +	/* initialise the message */
 +	msg = &ipc->msg;
 +
 +	/* attach message data */
 +	msg->msg_data = msg_data;
 +	msg->msg_size = msg_bytes;
 +
 +	msg->reply_size = reply_bytes;
 +	msg->reply_error = 0;
 +
 +	sdev->msg = msg;
 +
 +	ret = snd_sof_dsp_send_msg(sdev, msg);
 +	/* Next reply that we receive will be related to this message */
 +	if (!ret)
 +		msg->ipc_complete = false;
 +
 +	spin_unlock_irq(&sdev->ipc_lock);
 +
 +	if (ret) {
 +		dev_err_ratelimited(sdev->dev,
 +				    "error: ipc tx failed with error %d\n",
 +				    ret);
 +		return ret;
 +	}
 +
 +	ipc_log_header(sdev->dev, "ipc tx", hdr->cmd);
 +
 +	/* now wait for completion */
 +	return tx_wait_done(ipc, msg, reply_data);
 +}
++=======
++>>>>>>> f80beaf6f2b1 (ASoC: SOF: ipc3: Remove the ipc3-ops.h header file)
  
  /**
   * sof_ipc_send_msg - generic function to prepare and send one IPC message
diff --cc sound/soc/sof/sof-priv.h
index 538862b12104,4801849cb2ab..000000000000
--- a/sound/soc/sof/sof-priv.h
+++ b/sound/soc/sof/sof-priv.h
@@@ -662,4 -711,59 +662,62 @@@ int sof_stream_pcm_close(struct snd_sof
  			 struct snd_pcm_substream *substream);
  
  int sof_machine_check(struct snd_sof_dev *sdev);
++<<<<<<< HEAD
++=======
+ 
+ /* SOF client support */
+ #if IS_ENABLED(CONFIG_SND_SOC_SOF_CLIENT)
+ int sof_client_dev_register(struct snd_sof_dev *sdev, const char *name, u32 id,
+ 			    const void *data, size_t size);
+ void sof_client_dev_unregister(struct snd_sof_dev *sdev, const char *name, u32 id);
+ int sof_register_clients(struct snd_sof_dev *sdev);
+ void sof_unregister_clients(struct snd_sof_dev *sdev);
+ void sof_client_ipc_rx_dispatcher(struct snd_sof_dev *sdev, void *msg_buf);
+ void sof_client_fw_state_dispatcher(struct snd_sof_dev *sdev);
+ int sof_suspend_clients(struct snd_sof_dev *sdev, pm_message_t state);
+ int sof_resume_clients(struct snd_sof_dev *sdev);
+ #else /* CONFIG_SND_SOC_SOF_CLIENT */
+ static inline int sof_client_dev_register(struct snd_sof_dev *sdev, const char *name,
+ 					  u32 id, const void *data, size_t size)
+ {
+ 	return 0;
+ }
+ 
+ static inline void sof_client_dev_unregister(struct snd_sof_dev *sdev,
+ 					     const char *name, u32 id)
+ {
+ }
+ 
+ static inline int sof_register_clients(struct snd_sof_dev *sdev)
+ {
+ 	return 0;
+ }
+ 
+ static inline  void sof_unregister_clients(struct snd_sof_dev *sdev)
+ {
+ }
+ 
+ static inline void sof_client_ipc_rx_dispatcher(struct snd_sof_dev *sdev, void *msg_buf)
+ {
+ }
+ 
+ static inline void sof_client_fw_state_dispatcher(struct snd_sof_dev *sdev)
+ {
+ }
+ 
+ static inline int sof_suspend_clients(struct snd_sof_dev *sdev, pm_message_t state)
+ {
+ 	return 0;
+ }
+ 
+ static inline int sof_resume_clients(struct snd_sof_dev *sdev)
+ {
+ 	return 0;
+ }
+ #endif /* CONFIG_SND_SOC_SOF_CLIENT */
+ 
+ /* Main ops for IPC implementations */
+ extern const struct sof_ipc_ops ipc3_ops;
+ 
++>>>>>>> f80beaf6f2b1 (ASoC: SOF: ipc3: Remove the ipc3-ops.h header file)
  #endif
* Unmerged path sound/soc/sof/ipc3-control.c
* Unmerged path sound/soc/sof/ipc3-loader.c
* Unmerged path sound/soc/sof/ipc3-pcm.c
* Unmerged path sound/soc/sof/ipc3-priv.h
* Unmerged path sound/soc/sof/ipc3-topology.c
* Unmerged path sound/soc/sof/ipc3.c
* Unmerged path sound/soc/sof/ipc.c
* Unmerged path sound/soc/sof/ipc3-control.c
* Unmerged path sound/soc/sof/ipc3-loader.c
* Unmerged path sound/soc/sof/ipc3-pcm.c
* Unmerged path sound/soc/sof/ipc3-priv.h
* Unmerged path sound/soc/sof/ipc3-topology.c
* Unmerged path sound/soc/sof/ipc3.c
* Unmerged path sound/soc/sof/sof-priv.h
