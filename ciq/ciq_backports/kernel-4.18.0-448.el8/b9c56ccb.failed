ethernet: Remove redundant 'flush_workqueue()' calls

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Christophe JAILLET <christophe.jaillet@wanadoo.fr>
commit b9c56ccb436d1e952bb1fc0ddf752669a116b310
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/b9c56ccb.failed

'destroy_workqueue()' already drains the queue before destroying it, so
there is no need to flush it explicitly.

Remove the redundant 'flush_workqueue()' calls.

This was generated with coccinelle:

@@
expression E;
@@
- 	flush_workqueue(E);
	destroy_workqueue(E);

	Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
	Reviewed-by: Leon Romanovsky <leonro@nvidia.com> #mlx*
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit b9c56ccb436d1e952bb1fc0ddf752669a116b310)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/cavium/liquidio/lio_core.c
#	drivers/net/ethernet/marvell/octeontx2/af/cgx.c
#	drivers/net/ethernet/marvell/octeontx2/af/rvu.c
#	drivers/net/ethernet/marvell/octeontx2/af/rvu_cgx.c
#	drivers/net/ethernet/marvell/octeontx2/nic/otx2_vf.c
diff --cc drivers/net/ethernet/cavium/liquidio/lio_core.c
index 8093c5eafea2,73cb03266549..000000000000
--- a/drivers/net/ethernet/cavium/liquidio/lio_core.c
+++ b/drivers/net/ethernet/cavium/liquidio/lio_core.c
@@@ -509,11 -482,17 +509,21 @@@ int setup_rx_oom_poll_fn(struct net_dev
  void cleanup_rx_oom_poll_fn(struct net_device *netdev)
  {
  	struct lio *lio = GET_LIO(netdev);
 -	struct octeon_device *oct = lio->oct_dev;
 -	struct cavium_wq *wq;
 -	int q_no;
  
++<<<<<<< HEAD
 +	if (lio->rxq_status_wq.wq) {
 +		cancel_delayed_work_sync(&lio->rxq_status_wq.wk.work);
 +		flush_workqueue(lio->rxq_status_wq.wq);
 +		destroy_workqueue(lio->rxq_status_wq.wq);
++=======
+ 	for (q_no = 0; q_no < oct->num_oqs; q_no++) {
+ 		wq = &lio->rxq_status_wq[q_no];
+ 		if (wq->wq) {
+ 			cancel_delayed_work_sync(&wq->wk.work);
+ 			destroy_workqueue(wq->wq);
+ 			wq->wq = NULL;
+ 		}
++>>>>>>> b9c56ccb436d (ethernet: Remove redundant 'flush_workqueue()' calls)
  	}
  }
  
* Unmerged path drivers/net/ethernet/marvell/octeontx2/af/cgx.c
* Unmerged path drivers/net/ethernet/marvell/octeontx2/af/rvu.c
* Unmerged path drivers/net/ethernet/marvell/octeontx2/af/rvu_cgx.c
* Unmerged path drivers/net/ethernet/marvell/octeontx2/nic/otx2_vf.c
diff --git a/drivers/net/ethernet/amd/xgbe/xgbe-drv.c b/drivers/net/ethernet/amd/xgbe/xgbe-drv.c
index bd8e0e9c4d05..2635d5a45a4a 100644
--- a/drivers/net/ethernet/amd/xgbe/xgbe-drv.c
+++ b/drivers/net/ethernet/amd/xgbe/xgbe-drv.c
@@ -1995,10 +1995,8 @@ static int xgbe_close(struct net_device *netdev)
 	clk_disable_unprepare(pdata->ptpclk);
 	clk_disable_unprepare(pdata->sysclk);
 
-	flush_workqueue(pdata->an_workqueue);
 	destroy_workqueue(pdata->an_workqueue);
 
-	flush_workqueue(pdata->dev_workqueue);
 	destroy_workqueue(pdata->dev_workqueue);
 
 	set_bit(XGBE_DOWN, &pdata->dev_state);
diff --git a/drivers/net/ethernet/brocade/bna/bnad.c b/drivers/net/ethernet/brocade/bna/bnad.c
index ea5f32ea308a..0d0bca011304 100644
--- a/drivers/net/ethernet/brocade/bna/bnad.c
+++ b/drivers/net/ethernet/brocade/bna/bnad.c
@@ -3531,7 +3531,6 @@ static void
 bnad_uninit(struct bnad *bnad)
 {
 	if (bnad->work_q) {
-		flush_workqueue(bnad->work_q);
 		destroy_workqueue(bnad->work_q);
 		bnad->work_q = NULL;
 	}
* Unmerged path drivers/net/ethernet/cavium/liquidio/lio_core.c
diff --git a/drivers/net/ethernet/emulex/benet/be_main.c b/drivers/net/ethernet/emulex/benet/be_main.c
index 8e5482b29ab5..271ddcd9afcd 100644
--- a/drivers/net/ethernet/emulex/benet/be_main.c
+++ b/drivers/net/ethernet/emulex/benet/be_main.c
@@ -4629,7 +4629,6 @@ static void be_destroy_err_recovery_workq(void)
 	if (!be_err_recovery_workq)
 		return;
 
-	flush_workqueue(be_err_recovery_workq);
 	destroy_workqueue(be_err_recovery_workq);
 	be_err_recovery_workq = NULL;
 }
* Unmerged path drivers/net/ethernet/marvell/octeontx2/af/cgx.c
* Unmerged path drivers/net/ethernet/marvell/octeontx2/af/rvu.c
* Unmerged path drivers/net/ethernet/marvell/octeontx2/af/rvu_cgx.c
* Unmerged path drivers/net/ethernet/marvell/octeontx2/nic/otx2_vf.c
diff --git a/drivers/net/ethernet/mellanox/mlx4/cmd.c b/drivers/net/ethernet/mellanox/mlx4/cmd.c
index 94ead263081f..e10b7b04b894 100644
--- a/drivers/net/ethernet/mellanox/mlx4/cmd.c
+++ b/drivers/net/ethernet/mellanox/mlx4/cmd.c
@@ -2480,7 +2480,6 @@ int mlx4_multi_func_init(struct mlx4_dev *dev)
 	return 0;
 
 err_thread:
-	flush_workqueue(priv->mfunc.master.comm_wq);
 	destroy_workqueue(priv->mfunc.master.comm_wq);
 err_slaves:
 	while (i--) {
@@ -2587,7 +2586,6 @@ void mlx4_multi_func_cleanup(struct mlx4_dev *dev)
 	int i, port;
 
 	if (mlx4_is_master(dev)) {
-		flush_workqueue(priv->mfunc.master.comm_wq);
 		destroy_workqueue(priv->mfunc.master.comm_wq);
 		for (i = 0; i < dev->num_slaves; i++) {
 			for (port = 1; port <= MLX4_MAX_PORTS; port++)
diff --git a/drivers/net/ethernet/mellanox/mlx4/en_main.c b/drivers/net/ethernet/mellanox/mlx4/en_main.c
index 109472d6b61f..f1259bdb1a29 100644
--- a/drivers/net/ethernet/mellanox/mlx4/en_main.c
+++ b/drivers/net/ethernet/mellanox/mlx4/en_main.c
@@ -237,7 +237,6 @@ static void mlx4_en_remove(struct mlx4_dev *dev, void *endev_ptr)
 		if (mdev->pndev[i])
 			mlx4_en_destroy_netdev(mdev->pndev[i]);
 
-	flush_workqueue(mdev->workqueue);
 	destroy_workqueue(mdev->workqueue);
 	(void) mlx4_mr_free(dev, &mdev->mr);
 	iounmap(mdev->uar_map);
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/diag/fw_tracer.c b/drivers/net/ethernet/mellanox/mlx5/core/diag/fw_tracer.c
index f9cf9fb31547..da1bec04efff 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/diag/fw_tracer.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/diag/fw_tracer.c
@@ -1069,7 +1069,6 @@ void mlx5_fw_tracer_destroy(struct mlx5_fw_tracer *tracer)
 	mlx5_fw_tracer_clean_saved_traces_array(tracer);
 	mlx5_fw_tracer_free_strings_db(tracer);
 	mlx5_fw_tracer_destroy_log_buf(tracer);
-	flush_workqueue(tracer->work_queue);
 	destroy_workqueue(tracer->work_queue);
 	kvfree(tracer);
 }
diff --git a/drivers/net/ethernet/qlogic/qed/qed_sriov.c b/drivers/net/ethernet/qlogic/qed/qed_sriov.c
index caf02d1be85b..0848b5529d48 100644
--- a/drivers/net/ethernet/qlogic/qed/qed_sriov.c
+++ b/drivers/net/ethernet/qlogic/qed/qed_sriov.c
@@ -5253,7 +5253,6 @@ void qed_iov_wq_stop(struct qed_dev *cdev, bool schedule_first)
 			cancel_delayed_work_sync(&cdev->hwfns[i].iov_task);
 		}
 
-		flush_workqueue(cdev->hwfns[i].iov_wq);
 		destroy_workqueue(cdev->hwfns[i].iov_wq);
 	}
 }
