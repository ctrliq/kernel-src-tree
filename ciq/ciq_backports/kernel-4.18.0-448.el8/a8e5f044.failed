iommu/io-pgtable: Remove non-strict quirk

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Robin Murphy <robin.murphy@arm.com>
commit a8e5f04458c4e496eada2b029ce96713bb6c388d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/a8e5f044.failed

IO_PGTABLE_QUIRK_NON_STRICT was never a very comfortable fit, since it's
not a quirk of the pagetable format itself. Now that we have a more
appropriate way to convey non-strict unmaps, though, this last of the
non-quirk quirks can also go, and with the flush queue code also now
enforcing its own ordering we can have a lovely cleanup all round.

	Signed-off-by: Robin Murphy <robin.murphy@arm.com>
Link: https://lore.kernel.org/r/155b5c621cd8936472e273a8b07a182f62c6c20d.1628682049.git.robin.murphy@arm.com
	Signed-off-by: Joerg Roedel <jroedel@suse.de>
(cherry picked from commit a8e5f04458c4e496eada2b029ce96713bb6c388d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/iommu/io-pgtable-arm-v7s.c
#	include/linux/io-pgtable.h
diff --cc drivers/iommu/io-pgtable-arm-v7s.c
index 25a1e318422a,e84478d39705..000000000000
--- a/drivers/iommu/io-pgtable-arm-v7s.c
+++ b/drivers/iommu/io-pgtable-arm-v7s.c
@@@ -736,8 -784,7 +729,12 @@@ static struct io_pgtable *arm_v7s_alloc
  
  	if (cfg->quirks & ~(IO_PGTABLE_QUIRK_ARM_NS |
  			    IO_PGTABLE_QUIRK_NO_PERMS |
++<<<<<<< HEAD
 +			    IO_PGTABLE_QUIRK_ARM_MTK_4GB |
 +			    IO_PGTABLE_QUIRK_NON_STRICT))
++=======
+ 			    IO_PGTABLE_QUIRK_ARM_MTK_EXT))
++>>>>>>> a8e5f04458c4 (iommu/io-pgtable: Remove non-strict quirk)
  		return NULL;
  
  	/* If ARM_MTK_4GB is enabled, the NO_PERMS is also expected. */
diff --cc include/linux/io-pgtable.h
index 06efc1ac3475,9ba6d9ea316e..000000000000
--- a/include/linux/io-pgtable.h
+++ b/include/linux/io-pgtable.h
@@@ -69,15 -69,10 +69,11 @@@ struct io_pgtable_cfg 
  	 *	hardware which does not implement the permissions of a given
  	 *	format, and/or requires some format-specific default value.
  	 *
 -	 * IO_PGTABLE_QUIRK_ARM_MTK_EXT: (ARM v7s format) MediaTek IOMMUs extend
 -	 *	to support up to 35 bits PA where the bit32, bit33 and bit34 are
 -	 *	encoded in the bit9, bit4 and bit5 of the PTE respectively.
 +	 * IO_PGTABLE_QUIRK_ARM_MTK_4GB: (ARM v7s format) Set bit 9 in all
 +	 *	PTEs, for Mediatek IOMMUs which treat it as a 33rd address bit
 +	 *	when the SoC is in "4GB mode" and they can only access the high
 +	 *	remap of DRAM (0x1_00000000 to 0x1_ffffffff).
  	 *
- 	 * IO_PGTABLE_QUIRK_NON_STRICT: Skip issuing synchronous leaf TLBIs
- 	 *	on unmap, for DMA domains using the flush queue mechanism for
- 	 *	delayed invalidation.
- 	 *
  	 * IO_PGTABLE_QUIRK_ARM_TTBR1: (ARM LPAE format) Configure the table
  	 *	for use in the upper half of a split address space.
  	 *
@@@ -86,8 -81,7 +82,12 @@@
  	 */
  	#define IO_PGTABLE_QUIRK_ARM_NS		BIT(0)
  	#define IO_PGTABLE_QUIRK_NO_PERMS	BIT(1)
++<<<<<<< HEAD
 +	#define IO_PGTABLE_QUIRK_ARM_MTK_4GB	BIT(3)
 +	#define IO_PGTABLE_QUIRK_NON_STRICT	BIT(4)
++=======
+ 	#define IO_PGTABLE_QUIRK_ARM_MTK_EXT	BIT(3)
++>>>>>>> a8e5f04458c4 (iommu/io-pgtable: Remove non-strict quirk)
  	#define IO_PGTABLE_QUIRK_ARM_TTBR1	BIT(5)
  	#define IO_PGTABLE_QUIRK_ARM_OUTER_WBWA	BIT(6)
  	unsigned long			quirks;
diff --git a/drivers/iommu/arm/arm-smmu-v3/arm-smmu-v3.c b/drivers/iommu/arm/arm-smmu-v3/arm-smmu-v3.c
index 75028b596fa2..bfd0baee710a 100644
--- a/drivers/iommu/arm/arm-smmu-v3/arm-smmu-v3.c
+++ b/drivers/iommu/arm/arm-smmu-v3/arm-smmu-v3.c
@@ -2195,9 +2195,6 @@ static int arm_smmu_domain_finalise(struct iommu_domain *domain,
 		.iommu_dev	= smmu->dev,
 	};
 
-	if (!iommu_get_dma_strict(domain))
-		pgtbl_cfg.quirks |= IO_PGTABLE_QUIRK_NON_STRICT;
-
 	pgtbl_ops = alloc_io_pgtable_ops(fmt, &pgtbl_cfg, smmu_domain);
 	if (!pgtbl_ops)
 		return -ENOMEM;
diff --git a/drivers/iommu/arm/arm-smmu/arm-smmu.c b/drivers/iommu/arm/arm-smmu/arm-smmu.c
index 26c55cbd13ec..c197142c4079 100644
--- a/drivers/iommu/arm/arm-smmu/arm-smmu.c
+++ b/drivers/iommu/arm/arm-smmu/arm-smmu.c
@@ -773,9 +773,6 @@ static int arm_smmu_init_domain_context(struct iommu_domain *domain,
 		.iommu_dev	= smmu->dev,
 	};
 
-	if (!iommu_get_dma_strict(domain))
-		pgtbl_cfg.quirks |= IO_PGTABLE_QUIRK_NON_STRICT;
-
 	if (smmu->impl && smmu->impl->init_context) {
 		ret = smmu->impl->init_context(smmu_domain, &pgtbl_cfg, dev);
 		if (ret)
* Unmerged path drivers/iommu/io-pgtable-arm-v7s.c
diff --git a/drivers/iommu/io-pgtable-arm.c b/drivers/iommu/io-pgtable-arm.c
index bf3c86225fc1..2b75cabaef9c 100644
--- a/drivers/iommu/io-pgtable-arm.c
+++ b/drivers/iommu/io-pgtable-arm.c
@@ -650,14 +650,7 @@ static size_t __arm_lpae_unmap(struct arm_lpae_io_pgtable *data,
 				io_pgtable_tlb_flush_walk(iop, iova + i * size, size,
 							  ARM_LPAE_GRANULE(data));
 				__arm_lpae_free_pgtable(data, lvl + 1, iopte_deref(pte, data));
-			} else if (iop->cfg.quirks & IO_PGTABLE_QUIRK_NON_STRICT) {
-				/*
-				 * Order the PTE update against queueing the IOVA, to
-				 * guarantee that a flush callback from a different CPU
-				 * has observed it before the TLBIALL can be issued.
-				 */
-				smp_wmb();
-			} else {
+			} else if (!gather->queued) {
 				io_pgtable_tlb_add_page(iop, gather, iova + i * size, size);
 			}
 
@@ -837,7 +830,6 @@ arm_64_lpae_alloc_pgtable_s1(struct io_pgtable_cfg *cfg, void *cookie)
 	bool tg1;
 
 	if (cfg->quirks & ~(IO_PGTABLE_QUIRK_ARM_NS |
-			    IO_PGTABLE_QUIRK_NON_STRICT |
 			    IO_PGTABLE_QUIRK_ARM_TTBR1 |
 			    IO_PGTABLE_QUIRK_ARM_OUTER_WBWA))
 		return NULL;
@@ -941,7 +933,7 @@ arm_64_lpae_alloc_pgtable_s2(struct io_pgtable_cfg *cfg, void *cookie)
 	typeof(&cfg->arm_lpae_s2_cfg.vtcr) vtcr = &cfg->arm_lpae_s2_cfg.vtcr;
 
 	/* The NS quirk doesn't apply at stage 2 */
-	if (cfg->quirks & ~(IO_PGTABLE_QUIRK_NON_STRICT))
+	if (cfg->quirks)
 		return NULL;
 
 	data = arm_lpae_alloc_pgtable(cfg);
* Unmerged path include/linux/io-pgtable.h
