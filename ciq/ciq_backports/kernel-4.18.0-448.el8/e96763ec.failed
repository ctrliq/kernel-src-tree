iommu: Merge strictness and domain type configs

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Robin Murphy <robin.murphy@arm.com>
commit e96763ec42ceb7fc4f1e80b8647bc3ef53b5d286
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/e96763ec.failed

To parallel the sysfs behaviour, merge the new build-time option
for DMA domain strictness into the default domain type choice.

	Suggested-by: Joerg Roedel <joro@8bytes.org>
	Reviewed-by: Lu Baolu <baolu.lu@linux.intel.com>
	Reviewed-by: Jean-Philippe Brucker <jean-philippe@linaro.org>
	Reviewed-by: John Garry <john.garry@huawei.com>
	Signed-off-by: Robin Murphy <robin.murphy@arm.com>
Link: https://lore.kernel.org/r/d04af35b9c0f2a1d39605d7a9b451f5e1f0c7736.1628682049.git.robin.murphy@arm.com
	Signed-off-by: Joerg Roedel <jroedel@suse.de>
(cherry picked from commit e96763ec42ceb7fc4f1e80b8647bc3ef53b5d286)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	Documentation/admin-guide/kernel-parameters.txt
#	drivers/iommu/Kconfig
#	drivers/iommu/iommu.c
diff --cc Documentation/admin-guide/kernel-parameters.txt
index de7f8625946b,19192b39952a..000000000000
--- a/Documentation/admin-guide/kernel-parameters.txt
+++ b/Documentation/admin-guide/kernel-parameters.txt
@@@ -1878,13 -2042,12 +1878,19 @@@
  			  throughput at the cost of reduced device isolation.
  			  Will fall back to strict mode if not supported by
  			  the relevant IOMMU driver.
 -			1 - Strict mode.
 +			1 - Strict mode (default).
  			  DMA unmap operations invalidate IOMMU hardware TLBs
  			  synchronously.
++<<<<<<< HEAD
 +			Note: on x86, the default behaviour depends on the
 +			equivalent driver-specific parameters, but a strict
 +			mode explicitly specified by either method takes
 +			precedence.
++=======
+ 			unset - Use value of CONFIG_IOMMU_DEFAULT_DMA_{LAZY,STRICT}.
+ 			Note: on x86, strict mode specified via one of the
+ 			legacy driver-specific options takes precedence.
++>>>>>>> e96763ec42ce (iommu: Merge strictness and domain type configs)
  
  	iommu.passthrough=
  			[ARM64, X86] Configure DMA to bypass the IOMMU by default.
diff --cc drivers/iommu/Kconfig
index bead5de04ae1,6e06f876d75a..000000000000
--- a/drivers/iommu/Kconfig
+++ b/drivers/iommu/Kconfig
@@@ -78,16 -79,57 +78,70 @@@ config IOMMU_DEBUGF
  	  debug/iommu directory, and then populate a subdirectory with
  	  entries as required.
  
++<<<<<<< HEAD
 +config IOMMU_DEFAULT_PASSTHROUGH
 +	bool "IOMMU passthrough by default"
 +	depends on IOMMU_API
 +	help
 +	  Enable passthrough by default, removing the need to pass in
 +	  iommu.passthrough=on or iommu=pt through command line. If this
 +	  is enabled, you can still disable with iommu.passthrough=off
 +	  or iommu=nopt depending on the architecture.
 +
 +	  If unsure, say N here.
++=======
+ choice
+ 	prompt "IOMMU default domain type"
+ 	depends on IOMMU_API
+ 	default IOMMU_DEFAULT_DMA_LAZY if AMD_IOMMU || INTEL_IOMMU
+ 	default IOMMU_DEFAULT_DMA_STRICT
+ 	help
+ 	  Choose the type of IOMMU domain used to manage DMA API usage by
+ 	  device drivers. The options here typically represent different
+ 	  levels of tradeoff between robustness/security and performance,
+ 	  depending on the IOMMU driver. Not all IOMMUs support all options.
+ 	  This choice can be overridden at boot via the command line, and for
+ 	  some devices also at runtime via sysfs.
+ 
+ 	  If unsure, keep the default.
+ 
+ config IOMMU_DEFAULT_DMA_STRICT
+ 	bool "Translated - Strict"
+ 	help
+ 	  Trusted devices use translation to restrict their access to only
+ 	  DMA-mapped pages, with strict TLB invalidation on unmap. Equivalent
+ 	  to passing "iommu.passthrough=0 iommu.strict=1" on the command line.
+ 
+ 	  Untrusted devices always use this mode, with an additional layer of
+ 	  bounce-buffering such that they cannot gain access to any unrelated
+ 	  data within a mapped page.
+ 
+ config IOMMU_DEFAULT_DMA_LAZY
+ 	bool "Translated - Lazy"
+ 	help
+ 	  Trusted devices use translation to restrict their access to only
+ 	  DMA-mapped pages, but with "lazy" batched TLB invalidation. This
+ 	  mode allows higher performance with some IOMMUs due to reduced TLB
+ 	  flushing, but at the cost of reduced isolation since devices may be
+ 	  able to access memory for some time after it has been unmapped.
+ 	  Equivalent to passing "iommu.passthrough=0 iommu.strict=0" on the
+ 	  command line.
+ 
+ 	  If this mode is not supported by the IOMMU driver, the effective
+ 	  runtime default will fall back to IOMMU_DEFAULT_DMA_STRICT.
+ 
+ config IOMMU_DEFAULT_PASSTHROUGH
+ 	bool "Passthrough"
+ 	help
+ 	  Trusted devices are identity-mapped, giving them unrestricted access
+ 	  to memory with minimal performance overhead. Equivalent to passing
+ 	  "iommu.passthrough=1" (historically "iommu=pt") on the command line.
+ 
+ 	  If this mode is not supported by the IOMMU driver, the effective
+ 	  runtime default will fall back to IOMMU_DEFAULT_DMA_STRICT.
+ 
+ endchoice
++>>>>>>> e96763ec42ce (iommu: Merge strictness and domain type configs)
  
  config OF_IOMMU
  	def_bool y
diff --cc drivers/iommu/iommu.c
index 06c678399112,0e1f791873fa..000000000000
--- a/drivers/iommu/iommu.c
+++ b/drivers/iommu/iommu.c
@@@ -44,8 -31,7 +44,12 @@@ static struct kset *iommu_group_kset
  static DEFINE_IDA(iommu_group_ida);
  
  static unsigned int iommu_def_domain_type __read_mostly;
++<<<<<<< HEAD
 +static bool iommu_def_domain_quirk = false;
 +static bool iommu_dma_strict __read_mostly = true;
++=======
+ static bool iommu_dma_strict __read_mostly = IS_ENABLED(CONFIG_IOMMU_DEFAULT_DMA_STRICT);
++>>>>>>> e96763ec42ce (iommu: Merge strictness and domain type configs)
  static u32 iommu_cmd_line __read_mostly;
  
  struct iommu_group {
* Unmerged path Documentation/admin-guide/kernel-parameters.txt
* Unmerged path drivers/iommu/Kconfig
* Unmerged path drivers/iommu/iommu.c
