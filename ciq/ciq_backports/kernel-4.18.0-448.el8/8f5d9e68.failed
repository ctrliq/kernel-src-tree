wifi: mac80211: remove stray printk

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Johannes Berg <johannes.berg@intel.com>
commit 8f5d9e68c90dd6b01afdfda6d9926c6ea4931c00
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/8f5d9e68.failed

Unfortunately, a printk snuck into a previous patch,
remove it.

Fixes: 81151ce462e5 ("wifi: mac80211: support MLO authentication/association with one link")
	Signed-off-by: Johannes Berg <johannes.berg@intel.com>
(cherry picked from commit 8f5d9e68c90dd6b01afdfda6d9926c6ea4931c00)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/wireless/mlme.c
diff --cc net/wireless/mlme.c
index 54121647d29f,003c57504583..000000000000
--- a/net/wireless/mlme.c
+++ b/net/wireless/mlme.c
@@@ -28,29 -27,44 +28,53 @@@ void cfg80211_rx_assoc_resp(struct net_
  	struct wireless_dev *wdev = dev->ieee80211_ptr;
  	struct wiphy *wiphy = wdev->wiphy;
  	struct cfg80211_registered_device *rdev = wiphy_to_rdev(wiphy);
 -	struct ieee80211_mgmt *mgmt = (struct ieee80211_mgmt *)data->buf;
 -	struct cfg80211_connect_resp_params cr = {
 -		.timeout_reason = NL80211_TIMEOUT_UNSPECIFIED,
 -		.req_ie = data->req_ies,
 -		.req_ie_len = data->req_ies_len,
 -		.resp_ie = mgmt->u.assoc_resp.variable,
 -		.resp_ie_len = data->len -
 -			       offsetof(struct ieee80211_mgmt,
 -					u.assoc_resp.variable),
 -		.status = le16_to_cpu(mgmt->u.assoc_resp.status_code),
 -		.ap_mld_addr = data->ap_mld_addr,
 -	};
 -	unsigned int link_id;
 -
 +	struct ieee80211_mgmt *mgmt = (struct ieee80211_mgmt *)buf;
 +	struct cfg80211_connect_resp_params cr;
 +	const u8 *resp_ie = mgmt->u.assoc_resp.variable;
 +	size_t resp_ie_len = len - offsetof(struct ieee80211_mgmt,
 +					    u.assoc_resp.variable);
 +
++<<<<<<< HEAD
 +	if (bss->channel->band == NL80211_BAND_S1GHZ) {
 +		resp_ie = (u8 *)&mgmt->u.s1g_assoc_resp.variable;
 +		resp_ie_len = len - offsetof(struct ieee80211_mgmt,
 +					     u.s1g_assoc_resp.variable);
++=======
+ 	for (link_id = 0; link_id < ARRAY_SIZE(data->links); link_id++) {
+ 		cr.links[link_id].bss = data->links[link_id].bss;
+ 		if (!cr.links[link_id].bss)
+ 			continue;
+ 		cr.links[link_id].bssid = data->links[link_id].bss->bssid;
+ 		cr.links[link_id].addr = data->links[link_id].addr;
+ 		/* need to have local link addresses for MLO connections */
+ 		WARN_ON(cr.ap_mld_addr && !cr.links[link_id].addr);
+ 
+ 		BUG_ON(!cr.links[link_id].bss->channel);
+ 
+ 		if (cr.links[link_id].bss->channel->band == NL80211_BAND_S1GHZ) {
+ 			WARN_ON(link_id);
+ 			cr.resp_ie = (u8 *)&mgmt->u.s1g_assoc_resp.variable;
+ 			cr.resp_ie_len = data->len -
+ 					 offsetof(struct ieee80211_mgmt,
+ 						  u.s1g_assoc_resp.variable);
+ 		}
+ 
+ 		if (cr.ap_mld_addr)
+ 			cr.valid_links |= BIT(link_id);
++>>>>>>> 8f5d9e68c90d (wifi: mac80211: remove stray printk)
  	}
  
 -	trace_cfg80211_send_rx_assoc(dev, data);
 +	memset(&cr, 0, sizeof(cr));
 +	cr.status = (int)le16_to_cpu(mgmt->u.assoc_resp.status_code);
 +	cr.bssid = mgmt->bssid;
 +	cr.bss = bss;
 +	cr.req_ie = req_ies;
 +	cr.req_ie_len = req_ies_len;
 +	cr.resp_ie = resp_ie;
 +	cr.resp_ie_len = resp_ie_len;
 +	cr.timeout_reason = NL80211_TIMEOUT_UNSPECIFIED;
 +
 +	trace_cfg80211_send_rx_assoc(dev, bss);
  
  	/*
  	 * This is a bit of a hack, we don't notify userspace of
* Unmerged path net/wireless/mlme.c
