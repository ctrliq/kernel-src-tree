ice: Add support for double VLAN in switchdev

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Martyna Szapar-Mudlaw <martyna.szapar-mudlaw@intel.com>
commit 06bca7c2685a9ab129ede0272de00d92c40347ac
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/06bca7c2.failed

Enable support for adding TC rules with both C-tag and S-tag that can
filter on the inner and outer VLAN in QinQ for basic packets (not
tunneled cases).

	Signed-off-by: Wiktor Pilarczyk <wiktor.pilarczyk@intel.com>
	Signed-off-by: Martyna Szapar-Mudlaw <martyna.szapar-mudlaw@intel.com>
	Reviewed-by: Alexander Lobakin <alexandr.lobakin@intel.com>
	Tested-by: Sandeep Penigalapati <sandeep.penigalapati@intel.com>
	Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
(cherry picked from commit 06bca7c2685a9ab129ede0272de00d92c40347ac)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/intel/ice/ice_switch.c
diff --cc drivers/net/ethernet/intel/ice/ice_switch.c
index 7b15835f7479,85816a73f09f..000000000000
--- a/drivers/net/ethernet/intel/ice/ice_switch.c
+++ b/drivers/net/ethernet/intel/ice/ice_switch.c
@@@ -30,6 -30,20 +30,23 @@@ static const u8 dummy_eth_header[DUMMY_
  							0x2, 0, 0, 0, 0, 0,
  							0x81, 0, 0, 0};
  
++<<<<<<< HEAD
++=======
+ enum {
+ 	ICE_PKT_VLAN		= BIT(0),
+ 	ICE_PKT_OUTER_IPV6	= BIT(1),
+ 	ICE_PKT_TUN_GTPC	= BIT(2),
+ 	ICE_PKT_TUN_GTPU	= BIT(3),
+ 	ICE_PKT_TUN_NVGRE	= BIT(4),
+ 	ICE_PKT_TUN_UDP		= BIT(5),
+ 	ICE_PKT_INNER_IPV6	= BIT(6),
+ 	ICE_PKT_INNER_TCP	= BIT(7),
+ 	ICE_PKT_INNER_UDP	= BIT(8),
+ 	ICE_PKT_GTP_NOPAY	= BIT(9),
+ 	ICE_PKT_CVLAN		= BIT(10),
+ };
+ 
++>>>>>>> 06bca7c2685a (ice: Add support for double VLAN in switchdev)
  struct ice_dummy_pkt_offsets {
  	enum ice_protocol_type type;
  	u16 offset; /* ICE_PROTOCOL_LAST indicates end of list */
@@@ -1215,18 -1234,280 +1232,295 @@@ static const u8 dummy_ipv6_gtp_packet[
  	0x00, 0x00,
  };
  
++<<<<<<< HEAD
 +#define ICE_SW_RULE_RX_TX_ETH_HDR_SIZE \
 +	(offsetof(struct ice_aqc_sw_rules_elem, pdata.lkup_tx_rx.hdr) + \
 +	 (DUMMY_ETH_HDR_LEN * \
 +	  sizeof(((struct ice_sw_rule_lkup_rx_tx *)0)->hdr[0])))
 +#define ICE_SW_RULE_RX_TX_NO_HDR_SIZE \
 +	(offsetof(struct ice_aqc_sw_rules_elem, pdata.lkup_tx_rx.hdr))
 +#define ICE_SW_RULE_LG_ACT_SIZE(n) \
 +	(offsetof(struct ice_aqc_sw_rules_elem, pdata.lg_act.act) + \
 +	 ((n) * sizeof(((struct ice_sw_rule_lg_act *)0)->act[0])))
 +#define ICE_SW_RULE_VSI_LIST_SIZE(n) \
 +	(offsetof(struct ice_aqc_sw_rules_elem, pdata.vsi_list.vsi) + \
 +	 ((n) * sizeof(((struct ice_sw_rule_vsi_list *)0)->vsi[0])))
++=======
+ ICE_DECLARE_PKT_OFFSETS(qinq_ipv4) = {
+ 	{ ICE_MAC_OFOS,		0 },
+ 	{ ICE_VLAN_EX,		12 },
+ 	{ ICE_VLAN_IN,		16 },
+ 	{ ICE_ETYPE_OL,		20 },
+ 	{ ICE_IPV4_OFOS,	22 },
+ 	{ ICE_PROTOCOL_LAST,	0 },
+ };
+ 
+ ICE_DECLARE_PKT_TEMPLATE(qinq_ipv4) = {
+ 	0x00, 0x00, 0x00, 0x00, /* ICE_MAC_OFOS 0 */
+ 	0x00, 0x00, 0x00, 0x00,
+ 	0x00, 0x00, 0x00, 0x00,
+ 
+ 	0x91, 0x00, 0x00, 0x00, /* ICE_VLAN_EX 12 */
+ 	0x81, 0x00, 0x00, 0x00, /* ICE_VLAN_IN 16 */
+ 	0x08, 0x00,		/* ICE_ETYPE_OL 20 */
+ 
+ 	0x45, 0x00, 0x00, 0x14, /* ICE_IPV4_OFOS 22 */
+ 	0x00, 0x01, 0x00, 0x00,
+ 	0x00, 0x00, 0x00, 0x00,
+ 	0x00, 0x00, 0x00, 0x00,
+ 	0x00, 0x00, 0x00, 0x00,
+ 
+ 	0x00, 0x00,		/* 2 bytes for 4 byte alignment */
+ };
+ 
+ ICE_DECLARE_PKT_OFFSETS(qinq_ipv4_udp) = {
+ 	{ ICE_MAC_OFOS,		0 },
+ 	{ ICE_VLAN_EX,		12 },
+ 	{ ICE_VLAN_IN,		16 },
+ 	{ ICE_ETYPE_OL,		20 },
+ 	{ ICE_IPV4_OFOS,	22 },
+ 	{ ICE_UDP_ILOS,		42 },
+ 	{ ICE_PROTOCOL_LAST,	0 },
+ };
+ 
+ ICE_DECLARE_PKT_TEMPLATE(qinq_ipv4_udp) = {
+ 	0x00, 0x00, 0x00, 0x00, /* ICE_MAC_OFOS 0 */
+ 	0x00, 0x00, 0x00, 0x00,
+ 	0x00, 0x00, 0x00, 0x00,
+ 
+ 	0x91, 0x00, 0x00, 0x00, /* ICE_VLAN_EX 12 */
+ 	0x81, 0x00, 0x00, 0x00, /* ICE_VLAN_IN 16 */
+ 	0x08, 0x00,		/* ICE_ETYPE_OL 20 */
+ 
+ 	0x45, 0x00, 0x00, 0x1c, /* ICE_IPV4_OFOS 22 */
+ 	0x00, 0x01, 0x00, 0x00,
+ 	0x00, 0x11, 0x00, 0x00,
+ 	0x00, 0x00, 0x00, 0x00,
+ 	0x00, 0x00, 0x00, 0x00,
+ 
+ 	0x00, 0x00, 0x00, 0x00, /* ICE_UDP_ILOS 42 */
+ 	0x00, 0x08, 0x00, 0x00,
+ 
+ 	0x00, 0x00,		/* 2 bytes for 4 byte alignment */
+ };
+ 
+ ICE_DECLARE_PKT_OFFSETS(qinq_ipv4_tcp) = {
+ 	{ ICE_MAC_OFOS,		0 },
+ 	{ ICE_VLAN_EX,		12 },
+ 	{ ICE_VLAN_IN,		16 },
+ 	{ ICE_ETYPE_OL,		20 },
+ 	{ ICE_IPV4_OFOS,	22 },
+ 	{ ICE_TCP_IL,		42 },
+ 	{ ICE_PROTOCOL_LAST,	0 },
+ };
+ 
+ ICE_DECLARE_PKT_TEMPLATE(qinq_ipv4_tcp) = {
+ 	0x00, 0x00, 0x00, 0x00, /* ICE_MAC_OFOS 0 */
+ 	0x00, 0x00, 0x00, 0x00,
+ 	0x00, 0x00, 0x00, 0x00,
+ 
+ 	0x91, 0x00, 0x00, 0x00, /* ICE_VLAN_EX 12 */
+ 	0x81, 0x00, 0x00, 0x00, /* ICE_VLAN_IN 16 */
+ 	0x08, 0x00,		/* ICE_ETYPE_OL 20 */
+ 
+ 	0x45, 0x00, 0x00, 0x28, /* ICE_IPV4_OFOS 22 */
+ 	0x00, 0x01, 0x00, 0x00,
+ 	0x00, 0x06, 0x00, 0x00,
+ 	0x00, 0x00, 0x00, 0x00,
+ 	0x00, 0x00, 0x00, 0x00,
+ 
+ 	0x00, 0x00, 0x00, 0x00, /* ICE_TCP_IL 42 */
+ 	0x00, 0x00, 0x00, 0x00,
+ 	0x00, 0x00, 0x00, 0x00,
+ 	0x50, 0x00, 0x00, 0x00,
+ 	0x00, 0x00, 0x00, 0x00,
+ 
+ 	0x00, 0x00,		/* 2 bytes for 4 byte alignment */
+ };
+ 
+ ICE_DECLARE_PKT_OFFSETS(qinq_ipv6) = {
+ 	{ ICE_MAC_OFOS,		0 },
+ 	{ ICE_VLAN_EX,		12 },
+ 	{ ICE_VLAN_IN,		16 },
+ 	{ ICE_ETYPE_OL,		20 },
+ 	{ ICE_IPV6_OFOS,	22 },
+ 	{ ICE_PROTOCOL_LAST,	0 },
+ };
+ 
+ ICE_DECLARE_PKT_TEMPLATE(qinq_ipv6) = {
+ 	0x00, 0x00, 0x00, 0x00, /* ICE_MAC_OFOS 0 */
+ 	0x00, 0x00, 0x00, 0x00,
+ 	0x00, 0x00, 0x00, 0x00,
+ 
+ 	0x91, 0x00, 0x00, 0x00, /* ICE_VLAN_EX 12 */
+ 	0x81, 0x00, 0x00, 0x00, /* ICE_VLAN_IN 16 */
+ 	0x86, 0xDD,		/* ICE_ETYPE_OL 20 */
+ 
+ 	0x60, 0x00, 0x00, 0x00, /* ICE_IPV6_OFOS 22 */
+ 	0x00, 0x00, 0x3b, 0x00,
+ 	0x00, 0x00, 0x00, 0x00,
+ 	0x00, 0x00, 0x00, 0x00,
+ 	0x00, 0x00, 0x00, 0x00,
+ 	0x00, 0x00, 0x00, 0x00,
+ 	0x00, 0x00, 0x00, 0x00,
+ 	0x00, 0x00, 0x00, 0x00,
+ 	0x00, 0x00, 0x00, 0x00,
+ 	0x00, 0x00, 0x00, 0x00,
+ 
+ 	0x00, 0x00,		/* 2 bytes for 4 byte alignment */
+ };
+ 
+ ICE_DECLARE_PKT_OFFSETS(qinq_ipv6_udp) = {
+ 	{ ICE_MAC_OFOS,		0 },
+ 	{ ICE_VLAN_EX,		12 },
+ 	{ ICE_VLAN_IN,		16 },
+ 	{ ICE_ETYPE_OL,		20 },
+ 	{ ICE_IPV6_OFOS,	22 },
+ 	{ ICE_UDP_ILOS,		62 },
+ 	{ ICE_PROTOCOL_LAST,	0 },
+ };
+ 
+ ICE_DECLARE_PKT_TEMPLATE(qinq_ipv6_udp) = {
+ 	0x00, 0x00, 0x00, 0x00, /* ICE_MAC_OFOS 0 */
+ 	0x00, 0x00, 0x00, 0x00,
+ 	0x00, 0x00, 0x00, 0x00,
+ 
+ 	0x91, 0x00, 0x00, 0x00, /* ICE_VLAN_EX 12 */
+ 	0x81, 0x00, 0x00, 0x00, /* ICE_VLAN_IN 16 */
+ 	0x86, 0xDD,		/* ICE_ETYPE_OL 20 */
+ 
+ 	0x60, 0x00, 0x00, 0x00, /* ICE_IPV6_OFOS 22 */
+ 	0x00, 0x08, 0x11, 0x00, /* Next header UDP */
+ 	0x00, 0x00, 0x00, 0x00,
+ 	0x00, 0x00, 0x00, 0x00,
+ 	0x00, 0x00, 0x00, 0x00,
+ 	0x00, 0x00, 0x00, 0x00,
+ 	0x00, 0x00, 0x00, 0x00,
+ 	0x00, 0x00, 0x00, 0x00,
+ 	0x00, 0x00, 0x00, 0x00,
+ 	0x00, 0x00, 0x00, 0x00,
+ 
+ 	0x00, 0x00, 0x00, 0x00, /* ICE_UDP_ILOS 62 */
+ 	0x00, 0x08, 0x00, 0x00,
+ 
+ 	0x00, 0x00,		/* 2 bytes for 4 byte alignment */
+ };
+ 
+ ICE_DECLARE_PKT_OFFSETS(qinq_ipv6_tcp) = {
+ 	{ ICE_MAC_OFOS,		0 },
+ 	{ ICE_VLAN_EX,		12 },
+ 	{ ICE_VLAN_IN,		16 },
+ 	{ ICE_ETYPE_OL,		20 },
+ 	{ ICE_IPV6_OFOS,	22 },
+ 	{ ICE_TCP_IL,		62 },
+ 	{ ICE_PROTOCOL_LAST,	0 },
+ };
+ 
+ ICE_DECLARE_PKT_TEMPLATE(qinq_ipv6_tcp) = {
+ 	0x00, 0x00, 0x00, 0x00, /* ICE_MAC_OFOS 0 */
+ 	0x00, 0x00, 0x00, 0x00,
+ 	0x00, 0x00, 0x00, 0x00,
+ 
+ 	0x91, 0x00, 0x00, 0x00, /* ICE_VLAN_EX 12 */
+ 	0x81, 0x00, 0x00, 0x00, /* ICE_VLAN_IN 16 */
+ 	0x86, 0xDD,		/* ICE_ETYPE_OL 20 */
+ 
+ 	0x60, 0x00, 0x00, 0x00, /* ICE_IPV6_OFOS 22 */
+ 	0x00, 0x14, 0x06, 0x00, /* Next header TCP */
+ 	0x00, 0x00, 0x00, 0x00,
+ 	0x00, 0x00, 0x00, 0x00,
+ 	0x00, 0x00, 0x00, 0x00,
+ 	0x00, 0x00, 0x00, 0x00,
+ 	0x00, 0x00, 0x00, 0x00,
+ 	0x00, 0x00, 0x00, 0x00,
+ 	0x00, 0x00, 0x00, 0x00,
+ 	0x00, 0x00, 0x00, 0x00,
+ 
+ 	0x00, 0x00, 0x00, 0x00, /* ICE_TCP_IL 62 */
+ 	0x00, 0x00, 0x00, 0x00,
+ 	0x00, 0x00, 0x00, 0x00,
+ 	0x50, 0x00, 0x00, 0x00,
+ 	0x00, 0x00, 0x00, 0x00,
+ 
+ 	0x00, 0x00,		/* 2 bytes for 4 byte alignment */
+ };
+ 
+ static const struct ice_dummy_pkt_profile ice_dummy_pkt_profiles[] = {
+ 	ICE_PKT_PROFILE(qinq_ipv6_tcp, ICE_PKT_CVLAN |
+ 				       ICE_PKT_VLAN |
+ 				       ICE_PKT_OUTER_IPV6 |
+ 				       ICE_PKT_INNER_TCP),
+ 	ICE_PKT_PROFILE(qinq_ipv6_udp, ICE_PKT_CVLAN |
+ 				       ICE_PKT_VLAN |
+ 				       ICE_PKT_OUTER_IPV6 |
+ 				       ICE_PKT_INNER_UDP),
+ 	ICE_PKT_PROFILE(qinq_ipv6, ICE_PKT_CVLAN |
+ 				   ICE_PKT_VLAN |
+ 				   ICE_PKT_OUTER_IPV6),
+ 	ICE_PKT_PROFILE(qinq_ipv4_tcp, ICE_PKT_CVLAN |
+ 				       ICE_PKT_VLAN |
+ 				       ICE_PKT_INNER_TCP),
+ 	ICE_PKT_PROFILE(qinq_ipv4_udp, ICE_PKT_CVLAN |
+ 				       ICE_PKT_VLAN |
+ 				       ICE_PKT_INNER_UDP),
+ 	ICE_PKT_PROFILE(qinq_ipv4, ICE_PKT_CVLAN |
+ 				   ICE_PKT_VLAN),
+ 	ICE_PKT_PROFILE(ipv6_gtp, ICE_PKT_TUN_GTPU | ICE_PKT_OUTER_IPV6 |
+ 				  ICE_PKT_GTP_NOPAY),
+ 	ICE_PKT_PROFILE(ipv6_gtpu_ipv6_udp, ICE_PKT_TUN_GTPU |
+ 					    ICE_PKT_OUTER_IPV6 |
+ 					    ICE_PKT_INNER_IPV6 |
+ 					    ICE_PKT_INNER_UDP),
+ 	ICE_PKT_PROFILE(ipv6_gtpu_ipv6_tcp, ICE_PKT_TUN_GTPU |
+ 					    ICE_PKT_OUTER_IPV6 |
+ 					    ICE_PKT_INNER_IPV6),
+ 	ICE_PKT_PROFILE(ipv6_gtpu_ipv4_udp, ICE_PKT_TUN_GTPU |
+ 					    ICE_PKT_OUTER_IPV6 |
+ 					    ICE_PKT_INNER_UDP),
+ 	ICE_PKT_PROFILE(ipv6_gtpu_ipv4_tcp, ICE_PKT_TUN_GTPU |
+ 					    ICE_PKT_OUTER_IPV6),
+ 	ICE_PKT_PROFILE(ipv4_gtpu_ipv4, ICE_PKT_TUN_GTPU | ICE_PKT_GTP_NOPAY),
+ 	ICE_PKT_PROFILE(ipv4_gtpu_ipv6_udp, ICE_PKT_TUN_GTPU |
+ 					    ICE_PKT_INNER_IPV6 |
+ 					    ICE_PKT_INNER_UDP),
+ 	ICE_PKT_PROFILE(ipv4_gtpu_ipv6_tcp, ICE_PKT_TUN_GTPU |
+ 					    ICE_PKT_INNER_IPV6),
+ 	ICE_PKT_PROFILE(ipv4_gtpu_ipv4_udp, ICE_PKT_TUN_GTPU |
+ 					    ICE_PKT_INNER_UDP),
+ 	ICE_PKT_PROFILE(ipv4_gtpu_ipv4_tcp, ICE_PKT_TUN_GTPU),
+ 	ICE_PKT_PROFILE(ipv6_gtp, ICE_PKT_TUN_GTPC | ICE_PKT_OUTER_IPV6),
+ 	ICE_PKT_PROFILE(ipv4_gtpu_ipv4, ICE_PKT_TUN_GTPC),
+ 	ICE_PKT_PROFILE(gre_ipv6_tcp, ICE_PKT_TUN_NVGRE | ICE_PKT_INNER_IPV6 |
+ 				      ICE_PKT_INNER_TCP),
+ 	ICE_PKT_PROFILE(gre_tcp, ICE_PKT_TUN_NVGRE | ICE_PKT_INNER_TCP),
+ 	ICE_PKT_PROFILE(gre_ipv6_udp, ICE_PKT_TUN_NVGRE | ICE_PKT_INNER_IPV6),
+ 	ICE_PKT_PROFILE(gre_udp, ICE_PKT_TUN_NVGRE),
+ 	ICE_PKT_PROFILE(udp_tun_ipv6_tcp, ICE_PKT_TUN_UDP |
+ 					  ICE_PKT_INNER_IPV6 |
+ 					  ICE_PKT_INNER_TCP),
+ 	ICE_PKT_PROFILE(udp_tun_tcp, ICE_PKT_TUN_UDP | ICE_PKT_INNER_TCP),
+ 	ICE_PKT_PROFILE(udp_tun_ipv6_udp, ICE_PKT_TUN_UDP |
+ 					  ICE_PKT_INNER_IPV6),
+ 	ICE_PKT_PROFILE(udp_tun_udp, ICE_PKT_TUN_UDP),
+ 	ICE_PKT_PROFILE(vlan_udp_ipv6, ICE_PKT_OUTER_IPV6 | ICE_PKT_INNER_UDP |
+ 				       ICE_PKT_VLAN),
+ 	ICE_PKT_PROFILE(udp_ipv6, ICE_PKT_OUTER_IPV6 | ICE_PKT_INNER_UDP),
+ 	ICE_PKT_PROFILE(vlan_udp, ICE_PKT_INNER_UDP | ICE_PKT_VLAN),
+ 	ICE_PKT_PROFILE(udp, ICE_PKT_INNER_UDP),
+ 	ICE_PKT_PROFILE(vlan_tcp_ipv6, ICE_PKT_OUTER_IPV6 | ICE_PKT_VLAN),
+ 	ICE_PKT_PROFILE(tcp_ipv6, ICE_PKT_OUTER_IPV6),
+ 	ICE_PKT_PROFILE(vlan_tcp, ICE_PKT_VLAN),
+ 	ICE_PKT_PROFILE(tcp, 0),
+ };
+ 
+ #define ICE_SW_RULE_RX_TX_HDR_SIZE(s, l)	struct_size((s), hdr_data, (l))
+ #define ICE_SW_RULE_RX_TX_ETH_HDR_SIZE(s)	\
+ 	ICE_SW_RULE_RX_TX_HDR_SIZE((s), DUMMY_ETH_HDR_LEN)
+ #define ICE_SW_RULE_RX_TX_NO_HDR_SIZE(s)	\
+ 	ICE_SW_RULE_RX_TX_HDR_SIZE((s), 0)
+ #define ICE_SW_RULE_LG_ACT_SIZE(s, n)		struct_size((s), act, (n))
+ #define ICE_SW_RULE_VSI_LIST_SIZE(s, n)		struct_size((s), vsi, (n))
++>>>>>>> 06bca7c2685a (ice: Add support for double VLAN in switchdev)
  
  /* this is a recipe to profile association bitmap */
  static DECLARE_BITMAP(recipe_to_profile[ICE_MAX_NUM_RECIPES],
@@@ -5428,29 -5784,47 +5726,38 @@@ err_free_lkup_exts
   *	   structure per protocol header
   * @lkups_cnt: number of protocols
   * @tun_type: tunnel type
 - *
 - * Returns the &ice_dummy_pkt_profile corresponding to these lookup params.
 + * @pkt: dummy packet to fill according to filter match criteria
 + * @pkt_len: packet length of dummy packet
 + * @offsets: pointer to receive the pointer to the offsets for the packet
   */
 -static const struct ice_dummy_pkt_profile *
 +static void
  ice_find_dummy_packet(struct ice_adv_lkup_elem *lkups, u16 lkups_cnt,
 -		      enum ice_sw_tunnel_type tun_type)
 +		      enum ice_sw_tunnel_type tun_type,
 +		      const u8 **pkt, u16 *pkt_len,
 +		      const struct ice_dummy_pkt_offsets **offsets)
  {
 -	const struct ice_dummy_pkt_profile *ret = ice_dummy_pkt_profiles;
 -	u32 match = 0;
 +	bool inner_tcp = false, inner_udp = false, outer_ipv6 = false;
 +	bool vlan = false, inner_ipv6 = false, gtp_no_pay = false;
  	u16 i;
  
 -	switch (tun_type) {
 -	case ICE_SW_TUN_GTPC:
 -		match |= ICE_PKT_TUN_GTPC;
 -		break;
 -	case ICE_SW_TUN_GTPU:
 -		match |= ICE_PKT_TUN_GTPU;
 -		break;
 -	case ICE_SW_TUN_NVGRE:
 -		match |= ICE_PKT_TUN_NVGRE;
 -		break;
 -	case ICE_SW_TUN_GENEVE:
 -	case ICE_SW_TUN_VXLAN:
 -		match |= ICE_PKT_TUN_UDP;
 -		break;
 -	default:
 -		break;
 -	}
 -
  	for (i = 0; i < lkups_cnt; i++) {
  		if (lkups[i].type == ICE_UDP_ILOS)
 -			match |= ICE_PKT_INNER_UDP;
 +			inner_udp = true;
  		else if (lkups[i].type == ICE_TCP_IL)
 -			match |= ICE_PKT_INNER_TCP;
 +			inner_tcp = true;
  		else if (lkups[i].type == ICE_IPV6_OFOS)
++<<<<<<< HEAD
 +			outer_ipv6 = true;
 +		else if (lkups[i].type == ICE_VLAN_OFOS)
 +			vlan = true;
++=======
+ 			match |= ICE_PKT_OUTER_IPV6;
+ 		else if (lkups[i].type == ICE_VLAN_OFOS ||
+ 			 lkups[i].type == ICE_VLAN_EX)
+ 			match |= ICE_PKT_VLAN;
+ 		else if (lkups[i].type == ICE_VLAN_IN)
+ 			match |= ICE_PKT_CVLAN;
++>>>>>>> 06bca7c2685a (ice: Add support for double VLAN in switchdev)
  		else if (lkups[i].type == ICE_ETYPE_OL &&
  			 lkups[i].h_u.ethertype.ethtype_id ==
  				cpu_to_be16(ICE_IPV6_ETHER_ID) &&
diff --git a/drivers/net/ethernet/intel/ice/ice_protocol_type.h b/drivers/net/ethernet/intel/ice/ice_protocol_type.h
index 3f64300b0e14..f8bd0990641b 100644
--- a/drivers/net/ethernet/intel/ice/ice_protocol_type.h
+++ b/drivers/net/ethernet/intel/ice/ice_protocol_type.h
@@ -43,6 +43,8 @@ enum ice_protocol_type {
 	ICE_NVGRE,
 	ICE_GTP,
 	ICE_GTP_NO_PAY,
+	ICE_VLAN_EX,
+	ICE_VLAN_IN,
 	ICE_VXLAN_GPE,
 	ICE_SCTP_IL,
 	ICE_PROTOCOL_LAST
* Unmerged path drivers/net/ethernet/intel/ice/ice_switch.c
diff --git a/drivers/net/ethernet/intel/ice/ice_tc_lib.c b/drivers/net/ethernet/intel/ice/ice_tc_lib.c
index 4abf914a3b3e..9d192673d016 100644
--- a/drivers/net/ethernet/intel/ice/ice_tc_lib.c
+++ b/drivers/net/ethernet/intel/ice/ice_tc_lib.c
@@ -50,6 +50,10 @@ ice_tc_count_lkups(u32 flags, struct ice_tc_flower_lyr_2_4_hdrs *headers,
 	if (flags & ICE_TC_FLWR_FIELD_VLAN)
 		lkups_cnt++;
 
+	/* is CVLAN specified? */
+	if (flags & ICE_TC_FLWR_FIELD_CVLAN)
+		lkups_cnt++;
+
 	/* are IPv[4|6] fields specified? */
 	if (flags & (ICE_TC_FLWR_FIELD_DEST_IPV4 | ICE_TC_FLWR_FIELD_SRC_IPV4 |
 		     ICE_TC_FLWR_FIELD_DEST_IPV6 | ICE_TC_FLWR_FIELD_SRC_IPV6))
@@ -311,12 +315,22 @@ ice_tc_fill_rules(struct ice_hw *hw, u32 flags,
 
 	/* copy VLAN info */
 	if (flags & ICE_TC_FLWR_FIELD_VLAN) {
-		list[i].type = ICE_VLAN_OFOS;
+		if (flags & ICE_TC_FLWR_FIELD_CVLAN)
+			list[i].type = ICE_VLAN_EX;
+		else
+			list[i].type = ICE_VLAN_OFOS;
 		list[i].h_u.vlan_hdr.vlan = headers->vlan_hdr.vlan_id;
 		list[i].m_u.vlan_hdr.vlan = cpu_to_be16(0xFFFF);
 		i++;
 	}
 
+	if (flags & ICE_TC_FLWR_FIELD_CVLAN) {
+		list[i].type = ICE_VLAN_IN;
+		list[i].h_u.vlan_hdr.vlan = headers->cvlan_hdr.vlan_id;
+		list[i].m_u.vlan_hdr.vlan = cpu_to_be16(0xFFFF);
+		i++;
+	}
+
 	/* copy L3 (IPv[4|6]: src, dest) address */
 	if (flags & (ICE_TC_FLWR_FIELD_DEST_IPV4 |
 		     ICE_TC_FLWR_FIELD_SRC_IPV4)) {
@@ -946,6 +960,7 @@ ice_parse_cls_flower(struct net_device *filter_dev, struct ice_vsi *vsi,
 	      BIT(FLOW_DISSECTOR_KEY_BASIC) |
 	      BIT(FLOW_DISSECTOR_KEY_ETH_ADDRS) |
 	      BIT(FLOW_DISSECTOR_KEY_VLAN) |
+	      BIT(FLOW_DISSECTOR_KEY_CVLAN) |
 	      BIT(FLOW_DISSECTOR_KEY_IPV4_ADDRS) |
 	      BIT(FLOW_DISSECTOR_KEY_IPV6_ADDRS) |
 	      BIT(FLOW_DISSECTOR_KEY_ENC_CONTROL) |
@@ -1061,6 +1076,32 @@ ice_parse_cls_flower(struct net_device *filter_dev, struct ice_vsi *vsi,
 			headers->vlan_hdr.vlan_prio = match.key->vlan_priority;
 	}
 
+	if (flow_rule_match_key(rule, FLOW_DISSECTOR_KEY_CVLAN)) {
+		struct flow_match_vlan match;
+
+		if (!ice_is_dvm_ena(&vsi->back->hw)) {
+			NL_SET_ERR_MSG_MOD(fltr->extack, "Double VLAN mode is not enabled");
+			return -EINVAL;
+		}
+
+		flow_rule_match_cvlan(rule, &match);
+
+		if (match.mask->vlan_id) {
+			if (match.mask->vlan_id == VLAN_VID_MASK) {
+				fltr->flags |= ICE_TC_FLWR_FIELD_CVLAN;
+			} else {
+				NL_SET_ERR_MSG_MOD(fltr->extack,
+						   "Bad CVLAN mask");
+				return -EINVAL;
+			}
+		}
+
+		headers->cvlan_hdr.vlan_id =
+				cpu_to_be16(match.key->vlan_id & VLAN_VID_MASK);
+		if (match.mask->vlan_priority)
+			headers->cvlan_hdr.vlan_prio = match.key->vlan_priority;
+	}
+
 	if (flow_rule_match_key(rule, FLOW_DISSECTOR_KEY_CONTROL)) {
 		struct flow_match_control match;
 
diff --git a/drivers/net/ethernet/intel/ice/ice_tc_lib.h b/drivers/net/ethernet/intel/ice/ice_tc_lib.h
index e25e958f4396..87acfe5b0e4d 100644
--- a/drivers/net/ethernet/intel/ice/ice_tc_lib.h
+++ b/drivers/net/ethernet/intel/ice/ice_tc_lib.h
@@ -23,6 +23,7 @@
 #define ICE_TC_FLWR_FIELD_ENC_DST_MAC		BIT(16)
 #define ICE_TC_FLWR_FIELD_ETH_TYPE_ID		BIT(17)
 #define ICE_TC_FLWR_FIELD_ENC_OPTS		BIT(18)
+#define ICE_TC_FLWR_FIELD_CVLAN			BIT(19)
 
 #define ICE_TC_FLOWER_MASK_32   0xFFFFFFFF
 
@@ -81,6 +82,7 @@ struct ice_tc_flower_lyr_2_4_hdrs {
 	struct ice_tc_l2_hdr l2_key;
 	struct ice_tc_l2_hdr l2_mask;
 	struct ice_tc_vlan_hdr vlan_hdr;
+	struct ice_tc_vlan_hdr cvlan_hdr;
 	/* L3 (IPv4[6]) layer fields with their mask */
 	struct ice_tc_l3_hdr l3_key;
 	struct ice_tc_l3_hdr l3_mask;
