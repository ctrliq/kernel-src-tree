net/mlx5e: Fix wrong use of skb_tcp_all_headers() with encapsulation

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Gal Pressman <gal@nvidia.com>
commit ec082d31c161976a0e81c5d2e3ac317237ac5a0d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/ec082d31.failed

Use skb_inner_tcp_all_headers() instead of skb_tcp_all_headers() when
transmitting an encapsulated packet in mlx5e_tx_get_gso_ihs().

Fixes: 504148fedb85 ("net: add skb_[inner_]tcp_all_headers helpers")
	Cc: Eric Dumazet <edumazet@google.com>
	Signed-off-by: Gal Pressman <gal@nvidia.com>
	Reviewed-by: Tariq Toukan <tariqt@nvidia.com>
	Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
(cherry picked from commit ec082d31c161976a0e81c5d2e3ac317237ac5a0d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en_tx.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_tx.c
index df57249776bb,27f791feb517..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_tx.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_tx.c
@@@ -248,8 -150,9 +248,12 @@@ mlx5e_tx_get_gso_ihs(struct mlx5e_txqs
  	struct mlx5e_sq_stats *stats = sq->stats;
  	u16 ihs;
  
 -	*hopbyhop = 0;
  	if (skb->encapsulation) {
++<<<<<<< HEAD
 +		ihs = skb_inner_transport_offset(skb) + inner_tcp_hdrlen(skb);
++=======
+ 		ihs = skb_inner_tcp_all_headers(skb);
++>>>>>>> ec082d31c161 (net/mlx5e: Fix wrong use of skb_tcp_all_headers() with encapsulation)
  		stats->tso_inner_packets++;
  		stats->tso_inner_bytes += skb->len - ihs;
  	} else {
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_tx.c
