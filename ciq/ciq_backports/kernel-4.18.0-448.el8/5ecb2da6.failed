s390: support command lines longer than 896 bytes

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Sven Schnelle <svens@linux.ibm.com>
commit 5ecb2da660ab8eddafe059a6a8a708465db89ca2
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/5ecb2da6.failed

Currently s390 supports a fixed maximum command line length of 896
bytes. This isn't enough as some installers are trying to pass all
configuration data via kernel command line, and even with zfcp alone
it is easy to generate really long command lines. Therefore extend
the command line to 4 kbytes.

In the parm area where the command line is stored there is no indication
of the maximum allowed length, so a new field which contains the maximum
length is added.

The parm area has always been initialized to zero, so with old kernels
this field would read zero. This is important because tools like zipl
could read this field. If it contains a number larger than zero zipl
knows the maximum length that can be stored in the parm area, otherwise
it must assume that it is booting a legacy kernel and only 896 bytes are
available.

The removing of trailing whitespace in head.S is also removed because
code to do this is already present in setup_boot_command_line().

	Signed-off-by: Sven Schnelle <svens@linux.ibm.com>
	Reviewed-by: Heiko Carstens <hca@linux.ibm.com>
	Signed-off-by: Vasily Gorbik <gor@linux.ibm.com>
(cherry picked from commit 5ecb2da660ab8eddafe059a6a8a708465db89ca2)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/s390/boot/head.S
#	arch/s390/boot/ipl_parm.c
#	arch/s390/include/asm/setup.h
#	arch/s390/kernel/asm-offsets.c
#	arch/s390/kernel/machine_kexec_file.c
diff --cc arch/s390/boot/head.S
index 732bddaa7ec5,3a252d140c55..000000000000
--- a/arch/s390/boot/head.S
+++ b/arch/s390/boot/head.S
@@@ -361,6 -381,8 +349,11 @@@ ENTRY(startup_kdump
  	.quad	0			# INITRD_SIZE
  	.quad	0			# OLDMEM_BASE
  	.quad	0			# OLDMEM_SIZE
++<<<<<<< HEAD
++=======
+ 	.quad	kernel_version		# points to kernel version string
+ 	.quad	COMMAND_LINE_SIZE
++>>>>>>> 5ecb2da660ab (s390: support command lines longer than 896 bytes)
  
  	.org	COMMAND_LINE
  	.byte	"root=/dev/ram0 ro"
diff --cc arch/s390/boot/ipl_parm.c
index 473b2aedfe85,9ed7e29c81d9..000000000000
--- a/arch/s390/boot/ipl_parm.c
+++ b/arch/s390/boot/ipl_parm.c
@@@ -152,12 -170,12 +152,19 @@@ static inline int has_ebcdic_char(cons
  
  void setup_boot_command_line(void)
  {
++<<<<<<< HEAD
 +	COMMAND_LINE[ARCH_COMMAND_LINE_SIZE - 1] = 0;
 +	/* convert arch command line to ascii if necessary */
 +	if (has_ebcdic_char(COMMAND_LINE))
 +		EBCASC(COMMAND_LINE, ARCH_COMMAND_LINE_SIZE);
++=======
+ 	parmarea.command_line[COMMAND_LINE_SIZE - 1] = 0;
+ 	/* convert arch command line to ascii if necessary */
+ 	if (has_ebcdic_char(parmarea.command_line))
+ 		EBCASC(parmarea.command_line, COMMAND_LINE_SIZE);
++>>>>>>> 5ecb2da660ab (s390: support command lines longer than 896 bytes)
  	/* copy arch command line */
 -	strcpy(early_command_line, strim(parmarea.command_line));
 +	strcpy(early_command_line, strim(COMMAND_LINE));
  
  	/* append IPL PARM data to the boot command line */
  	if (!is_prot_virt_guest() && ipl_block_valid)
diff --cc arch/s390/include/asm/setup.h
index 92ba15d7bfaa,d718029794e2..000000000000
--- a/arch/s390/include/asm/setup.h
+++ b/arch/s390/include/asm/setup.h
@@@ -47,14 -42,7 +47,18 @@@
  #define STARTUP_NORMAL_OFFSET	0x10000
  #define STARTUP_KDUMP_OFFSET	0x10010
  
++<<<<<<< HEAD
 +/* Offsets to parameters in kernel/head.S  */
 +
 +#define IPL_DEVICE_OFFSET	0x10400
 +#define INITRD_START_OFFSET	0x10408
 +#define INITRD_SIZE_OFFSET	0x10410
 +#define OLDMEM_BASE_OFFSET	0x10418
 +#define OLDMEM_SIZE_OFFSET	0x10420
 +#define COMMAND_LINE_OFFSET	0x10480
++=======
+ #define LEGACY_COMMAND_LINE_SIZE	896
++>>>>>>> 5ecb2da660ab (s390: support command lines longer than 896 bytes)
  
  #ifndef __ASSEMBLY__
  
@@@ -74,10 -55,14 +78,17 @@@ struct parmarea 
  	unsigned long initrd_size;			/* 0x10410 */
  	unsigned long oldmem_base;			/* 0x10418 */
  	unsigned long oldmem_size;			/* 0x10420 */
++<<<<<<< HEAD
 +	char pad1[0x10480 - 0x10428];			/* 0x10428 - 0x10480 */
 +	char command_line[ARCH_COMMAND_LINE_SIZE];	/* 0x10480 */
++=======
+ 	unsigned long kernel_version;			/* 0x10428 */
+ 	unsigned long max_command_line_size;		/* 0x10430 */
+ 	char pad1[0x10480-0x10438];			/* 0x10438 - 0x10480 */
+ 	char command_line[COMMAND_LINE_SIZE];		/* 0x10480 */
++>>>>>>> 5ecb2da660ab (s390: support command lines longer than 896 bytes)
  };
  
 -extern struct parmarea parmarea;
 -
  extern unsigned int zlib_dfltcc_support;
  #define ZLIB_DFLTCC_DISABLED		0
  #define ZLIB_DFLTCC_FULL		1
diff --cc arch/s390/kernel/asm-offsets.c
index 6a29ed24d99f,8e00bb228662..000000000000
--- a/arch/s390/kernel/asm-offsets.c
+++ b/arch/s390/kernel/asm-offsets.c
@@@ -212,5 -155,15 +212,18 @@@ int main(void
  	OFFSET(__KEXEC_SHA_REGION_START, kexec_sha_region, start);
  	OFFSET(__KEXEC_SHA_REGION_LEN, kexec_sha_region, len);
  	DEFINE(__KEXEC_SHA_REGION_SIZE, sizeof(struct kexec_sha_region));
++<<<<<<< HEAD
++=======
+ 	/* sizeof kernel parameter area */
+ 	DEFINE(__PARMAREA_SIZE, sizeof(struct parmarea));
+ 	/* kernel parameter area offsets */
+ 	DEFINE(IPL_DEVICE, PARMAREA + offsetof(struct parmarea, ipl_device));
+ 	DEFINE(INITRD_START, PARMAREA + offsetof(struct parmarea, initrd_start));
+ 	DEFINE(INITRD_SIZE, PARMAREA + offsetof(struct parmarea, initrd_size));
+ 	DEFINE(OLDMEM_BASE, PARMAREA + offsetof(struct parmarea, oldmem_base));
+ 	DEFINE(OLDMEM_SIZE, PARMAREA + offsetof(struct parmarea, oldmem_size));
+ 	DEFINE(COMMAND_LINE, PARMAREA + offsetof(struct parmarea, command_line));
+ 	DEFINE(MAX_COMMAND_LINE_SIZE, PARMAREA + offsetof(struct parmarea, max_command_line_size));
++>>>>>>> 5ecb2da660ab (s390: support command lines longer than 896 bytes)
  	return 0;
  }
diff --cc arch/s390/kernel/machine_kexec_file.c
index f18ed37d72f0,528edff085d9..000000000000
--- a/arch/s390/kernel/machine_kexec_file.c
+++ b/arch/s390/kernel/machine_kexec_file.c
@@@ -237,10 -229,23 +239,28 @@@ void *kexec_file_add_components(struct 
  	if (ret)
  		goto out;
  
++<<<<<<< HEAD
 +	if (image->cmdline_buf_len >= ARCH_COMMAND_LINE_SIZE) {
 +		ret = -EINVAL;
++=======
+ 	ret = -EINVAL;
+ 	minsize = PARMAREA + offsetof(struct parmarea, command_line);
+ 	if (image->kernel_buf_len < minsize)
++>>>>>>> 5ecb2da660ab (s390: support command lines longer than 896 bytes)
  		goto out;
- 	}
+ 
+ 	if (data.parm->max_command_line_size)
+ 		max_command_line_size = data.parm->max_command_line_size;
+ 
+ 	if (minsize + max_command_line_size < minsize)
+ 		goto out;
+ 
+ 	if (image->kernel_buf_len < minsize + max_command_line_size)
+ 		goto out;
+ 
+ 	if (image->cmdline_buf_len >= max_command_line_size)
+ 		goto out;
+ 
  	memcpy(data.parm->command_line, image->cmdline_buf,
  	       image->cmdline_buf_len);
  
* Unmerged path arch/s390/boot/head.S
* Unmerged path arch/s390/boot/ipl_parm.c
* Unmerged path arch/s390/include/asm/setup.h
diff --git a/arch/s390/include/uapi/asm/setup.h b/arch/s390/include/uapi/asm/setup.h
index 1f8803a31079..9b685536c31c 100644
--- a/arch/s390/include/uapi/asm/setup.h
+++ b/arch/s390/include/uapi/asm/setup.h
@@ -9,6 +9,4 @@
 
 #define COMMAND_LINE_SIZE	4096
 
-#define ARCH_COMMAND_LINE_SIZE	896
-
 #endif /* _UAPI_ASM_S390_SETUP_H */
* Unmerged path arch/s390/kernel/asm-offsets.c
diff --git a/arch/s390/kernel/early.c b/arch/s390/kernel/early.c
index d415f78b0438..7423bf24691c 100644
--- a/arch/s390/kernel/early.c
+++ b/arch/s390/kernel/early.c
@@ -289,7 +289,7 @@ char __bootdata(early_command_line)[COMMAND_LINE_SIZE];
 static void __init setup_boot_command_line(void)
 {
 	/* copy arch command line */
-	strlcpy(boot_command_line, early_command_line, ARCH_COMMAND_LINE_SIZE);
+	strlcpy(boot_command_line, early_command_line, COMMAND_LINE_SIZE);
 }
 
 static void __init check_image_bootable(void)
* Unmerged path arch/s390/kernel/machine_kexec_file.c
