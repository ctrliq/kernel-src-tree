fbmem: Check virtual screen sizes in fb_set_var()

jira LE-1907
cve CVE-2021-33655
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Helge Deller <deller@gmx.de>
commit 6c11df58fd1ac0aefcb3b227f72769272b939e56
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/6c11df58.failed

Verify that the fbdev or drm driver correctly adjusted the virtual
screen sizes. On failure report the failing driver and reject the screen
size change.

	Signed-off-by: Helge Deller <deller@gmx.de>
	Reviewed-by: Geert Uytterhoeven <geert@linux-m68k.org>
	Cc: stable@vger.kernel.org # v5.4+
(cherry picked from commit 6c11df58fd1ac0aefcb3b227f72769272b939e56)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/video/fbdev/core/fbmem.c
diff --cc drivers/video/fbdev/core/fbmem.c
index 6fbe2ec3f4f5,7ee6eb2fa715..000000000000
--- a/drivers/video/fbdev/core/fbmem.c
+++ b/drivers/video/fbdev/core/fbmem.c
@@@ -934,101 -969,105 +934,138 @@@ fb_set_var(struct fb_info *info, struc
  		fb_var_to_videomode(&mode2, &info->var);
  		/* make sure we don't delete the videomode of current var */
  		ret = fb_mode_is_equal(&mode1, &mode2);
 +
  		if (!ret) {
 -			ret = fbcon_mode_deleted(info, &mode1);
 -			if (!ret)
 -				fb_delete_videomode(&mode1, &info->modelist);
 +		    struct fb_event event;
 +
 +		    event.info = info;
 +		    event.data = &mode1;
 +		    ret = fb_notifier_call_chain(FB_EVENT_MODE_DELETE, &event);
  		}
  
 -		return ret ? -EINVAL : 0;
 +		if (!ret)
 +		    fb_delete_videomode(&mode1, &info->modelist);
 +
 +
 +		ret = (ret) ? -EINVAL : 0;
 +		goto done;
  	}
  
 -	if (!(var->activate & FB_ACTIVATE_FORCE) &&
 -	    !memcmp(&info->var, var, sizeof(struct fb_var_screeninfo)))
 -		return 0;
 +	if ((var->activate & FB_ACTIVATE_FORCE) ||
 +	    memcmp(&info->var, var, sizeof(struct fb_var_screeninfo))) {
 +		u32 activate = var->activate;
  
 -	activate = var->activate;
 +		/* When using FOURCC mode, make sure the red, green, blue and
 +		 * transp fields are set to 0.
 +		 */
 +		if ((info->fix.capabilities & FB_CAP_FOURCC) &&
 +		    var->grayscale > 1) {
 +			if (var->red.offset     || var->green.offset    ||
 +			    var->blue.offset    || var->transp.offset   ||
 +			    var->red.length     || var->green.length    ||
 +			    var->blue.length    || var->transp.length   ||
 +			    var->red.msb_right  || var->green.msb_right ||
 +			    var->blue.msb_right || var->transp.msb_right)
 +				return -EINVAL;
 +		}
  
 -	/* When using FOURCC mode, make sure the red, green, blue and
 -	 * transp fields are set to 0.
 -	 */
 -	if ((info->fix.capabilities & FB_CAP_FOURCC) &&
 -	    var->grayscale > 1) {
 -		if (var->red.offset     || var->green.offset    ||
 -		    var->blue.offset    || var->transp.offset   ||
 -		    var->red.length     || var->green.length    ||
 -		    var->blue.length    || var->transp.length   ||
 -		    var->red.msb_right  || var->green.msb_right ||
 -		    var->blue.msb_right || var->transp.msb_right)
 -			return -EINVAL;
 -	}
 +		if (!info->fbops->fb_check_var) {
 +			*var = info->var;
 +			goto done;
 +		}
  
++<<<<<<< HEAD
 +		ret = info->fbops->fb_check_var(var, info);
++=======
+ 	if (!info->fbops->fb_check_var) {
+ 		*var = info->var;
+ 		return 0;
+ 	}
+ 
+ 	/* bitfill_aligned() assumes that it's at least 8x8 */
+ 	if (var->xres < 8 || var->yres < 8)
+ 		return -EINVAL;
+ 
+ 	/* Too huge resolution causes multiplication overflow. */
+ 	if (check_mul_overflow(var->xres, var->yres, &unused) ||
+ 	    check_mul_overflow(var->xres_virtual, var->yres_virtual, &unused))
+ 		return -EINVAL;
+ 
+ 	ret = info->fbops->fb_check_var(var, info);
+ 
+ 	if (ret)
+ 		return ret;
+ 
+ 	/* verify that virtual resolution >= physical resolution */
+ 	if (var->xres_virtual < var->xres ||
+ 	    var->yres_virtual < var->yres) {
+ 		pr_warn("WARNING: fbcon: Driver '%s' missed to adjust virtual screen size (%ux%u vs. %ux%u)\n",
+ 			info->fix.id,
+ 			var->xres_virtual, var->yres_virtual,
+ 			var->xres, var->yres);
+ 		return -EINVAL;
+ 	}
+ 
+ 	if ((var->activate & FB_ACTIVATE_MASK) != FB_ACTIVATE_NOW)
+ 		return 0;
+ 
+ 	if (info->fbops->fb_get_caps) {
+ 		ret = fb_check_caps(info, var, activate);
++>>>>>>> 6c11df58fd1a (fbmem: Check virtual screen sizes in fb_set_var())
  
  		if (ret)
 -			return ret;
 -	}
 +			goto done;
  
 -	old_var = info->var;
 -	info->var = *var;
 +		if ((var->activate & FB_ACTIVATE_MASK) == FB_ACTIVATE_NOW) {
 +			struct fb_var_screeninfo old_var;
 +			struct fb_videomode mode;
  
 -	if (info->fbops->fb_set_par) {
 -		ret = info->fbops->fb_set_par(info);
 +			if (info->fbops->fb_get_caps) {
 +				ret = fb_check_caps(info, var, activate);
  
 -		if (ret) {
 -			info->var = old_var;
 -			printk(KERN_WARNING "detected "
 -				"fb_set_par error, "
 -				"error code: %d\n", ret);
 -			return ret;
 -		}
 -	}
 +				if (ret)
 +					goto done;
 +			}
  
 -	fb_pan_display(info, &info->var);
 -	fb_set_cmap(&info->cmap, info);
 -	fb_var_to_videomode(&mode, &info->var);
 +			old_var = info->var;
 +			info->var = *var;
  
 -	if (info->modelist.prev && info->modelist.next &&
 -	    !list_empty(&info->modelist))
 -		ret = fb_add_videomode(&mode, &info->modelist);
 +			if (info->fbops->fb_set_par) {
 +				ret = info->fbops->fb_set_par(info);
  
 -	if (ret)
 -		return ret;
 +				if (ret) {
 +					info->var = old_var;
 +					printk(KERN_WARNING "detected "
 +						"fb_set_par error, "
 +						"error code: %d\n", ret);
 +					goto done;
 +				}
 +			}
  
 -	event.info = info;
 -	event.data = &mode;
 -	fb_notifier_call_chain(FB_EVENT_MODE_CHANGE, &event);
 +			fb_pan_display(info, &info->var);
 +			fb_set_cmap(&info->cmap, info);
 +			fb_var_to_videomode(&mode, &info->var);
  
 -	return 0;
 +			if (info->modelist.prev && info->modelist.next &&
 +			    !list_empty(&info->modelist))
 +				ret = fb_add_videomode(&mode, &info->modelist);
 +
 +			if (!ret && (flags & FBINFO_MISC_USEREVENT)) {
 +				struct fb_event event;
 +				int evnt = (activate & FB_ACTIVATE_ALL) ?
 +					FB_EVENT_MODE_CHANGE_ALL :
 +					FB_EVENT_MODE_CHANGE;
 +
 +				info->flags &= ~FBINFO_MISC_USEREVENT;
 +				event.info = info;
 +				event.data = &mode;
 +				fb_notifier_call_chain(evnt, &event);
 +			}
 +		}
 +	}
 +
 + done:
 +	return ret;
  }
  EXPORT_SYMBOL(fb_set_var);
  
* Unmerged path drivers/video/fbdev/core/fbmem.c
