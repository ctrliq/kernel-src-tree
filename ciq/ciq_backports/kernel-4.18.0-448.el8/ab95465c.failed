net/sched: add vlan push_eth and pop_eth action to the hardware IR

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Maor Dickman <maord@nvidia.com>
commit ab95465cde2337108252cdf01f064abdc1a67f6c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/ab95465c.failed

Add vlan push_eth and pop_eth action to the hardware intermediate
representation model which would subsequently allow it to be used
by drivers for offload.

	Signed-off-by: Maor Dickman <maord@nvidia.com>
	Reviewed-by: Roi Dayan <roid@nvidia.com>
	Signed-off-by: Jakub Kicinski <kuba@kernel.org>
(cherry picked from commit ab95465cde2337108252cdf01f064abdc1a67f6c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/net/flow_offload.h
#	net/sched/act_vlan.c
diff --cc include/net/flow_offload.h
index d20115a94aee,021778a7e1af..000000000000
--- a/include/net/flow_offload.h
+++ b/include/net/flow_offload.h
@@@ -148,6 -148,10 +148,13 @@@ enum flow_action_id 
  	FLOW_ACTION_MPLS_MANGLE,
  	FLOW_ACTION_GATE,
  	FLOW_ACTION_PPPOE_PUSH,
++<<<<<<< HEAD
++=======
+ 	FLOW_ACTION_JUMP,
+ 	FLOW_ACTION_PIPE,
+ 	FLOW_ACTION_VLAN_PUSH_ETH,
+ 	FLOW_ACTION_VLAN_POP_ETH,
++>>>>>>> ab95465cde23 (net/sched: add vlan push_eth and pop_eth action to the hardware IR)
  	NUM_FLOW_ACTIONS,
  };
  
diff --cc net/sched/act_vlan.c
index b9dcb2d5e0cb,883454c4f921..000000000000
--- a/net/sched/act_vlan.c
+++ b/net/sched/act_vlan.c
@@@ -375,6 -368,66 +375,69 @@@ static size_t tcf_vlan_get_fill_size(co
  		+ nla_total_size(sizeof(u8)); /* TCA_VLAN_PUSH_VLAN_PRIORITY */
  }
  
++<<<<<<< HEAD
++=======
+ static int tcf_vlan_offload_act_setup(struct tc_action *act, void *entry_data,
+ 				      u32 *index_inc, bool bind)
+ {
+ 	if (bind) {
+ 		struct flow_action_entry *entry = entry_data;
+ 
+ 		switch (tcf_vlan_action(act)) {
+ 		case TCA_VLAN_ACT_PUSH:
+ 			entry->id = FLOW_ACTION_VLAN_PUSH;
+ 			entry->vlan.vid = tcf_vlan_push_vid(act);
+ 			entry->vlan.proto = tcf_vlan_push_proto(act);
+ 			entry->vlan.prio = tcf_vlan_push_prio(act);
+ 			break;
+ 		case TCA_VLAN_ACT_POP:
+ 			entry->id = FLOW_ACTION_VLAN_POP;
+ 			break;
+ 		case TCA_VLAN_ACT_MODIFY:
+ 			entry->id = FLOW_ACTION_VLAN_MANGLE;
+ 			entry->vlan.vid = tcf_vlan_push_vid(act);
+ 			entry->vlan.proto = tcf_vlan_push_proto(act);
+ 			entry->vlan.prio = tcf_vlan_push_prio(act);
+ 			break;
+ 		case TCA_VLAN_ACT_POP_ETH:
+ 			entry->id = FLOW_ACTION_VLAN_POP_ETH;
+ 			break;
+ 		case TCA_VLAN_ACT_PUSH_ETH:
+ 			entry->id = FLOW_ACTION_VLAN_PUSH_ETH;
+ 			tcf_vlan_push_eth(entry->vlan_push_eth.src, entry->vlan_push_eth.dst, act);
+ 			break;
+ 		default:
+ 			return -EOPNOTSUPP;
+ 		}
+ 		*index_inc = 1;
+ 	} else {
+ 		struct flow_offload_action *fl_action = entry_data;
+ 
+ 		switch (tcf_vlan_action(act)) {
+ 		case TCA_VLAN_ACT_PUSH:
+ 			fl_action->id = FLOW_ACTION_VLAN_PUSH;
+ 			break;
+ 		case TCA_VLAN_ACT_POP:
+ 			fl_action->id = FLOW_ACTION_VLAN_POP;
+ 			break;
+ 		case TCA_VLAN_ACT_MODIFY:
+ 			fl_action->id = FLOW_ACTION_VLAN_MANGLE;
+ 			break;
+ 		case TCA_VLAN_ACT_POP_ETH:
+ 			fl_action->id = FLOW_ACTION_VLAN_POP_ETH;
+ 			break;
+ 		case TCA_VLAN_ACT_PUSH_ETH:
+ 			fl_action->id = FLOW_ACTION_VLAN_PUSH_ETH;
+ 			break;
+ 		default:
+ 			return -EOPNOTSUPP;
+ 		}
+ 	}
+ 
+ 	return 0;
+ }
+ 
++>>>>>>> ab95465cde23 (net/sched: add vlan push_eth and pop_eth action to the hardware IR)
  static struct tc_action_ops act_vlan_ops = {
  	.kind		=	"vlan",
  	.id		=	TCA_ID_VLAN,
* Unmerged path include/net/flow_offload.h
diff --git a/include/net/tc_act/tc_vlan.h b/include/net/tc_act/tc_vlan.h
index 3cc89dc174bc..30c0cd10ce73 100644
--- a/include/net/tc_act/tc_vlan.h
+++ b/include/net/tc_act/tc_vlan.h
@@ -82,4 +82,14 @@ static inline u8 tcf_vlan_push_prio(const struct tc_action *a)
 
 	return tcfv_push_prio;
 }
+
+static inline void tcf_vlan_push_eth(unsigned char *src, unsigned char *dest,
+				     const struct tc_action *a)
+{
+	rcu_read_lock();
+	memcpy(dest, rcu_dereference(to_vlan(a)->vlan_p)->tcfv_push_dst, ETH_ALEN);
+	memcpy(dest, rcu_dereference(to_vlan(a)->vlan_p)->tcfv_push_src, ETH_ALEN);
+	rcu_read_unlock();
+}
+
 #endif /* __NET_TC_VLAN_H */
* Unmerged path net/sched/act_vlan.c
