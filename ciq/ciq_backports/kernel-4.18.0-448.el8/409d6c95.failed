fbcon: Introduce wrapper for console->fb_info lookup

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Daniel Vetter <daniel.vetter@ffwll.ch>
commit 409d6c95f9c68bb7046410a3502e26e454a1e636
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/409d6c95.failed

Half of it is protected by console_lock, but the other half is a lot
more awkward: Registration/deregistration of fbdev are serialized, but
we don't really clear out anything in con2fb_map and so there's
potential for use-after free mixups.

First step is to encapsulate the lookup.

	Acked-by: Thomas Zimmermann <tzimmermann@suse.de>
	Acked-by: Sam Ravnborg <sam@ravnborg.org>
	Signed-off-by: Daniel Vetter <daniel.vetter@intel.com>
	Cc: Helge Deller <deller@gmx.de>
	Cc: Daniel Vetter <daniel@ffwll.ch>
	Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
	Cc: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
	Cc: Du Cheng <ducheng2@gmail.com>
	Cc: Claudio Suarez <cssk@net-c.es>
	Cc: Thomas Zimmermann <tzimmermann@suse.de>
Link: https://patchwork.freedesktop.org/patch/msgid/20220405210335.3434130-4-daniel.vetter@ffwll.ch
(cherry picked from commit 409d6c95f9c68bb7046410a3502e26e454a1e636)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/video/fbdev/core/fbcon.c
diff --cc drivers/video/fbdev/core/fbcon.c
index 1a25ce50a9fd,b75e638cb83d..000000000000
--- a/drivers/video/fbdev/core/fbcon.c
+++ b/drivers/video/fbdev/core/fbcon.c
@@@ -1064,8 -1026,7 +1076,12 @@@ static void fbcon_init(struct vc_data *
  	if (con2fb_map[vc->vc_num] == -1)
  		con2fb_map[vc->vc_num] = info_idx;
  
++<<<<<<< HEAD
 +	info = registered_fb[con2fb_map[vc->vc_num]];
 +	cap = info->flags;
++=======
+ 	info = fbcon_info_from_console(vc->vc_num);
++>>>>>>> 409d6c95f9c6 (fbcon: Introduce wrapper for console->fb_info lookup)
  
  	if (logo_shown < 0 && console_loglevel <= CONSOLE_LOGLEVEL_QUIET)
  		logo_shown = FBCON_LOGO_DONTSHOW;
@@@ -1353,9 -1310,8 +1369,9 @@@ static void fbcon_clear_margins(struct 
  
  static void fbcon_cursor(struct vc_data *vc, int mode)
  {
- 	struct fb_info *info = registered_fb[con2fb_map[vc->vc_num]];
+ 	struct fb_info *info = fbcon_info_from_console(vc->vc_num);
  	struct fbcon_ops *ops = info->fbcon_par;
 +	int y;
   	int c = scr_readw((u16 *) vc->vc_pos);
  
  	ops->cur_blink_jiffies = msecs_to_jiffies(vc->vc_cur_blink_ms);
@@@ -1456,10 -1404,10 +1472,10 @@@ static void fbcon_set_disp(struct fb_in
  
  static __inline__ void ywrap_up(struct vc_data *vc, int count)
  {
- 	struct fb_info *info = registered_fb[con2fb_map[vc->vc_num]];
+ 	struct fb_info *info = fbcon_info_from_console(vc->vc_num);
  	struct fbcon_ops *ops = info->fbcon_par;
  	struct fbcon_display *p = &fb_display[vc->vc_num];
 -
 +	
  	p->yscroll += count;
  	if (p->yscroll >= p->vrows)	/* Deal with wrap */
  		p->yscroll -= p->vrows;
@@@ -1475,10 -1423,10 +1491,10 @@@
  
  static __inline__ void ywrap_down(struct vc_data *vc, int count)
  {
- 	struct fb_info *info = registered_fb[con2fb_map[vc->vc_num]];
+ 	struct fb_info *info = fbcon_info_from_console(vc->vc_num);
  	struct fbcon_ops *ops = info->fbcon_par;
  	struct fbcon_display *p = &fb_display[vc->vc_num];
 -
 +	
  	p->yscroll -= count;
  	if (p->yscroll < 0)	/* Deal with wrap */
  		p->yscroll += p->vrows;
@@@ -1542,10 -1490,10 +1558,10 @@@ static __inline__ void ypan_up_redraw(s
  
  static __inline__ void ypan_down(struct vc_data *vc, int count)
  {
- 	struct fb_info *info = registered_fb[con2fb_map[vc->vc_num]];
+ 	struct fb_info *info = fbcon_info_from_console(vc->vc_num);
  	struct fbcon_display *p = &fb_display[vc->vc_num];
  	struct fbcon_ops *ops = info->fbcon_par;
 -
 +	
  	p->yscroll -= count;
  	if (p->yscroll < 0) {
  		ops->bmove(vc, info, 0, 0, p->vrows - vc->vc_rows,
@@@ -1820,29 -1675,69 +1836,79 @@@ static void fbcon_redraw(struct vc_dat
  	}
  }
  
 -static void fbcon_bmove_rec(struct vc_data *vc, struct fbcon_display *p, int sy, int sx,
 -			    int dy, int dx, int height, int width, u_int y_break)
 +static inline void fbcon_softback_note(struct vc_data *vc, int t,
 +				       int count)
  {
++<<<<<<< HEAD
 +	unsigned short *p;
++=======
+ 	struct fb_info *info = fbcon_info_from_console(vc->vc_num);
+ 	struct fbcon_ops *ops = info->fbcon_par;
+ 	u_int b;
++>>>>>>> 409d6c95f9c6 (fbcon: Introduce wrapper for console->fb_info lookup)
  
 -	if (sy < y_break && sy + height > y_break) {
 -		b = y_break - sy;
 -		if (dy < sy) {	/* Avoid trashing self */
 -			fbcon_bmove_rec(vc, p, sy, sx, dy, dx, b, width,
 -					y_break);
 -			fbcon_bmove_rec(vc, p, sy + b, sx, dy + b, dx,
 -					height - b, width, y_break);
 -		} else {
 -			fbcon_bmove_rec(vc, p, sy + b, sx, dy + b, dx,
 -					height - b, width, y_break);
 -			fbcon_bmove_rec(vc, p, sy, sx, dy, dx, b, width,
 -					y_break);
 -		}
 +	if (vc->vc_num != fg_console)
  		return;
 +	p = (unsigned short *) (vc->vc_origin + t * vc->vc_size_row);
 +
 +	while (count) {
 +		scr_memcpyw((u16 *) softback_in, p, vc->vc_size_row);
 +		count--;
 +		p = advance_row(p, 1);
 +		softback_in += vc->vc_size_row;
 +		if (softback_in == softback_end)
 +			softback_in = softback_buf;
 +		if (softback_in == softback_top) {
 +			softback_top += vc->vc_size_row;
 +			if (softback_top == softback_end)
 +				softback_top = softback_buf;
 +		}
  	}
++<<<<<<< HEAD
 +	softback_curr = softback_in;
++=======
+ 
+ 	if (dy < y_break && dy + height > y_break) {
+ 		b = y_break - dy;
+ 		if (dy < sy) {	/* Avoid trashing self */
+ 			fbcon_bmove_rec(vc, p, sy, sx, dy, dx, b, width,
+ 					y_break);
+ 			fbcon_bmove_rec(vc, p, sy + b, sx, dy + b, dx,
+ 					height - b, width, y_break);
+ 		} else {
+ 			fbcon_bmove_rec(vc, p, sy + b, sx, dy + b, dx,
+ 					height - b, width, y_break);
+ 			fbcon_bmove_rec(vc, p, sy, sx, dy, dx, b, width,
+ 					y_break);
+ 		}
+ 		return;
+ 	}
+ 	ops->bmove(vc, info, real_y(p, sy), sx, real_y(p, dy), dx,
+ 		   height, width);
+ }
+ 
+ static void fbcon_bmove(struct vc_data *vc, int sy, int sx, int dy, int dx,
+ 			int height, int width)
+ {
+ 	struct fb_info *info = fbcon_info_from_console(vc->vc_num);
+ 	struct fbcon_display *p = &fb_display[vc->vc_num];
+ 
+ 	if (fbcon_is_inactive(vc, info))
+ 		return;
+ 
+ 	if (!width || !height)
+ 		return;
+ 
+ 	/*  Split blits that cross physical y_wrap case.
+ 	 *  Pathological case involves 4 blits, better to use recursive
+ 	 *  code rather than unrolled case
+ 	 *
+ 	 *  Recursive invocations don't need to erase the cursor over and
+ 	 *  over again, so we use fbcon_bmove_rec()
+ 	 */
+ 	fbcon_bmove_rec(vc, p, sy, sx, dy, dx, height, width,
+ 			p->vrows - p->yscroll);
++>>>>>>> 409d6c95f9c6 (fbcon: Introduce wrapper for console->fb_info lookup)
  }
  
  static bool fbcon_scroll(struct vc_data *vc, unsigned int t, unsigned int b,
@@@ -2234,19 -2075,11 +2300,19 @@@ static int fbcon_switch(struct vc_data 
  	struct fbcon_ops *ops;
  	struct fbcon_display *p = &fb_display[vc->vc_num];
  	struct fb_var_screeninfo var;
 -	int i, ret, prev_console;
 +	int i, ret, prev_console, charcnt = 256;
  
- 	info = registered_fb[con2fb_map[vc->vc_num]];
+ 	info = fbcon_info_from_console(vc->vc_num);
  	ops = info->fbcon_par;
  
 +	if (softback_top) {
 +		if (softback_lines)
 +			fbcon_set_origin(vc);
 +		softback_top = softback_curr = softback_in = softback_buf;
 +		softback_lines = 0;
 +		fbcon_update_softback(vc);
 +	}
 +
  	if (logo_shown >= 0) {
  		struct vc_data *conp2 = vc_cons[logo_shown].d;
  
@@@ -2581,10 -2402,10 +2647,10 @@@ static void set_vc_hi_font(struct vc_da
  	}
  }
  
 -static int fbcon_do_set_font(struct vc_data *vc, int w, int h, int charcount,
 +static int fbcon_do_set_font(struct vc_data *vc, int w, int h,
  			     const u8 * data, int userfont)
  {
- 	struct fb_info *info = registered_fb[con2fb_map[vc->vc_num]];
+ 	struct fb_info *info = fbcon_info_from_console(vc->vc_num);
  	struct fbcon_ops *ops = info->fbcon_par;
  	struct fbcon_display *p = &fb_display[vc->vc_num];
  	int resize;
* Unmerged path drivers/video/fbdev/core/fbcon.c
