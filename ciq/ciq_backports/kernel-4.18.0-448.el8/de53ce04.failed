vt: use tty_insert_flip_string in respond_string

jira LE-1907
cve CVE-2022-1462
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Jiri Slaby <jslaby@suse.cz>
commit de53ce0427cd20886b0d53555dc576702cbb1ff8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/de53ce04.failed

Pass the length of a string to respond_string and use
tty_insert_flip_string instead of a loop with tty_insert_flip_char. This
simplifies the processing on the tty side.

The added strlens are optimized during constant folding and propagation
and the result are proper constants in assembly.

	Signed-off-by: Jiri Slaby <jslaby@suse.cz>
Link: https://lore.kernel.org/r/20200615074910.19267-8-jslaby@suse.cz
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit de53ce0427cd20886b0d53555dc576702cbb1ff8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/tty/vt/vt.c
diff --cc drivers/tty/vt/vt.c
index e02f07c2ed9b,49c9d1e4067c..000000000000
--- a/drivers/tty/vt/vt.c
+++ b/drivers/tty/vt/vt.c
@@@ -1662,9 -1818,12 +1659,17 @@@ static void respond_string(const char *
  static void cursor_report(struct vc_data *vc, struct tty_struct *tty)
  {
  	char buf[40];
+ 	int len;
  
++<<<<<<< HEAD
 +	sprintf(buf, "\033[%d;%dR", vc->vc_y + (vc->vc_decom ? vc->vc_top + 1 : 1), vc->vc_x + 1);
 +	respond_string(buf, tty->port);
++=======
+ 	len = sprintf(buf, "\033[%d;%dR", vc->state.y +
+ 			(vc->vc_decom ? vc->vc_top + 1 : 1),
+ 			vc->state.x + 1);
+ 	respond_string(buf, len, tty->port);
++>>>>>>> de53ce0427cd (vt: use tty_insert_flip_string in respond_string)
  }
  
  static inline void status_report(struct tty_struct *tty)
* Unmerged path drivers/tty/vt/vt.c
