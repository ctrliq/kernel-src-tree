raw: remove unused variables from raw6_icmp_error()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Eric Dumazet <edumazet@google.com>
commit c4fceb46add65481ef0dfb79cad24c3c269b4cad
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/c4fceb46.failed

saddr and daddr are set but not used.

Fixes: ba44f8182ec2 ("raw: use more conventional iterators")
	Reported-by: kernel test robot <lkp@intel.com>
	Signed-off-by: Eric Dumazet <edumazet@google.com>
	Acked-by: Jonathan Lemon <jonathan.lemon@gmail.com>
Link: https://lore.kernel.org/r/20220622032303.159394-1-edumazet@google.com
	Signed-off-by: Jakub Kicinski <kuba@kernel.org>
(cherry picked from commit c4fceb46add65481ef0dfb79cad24c3c269b4cad)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/ipv6/raw.c
diff --cc net/ipv6/raw.c
index 1d4284c2d260,722de9dd0ff7..000000000000
--- a/net/ipv6/raw.c
+++ b/net/ipv6/raw.c
@@@ -366,30 -332,25 +366,39 @@@ static void rawv6_err(struct sock *sk, 
  void raw6_icmp_error(struct sk_buff *skb, int nexthdr,
  		u8 type, u8 code, int inner_offset, __be32 info)
  {
++<<<<<<< HEAD
++=======
+ 	struct net *net = dev_net(skb->dev);
+ 	struct hlist_nulls_head *hlist;
+ 	struct hlist_nulls_node *hnode;
++>>>>>>> c4fceb46add6 (raw: remove unused variables from raw6_icmp_error())
  	struct sock *sk;
  	int hash;
 +	const struct in6_addr *saddr, *daddr;
 +	struct net *net;
  
  	hash = nexthdr & (RAW_HTABLE_SIZE - 1);
 -	hlist = &raw_v6_hashinfo.ht[hash];
 -	rcu_read_lock();
 -	sk_nulls_for_each(sk, hnode, hlist) {
 +
 +	read_lock(&raw_v6_hashinfo.lock);
 +	sk = sk_head(&raw_v6_hashinfo.ht[hash]);
 +	if (sk) {
  		/* Note: ipv6_hdr(skb) != skb->data */
  		const struct ipv6hdr *ip6h = (const struct ipv6hdr *)skb->data;
 -
 -		if (!raw_v6_match(net, sk, nexthdr, &ip6h->saddr, &ip6h->daddr,
 -				  inet6_iif(skb), inet6_iif(skb)))
 -			continue;
 -		rawv6_err(sk, skb, NULL, type, code, inner_offset, info);
++<<<<<<< HEAD
 +		saddr = &ip6h->saddr;
 +		daddr = &ip6h->daddr;
 +		net = dev_net(skb->dev);
++=======
++>>>>>>> c4fceb46add6 (raw: remove unused variables from raw6_icmp_error())
 +
 +		while ((sk = __raw_v6_lookup(net, sk, nexthdr, saddr, daddr,
 +					     inet6_iif(skb), inet6_iif(skb)))) {
 +			rawv6_err(sk, skb, NULL, type, code,
 +					inner_offset, info);
 +			sk = sk_next(sk);
 +		}
  	}
 -	rcu_read_unlock();
 +	read_unlock(&raw_v6_hashinfo.lock);
  }
  
  static inline int rawv6_rcv_skb(struct sock *sk, struct sk_buff *skb)
* Unmerged path net/ipv6/raw.c
