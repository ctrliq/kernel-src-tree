xfs: inode allocation can use a single perag instance

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Dave Chinner <dchinner@redhat.com>
commit 309161f6603ce1a53b76a42817cde2a9bcd17e82
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/309161f6.failed

Now that we've internalised the two-phase inode allocation, we can
now easily make the AG selection and allocation atomic from the
perspective of a single perag context. This will ensure AGs going
offline/away cannot occur between the selection and allocation
steps.

	Signed-off-by: Dave Chinner <dchinner@redhat.com>
	Reviewed-by: Brian Foster <bfoster@redhat.com>
	Reviewed-by: Darrick J. Wong <djwong@kernel.org>

(cherry picked from commit 309161f6603ce1a53b76a42817cde2a9bcd17e82)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/xfs/libxfs/xfs_ialloc.c
diff --cc fs/xfs/libxfs/xfs_ialloc.c
index 1e69b4d32727,a5604df959cf..000000000000
--- a/fs/xfs/libxfs/xfs_ialloc.c
+++ b/fs/xfs/libxfs/xfs_ialloc.c
@@@ -1764,8 -1763,12 +1764,17 @@@ nextag
  	xfs_perag_put(pag);
  	return error ? error : -ENOSPC;
  found_ag:
++<<<<<<< HEAD
 +	xfs_perag_put(pag);
 +	*IO_agbp = agbp;
++=======
+ 	/* Allocate an inode in the found AG */
+ 	error = xfs_dialloc_ag(*tpp, agbp, pag, parent, &ino);
+ 	xfs_perag_put(pag);
+ 	if (error)
+ 		return error;
+ 	*new_ino = ino;
++>>>>>>> 309161f6603c (xfs: inode allocation can use a single perag instance)
  	return 0;
  }
  
* Unmerged path fs/xfs/libxfs/xfs_ialloc.c
