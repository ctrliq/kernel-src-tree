ACPI: fan: Properly handle fine grain control

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Srinivas Pandruvada <srinivas.pandruvada@linux.intel.com>
commit bea2d9868ef553e376480de3cd84a7a06fb03e41
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/bea2d986.failed

When _FIF object specifies support for fine grain control, then fan speed
can be set from 0 to 100% with the recommended minimum "step size" via
_FSL object. Here the control value doesn't need to match any value from
_FPS object.

Currently we have a simple solution implemented which just pick maximum
control value from _FPS to display the actual state, but this is not
optimal when there is a big window between two control values in
_FPS. Also there is no way to set to any speed which doesn't match
control values in _FPS. The system firmware can start the fan at speed
which doesn't match any control value.

To support fine grain control (when supported) via thermal sysfs:
- cooling device max state is not _FPS state count but it will be
100 / _FIF.step_size
Step size can be from 1 to 9.
- cooling device current state is _FST.control / _FIF.step_size
- cooling device set state will set the control value
cdev.curr_state * _FIF.step_size plus any adjustment for 100%.
By the spec, when control value do not sum to 100% because of
_FIF.step_size, OSPM may select an appropriate ending Level increment
to reach 100%.

There is no rounding during calculation. For example if step size
is 6:
thermal sysfs cooling device max_state = 100/6 = 16
So user can set any value from 0-16.

If the system boots with a _FST.control which is not multiples
of step_size, the thermal sysfs cur_state will be based on the
range. For example for step size = 6:
_FST.control	thermal sysfs cur_state
------------------------------------------------
0-5		0
6-11		1
..
..
90-95		15
96-100		16

While setting the _FST.control, the compensation will be at
the last step for cur_state = 16, which will set the _FST.control
to 100.

	Signed-off-by: Srinivas Pandruvada <srinivas.pandruvada@linux.intel.com>
	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
(cherry picked from commit bea2d9868ef553e376480de3cd84a7a06fb03e41)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/acpi/fan.c
#	drivers/acpi/fan.h
diff --cc drivers/acpi/fan.c
index 89d33a258449,01616ec2e9ac..000000000000
--- a/drivers/acpi/fan.c
+++ b/drivers/acpi/fan.c
@@@ -271,6 -269,17 +307,20 @@@ static int acpi_fan_get_fif(struct acpi
  		status = -EINVAL;
  	}
  
++<<<<<<< HEAD:drivers/acpi/fan.c
++=======
+ 	fan->fif.revision = fields[0];
+ 	fan->fif.fine_grain_ctrl = fields[1];
+ 	fan->fif.step_size = fields[2];
+ 	fan->fif.low_speed_notification = fields[3];
+ 
+ 	/* If there is a bug in step size and set as 0, change to 1 */
+ 	if (!fan->fif.step_size)
+ 		fan->fif.step_size = 1;
+ 	/* If step size > 9, change to 9 (by spec valid values 1-9) */
+ 	else if (fan->fif.step_size > 9)
+ 		fan->fif.step_size = 9;
++>>>>>>> bea2d9868ef5 (ACPI: fan: Properly handle fine grain control):drivers/acpi/fan_core.c
  err:
  	kfree(obj);
  	return status;
diff --cc drivers/acpi/fan.h
index dd9bb8ca2244,4c01be2e3b77..000000000000
--- a/drivers/acpi/fan.h
+++ b/drivers/acpi/fan.h
@@@ -12,3 -16,40 +12,43 @@@
  	{"INTC1048", }, /* Fan for Alder Lake generation */ \
  	{"INTC10A2", }, /* Fan for Raptor Lake generation */ \
  	{"PNP0C0B", } /* Generic ACPI fan */
++<<<<<<< HEAD
++=======
+ 
+ #define ACPI_FPS_NAME_LEN	20
+ 
+ struct acpi_fan_fps {
+ 	u64 control;
+ 	u64 trip_point;
+ 	u64 speed;
+ 	u64 noise_level;
+ 	u64 power;
+ 	char name[ACPI_FPS_NAME_LEN];
+ 	struct device_attribute dev_attr;
+ };
+ 
+ struct acpi_fan_fif {
+ 	u8 revision;
+ 	u8 fine_grain_ctrl;
+ 	u8 step_size;
+ 	u8 low_speed_notification;
+ };
+ 
+ struct acpi_fan_fst {
+ 	u64 revision;
+ 	u64 control;
+ 	u64 speed;
+ };
+ 
+ struct acpi_fan {
+ 	bool acpi4;
+ 	struct acpi_fan_fif fif;
+ 	struct acpi_fan_fps *fps;
+ 	int fps_count;
+ 	struct thermal_cooling_device *cdev;
+ };
+ 
+ int acpi_fan_create_attributes(struct acpi_device *device);
+ void acpi_fan_delete_attributes(struct acpi_device *device);
+ #endif
++>>>>>>> bea2d9868ef5 (ACPI: fan: Properly handle fine grain control)
* Unmerged path drivers/acpi/fan.c
* Unmerged path drivers/acpi/fan.h
