ice: Add support for VLAN TPID filters in switchdev

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Martyna Szapar-Mudlaw <martyna.szapar-mudlaw@intel.com>
commit ea71b967a50785fed7129aaf0e7cb201944c01e7
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/ea71b967.failed

Enable support for adding TC rules that filter on the VLAN tag type
in switchdev mode.

	Signed-off-by: Martyna Szapar-Mudlaw <martyna.szapar-mudlaw@intel.com>
	Tested-by: Sandeep Penigalapati <sandeep.penigalapati@intel.com>
	Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
(cherry picked from commit ea71b967a50785fed7129aaf0e7cb201944c01e7)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/intel/ice/ice_tc_lib.c
#	drivers/net/ethernet/intel/ice/ice_vlan_mode.c
diff --cc drivers/net/ethernet/intel/ice/ice_tc_lib.c
index 4abf914a3b3e,2fb3ef918e3b..000000000000
--- a/drivers/net/ethernet/intel/ice/ice_tc_lib.c
+++ b/drivers/net/ethernet/intel/ice/ice_tc_lib.c
@@@ -311,7 -330,14 +326,18 @@@ ice_tc_fill_rules(struct ice_hw *hw, u3
  
  	/* copy VLAN info */
  	if (flags & ICE_TC_FLWR_FIELD_VLAN) {
++<<<<<<< HEAD
 +		list[i].type = ICE_VLAN_OFOS;
++=======
+ 		vlan_tpid = be16_to_cpu(headers->vlan_hdr.vlan_tpid);
+ 		rule_info->vlan_type =
+ 				ice_check_supported_vlan_tpid(vlan_tpid);
+ 
+ 		if (flags & ICE_TC_FLWR_FIELD_CVLAN)
+ 			list[i].type = ICE_VLAN_EX;
+ 		else
+ 			list[i].type = ICE_VLAN_OFOS;
++>>>>>>> ea71b967a507 (ice: Add support for VLAN TPID filters in switchdev)
  		list[i].h_u.vlan_hdr.vlan = headers->vlan_hdr.vlan_id;
  		list[i].m_u.vlan_hdr.vlan = cpu_to_be16(0xFFFF);
  		i++;
@@@ -1059,8 -1094,36 +1085,10 @@@ ice_parse_cls_flower(struct net_device 
  				cpu_to_be16(match.key->vlan_id & VLAN_VID_MASK);
  		if (match.mask->vlan_priority)
  			headers->vlan_hdr.vlan_prio = match.key->vlan_priority;
+ 		if (match.mask->vlan_tpid)
+ 			headers->vlan_hdr.vlan_tpid = match.key->vlan_tpid;
  	}
  
 -	if (flow_rule_match_key(rule, FLOW_DISSECTOR_KEY_CVLAN)) {
 -		struct flow_match_vlan match;
 -
 -		if (!ice_is_dvm_ena(&vsi->back->hw)) {
 -			NL_SET_ERR_MSG_MOD(fltr->extack, "Double VLAN mode is not enabled");
 -			return -EINVAL;
 -		}
 -
 -		flow_rule_match_cvlan(rule, &match);
 -
 -		if (match.mask->vlan_id) {
 -			if (match.mask->vlan_id == VLAN_VID_MASK) {
 -				fltr->flags |= ICE_TC_FLWR_FIELD_CVLAN;
 -			} else {
 -				NL_SET_ERR_MSG_MOD(fltr->extack,
 -						   "Bad CVLAN mask");
 -				return -EINVAL;
 -			}
 -		}
 -
 -		headers->cvlan_hdr.vlan_id =
 -				cpu_to_be16(match.key->vlan_id & VLAN_VID_MASK);
 -		if (match.mask->vlan_priority)
 -			headers->cvlan_hdr.vlan_prio = match.key->vlan_priority;
 -	}
 -
  	if (flow_rule_match_key(rule, FLOW_DISSECTOR_KEY_CONTROL)) {
  		struct flow_match_control match;
  
* Unmerged path drivers/net/ethernet/intel/ice/ice_vlan_mode.c
diff --git a/drivers/net/ethernet/intel/ice/ice_protocol_type.h b/drivers/net/ethernet/intel/ice/ice_protocol_type.h
index 3f64300b0e14..9b033bb2c574 100644
--- a/drivers/net/ethernet/intel/ice/ice_protocol_type.h
+++ b/drivers/net/ethernet/intel/ice/ice_protocol_type.h
@@ -109,13 +109,18 @@ enum ice_prot_id {
 #define ICE_GRE_OF_HW		64
 
 #define ICE_UDP_OF_HW	52 /* UDP Tunnels */
-#define ICE_META_DATA_ID_HW 255 /* this is used for tunnel type */
+#define ICE_META_DATA_ID_HW 255 /* this is used for tunnel and VLAN type */
 
 #define ICE_MDID_SIZE 2
+
 #define ICE_TUN_FLAG_MDID 21
 #define ICE_TUN_FLAG_MDID_OFF (ICE_MDID_SIZE * ICE_TUN_FLAG_MDID)
 #define ICE_TUN_FLAG_MASK 0xFF
 
+#define ICE_VLAN_FLAG_MDID 20
+#define ICE_VLAN_FLAG_MDID_OFF (ICE_MDID_SIZE * ICE_VLAN_FLAG_MDID)
+#define ICE_PKT_FLAGS_0_TO_15_VLAN_FLAGS_MASK 0xD000
+
 #define ICE_TUN_FLAG_FV_IND 2
 
 /* Mapping of software defined protocol ID to hardware defined protocol ID */
diff --git a/drivers/net/ethernet/intel/ice/ice_switch.c b/drivers/net/ethernet/intel/ice/ice_switch.c
index 7b15835f7479..4f32faa68147 100644
--- a/drivers/net/ethernet/intel/ice/ice_switch.c
+++ b/drivers/net/ethernet/intel/ice/ice_switch.c
@@ -5180,10 +5180,11 @@ static bool ice_tun_type_match_word(enum ice_sw_tunnel_type tun_type, u16 *mask)
  * ice_add_special_words - Add words that are not protocols, such as metadata
  * @rinfo: other information regarding the rule e.g. priority and action info
  * @lkup_exts: lookup word structure
+ * @dvm_ena: is double VLAN mode enabled
  */
 static int
 ice_add_special_words(struct ice_adv_rule_info *rinfo,
-		      struct ice_prot_lkup_ext *lkup_exts)
+		      struct ice_prot_lkup_ext *lkup_exts, bool dvm_ena)
 {
 	u16 mask;
 
@@ -5202,6 +5203,19 @@ ice_add_special_words(struct ice_adv_rule_info *rinfo,
 		}
 	}
 
+	if (rinfo->vlan_type != 0 && dvm_ena) {
+		if (lkup_exts->n_val_words < ICE_MAX_CHAIN_WORDS) {
+			u8 word = lkup_exts->n_val_words++;
+
+			lkup_exts->fv_words[word].prot_id = ICE_META_DATA_ID_HW;
+			lkup_exts->fv_words[word].off = ICE_VLAN_FLAG_MDID_OFF;
+			lkup_exts->field_mask[word] =
+					ICE_PKT_FLAGS_0_TO_15_VLAN_FLAGS_MASK;
+		} else {
+			return -ENOSPC;
+		}
+	}
+
 	return 0;
 }
 
@@ -5321,7 +5335,7 @@ ice_add_adv_recipe(struct ice_hw *hw, struct ice_adv_lkup_elem *lkups,
 	/* Create any special protocol/offset pairs, such as looking at tunnel
 	 * bits by extracting metadata
 	 */
-	status = ice_add_special_words(rinfo, lkup_exts);
+	status = ice_add_special_words(rinfo, lkup_exts, ice_is_dvm_ena(hw));
 	if (status)
 		goto err_free_lkup_exts;
 
@@ -5797,6 +5811,36 @@ ice_fill_adv_packet_tun(struct ice_hw *hw, enum ice_sw_tunnel_type tun_type,
 	return -EIO;
 }
 
+/**
+ * ice_fill_adv_packet_vlan - fill dummy packet with VLAN tag type
+ * @vlan_type: VLAN tag type
+ * @pkt: dummy packet to fill in
+ * @offsets: offset info for the dummy packet
+ */
+static int
+ice_fill_adv_packet_vlan(u16 vlan_type, u8 *pkt,
+			 const struct ice_dummy_pkt_offsets *offsets)
+{
+	u16 i;
+
+	/* Find VLAN header and insert VLAN TPID */
+	for (i = 0; offsets[i].type != ICE_PROTOCOL_LAST; i++) {
+		if (offsets[i].type == ICE_VLAN_OFOS ||
+		    offsets[i].type == ICE_VLAN_EX) {
+			struct ice_vlan_hdr *hdr;
+			u16 offset;
+
+			offset = offsets[i].offset;
+			hdr = (struct ice_vlan_hdr *)&pkt[offset];
+			hdr->type = cpu_to_be16(vlan_type);
+
+			return 0;
+		}
+	}
+
+	return -EIO;
+}
+
 /**
  * ice_find_adv_rule_entry - Search a rule entry
  * @hw: pointer to the hardware structure
@@ -5832,6 +5876,7 @@ ice_find_adv_rule_entry(struct ice_hw *hw, struct ice_adv_lkup_elem *lkups,
 			}
 		if (rinfo->sw_act.flag == list_itr->rule_info.sw_act.flag &&
 		    rinfo->tun_type == list_itr->rule_info.tun_type &&
+		    rinfo->vlan_type == list_itr->rule_info.vlan_type &&
 		    lkups_matched)
 			return list_itr;
 	}
@@ -6125,6 +6170,14 @@ ice_add_adv_rule(struct ice_hw *hw, struct ice_adv_lkup_elem *lkups,
 			goto err_ice_add_adv_rule;
 	}
 
+	if (rinfo->vlan_type != 0 && ice_is_dvm_ena(hw)) {
+		status = ice_fill_adv_packet_vlan(rinfo->vlan_type,
+						  s_rule->hdr_data,
+						  profile->offsets);
+		if (status)
+			goto err_ice_add_adv_rule;
+	}
+
 	status = ice_aq_sw_rules(hw, (struct ice_aqc_sw_rules *)s_rule,
 				 rule_buf_sz, 1, ice_aqc_opc_add_sw_rules,
 				 NULL);
@@ -6363,7 +6416,7 @@ ice_rem_adv_rule(struct ice_hw *hw, struct ice_adv_lkup_elem *lkups,
 	/* Create any special protocol/offset pairs, such as looking at tunnel
 	 * bits by extracting metadata
 	 */
-	status = ice_add_special_words(rinfo, &lkup_exts);
+	status = ice_add_special_words(rinfo, &lkup_exts, ice_is_dvm_ena(hw));
 	if (status)
 		return status;
 
diff --git a/drivers/net/ethernet/intel/ice/ice_switch.h b/drivers/net/ethernet/intel/ice/ice_switch.h
index 31b8b006b339..7a4a3ee21a4b 100644
--- a/drivers/net/ethernet/intel/ice/ice_switch.h
+++ b/drivers/net/ethernet/intel/ice/ice_switch.h
@@ -193,6 +193,7 @@ struct ice_adv_rule_info {
 	u32 priority;
 	u8 rx; /* true means LOOKUP_RX otherwise LOOKUP_TX */
 	u16 fltr_rule_id;
+	u16 vlan_type;
 	struct ice_adv_rule_flags_info flags_info;
 };
 
* Unmerged path drivers/net/ethernet/intel/ice/ice_tc_lib.c
diff --git a/drivers/net/ethernet/intel/ice/ice_tc_lib.h b/drivers/net/ethernet/intel/ice/ice_tc_lib.h
index e25e958f4396..c52ee21afdde 100644
--- a/drivers/net/ethernet/intel/ice/ice_tc_lib.h
+++ b/drivers/net/ethernet/intel/ice/ice_tc_lib.h
@@ -40,6 +40,7 @@ struct ice_tc_flower_action {
 struct ice_tc_vlan_hdr {
 	__be16 vlan_id; /* Only last 12 bits valid */
 	u16 vlan_prio; /* Only last 3 bits valid (valid values: 0..7) */
+	__be16 vlan_tpid;
 };
 
 struct ice_tc_l2_hdr {
* Unmerged path drivers/net/ethernet/intel/ice/ice_vlan_mode.c
