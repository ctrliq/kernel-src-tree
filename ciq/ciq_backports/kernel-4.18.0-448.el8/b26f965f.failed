ASoC: SOF: topology: Use kmemdup() to replace kzalloc + memcpy

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Yihao Han <hanyihao@vivo.com>
commit b26f965f7c83464f60d5af411ef9a03079e41800
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/b26f965f.failed

fix memdup.cocci warning:
sound/soc/sof/topology.c:876:19-26: WARNING opportunity for kmemdup

Generated by: scripts/coccinelle/api/memdup.cocci

	Signed-off-by: Yihao Han <hanyihao@vivo.com>
	Acked-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
Link: https://lore.kernel.org/r/20220317093841.3414-1-hanyihao@vivo.com
	Signed-off-by: Mark Brown <broonie@kernel.org>
(cherry picked from commit b26f965f7c83464f60d5af411ef9a03079e41800)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	sound/soc/sof/topology.c
diff --cc sound/soc/sof/topology.c
index a127d3d2eab7,369693cc6d10..000000000000
--- a/sound/soc/sof/topology.c
+++ b/sound/soc/sof/topology.c
@@@ -1284,65 -864,20 +1284,75 @@@ static int sof_control_load_bytes(struc
  	struct snd_soc_tplg_bytes_control *control =
  		container_of(hdr, struct snd_soc_tplg_bytes_control, hdr);
  	struct soc_bytes_ext *sbe = (struct soc_bytes_ext *)kc->private_value;
 +	size_t max_size = sbe->max;
  	size_t priv_size = le32_to_cpu(control->priv.size);
 +	int ret;
 +
 +	if (max_size < sizeof(struct sof_ipc_ctrl_data) ||
 +	    max_size < sizeof(struct sof_abi_hdr)) {
 +		ret = -EINVAL;
 +		goto out;
 +	}
 +
 +	/* init the get/put bytes data */
 +	if (priv_size > max_size - sizeof(struct sof_ipc_ctrl_data)) {
 +		dev_err(scomp->dev, "err: bytes data size %zu exceeds max %zu.\n",
 +			priv_size, max_size - sizeof(struct sof_ipc_ctrl_data));
 +		ret = -EINVAL;
 +		goto out;
 +	}
 +
 +	scontrol->size = sizeof(struct sof_ipc_ctrl_data) + priv_size;
 +
 +	scontrol->control_data = kzalloc(max_size, GFP_KERNEL);
 +	cdata = scontrol->control_data;
 +	if (!scontrol->control_data) {
 +		ret = -ENOMEM;
 +		goto out;
 +	}
  
 -	scontrol->max_size = sbe->max;
  	scontrol->comp_id = sdev->next_comp_id;
 +	scontrol->control_data->cmd = SOF_CTRL_CMD_BINARY;
 +	scontrol->control_data->index = kc->index;
 +
 +	dev_dbg(scomp->dev, "tplg: load kcontrol index %d chans %d\n",
 +		scontrol->comp_id, scontrol->num_channels);
  
 -	dev_dbg(scomp->dev, "tplg: load kcontrol index %d\n", scontrol->comp_id);
++<<<<<<< HEAD
 +	if (le32_to_cpu(control->priv.size) > 0) {
 +		memcpy(cdata->data, control->priv.data,
 +		       le32_to_cpu(control->priv.size));
  
 +		if (cdata->data->magic != SOF_ABI_MAGIC) {
 +			dev_err(scomp->dev, "error: Wrong ABI magic 0x%08x.\n",
 +				cdata->data->magic);
 +			ret = -EINVAL;
 +			goto out_free;
 +		}
 +		if (SOF_ABI_VERSION_INCOMPATIBLE(SOF_ABI_VERSION,
 +						 cdata->data->abi)) {
 +			dev_err(scomp->dev,
 +				"error: Incompatible ABI version 0x%08x.\n",
 +				cdata->data->abi);
 +			ret = -EINVAL;
 +			goto out_free;
 +		}
 +		if (cdata->data->size + sizeof(struct sof_abi_hdr) !=
 +		    le32_to_cpu(control->priv.size)) {
 +			dev_err(scomp->dev,
 +				"error: Conflict in bytes vs. priv size.\n");
 +			ret = -EINVAL;
 +			goto out_free;
 +		}
++=======
+ 	/* copy the private data */
+ 	if (priv_size > 0) {
+ 		scontrol->priv = kmemdup(control->priv.data, priv_size, GFP_KERNEL);
+ 		if (!scontrol->priv)
+ 			return -ENOMEM;
+ 
+ 		scontrol->priv_size = priv_size;
++>>>>>>> b26f965f7c83 (ASoC: SOF: topology: Use kmemdup() to replace kzalloc + memcpy)
  	}
  
  	return 0;
* Unmerged path sound/soc/sof/topology.c
