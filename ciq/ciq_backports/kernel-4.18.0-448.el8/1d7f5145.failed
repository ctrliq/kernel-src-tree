ath11k: Designating channel frequency when sending management frames

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Baochen Qiang <quic_bqiang@quicinc.com>
commit 1d7f514577f0ccf3e5f5736247138868fb62896a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/1d7f5145.failed

In case of Passpoint, the WLAN interface may be requested to
remain on a specific channel and then to send some management
frames on that channel. Now chanfreq of wmi_mgmt_send_cmd is set
as 0, as a result firmware may choose a default but wrong channel.
Fix it by assigning chanfreq field with the designated channel.

This change only applies to WCN6855 and QCA6390, other chips are
not affected.

Tested-on: WCN6855 hw2.0 PCI WLAN.HSP.1.1-01720.1-QCAHSPSWPL_V1_V2_SILICONZ_LITE-1

	Signed-off-by: Baochen Qiang <quic_bqiang@quicinc.com>
	Signed-off-by: Kalle Valo <quic_kvalo@quicinc.com>
Link: https://lore.kernel.org/r/20220506013614.1580274-4-quic_bqiang@quicinc.com
(cherry picked from commit 1d7f514577f0ccf3e5f5736247138868fb62896a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/wireless/ath/ath11k/core.c
#	drivers/net/wireless/ath/ath11k/hw.h
diff --cc drivers/net/wireless/ath/ath11k/core.c
index 9f4b95c16915,26f7bdd1241a..000000000000
--- a/drivers/net/wireless/ath/ath11k/core.c
+++ b/drivers/net/wireless/ath/ath11k/core.c
@@@ -102,6 -102,15 +102,18 @@@ static const struct ath11k_hw_params at
  		.dbr_debug_support = true,
  		.global_reset = false,
  		.bios_sar_capa = NULL,
++<<<<<<< HEAD
++=======
+ 		.m3_fw_support = false,
+ 		.fixed_bdf_addr = true,
+ 		.fixed_mem_region = true,
+ 		.static_window_map = false,
+ 		.hybrid_bus_type = false,
+ 		.dp_window_idx = 0,
+ 		.ce_window_idx = 0,
+ 		.fixed_fw_mem = false,
+ 		.support_off_channel_tx = false,
++>>>>>>> 1d7f514577f0 (ath11k: Designating channel frequency when sending management frames)
  	},
  	{
  		.hw_rev = ATH11K_HW_IPQ6018_HW10,
@@@ -170,6 -178,15 +182,18 @@@
  		.dbr_debug_support = true,
  		.global_reset = false,
  		.bios_sar_capa = NULL,
++<<<<<<< HEAD
++=======
+ 		.m3_fw_support = false,
+ 		.fixed_bdf_addr = true,
+ 		.fixed_mem_region = true,
+ 		.static_window_map = false,
+ 		.hybrid_bus_type = false,
+ 		.dp_window_idx = 0,
+ 		.ce_window_idx = 0,
+ 		.fixed_fw_mem = false,
+ 		.support_off_channel_tx = false,
++>>>>>>> 1d7f514577f0 (ath11k: Designating channel frequency when sending management frames)
  	},
  	{
  		.name = "qca6390 hw2.0",
@@@ -237,6 -253,15 +261,18 @@@
  		.dbr_debug_support = false,
  		.global_reset = true,
  		.bios_sar_capa = NULL,
++<<<<<<< HEAD
++=======
+ 		.m3_fw_support = true,
+ 		.fixed_bdf_addr = false,
+ 		.fixed_mem_region = false,
+ 		.static_window_map = false,
+ 		.hybrid_bus_type = false,
+ 		.dp_window_idx = 0,
+ 		.ce_window_idx = 0,
+ 		.fixed_fw_mem = false,
+ 		.support_off_channel_tx = true,
++>>>>>>> 1d7f514577f0 (ath11k: Designating channel frequency when sending management frames)
  	},
  	{
  		.name = "qcn9074 hw1.0",
@@@ -304,6 -328,15 +340,18 @@@
  		.dbr_debug_support = true,
  		.global_reset = false,
  		.bios_sar_capa = NULL,
++<<<<<<< HEAD
++=======
+ 		.m3_fw_support = true,
+ 		.fixed_bdf_addr = false,
+ 		.fixed_mem_region = false,
+ 		.static_window_map = true,
+ 		.hybrid_bus_type = false,
+ 		.dp_window_idx = 3,
+ 		.ce_window_idx = 2,
+ 		.fixed_fw_mem = false,
+ 		.support_off_channel_tx = false,
++>>>>>>> 1d7f514577f0 (ath11k: Designating channel frequency when sending management frames)
  	},
  	{
  		.name = "wcn6855 hw2.0",
@@@ -371,6 -403,15 +419,18 @@@
  		.dbr_debug_support = false,
  		.global_reset = true,
  		.bios_sar_capa = &ath11k_hw_sar_capa_wcn6855,
++<<<<<<< HEAD
++=======
+ 		.m3_fw_support = true,
+ 		.fixed_bdf_addr = false,
+ 		.fixed_mem_region = false,
+ 		.static_window_map = false,
+ 		.hybrid_bus_type = false,
+ 		.dp_window_idx = 0,
+ 		.ce_window_idx = 0,
+ 		.fixed_fw_mem = false,
+ 		.support_off_channel_tx = true,
++>>>>>>> 1d7f514577f0 (ath11k: Designating channel frequency when sending management frames)
  	},
  	{
  		.name = "wcn6855 hw2.1",
@@@ -437,6 -477,89 +497,92 @@@
  		.dbr_debug_support = false,
  		.global_reset = true,
  		.bios_sar_capa = &ath11k_hw_sar_capa_wcn6855,
++<<<<<<< HEAD
++=======
+ 		.m3_fw_support = true,
+ 		.fixed_bdf_addr = false,
+ 		.fixed_mem_region = false,
+ 		.static_window_map = false,
+ 		.hybrid_bus_type = false,
+ 		.dp_window_idx = 0,
+ 		.ce_window_idx = 0,
+ 		.fixed_fw_mem = false,
+ 		.support_off_channel_tx = true,
+ 	},
+ 	{
+ 		.name = "wcn6750 hw1.0",
+ 		.hw_rev = ATH11K_HW_WCN6750_HW10,
+ 		.fw = {
+ 			.dir = "WCN6750/hw1.0",
+ 			.board_size = 256 * 1024,
+ 			.cal_offset = 128 * 1024,
+ 		},
+ 		.max_radios = 1,
+ 		.bdf_addr = 0x4B0C0000,
+ 		.hw_ops = &wcn6750_ops,
+ 		.ring_mask = &ath11k_hw_ring_mask_qca6390,
+ 		.internal_sleep_clock = false,
+ 		.regs = &wcn6750_regs,
+ 		.qmi_service_ins_id = ATH11K_QMI_WLFW_SERVICE_INS_ID_V01_WCN6750,
+ 		.host_ce_config = ath11k_host_ce_config_qca6390,
+ 		.ce_count = 9,
+ 		.target_ce_config = ath11k_target_ce_config_wlan_qca6390,
+ 		.target_ce_count = 9,
+ 		.svc_to_ce_map = ath11k_target_service_to_ce_map_wlan_qca6390,
+ 		.svc_to_ce_map_len = 14,
+ 		.rfkill_pin = 0,
+ 		.rfkill_cfg = 0,
+ 		.rfkill_on_level = 0,
+ 		.single_pdev_only = true,
+ 		.rxdma1_enable = false,
+ 		.num_rxmda_per_pdev = 1,
+ 		.rx_mac_buf_ring = true,
+ 		.vdev_start_delay = true,
+ 		.htt_peer_map_v2 = false,
+ 
+ 		.spectral = {
+ 			.fft_sz = 0,
+ 			.fft_pad_sz = 0,
+ 			.summary_pad_sz = 0,
+ 			.fft_hdr_len = 0,
+ 			.max_fft_bins = 0,
+ 		},
+ 
+ 		.interface_modes = BIT(NL80211_IFTYPE_STATION) |
+ 					BIT(NL80211_IFTYPE_AP),
+ 		.supports_monitor = false,
+ 		.supports_shadow_regs = true,
+ 		.idle_ps = true,
+ 		.supports_sta_ps = true,
+ 		.cold_boot_calib = false,
+ 		.fw_mem_mode = 0,
+ 		.num_vdevs = 16 + 1,
+ 		.num_peers = 512,
+ 		.supports_suspend = false,
+ 		.hal_desc_sz = sizeof(struct hal_rx_desc_qcn9074),
+ 		.supports_regdb = true,
+ 		.fix_l1ss = false,
+ 		.credit_flow = true,
+ 		.max_tx_ring = DP_TCL_NUM_RING_MAX_QCA6390,
+ 		.hal_params = &ath11k_hw_hal_params_qca6390,
+ 		.supports_dynamic_smps_6ghz = false,
+ 		.alloc_cacheable_memory = false,
+ 		.supports_rssi_stats = true,
+ 		.fw_wmi_diag_event = false,
+ 		.current_cc_support = true,
+ 		.dbr_debug_support = false,
+ 		.global_reset = false,
+ 		.bios_sar_capa = NULL,
+ 		.m3_fw_support = false,
+ 		.fixed_bdf_addr = false,
+ 		.fixed_mem_region = false,
+ 		.static_window_map = true,
+ 		.hybrid_bus_type = true,
+ 		.dp_window_idx = 1,
+ 		.ce_window_idx = 2,
+ 		.fixed_fw_mem = true,
+ 		.support_off_channel_tx = false,
++>>>>>>> 1d7f514577f0 (ath11k: Designating channel frequency when sending management frames)
  	},
  };
  
diff --cc drivers/net/wireless/ath/ath11k/hw.h
index 29546d8de738,77dc5c851c9b..000000000000
--- a/drivers/net/wireless/ath/ath11k/hw.h
+++ b/drivers/net/wireless/ath/ath11k/hw.h
@@@ -196,6 -196,15 +196,18 @@@ struct ath11k_hw_params 
  	bool dbr_debug_support;
  	bool global_reset;
  	const struct cfg80211_sar_capa *bios_sar_capa;
++<<<<<<< HEAD
++=======
+ 	bool m3_fw_support;
+ 	bool fixed_bdf_addr;
+ 	bool fixed_mem_region;
+ 	bool static_window_map;
+ 	bool hybrid_bus_type;
+ 	u8 dp_window_idx;
+ 	u8 ce_window_idx;
+ 	bool fixed_fw_mem;
+ 	bool support_off_channel_tx;
++>>>>>>> 1d7f514577f0 (ath11k: Designating channel frequency when sending management frames)
  };
  
  struct ath11k_hw_ops {
* Unmerged path drivers/net/wireless/ath/ath11k/core.c
* Unmerged path drivers/net/wireless/ath/ath11k/hw.h
diff --git a/drivers/net/wireless/ath/ath11k/wmi.c b/drivers/net/wireless/ath/ath11k/wmi.c
index 0eb2e5ef45d2..84d1c7054013 100644
--- a/drivers/net/wireless/ath/ath11k/wmi.c
+++ b/drivers/net/wireless/ath/ath11k/wmi.c
@@ -625,10 +625,25 @@ struct sk_buff *ath11k_wmi_alloc_skb(struct ath11k_wmi_base *wmi_sc, u32 len)
 	return skb;
 }
 
+static u32 ath11k_wmi_mgmt_get_freq(struct ath11k *ar,
+				    struct ieee80211_tx_info *info)
+{
+	struct ath11k_base *ab = ar->ab;
+	u32 freq = 0;
+
+	if (ab->hw_params.support_off_channel_tx &&
+	    ar->scan.is_roc &&
+	    (info->flags & IEEE80211_TX_CTL_TX_OFFCHAN))
+		freq = ar->scan.roc_freq;
+
+	return freq;
+}
+
 int ath11k_wmi_mgmt_send(struct ath11k *ar, u32 vdev_id, u32 buf_id,
 			 struct sk_buff *frame)
 {
 	struct ath11k_pdev_wmi *wmi = ar->wmi;
+	struct ieee80211_tx_info *info = IEEE80211_SKB_CB(frame);
 	struct wmi_mgmt_send_cmd *cmd;
 	struct wmi_tlv *frame_tlv;
 	struct sk_buff *skb;
@@ -649,7 +664,7 @@ int ath11k_wmi_mgmt_send(struct ath11k *ar, u32 vdev_id, u32 buf_id,
 			  FIELD_PREP(WMI_TLV_LEN, sizeof(*cmd) - TLV_HDR_SIZE);
 	cmd->vdev_id = vdev_id;
 	cmd->desc_id = buf_id;
-	cmd->chanfreq = 0;
+	cmd->chanfreq = ath11k_wmi_mgmt_get_freq(ar, info);
 	cmd->paddr_lo = lower_32_bits(ATH11K_SKB_CB(frame)->paddr);
 	cmd->paddr_hi = upper_32_bits(ATH11K_SKB_CB(frame)->paddr);
 	cmd->frame_len = frame->len;
