ping: convert to RCU lookups, get rid of rwlock

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Eric Dumazet <edumazet@google.com>
commit dbca1596bbb08318f5e3b3b99f8ca0a0d3830a65
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/dbca1596.failed

Using rwlock in networking code is extremely risky.
writers can starve if enough readers are constantly
grabing the rwlock.

I thought rwlock were at fault and sent this patch:

https://lkml.org/lkml/2022/6/17/272

But Peter and Linus essentially told me rwlock had to be unfair.

We need to get rid of rwlock in networking code.

Fixes: c319b4d76b9e ("net: ipv4: add IPPROTO_ICMP socket kind")
	Signed-off-by: Eric Dumazet <edumazet@google.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit dbca1596bbb08318f5e3b3b99f8ca0a0d3830a65)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/ipv4/ping.c
diff --cc net/ipv4/ping.c
index 4bc0ed5f26bd,3d6fc6d841b8..000000000000
--- a/net/ipv4/ping.c
+++ b/net/ipv4/ping.c
@@@ -1000,15 -987,16 +997,22 @@@ bool ping_rcv(struct sk_buff *skb
  		struct sk_buff *skb2 = skb_clone(skb, GFP_ATOMIC);
  
  		pr_debug("rcv on socket %p\n", sk);
++<<<<<<< HEAD
 +		if (skb2 && !ping_queue_rcv_skb(sk, skb2))
 +			rc = true;
 +		sock_put(sk);
++=======
+ 		if (skb2)
+ 			reason = __ping_queue_rcv_skb(sk, skb2);
+ 		else
+ 			reason = SKB_DROP_REASON_NOMEM;
++>>>>>>> dbca1596bbb0 (ping: convert to RCU lookups, get rid of rwlock)
  	}
  
 -	if (reason)
 +	if (!rc)
  		pr_debug("no socket, dropping\n");
  
 -	return reason;
 +	return rc;
  }
  EXPORT_SYMBOL_GPL(ping_rcv);
  
* Unmerged path net/ipv4/ping.c
