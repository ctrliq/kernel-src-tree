s390/dasd: add device ping attribute

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-448.el8
commit-author Stefan Haberland <sth@linux.ibm.com>
commit 32ff8ce08b47a5fe64ef9827443ba6cc49a659c8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-448.el8/32ff8ce0.failed

Add a function to check if a device is accessible.
This makes mostly sense for copy pair secondary devices but it will work
for all devices.

The sysfs attribute ping is a write only attribute and will issue a NOP
CCW to the device.
In case of success it will return zero. If the device is not accessible
it will return an error code.

	Signed-off-by: Stefan Haberland <sth@linux.ibm.com>
	Reviewed-by: Jan Hoeppner <hoeppner@linux.ibm.com>
Link: https://lore.kernel.org/r/20220920192616.808070-8-sth@linux.ibm.com
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit 32ff8ce08b47a5fe64ef9827443ba6cc49a659c8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/s390/block/dasd_eckd.c
#	drivers/s390/block/dasd_int.h
diff --cc drivers/s390/block/dasd_eckd.c
index 0181191630d1,95b0cd071cad..000000000000
--- a/drivers/s390/block/dasd_eckd.c
+++ b/drivers/s390/block/dasd_eckd.c
@@@ -6907,6 -6941,8 +6950,11 @@@ static struct dasd_discipline dasd_eckd
  	.ese_read = dasd_eckd_ese_read,
  	.pprc_status = dasd_eckd_query_pprc_status,
  	.pprc_enabled = dasd_eckd_pprc_enabled,
++<<<<<<< HEAD
++=======
+ 	.copy_pair_swap = dasd_eckd_copy_pair_swap,
+ 	.device_ping = dasd_eckd_device_ping,
++>>>>>>> 32ff8ce08b47 (s390/dasd: add device ping attribute)
  };
  
  static int __init
diff --cc drivers/s390/block/dasd_int.h
index 6d3da8826fbf,c7223c4eba52..000000000000
--- a/drivers/s390/block/dasd_int.h
+++ b/drivers/s390/block/dasd_int.h
@@@ -443,6 -438,8 +443,11 @@@ struct dasd_discipline 
  	int (*ese_read)(struct dasd_ccw_req *, struct irb *);
  	int (*pprc_status)(struct dasd_device *, struct	dasd_pprc_data_sc4 *);
  	bool (*pprc_enabled)(struct dasd_device *);
++<<<<<<< HEAD
++=======
+ 	int (*copy_pair_swap)(struct dasd_device *, char *, char *);
+ 	int (*device_ping)(struct dasd_device *);
++>>>>>>> 32ff8ce08b47 (s390/dasd: add device ping attribute)
  };
  
  extern struct dasd_discipline *dasd_diag_discipline_pointer;
diff --git a/drivers/s390/block/dasd_devmap.c b/drivers/s390/block/dasd_devmap.c
index d163f59f35c2..f3d8110998eb 100644
--- a/drivers/s390/block/dasd_devmap.c
+++ b/drivers/s390/block/dasd_devmap.c
@@ -2233,6 +2233,40 @@ dasd_copy_role_show(struct device *dev,
 }
 static DEVICE_ATTR(copy_role, 0444, dasd_copy_role_show, NULL);
 
+static ssize_t dasd_device_ping(struct device *dev,
+				struct device_attribute *attr,
+				const char *buf, size_t count)
+{
+	struct dasd_device *device;
+	size_t rc;
+
+	device = dasd_device_from_cdev(to_ccwdev(dev));
+	if (IS_ERR(device))
+		return -ENODEV;
+
+	/*
+	 * do not try during offline processing
+	 * early check only
+	 * the sleep_on function itself checks for offline
+	 * processing again
+	 */
+	if (test_bit(DASD_FLAG_OFFLINE, &device->flags)) {
+		rc = -EBUSY;
+		goto out;
+	}
+	if (!device->discipline || !device->discipline->device_ping) {
+		rc = -EOPNOTSUPP;
+		goto out;
+	}
+	rc = device->discipline->device_ping(device);
+	if (!rc)
+		rc = count;
+out:
+	dasd_put_device(device);
+	return rc;
+}
+static DEVICE_ATTR(ping, 0200, NULL, dasd_device_ping);
+
 #define DASD_DEFINE_ATTR(_name, _func)					\
 static ssize_t dasd_##_name##_show(struct device *dev,			\
 				   struct device_attribute *attr,	\
@@ -2291,6 +2325,7 @@ static struct attribute * dasd_attrs[] = {
 	&dev_attr_fc_security.attr,
 	&dev_attr_copy_pair.attr,
 	&dev_attr_copy_role.attr,
+	&dev_attr_ping.attr,
 	NULL,
 };
 
* Unmerged path drivers/s390/block/dasd_eckd.c
diff --git a/drivers/s390/block/dasd_eckd.h b/drivers/s390/block/dasd_eckd.h
index 67f2d9ccd123..8eb4f5b3f076 100644
--- a/drivers/s390/block/dasd_eckd.h
+++ b/drivers/s390/block/dasd_eckd.h
@@ -13,6 +13,7 @@
 /*****************************************************************************
  * SECTION: CCW Definitions
  ****************************************************************************/
+#define DASD_ECKD_CCW_NOP		 0x03
 #define DASD_ECKD_CCW_WRITE		 0x05
 #define DASD_ECKD_CCW_READ		 0x06
 #define DASD_ECKD_CCW_WRITE_HOME_ADDRESS 0x09
* Unmerged path drivers/s390/block/dasd_int.h
