mm/userfaultfd: fix uffd-wp special cases for fork()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-514.el8
commit-author Peter Xu <peterx@redhat.com>
commit 8f34f1eac3820fc2722e5159acceb22545b30b0d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-514.el8/8f34f1ea.failed

We tried to do something similar in b569a1760782 ("userfaultfd: wp: drop
_PAGE_UFFD_WP properly when fork") previously, but it's not doing it all
right..  A few fixes around the code path:

1. We were referencing VM_UFFD_WP vm_flags on the _old_ vma rather
   than the new vma.  That's overlooked in b569a1760782, so it won't work
   as expected.  Thanks to the recent rework on fork code
   (7a4830c380f3a8b3), we can easily get the new vma now, so switch the
   checks to that.

2. Dropping the uffd-wp bit in copy_huge_pmd() could be wrong if the
   huge pmd is a migration huge pmd.  When it happens, instead of using
   pmd_uffd_wp(), we should use pmd_swp_uffd_wp().  The fix is simply to
   handle them separately.

3. Forget to carry over uffd-wp bit for a write migration huge pmd
   entry.  This also happens in copy_huge_pmd(), where we converted a
   write huge migration entry into a read one.

4. In copy_nonpresent_pte(), drop uffd-wp if necessary for swap ptes.

5. In copy_present_page() when COW is enforced when fork(), we also
   need to pass over the uffd-wp bit if VM_UFFD_WP is armed on the new
   vma, and when the pte to be copied has uffd-wp bit set.

Remove the comment in copy_present_pte() about this.  It won't help a huge
lot to only comment there, but comment everywhere would be an overkill.
Let's assume the commit messages would help.

[peterx@redhat.com: fix a few thp pmd missing uffd-wp bit]
  Link: https://lkml.kernel.org/r/20210428225030.9708-4-peterx@redhat.com

Link: https://lkml.kernel.org/r/20210428225030.9708-3-peterx@redhat.com
Fixes: b569a1760782f ("userfaultfd: wp: drop _PAGE_UFFD_WP properly when fork")
	Signed-off-by: Peter Xu <peterx@redhat.com>
	Cc: Jerome Glisse <jglisse@redhat.com>
	Cc: Mike Rapoport <rppt@linux.vnet.ibm.com>
	Cc: Alexander Viro <viro@zeniv.linux.org.uk>
	Cc: Andrea Arcangeli <aarcange@redhat.com>
	Cc: Axel Rasmussen <axelrasmussen@google.com>
	Cc: Brian Geffon <bgeffon@google.com>
	Cc: "Dr . David Alan Gilbert" <dgilbert@redhat.com>
	Cc: Hugh Dickins <hughd@google.com>
	Cc: Joe Perches <joe@perches.com>
	Cc: Kirill A. Shutemov <kirill@shutemov.name>
	Cc: Lokesh Gidra <lokeshgidra@google.com>
	Cc: Mike Kravetz <mike.kravetz@oracle.com>
	Cc: Mina Almasry <almasrymina@google.com>
	Cc: Oliver Upton <oupton@google.com>
	Cc: Shaohua Li <shli@fb.com>
	Cc: Shuah Khan <shuah@kernel.org>
	Cc: Stephen Rothwell <sfr@canb.auug.org.au>
	Cc: Wang Qing <wangqing@vivo.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 8f34f1eac3820fc2722e5159acceb22545b30b0d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/huge_mm.h
#	mm/huge_memory.c
diff --cc include/linux/huge_mm.h
index 6cc2c13015c9,939f21b69ead..000000000000
--- a/include/linux/huge_mm.h
+++ b/include/linux/huge_mm.h
@@@ -7,17 -7,17 +7,28 @@@
  
  #include <linux/fs.h> /* only for vma_is_dax() */
  
++<<<<<<< HEAD
 +extern vm_fault_t do_huge_pmd_anonymous_page(struct vm_fault *vmf);
 +extern int copy_huge_pmd(struct mm_struct *dst_mm, struct mm_struct *src_mm,
 +			 pmd_t *dst_pmd, pmd_t *src_pmd, unsigned long addr,
 +			 struct vm_area_struct *vma);
 +extern void huge_pmd_set_accessed(struct vm_fault *vmf, pmd_t orig_pmd);
 +extern int copy_huge_pud(struct mm_struct *dst_mm, struct mm_struct *src_mm,
 +			 pud_t *dst_pud, pud_t *src_pud, unsigned long addr,
 +			 struct vm_area_struct *vma);
++=======
+ vm_fault_t do_huge_pmd_anonymous_page(struct vm_fault *vmf);
+ int copy_huge_pmd(struct mm_struct *dst_mm, struct mm_struct *src_mm,
+ 		  pmd_t *dst_pmd, pmd_t *src_pmd, unsigned long addr,
+ 		  struct vm_area_struct *dst_vma, struct vm_area_struct *src_vma);
+ void huge_pmd_set_accessed(struct vm_fault *vmf, pmd_t orig_pmd);
+ int copy_huge_pud(struct mm_struct *dst_mm, struct mm_struct *src_mm,
+ 		  pud_t *dst_pud, pud_t *src_pud, unsigned long addr,
+ 		  struct vm_area_struct *vma);
++>>>>>>> 8f34f1eac382 (mm/userfaultfd: fix uffd-wp special cases for fork())
  
  #ifdef CONFIG_HAVE_ARCH_TRANSPARENT_HUGEPAGE_PUD
 -void huge_pud_set_accessed(struct vm_fault *vmf, pud_t orig_pud);
 +extern void huge_pud_set_accessed(struct vm_fault *vmf, pud_t orig_pud);
  #else
  static inline void huge_pud_set_accessed(struct vm_fault *vmf, pud_t orig_pud)
  {
diff --cc mm/huge_memory.c
index 90eefa9de607,40a90ff18180..000000000000
--- a/mm/huge_memory.c
+++ b/mm/huge_memory.c
@@@ -1076,16 -1096,23 +1072,27 @@@ int copy_huge_pmd(struct mm_struct *dst
  	src_page = pmd_page(pmd);
  	VM_BUG_ON_PAGE(!PageHead(src_page), src_page);
  
++<<<<<<< HEAD
 +	get_page(src_page);
 +	if (unlikely(page_try_dup_anon_rmap(src_page, true, vma))) {
 +		/* Page maybe pinned: split and retry the fault on PTEs. */
 +		put_page(src_page);
++=======
+ 	/*
+ 	 * If this page is a potentially pinned page, split and retry the fault
+ 	 * with smaller page size.  Normally this should not happen because the
+ 	 * userspace should use MADV_DONTFORK upon pinned regions.  This is a
+ 	 * best effort that the pinned pages won't be replaced by another
+ 	 * random page during the coming copy-on-write.
+ 	 */
+ 	if (unlikely(page_needs_cow_for_dma(src_vma, src_page))) {
++>>>>>>> 8f34f1eac382 (mm/userfaultfd: fix uffd-wp special cases for fork())
  		pte_free(dst_mm, pgtable);
  		spin_unlock(src_ptl);
  		spin_unlock(dst_ptl);
- 		__split_huge_pmd(vma, src_pmd, addr, false, NULL);
+ 		__split_huge_pmd(src_vma, src_pmd, addr, false, NULL);
  		return -EAGAIN;
  	}
 -
 -	get_page(src_page);
 -	page_dup_rmap(src_page, true);
  	add_mm_counter(dst_mm, MM_ANONPAGES, HPAGE_PMD_NR);
  out_zero_page:
  	mm_inc_nr_ptes(dst_mm);
@@@ -3050,7 -3244,10 +3060,9 @@@ void remove_migration_pmd(struct page_v
  		pmde = pmd_mksoft_dirty(pmde);
  	if (is_write_migration_entry(entry))
  		pmde = maybe_pmd_mkwrite(pmde, vma);
+ 	if (pmd_swp_uffd_wp(*pvmw->pmd))
+ 		pmde = pmd_wrprotect(pmd_mkuffd_wp(pmde));
  
 -	flush_cache_range(vma, mmun_start, mmun_start + HPAGE_PMD_SIZE);
  	if (PageAnon(new))
  		page_add_anon_rmap(new, vma, mmun_start, true);
  	else
* Unmerged path include/linux/huge_mm.h
diff --git a/include/linux/swapops.h b/include/linux/swapops.h
index f6fe15cb3b1b..9ee3e807ab20 100644
--- a/include/linux/swapops.h
+++ b/include/linux/swapops.h
@@ -245,6 +245,8 @@ static inline swp_entry_t pmd_to_swp_entry(pmd_t pmd)
 
 	if (pmd_swp_soft_dirty(pmd))
 		pmd = pmd_swp_clear_soft_dirty(pmd);
+	if (pmd_swp_uffd_wp(pmd))
+		pmd = pmd_swp_clear_uffd_wp(pmd);
 	arch_entry = __pmd_to_swp_entry(pmd);
 	return swp_entry(__swp_type(arch_entry), __swp_offset(arch_entry));
 }
* Unmerged path mm/huge_memory.c
diff --git a/mm/memory.c b/mm/memory.c
index 1ab44f5e0706..9066475ce7b0 100644
--- a/mm/memory.c
+++ b/mm/memory.c
@@ -676,10 +676,10 @@ struct page *vm_normal_page_pmd(struct vm_area_struct *vma, unsigned long addr,
 
 static unsigned long
 copy_nonpresent_pte(struct mm_struct *dst_mm, struct mm_struct *src_mm,
-		pte_t *dst_pte, pte_t *src_pte, struct vm_area_struct *vma,
-		unsigned long addr, int *rss)
+		pte_t *dst_pte, pte_t *src_pte, struct vm_area_struct *dst_vma,
+		struct vm_area_struct *src_vma, unsigned long addr, int *rss)
 {
-	unsigned long vm_flags = vma->vm_flags;
+	unsigned long vm_flags = dst_vma->vm_flags;
 	pte_t pte = *src_pte;
 	struct page *page;
 	swp_entry_t entry = pte_to_swp_entry(pte);
@@ -749,6 +749,8 @@ copy_nonpresent_pte(struct mm_struct *dst_mm, struct mm_struct *src_mm,
 			set_pte_at(src_mm, addr, src_pte, pte);
 		}
 	}
+	if (!userfaultfd_wp(dst_vma))
+		pte = pte_swp_clear_uffd_wp(pte);
 	set_pte_at(dst_mm, addr, dst_pte, pte);
 	return 0;
 }
@@ -791,6 +793,9 @@ copy_present_page(struct vm_area_struct *dst_vma, struct vm_area_struct *src_vma
 	/* All done, just insert the new page copy in the child */
 	pte = mk_pte(new_page, dst_vma->vm_page_prot);
 	pte = maybe_mkwrite(pte_mkdirty(pte), dst_vma);
+	if (userfaultfd_pte_wp(dst_vma, *src_pte))
+		/* Uffd-wp needs to be delivered to dest pte as well */
+		pte = pte_wrprotect(pte_mkuffd_wp(pte));
 	set_pte_at(dst_vma->vm_mm, addr, dst_pte, pte);
 	return 0;
 }
@@ -848,12 +853,7 @@ copy_present_pte(struct vm_area_struct *dst_vma, struct vm_area_struct *src_vma,
 		pte = pte_mkclean(pte);
 	pte = pte_mkold(pte);
 
-	/*
-	 * Make sure the _PAGE_UFFD_WP bit is cleared if the new VMA
-	 * does not have the VM_UFFD_WP, which means that the uffd
-	 * fork event is not enabled.
-	 */
-	if (!(vm_flags & VM_UFFD_WP))
+	if (!userfaultfd_wp(dst_vma))
 		pte = pte_clear_uffd_wp(pte);
 
 	set_pte_at(dst_vma->vm_mm, addr, dst_pte, pte);
@@ -928,7 +928,8 @@ copy_pte_range(struct vm_area_struct *dst_vma, struct vm_area_struct *src_vma,
 		if (unlikely(!pte_present(*src_pte))) {
 			entry.val = copy_nonpresent_pte(dst_mm, src_mm,
 							dst_pte, src_pte,
-							src_vma, addr, rss);
+							dst_vma, src_vma,
+							addr, rss);
 			if (entry.val)
 				break;
 			progress += 8;
@@ -1005,8 +1006,8 @@ copy_pmd_range(struct vm_area_struct *dst_vma, struct vm_area_struct *src_vma,
 			|| pmd_devmap(*src_pmd)) {
 			int err;
 			VM_BUG_ON_VMA(next-addr != HPAGE_PMD_SIZE, src_vma);
-			err = copy_huge_pmd(dst_mm, src_mm,
-					    dst_pmd, src_pmd, addr, src_vma);
+			err = copy_huge_pmd(dst_mm, src_mm, dst_pmd, src_pmd,
+					    addr, dst_vma, src_vma);
 			if (err == -ENOMEM)
 				return -ENOMEM;
 			if (!err)
