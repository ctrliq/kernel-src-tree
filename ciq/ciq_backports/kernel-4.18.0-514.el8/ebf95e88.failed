s390/ap,zcrypt,vfio: introduce and use ap_queue_status_reg union

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-514.el8
commit-author Harald Freudenberger <freude@linux.ibm.com>
commit ebf95e884694b2c796ecb53d80d2b4cff8990d2f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-514.el8/ebf95e88.failed

Introduce a new ap queue status register wrapper union to access register
wide values. So the inline assembler only sees register wide values but the
surrounding code may use a more structured view of the same value and a
reader of the code (and the compiler) gets a clear understanding about the
mapping between fields and register values.

All the changes to access the ap queue status are local to the inline
functions within ap.h. However, the struct ap_qirq_ctrl has been replaces
by a union for same reason and this needed slight adaptions in the calling
code.

	Suggested-by: Halil Pasic <pasic@linux.ibm.com>
	Suggested-by: Andreas Arnez <arnez@linux.ibm.com>
	Signed-off-by: Harald Freudenberger <freude@linux.ibm.com>
	Acked-by: Heiko Carstens <hca@linux.ibm.com>
	Reviewed-by: Holger Dengler <dengler@linux.ibm.com>
	Signed-off-by: Heiko Carstens <hca@linux.ibm.com>
(cherry picked from commit ebf95e884694b2c796ecb53d80d2b4cff8990d2f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/s390/include/asm/ap.h
diff --cc arch/s390/include/asm/ap.h
index 11c6081b1133,c699f251a464..000000000000
--- a/arch/s390/include/asm/ap.h
+++ b/arch/s390/include/asm/ap.h
@@@ -231,21 -248,14 +247,30 @@@ union ap_qirq_ctrl 
   * Returns AP queue status.
   */
  static inline struct ap_queue_status ap_aqic(ap_qid_t qid,
++<<<<<<< HEAD
 +					     struct ap_qirq_ctrl qirqctrl,
 +					     void *ind)
 +{
 +	unsigned long reg0 = qid | (3UL << 24);  /* fc 3UL is AQIC */
 +	union {
 +		unsigned long value;
 +		struct ap_qirq_ctrl qirqctrl;
 +		struct {
 +			u32 _pad;
 +			struct ap_queue_status status;
 +		};
 +	} reg1;
 +	unsigned long reg2 = virt_to_phys(ind);
++=======
+ 					     union ap_qirq_ctrl qirqctrl,
+ 					     phys_addr_t pa_ind)
+ {
+ 	unsigned long reg0 = qid | (3UL << 24);  /* fc 3UL is AQIC */
+ 	union ap_queue_status_reg reg1;
+ 	unsigned long reg2 = pa_ind;
++>>>>>>> ebf95e884694 (s390/ap,zcrypt,vfio: introduce and use ap_queue_status_reg union)
  
- 	reg1.qirqctrl = qirqctrl;
+ 	reg1.value = qirqctrl.value;
  
  	asm volatile(
  		"	lgr	0,%[reg0]\n"		/* qid param into gr0 */
* Unmerged path arch/s390/include/asm/ap.h
diff --git a/drivers/s390/crypto/ap_queue.c b/drivers/s390/crypto/ap_queue.c
index 1d9d43cfe48b..17999ece291a 100644
--- a/drivers/s390/crypto/ap_queue.c
+++ b/drivers/s390/crypto/ap_queue.c
@@ -29,8 +29,8 @@ static void __ap_flush_queue(struct ap_queue *aq);
  */
 static int ap_queue_enable_irq(struct ap_queue *aq, void *ind)
 {
+	union ap_qirq_ctrl qirqctrl = { .value = 0 };
 	struct ap_queue_status status;
-	struct ap_qirq_ctrl qirqctrl = { 0 };
 
 	qirqctrl.ir = 1;
 	qirqctrl.isc = AP_ISC;
diff --git a/drivers/s390/crypto/vfio_ap_ops.c b/drivers/s390/crypto/vfio_ap_ops.c
index e20e48f090f1..bb91233a25e3 100644
--- a/drivers/s390/crypto/vfio_ap_ops.c
+++ b/drivers/s390/crypto/vfio_ap_ops.c
@@ -296,7 +296,7 @@ static void vfio_ap_free_aqic_resources(struct vfio_ap_queue *q)
  */
 static struct ap_queue_status vfio_ap_irq_disable(struct vfio_ap_queue *q)
 {
-	struct ap_qirq_ctrl aqic_gisa = {};
+	union ap_qirq_ctrl aqic_gisa = { .value = 0 };
 	struct ap_queue_status status;
 	int retries = 5;
 
@@ -353,7 +353,7 @@ static struct ap_queue_status vfio_ap_irq_enable(struct vfio_ap_queue *q,
 						 int isc,
 						 unsigned long nib)
 {
-	struct ap_qirq_ctrl aqic_gisa = {};
+	union ap_qirq_ctrl aqic_gisa = { .value = 0 };
 	struct ap_queue_status status = {};
 	struct kvm_s390_gisa *gisa;
 	struct kvm *kvm;
