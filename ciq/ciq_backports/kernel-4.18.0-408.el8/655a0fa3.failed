x86/coco: Explicitly declare type of confidential computing platform

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-408.el8
commit-author Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
commit 655a0fa34b4f7ac6e2b1406fab15e52a7b6accb1
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-408.el8/655a0fa3.failed

The kernel derives the confidential computing platform
type it is running as from sme_me_mask on AMD or by using
hv_is_isolation_supported() on HyperV isolation VMs. This detection
process will be more complicated as more platforms get added.

Declare a confidential computing vendor variable explicitly and set it
via cc_set_vendor() on the respective platform.

  [ bp: Massage commit message, fixup HyperV check. ]

	Signed-off-by: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
	Signed-off-by: Borislav Petkov <bp@suse.de>
	Reviewed-by: Tom Lendacky <thomas.lendacky@amd.com>
Link: https://lore.kernel.org/r/20220222185740.26228-4-kirill.shutemov@linux.intel.com
(cherry picked from commit 655a0fa34b4f7ac6e2b1406fab15e52a7b6accb1)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/coco/core.c
#	arch/x86/kernel/cpu/mshyperv.c
diff --cc arch/x86/kernel/cpu/mshyperv.c
index e9dcffc20d41,e0a572472052..000000000000
--- a/arch/x86/kernel/cpu/mshyperv.c
+++ b/arch/x86/kernel/cpu/mshyperv.c
@@@ -34,7 -32,8 +34,12 @@@
  #include <asm/reboot.h>
  #include <asm/nmi.h>
  #include <clocksource/hyperv_timer.h>
++<<<<<<< HEAD
 +#include <linux/cpuhotplug.h>
++=======
+ #include <asm/numa.h>
+ #include <asm/coco.h>
++>>>>>>> 655a0fa34b4f (x86/coco: Explicitly declare type of confidential computing platform)
  
  /* Is Linux running as the root partition? */
  bool hv_root_partition;
@@@ -310,6 -330,26 +315,29 @@@ static void __init ms_hyperv_init_platf
  
  		pr_info("Hyper-V: Isolation Config: Group A 0x%x, Group B 0x%x\n",
  			ms_hyperv.isolation_config_a, ms_hyperv.isolation_config_b);
++<<<<<<< HEAD
++=======
+ 
+ 		if (hv_get_isolation_type() == HV_ISOLATION_TYPE_SNP) {
+ 			static_branch_enable(&isolation_type_snp);
+ #ifdef CONFIG_SWIOTLB
+ 			swiotlb_unencrypted_base = ms_hyperv.shared_gpa_boundary;
+ #endif
+ 		}
+ 
+ #ifdef CONFIG_SWIOTLB
+ 		/*
+ 		 * Enable swiotlb force mode in Isolation VM to
+ 		 * use swiotlb bounce buffer for dma transaction.
+ 		 */
+ 		swiotlb_force = SWIOTLB_FORCE;
+ #endif
+ 		/* Isolation VMs are unenlightened SEV-based VMs, thus this check: */
+ 		if (IS_ENABLED(CONFIG_AMD_MEM_ENCRYPT)) {
+ 			if (hv_get_isolation_type() != HV_ISOLATION_TYPE_NONE)
+ 				cc_set_vendor(CC_VENDOR_HYPERV);
+ 		}
++>>>>>>> 655a0fa34b4f (x86/coco: Explicitly declare type of confidential computing platform)
  	}
  
  	if (hv_max_functions_eax >= HYPERV_CPUID_NESTED_FEATURES) {
* Unmerged path arch/x86/coco/core.c
* Unmerged path arch/x86/coco/core.c
diff --git a/arch/x86/include/asm/coco.h b/arch/x86/include/asm/coco.h
new file mode 100644
index 000000000000..e49f9ddb6ae6
--- /dev/null
+++ b/arch/x86/include/asm/coco.h
@@ -0,0 +1,14 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+#ifndef _ASM_X86_COCO_H
+#define _ASM_X86_COCO_H
+
+enum cc_vendor {
+	CC_VENDOR_NONE,
+	CC_VENDOR_AMD,
+	CC_VENDOR_HYPERV,
+	CC_VENDOR_INTEL,
+};
+
+void cc_set_vendor(enum cc_vendor v);
+
+#endif /* _ASM_X86_COCO_H */
* Unmerged path arch/x86/kernel/cpu/mshyperv.c
diff --git a/arch/x86/mm/mem_encrypt_identity.c b/arch/x86/mm/mem_encrypt_identity.c
index e97c91e2d131..b53d908b9975 100644
--- a/arch/x86/mm/mem_encrypt_identity.c
+++ b/arch/x86/mm/mem_encrypt_identity.c
@@ -36,6 +36,7 @@
 #include <asm/setup.h>
 #include <asm/sections.h>
 #include <asm/cmdline.h>
+#include <asm/coco.h>
 
 #include "mm_internal.h"
 
@@ -547,8 +548,7 @@ void __init sme_enable(struct boot_params *bp)
 
 		/* SEV state cannot be controlled by a command line option */
 		sme_me_mask = me_mask;
-		physical_mask &= ~sme_me_mask;
-		return;
+		goto out;
 	}
 
 	/*
@@ -582,6 +582,9 @@ void __init sme_enable(struct boot_params *bp)
 		sme_me_mask = 0;
 	else
 		sme_me_mask = active_by_default ? me_mask : 0;
-
-	physical_mask &= ~sme_me_mask;
+out:
+	if (sme_me_mask) {
+		physical_mask &= ~sme_me_mask;
+		cc_set_vendor(CC_VENDOR_AMD);
+	}
 }
