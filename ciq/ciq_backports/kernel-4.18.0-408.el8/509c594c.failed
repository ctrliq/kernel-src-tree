KVM: arm64: Use "new" memslot instead of userspace memory region

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-408.el8
commit-author Sean Christopherson <seanjc@google.com>
commit 509c594ca2dc8828b7b5d7b33192384741567cdf
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-408.el8/509c594c.failed

Get the slot ID, hva, etc... from the "new" memslot instead of the
userspace memory region when preparing/committing a memory region.  This
will allow a future commit to drop @mem from the prepare/commit hooks
once all architectures convert to using "new".

Opportunistically wait to get the hva begin+end until after filtering out
the DELETE case in anticipation of a future commit passing NULL for @new
when deleting a memslot.

	Signed-off-by: Sean Christopherson <seanjc@google.com>
	Signed-off-by: Maciej S. Szmigiero <maciej.szmigiero@oracle.com>
Message-Id: <c019d00c2531520c52e0b52dfda1be5aa898103c.1638817639.git.maciej.szmigiero@oracle.com>
(cherry picked from commit 509c594ca2dc8828b7b5d7b33192384741567cdf)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/arm64/kvm/mmu.c
diff --cc arch/arm64/kvm/mmu.c
index 60713ffdcad4,dd95350ea15d..000000000000
--- a/arch/arm64/kvm/mmu.c
+++ b/arch/arm64/kvm/mmu.c
@@@ -2291,13 -1486,12 +2291,17 @@@ void kvm_arch_commit_memory_region(stru
  }
  
  int kvm_arch_prepare_memory_region(struct kvm *kvm,
 +				   struct kvm_memory_slot *memslot,
  				   const struct kvm_userspace_memory_region *mem,
 -				   const struct kvm_memory_slot *old,
 -				   struct kvm_memory_slot *new,
  				   enum kvm_mr_change change)
  {
++<<<<<<< HEAD
 +	hva_t hva = mem->userspace_addr;
 +	hva_t reg_end = hva + mem->memory_size;
 +	bool writable = !(mem->flags & KVM_MEM_READONLY);
++=======
+ 	hva_t hva, reg_end;
++>>>>>>> 509c594ca2dc (KVM: arm64: Use "new" memslot instead of userspace memory region)
  	int ret = 0;
  
  	if (change != KVM_MR_CREATE && change != KVM_MR_MOVE &&
@@@ -2308,9 -1502,12 +2312,12 @@@
  	 * Prevent userspace from creating a memory region outside of the IPA
  	 * space addressable by the KVM guest IPA space.
  	 */
 -	if ((new->base_gfn + new->npages) > (kvm_phys_size(kvm) >> PAGE_SHIFT))
 +	if ((memslot->base_gfn + memslot->npages) > (kvm_phys_size(kvm) >> PAGE_SHIFT))
  		return -EFAULT;
  
+ 	hva = new->userspace_addr;
+ 	reg_end = hva + (new->npages << PAGE_SHIFT);
+ 
  	mmap_read_lock(current->mm);
  	/*
  	 * A memory region could potentially cover multiple VMAs, and any holes
* Unmerged path arch/arm64/kvm/mmu.c
