KVM: selftests: Use shorthand local var to access struct perf_tests_args

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-408.el8
commit-author Sean Christopherson <seanjc@google.com>
commit b65e1051e489be4fe783cb14f1cd33235a0f9803
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-408.el8/b65e1051.failed

Use 'pta' as a local pointer to the global perf_tests_args in order to
shorten line lengths and make the code borderline readable.

No functional change intended.

	Signed-off-by: Sean Christopherson <seanjc@google.com>
	Reviewed-by: Ben Gardon <bgardon@google.com>
	Signed-off-by: David Matlack <dmatlack@google.com>
Message-Id: <20211111000310.1435032-6-dmatlack@google.com>
	Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
(cherry picked from commit b65e1051e489be4fe783cb14f1cd33235a0f9803)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/testing/selftests/kvm/lib/perf_test_util.c
diff --cc tools/testing/selftests/kvm/lib/perf_test_util.c
index 0ef80dbdc116,ccdc950c829e..000000000000
--- a/tools/testing/selftests/kvm/lib/perf_test_util.c
+++ b/tools/testing/selftests/kvm/lib/perf_test_util.c
@@@ -53,21 -54,27 +54,31 @@@ struct kvm_vm *perf_test_create_vm(enu
  				   uint64_t vcpu_memory_bytes, int slots,
  				   enum vm_mem_backing_src_type backing_src)
  {
+ 	struct perf_test_args *pta = &perf_test_args;
  	struct kvm_vm *vm;
  	uint64_t guest_num_pages;
 -	uint64_t backing_src_pagesz = get_backing_src_pagesz(backing_src);
  	int i;
  
  	pr_info("Testing guest mode: %s\n", vm_guest_mode_string(mode));
  
++<<<<<<< HEAD
 +	perf_test_args.host_page_size = getpagesize();
 +	perf_test_args.guest_page_size = vm_guest_mode_params[mode].page_size;
++=======
+ 	pta->host_page_size = getpagesize();
+ 	/*
+ 	 * Snapshot the non-huge page size.  This is used by the guest code to
+ 	 * access/dirty pages at the logging granularity.
+ 	 */
+ 	pta->guest_page_size = vm_guest_mode_params[mode].page_size;
++>>>>>>> b65e1051e489 (KVM: selftests: Use shorthand local var to access struct perf_tests_args)
  
  	guest_num_pages = vm_adjust_num_guest_pages(mode,
- 				(vcpus * vcpu_memory_bytes) / perf_test_args.guest_page_size);
+ 				(vcpus * vcpu_memory_bytes) / pta->guest_page_size);
  
- 	TEST_ASSERT(vcpu_memory_bytes % perf_test_args.host_page_size == 0,
+ 	TEST_ASSERT(vcpu_memory_bytes % pta->host_page_size == 0,
  		    "Guest memory size is not host page size aligned.");
- 	TEST_ASSERT(vcpu_memory_bytes % perf_test_args.guest_page_size == 0,
+ 	TEST_ASSERT(vcpu_memory_bytes % pta->guest_page_size == 0,
  		    "Guest memory size is not guest page size aligned.");
  	TEST_ASSERT(guest_num_pages % slots == 0,
  		    "Guest memory cannot be evenly divided into %d slots.",
@@@ -91,11 -98,11 +102,16 @@@
  		    vcpu_memory_bytes);
  
  	guest_test_phys_mem = (vm_get_max_gfn(vm) - guest_num_pages) *
++<<<<<<< HEAD
 +			      perf_test_args.guest_page_size;
 +	guest_test_phys_mem &= ~(perf_test_args.host_page_size - 1);
++=======
+ 			      pta->guest_page_size;
+ 	guest_test_phys_mem = align_down(guest_test_phys_mem, backing_src_pagesz);
++>>>>>>> b65e1051e489 (KVM: selftests: Use shorthand local var to access struct perf_tests_args)
  #ifdef __s390x__
  	/* Align to 1M (segment size) */
 -	guest_test_phys_mem = align_down(guest_test_phys_mem, 1 << 20);
 +	guest_test_phys_mem &= ~((1 << 20) - 1);
  #endif
  	pr_info("guest physical test memory offset: 0x%lx\n", guest_test_phys_mem);
  
* Unmerged path tools/testing/selftests/kvm/lib/perf_test_util.c
