s390/pci: expose UID uniqueness guarantee

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-408.el8
commit-author Niklas Schnelle <schnelle@linux.ibm.com>
commit 408f2c9c15682fc21b645fdec1f726492e235c4b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-408.el8/408f2c9c.failed

On s390 each PCI device has a user-defined ID (UID) exposed under
/sys/bus/pci/devices/<dev>/uid. This ID was designed to serve as the PCI
device's primary index and to match the device within Linux to the
device configured in the hypervisor. To serve as a primary identifier
the UID must be unique within the Linux instance, this is guaranteed by
the platform if and only if the UID Uniqueness Checking flag is set
within the CLP List PCI Functions response.

While the UID has been exposed to userspace since commit ac4995b9d570
("s390/pci: add some new arch specific pci attributes") whether or not
the platform guarantees its uniqueness for the lifetime of the Linux
instance while defined is not visible from userspace. Remedy this by
exposing this as a per device attribute at

/sys/bus/pci/devices/<dev>/uid_is_unique

Keeping this a per device attribute allows for maximum flexibility if we
ever end up with some devices not having a UID or not enjoying the
guaranteed uniqueness.

	Signed-off-by: Niklas Schnelle <schnelle@linux.ibm.com>
	Reviewed-by: Viktor Mihajlovski <mihajlov@linux.ibm.com>
	Signed-off-by: Heiko Carstens <hca@linux.ibm.com>
(cherry picked from commit 408f2c9c15682fc21b645fdec1f726492e235c4b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	Documentation/s390/pci.rst
diff --cc Documentation/s390/pci.rst
index 75e043d4da85,8157f0cddbc2..000000000000
--- a/Documentation/s390/pci.rst
+++ b/Documentation/s390/pci.rst
@@@ -47,8 -49,9 +47,14 @@@ Specific entries, or entries specificit
  
  * /sys/bus/pci/slots/XXXXXXXX
  
++<<<<<<< HEAD
 +  The slot entries are setup using the FID (Function Identifier) of the
 +  PCI function.
++=======
+   The slot entries are set up using the function identifier (FID) of the
+   PCI function. The format depicted as XXXXXXXX above is 8 hexadecimal digits
+   with 0 padding and lower case hexadecimal digitis.
++>>>>>>> 408f2c9c1568 (s390/pci: expose UID uniqueness guarantee)
  
    - /sys/bus/pci/slots/XXXXXXXX/power
  
@@@ -87,13 -89,20 +93,25 @@@
      is attached to.
  
    - uid
++<<<<<<< HEAD
 +    The UID, Unique Identifier is defined when configuring a LPAR and is
 +    unique inside an LPAR.
++=======
+     The user identifier (UID) may be defined as part of the machine
+     configuration or the z/VM or KVM guest configuration. If the accompanying
+     uid_is_unique attribute is 1 the platform guarantees that the UID is unique
+     within that instance and no devices with the same UID can be attached
+     during the lifetime of the system.
+ 
+   - uid_is_unique
+     Indicates whether the user identifier (UID) is guaranteed to be and remain
+     unique within this Linux instance.
++>>>>>>> 408f2c9c1568 (s390/pci: expose UID uniqueness guarantee)
  
    - pfip/segmentX
 -    The segments determine the isolation of a function.
 -    They correspond to the physical path to the function.
 -    The more the segments are different, the more the functions are isolated.
 +    The segments are used to determine the isolation of a function.
 +    They corresponds to the physical path to the function.
 +    The more the segment are different the more the functions are isolated.
  
  Enumeration and hotplug
  =======================
* Unmerged path Documentation/s390/pci.rst
diff --git a/arch/s390/pci/pci_sysfs.c b/arch/s390/pci/pci_sysfs.c
index 5c028bee91b9..e14d346dafd6 100644
--- a/arch/s390/pci/pci_sysfs.c
+++ b/arch/s390/pci/pci_sysfs.c
@@ -131,6 +131,13 @@ static ssize_t report_error_write(struct file *filp, struct kobject *kobj,
 }
 static BIN_ATTR(report_error, S_IWUSR, NULL, report_error_write, PAGE_SIZE);
 
+static ssize_t uid_is_unique_show(struct device *dev,
+				  struct device_attribute *attr, char *buf)
+{
+	return sysfs_emit(buf, "%d\n", zpci_unique_uid ? 1 : 0);
+}
+static DEVICE_ATTR_RO(uid_is_unique);
+
 static struct bin_attribute *zpci_bin_attrs[] = {
 	&bin_attr_util_string,
 	&bin_attr_report_error,
@@ -148,8 +155,10 @@ static struct attribute *zpci_dev_attrs[] = {
 	&dev_attr_uid.attr,
 	&dev_attr_recover.attr,
 	&dev_attr_mio_enabled.attr,
+	&dev_attr_uid_is_unique.attr,
 	NULL,
 };
+
 static struct attribute_group zpci_attr_group = {
 	.attrs = zpci_dev_attrs,
 	.bin_attrs = zpci_bin_attrs,
