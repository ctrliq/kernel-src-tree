bpf, devmap: Remove drops variable from bq_xmit_all()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-408.el8
commit-author Hangbin Liu <liuhangbin@gmail.com>
commit e8e0f0f484780d7b90a63ea50020ac4bb027178d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-408.el8/e8e0f0f4.failed

As Colin pointed out, the first drops assignment after declaration will
be overwritten by the second drops assignment before using, which makes
it useless.

Since the drops variable will be used only once. Just remove it and
use "cnt - sent" in trace_xdp_devmap_xmit().

Fixes: cb261b594b41 ("bpf: Run devmap xdp_prog on flush instead of bulk enqueue")
	Reported-by: Colin Ian King <colin.king@canonical.com>
	Signed-off-by: Hangbin Liu <liuhangbin@gmail.com>
	Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
	Acked-by: John Fastabend <john.fastabend@gmail.com>
Link: https://lore.kernel.org/bpf/20210528024356.24333-1-liuhangbin@gmail.com
(cherry picked from commit e8e0f0f484780d7b90a63ea50020ac4bb027178d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/bpf/devmap.c
diff --cc kernel/bpf/devmap.c
index 4f59de11a612,2a75e6c2d27d..000000000000
--- a/kernel/bpf/devmap.c
+++ b/kernel/bpf/devmap.c
@@@ -338,19 -331,66 +338,35 @@@ bool dev_map_can_have_prog(struct bpf_m
  static void bq_xmit_all(struct xdp_dev_bulk_queue *bq, u32 flags)
  {
  	struct net_device *dev = bq->dev;
++<<<<<<< HEAD
 +	int sent = 0, err = 0;
++=======
+ 	unsigned int cnt = bq->count;
+ 	int sent = 0, err = 0;
+ 	int to_send = cnt;
++>>>>>>> e8e0f0f48478 (bpf, devmap: Remove drops variable from bq_xmit_all())
  	int i;
  
 -	if (unlikely(!cnt))
 +	if (unlikely(!bq->count))
  		return;
  
 -	for (i = 0; i < cnt; i++) {
 +	for (i = 0; i < bq->count; i++) {
  		struct xdp_frame *xdpf = bq->q[i];
  
  		prefetch(xdpf);
  	}
  
++<<<<<<< HEAD
 +	sent = dev->netdev_ops->ndo_xdp_xmit(dev, bq->count, bq->q, flags);
++=======
+ 	if (bq->xdp_prog) {
+ 		to_send = dev_map_bpf_prog_run(bq->xdp_prog, bq->q, cnt, dev);
+ 		if (!to_send)
+ 			goto out;
+ 	}
+ 
+ 	sent = dev->netdev_ops->ndo_xdp_xmit(dev, to_send, bq->q, flags);
++>>>>>>> e8e0f0f48478 (bpf, devmap: Remove drops variable from bq_xmit_all())
  	if (sent < 0) {
  		/* If ndo_xdp_xmit fails with an errno, no frames have
  		 * been xmit'ed.
@@@ -362,13 -402,12 +378,19 @@@
  	/* If not all frames have been transmitted, it is our
  	 * responsibility to free them
  	 */
 -	for (i = sent; unlikely(i < to_send); i++)
 +	for (i = sent; unlikely(i < bq->count); i++)
  		xdp_return_frame_rx_napi(bq->q[i]);
  
++<<<<<<< HEAD
 +	trace_xdp_devmap_xmit(bq->dev_rx, dev, sent, bq->count - sent, err);
 +	bq->dev_rx = NULL;
 +	bq->count = 0;
 +	__list_del_clearprev(&bq->flush_node);
++=======
+ out:
+ 	bq->count = 0;
+ 	trace_xdp_devmap_xmit(bq->dev_rx, dev, sent, cnt - sent, err);
++>>>>>>> e8e0f0f48478 (bpf, devmap: Remove drops variable from bq_xmit_all())
  }
  
  /* __dev_flush is called from xdp_do_flush() which _must_ be signaled
* Unmerged path kernel/bpf/devmap.c
