cpupower: Add the function to check AMD P-State enabled

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-408.el8
commit-author Huang Rui <ray.huang@amd.com>
commit 46c273a0958274f1e1e69f3540ae827a92e0660f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-408.el8/46c273a0.failed

The processor with AMD P-State function also supports legacy ACPI
hardware P-States feature as well. Once driver sets AMD P-State eanbled,
the processor will respond the finer grain AMD P-State feature instead of
legacy ACPI P-States. So it introduces the cpupower_amd_pstate_enabled()
to check whether the current kernel enables AMD P-State or AMD CPUFreq
module.

	Reviewed-by: Shuah Khan <skhan@linuxfoundation.org>
	Signed-off-by: Huang Rui <ray.huang@amd.com>
	Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>
(cherry picked from commit 46c273a0958274f1e1e69f3540ae827a92e0660f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/power/cpupower/utils/helpers/misc.c
diff --cc tools/power/cpupower/utils/helpers/misc.c
index 24f8bca5f1ee,0c483cdefcc2..000000000000
--- a/tools/power/cpupower/utils/helpers/misc.c
+++ b/tools/power/cpupower/utils/helpers/misc.c
@@@ -1,9 -1,13 +1,15 @@@
  // SPDX-License-Identifier: GPL-2.0
  
  #include <stdio.h>
 -#include <errno.h>
  #include <stdlib.h>
+ #include <string.h>
  
  #include "helpers/helpers.h"
++<<<<<<< HEAD
++=======
+ #include "helpers/sysfs.h"
+ #include "cpufreq.h"
++>>>>>>> 46c273a09582 (cpupower: Add the function to check AMD P-State enabled)
  
  #if defined(__i386__) || defined(__x86_64__)
  
@@@ -40,6 -46,61 +46,64 @@@ int cpufreq_has_boost_support(unsigned 
  	return 0;
  }
  
++<<<<<<< HEAD
++=======
+ int cpupower_intel_get_perf_bias(unsigned int cpu)
+ {
+ 	char linebuf[MAX_LINE_LEN];
+ 	char path[SYSFS_PATH_MAX];
+ 	unsigned long val;
+ 	char *endp;
+ 
+ 	if (!(cpupower_cpu_info.caps & CPUPOWER_CAP_PERF_BIAS))
+ 		return -1;
+ 
+ 	snprintf(path, sizeof(path), PATH_TO_CPU "cpu%u/power/energy_perf_bias", cpu);
+ 
+ 	if (cpupower_read_sysfs(path, linebuf, MAX_LINE_LEN) == 0)
+ 		return -1;
+ 
+ 	val = strtol(linebuf, &endp, 0);
+ 	if (endp == linebuf || errno == ERANGE)
+ 		return -1;
+ 
+ 	return val;
+ }
+ 
+ int cpupower_intel_set_perf_bias(unsigned int cpu, unsigned int val)
+ {
+ 	char path[SYSFS_PATH_MAX];
+ 	char linebuf[3] = {};
+ 
+ 	if (!(cpupower_cpu_info.caps & CPUPOWER_CAP_PERF_BIAS))
+ 		return -1;
+ 
+ 	snprintf(path, sizeof(path), PATH_TO_CPU "cpu%u/power/energy_perf_bias", cpu);
+ 	snprintf(linebuf, sizeof(linebuf), "%d", val);
+ 
+ 	if (cpupower_write_sysfs(path, linebuf, 3) <= 0)
+ 		return -1;
+ 
+ 	return 0;
+ }
+ 
+ bool cpupower_amd_pstate_enabled(void)
+ {
+ 	char *driver = cpufreq_get_driver(0);
+ 	bool ret = false;
+ 
+ 	if (!driver)
+ 		return ret;
+ 
+ 	if (!strcmp(driver, "amd-pstate"))
+ 		ret = true;
+ 
+ 	cpufreq_put_driver(driver);
+ 
+ 	return ret;
+ }
+ 
++>>>>>>> 46c273a09582 (cpupower: Add the function to check AMD P-State enabled)
  #endif /* #if defined(__i386__) || defined(__x86_64__) */
  
  /* get_cpustate
diff --git a/tools/power/cpupower/utils/helpers/helpers.h b/tools/power/cpupower/utils/helpers/helpers.h
index 7347dd374daf..9819c494d30b 100644
--- a/tools/power/cpupower/utils/helpers/helpers.h
+++ b/tools/power/cpupower/utils/helpers/helpers.h
@@ -11,6 +11,7 @@
 
 #include <libintl.h>
 #include <locale.h>
+#include <stdbool.h>
 
 #include "helpers/bitmask.h"
 #include <cpupower.h>
@@ -136,6 +137,12 @@ extern int decode_pstates(unsigned int cpu, int boost_states,
 
 extern int cpufreq_has_boost_support(unsigned int cpu, int *support,
 				     int *active, int * states);
+
+/* AMD P-State stuff **************************/
+bool cpupower_amd_pstate_enabled(void);
+
+/* AMD P-State stuff **************************/
+
 /*
  * CPUID functions returning a single datum
  */
@@ -168,6 +175,9 @@ static inline int cpufreq_has_boost_support(unsigned int cpu, int *support,
 					    int *active, int * states)
 { return -1; }
 
+static inline bool cpupower_amd_pstate_enabled(void)
+{ return false; }
+
 /* cpuid and cpuinfo helpers  **************************/
 
 static inline unsigned int cpuid_eax(unsigned int op) { return 0; };
* Unmerged path tools/power/cpupower/utils/helpers/misc.c
