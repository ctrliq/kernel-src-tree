dm: pass dm_io instance to dm_io_acct directly

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-408.el8
commit-author Ming Lei <ming.lei@redhat.com>
commit e6926ad0c988d4cf8d4f4ec77373572831149104
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-408.el8/e6926ad0.failed

All the other 4 parameters are retrieved from the 'dm_io' instance, so
it's not necessary to pass all four to dm_io_acct().

	Signed-off-by: Ming Lei <ming.lei@redhat.com>
	Signed-off-by: Mike Snitzer <snitzer@kernel.org>
(cherry picked from commit e6926ad0c988d4cf8d4f4ec77373572831149104)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/md/dm.c
diff --cc drivers/md/dm.c
index e7cb1b8972bd,2b99ee2a6131..000000000000
--- a/drivers/md/dm.c
+++ b/drivers/md/dm.c
@@@ -584,15 -534,36 +587,41 @@@ static void dm_io_acct(struct dm_io *io
  		bio->bi_iter.bi_size = bi_size;
  }
  
 -static void __dm_start_io_acct(struct dm_io *io)
 +static void start_io_acct(struct dm_io *io)
  {
- 	dm_io_acct(false, io->md, io->orig_bio, io->start_time, &io->stats_aux);
+ 	dm_io_acct(io, false);
  }
  
 -static void dm_start_io_acct(struct dm_io *io, struct bio *clone)
 +static void end_io_acct(struct mapped_device *md, struct bio *bio,
 +			unsigned long start_time, struct dm_stats_aux *stats_aux)
  {
++<<<<<<< HEAD
 +	dm_io_acct(true, md, bio, start_time, stats_aux);
++=======
+ 	/*
+ 	 * Ensure IO accounting is only ever started once.
+ 	 */
+ 	if (dm_io_flagged(io, DM_IO_ACCOUNTED))
+ 		return;
+ 
+ 	/* Expect no possibility for race unless DM_TIO_IS_DUPLICATE_BIO. */
+ 	if (!clone || likely(dm_tio_is_normal(clone_to_tio(clone)))) {
+ 		dm_io_set_flag(io, DM_IO_ACCOUNTED);
+ 	} else {
+ 		unsigned long flags;
+ 		/* Can afford locking given DM_TIO_IS_DUPLICATE_BIO */
+ 		spin_lock_irqsave(&io->lock, flags);
+ 		dm_io_set_flag(io, DM_IO_ACCOUNTED);
+ 		spin_unlock_irqrestore(&io->lock, flags);
+ 	}
+ 
+ 	__dm_start_io_acct(io);
+ }
+ 
+ static void dm_end_io_acct(struct dm_io *io)
+ {
+ 	dm_io_acct(io, true);
++>>>>>>> e6926ad0c988 (dm: pass dm_io instance to dm_io_acct directly)
  }
  
  static struct dm_io *alloc_io(struct mapped_device *md, struct bio *bio)
* Unmerged path drivers/md/dm.c
