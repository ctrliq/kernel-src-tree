s390/qdio: remove remaining tasklet & timer code

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-408.el8
commit-author Julian Wiedmann <jwi@linux.ibm.com>
commit d01fad2c6a3d2b4962b9195747b07535d2eb3e41
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-408.el8/d01fad2c.failed

Both qdio drivers have moved away from using qdio's internal tasklet
and timer mechanisms for Output Queues. Rip out all the leftovers.

	Signed-off-by: Julian Wiedmann <jwi@linux.ibm.com>
	Reviewed-by: Benjamin Block <bblock@linux.ibm.com>
	Signed-off-by: Heiko Carstens <hca@linux.ibm.com>
(cherry picked from commit d01fad2c6a3d2b4962b9195747b07535d2eb3e41)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/s390/cio/qdio.h
#	drivers/s390/cio/qdio_main.c
#	drivers/s390/cio/qdio_setup.c
diff --cc drivers/s390/cio/qdio.h
index bf0d70a41de6,f3aecf1e33e1..000000000000
--- a/drivers/s390/cio/qdio.h
+++ b/drivers/s390/cio/qdio.h
@@@ -360,8 -349,6 +349,11 @@@ void qdio_thinint_exit(void)
  int test_nonshared_ind(struct qdio_irq *);
  
  /* prototypes for setup */
++<<<<<<< HEAD
 +void qdio_outbound_tasklet(unsigned long data);
 +void qdio_outbound_timer(struct timer_list *t);
++=======
++>>>>>>> d01fad2c6a3d (s390/qdio: remove remaining tasklet & timer code)
  void qdio_int_handler(struct ccw_device *cdev, unsigned long intparm,
  		      struct irb *irb);
  int qdio_allocate_qs(struct qdio_irq *irq_ptr, int nr_input_qs,
diff --cc drivers/s390/cio/qdio_main.c
index e363bd0cc5fc,6ed8a04e099b..000000000000
--- a/drivers/s390/cio/qdio_main.c
+++ b/drivers/s390/cio/qdio_main.c
@@@ -644,74 -616,6 +616,77 @@@ retry
  	return cc;
  }
  
++<<<<<<< HEAD
 +void qdio_outbound_tasklet(unsigned long data)
 +{
 +	struct qdio_q *q = (struct qdio_q *)data;
 +	unsigned int start = q->first_to_check;
 +	unsigned int error = 0;
 +	int count;
 +
 +	qperf_inc(q, tasklet_outbound);
 +	WARN_ON_ONCE(atomic_read(&q->nr_buf_used) < 0);
 +
 +	count = get_outbound_buffer_frontier(q, start, &error);
 +	if (count) {
 +		q->first_to_check = add_buf(start, count);
 +
 +		if (q->irq_ptr->state == QDIO_IRQ_STATE_ACTIVE) {
 +			qperf_inc(q, outbound_handler);
 +			DBF_DEV_EVENT(DBF_INFO, q->irq_ptr, "koh: s:%02x c:%02x",
 +				      start, count);
 +
 +			q->handler(q->irq_ptr->cdev, error, q->nr, start,
 +				   count, q->irq_ptr->int_parm);
 +		}
 +	}
 +
 +	if (queue_type(q) == QDIO_ZFCP_QFMT && !pci_out_supported(q->irq_ptr) &&
 +	    !qdio_outbound_q_done(q))
 +		goto sched;
 +
 +	if (q->u.out.pci_out_enabled)
 +		return;
 +
 +	/*
 +	 * Now we know that queue type is either qeth without pci enabled
 +	 * or HiperSockets. Make sure buffer switch from PRIMED to EMPTY
 +	 * is noticed and outbound_handler is called after some time.
 +	 */
 +	if (qdio_outbound_q_done(q))
 +		del_timer_sync(&q->u.out.timer);
 +	else
 +		if (!timer_pending(&q->u.out.timer) &&
 +		    likely(q->irq_ptr->state == QDIO_IRQ_STATE_ACTIVE))
 +			mod_timer(&q->u.out.timer, jiffies + 10 * HZ);
 +	return;
 +
 +sched:
 +	qdio_tasklet_schedule(q);
 +}
 +
 +void qdio_outbound_timer(struct timer_list *t)
 +{
 +	struct qdio_q *q = from_timer(q, t, u.out.timer);
 +
 +	qdio_tasklet_schedule(q);
 +}
 +
 +static inline void qdio_check_outbound_pci_queues(struct qdio_irq *irq)
 +{
 +	struct qdio_q *out;
 +	int i;
 +
 +	if (!pci_out_supported(irq) || !irq->scan_threshold)
 +		return;
 +
 +	for_each_output_queue(irq, out, i)
 +		if (!qdio_outbound_q_done(out))
 +			qdio_tasklet_schedule(out);
 +}
 +
++=======
++>>>>>>> d01fad2c6a3d (s390/qdio: remove remaining tasklet & timer code)
  static inline void qdio_set_state(struct qdio_irq *irq_ptr,
  				  enum qdio_irq_states state)
  {
diff --cc drivers/s390/cio/qdio_setup.c
index bebfef771b19,9ccb1afcda68..000000000000
--- a/drivers/s390/cio/qdio_setup.c
+++ b/drivers/s390/cio/qdio_setup.c
@@@ -267,10 -267,6 +267,13 @@@ static void setup_queues(struct qdio_ir
  		q->is_input_q = 0;
  		setup_storage_lists(q, irq_ptr,
  				    qdio_init->output_sbal_addr_array[i], i);
++<<<<<<< HEAD
 +
 +		tasklet_init(&q->u.out.tasklet, qdio_outbound_tasklet,
 +			     (unsigned long) q);
 +		timer_setup(&q->u.out.timer, qdio_outbound_timer, 0);
++=======
++>>>>>>> d01fad2c6a3d (s390/qdio: remove remaining tasklet & timer code)
  	}
  }
  
diff --git a/arch/s390/include/asm/qdio.h b/arch/s390/include/asm/qdio.h
index cb4f73c7228d..334cf9af2019 100644
--- a/arch/s390/include/asm/qdio.h
+++ b/arch/s390/include/asm/qdio.h
@@ -337,7 +337,6 @@ struct qdio_initialize {
 	qdio_handler_t *input_handler;
 	qdio_handler_t *output_handler;
 	void (*irq_poll)(struct ccw_device *cdev, unsigned long data);
-	unsigned int scan_threshold;
 	unsigned long int_parm;
 	struct qdio_buffer ***input_sbal_addr_array;
 	struct qdio_buffer ***output_sbal_addr_array;
@@ -350,7 +349,6 @@ struct qdio_initialize {
 
 #define QDIO_FLAG_SYNC_INPUT		0x01
 #define QDIO_FLAG_SYNC_OUTPUT		0x02
-#define QDIO_FLAG_PCI_OUT		0x10
 
 int qdio_alloc_buffers(struct qdio_buffer **buf, unsigned int count);
 void qdio_free_buffers(struct qdio_buffer **buf, unsigned int count);
@@ -367,7 +365,6 @@ extern int do_QDIO(struct ccw_device *cdev, unsigned int callflags, int q_nr,
 		   unsigned int bufnr, unsigned int count, struct qaob *aob);
 extern int qdio_start_irq(struct ccw_device *cdev);
 extern int qdio_stop_irq(struct ccw_device *cdev);
-extern int qdio_get_next_buffers(struct ccw_device *, int, int *, int *);
 extern int qdio_inspect_queue(struct ccw_device *cdev, unsigned int nr,
 			      bool is_input, unsigned int *bufnr,
 			      unsigned int *error);
* Unmerged path drivers/s390/cio/qdio.h
diff --git a/drivers/s390/cio/qdio_debug.c b/drivers/s390/cio/qdio_debug.c
index 00384f58f218..4bb7965daa0f 100644
--- a/drivers/s390/cio/qdio_debug.c
+++ b/drivers/s390/cio/qdio_debug.c
@@ -197,8 +197,6 @@ DEFINE_SHOW_ATTRIBUTE(ssqd);
 static char *qperf_names[] = {
 	"Assumed adapter interrupts",
 	"QDIO interrupts",
-	"Requested PCIs",
-	"Outbound tasklet runs",
 	"SIGA read",
 	"SIGA write",
 	"SIGA sync",
@@ -206,7 +204,6 @@ static char *qperf_names[] = {
 	"Inbound stop_polling",
 	"Inbound queue full",
 	"Outbound calls",
-	"Outbound handler",
 	"Outbound queue full",
 	"Outbound fast_requeue",
 	"Outbound target_full",
* Unmerged path drivers/s390/cio/qdio_main.c
* Unmerged path drivers/s390/cio/qdio_setup.c
