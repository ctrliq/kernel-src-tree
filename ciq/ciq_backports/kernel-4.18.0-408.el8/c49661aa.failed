skmsg: Remove unused parameters of sk_msg_wait_data()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-408.el8
commit-author Cong Wang <cong.wang@bytedance.com>
commit c49661aa6f7097047b7e86ad37b1cf308a7a8d4f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-408.el8/c49661aa.failed

'err' and 'flags' are not used, we can just get rid of them.

	Signed-off-by: Cong Wang <cong.wang@bytedance.com>
	Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
	Acked-by: Song Liu <song@kernel.org>
	Acked-by: John Fastabend <john.fastabend@gmail.com>
Link: https://lore.kernel.org/bpf/20210517022348.50555-1-xiyou.wangcong@gmail.com
(cherry picked from commit c49661aa6f7097047b7e86ad37b1cf308a7a8d4f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/skmsg.h
#	net/core/skmsg.c
#	net/ipv4/tcp_bpf.c
#	net/ipv4/udp_bpf.c
diff --cc include/linux/skmsg.h
index 94e2a1f6e58d,fcaa9a7996c8..000000000000
--- a/include/linux/skmsg.h
+++ b/include/linux/skmsg.h
@@@ -126,6 -126,7 +126,10 @@@ int sk_msg_zerocopy_from_iter(struct so
  			      struct sk_msg *msg, u32 bytes);
  int sk_msg_memcopy_from_iter(struct sock *sk, struct iov_iter *from,
  			     struct sk_msg *msg, u32 bytes);
++<<<<<<< HEAD
++=======
+ int sk_msg_wait_data(struct sock *sk, struct sk_psock *psock, long timeo);
++>>>>>>> c49661aa6f70 (skmsg: Remove unused parameters of sk_msg_wait_data())
  int sk_msg_recvmsg(struct sock *sk, struct sk_psock *psock, struct msghdr *msg,
  		   int len, int flags);
  
diff --cc net/core/skmsg.c
index d103447c1e8c,f0b9decdf279..000000000000
--- a/net/core/skmsg.c
+++ b/net/core/skmsg.c
@@@ -399,6 -399,28 +399,31 @@@ out
  }
  EXPORT_SYMBOL_GPL(sk_msg_memcopy_from_iter);
  
++<<<<<<< HEAD
++=======
+ int sk_msg_wait_data(struct sock *sk, struct sk_psock *psock, long timeo)
+ {
+ 	DEFINE_WAIT_FUNC(wait, woken_wake_function);
+ 	int ret = 0;
+ 
+ 	if (sk->sk_shutdown & RCV_SHUTDOWN)
+ 		return 1;
+ 
+ 	if (!timeo)
+ 		return ret;
+ 
+ 	add_wait_queue(sk_sleep(sk), &wait);
+ 	sk_set_bit(SOCKWQ_ASYNC_WAITDATA, sk);
+ 	ret = sk_wait_event(sk, &timeo,
+ 			    !list_empty(&psock->ingress_msg) ||
+ 			    !skb_queue_empty(&sk->sk_receive_queue), &wait);
+ 	sk_clear_bit(SOCKWQ_ASYNC_WAITDATA, sk);
+ 	remove_wait_queue(sk_sleep(sk), &wait);
+ 	return ret;
+ }
+ EXPORT_SYMBOL_GPL(sk_msg_wait_data);
+ 
++>>>>>>> c49661aa6f70 (skmsg: Remove unused parameters of sk_msg_wait_data())
  /* Receive sk_msg from psock->ingress_msg to @msg. */
  int sk_msg_recvmsg(struct sock *sk, struct sk_psock *psock, struct msghdr *msg,
  		   int len, int flags)
diff --cc net/ipv4/tcp_bpf.c
index 736010e1afae,a80de92ea3b6..000000000000
--- a/net/ipv4/tcp_bpf.c
+++ b/net/ipv4/tcp_bpf.c
@@@ -206,11 -184,11 +206,15 @@@ static int tcp_bpf_recvmsg(struct sock 
  msg_bytes_ready:
  	copied = sk_msg_recvmsg(sk, psock, msg, len, flags);
  	if (!copied) {
- 		int data, err = 0;
  		long timeo;
+ 		int data;
  
  		timeo = sock_rcvtimeo(sk, nonblock);
++<<<<<<< HEAD
 +		data = tcp_msg_wait_data(sk, psock, flags, timeo, &err);
++=======
+ 		data = sk_msg_wait_data(sk, psock, timeo);
++>>>>>>> c49661aa6f70 (skmsg: Remove unused parameters of sk_msg_wait_data())
  		if (data) {
  			if (!sk_psock_queue_empty(psock))
  				goto msg_bytes_ready;
diff --cc net/ipv4/udp_bpf.c
index 642ae5982107,b07e4b6dda25..000000000000
--- a/net/ipv4/udp_bpf.c
+++ b/net/ipv4/udp_bpf.c
@@@ -81,13 -43,13 +81,17 @@@ static int udp_bpf_recvmsg(struct sock 
  msg_bytes_ready:
  	copied = sk_msg_recvmsg(sk, psock, msg, len, flags);
  	if (!copied) {
- 		int data, err = 0;
  		long timeo;
+ 		int data;
  
  		timeo = sock_rcvtimeo(sk, nonblock);
++<<<<<<< HEAD
 +		data = udp_msg_wait_data(sk, psock, flags, timeo, &err);
++=======
+ 		data = sk_msg_wait_data(sk, psock, timeo);
++>>>>>>> c49661aa6f70 (skmsg: Remove unused parameters of sk_msg_wait_data())
  		if (data) {
 -			if (!sk_psock_queue_empty(psock))
 +			if (psock_has_data(psock))
  				goto msg_bytes_ready;
  			ret = sk_udp_recvmsg(sk, msg, len, nonblock, flags, addr_len);
  			goto out;
* Unmerged path include/linux/skmsg.h
* Unmerged path net/core/skmsg.c
* Unmerged path net/ipv4/tcp_bpf.c
* Unmerged path net/ipv4/udp_bpf.c
