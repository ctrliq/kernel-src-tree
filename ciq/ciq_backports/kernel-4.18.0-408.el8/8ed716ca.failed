KVM: x86/mmu: Pass parameter flush as false in kvm_tdp_mmu_zap_collapsible_sptes()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-408.el8
commit-author Hou Wenlong <houwenlong93@linux.alibaba.com>
commit 8ed716ca7dc91f058be0ba644a3048667a20db13
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-408.el8/8ed716ca.failed

Since tlb flush has been done for legacy MMU before
kvm_tdp_mmu_zap_collapsible_sptes(), so the parameter flush
should be false for kvm_tdp_mmu_zap_collapsible_sptes().

Fixes: e2209710ccc5d ("KVM: x86/mmu: Skip rmap operations if rmaps not allocated")
	Signed-off-by: Hou Wenlong <houwenlong93@linux.alibaba.com>
Message-Id: <21453a1d2533afb6e59fb6c729af89e771ff2e76.1637140154.git.houwenlong93@linux.alibaba.com>
	Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
(cherry picked from commit 8ed716ca7dc91f058be0ba644a3048667a20db13)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kvm/mmu/mmu.c
diff --cc arch/x86/kvm/mmu/mmu.c
index 009f93cd3ca5,0c839ee1282c..000000000000
--- a/arch/x86/kvm/mmu/mmu.c
+++ b/arch/x86/kvm/mmu/mmu.c
@@@ -5802,22 -5852,30 +5802,36 @@@ restart
  }
  
  void kvm_mmu_zap_collapsible_sptes(struct kvm *kvm,
 -				   const struct kvm_memory_slot *slot)
 +				   const struct kvm_memory_slot *memslot)
  {
++<<<<<<< HEAD
 +	/* FIXME: const-ify all uses of struct kvm_memory_slot.  */
 +	struct kvm_memory_slot *slot = (struct kvm_memory_slot *)memslot;
 +	bool flush = false;
++=======
+ 	bool flush;
++>>>>>>> 8ed716ca7dc9 (KVM: x86/mmu: Pass parameter flush as false in kvm_tdp_mmu_zap_collapsible_sptes())
  
 -	if (kvm_memslots_have_rmaps(kvm)) {
 -		write_lock(&kvm->mmu_lock);
 -		/*
 -		 * Zap only 4k SPTEs since the legacy MMU only supports dirty
 -		 * logging at a 4k granularity and never creates collapsible
 -		 * 2m SPTEs during dirty logging.
 -		 */
 -		flush = slot_handle_level_4k(kvm, slot, kvm_mmu_zap_collapsible_spte, true);
 -		if (flush)
 -			kvm_arch_flush_remote_tlbs_memslot(kvm, slot);
 -		write_unlock(&kvm->mmu_lock);
 -	}
 +	write_lock(&kvm->mmu_lock);
 +	flush = slot_handle_leaf(kvm, slot, kvm_mmu_zap_collapsible_spte, true);
 +
++<<<<<<< HEAD
 +	if (is_tdp_mmu_enabled(kvm))
 +		flush = kvm_tdp_mmu_zap_collapsible_sptes(kvm, slot, flush);
 +
 +	if (flush)
 +		kvm_arch_flush_remote_tlbs_memslot(kvm, slot);
  
 +	write_unlock(&kvm->mmu_lock);
++=======
+ 	if (is_tdp_mmu_enabled(kvm)) {
+ 		read_lock(&kvm->mmu_lock);
+ 		flush = kvm_tdp_mmu_zap_collapsible_sptes(kvm, slot, false);
+ 		if (flush)
+ 			kvm_arch_flush_remote_tlbs_memslot(kvm, slot);
+ 		read_unlock(&kvm->mmu_lock);
+ 	}
++>>>>>>> 8ed716ca7dc9 (KVM: x86/mmu: Pass parameter flush as false in kvm_tdp_mmu_zap_collapsible_sptes())
  }
  
  void kvm_arch_flush_remote_tlbs_memslot(struct kvm *kvm,
* Unmerged path arch/x86/kvm/mmu/mmu.c
