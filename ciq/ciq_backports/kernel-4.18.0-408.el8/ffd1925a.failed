KVM: x86: Fix the intel_pt PMI handling wrongly considered from guest

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-408.el8
commit-author Yanfei Xu <yanfei.xu@intel.com>
commit ffd1925a596ce68bed7d81c61cb64bc35f788a9d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-408.el8/ffd1925a.failed

When kernel handles the vm-exit caused by external interrupts and NMI,
it always sets kvm_intr_type to tell if it's dealing an IRQ or NMI. For
the PMI scenario, it could be IRQ or NMI.

However, intel_pt PMIs are only generated for HARDWARE perf events, and
HARDWARE events are always configured to generate NMIs.  Use
kvm_handling_nmi_from_guest() to precisely identify if the intel_pt PMI
came from the guest; this avoids false positives if an intel_pt PMI/NMI
arrives while the host is handling an unrelated IRQ VM-Exit.

Fixes: db215756ae59 ("KVM: x86: More precisely identify NMI from guest when handling PMI")
	Signed-off-by: Yanfei Xu <yanfei.xu@intel.com>
Message-Id: <20220523140821.1345605-1-yanfei.xu@intel.com>
	Cc: stable@vger.kernel.org
	Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
(cherry picked from commit ffd1925a596ce68bed7d81c61cb64bc35f788a9d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kvm/vmx/vmx.c
diff --cc arch/x86/kvm/vmx/vmx.c
index 8ac8573ed7a3,f5aeade623d6..000000000000
--- a/arch/x86/kvm/vmx/vmx.c
+++ b/arch/x86/kvm/vmx/vmx.c
@@@ -7874,6 -7848,20 +7874,23 @@@ static struct kvm_x86_ops vmx_x86_ops _
  	.vcpu_deliver_sipi_vector = kvm_vcpu_deliver_sipi_vector,
  };
  
++<<<<<<< HEAD
++=======
+ static unsigned int vmx_handle_intel_pt_intr(void)
+ {
+ 	struct kvm_vcpu *vcpu = kvm_get_running_vcpu();
+ 
+ 	/* '0' on failure so that the !PT case can use a RET0 static call. */
+ 	if (!vcpu || !kvm_handling_nmi_from_guest(vcpu))
+ 		return 0;
+ 
+ 	kvm_make_request(KVM_REQ_PMI, vcpu);
+ 	__set_bit(MSR_CORE_PERF_GLOBAL_OVF_CTRL_TRACE_TOPA_PMI_BIT,
+ 		  (unsigned long *)&vcpu->arch.pmu.global_status);
+ 	return 1;
+ }
+ 
++>>>>>>> ffd1925a596c (KVM: x86: Fix the intel_pt PMI handling wrongly considered from guest)
  static __init void vmx_setup_user_return_msrs(void)
  {
  
* Unmerged path arch/x86/kvm/vmx/vmx.c
