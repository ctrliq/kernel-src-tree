dmaengine: idxd: idxd: move remove() bits for idxd 'struct device' to device.c

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-408.el8
commit-author Dave Jiang <dave.jiang@intel.com>
commit 745e92a6d816277fcbd231bda5ad2d882b22fe52
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-408.el8/745e92a6.failed

Move the code related to a ->remove() function for the idxd
'struct device' to device.c to prep for the idxd device
sub-driver in device.c.

	Reviewed-by: Dan Williams <dan.j.williams@intel.com>
	Signed-off-by: Dave Jiang <dave.jiang@intel.com>
Link: https://lore.kernel.org/r/162637464768.744545.15797285510999151668.stgit@djiang5-desk3.ch.intel.com
	Signed-off-by: Vinod Koul <vkoul@kernel.org>
(cherry picked from commit 745e92a6d816277fcbd231bda5ad2d882b22fe52)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/dma/idxd/device.c
#	drivers/dma/idxd/idxd.h
#	drivers/dma/idxd/sysfs.c
diff --cc drivers/dma/idxd/device.c
index 4a2af9799239,d5a0b6fff3b9..000000000000
--- a/drivers/dma/idxd/device.c
+++ b/drivers/dma/idxd/device.c
@@@ -1129,3 -1129,223 +1129,226 @@@ int idxd_device_load_config(struct idxd
  
  	return 0;
  }
++<<<<<<< HEAD
++=======
+ 
+ static int __drv_enable_wq(struct idxd_wq *wq)
+ {
+ 	struct idxd_device *idxd = wq->idxd;
+ 	struct device *dev = &idxd->pdev->dev;
+ 	unsigned long flags;
+ 	int rc = -ENXIO;
+ 
+ 	lockdep_assert_held(&wq->wq_lock);
+ 
+ 	if (idxd->state != IDXD_DEV_ENABLED)
+ 		goto err;
+ 
+ 	if (wq->state != IDXD_WQ_DISABLED) {
+ 		dev_dbg(dev, "wq %d already enabled.\n", wq->id);
+ 		rc = -EBUSY;
+ 		goto err;
+ 	}
+ 
+ 	if (!wq->group) {
+ 		dev_dbg(dev, "wq %d not attached to group.\n", wq->id);
+ 		goto err;
+ 	}
+ 
+ 	if (strlen(wq->name) == 0) {
+ 		dev_dbg(dev, "wq %d name not set.\n", wq->id);
+ 		goto err;
+ 	}
+ 
+ 	/* Shared WQ checks */
+ 	if (wq_shared(wq)) {
+ 		if (!device_swq_supported(idxd)) {
+ 			dev_dbg(dev, "PASID not enabled and shared wq.\n");
+ 			goto err;
+ 		}
+ 		/*
+ 		 * Shared wq with the threshold set to 0 means the user
+ 		 * did not set the threshold or transitioned from a
+ 		 * dedicated wq but did not set threshold. A value
+ 		 * of 0 would effectively disable the shared wq. The
+ 		 * driver does not allow a value of 0 to be set for
+ 		 * threshold via sysfs.
+ 		 */
+ 		if (wq->threshold == 0) {
+ 			dev_dbg(dev, "Shared wq and threshold 0.\n");
+ 			goto err;
+ 		}
+ 	}
+ 
+ 	rc = idxd_wq_alloc_resources(wq);
+ 	if (rc < 0) {
+ 		dev_dbg(dev, "wq resource alloc failed\n");
+ 		goto err;
+ 	}
+ 
+ 	spin_lock_irqsave(&idxd->dev_lock, flags);
+ 	if (test_bit(IDXD_FLAG_CONFIGURABLE, &idxd->flags))
+ 		rc = idxd_device_config(idxd);
+ 	spin_unlock_irqrestore(&idxd->dev_lock, flags);
+ 	if (rc < 0) {
+ 		dev_dbg(dev, "Writing wq %d config failed: %d\n", wq->id, rc);
+ 		goto err;
+ 	}
+ 
+ 	rc = idxd_wq_enable(wq);
+ 	if (rc < 0) {
+ 		dev_dbg(dev, "wq %d enabling failed: %d\n", wq->id, rc);
+ 		goto err;
+ 	}
+ 
+ 	rc = idxd_wq_map_portal(wq);
+ 	if (rc < 0) {
+ 		dev_dbg(dev, "wq %d portal mapping failed: %d\n", wq->id, rc);
+ 		goto err_map_portal;
+ 	}
+ 
+ 	wq->client_count = 0;
+ 
+ 	if (wq->type == IDXD_WQT_KERNEL) {
+ 		rc = idxd_wq_init_percpu_ref(wq);
+ 		if (rc < 0) {
+ 			dev_dbg(dev, "wq %d percpu_ref setup failed\n", wq->id);
+ 			goto err_cpu_ref;
+ 		}
+ 	}
+ 
+ 	if (is_idxd_wq_dmaengine(wq)) {
+ 		rc = idxd_register_dma_channel(wq);
+ 		if (rc < 0) {
+ 			dev_dbg(dev, "wq %d DMA channel register failed\n", wq->id);
+ 			goto err_client;
+ 		}
+ 	} else if (is_idxd_wq_cdev(wq)) {
+ 		rc = idxd_wq_add_cdev(wq);
+ 		if (rc < 0) {
+ 			dev_dbg(dev, "wq %d cdev creation failed\n", wq->id);
+ 			goto err_client;
+ 		}
+ 	}
+ 
+ 	dev_info(dev, "wq %s enabled\n", dev_name(wq_confdev(wq)));
+ 	return 0;
+ 
+ err_client:
+ 	idxd_wq_quiesce(wq);
+ err_cpu_ref:
+ 	idxd_wq_unmap_portal(wq);
+ err_map_portal:
+ 	rc = idxd_wq_disable(wq, false);
+ 	if (rc < 0)
+ 		dev_dbg(dev, "wq %s disable failed\n", dev_name(wq_confdev(wq)));
+ err:
+ 	return rc;
+ }
+ 
+ int drv_enable_wq(struct idxd_wq *wq)
+ {
+ 	int rc;
+ 
+ 	mutex_lock(&wq->wq_lock);
+ 	rc = __drv_enable_wq(wq);
+ 	mutex_unlock(&wq->wq_lock);
+ 	return rc;
+ }
+ 
+ static void __drv_disable_wq(struct idxd_wq *wq)
+ {
+ 	struct idxd_device *idxd = wq->idxd;
+ 	struct device *dev = &idxd->pdev->dev;
+ 
+ 	lockdep_assert_held(&wq->wq_lock);
+ 
+ 	if (wq->type == IDXD_WQT_KERNEL)
+ 		idxd_wq_quiesce(wq);
+ 
+ 	if (is_idxd_wq_dmaengine(wq))
+ 		idxd_unregister_dma_channel(wq);
+ 	else if (is_idxd_wq_cdev(wq))
+ 		idxd_wq_del_cdev(wq);
+ 
+ 	if (idxd_wq_refcount(wq))
+ 		dev_warn(dev, "Clients has claim on wq %d: %d\n",
+ 			 wq->id, idxd_wq_refcount(wq));
+ 
+ 	idxd_wq_unmap_portal(wq);
+ 
+ 	idxd_wq_drain(wq);
+ 	idxd_wq_reset(wq);
+ 
+ 	idxd_wq_free_resources(wq);
+ 	wq->client_count = 0;
+ 
+ 	dev_info(dev, "wq %s disabled\n", dev_name(wq_confdev(wq)));
+ }
+ 
+ void drv_disable_wq(struct idxd_wq *wq)
+ {
+ 	mutex_lock(&wq->wq_lock);
+ 	__drv_disable_wq(wq);
+ 	mutex_unlock(&wq->wq_lock);
+ }
+ 
+ int idxd_device_drv_probe(struct idxd_dev *idxd_dev)
+ {
+ 	struct idxd_device *idxd = idxd_dev_to_idxd(idxd_dev);
+ 	unsigned long flags;
+ 	int rc = 0;
+ 
+ 	/*
+ 	 * Device should be in disabled state for the idxd_drv to load. If it's in
+ 	 * enabled state, then the device was altered outside of driver's control.
+ 	 * If the state is in halted state, then we don't want to proceed.
+ 	 */
+ 	if (idxd->state != IDXD_DEV_DISABLED)
+ 		return -ENXIO;
+ 
+ 	/* Device configuration */
+ 	spin_lock_irqsave(&idxd->dev_lock, flags);
+ 	if (test_bit(IDXD_FLAG_CONFIGURABLE, &idxd->flags))
+ 		rc = idxd_device_config(idxd);
+ 	spin_unlock_irqrestore(&idxd->dev_lock, flags);
+ 	if (rc < 0)
+ 		return -ENXIO;
+ 
+ 	/* Start device */
+ 	rc = idxd_device_enable(idxd);
+ 	if (rc < 0)
+ 		return rc;
+ 
+ 	/* Setup DMA device without channels */
+ 	rc = idxd_register_dma_device(idxd);
+ 	if (rc < 0) {
+ 		idxd_device_disable(idxd);
+ 		return rc;
+ 	}
+ 
+ 	return 0;
+ }
+ 
+ void idxd_device_drv_remove(struct idxd_dev *idxd_dev)
+ {
+ 	struct device *dev = &idxd_dev->conf_dev;
+ 	struct idxd_device *idxd = idxd_dev_to_idxd(idxd_dev);
+ 	int i;
+ 
+ 	for (i = 0; i < idxd->max_wqs; i++) {
+ 		struct idxd_wq *wq = idxd->wqs[i];
+ 		struct device *wq_dev = wq_confdev(wq);
+ 
+ 		if (wq->state == IDXD_WQ_DISABLED)
+ 			continue;
+ 		dev_warn(dev, "Active wq %d on disable %s.\n", i, dev_name(wq_dev));
+ 		device_release_driver(wq_dev);
+ 	}
+ 
+ 	idxd_unregister_dma_device(idxd);
+ 	idxd_device_disable(idxd);
+ 	if (test_bit(IDXD_FLAG_CONFIGURABLE, &idxd->flags))
+ 		idxd_device_reset(idxd);
+ }
++>>>>>>> 745e92a6d816 (dmaengine: idxd: idxd: move remove() bits for idxd 'struct device' to device.c)
diff --cc drivers/dma/idxd/idxd.h
index 813e19b4ecc8,1c8abba13470..000000000000
--- a/drivers/dma/idxd/idxd.h
+++ b/drivers/dma/idxd/idxd.h
@@@ -422,6 -498,10 +422,13 @@@ void idxd_mask_msix_vector(struct idxd_
  void idxd_unmask_msix_vector(struct idxd_device *idxd, int vec_id);
  
  /* device control */
++<<<<<<< HEAD
++=======
+ int idxd_device_drv_probe(struct idxd_dev *idxd_dev);
+ void idxd_device_drv_remove(struct idxd_dev *idxd_dev);
+ int drv_enable_wq(struct idxd_wq *wq);
+ void drv_disable_wq(struct idxd_wq *wq);
++>>>>>>> 745e92a6d816 (dmaengine: idxd: idxd: move remove() bits for idxd 'struct device' to device.c)
  int idxd_device_init_reset(struct idxd_device *idxd);
  int idxd_device_enable(struct idxd_device *idxd);
  int idxd_device_disable(struct idxd_device *idxd);
diff --cc drivers/dma/idxd/sysfs.c
index e25f04f3917e,abea8aca6799..000000000000
--- a/drivers/dma/idxd/sysfs.c
+++ b/drivers/dma/idxd/sysfs.c
@@@ -291,8 -50,39 +291,40 @@@ struct bus_type dsa_bus_type = 
  	.remove = idxd_config_bus_remove,
  };
  
++<<<<<<< HEAD
++=======
+ static int idxd_dsa_drv_probe(struct idxd_dev *idxd_dev)
+ {
+ 	if (is_idxd_dev(idxd_dev))
+ 		return idxd_device_drv_probe(idxd_dev);
+ 
+ 	if (is_idxd_wq_dev(idxd_dev)) {
+ 		struct idxd_wq *wq = idxd_dev_to_wq(idxd_dev);
+ 
+ 		return drv_enable_wq(wq);
+ 	}
+ 
+ 	return -ENODEV;
+ }
+ 
+ static void idxd_dsa_drv_remove(struct idxd_dev *idxd_dev)
+ {
+ 	if (is_idxd_dev(idxd_dev)) {
+ 		idxd_device_drv_remove(idxd_dev);
+ 		return;
+ 	}
+ 
+ 	if (is_idxd_wq_dev(idxd_dev)) {
+ 		struct idxd_wq *wq = idxd_dev_to_wq(idxd_dev);
+ 
+ 		drv_disable_wq(wq);
+ 		return;
+ 	}
+ }
+ 
++>>>>>>> 745e92a6d816 (dmaengine: idxd: idxd: move remove() bits for idxd 'struct device' to device.c)
  static struct idxd_device_driver dsa_drv = {
  	.name = "dsa",
 -	.probe = idxd_dsa_drv_probe,
 -	.remove = idxd_dsa_drv_remove,
  };
  
  /* IDXD generic driver setup */
* Unmerged path drivers/dma/idxd/device.c
* Unmerged path drivers/dma/idxd/idxd.h
* Unmerged path drivers/dma/idxd/sysfs.c
