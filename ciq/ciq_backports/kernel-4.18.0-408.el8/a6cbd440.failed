kernel/fork: Initialize mm's PASID

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-408.el8
commit-author Fenghua Yu <fenghua.yu@intel.com>
commit a6cbd44093ef305b02ad5f80ed54abf0148a696c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-408.el8/a6cbd440.failed

A new mm doesn't have a PASID yet when it's created. Initialize
the mm's PASID on fork() or for init_mm to INVALID_IOASID (-1).

INIT_PASID (0) is reserved for kernel legacy DMA PASID. It cannot be
allocated to a user process. Initializing the process's PASID to 0 may
cause confusion that's why the process uses the reserved kernel legacy
DMA PASID. Initializing the PASID to INVALID_IOASID (-1) explicitly
tells the process doesn't have a valid PASID yet.

Even though the only user of mm_pasid_init() is in fork.c, define it in
<linux/sched/mm.h> as the first of three mm/pasid life cycle functions
(init/set/drop) to keep these all together.

	Suggested-by: Dave Hansen <dave.hansen@linux.intel.com>
	Signed-off-by: Fenghua Yu <fenghua.yu@intel.com>
	Signed-off-by: Borislav Petkov <bp@suse.de>
	Reviewed-by: Tony Luck <tony.luck@intel.com>
	Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
Link: https://lore.kernel.org/r/20220207230254.3342514-5-fenghua.yu@intel.com
(cherry picked from commit a6cbd44093ef305b02ad5f80ed54abf0148a696c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/fork.c
#	mm/init-mm.c
diff --cc kernel/fork.c
index 3a201a1bb372,deacd2c17a7f..000000000000
--- a/kernel/fork.c
+++ b/kernel/fork.c
@@@ -92,10 -92,13 +92,16 @@@
  #include <linux/kcov.h>
  #include <linux/livepatch.h>
  #include <linux/thread_info.h>
 -#include <linux/stackleak.h>
 -#include <linux/kasan.h>
  #include <linux/scs.h>
++<<<<<<< HEAD
 +#include <linux/kasan.h>
++=======
+ #include <linux/io_uring.h>
+ #include <linux/bpf.h>
+ #include <linux/sched/mm.h>
++>>>>>>> a6cbd44093ef (kernel/fork: Initialize mm's PASID)
  
 +#include <asm/pgtable.h>
  #include <asm/pgalloc.h>
  #include <linux/uaccess.h>
  #include <asm/mmu_context.h>
@@@ -1039,6 -1048,7 +1045,10 @@@ static struct mm_struct *mm_init(struc
  	mm_init_cpumask(mm);
  	mm_init_aio(mm);
  	mm_init_owner(mm, p);
++<<<<<<< HEAD
++=======
+ 	mm_pasid_init(mm);
++>>>>>>> a6cbd44093ef (kernel/fork: Initialize mm's PASID)
  	RCU_INIT_POINTER(mm->exe_file, NULL);
  	mmu_notifier_subscriptions_init(mm);
  	init_tlb_flush_pending(mm);
diff --cc mm/init-mm.c
index 9501fdc8a8d7,fbe7844d0912..000000000000
--- a/mm/init-mm.c
+++ b/mm/init-mm.c
@@@ -9,7 -9,8 +9,11 @@@
  
  #include <linux/atomic.h>
  #include <linux/user_namespace.h>
++<<<<<<< HEAD
 +#include <asm/pgtable.h>
++=======
+ #include <linux/ioasid.h>
++>>>>>>> a6cbd44093ef (kernel/fork: Initialize mm's PASID)
  #include <asm/mmu.h>
  
  #ifndef INIT_MM_CONTEXT
@@@ -37,6 -38,18 +41,13 @@@ struct mm_struct init_mm = 
  	.arg_lock	=  __SPIN_LOCK_UNLOCKED(init_mm.arg_lock),
  	.mmlist		= LIST_HEAD_INIT(init_mm.mmlist),
  	.user_ns	= &init_user_ns,
++<<<<<<< HEAD
 +	.cpu_bitmap	= { [BITS_TO_LONGS(NR_CPUS)] = 0},
++=======
+ 	.cpu_bitmap	= CPU_BITS_NONE,
+ #ifdef CONFIG_IOMMU_SVA
+ 	.pasid		= INVALID_IOASID,
+ #endif
++>>>>>>> a6cbd44093ef (kernel/fork: Initialize mm's PASID)
  	INIT_MM_CONTEXT(init_mm)
  };
 -
 -void setup_initial_init_mm(void *start_code, void *end_code,
 -			   void *end_data, void *brk)
 -{
 -	init_mm.start_code = (unsigned long)start_code;
 -	init_mm.end_code = (unsigned long)end_code;
 -	init_mm.end_data = (unsigned long)end_data;
 -	init_mm.brk = (unsigned long)brk;
 -}
diff --git a/include/linux/sched/mm.h b/include/linux/sched/mm.h
index 90a82a903c06..b2cf961e6b22 100644
--- a/include/linux/sched/mm.h
+++ b/include/linux/sched/mm.h
@@ -8,6 +8,7 @@
 #include <linux/mm_types.h>
 #include <linux/gfp.h>
 #include <linux/sync_core.h>
+#include <linux/ioasid.h>
 
 /*
  * Routines for handling mm_structs
@@ -405,4 +406,13 @@ static inline void membarrier_mm_sync_core_before_usermode(struct mm_struct *mm)
 }
 #endif
 
+#ifdef CONFIG_IOMMU_SVA
+static inline void mm_pasid_init(struct mm_struct *mm)
+{
+	mm->pasid = INVALID_IOASID;
+}
+#else
+static inline void mm_pasid_init(struct mm_struct *mm) {}
+#endif
+
 #endif /* _LINUX_SCHED_MM_H */
* Unmerged path kernel/fork.c
* Unmerged path mm/init-mm.c
