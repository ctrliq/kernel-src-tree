tcp: dynamically allocate the perturb table used by source ports

jira LE-1907
cve CVE-2022-1012
Rebuild_History Non-Buildable kernel-4.18.0-408.el8
commit-author Willy Tarreau <w@1wt.eu>
commit e9261476184be1abd486c9434164b2acbe0ed6c2
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-408.el8/e9261476.failed

We'll need to further increase the size of this table and it's likely
that at some point its size will not be suitable anymore for a static
table. Let's allocate it on boot from inet_hashinfo2_init(), which is
called from tcp_init().

	Cc: Moshe Kol <moshe.kol@mail.huji.ac.il>
	Cc: Yossi Gilad <yossi.gilad@mail.huji.ac.il>
	Cc: Amit Klein <aksecurity@gmail.com>
	Reviewed-by: Eric Dumazet <edumazet@google.com>
	Signed-off-by: Willy Tarreau <w@1wt.eu>
	Signed-off-by: Jakub Kicinski <kuba@kernel.org>
(cherry picked from commit e9261476184be1abd486c9434164b2acbe0ed6c2)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/ipv4/inet_hashtables.c
diff --cc net/ipv4/inet_hashtables.c
index 98c85d0d54d8,48ca07853068..000000000000
--- a/net/ipv4/inet_hashtables.c
+++ b/net/ipv4/inet_hashtables.c
@@@ -936,14 -913,30 +938,24 @@@ void __init inet_hashinfo2_init(struct 
  					    &h->lhash2_mask,
  					    low_limit,
  					    high_limit);
++<<<<<<< HEAD
 +
 +	for (i = 0; i <= h->lhash2_mask; i++) {
 +		spin_lock_init(&h->lhash2[i].lock);
 +		INIT_HLIST_HEAD(&h->lhash2[i].head);
 +		h->lhash2[i].count = 0;
 +	}
++=======
+ 	init_hashinfo_lhash2(h);
+ 
+ 	/* this one is used for source ports of outgoing connections */
+ 	table_perturb = kmalloc_array(INET_TABLE_PERTURB_SIZE,
+ 				      sizeof(*table_perturb), GFP_KERNEL);
+ 	if (!table_perturb)
+ 		panic("TCP: failed to alloc table_perturb");
++>>>>>>> e9261476184b (tcp: dynamically allocate the perturb table used by source ports)
  }
  
 -int inet_hashinfo2_init_mod(struct inet_hashinfo *h)
 -{
 -	h->lhash2 = kmalloc_array(INET_LHTABLE_SIZE, sizeof(*h->lhash2), GFP_KERNEL);
 -	if (!h->lhash2)
 -		return -ENOMEM;
 -
 -	h->lhash2_mask = INET_LHTABLE_SIZE - 1;
 -	/* INET_LHTABLE_SIZE must be a power of 2 */
 -	BUG_ON(INET_LHTABLE_SIZE & h->lhash2_mask);
 -
 -	init_hashinfo_lhash2(h);
 -	return 0;
 -}
 -EXPORT_SYMBOL_GPL(inet_hashinfo2_init_mod);
 -
  int inet_ehash_locks_alloc(struct inet_hashinfo *hashinfo)
  {
  	unsigned int locksz = sizeof(spinlock_t);
* Unmerged path net/ipv4/inet_hashtables.c
