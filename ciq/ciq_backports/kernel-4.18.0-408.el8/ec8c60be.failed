ext4: improve ext_debug() msg in case of block allocation failure

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-408.el8
commit-author Ritesh Harjani <riteshh@linux.ibm.com>
commit ec8c60be96d6de74be601fbca56342efb9a1e039
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-408.el8/ec8c60be.failed

ext4_map_blocks() has ext_debug msg early at the start of function.
We also get ext_debug msg if we could allocate a block from
ext4_ext_map_blocks(). But there is no ext_debug() msg in case of
block allocation failure. So add one along with error code.

Also add more info in ext_debug() msg like how many blocks were allocated
v/s how many were requested in ext4_ext_map_blocks().

	Signed-off-by: Ritesh Harjani <riteshh@linux.ibm.com>
Link: https://lore.kernel.org/r/1610ec2aa932396be00f9d552fe29da473ead176.1589086800.git.riteshh@linux.ibm.com
	Signed-off-by: Theodore Ts'o <tytso@mit.edu>
(cherry picked from commit ec8c60be96d6de74be601fbca56342efb9a1e039)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/ext4/extents.c
diff --cc fs/ext4/extents.c
index 25af762287ee,7b4b0c0110ac..000000000000
--- a/fs/ext4/extents.c
+++ b/fs/ext4/extents.c
@@@ -4527,11 -4246,10 +4527,16 @@@ int ext4_ext_map_blocks(handle_t *handl
  	newblock = ext4_mb_new_blocks(handle, &ar, &err);
  	if (!newblock)
  		goto out2;
++<<<<<<< HEAD
 +	ext_debug("allocate new block: goal %llu, found %llu/%u\n",
 +		  ar.goal, newblock, allocated);
 +	free_on_err = 1;
++=======
++>>>>>>> ec8c60be96d6 (ext4: improve ext_debug() msg in case of block allocation failure)
  	allocated_clusters = ar.len;
  	ar.len = EXT4_C2B(sbi, ar.len) - offset;
+ 	ext_debug("allocate new block: goal %llu, found %llu/%u, requested %u\n",
+ 		  ar.goal, newblock, ar.len, allocated);
  	if (ar.len > allocated)
  		ar.len = allocated;
  
* Unmerged path fs/ext4/extents.c
diff --git a/fs/ext4/inode.c b/fs/ext4/inode.c
index 17066a31602f..272f8dbde651 100644
--- a/fs/ext4/inode.c
+++ b/fs/ext4/inode.c
@@ -746,6 +746,10 @@ int ext4_map_blocks(handle_t *handle, struct inode *inode,
 				return ret;
 		}
 	}
+
+	if (retval < 0)
+		ext_debug("failed for inode %lu with err %d\n",
+			  inode->i_ino, retval);
 	return retval;
 }
 
