ext4: add check to prevent attempting to resize an fs with sparse_super2

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-408.el8
commit-author Josh Triplett <josh@joshtriplett.org>
commit b1489186cc8391e0c1e342f9fbc3eedf6b944c61
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-408.el8/b1489186.failed

The in-kernel ext4 resize code doesn't support filesystem with the
sparse_super2 feature. It fails with errors like this and doesn't finish
the resize:
EXT4-fs (loop0): resizing filesystem from 16640 to 7864320 blocks
EXT4-fs warning (device loop0): verify_reserved_gdb:760: reserved GDT 2 missing grp 1 (32770)
EXT4-fs warning (device loop0): ext4_resize_fs:2111: error (-22) occurred during file system resize
EXT4-fs (loop0): resized filesystem to 2097152

To reproduce:
mkfs.ext4 -b 4096 -I 256 -J size=32 -E resize=$((256*1024*1024)) -O sparse_super2 ext4.img 65M
truncate -s 30G ext4.img
mount ext4.img /mnt
python3 -c 'import fcntl, os, struct ; fd = os.open("/mnt", os.O_RDONLY | os.O_DIRECTORY) ; fcntl.ioctl(fd, 0x40086610, struct.pack("Q", 30 * 1024 * 1024 * 1024 // 4096), False) ; os.close(fd)'
dmesg | tail
e2fsck ext4.img

The userspace resize2fs tool has a check for this case: it checks if the
filesystem has sparse_super2 set and if the kernel provides
/sys/fs/ext4/features/sparse_super2. However, the former check requires
manually reading and parsing the filesystem superblock.

Detect this case in ext4_resize_begin and error out early with a clear
error message.

	Signed-off-by: Josh Triplett <josh@joshtriplett.org>
Link: https://lore.kernel.org/r/74b8ae78405270211943cd7393e65586c5faeed1.1623093259.git.josh@joshtriplett.org
	Signed-off-by: Theodore Ts'o <tytso@mit.edu>
(cherry picked from commit b1489186cc8391e0c1e342f9fbc3eedf6b944c61)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/ext4/resize.c
diff --cc fs/ext4/resize.c
index 3abece3d733b,fc885914c88a..000000000000
--- a/fs/ext4/resize.c
+++ b/fs/ext4/resize.c
@@@ -74,6 -74,15 +74,18 @@@ int ext4_resize_begin(struct super_bloc
  		return -EPERM;
  	}
  
++<<<<<<< HEAD
++=======
+ 	if (ext4_has_feature_bigalloc(sb)) {
+ 		ext4_msg(sb, KERN_ERR, "Online resizing not supported with bigalloc");
+ 		return -EOPNOTSUPP;
+ 	}
+ 	if (ext4_has_feature_sparse_super2(sb)) {
+ 		ext4_msg(sb, KERN_ERR, "Online resizing not supported with sparse_super2");
+ 		return -EOPNOTSUPP;
+ 	}
+ 
++>>>>>>> b1489186cc83 (ext4: add check to prevent attempting to resize an fs with sparse_super2)
  	if (test_and_set_bit_lock(EXT4_FLAGS_RESIZING,
  				  &EXT4_SB(sb)->s_ext4_flags))
  		ret = -EBUSY;
* Unmerged path fs/ext4/resize.c
