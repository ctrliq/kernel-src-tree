ath11k: allocate HAL_WBM2SW_RELEASE ring from cacheable memory

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-408.el8
commit-author P Praneesh <ppranees@codeaurora.org>
commit d0e2523bfa9cb391fe966b0b6948c7e438981361
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-408.el8/d0e2523b.failed

Similar to REO destination ring, also allocate HAL_WBM2SW_RELEASE
from cacheable memory so that descriptors could be prefetched during
tx completion handling.

Tested-on: IPQ8074 hw2.0 AHB WLAN.HK.2.4.0.1-01734-QCAHKSWPL_SILICONZ-1 v2

Co-developed-by: Sriram R <srirrama@codeaurora.org>
	Signed-off-by: Sriram R <srirrama@codeaurora.org>
	Signed-off-by: Jouni Malinen <jouni@codeaurora.org>
	Signed-off-by: P Praneesh <ppranees@codeaurora.org>
	Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
Link: https://lore.kernel.org/r/1630560820-21905-9-git-send-email-ppranees@codeaurora.org
(cherry picked from commit d0e2523bfa9cb391fe966b0b6948c7e438981361)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/wireless/ath/ath11k/dp.c
diff --cc drivers/net/wireless/ath/ath11k/dp.c
index 8baaeeb8cf82,56b4cebbc6a5..000000000000
--- a/drivers/net/wireless/ath/ath11k/dp.c
+++ b/drivers/net/wireless/ath/ath11k/dp.c
@@@ -230,9 -234,29 +230,35 @@@ int ath11k_dp_srng_setup(struct ath11k_
  		num_entries = max_entries;
  
  	ring->size = (num_entries * entry_sz) + HAL_RING_BASE_ALIGN - 1;
++<<<<<<< HEAD
 +	ring->vaddr_unaligned = dma_alloc_coherent(ab->dev, ring->size,
 +						   &ring->paddr_unaligned,
 +						   GFP_KERNEL);
++=======
+ 
+ 	if (ab->hw_params.alloc_cacheable_memory) {
+ 		/* Allocate the reo dst and tx completion rings from cacheable memory */
+ 		switch (type) {
+ 		case HAL_REO_DST:
+ 		case HAL_WBM2SW_RELEASE:
+ 			cached = true;
+ 			break;
+ 		default:
+ 			cached = false;
+ 		}
+ 
+ 		if (cached) {
+ 			ring->vaddr_unaligned = kzalloc(ring->size, GFP_KERNEL);
+ 			ring->paddr_unaligned = virt_to_phys(ring->vaddr_unaligned);
+ 		}
+ 	}
+ 
+ 	if (!cached)
+ 		ring->vaddr_unaligned = dma_alloc_coherent(ab->dev, ring->size,
+ 							   &ring->paddr_unaligned,
+ 							   GFP_KERNEL);
+ 
++>>>>>>> d0e2523bfa9c (ath11k: allocate HAL_WBM2SW_RELEASE ring from cacheable memory)
  	if (!ring->vaddr_unaligned)
  		return -ENOMEM;
  
* Unmerged path drivers/net/wireless/ath/ath11k/dp.c
