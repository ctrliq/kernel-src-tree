selftests/vm: only some gup_test items are really benchmarks

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-408.el8
commit-author John Hubbard <jhubbard@nvidia.com>
commit a9bed1e1c2a9bb36cdd29af0ef48044d1b9e8c2a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-408.el8/a9bed1e1.failed

Therefore, some minor cleanup and improvements are in order:

1. Rename the other items appropriately.

2. Stop reporting timing information on the non-benchmark items. It's
   still being recorded and is available, but there's no point in
   cluttering up the report with data that no one reasonably needs to
   check.

3. Don't do iterations, for non-benchmark items.

4. Print out a shorter, more appropriate report for the non-benchmark
   tests.

5. Add the command that was run, to the report. This really helps, as
   there are quite a lot of options now.

6. Use a larger integer type for cmd, now that it's being compared
   Otherwise it doesn't work, because in this case cmd is about 3 billion,
   which is the perfect size for problems with signed vs unsigned int.

Link: https://lkml.kernel.org/r/20201026064021.3545418-6-jhubbard@nvidia.com
	Signed-off-by: John Hubbard <jhubbard@nvidia.com>
	Cc: Jérôme Glisse <jglisse@redhat.com>
	Cc: Jonathan Corbet <corbet@lwn.net>
	Cc: Ralph Campbell <rcampbell@nvidia.com>
	Cc: Shuah Khan <shuah@kernel.org>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit a9bed1e1c2a9bb36cdd29af0ef48044d1b9e8c2a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	Documentation/core-api/pin_user_pages.rst
#	mm/gup_test.h
#	tools/testing/selftests/vm/gup_benchmark.c
diff --cc Documentation/core-api/pin_user_pages.rst
index 6068266dd303,fcf605be43d0..000000000000
--- a/Documentation/core-api/pin_user_pages.rst
+++ b/Documentation/core-api/pin_user_pages.rst
@@@ -225,8 -225,8 +225,13 @@@ This file:
  
  has the following new calls to exercise the new pin*() wrapper functions:
  
++<<<<<<< HEAD
 +* PIN_FAST_BENCHMARK (./gup_benchmark -a)
 +* PIN_BENCHMARK (./gup_benchmark -b)
++=======
+ * PIN_FAST_BENCHMARK (./gup_test -a)
+ * PIN_BASIC_TEST (./gup_test -b)
++>>>>>>> a9bed1e1c2a9 (selftests/vm: only some gup_test items are really benchmarks)
  
  You can monitor how many total dma-pinned pages have been acquired and released
  since the system was booted, via two new /proc/vmstat entries: ::
diff --cc tools/testing/selftests/vm/gup_benchmark.c
index 31f8bb086907,f9163e1bb57a..000000000000
--- a/tools/testing/selftests/vm/gup_benchmark.c
+++ b/tools/testing/selftests/vm/gup_benchmark.c
@@@ -25,22 -14,30 +25,42 @@@
  /* Just the flags we need, copied from mm.h: */
  #define FOLL_WRITE	0x01	/* check pte is writable */
  
++<<<<<<< HEAD:tools/testing/selftests/vm/gup_benchmark.c
 +struct gup_benchmark {
 +	__u64 get_delta_usec;
 +	__u64 put_delta_usec;
 +	__u64 addr;
 +	__u64 size;
 +	__u32 nr_pages_per_call;
 +	__u32 flags;
 +	__u64 expansion[10];	/* For future use */
 +};
++=======
+ static char *cmd_to_str(unsigned long cmd)
+ {
+ 	switch (cmd) {
+ 	case GUP_FAST_BENCHMARK:
+ 		return "GUP_FAST_BENCHMARK";
+ 	case PIN_FAST_BENCHMARK:
+ 		return "PIN_FAST_BENCHMARK";
+ 	case PIN_LONGTERM_BENCHMARK:
+ 		return "PIN_LONGTERM_BENCHMARK";
+ 	case GUP_BASIC_TEST:
+ 		return "GUP_BASIC_TEST";
+ 	case PIN_BASIC_TEST:
+ 		return "PIN_BASIC_TEST";
+ 	}
+ 	return "Unknown command";
+ }
++>>>>>>> a9bed1e1c2a9 (selftests/vm: only some gup_test items are really benchmarks):tools/testing/selftests/vm/gup_test.c
  
  int main(int argc, char **argv)
  {
 -	struct gup_test gup;
 +	struct gup_benchmark gup;
  	unsigned long size = 128 * MB;
  	int i, fd, filed, opt, nr_pages = 1, thp = -1, repeats = 1, write = 0;
- 	int cmd = GUP_FAST_BENCHMARK, flags = MAP_PRIVATE;
+ 	unsigned long cmd = GUP_FAST_BENCHMARK;
+ 	int flags = MAP_PRIVATE;
  	char *file = "/dev/zero";
  	char *p;
  
@@@ -121,16 -122,31 +141,29 @@@
  	for (; (unsigned long)p < gup.addr + size; p += PAGE_SIZE)
  		p[0] = 0;
  
- 	for (i = 0; i < repeats; i++) {
+ 	/* Only report timing information on the *_BENCHMARK commands: */
+ 	if ((cmd == PIN_FAST_BENCHMARK) || (cmd == GUP_FAST_BENCHMARK) ||
+ 	     (cmd == PIN_LONGTERM_BENCHMARK)) {
+ 		for (i = 0; i < repeats; i++) {
+ 			gup.size = size;
+ 			if (ioctl(fd, cmd, &gup))
+ 				perror("ioctl"), exit(1);
+ 
+ 			printf("%s: Time: get:%lld put:%lld us",
+ 			       cmd_to_str(cmd), gup.get_delta_usec,
+ 			       gup.put_delta_usec);
+ 			if (gup.size != size)
+ 				printf(", truncated (size: %lld)", gup.size);
+ 			printf("\n");
+ 		}
+ 	} else {
  		gup.size = size;
 -		if (ioctl(fd, cmd, &gup)) {
 -			perror("ioctl");
 -			exit(1);
 -		}
 +		if (ioctl(fd, cmd, &gup))
 +			perror("ioctl"), exit(1);
  
- 		printf("Time: get:%lld put:%lld us", gup.get_delta_usec,
- 			gup.put_delta_usec);
+ 		printf("%s: done\n", cmd_to_str(cmd));
  		if (gup.size != size)
- 			printf(", truncated (size: %lld)", gup.size);
- 		printf("\n");
+ 			printf("Truncated (size: %lld)\n", gup.size);
  	}
  
  	return 0;
* Unmerged path mm/gup_test.h
* Unmerged path Documentation/core-api/pin_user_pages.rst
diff --git a/mm/gup_benchmark.c b/mm/gup_benchmark.c
index 464cae1fa3ea..7cf83fd08c57 100644
--- a/mm/gup_benchmark.c
+++ b/mm/gup_benchmark.c
@@ -28,13 +28,13 @@ static void put_back_pages(unsigned int cmd, struct page **pages,
 
 	switch (cmd) {
 	case GUP_FAST_BENCHMARK:
-	case GUP_BENCHMARK:
+	case GUP_BASIC_TEST:
 		for (i = 0; i < nr_pages; i++)
 			put_page(pages[i]);
 		break;
 
 	case PIN_FAST_BENCHMARK:
-	case PIN_BENCHMARK:
+	case PIN_BASIC_TEST:
 	case PIN_LONGTERM_BENCHMARK:
 		unpin_user_pages(pages, nr_pages);
 		break;
@@ -49,7 +49,7 @@ static void verify_dma_pinned(unsigned int cmd, struct page **pages,
 
 	switch (cmd) {
 	case PIN_FAST_BENCHMARK:
-	case PIN_BENCHMARK:
+	case PIN_BASIC_TEST:
 	case PIN_LONGTERM_BENCHMARK:
 		for (i = 0; i < nr_pages; i++) {
 			page = pages[i];
@@ -102,7 +102,7 @@ static int __gup_benchmark_ioctl(unsigned int cmd,
 			nr = get_user_pages_fast(addr, nr, gup->flags,
 						 pages + i);
 			break;
-		case GUP_BENCHMARK:
+		case GUP_BASIC_TEST:
 			nr = get_user_pages(addr, nr, gup->flags, pages + i,
 					    NULL);
 			break;
@@ -110,7 +110,7 @@ static int __gup_benchmark_ioctl(unsigned int cmd,
 			nr = pin_user_pages_fast(addr, nr, gup->flags,
 						 pages + i);
 			break;
-		case PIN_BENCHMARK:
+		case PIN_BASIC_TEST:
 			nr = pin_user_pages(addr, nr, gup->flags, pages + i,
 					    NULL);
 			break;
@@ -163,10 +163,10 @@ static long gup_benchmark_ioctl(struct file *filep, unsigned int cmd,
 
 	switch (cmd) {
 	case GUP_FAST_BENCHMARK:
-	case GUP_BENCHMARK:
 	case PIN_FAST_BENCHMARK:
-	case PIN_BENCHMARK:
 	case PIN_LONGTERM_BENCHMARK:
+	case GUP_BASIC_TEST:
+	case PIN_BASIC_TEST:
 		break;
 	default:
 		return -EINVAL;
* Unmerged path mm/gup_test.h
* Unmerged path tools/testing/selftests/vm/gup_benchmark.c
