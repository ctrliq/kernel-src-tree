selftests/vm/pkeys: introduce generic pkey abstractions

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-408.el8
commit-author Ram Pai <linuxram@us.ibm.com>
commit 604c496b227d300aac330aecd88ae5ffa28fbfc0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-408.el8/604c496b.failed

This introduces some generic abstractions and provides the corresponding
architecture-specfic implementations for these abstractions.

	Signed-off-by: Ram Pai <linuxram@us.ibm.com>
	Signed-off-by: Thiago Jung Bauermann <bauerman@linux.ibm.com>
	Signed-off-by: Sandipan Das <sandipan@linux.ibm.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Acked-by: Dave Hansen <dave.hansen@intel.com>
	Cc: Dave Hansen <dave.hansen@intel.com>
	Cc: Florian Weimer <fweimer@redhat.com>
	Cc: "Desnes A. Nunes do Rosario" <desnesn@linux.vnet.ibm.com>
	Cc: Ingo Molnar <mingo@kernel.org>
	Cc: "Aneesh Kumar K.V" <aneesh.kumar@linux.ibm.com>
	Cc: Michael Ellerman <mpe@ellerman.id.au>
	Cc: Michal Hocko <mhocko@kernel.org>
	Cc: Michal Suchanek <msuchanek@suse.de>
	Cc: Shuah Khan <shuah@kernel.org>
Link: http://lkml.kernel.org/r/1c977915e69fb7767fb0dbd55ac7656554b15b93.1585646528.git.sandipan@linux.ibm.com
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 604c496b227d300aac330aecd88ae5ffa28fbfc0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/testing/selftests/vm/pkey-helpers.h
#	tools/testing/selftests/vm/pkey-x86.h
#	tools/testing/selftests/x86/protection_keys.c
diff --cc tools/testing/selftests/x86/protection_keys.c
index 9b8be6a43dde,57c71056c93d..000000000000
--- a/tools/testing/selftests/x86/protection_keys.c
+++ b/tools/testing/selftests/x86/protection_keys.c
@@@ -1364,10 -1306,8 +1364,15 @@@ void test_executing_on_unreadable_memor
  	 */
  	madvise(p1, PAGE_SIZE, MADV_DONTNEED);
  	lots_o_noops_around_write(&scratch);
++<<<<<<< HEAD:tools/testing/selftests/x86/protection_keys.c
 +	do_not_expect_pk_fault("executing on PROT_EXEC memory");
 +	ptr_contents = read_ptr(p1);
 +	dprintf2("ptr (%p) contents@%d: %x\n", p1, __LINE__, ptr_contents);
 +	expected_pk_fault(pkey);
++=======
+ 	do_not_expect_pkey_fault("executing on PROT_EXEC memory");
+ 	expect_fault_on_read_execonly_key(p1, pkey);
++>>>>>>> 604c496b227d (selftests/vm/pkeys: introduce generic pkey abstractions):tools/testing/selftests/vm/protection_keys.c
  }
  
  void test_implicit_mprotect_exec_only_memory(int *ptr, u16 pkey)
@@@ -1393,10 -1333,8 +1398,15 @@@
  	/* Make sure this is an *instruction* fault */
  	madvise(p1, PAGE_SIZE, MADV_DONTNEED);
  	lots_o_noops_around_write(&scratch);
++<<<<<<< HEAD:tools/testing/selftests/x86/protection_keys.c
 +	do_not_expect_pk_fault("executing on PROT_EXEC memory");
 +	ptr_contents = read_ptr(p1);
 +	dprintf2("ptr (%p) contents@%d: %x\n", p1, __LINE__, ptr_contents);
 +	expected_pk_fault(UNKNOWN_PKEY);
++=======
+ 	do_not_expect_pkey_fault("executing on PROT_EXEC memory");
+ 	expect_fault_on_read_execonly_key(p1, UNKNOWN_PKEY);
++>>>>>>> 604c496b227d (selftests/vm/pkeys: introduce generic pkey abstractions):tools/testing/selftests/vm/protection_keys.c
  
  	/*
  	 * Put the memory back to non-PROT_EXEC.  Should clear the
* Unmerged path tools/testing/selftests/vm/pkey-helpers.h
* Unmerged path tools/testing/selftests/vm/pkey-x86.h
* Unmerged path tools/testing/selftests/vm/pkey-helpers.h
* Unmerged path tools/testing/selftests/vm/pkey-x86.h
* Unmerged path tools/testing/selftests/x86/protection_keys.c
