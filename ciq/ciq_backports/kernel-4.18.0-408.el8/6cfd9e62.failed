dmaengine: idxd: assign MSIX vectors to each WQ rather than roundrobin

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-408.el8
commit-author Dave Jiang <dave.jiang@intel.com>
commit 6cfd9e62e3297993f9f9d2d15f3acb14a0e8abbf
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-408.el8/6cfd9e62.failed

IOPS increased when changing MSIX vector to per WQ from roundrobin.
Allows descriptor to be completed by the submitter improves caching
locality.

	Suggested-by: Konstantin Ananyev <konstantin.ananyev@intel.com>
	Signed-off-by: Dave Jiang <dave.jiang@intel.com>
	Acked-by: Konstantin Ananyev <konstantin.ananyev@intel.com>
Link: https://lore.kernel.org/r/162456717326.1130457.15258077196523268356.stgit@djiang5-desk3.ch.intel.com
	Signed-off-by: Vinod Koul <vkoul@kernel.org>
(cherry picked from commit 6cfd9e62e3297993f9f9d2d15f3acb14a0e8abbf)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/dma/idxd/submit.c
diff --cc drivers/dma/idxd/submit.c
index 46c63171f8cc,425eeea9577b..000000000000
--- a/drivers/dma/idxd/submit.c
+++ b/drivers/dma/idxd/submit.c
@@@ -23,21 -22,13 +23,28 @@@ static struct idxd_desc *__get_desc(str
  		desc->hw->pasid = idxd->pasid;
  
  	/*
- 	 * Descriptor completion vectors are 1...N for MSIX. We will round
- 	 * robin through the N vectors.
+ 	 * On host, MSIX vecotr 0 is used for misc interrupt. Therefore when we match
+ 	 * vector 1:1 to the WQ id, we need to add 1
  	 */
++<<<<<<< HEAD
 +	wq->vec_ptr = desc->vector = (wq->vec_ptr % idxd->num_wq_irqs) + 1;
 +	if (!idxd->int_handles) {
 +		desc->hw->int_handle = wq->vec_ptr;
 +	} else {
 +		/*
 +		 * int_handles are only for descriptor completion. However for device
 +		 * MSIX enumeration, vec 0 is used for misc interrupts. Therefore even
 +		 * though we are rotating through 1...N for descriptor interrupts, we
 +		 * need to acqurie the int_handles from 0..N-1.
 +		 */
 +		desc->hw->int_handle = idxd->int_handles[desc->vector - 1];
 +	}
++=======
+ 	if (!idxd->int_handles)
+ 		desc->hw->int_handle = wq->id + 1;
+ 	else
+ 		desc->hw->int_handle = idxd->int_handles[wq->id];
++>>>>>>> 6cfd9e62e329 (dmaengine: idxd: assign MSIX vectors to each WQ rather than roundrobin)
  
  	return desc;
  }
diff --git a/drivers/dma/idxd/idxd.h b/drivers/dma/idxd/idxd.h
index 1f0991dec679..edfa81f0fe18 100644
--- a/drivers/dma/idxd/idxd.h
+++ b/drivers/dma/idxd/idxd.h
@@ -153,7 +153,6 @@ struct idxd_wq {
 	enum idxd_wq_state state;
 	unsigned long flags;
 	union wqcfg *wqcfg;
-	u32 vec_ptr;		/* interrupt steering */
 	struct dsa_hw_desc **hw_descs;
 	int num_descs;
 	union {
@@ -290,7 +289,6 @@ struct idxd_desc {
 	struct list_head list;
 	int id;
 	int cpu;
-	unsigned int vector;
 	struct idxd_wq *wq;
 };
 
* Unmerged path drivers/dma/idxd/submit.c
