bnxt_en: parse and report result field when NVRAM package install fails

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-408.el8
commit-author Kalesh AP <kalesh-anakkur.purayil@broadcom.com>
commit ab0bed4bf6fae8a42cf3b08b38e1fffb1a79193a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-408.el8/ab0bed4b.failed

Instead of always returning -ENOPKG, decode the firmware error
code further when the HWRM_NVM_INSTALL_UPDATE firmware call fails.
Return a more suitable error code to userspace and log an error
in dmesg.

This is version 2 of the earlier patch that was reverted:

02acd399533e ("bnxt_en: parse result field when NVRAM package install fails")

In this new version, if the call is made through devlink instead of
ethtool, we'll also set the error message in extack.

Link: https://lore.kernel.org/netdev/20220307141358.4d52462e@kicinski-fedora-pc1c0hjn.dhcp.thefacebook.com/
	Reviewed-by: Somnath Kotur <somnath.kotur@broadcom.com>
	Reviewed-by: Pavan Chebbi <pavan.chebbi@broadcom.com>
	Signed-off-by: Kalesh AP <kalesh-anakkur.purayil@broadcom.com>
	Signed-off-by: Michael Chan <michael.chan@broadcom.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit ab0bed4bf6fae8a42cf3b08b38e1fffb1a79193a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/broadcom/bnxt/bnxt_ethtool.c
#	drivers/net/ethernet/broadcom/bnxt/bnxt_ethtool.h
diff --cc drivers/net/ethernet/broadcom/bnxt/bnxt_ethtool.c
index acea2c24428a,7191e5d74208..000000000000
--- a/drivers/net/ethernet/broadcom/bnxt/bnxt_ethtool.c
+++ b/drivers/net/ethernet/broadcom/bnxt/bnxt_ethtool.c
@@@ -2487,7 -2507,18 +2495,22 @@@ static int bnxt_flash_firmware_from_fil
  	return rc;
  }
  
++<<<<<<< HEAD
 +static int nvm_update_err_to_stderr(struct net_device *dev, u8 result)
++=======
+ #define MSG_INTEGRITY_ERR "PKG install error : Data integrity on NVM"
+ #define MSG_INVALID_PKG "PKG install error : Invalid package"
+ #define MSG_AUTHENTICATION_ERR "PKG install error : Authentication error"
+ #define MSG_INVALID_DEV "PKG install error : Invalid device"
+ #define MSG_INTERNAL_ERR "PKG install error : Internal error"
+ #define MSG_NO_PKG_UPDATE_AREA_ERR "PKG update area not created in nvram"
+ #define MSG_NO_SPACE_ERR "PKG insufficient update area in nvram"
+ #define MSG_ANTI_ROLLBACK_ERR "HWRM_NVM_INSTALL_UPDATE failure due to Anti-rollback detected"
+ #define MSG_GENERIC_FAILURE_ERR "HWRM_NVM_INSTALL_UPDATE failure"
+ 
+ static int nvm_update_err_to_stderr(struct net_device *dev, u8 result,
+ 				    struct netlink_ext_ack *extack)
++>>>>>>> ab0bed4bf6fa (bnxt_en: parse and report result field when NVRAM package install fails)
  {
  	switch (result) {
  	case NVM_INSTALL_UPDATE_RESP_RESULT_INVALID_TYPE_PARAMETER:
@@@ -2496,7 -2527,7 +2519,11 @@@
  	case NVM_INSTALL_UPDATE_RESP_RESULT_INSTALL_CHECKSUM_ERROR:
  	case NVM_INSTALL_UPDATE_RESP_RESULT_ITEM_NOT_FOUND:
  	case NVM_INSTALL_UPDATE_RESP_RESULT_ITEM_LOCKED:
++<<<<<<< HEAD
 +		netdev_err(dev, "PKG install error : Data integrity on NVM\n");
++=======
+ 		BNXT_NVM_ERR_MSG(dev, extack, MSG_INTEGRITY_ERR);
++>>>>>>> ab0bed4bf6fa (bnxt_en: parse and report result field when NVRAM package install fails)
  		return -EINVAL;
  	case NVM_INSTALL_UPDATE_RESP_RESULT_INVALID_PREREQUISITE:
  	case NVM_INSTALL_UPDATE_RESP_RESULT_INVALID_FILE_HEADER:
@@@ -2511,20 -2542,20 +2538,34 @@@
  	case NVM_INSTALL_UPDATE_RESP_RESULT_INVALID_DIRECTIVE:
  	case NVM_INSTALL_UPDATE_RESP_RESULT_DUPLICATE_ITEM:
  	case NVM_INSTALL_UPDATE_RESP_RESULT_ZERO_LENGTH_ITEM:
++<<<<<<< HEAD
 +		netdev_err(dev, "PKG install error : Invalid package\n");
 +		return -ENOPKG;
 +	case NVM_INSTALL_UPDATE_RESP_RESULT_INSTALL_AUTHENTICATION_ERROR:
 +		netdev_err(dev, "PKG install error : Authentication error\n");
++=======
+ 		BNXT_NVM_ERR_MSG(dev, extack, MSG_INVALID_PKG);
+ 		return -ENOPKG;
+ 	case NVM_INSTALL_UPDATE_RESP_RESULT_INSTALL_AUTHENTICATION_ERROR:
+ 		BNXT_NVM_ERR_MSG(dev, extack, MSG_AUTHENTICATION_ERR);
++>>>>>>> ab0bed4bf6fa (bnxt_en: parse and report result field when NVRAM package install fails)
  		return -EPERM;
  	case NVM_INSTALL_UPDATE_RESP_RESULT_UNSUPPORTED_CHIP_REV:
  	case NVM_INSTALL_UPDATE_RESP_RESULT_UNSUPPORTED_DEVICE_ID:
  	case NVM_INSTALL_UPDATE_RESP_RESULT_UNSUPPORTED_SUBSYS_VENDOR:
  	case NVM_INSTALL_UPDATE_RESP_RESULT_UNSUPPORTED_SUBSYS_ID:
  	case NVM_INSTALL_UPDATE_RESP_RESULT_UNSUPPORTED_PLATFORM:
++<<<<<<< HEAD
 +		netdev_err(dev, "PKG install error : Invalid device\n");
 +		return -EOPNOTSUPP;
 +	default:
 +		netdev_err(dev, "PKG install error : Internal error\n");
++=======
+ 		BNXT_NVM_ERR_MSG(dev, extack, MSG_INVALID_DEV);
+ 		return -EOPNOTSUPP;
+ 	default:
+ 		BNXT_NVM_ERR_MSG(dev, extack, MSG_INTERNAL_ERR);
++>>>>>>> ab0bed4bf6fa (bnxt_en: parse and report result field when NVRAM package install fails)
  		return -EIO;
  	}
  }
@@@ -2683,7 -2712,7 +2722,11 @@@ pkg_abort
  	if (resp->result) {
  		netdev_err(dev, "PKG install error = %d, problem_item = %d\n",
  			   (s8)resp->result, (int)resp->problem_item);
++<<<<<<< HEAD
 +		rc = nvm_update_err_to_stderr(dev, resp->result);
++=======
+ 		rc = nvm_update_err_to_stderr(dev, resp->result, extack);
++>>>>>>> ab0bed4bf6fa (bnxt_en: parse and report result field when NVRAM package install fails)
  	}
  	if (rc == -EACCES)
  		bnxt_print_admin_err(bp);
diff --cc drivers/net/ethernet/broadcom/bnxt/bnxt_ethtool.h
index df9617aeea34,a59284215e78..000000000000
--- a/drivers/net/ethernet/broadcom/bnxt/bnxt_ethtool.h
+++ b/drivers/net/ethernet/broadcom/bnxt/bnxt_ethtool.h
@@@ -49,10 -49,13 +49,15 @@@ u32 bnxt_get_rxfh_indir_size(struct net
  u32 _bnxt_fw_to_ethtool_adv_spds(u16, u8);
  u32 bnxt_fw_to_ethtool_speed(u16);
  u16 bnxt_get_fw_auto_link_speeds(u32);
 +int bnxt_flash_package_from_fw_obj(struct net_device *dev, const struct firmware *fw,
++<<<<<<< HEAD
 +				   u32 install_type);
  int bnxt_hwrm_nvm_get_dev_info(struct bnxt *bp,
  			       struct hwrm_nvm_get_dev_info_output *nvm_dev_info);
 -int bnxt_hwrm_firmware_reset(struct net_device *dev, u8 proc_type,
 -			     u8 self_reset, u8 flags);
 -int bnxt_flash_package_from_fw_obj(struct net_device *dev, const struct firmware *fw,
++=======
+ 				   u32 install_type, struct netlink_ext_ack *extack);
+ int bnxt_get_pkginfo(struct net_device *dev, char *ver, int size);
++>>>>>>> ab0bed4bf6fa (bnxt_en: parse and report result field when NVRAM package install fails)
  void bnxt_ethtool_init(struct bnxt *bp);
  void bnxt_ethtool_free(struct bnxt *bp);
  
diff --git a/drivers/net/ethernet/broadcom/bnxt/bnxt_devlink.c b/drivers/net/ethernet/broadcom/bnxt/bnxt_devlink.c
index 449597f7c74c..7a462f8267ac 100644
--- a/drivers/net/ethernet/broadcom/bnxt/bnxt_devlink.c
+++ b/drivers/net/ethernet/broadcom/bnxt/bnxt_devlink.c
@@ -34,7 +34,7 @@ bnxt_dl_flash_update(struct devlink *dl,
 	}
 
 	devlink_flash_update_status_notify(dl, "Preparing to flash", NULL, 0, 0);
-	rc = bnxt_flash_package_from_fw_obj(bp->dev, params->fw, 0);
+	rc = bnxt_flash_package_from_fw_obj(bp->dev, params->fw, 0, extack);
 	if (!rc)
 		devlink_flash_update_status_notify(dl, "Flashing done", NULL, 0, 0);
 	else
* Unmerged path drivers/net/ethernet/broadcom/bnxt/bnxt_ethtool.c
* Unmerged path drivers/net/ethernet/broadcom/bnxt/bnxt_ethtool.h
