bnxt_en: consolidate fw devlink health reporters

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-408.el8
commit-author Edwin Peer <edwin.peer@broadcom.com>
commit 2bb21b8db5c0e515549d7d1d0de5dc905a32a338
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-408.el8/2bb21b8d.failed

Merge 'fw' and 'fw_fatal' health reporters.  There is no longer a need
to distinguish between firmware reporters. Only bonafide errors are
reported now and no reports were being generated for the 'fw' reporter.

	Signed-off-by: Edwin Peer <edwin.peer@broadcom.com>
	Signed-off-by: Michael Chan <michael.chan@broadcom.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 2bb21b8db5c0e515549d7d1d0de5dc905a32a338)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/broadcom/bnxt/bnxt.h
#	drivers/net/ethernet/broadcom/bnxt/bnxt_devlink.c
diff --cc drivers/net/ethernet/broadcom/bnxt/bnxt.h
index a76732cbea2c,2873f600a7dd..000000000000
--- a/drivers/net/ethernet/broadcom/bnxt/bnxt.h
+++ b/drivers/net/ethernet/broadcom/bnxt/bnxt.h
@@@ -1540,12 -1551,6 +1540,15 @@@ struct bnxt_fw_health 
  	u32 echo_req_data1;
  	u32 echo_req_data2;
  	struct devlink_health_reporter	*fw_reporter;
++<<<<<<< HEAD
 +	struct devlink_health_reporter *fw_reset_reporter;
 +	struct devlink_health_reporter *fw_fatal_reporter;
++=======
++>>>>>>> 2bb21b8db5c0 (bnxt_en: consolidate fw devlink health reporters)
 +};
 +
 +struct bnxt_fw_reporter_ctx {
 +	unsigned long sp_event;
  };
  
  #define BNXT_FW_HEALTH_REG_TYPE_MASK	3
diff --cc drivers/net/ethernet/broadcom/bnxt/bnxt_devlink.c
index d875469f72ce,a295d2042b6e..000000000000
--- a/drivers/net/ethernet/broadcom/bnxt/bnxt_devlink.c
+++ b/drivers/net/ethernet/broadcom/bnxt/bnxt_devlink.c
@@@ -42,9 -51,29 +42,35 @@@ bnxt_dl_flash_update(struct devlink *dl
  	return rc;
  }
  
++<<<<<<< HEAD
 +static int bnxt_fw_reporter_diagnose(struct devlink_health_reporter *reporter,
 +				     struct devlink_fmsg *fmsg,
 +				     struct netlink_ext_ack *extack)
++=======
+ static int bnxt_hwrm_remote_dev_reset_set(struct bnxt *bp, bool remote_reset)
+ {
+ 	struct hwrm_func_cfg_input *req;
+ 	int rc;
+ 
+ 	if (~bp->fw_cap & BNXT_FW_CAP_HOT_RESET_IF)
+ 		return -EOPNOTSUPP;
+ 
+ 	rc = hwrm_req_init(bp, req, HWRM_FUNC_CFG);
+ 	if (rc)
+ 		return rc;
+ 
+ 	req->fid = cpu_to_le16(0xffff);
+ 	req->enables = cpu_to_le32(FUNC_CFG_REQ_ENABLES_HOT_RESET_IF_SUPPORT);
+ 	if (remote_reset)
+ 		req->flags = cpu_to_le32(FUNC_CFG_REQ_FLAGS_HOT_RESET_IF_EN_DIS);
+ 
+ 	return hwrm_req_send(bp, req);
+ }
+ 
+ static int bnxt_fw_diagnose(struct devlink_health_reporter *reporter,
+ 			    struct devlink_fmsg *fmsg,
+ 			    struct netlink_ext_ack *extack)
++>>>>>>> 2bb21b8db5c0 (bnxt_en: consolidate fw devlink health reporters)
  {
  	struct bnxt *bp = devlink_health_reporter_priv(reporter);
  	u32 val;
@@@ -81,47 -110,14 +107,53 @@@
  	return 0;
  }
  
++<<<<<<< HEAD
 +static const struct devlink_health_reporter_ops bnxt_dl_fw_reporter_ops = {
 +	.name = "fw",
 +	.diagnose = bnxt_fw_reporter_diagnose,
 +};
 +
 +static int bnxt_fw_reset_recover(struct devlink_health_reporter *reporter,
 +				 void *priv_ctx,
 +				 struct netlink_ext_ack *extack)
++=======
+ static int bnxt_fw_recover(struct devlink_health_reporter *reporter,
+ 			   void *priv_ctx,
+ 			   struct netlink_ext_ack *extack)
++>>>>>>> 2bb21b8db5c0 (bnxt_en: consolidate fw devlink health reporters)
 +{
 +	struct bnxt *bp = devlink_health_reporter_priv(reporter);
 +
 +	if (!priv_ctx)
 +		return -EOPNOTSUPP;
 +
 +	bnxt_fw_reset(bp);
 +	return -EINPROGRESS;
 +}
 +
 +static const
 +struct devlink_health_reporter_ops bnxt_dl_fw_reset_reporter_ops = {
 +	.name = "fw_reset",
 +	.recover = bnxt_fw_reset_recover,
 +};
 +
 +static int bnxt_fw_fatal_recover(struct devlink_health_reporter *reporter,
 +				 void *priv_ctx,
 +				 struct netlink_ext_ack *extack)
  {
  	struct bnxt *bp = devlink_health_reporter_priv(reporter);
 +	struct bnxt_fw_reporter_ctx *fw_reporter_ctx = priv_ctx;
 +	unsigned long event;
 +
 +	if (!priv_ctx)
 +		return -EOPNOTSUPP;
  
 -	set_bit(BNXT_STATE_RECOVER, &bp->state);
 -	__bnxt_fw_recover(bp);
 +	bp->fw_health->fatal = true;
 +	event = fw_reporter_ctx->sp_event;
 +	if (event == BNXT_FW_RESET_NOTIFY_SP_EVENT)
 +		bnxt_fw_reset(bp);
 +	else if (event == BNXT_FW_EXCEPTION_SP_EVENT)
 +		bnxt_fw_exception(bp);
  
  	return -EINPROGRESS;
  }
@@@ -136,52 -132,16 +168,57 @@@ void bnxt_dl_fw_reporters_create(struc
  {
  	struct bnxt_fw_health *health = bp->fw_health;
  
- 	if (!health)
+ 	if (!health || health->fw_reporter)
  		return;
  
++<<<<<<< HEAD
 +	if (!(bp->fw_cap & BNXT_FW_CAP_HOT_RESET) || health->fw_reset_reporter)
 +		goto err_recovery;
 +
 +	health->fw_reset_reporter =
 +		devlink_health_reporter_create(bp->dl,
 +					       &bnxt_dl_fw_reset_reporter_ops,
 +					       0, bp);
 +	if (IS_ERR(health->fw_reset_reporter)) {
 +		netdev_warn(bp->dev, "Failed to create FW fatal health reporter, rc = %ld\n",
 +			    PTR_ERR(health->fw_reset_reporter));
 +		health->fw_reset_reporter = NULL;
 +		bp->fw_cap &= ~BNXT_FW_CAP_HOT_RESET;
 +	}
 +
 +err_recovery:
 +	if (!(bp->fw_cap & BNXT_FW_CAP_ERROR_RECOVERY))
 +		return;
 +
 +	if (!health->fw_reporter) {
 +		health->fw_reporter =
 +			devlink_health_reporter_create(bp->dl,
 +						       &bnxt_dl_fw_reporter_ops,
 +						       0, bp);
 +		if (IS_ERR(health->fw_reporter)) {
 +			netdev_warn(bp->dev, "Failed to create FW health reporter, rc = %ld\n",
 +				    PTR_ERR(health->fw_reporter));
 +			health->fw_reporter = NULL;
 +			bp->fw_cap &= ~BNXT_FW_CAP_ERROR_RECOVERY;
 +			return;
 +		}
 +	}
 +
 +	if (health->fw_fatal_reporter)
 +		return;
 +
 +	health->fw_fatal_reporter =
 +		devlink_health_reporter_create(bp->dl,
 +					       &bnxt_dl_fw_fatal_reporter_ops,
++=======
+ 	health->fw_reporter =
+ 		devlink_health_reporter_create(bp->dl, &bnxt_dl_fw_reporter_ops,
++>>>>>>> 2bb21b8db5c0 (bnxt_en: consolidate fw devlink health reporters)
  					       0, bp);
- 	if (IS_ERR(health->fw_fatal_reporter)) {
- 		netdev_warn(bp->dev, "Failed to create FW fatal health reporter, rc = %ld\n",
- 			    PTR_ERR(health->fw_fatal_reporter));
- 		health->fw_fatal_reporter = NULL;
+ 	if (IS_ERR(health->fw_reporter)) {
+ 		netdev_warn(bp->dev, "Failed to create FW health reporter, rc = %ld\n",
+ 			    PTR_ERR(health->fw_reporter));
+ 		health->fw_reporter = NULL;
  		bp->fw_cap &= ~BNXT_FW_CAP_ERROR_RECOVERY;
  	}
  }
@@@ -206,50 -160,24 +243,54 @@@ void bnxt_dl_fw_reporters_destroy(struc
  		devlink_health_reporter_destroy(health->fw_reporter);
  		health->fw_reporter = NULL;
  	}
- 
- 	if (health->fw_fatal_reporter) {
- 		devlink_health_reporter_destroy(health->fw_fatal_reporter);
- 		health->fw_fatal_reporter = NULL;
- 	}
  }
  
 -void bnxt_devlink_health_fw_report(struct bnxt *bp)
 +void bnxt_devlink_health_report(struct bnxt *bp, unsigned long event)
  {
  	struct bnxt_fw_health *fw_health = bp->fw_health;
 +	struct bnxt_fw_reporter_ctx fw_reporter_ctx;
 +
 +	fw_reporter_ctx.sp_event = event;
 +	switch (event) {
 +	case BNXT_FW_RESET_NOTIFY_SP_EVENT:
 +		if (test_bit(BNXT_STATE_FW_FATAL_COND, &bp->state)) {
 +			if (!fw_health->fw_fatal_reporter)
 +				return;
 +
 +			devlink_health_report(fw_health->fw_fatal_reporter,
 +					      "FW fatal async event received",
 +					      &fw_reporter_ctx);
 +			return;
 +		}
 +		if (!fw_health->fw_reset_reporter)
 +			return;
  
 -	if (!fw_health)
 +		devlink_health_report(fw_health->fw_reset_reporter,
 +				      "FW non-fatal reset event received",
 +				      &fw_reporter_ctx);
  		return;
  
++<<<<<<< HEAD
 +	case BNXT_FW_EXCEPTION_SP_EVENT:
 +		if (!fw_health->fw_fatal_reporter)
 +			return;
 +
 +		devlink_health_report(fw_health->fw_fatal_reporter,
 +				      "FW fatal error reported",
 +				      &fw_reporter_ctx);
 +		return;
 +	}
++=======
+ 	if (!fw_health->fw_reporter) {
+ 		__bnxt_fw_recover(bp);
+ 		return;
+ 	}
+ 
+ 	devlink_health_report(fw_health->fw_reporter, "FW error reported", NULL);
++>>>>>>> 2bb21b8db5c0 (bnxt_en: consolidate fw devlink health reporters)
  }
  
 -void bnxt_dl_health_fw_status_update(struct bnxt *bp, bool healthy)
 +void bnxt_dl_health_status_update(struct bnxt *bp, bool healthy)
  {
  	struct bnxt_fw_health *health = bp->fw_health;
  	u8 state;
@@@ -259,24 -187,15 +300,35 @@@
  	else
  		state = DEVLINK_HEALTH_REPORTER_STATE_ERROR;
  
++<<<<<<< HEAD
 +	if (health->fatal)
 +		devlink_health_reporter_state_update(health->fw_fatal_reporter,
 +						     state);
 +	else
 +		devlink_health_reporter_state_update(health->fw_reset_reporter,
 +						     state);
 +
 +	health->fatal = false;
++=======
+ 	devlink_health_reporter_state_update(health->fw_reporter, state);
++>>>>>>> 2bb21b8db5c0 (bnxt_en: consolidate fw devlink health reporters)
  }
  
 -void bnxt_dl_health_fw_recovery_done(struct bnxt *bp)
 +void bnxt_dl_health_recovery_done(struct bnxt *bp)
  {
++<<<<<<< HEAD
 +	struct bnxt_fw_health *hlth = bp->fw_health;
 +
 +	if (hlth->fatal)
 +		devlink_health_reporter_recovery_done(hlth->fw_fatal_reporter);
 +	else
 +		devlink_health_reporter_recovery_done(hlth->fw_reset_reporter);
++=======
+ 	struct bnxt_dl *dl = devlink_priv(bp->dl);
+ 
+ 	devlink_health_reporter_recovery_done(bp->fw_health->fw_reporter);
+ 	bnxt_hwrm_remote_dev_reset_set(bp, dl->remote_reset);
++>>>>>>> 2bb21b8db5c0 (bnxt_en: consolidate fw devlink health reporters)
  }
  
  static int bnxt_dl_info_get(struct devlink *dl, struct devlink_info_req *req,
* Unmerged path drivers/net/ethernet/broadcom/bnxt/bnxt.h
* Unmerged path drivers/net/ethernet/broadcom/bnxt/bnxt_devlink.c
