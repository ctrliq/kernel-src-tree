selinux: simplify away security_policydb_len()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-408.el8
commit-author Ondrej Mosnacek <omosnace@redhat.com>
commit 66ccd2560affc6e653ef7372ea36fb825743d186
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-408.el8/66ccd256.failed

Remove the security_policydb_len() calls from sel_open_policy() and
instead update the inode size from the size returned from
security_read_policy().

Since after this change security_policydb_len() is only called from
security_load_policy(), remove it entirely and just open-code it there.

Also, since security_load_policy() is always called with policy_mutex
held, make it dereference the policy pointer directly and drop the
unnecessary RCU locking.

	Signed-off-by: Ondrej Mosnacek <omosnace@redhat.com>
	Acked-by: Stephen Smalley <stephen.smalley.work@gmail.com>
	Signed-off-by: Paul Moore <paul@paul-moore.com>
(cherry picked from commit 66ccd2560affc6e653ef7372ea36fb825743d186)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	security/selinux/ss/services.c
diff --cc security/selinux/ss/services.c
index 45cded883bbc,8dc111fbe23a..000000000000
--- a/security/selinux/ss/services.c
+++ b/security/selinux/ss/services.c
@@@ -2284,22 -2313,21 +2284,25 @@@ int security_load_policy(struct selinux
  
  	*newpolicyp = newpolicy;
  	return 0;
 +err:
 +	selinux_policy_free(newpolicy);
 +	return rc;
 +}
  
 -err_free_isids:
 -	sidtab_destroy(newpolicy->sidtab);
 -err_mapping:
 -	kfree(newpolicy->map.mapping);
 -err_policydb:
 -	policydb_destroy(&newpolicy->policydb);
 -err_sidtab:
 -	kfree(newpolicy->sidtab);
 -err_policy:
 -	kfree(newpolicy);
++<<<<<<< HEAD
 +size_t security_policydb_len(struct selinux_state *state)
 +{
 +	size_t len;
  
 -	return rc;
 +	read_lock(&state->ss->policy_rwlock);
 +	len = state->ss->policy->policydb.len;
 +	read_unlock(&state->ss->policy_rwlock);
 +
 +	return len;
  }
  
++=======
++>>>>>>> 66ccd2560aff (selinux: simplify away security_policydb_len())
  /**
   * security_port_sid - Obtain the SID for a port.
   * @protocol: protocol number
@@@ -3780,10 -3900,7 +3784,14 @@@ int security_read_policy(struct selinux
  	fp.data = *data;
  	fp.len = *len;
  
++<<<<<<< HEAD
 +	read_lock(&state->ss->policy_rwlock);
 +	rc = policydb_write(&state->ss->policy->policydb, &fp);
 +	read_unlock(&state->ss->policy_rwlock);
 +
++=======
+ 	rc = policydb_write(&policy->policydb, &fp);
++>>>>>>> 66ccd2560aff (selinux: simplify away security_policydb_len())
  	if (rc)
  		return rc;
  
diff --git a/security/selinux/include/security.h b/security/selinux/include/security.h
index aedc0702f5dd..f9c061dc4884 100644
--- a/security/selinux/include/security.h
+++ b/security/selinux/include/security.h
@@ -228,7 +228,6 @@ void selinux_policy_cancel(struct selinux_state *state,
 			struct selinux_policy *policy);
 int security_read_policy(struct selinux_state *state,
 			 void **data, size_t *len);
-size_t security_policydb_len(struct selinux_state *state);
 
 int security_policycap_supported(struct selinux_state *state,
 				 unsigned int req_cap);
diff --git a/security/selinux/selinuxfs.c b/security/selinux/selinuxfs.c
index 6fc0621023f4..19a4d3567525 100644
--- a/security/selinux/selinuxfs.c
+++ b/security/selinux/selinuxfs.c
@@ -412,16 +412,16 @@ static int sel_open_policy(struct inode *inode, struct file *filp)
 	if (!plm)
 		goto err;
 
-	if (i_size_read(inode) != security_policydb_len(state)) {
-		inode_lock(inode);
-		i_size_write(inode, security_policydb_len(state));
-		inode_unlock(inode);
-	}
-
 	rc = security_read_policy(state, &plm->data, &plm->len);
 	if (rc)
 		goto err;
 
+	if ((size_t)i_size_read(inode) != plm->len) {
+		inode_lock(inode);
+		i_size_write(inode, plm->len);
+		inode_unlock(inode);
+	}
+
 	fsi->policy_opened = 1;
 
 	filp->private_data = plm;
* Unmerged path security/selinux/ss/services.c
