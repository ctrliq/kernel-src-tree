dm: fix dm_io and dm_target_io flags race condition on Alpha

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-408.el8
commit-author Mikulas Patocka <mpatocka@redhat.com>
commit aad5b23ebf21573a32b6f07644f028d64492a5d6
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-408.el8/aad5b23e.failed

Early alpha processors cannot write a single byte or short; they read 8
bytes, modify the value in registers and write back 8 bytes.

This could cause race condition in the structure dm_io - if the fields
flags and io_count are modified simultaneously.

Fix this bug by using 32-bit flags if we are on Alpha and if we are
compiling for a processor that doesn't have the byte-word-extension.

	Signed-off-by: Mikulas Patocka <mpatocka@redhat.com>
Fixes: bd4a6dd241ae ("dm: reduce size of dm_io and dm_target_io structs")
[snitzer: Jens allowed this change since Mikulas owns a relevant Alpha!]
	Acked-by: Jens Axboe <axboe@kernel.dk>
	Signed-off-by: Mike Snitzer <snitzer@kernel.org>
(cherry picked from commit aad5b23ebf21573a32b6f07644f028d64492a5d6)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/md/dm-core.h
diff --cc drivers/md/dm-core.h
index a9c78c74b3c7,4277853c7535..000000000000
--- a/drivers/md/dm-core.h
+++ b/drivers/md/dm-core.h
@@@ -195,9 -207,10 +195,14 @@@ struct dm_table 
  /*
   * One of these is allocated per clone bio.
   */
 -#define DM_TIO_MAGIC 28714
 +#define DM_TIO_MAGIC 7282014
  struct dm_target_io {
++<<<<<<< HEAD
 +	unsigned int magic;
++=======
+ 	unsigned short magic;
+ 	blk_short_t flags;
++>>>>>>> aad5b23ebf21 (dm: fix dm_io and dm_target_io flags race condition on Alpha)
  	unsigned int target_bio_nr;
  	struct dm_io *io;
  	struct dm_target *ti;
@@@ -210,9 -241,10 +215,14 @@@
   * One of these is allocated per original bio.
   * It contains the first clone used for that original.
   */
 -#define DM_IO_MAGIC 19577
 +#define DM_IO_MAGIC 5191977
  struct dm_io {
++<<<<<<< HEAD
 +	unsigned int magic;
++=======
+ 	unsigned short magic;
+ 	blk_short_t flags;
++>>>>>>> aad5b23ebf21 (dm: fix dm_io and dm_target_io flags race condition on Alpha)
  	atomic_t io_count;
  	struct mapped_device *md;
  	struct bio *orig_bio;
* Unmerged path drivers/md/dm-core.h
diff --git a/include/linux/blk_types.h b/include/linux/blk_types.h
index 0269e6fb5d7a..af8b028dea8d 100644
--- a/include/linux/blk_types.h
+++ b/include/linux/blk_types.h
@@ -26,8 +26,10 @@ typedef void (bio_end_io_t) (struct bio *);
  */
 #if defined(CONFIG_ALPHA) && !defined(__alpha_bwx__)
 typedef u32 __bitwise blk_status_t;
+typedef u32 blk_short_t;
 #else
 typedef u8 __bitwise blk_status_t;
+typedef u16 blk_short_t;
 #endif
 #define	BLK_STS_OK 0
 #define BLK_STS_NOTSUPP		((__force blk_status_t)1)
