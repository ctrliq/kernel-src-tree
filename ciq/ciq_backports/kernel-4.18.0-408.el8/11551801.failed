selftests/vm/pkeys: fix pkey_disable_clear()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-408.el8
commit-author Ram Pai <linuxram@us.ibm.com>
commit 11551801a71c84b9713abf1b588933eea141e362
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-408.el8/11551801.failed

Currently, pkey_disable_clear() sets the specified bits instead clearing
them.  This has been dead code up to now because its only callers i.e.
pkey_access/write_allow() are also unused.

	Signed-off-by: Ram Pai <linuxram@us.ibm.com>
	Signed-off-by: Sandipan Das <sandipan@linux.ibm.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Acked-by: Dave Hansen <dave.hansen@intel.com>
	Cc: Dave Hansen <dave.hansen@intel.com>
	Cc: Florian Weimer <fweimer@redhat.com>
	Cc: "Desnes A. Nunes do Rosario" <desnesn@linux.vnet.ibm.com>
	Cc: Ingo Molnar <mingo@kernel.org>
	Cc: Thiago Jung Bauermann <bauerman@linux.ibm.com>
	Cc: "Aneesh Kumar K.V" <aneesh.kumar@linux.ibm.com>
	Cc: Michael Ellerman <mpe@ellerman.id.au>
	Cc: Michal Hocko <mhocko@kernel.org>
	Cc: Michal Suchanek <msuchanek@suse.de>
	Cc: Shuah Khan <shuah@kernel.org>
Link: http://lkml.kernel.org/r/1f70bca60330a85dca42c3cd98212bb1cdf5a076.1585646528.git.sandipan@linux.ibm.com
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 11551801a71c84b9713abf1b588933eea141e362)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/testing/selftests/x86/protection_keys.c
diff --cc tools/testing/selftests/x86/protection_keys.c
index 5d546dcdbc80,4b1ddb526228..000000000000
--- a/tools/testing/selftests/x86/protection_keys.c
+++ b/tools/testing/selftests/x86/protection_keys.c
@@@ -495,20 -418,20 +495,24 @@@ void pkey_disable_clear(int pkey, int f
  			pkey, pkey, pkey_rights);
  	pkey_assert(pkey_rights >= 0);
  
- 	pkey_rights |= flags;
+ 	pkey_rights &= ~flags;
  
  	ret = hw_pkey_set(pkey, pkey_rights, 0);
 -	shadow_pkey_reg = set_pkey_bits(shadow_pkey_reg, pkey, pkey_rights);
 +	/* pkru and flags have the same format */
 +	shadow_pkru &= ~(flags << (pkey * 2));
  	pkey_assert(ret >= 0);
  
  	pkey_rights = hw_pkey_get(pkey, syscall_flags);
  	dprintf1("%s(%d) hw_pkey_get(%d): %x\n", __func__,
  			pkey, pkey, pkey_rights);
  
 -	dprintf1("%s(%d) pkey_reg: 0x%016llx\n", __func__,
 -			pkey, read_pkey_reg());
 +	dprintf1("%s(%d) pkru: 0x%x\n", __func__, pkey, rdpkru());
  	if (flags)
++<<<<<<< HEAD:tools/testing/selftests/x86/protection_keys.c
 +		assert(rdpkru() > orig_pkru);
++=======
+ 		assert(read_pkey_reg() < orig_pkey_reg);
++>>>>>>> 11551801a71c (selftests/vm/pkeys: fix pkey_disable_clear()):tools/testing/selftests/vm/protection_keys.c
  }
  
  void pkey_write_allow(int pkey)
* Unmerged path tools/testing/selftests/x86/protection_keys.c
