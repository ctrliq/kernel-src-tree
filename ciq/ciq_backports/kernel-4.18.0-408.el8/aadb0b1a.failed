bnxt_en: remove fw_reset devlink health reporter

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-408.el8
commit-author Edwin Peer <edwin.peer@broadcom.com>
commit aadb0b1a0b3628291dff2dab8c8af1b63df1cae9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-408.el8/aadb0b1a.failed

Firmware resets initiated by the user are not errors and should not
be reported via devlink. Once only unsolicited resets remain, it is no
longer sensible to maintain a separate fw_reset reporter.

	Signed-off-by: Edwin Peer <edwin.peer@broadcom.com>
	Signed-off-by: Michael Chan <michael.chan@broadcom.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit aadb0b1a0b3628291dff2dab8c8af1b63df1cae9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/broadcom/bnxt/bnxt.c
#	drivers/net/ethernet/broadcom/bnxt/bnxt.h
#	drivers/net/ethernet/broadcom/bnxt/bnxt_devlink.c
diff --cc drivers/net/ethernet/broadcom/bnxt/bnxt.c
index 56316640722e,1251d78ffd46..000000000000
--- a/drivers/net/ethernet/broadcom/bnxt/bnxt.c
+++ b/drivers/net/ethernet/broadcom/bnxt/bnxt.c
@@@ -2135,13 -2134,19 +2135,24 @@@ static int bnxt_async_event_process(str
  		bp->fw_reset_max_dsecs = le16_to_cpu(cmpl->timestamp_hi);
  		if (!bp->fw_reset_max_dsecs)
  			bp->fw_reset_max_dsecs = BNXT_DFLT_FW_RST_MAX_DSECS;
++<<<<<<< HEAD
 +		if (EVENT_DATA1_RESET_NOTIFY_FATAL(data1)) {
 +			fatal_str = "fatal";
++=======
+ 		if (EVENT_DATA1_RESET_NOTIFY_FW_ACTIVATION(data1)) {
+ 			set_bit(BNXT_STATE_FW_ACTIVATE_RESET, &bp->state);
+ 		} else if (EVENT_DATA1_RESET_NOTIFY_FATAL(data1)) {
+ 			type_str = "Fatal";
++>>>>>>> aadb0b1a0b36 (bnxt_en: remove fw_reset devlink health reporter)
  			set_bit(BNXT_STATE_FW_FATAL_COND, &bp->state);
+ 		} else if (data2 && BNXT_FW_STATUS_HEALTHY !=
+ 			   EVENT_DATA2_RESET_NOTIFY_FW_STATUS_CODE(data2)) {
+ 			type_str = "Non-fatal";
+ 			set_bit(BNXT_STATE_FW_NON_FATAL_COND, &bp->state);
  		}
  		netif_warn(bp, hw, bp->dev,
- 			   "Firmware %s reset event, data1: 0x%x, data2: 0x%x, min wait %u ms, max wait %u ms\n",
- 			   fatal_str, data1, data2,
+ 			   "%s firmware reset event, data1: 0x%x, data2: 0x%x, min wait %u ms, max wait %u ms\n",
+ 			   type_str, data1, data2,
  			   bp->fw_reset_min_dsecs * 100,
  			   bp->fw_reset_max_dsecs * 100);
  		set_bit(BNXT_FW_RESET_NOTIFY_SP_EVENT, &bp->sp_event);
@@@ -12157,6 -12186,10 +12172,13 @@@ static void bnxt_fw_reset_task(struct w
  			}
  		}
  		clear_bit(BNXT_STATE_FW_FATAL_COND, &bp->state);
++<<<<<<< HEAD
++=======
+ 		clear_bit(BNXT_STATE_FW_NON_FATAL_COND, &bp->state);
+ 		if (test_and_clear_bit(BNXT_STATE_FW_ACTIVATE_RESET, &bp->state) &&
+ 		    !test_bit(BNXT_STATE_FW_ACTIVATE, &bp->state))
+ 			bnxt_dl_remote_reload(bp);
++>>>>>>> aadb0b1a0b36 (bnxt_en: remove fw_reset devlink health reporter)
  		if (pci_enable_device(bp->pdev)) {
  			netdev_err(bp->dev, "Cannot re-enable PCI device\n");
  			rc = -ENODEV;
@@@ -12206,8 -12239,11 +12228,16 @@@
  		bnxt_vf_reps_alloc(bp);
  		bnxt_vf_reps_open(bp);
  		bnxt_ptp_reapply_pps(bp);
++<<<<<<< HEAD
 +		bnxt_dl_health_recovery_done(bp);
 +		bnxt_dl_health_status_update(bp, true);
++=======
+ 		clear_bit(BNXT_STATE_FW_ACTIVATE, &bp->state);
+ 		if (test_and_clear_bit(BNXT_STATE_RECOVER, &bp->state)) {
+ 			bnxt_dl_health_fw_recovery_done(bp);
+ 			bnxt_dl_health_fw_status_update(bp, true);
+ 		}
++>>>>>>> aadb0b1a0b36 (bnxt_en: remove fw_reset devlink health reporter)
  		rtnl_unlock();
  		break;
  	}
diff --cc drivers/net/ethernet/broadcom/bnxt/bnxt.h
index a76732cbea2c,e640df62d296..000000000000
--- a/drivers/net/ethernet/broadcom/bnxt/bnxt.h
+++ b/drivers/net/ethernet/broadcom/bnxt/bnxt.h
@@@ -486,6 -489,15 +486,18 @@@ struct rx_tpa_end_cmp_ext 
  	  ASYNC_EVENT_CMPL_RESET_NOTIFY_EVENT_DATA1_REASON_CODE_MASK) ==\
  	 ASYNC_EVENT_CMPL_RESET_NOTIFY_EVENT_DATA1_REASON_CODE_FW_EXCEPTION_FATAL)
  
++<<<<<<< HEAD
++=======
+ #define EVENT_DATA1_RESET_NOTIFY_FW_ACTIVATION(data1)			\
+ 	(((data1) &							\
+ 	  ASYNC_EVENT_CMPL_RESET_NOTIFY_EVENT_DATA1_REASON_CODE_MASK) ==\
+ 	ASYNC_EVENT_CMPL_RESET_NOTIFY_EVENT_DATA1_REASON_CODE_FW_ACTIVATION)
+ 
+ #define EVENT_DATA2_RESET_NOTIFY_FW_STATUS_CODE(data2)			\
+ 	((data2) &							\
+ 	ASYNC_EVENT_CMPL_RESET_NOTIFY_EVENT_DATA2_FW_STATUS_CODE_MASK)
+ 
++>>>>>>> aadb0b1a0b36 (bnxt_en: remove fw_reset devlink health reporter)
  #define EVENT_DATA1_RECOVERY_MASTER_FUNC(data1)				\
  	!!((data1) &							\
  	   ASYNC_EVENT_CMPL_ERROR_RECOVERY_EVENT_DATA1_FLAGS_MASTER_FUNC)
@@@ -1885,6 -1891,10 +1891,13 @@@ struct bnxt 
  #define BNXT_STATE_DRV_REGISTERED	7
  #define BNXT_STATE_PCI_CHANNEL_IO_FROZEN	8
  #define BNXT_STATE_NAPI_DISABLED	9
++<<<<<<< HEAD
++=======
+ #define BNXT_STATE_FW_ACTIVATE		11
+ #define BNXT_STATE_RECOVER		12
+ #define BNXT_STATE_FW_NON_FATAL_COND	13
+ #define BNXT_STATE_FW_ACTIVATE_RESET	14
++>>>>>>> aadb0b1a0b36 (bnxt_en: remove fw_reset devlink health reporter)
  
  #define BNXT_NO_FW_ACCESS(bp)					\
  	(test_bit(BNXT_STATE_FW_FATAL_COND, &(bp)->state) ||	\
diff --cc drivers/net/ethernet/broadcom/bnxt/bnxt_devlink.c
index d875469f72ce,2c72f3b3708f..000000000000
--- a/drivers/net/ethernet/broadcom/bnxt/bnxt_devlink.c
+++ b/drivers/net/ethernet/broadcom/bnxt/bnxt_devlink.c
@@@ -259,24 -215,16 +195,22 @@@ void bnxt_dl_health_fw_status_update(st
  	else
  		state = DEVLINK_HEALTH_REPORTER_STATE_ERROR;
  
- 	if (health->fatal)
- 		devlink_health_reporter_state_update(health->fw_fatal_reporter,
- 						     state);
- 	else
- 		devlink_health_reporter_state_update(health->fw_reset_reporter,
- 						     state);
- 
- 	health->fatal = false;
+ 	devlink_health_reporter_state_update(health->fw_fatal_reporter, state);
  }
  
- void bnxt_dl_health_recovery_done(struct bnxt *bp)
+ void bnxt_dl_health_fw_recovery_done(struct bnxt *bp)
  {
  	struct bnxt_fw_health *hlth = bp->fw_health;
 -	struct bnxt_dl *dl = devlink_priv(bp->dl);
  
++<<<<<<< HEAD
 +	if (hlth->fatal)
 +		devlink_health_reporter_recovery_done(hlth->fw_fatal_reporter);
 +	else
 +		devlink_health_reporter_recovery_done(hlth->fw_reset_reporter);
++=======
+ 	devlink_health_reporter_recovery_done(hlth->fw_fatal_reporter);
+ 	bnxt_hwrm_remote_dev_reset_set(bp, dl->remote_reset);
++>>>>>>> aadb0b1a0b36 (bnxt_en: remove fw_reset devlink health reporter)
  }
  
  static int bnxt_dl_info_get(struct devlink *dl, struct devlink_info_req *req,
* Unmerged path drivers/net/ethernet/broadcom/bnxt/bnxt.c
* Unmerged path drivers/net/ethernet/broadcom/bnxt/bnxt.h
* Unmerged path drivers/net/ethernet/broadcom/bnxt/bnxt_devlink.c
diff --git a/drivers/net/ethernet/broadcom/bnxt/bnxt_devlink.h b/drivers/net/ethernet/broadcom/bnxt/bnxt_devlink.h
index 406dc655a5fc..3e4d15c98d13 100644
--- a/drivers/net/ethernet/broadcom/bnxt/bnxt_devlink.h
+++ b/drivers/net/ethernet/broadcom/bnxt/bnxt_devlink.h
@@ -53,9 +53,9 @@ enum bnxt_dl_version_type {
 	BNXT_VERSION_STORED,
 };
 
-void bnxt_devlink_health_report(struct bnxt *bp, unsigned long event);
-void bnxt_dl_health_status_update(struct bnxt *bp, bool healthy);
-void bnxt_dl_health_recovery_done(struct bnxt *bp);
+void bnxt_devlink_health_fw_report(struct bnxt *bp);
+void bnxt_dl_health_fw_status_update(struct bnxt *bp, bool healthy);
+void bnxt_dl_health_fw_recovery_done(struct bnxt *bp);
 void bnxt_dl_fw_reporters_create(struct bnxt *bp);
 void bnxt_dl_fw_reporters_destroy(struct bnxt *bp, bool all);
 int bnxt_dl_register(struct bnxt *bp);
