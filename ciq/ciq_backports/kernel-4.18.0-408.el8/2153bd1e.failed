net/smc: Transfer remaining wait queue entries during fallback

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-408.el8
commit-author Wen Gu <guwen@linux.alibaba.com>
commit 2153bd1e3d3dbf6a3403572084ef6ed31c53c5f0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-408.el8/2153bd1e.failed

The SMC fallback is incomplete currently. There may be some
wait queue entries remaining in smc socket->wq, which should
be removed to clcsocket->wq during the fallback.

For example, in nginx/wrk benchmark, this issue causes an
all-zeros test result:

server: nginx -g 'daemon off;'
client: smc_run wrk -c 1 -t 1 -d 5 http://11.200.15.93/index.html

  Running 5s test @ http://11.200.15.93/index.html
     1 threads and 1 connections
     Thread Stats   Avg      Stdev     Max   Â± Stdev
     	Latency     0.00us    0.00us   0.00us    -nan%
	Req/Sec     0.00      0.00     0.00      -nan%
	0 requests in 5.00s, 0.00B read
     Requests/sec:      0.00
     Transfer/sec:       0.00B

The reason for this all-zeros result is that when wrk used SMC
to replace TCP, it added an eppoll_entry into smc socket->wq
and expected to be notified if epoll events like EPOLL_IN/
EPOLL_OUT occurred on the smc socket.

However, once a fallback occurred, wrk switches to use clcsocket.
Now it is clcsocket->wq instead of smc socket->wq which will
be woken up. The eppoll_entry remaining in smc socket->wq does
not work anymore and wrk stops the test.

This patch fixes this issue by removing remaining wait queue
entries from smc socket->wq to clcsocket->wq during the fallback.

Link: https://www.spinics.net/lists/netdev/msg779769.html
	Signed-off-by: Wen Gu <guwen@linux.alibaba.com>
	Reviewed-by: Tony Lu <tonylu@linux.alibaba.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 2153bd1e3d3dbf6a3403572084ef6ed31c53c5f0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/smc/af_smc.c
diff --cc net/smc/af_smc.c
index b93befe56d84,b61c802e3bf3..000000000000
--- a/net/smc/af_smc.c
+++ b/net/smc/af_smc.c
@@@ -569,8 -576,19 +573,23 @@@ static void smc_switch_to_fallback(stru
  	if (smc->sk.sk_socket && smc->sk.sk_socket->file) {
  		smc->clcsock->file = smc->sk.sk_socket->file;
  		smc->clcsock->file->private_data = smc->clcsock;
++<<<<<<< HEAD
 +		smc->clcsock->wq->fasync_list =
 +			smc->sk.sk_socket->wq->fasync_list;
++=======
+ 		smc->clcsock->wq.fasync_list =
+ 			smc->sk.sk_socket->wq.fasync_list;
+ 
+ 		/* There may be some entries remaining in
+ 		 * smc socket->wq, which should be removed
+ 		 * to clcsocket->wq during the fallback.
+ 		 */
+ 		spin_lock_irqsave(&smc_wait->lock, flags);
+ 		spin_lock(&clc_wait->lock);
+ 		list_splice_init(&smc_wait->head, &clc_wait->head);
+ 		spin_unlock(&clc_wait->lock);
+ 		spin_unlock_irqrestore(&smc_wait->lock, flags);
++>>>>>>> 2153bd1e3d3d (net/smc: Transfer remaining wait queue entries during fallback)
  	}
  }
  
* Unmerged path net/smc/af_smc.c
