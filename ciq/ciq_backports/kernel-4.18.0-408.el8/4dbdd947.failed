selftests: vm: pkeys: Use sane types for pkey register

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-408.el8
commit-author Sandipan Das <sandipan@linux.ibm.com>
commit 4dbdd947cb7f5534bedfdd1dbf983d0c0d9def29
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-408.el8/4dbdd947.failed

The size of the pkey register can vary across architectures.  This
converts the data type of all its references to u64 in preparation for
multi-arch support.

To keep the definition of the u64 type consistent and remove format
specifier related warnings, __SANE_USERSPACE_TYPES__ is defined as
suggested by Michael Ellerman.

	Signed-off-by: Sandipan Das <sandipan@linux.ibm.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Acked-by: Dave Hansen <dave.hansen@intel.com>
	Cc: "Desnes A. Nunes do Rosario" <desnesn@linux.vnet.ibm.com>
	Cc: Florian Weimer <fweimer@redhat.com>
	Cc: Ingo Molnar <mingo@kernel.org>
	Cc: Ram Pai <linuxram@us.ibm.com>
	Cc: Thiago Jung Bauermann <bauerman@linux.ibm.com>
	Cc: "Aneesh Kumar K.V" <aneesh.kumar@linux.ibm.com>
	Cc: Michael Ellerman <mpe@ellerman.id.au>
	Cc: Michal Hocko <mhocko@kernel.org>
	Cc: Michal Suchanek <msuchanek@suse.de>
	Cc: Shuah Khan <shuah@kernel.org>
Link: http://lkml.kernel.org/r/d3e271798455d940e395e56e1ff1e82a31bcb7aa.1585646528.git.sandipan@linux.ibm.com
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 4dbdd947cb7f5534bedfdd1dbf983d0c0d9def29)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/testing/selftests/vm/pkey-helpers.h
#	tools/testing/selftests/vm/pkey-x86.h
#	tools/testing/selftests/x86/protection_keys.c
diff --cc tools/testing/selftests/x86/protection_keys.c
index 5d546dcdbc80,efa35cc6f6b9..000000000000
--- a/tools/testing/selftests/x86/protection_keys.c
+++ b/tools/testing/selftests/x86/protection_keys.c
@@@ -48,19 -49,7 +49,23 @@@
  int iteration_nr = 1;
  int test_nr;
  
++<<<<<<< HEAD:tools/testing/selftests/x86/protection_keys.c
 +unsigned int shadow_pkru;
 +
 +#define HPAGE_SIZE	(1UL<<21)
 +#define ARRAY_SIZE(x) (sizeof(x) / sizeof(*(x)))
 +#define ALIGN_UP(x, align_to)	(((x) + ((align_to)-1)) & ~((align_to)-1))
 +#define ALIGN_DOWN(x, align_to) ((x) & ~((align_to)-1))
 +#define ALIGN_PTR_UP(p, ptr_align_to)	((typeof(p))ALIGN_UP((unsigned long)(p),	ptr_align_to))
 +#define ALIGN_PTR_DOWN(p, ptr_align_to)	((typeof(p))ALIGN_DOWN((unsigned long)(p),	ptr_align_to))
 +#define __stringify_1(x...)     #x
 +#define __stringify(x...)       __stringify_1(x)
 +
 +#define PTR_ERR_ENOTSUP ((void *)-ENOTSUP)
 +
++=======
+ u64 shadow_pkey_reg;
++>>>>>>> 4dbdd947cb7f (selftests: vm: pkeys: Use sane types for pkey register):tools/testing/selftests/vm/protection_keys.c
  int dprint_in_signal;
  char dprint_in_signal_buffer[DPRINT_IN_SIGNAL_BUF_SIZE];
  
@@@ -271,8 -206,9 +276,14 @@@ void signal_handler(int signum, siginfo
  
  	dprint_in_signal = 1;
  	dprintf1(">>>>===============SIGSEGV============================\n");
++<<<<<<< HEAD:tools/testing/selftests/x86/protection_keys.c
 +	dprintf1("%s()::%d, pkru: 0x%x shadow: %x\n", __func__, __LINE__,
 +			__rdpkru(), shadow_pkru);
++=======
+ 	dprintf1("%s()::%d, pkey_reg: 0x%016llx shadow: %016llx\n",
+ 			__func__, __LINE__,
+ 			__read_pkey_reg(), shadow_pkey_reg);
++>>>>>>> 4dbdd947cb7f (selftests: vm: pkeys: Use sane types for pkey register):tools/testing/selftests/vm/protection_keys.c
  
  	trapno = uctxt->uc_mcontext.gregs[REG_TRAPNO];
  	ip = uctxt->uc_mcontext.gregs[REG_IP_IDX];
@@@ -317,13 -254,17 +329,27 @@@
  	pkey_assert(siginfo_pkey < NR_PKEYS);
  	last_si_pkey = siginfo_pkey;
  
++<<<<<<< HEAD:tools/testing/selftests/x86/protection_keys.c
 +	dprintf1("signal pkru from xsave: %08x\n", *pkru_ptr);
 +	/* need __rdpkru() version so we do not do shadow_pkru checking */
 +	dprintf1("signal pkru from  pkru: %08x\n", __rdpkru());
 +	dprintf1("pkey from siginfo: %jx\n", siginfo_pkey);
 +	*(u64 *)pkru_ptr = 0x00000000;
 +	dprintf1("WARNING: set PRKU=0 to allow faulting instruction to continue\n");
 +	pkru_faults++;
++=======
+ 	dprintf1("signal pkey_reg from xsave: %08x\n", *pkey_reg_ptr);
+ 	/*
+ 	 * need __read_pkey_reg() version so we do not do shadow_pkey_reg
+ 	 * checking
+ 	 */
+ 	dprintf1("signal pkey_reg from  pkey_reg: %016llx\n",
+ 			__read_pkey_reg());
+ 	dprintf1("pkey from siginfo: %016llx\n", siginfo_pkey);
+ 	*(u64 *)pkey_reg_ptr = 0x00000000;
+ 	dprintf1("WARNING: set PKEY_REG=0 to allow faulting instruction to continue\n");
+ 	pkey_faults++;
++>>>>>>> 4dbdd947cb7f (selftests: vm: pkeys: Use sane types for pkey register):tools/testing/selftests/vm/protection_keys.c
  	dprintf1("<<<<==================================================\n");
  	dprint_in_signal = 0;
  }
@@@ -402,18 -335,19 +428,34 @@@ pid_t fork_lazy_child(void
  static u32 hw_pkey_get(int pkey, unsigned long flags)
  {
  	u32 mask = (PKEY_DISABLE_ACCESS|PKEY_DISABLE_WRITE);
++<<<<<<< HEAD:tools/testing/selftests/x86/protection_keys.c
 +	u32 pkru = __rdpkru();
 +	u32 shifted_pkru;
 +	u32 masked_pkru;
 +
 +	dprintf1("%s(pkey=%d, flags=%lx) = %x / %d\n",
 +			__func__, pkey, flags, 0, 0);
 +	dprintf2("%s() raw pkru: %x\n", __func__, pkru);
 +
 +	shifted_pkru = (pkru >> (pkey * PKRU_BITS_PER_PKEY));
 +	dprintf2("%s() shifted_pkru: %x\n", __func__, shifted_pkru);
 +	masked_pkru = shifted_pkru & mask;
 +	dprintf2("%s() masked  pkru: %x\n", __func__, masked_pkru);
++=======
+ 	u64 pkey_reg = __read_pkey_reg();
+ 	u64 shifted_pkey_reg;
+ 	u32 masked_pkey_reg;
+ 
+ 	dprintf1("%s(pkey=%d, flags=%lx) = %x / %d\n",
+ 			__func__, pkey, flags, 0, 0);
+ 	dprintf2("%s() raw pkey_reg: %016llx\n", __func__, pkey_reg);
+ 
+ 	shifted_pkey_reg = (pkey_reg >> (pkey * PKEY_BITS_PER_PKEY));
+ 	dprintf2("%s() shifted_pkey_reg: %016llx\n", __func__,
+ 			shifted_pkey_reg);
+ 	masked_pkey_reg = shifted_pkey_reg & mask;
+ 	dprintf2("%s() masked  pkey_reg: %x\n", __func__, masked_pkey_reg);
++>>>>>>> 4dbdd947cb7f (selftests: vm: pkeys: Use sane types for pkey register):tools/testing/selftests/vm/protection_keys.c
  	/*
  	 * shift down the relevant bits to the lowest two, then
  	 * mask off all the other high bits.
@@@ -424,23 -358,25 +466,35 @@@
  static int hw_pkey_set(int pkey, unsigned long rights, unsigned long flags)
  {
  	u32 mask = (PKEY_DISABLE_ACCESS|PKEY_DISABLE_WRITE);
++<<<<<<< HEAD:tools/testing/selftests/x86/protection_keys.c
 +	u32 old_pkru = __rdpkru();
 +	u32 new_pkru;
++=======
+ 	u64 old_pkey_reg = __read_pkey_reg();
+ 	u64 new_pkey_reg;
++>>>>>>> 4dbdd947cb7f (selftests: vm: pkeys: Use sane types for pkey register):tools/testing/selftests/vm/protection_keys.c
  
  	/* make sure that 'rights' only contains the bits we expect: */
  	assert(!(rights & ~mask));
  
 -	/* copy old pkey_reg */
 -	new_pkey_reg = old_pkey_reg;
 +	/* copy old pkru */
 +	new_pkru = old_pkru;
  	/* mask out bits from pkey in old value: */
 -	new_pkey_reg &= ~(mask << (pkey * PKEY_BITS_PER_PKEY));
 +	new_pkru &= ~(mask << (pkey * PKRU_BITS_PER_PKEY));
  	/* OR in new bits for pkey: */
 -	new_pkey_reg |= (rights << (pkey * PKEY_BITS_PER_PKEY));
 +	new_pkru |= (rights << (pkey * PKRU_BITS_PER_PKEY));
  
 -	__write_pkey_reg(new_pkey_reg);
 +	__wrpkru(new_pkru);
  
++<<<<<<< HEAD:tools/testing/selftests/x86/protection_keys.c
 +	dprintf3("%s(pkey=%d, rights=%lx, flags=%lx) = %x pkru now: %x old_pkru: %x\n",
 +			__func__, pkey, rights, flags, 0, __rdpkru(), old_pkru);
++=======
+ 	dprintf3("%s(pkey=%d, rights=%lx, flags=%lx) = %x"
+ 		" pkey_reg now: %016llx old_pkey_reg: %016llx\n",
+ 		__func__, pkey, rights, flags, 0, __read_pkey_reg(),
+ 		old_pkey_reg);
++>>>>>>> 4dbdd947cb7f (selftests: vm: pkeys: Use sane types for pkey register):tools/testing/selftests/vm/protection_keys.c
  	return 0;
  }
  
@@@ -449,7 -385,7 +503,11 @@@ void pkey_disable_set(int pkey, int fla
  	unsigned long syscall_flags = 0;
  	int ret;
  	int pkey_rights;
++<<<<<<< HEAD:tools/testing/selftests/x86/protection_keys.c
 +	u32 orig_pkru = rdpkru();
++=======
+ 	u64 orig_pkey_reg = read_pkey_reg();
++>>>>>>> 4dbdd947cb7f (selftests: vm: pkeys: Use sane types for pkey register):tools/testing/selftests/vm/protection_keys.c
  
  	dprintf1("START->%s(%d, 0x%x)\n", __func__,
  		pkey, flags);
@@@ -465,9 -402,10 +524,16 @@@
  
  	ret = hw_pkey_set(pkey, pkey_rights, syscall_flags);
  	assert(!ret);
++<<<<<<< HEAD:tools/testing/selftests/x86/protection_keys.c
 +	/*pkru and flags have the same format */
 +	shadow_pkru |= flags << (pkey * 2);
 +	dprintf1("%s(%d) shadow: 0x%x\n", __func__, pkey, shadow_pkru);
++=======
+ 	/* pkey_reg and flags have the same format */
+ 	shadow_pkey_reg |= flags << (pkey * 2);
+ 	dprintf1("%s(%d) shadow: 0x%016llx\n",
+ 		__func__, pkey, shadow_pkey_reg);
++>>>>>>> 4dbdd947cb7f (selftests: vm: pkeys: Use sane types for pkey register):tools/testing/selftests/vm/protection_keys.c
  
  	pkey_assert(ret >= 0);
  
@@@ -475,9 -413,10 +541,14 @@@
  	dprintf1("%s(%d) hw_pkey_get(%d): %x\n", __func__,
  			pkey, pkey, pkey_rights);
  
++<<<<<<< HEAD:tools/testing/selftests/x86/protection_keys.c
 +	dprintf1("%s(%d) pkru: 0x%x\n", __func__, pkey, rdpkru());
++=======
+ 	dprintf1("%s(%d) pkey_reg: 0x%016llx\n",
+ 		__func__, pkey, read_pkey_reg());
++>>>>>>> 4dbdd947cb7f (selftests: vm: pkeys: Use sane types for pkey register):tools/testing/selftests/vm/protection_keys.c
  	if (flags)
 -		pkey_assert(read_pkey_reg() > orig_pkey_reg);
 +		pkey_assert(rdpkru() > orig_pkru);
  	dprintf1("END<---%s(%d, 0x%x)\n", __func__,
  		pkey, flags);
  }
@@@ -487,7 -426,7 +558,11 @@@ void pkey_disable_clear(int pkey, int f
  	unsigned long syscall_flags = 0;
  	int ret;
  	int pkey_rights = hw_pkey_get(pkey, syscall_flags);
++<<<<<<< HEAD:tools/testing/selftests/x86/protection_keys.c
 +	u32 orig_pkru = rdpkru();
++=======
+ 	u64 orig_pkey_reg = read_pkey_reg();
++>>>>>>> 4dbdd947cb7f (selftests: vm: pkeys: Use sane types for pkey register):tools/testing/selftests/vm/protection_keys.c
  
  	pkey_assert(flags & (PKEY_DISABLE_ACCESS | PKEY_DISABLE_WRITE));
  
@@@ -506,9 -444,10 +581,14 @@@
  	dprintf1("%s(%d) hw_pkey_get(%d): %x\n", __func__,
  			pkey, pkey, pkey_rights);
  
++<<<<<<< HEAD:tools/testing/selftests/x86/protection_keys.c
 +	dprintf1("%s(%d) pkru: 0x%x\n", __func__, pkey, rdpkru());
++=======
+ 	dprintf1("%s(%d) pkey_reg: 0x%016llx\n", __func__,
+ 			pkey, read_pkey_reg());
++>>>>>>> 4dbdd947cb7f (selftests: vm: pkeys: Use sane types for pkey register):tools/testing/selftests/vm/protection_keys.c
  	if (flags)
 -		assert(read_pkey_reg() > orig_pkey_reg);
 +		assert(rdpkru() > orig_pkru);
  }
  
  void pkey_write_allow(int pkey)
@@@ -561,33 -500,42 +641,67 @@@ int alloc_pkey(void
  	int ret;
  	unsigned long init_val = 0x0;
  
++<<<<<<< HEAD:tools/testing/selftests/x86/protection_keys.c
 +	dprintf1("alloc_pkey()::%d, pkru: 0x%x shadow: %x\n",
 +			__LINE__, __rdpkru(), shadow_pkru);
++=======
+ 	dprintf1("%s()::%d, pkey_reg: 0x%016llx shadow: %016llx\n",
+ 			__func__, __LINE__, __read_pkey_reg(), shadow_pkey_reg);
++>>>>>>> 4dbdd947cb7f (selftests: vm: pkeys: Use sane types for pkey register):tools/testing/selftests/vm/protection_keys.c
  	ret = sys_pkey_alloc(0, init_val);
  	/*
 -	 * pkey_alloc() sets PKEY register, so we need to reflect it in
 -	 * shadow_pkey_reg:
 +	 * pkey_alloc() sets PKRU, so we need to reflect it in
 +	 * shadow_pkru:
  	 */
++<<<<<<< HEAD:tools/testing/selftests/x86/protection_keys.c
 +	dprintf4("alloc_pkey()::%d, ret: %d pkru: 0x%x shadow: 0x%x\n",
 +			__LINE__, ret, __rdpkru(), shadow_pkru);
 +	if (ret) {
 +		/* clear both the bits: */
 +		shadow_pkru &= ~(0x3      << (ret * 2));
 +		dprintf4("alloc_pkey()::%d, ret: %d pkru: 0x%x shadow: 0x%x\n",
 +				__LINE__, ret, __rdpkru(), shadow_pkru);
++=======
+ 	dprintf4("%s()::%d, ret: %d pkey_reg: 0x%016llx"
+ 			" shadow: 0x%016llx\n",
+ 			__func__, __LINE__, ret, __read_pkey_reg(),
+ 			shadow_pkey_reg);
+ 	if (ret) {
+ 		/* clear both the bits: */
+ 		shadow_pkey_reg &= ~(0x3      << (ret * 2));
+ 		dprintf4("%s()::%d, ret: %d pkey_reg: 0x%016llx"
+ 				" shadow: 0x%016llx\n",
+ 				__func__,
+ 				__LINE__, ret, __read_pkey_reg(),
+ 				shadow_pkey_reg);
++>>>>>>> 4dbdd947cb7f (selftests: vm: pkeys: Use sane types for pkey register):tools/testing/selftests/vm/protection_keys.c
  		/*
  		 * move the new state in from init_val
 -		 * (remember, we cheated and init_val == pkey_reg format)
 +		 * (remember, we cheated and init_val == pkru format)
  		 */
 -		shadow_pkey_reg |=  (init_val << (ret * 2));
 +		shadow_pkru |=  (init_val << (ret * 2));
  	}
++<<<<<<< HEAD:tools/testing/selftests/x86/protection_keys.c
 +	dprintf4("alloc_pkey()::%d, ret: %d pkru: 0x%x shadow: 0x%x\n",
 +			__LINE__, ret, __rdpkru(), shadow_pkru);
 +	dprintf1("alloc_pkey()::%d errno: %d\n", __LINE__, errno);
 +	/* for shadow checking: */
 +	rdpkru();
 +	dprintf4("alloc_pkey()::%d, ret: %d pkru: 0x%x shadow: 0x%x\n",
 +			__LINE__, ret, __rdpkru(), shadow_pkru);
++=======
+ 	dprintf4("%s()::%d, ret: %d pkey_reg: 0x%016llx"
+ 			" shadow: 0x%016llx\n",
+ 			__func__, __LINE__, ret, __read_pkey_reg(),
+ 			shadow_pkey_reg);
+ 	dprintf1("%s()::%d errno: %d\n", __func__, __LINE__, errno);
+ 	/* for shadow checking: */
+ 	read_pkey_reg();
+ 	dprintf4("%s()::%d, ret: %d pkey_reg: 0x%016llx"
+ 		 " shadow: 0x%016llx\n",
+ 		__func__, __LINE__, ret, __read_pkey_reg(),
+ 		shadow_pkey_reg);
++>>>>>>> 4dbdd947cb7f (selftests: vm: pkeys: Use sane types for pkey register):tools/testing/selftests/vm/protection_keys.c
  	return ret;
  }
  
@@@ -638,8 -586,9 +752,14 @@@ int alloc_random_pkey(void
  		free_ret = sys_pkey_free(alloced_pkeys[i]);
  		pkey_assert(!free_ret);
  	}
++<<<<<<< HEAD:tools/testing/selftests/x86/protection_keys.c
 +	dprintf1("%s()::%d, ret: %d pkru: 0x%x shadow: 0x%x\n", __func__,
 +			__LINE__, ret, __rdpkru(), shadow_pkru);
++=======
+ 	dprintf1("%s()::%d, ret: %d pkey_reg: 0x%016llx"
+ 			 " shadow: 0x%016llx\n", __func__,
+ 			__LINE__, ret, __read_pkey_reg(), shadow_pkey_reg);
++>>>>>>> 4dbdd947cb7f (selftests: vm: pkeys: Use sane types for pkey register):tools/testing/selftests/vm/protection_keys.c
  	return ret;
  }
  
@@@ -657,11 -606,15 +777,23 @@@ int mprotect_pkey(void *ptr, size_t siz
  		if (nr_iterations-- < 0)
  			break;
  
++<<<<<<< HEAD:tools/testing/selftests/x86/protection_keys.c
 +		dprintf1("%s()::%d, ret: %d pkru: 0x%x shadow: 0x%x\n", __func__,
 +			__LINE__, ret, __rdpkru(), shadow_pkru);
 +		sys_pkey_free(rpkey);
 +		dprintf1("%s()::%d, ret: %d pkru: 0x%x shadow: 0x%x\n", __func__,
 +			__LINE__, ret, __rdpkru(), shadow_pkru);
++=======
+ 		dprintf1("%s()::%d, ret: %d pkey_reg: 0x%016llx"
+ 			" shadow: 0x%016llx\n",
+ 			__func__, __LINE__, ret, __read_pkey_reg(),
+ 			shadow_pkey_reg);
+ 		sys_pkey_free(rpkey);
+ 		dprintf1("%s()::%d, ret: %d pkey_reg: 0x%016llx"
+ 			" shadow: 0x%016llx\n",
+ 			__func__, __LINE__, ret, __read_pkey_reg(),
+ 			shadow_pkey_reg);
++>>>>>>> 4dbdd947cb7f (selftests: vm: pkeys: Use sane types for pkey register):tools/testing/selftests/vm/protection_keys.c
  	}
  	pkey_assert(pkey < NR_PKEYS);
  
@@@ -669,8 -622,9 +801,14 @@@
  	dprintf1("mprotect_pkey(%p, %zx, prot=0x%lx, pkey=%ld) ret: %d\n",
  			ptr, size, orig_prot, pkey, ret);
  	pkey_assert(!ret);
++<<<<<<< HEAD:tools/testing/selftests/x86/protection_keys.c
 +	dprintf1("%s()::%d, ret: %d pkru: 0x%x shadow: 0x%x\n", __func__,
 +			__LINE__, ret, __rdpkru(), shadow_pkru);
++=======
+ 	dprintf1("%s()::%d, ret: %d pkey_reg: 0x%016llx"
+ 			" shadow: 0x%016llx\n", __func__,
+ 			__LINE__, ret, __read_pkey_reg(), shadow_pkey_reg);
++>>>>>>> 4dbdd947cb7f (selftests: vm: pkeys: Use sane types for pkey register):tools/testing/selftests/vm/protection_keys.c
  	return ret;
  }
  
@@@ -941,16 -895,16 +1079,23 @@@ void expected_pk_fault(int pkey
  		pkey_assert(last_si_pkey == pkey);
  
  	/*
 -	 * The signal handler shold have cleared out PKEY register to let the
 +	 * The signal handler shold have cleared out PKRU to let the
  	 * test program continue.  We now have to restore it.
  	 */
 -	if (__read_pkey_reg() != 0)
 +	if (__rdpkru() != 0)
  		pkey_assert(0);
  
++<<<<<<< HEAD:tools/testing/selftests/x86/protection_keys.c
 +	__wrpkru(shadow_pkru);
 +	dprintf1("%s() set PKRU=%x to restore state after signal nuked it\n",
 +			__func__, shadow_pkru);
 +	last_pkru_faults = pkru_faults;
++=======
+ 	__write_pkey_reg(shadow_pkey_reg);
+ 	dprintf1("%s() set pkey_reg=%016llx to restore state after signal "
+ 		       "nuked it\n", __func__, shadow_pkey_reg);
+ 	last_pkey_faults = pkey_faults;
++>>>>>>> 4dbdd947cb7f (selftests: vm: pkeys: Use sane types for pkey register):tools/testing/selftests/vm/protection_keys.c
  	last_si_pkey = -1;
  }
  
@@@ -1160,9 -1114,11 +1305,17 @@@ void test_pkey_alloc_exhaust(int *ptr, 
  		int new_pkey;
  		dprintf1("%s() alloc loop: %d\n", __func__, i);
  		new_pkey = alloc_pkey();
++<<<<<<< HEAD:tools/testing/selftests/x86/protection_keys.c
 +		dprintf4("%s()::%d, err: %d pkru: 0x%x shadow: 0x%x\n", __func__,
 +				__LINE__, err, __rdpkru(), shadow_pkru);
 +		rdpkru(); /* for shadow checking */
++=======
+ 		dprintf4("%s()::%d, err: %d pkey_reg: 0x%016llx"
+ 				" shadow: 0x%016llx\n",
+ 				__func__, __LINE__, err, __read_pkey_reg(),
+ 				shadow_pkey_reg);
+ 		read_pkey_reg(); /* for shadow checking */
++>>>>>>> 4dbdd947cb7f (selftests: vm: pkeys: Use sane types for pkey register):tools/testing/selftests/vm/protection_keys.c
  		dprintf2("%s() errno: %d ENOSPC: %d\n", __func__, errno, ENOSPC);
  		if ((new_pkey == -1) && (errno == ENOSPC)) {
  			dprintf2("%s() failed to allocate pkey after %d tries\n",
@@@ -1347,7 -1303,7 +1500,11 @@@ void test_executing_on_unreadable_memor
  	pkey_assert(!ret);
  	pkey_access_deny(pkey);
  
++<<<<<<< HEAD:tools/testing/selftests/x86/protection_keys.c
 +	dprintf2("pkru: %x\n", rdpkru());
++=======
+ 	dprintf2("pkey_reg: %016llx\n", read_pkey_reg());
++>>>>>>> 4dbdd947cb7f (selftests: vm: pkeys: Use sane types for pkey register):tools/testing/selftests/vm/protection_keys.c
  
  	/*
  	 * Make sure this is an *instruction* fault
@@@ -1378,7 -1334,7 +1535,11 @@@ void test_implicit_mprotect_exec_only_m
  	ret = mprotect(p1, PAGE_SIZE, PROT_EXEC);
  	pkey_assert(!ret);
  
++<<<<<<< HEAD:tools/testing/selftests/x86/protection_keys.c
 +	dprintf2("pkru: %x\n", rdpkru());
++=======
+ 	dprintf2("pkey_reg: %016llx\n", read_pkey_reg());
++>>>>>>> 4dbdd947cb7f (selftests: vm: pkeys: Use sane types for pkey register):tools/testing/selftests/vm/protection_keys.c
  
  	/* Make sure this is an *instruction* fault */
  	madvise(p1, PAGE_SIZE, MADV_DONTNEED);
@@@ -1495,7 -1451,7 +1656,11 @@@ int main(void
  	}
  
  	pkey_setup_shadow();
++<<<<<<< HEAD:tools/testing/selftests/x86/protection_keys.c
 +	printf("startup pkru: %x\n", rdpkru());
++=======
+ 	printf("startup pkey_reg: %016llx\n", read_pkey_reg());
++>>>>>>> 4dbdd947cb7f (selftests: vm: pkeys: Use sane types for pkey register):tools/testing/selftests/vm/protection_keys.c
  	setup_hugetlbfs();
  
  	while (nr_iterations-- > 0)
* Unmerged path tools/testing/selftests/vm/pkey-helpers.h
* Unmerged path tools/testing/selftests/vm/pkey-x86.h
* Unmerged path tools/testing/selftests/vm/pkey-helpers.h
* Unmerged path tools/testing/selftests/vm/pkey-x86.h
* Unmerged path tools/testing/selftests/x86/protection_keys.c
