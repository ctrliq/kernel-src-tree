audit: Rename enum audit_state constants to avoid AUDIT_DISABLED redefinition

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-408.el8
commit-author Sergey Nazarov <s-nazarov@yandex.ru>
commit 619ed58ac4e2fbed71ac05f664a4a17e32537176
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-408.el8/619ed58a.failed

AUDIT_DISABLED defined in kernel/audit.h as element of enum audit_state
and redefined in kernel/audit.c. This produces a warning when kernel builds
with syscalls audit disabled and brokes kernel build if -Werror used.
enum audit_state used in syscall audit code only. This patch changes
enum audit_state constants prefix AUDIT to AUDIT_STATE to avoid
AUDIT_DISABLED redefinition.

	Signed-off-by: Sergey Nazarov <s-nazarov@yandex.ru>
	Acked-by: Richard Guy Briggs <rgb@redhat.com>
	Signed-off-by: Paul Moore <paul@paul-moore.com>
(cherry picked from commit 619ed58ac4e2fbed71ac05f664a4a17e32537176)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/auditsc.c
diff --cc kernel/auditsc.c
index 279cdbd78b94,123f9dc12665..000000000000
--- a/kernel/auditsc.c
+++ b/kernel/auditsc.c
@@@ -959,8 -956,8 +959,13 @@@ int audit_alloc(struct task_struct *tsk
  		return 0; /* Return if not auditing. */
  
  	state = audit_filter_task(tsk, &key);
++<<<<<<< HEAD
 +	if (state == AUDIT_DISABLED) {
 +		clear_tsk_thread_flag(tsk, TIF_SYSCALL_AUDIT);
++=======
+ 	if (state == AUDIT_STATE_DISABLED) {
+ 		clear_task_syscall_work(tsk, SYSCALL_AUDIT);
++>>>>>>> 619ed58ac4e2 (audit: Rename enum audit_state constants to avoid AUDIT_DISABLED redefinition)
  		return 0;
  	}
  
diff --git a/kernel/audit.h b/kernel/audit.h
index b6a48746db57..8229f8ebd6c7 100644
--- a/kernel/audit.h
+++ b/kernel/audit.h
@@ -35,16 +35,16 @@
    a per-task filter.  At syscall entry, the audit_state is augmented by
    the syscall filter. */
 enum audit_state {
-	AUDIT_DISABLED,		/* Do not create per-task audit_context.
+	AUDIT_STATE_DISABLED,	/* Do not create per-task audit_context.
 				 * No syscall-specific audit records can
 				 * be generated. */
-	AUDIT_BUILD_CONTEXT,	/* Create the per-task audit_context,
+	AUDIT_STATE_BUILD,	/* Create the per-task audit_context,
 				 * and fill it in at syscall
 				 * entry time.  This makes a full
 				 * syscall record available if some
 				 * other part of the kernel decides it
 				 * should be recorded. */
-	AUDIT_RECORD_CONTEXT	/* Create the per-task audit_context,
+	AUDIT_STATE_RECORD	/* Create the per-task audit_context,
 				 * always fill it in at syscall entry
 				 * time, and always write out the audit
 				 * record at syscall exit time.  */
@@ -339,7 +339,7 @@ static inline int audit_signal_info_syscall(struct task_struct *t)
 	return 0;
 }
 
-#define audit_filter_inodes(t, c) AUDIT_DISABLED
+#define audit_filter_inodes(t, c) AUDIT_STATE_DISABLED
 #endif /* CONFIG_AUDITSYSCALL */
 
 extern char *audit_unpack_string(void **bufp, size_t *remain, size_t len);
* Unmerged path kernel/auditsc.c
