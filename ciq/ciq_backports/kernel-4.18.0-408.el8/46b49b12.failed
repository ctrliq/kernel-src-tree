arch/cc: Introduce a function to check for confidential computing features

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-408.el8
commit-author Tom Lendacky <thomas.lendacky@amd.com>
commit 46b49b12f3fc5e1347dba37d4639e2165f447871
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-408.el8/46b49b12.failed

In preparation for other confidential computing technologies, introduce
a generic helper function, cc_platform_has(), that can be used to
check for specific active confidential computing attributes, like
memory encryption. This is intended to eliminate having to add multiple
technology-specific checks to the code (e.g. if (sev_active() ||
tdx_active() || ... ).

 [ bp: s/_CC_PLATFORM_H/_LINUX_CC_PLATFORM_H/g ]

Co-developed-by: Andi Kleen <ak@linux.intel.com>
	Signed-off-by: Andi Kleen <ak@linux.intel.com>
Co-developed-by: Kuppuswamy Sathyanarayanan <sathyanarayanan.kuppuswamy@linux.intel.com>
	Signed-off-by: Kuppuswamy Sathyanarayanan <sathyanarayanan.kuppuswamy@linux.intel.com>
	Signed-off-by: Tom Lendacky <thomas.lendacky@amd.com>
	Signed-off-by: Borislav Petkov <bp@suse.de>
Link: https://lkml.kernel.org/r/20210928191009.32551-3-bp@alien8.de
(cherry picked from commit 46b49b12f3fc5e1347dba37d4639e2165f447871)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/Kconfig
diff --cc arch/Kconfig
index d1c597007aaa,d1e69d6e8498..000000000000
--- a/arch/Kconfig
+++ b/arch/Kconfig
@@@ -1077,4 -1195,104 +1077,103 @@@ config HAVE_ARCH_COMPILER_
  	  linux/compiler-*.h in order to override macro definitions that those
  	  headers generally provide.
  
++<<<<<<< HEAD
++=======
+ config HAVE_ARCH_PREL32_RELOCATIONS
+ 	bool
+ 	help
+ 	  May be selected by an architecture if it supports place-relative
+ 	  32-bit relocations, both in the toolchain and in the module loader,
+ 	  in which case relative references can be used in special sections
+ 	  for PCI fixup, initcalls etc which are only half the size on 64 bit
+ 	  architectures, and don't require runtime relocation on relocatable
+ 	  kernels.
+ 
+ config ARCH_USE_MEMREMAP_PROT
+ 	bool
+ 
+ config LOCK_EVENT_COUNTS
+ 	bool "Locking event counts collection"
+ 	depends on DEBUG_FS
+ 	help
+ 	  Enable light-weight counting of various locking related events
+ 	  in the system with minimal performance impact. This reduces
+ 	  the chance of application behavior change because of timing
+ 	  differences. The counts are reported via debugfs.
+ 
+ # Select if the architecture has support for applying RELR relocations.
+ config ARCH_HAS_RELR
+ 	bool
+ 
+ config RELR
+ 	bool "Use RELR relocation packing"
+ 	depends on ARCH_HAS_RELR && TOOLS_SUPPORT_RELR
+ 	default y
+ 	help
+ 	  Store the kernel's dynamic relocations in the RELR relocation packing
+ 	  format. Requires a compatible linker (LLD supports this feature), as
+ 	  well as compatible NM and OBJCOPY utilities (llvm-nm and llvm-objcopy
+ 	  are compatible).
+ 
+ config ARCH_HAS_MEM_ENCRYPT
+ 	bool
+ 
+ config ARCH_HAS_CC_PLATFORM
+ 	bool
+ 
+ config HAVE_SPARSE_SYSCALL_NR
+        bool
+        help
+           An architecture should select this if its syscall numbering is sparse
+ 	  to save space. For example, MIPS architecture has a syscall array with
+ 	  entries at 4000, 5000 and 6000 locations. This option turns on syscall
+ 	  related optimizations for a given architecture.
+ 
+ config ARCH_HAS_VDSO_DATA
+ 	bool
+ 
+ config HAVE_STATIC_CALL
+ 	bool
+ 
+ config HAVE_STATIC_CALL_INLINE
+ 	bool
+ 	depends on HAVE_STATIC_CALL
+ 
+ config HAVE_PREEMPT_DYNAMIC
+ 	bool
+ 	depends on HAVE_STATIC_CALL
+ 	depends on GENERIC_ENTRY
+ 	help
+ 	   Select this if the architecture support boot time preempt setting
+ 	   on top of static calls. It is strongly advised to support inline
+ 	   static call to avoid any overhead.
+ 
+ config ARCH_WANT_LD_ORPHAN_WARN
+ 	bool
+ 	help
+ 	  An arch should select this symbol once all linker sections are explicitly
+ 	  included, size-asserted, or discarded in the linker scripts. This is
+ 	  important because we never want expected sections to be placed heuristically
+ 	  by the linker, since the locations of such sections can change between linker
+ 	  versions.
+ 
+ config HAVE_ARCH_PFN_VALID
+ 	bool
+ 
+ config ARCH_SUPPORTS_DEBUG_PAGEALLOC
+ 	bool
+ 
+ config ARCH_SPLIT_ARG64
+ 	bool
+ 	help
+ 	   If a 32-bit architecture requires 64-bit arguments to be split into
+ 	   pairs of 32-bit arguments, select this option.
+ 
+ config ARCH_HAS_ELFCORE_COMPAT
+ 	bool
+ 
+ config ARCH_HAS_PARANOID_L1D_FLUSH
+ 	bool
+ 
++>>>>>>> 46b49b12f3fc (arch/cc: Introduce a function to check for confidential computing features)
  source "kernel/gcov/Kconfig"
 -
 -source "scripts/gcc-plugins/Kconfig"
 -
 -endmenu
* Unmerged path arch/Kconfig
diff --git a/include/linux/cc_platform.h b/include/linux/cc_platform.h
new file mode 100644
index 000000000000..a075b70b9a70
--- /dev/null
+++ b/include/linux/cc_platform.h
@@ -0,0 +1,88 @@
+/* SPDX-License-Identifier: GPL-2.0-only */
+/*
+ * Confidential Computing Platform Capability checks
+ *
+ * Copyright (C) 2021 Advanced Micro Devices, Inc.
+ *
+ * Author: Tom Lendacky <thomas.lendacky@amd.com>
+ */
+
+#ifndef _LINUX_CC_PLATFORM_H
+#define _LINUX_CC_PLATFORM_H
+
+#include <linux/types.h>
+#include <linux/stddef.h>
+
+/**
+ * enum cc_attr - Confidential computing attributes
+ *
+ * These attributes represent confidential computing features that are
+ * currently active.
+ */
+enum cc_attr {
+	/**
+	 * @CC_ATTR_MEM_ENCRYPT: Memory encryption is active
+	 *
+	 * The platform/OS is running with active memory encryption. This
+	 * includes running either as a bare-metal system or a hypervisor
+	 * and actively using memory encryption or as a guest/virtual machine
+	 * and actively using memory encryption.
+	 *
+	 * Examples include SME, SEV and SEV-ES.
+	 */
+	CC_ATTR_MEM_ENCRYPT,
+
+	/**
+	 * @CC_ATTR_HOST_MEM_ENCRYPT: Host memory encryption is active
+	 *
+	 * The platform/OS is running as a bare-metal system or a hypervisor
+	 * and actively using memory encryption.
+	 *
+	 * Examples include SME.
+	 */
+	CC_ATTR_HOST_MEM_ENCRYPT,
+
+	/**
+	 * @CC_ATTR_GUEST_MEM_ENCRYPT: Guest memory encryption is active
+	 *
+	 * The platform/OS is running as a guest/virtual machine and actively
+	 * using memory encryption.
+	 *
+	 * Examples include SEV and SEV-ES.
+	 */
+	CC_ATTR_GUEST_MEM_ENCRYPT,
+
+	/**
+	 * @CC_ATTR_GUEST_STATE_ENCRYPT: Guest state encryption is active
+	 *
+	 * The platform/OS is running as a guest/virtual machine and actively
+	 * using memory encryption and register state encryption.
+	 *
+	 * Examples include SEV-ES.
+	 */
+	CC_ATTR_GUEST_STATE_ENCRYPT,
+};
+
+#ifdef CONFIG_ARCH_HAS_CC_PLATFORM
+
+/**
+ * cc_platform_has() - Checks if the specified cc_attr attribute is active
+ * @attr: Confidential computing attribute to check
+ *
+ * The cc_platform_has() function will return an indicator as to whether the
+ * specified Confidential Computing attribute is currently active.
+ *
+ * Context: Any context
+ * Return:
+ * * TRUE  - Specified Confidential Computing attribute is active
+ * * FALSE - Specified Confidential Computing attribute is not active
+ */
+bool cc_platform_has(enum cc_attr attr);
+
+#else	/* !CONFIG_ARCH_HAS_CC_PLATFORM */
+
+static inline bool cc_platform_has(enum cc_attr attr) { return false; }
+
+#endif	/* CONFIG_ARCH_HAS_CC_PLATFORM */
+
+#endif	/* _LINUX_CC_PLATFORM_H */
