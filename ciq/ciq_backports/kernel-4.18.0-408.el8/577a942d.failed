scsi: lpfc: Fix null pointer dereference after failing to issue FLOGI and PLOGI

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-408.el8
commit-author James Smart <jsmart2021@gmail.com>
commit 577a942df3de2666f6947bdd3a5c9e8d30073424
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-408.el8/577a942d.failed

If lpfc_issue_els_flogi() fails and returns non-zero status, the node
reference count is decremented to trigger the release of the nodelist
structure. However, if there is a prior registration or dev-loss-evt work
pending, the node may be released prematurely.  When dev-loss-evt
completes, the released node is referenced causing a use-after-free null
pointer dereference.

Similarly, when processing non-zero ELS PLOGI completion status in
lpfc_cmpl_els_plogi(), the ndlp flags are checked for a transport
registration before triggering node removal.  If dev-loss-evt work is
pending, the node may be released prematurely and a subsequent call to
lpfc_dev_loss_tmo_handler() results in a use after free ndlp dereference.

Add test for pending dev-loss before decrementing the node reference count
for FLOGI, PLOGI, PRLI, and ADISC handling.

Link: https://lore.kernel.org/r/20220412222008.126521-9-jsmart2021@gmail.com
Co-developed-by: Justin Tee <justin.tee@broadcom.com>
	Signed-off-by: Justin Tee <justin.tee@broadcom.com>
	Signed-off-by: James Smart <jsmart2021@gmail.com>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit 577a942df3de2666f6947bdd3a5c9e8d30073424)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/lpfc/lpfc_els.c
diff --cc drivers/scsi/lpfc/lpfc_els.c
index a78140fea50c,44ef87324b80..000000000000
--- a/drivers/scsi/lpfc/lpfc_els.c
+++ b/drivers/scsi/lpfc/lpfc_els.c
@@@ -1969,6 -1990,8 +1975,11 @@@ lpfc_cmpl_els_plogi(struct lpfc_hba *ph
  	struct lpfc_dmabuf *prsp;
  	int disc;
  	struct serv_parm *sp = NULL;
++<<<<<<< HEAD
++=======
+ 	u32 ulp_status, ulp_word4, did, iotag;
+ 	bool release_node = false;
++>>>>>>> 577a942df3de (scsi: lpfc: Fix null pointer dereference after failing to issue FLOGI and PLOGI)
  
  	/* we pass cmdiocb to state machine which needs rspiocb as well */
  	cmdiocb->context_un.rsp_iocb = rspiocb;
@@@ -2271,6 -2303,9 +2284,12 @@@ lpfc_cmpl_els_prli(struct lpfc_hba *phb
  	struct lpfc_nodelist *ndlp;
  	char *mode;
  	u32 loglevel;
++<<<<<<< HEAD
++=======
+ 	u32 ulp_status;
+ 	u32 ulp_word4;
+ 	bool release_node = false;
++>>>>>>> 577a942df3de (scsi: lpfc: Fix null pointer dereference after failing to issue FLOGI and PLOGI)
  
  	/* we pass cmdiocb to state machine which needs rspiocb as well */
  	cmdiocb->context_un.rsp_iocb = rspiocb;
@@@ -2722,6 -2764,8 +2745,11 @@@ lpfc_cmpl_els_adisc(struct lpfc_hba *ph
  	IOCB_t *irsp;
  	struct lpfc_nodelist *ndlp;
  	int  disc;
++<<<<<<< HEAD
++=======
+ 	u32 ulp_status, ulp_word4, tmo;
+ 	bool release_node = false;
++>>>>>>> 577a942df3de (scsi: lpfc: Fix null pointer dereference after failing to issue FLOGI and PLOGI)
  
  	/* we pass cmdiocb to state machine which needs rspiocb as well */
  	cmdiocb->context_un.rsp_iocb = rspiocb;
* Unmerged path drivers/scsi/lpfc/lpfc_els.c
