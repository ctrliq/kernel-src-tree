selftests: vm: pkeys: add helpers for pkey bits

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-408.el8
commit-author Sandipan Das <sandipan@linux.ibm.com>
commit 0c416bcaef8dc9b8378b3e7fa7ce3e9ad5cedcd0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-408.el8/0c416bca.failed

This introduces some functions that help with setting or clearing bits of
a particular pkey.  This also adds an abstraction for getting a pkey's bit
position in the pkey register as this may vary across architectures.

	Signed-off-by: Sandipan Das <sandipan@linux.ibm.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Acked-by: Dave Hansen <dave.hansen@intel.com>
	Cc: "Desnes A. Nunes do Rosario" <desnesn@linux.vnet.ibm.com>
	Cc: Florian Weimer <fweimer@redhat.com>
	Cc: Ingo Molnar <mingo@kernel.org>
	Cc: Ram Pai <linuxram@us.ibm.com>
	Cc: Thiago Jung Bauermann <bauerman@linux.ibm.com>
	Cc: "Aneesh Kumar K.V" <aneesh.kumar@linux.ibm.com>
	Cc: Michael Ellerman <mpe@ellerman.id.au>
	Cc: Michal Hocko <mhocko@kernel.org>
	Cc: Michal Suchanek <msuchanek@suse.de>
	Cc: Shuah Khan <shuah@kernel.org>
Link: http://lkml.kernel.org/r/2ad9705f4f68ca7e72155cc583415e5a979546f1.1585646528.git.sandipan@linux.ibm.com
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 0c416bcaef8dc9b8378b3e7fa7ce3e9ad5cedcd0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/testing/selftests/vm/pkey-helpers.h
#	tools/testing/selftests/vm/pkey-x86.h
#	tools/testing/selftests/x86/protection_keys.c
diff --cc tools/testing/selftests/x86/protection_keys.c
index 5d546dcdbc80,bed9d4de12b4..000000000000
--- a/tools/testing/selftests/x86/protection_keys.c
+++ b/tools/testing/selftests/x86/protection_keys.c
@@@ -391,34 -332,15 +391,42 @@@ pid_t fork_lazy_child(void
  	return forkret;
  }
  
 +#ifndef PKEY_DISABLE_ACCESS
 +# define PKEY_DISABLE_ACCESS	0x1
 +#endif
 +
 +#ifndef PKEY_DISABLE_WRITE
 +# define PKEY_DISABLE_WRITE	0x2
 +#endif
 +
  static u32 hw_pkey_get(int pkey, unsigned long flags)
  {
++<<<<<<< HEAD:tools/testing/selftests/x86/protection_keys.c
 +	u32 mask = (PKEY_DISABLE_ACCESS|PKEY_DISABLE_WRITE);
 +	u32 pkru = __rdpkru();
 +	u32 shifted_pkru;
 +	u32 masked_pkru;
++=======
+ 	u64 pkey_reg = __read_pkey_reg();
++>>>>>>> 0c416bcaef8d (selftests: vm: pkeys: add helpers for pkey bits):tools/testing/selftests/vm/protection_keys.c
  
  	dprintf1("%s(pkey=%d, flags=%lx) = %x / %d\n",
  			__func__, pkey, flags, 0, 0);
 -	dprintf2("%s() raw pkey_reg: %016llx\n", __func__, pkey_reg);
 +	dprintf2("%s() raw pkru: %x\n", __func__, pkru);
  
++<<<<<<< HEAD:tools/testing/selftests/x86/protection_keys.c
 +	shifted_pkru = (pkru >> (pkey * PKRU_BITS_PER_PKEY));
 +	dprintf2("%s() shifted_pkru: %x\n", __func__, shifted_pkru);
 +	masked_pkru = shifted_pkru & mask;
 +	dprintf2("%s() masked  pkru: %x\n", __func__, masked_pkru);
 +	/*
 +	 * shift down the relevant bits to the lowest two, then
 +	 * mask off all the other high bits.
 +	 */
 +	return masked_pkru;
++=======
+ 	return (u32) get_pkey_bits(pkey_reg, pkey);
++>>>>>>> 0c416bcaef8d (selftests: vm: pkeys: add helpers for pkey bits):tools/testing/selftests/vm/protection_keys.c
  }
  
  static int hw_pkey_set(int pkey, unsigned long rights, unsigned long flags)
@@@ -430,17 -352,15 +438,22 @@@
  	/* make sure that 'rights' only contains the bits we expect: */
  	assert(!(rights & ~mask));
  
++<<<<<<< HEAD:tools/testing/selftests/x86/protection_keys.c
 +	/* copy old pkru */
 +	new_pkru = old_pkru;
 +	/* mask out bits from pkey in old value: */
 +	new_pkru &= ~(mask << (pkey * PKRU_BITS_PER_PKEY));
 +	/* OR in new bits for pkey: */
 +	new_pkru |= (rights << (pkey * PKRU_BITS_PER_PKEY));
++=======
+ 	/* modify bits accordingly in old pkey_reg and assign it */
+ 	new_pkey_reg = set_pkey_bits(old_pkey_reg, pkey, rights);
++>>>>>>> 0c416bcaef8d (selftests: vm: pkeys: add helpers for pkey bits):tools/testing/selftests/vm/protection_keys.c
  
 -	__write_pkey_reg(new_pkey_reg);
 +	__wrpkru(new_pkru);
  
 -	dprintf3("%s(pkey=%d, rights=%lx, flags=%lx) = %x"
 -		" pkey_reg now: %016llx old_pkey_reg: %016llx\n",
 -		__func__, pkey, rights, flags, 0, __read_pkey_reg(),
 -		old_pkey_reg);
 +	dprintf3("%s(pkey=%d, rights=%lx, flags=%lx) = %x pkru now: %x old_pkru: %x\n",
 +			__func__, pkey, rights, flags, 0, __rdpkru(), old_pkru);
  	return 0;
  }
  
@@@ -465,9 -386,10 +478,16 @@@ void pkey_disable_set(int pkey, int fla
  
  	ret = hw_pkey_set(pkey, pkey_rights, syscall_flags);
  	assert(!ret);
++<<<<<<< HEAD:tools/testing/selftests/x86/protection_keys.c
 +	/*pkru and flags have the same format */
 +	shadow_pkru |= flags << (pkey * 2);
 +	dprintf1("%s(%d) shadow: 0x%x\n", __func__, pkey, shadow_pkru);
++=======
+ 	/* pkey_reg and flags have the same format */
+ 	shadow_pkey_reg = set_pkey_bits(shadow_pkey_reg, pkey, pkey_rights);
+ 	dprintf1("%s(%d) shadow: 0x%016llx\n",
+ 		__func__, pkey, shadow_pkey_reg);
++>>>>>>> 0c416bcaef8d (selftests: vm: pkeys: add helpers for pkey bits):tools/testing/selftests/vm/protection_keys.c
  
  	pkey_assert(ret >= 0);
  
@@@ -498,8 -421,7 +518,12 @@@ void pkey_disable_clear(int pkey, int f
  	pkey_rights |= flags;
  
  	ret = hw_pkey_set(pkey, pkey_rights, 0);
++<<<<<<< HEAD:tools/testing/selftests/x86/protection_keys.c
 +	/* pkru and flags have the same format */
 +	shadow_pkru &= ~(flags << (pkey * 2));
++=======
+ 	shadow_pkey_reg = set_pkey_bits(shadow_pkey_reg, pkey, pkey_rights);
++>>>>>>> 0c416bcaef8d (selftests: vm: pkeys: add helpers for pkey bits):tools/testing/selftests/vm/protection_keys.c
  	pkey_assert(ret >= 0);
  
  	pkey_rights = hw_pkey_get(pkey, syscall_flags);
@@@ -561,33 -484,44 +585,48 @@@ int alloc_pkey(void
  	int ret;
  	unsigned long init_val = 0x0;
  
 -	dprintf1("%s()::%d, pkey_reg: 0x%016llx shadow: %016llx\n",
 -			__func__, __LINE__, __read_pkey_reg(), shadow_pkey_reg);
 +	dprintf1("alloc_pkey()::%d, pkru: 0x%x shadow: %x\n",
 +			__LINE__, __rdpkru(), shadow_pkru);
  	ret = sys_pkey_alloc(0, init_val);
  	/*
 -	 * pkey_alloc() sets PKEY register, so we need to reflect it in
 -	 * shadow_pkey_reg:
 +	 * pkey_alloc() sets PKRU, so we need to reflect it in
 +	 * shadow_pkru:
  	 */
 -	dprintf4("%s()::%d, ret: %d pkey_reg: 0x%016llx"
 -			" shadow: 0x%016llx\n",
 -			__func__, __LINE__, ret, __read_pkey_reg(),
 -			shadow_pkey_reg);
 +	dprintf4("alloc_pkey()::%d, ret: %d pkru: 0x%x shadow: 0x%x\n",
 +			__LINE__, ret, __rdpkru(), shadow_pkru);
  	if (ret) {
  		/* clear both the bits: */
++<<<<<<< HEAD:tools/testing/selftests/x86/protection_keys.c
 +		shadow_pkru &= ~(0x3      << (ret * 2));
 +		dprintf4("alloc_pkey()::%d, ret: %d pkru: 0x%x shadow: 0x%x\n",
 +				__LINE__, ret, __rdpkru(), shadow_pkru);
++=======
+ 		shadow_pkey_reg = set_pkey_bits(shadow_pkey_reg, ret,
+ 						~PKEY_MASK);
+ 		dprintf4("%s()::%d, ret: %d pkey_reg: 0x%016llx"
+ 				" shadow: 0x%016llx\n",
+ 				__func__,
+ 				__LINE__, ret, __read_pkey_reg(),
+ 				shadow_pkey_reg);
++>>>>>>> 0c416bcaef8d (selftests: vm: pkeys: add helpers for pkey bits):tools/testing/selftests/vm/protection_keys.c
  		/*
  		 * move the new state in from init_val
 -		 * (remember, we cheated and init_val == pkey_reg format)
 +		 * (remember, we cheated and init_val == pkru format)
  		 */
++<<<<<<< HEAD:tools/testing/selftests/x86/protection_keys.c
 +		shadow_pkru |=  (init_val << (ret * 2));
++=======
+ 		shadow_pkey_reg = set_pkey_bits(shadow_pkey_reg, ret,
+ 						init_val);
++>>>>>>> 0c416bcaef8d (selftests: vm: pkeys: add helpers for pkey bits):tools/testing/selftests/vm/protection_keys.c
  	}
 -	dprintf4("%s()::%d, ret: %d pkey_reg: 0x%016llx"
 -			" shadow: 0x%016llx\n",
 -			__func__, __LINE__, ret, __read_pkey_reg(),
 -			shadow_pkey_reg);
 -	dprintf1("%s()::%d errno: %d\n", __func__, __LINE__, errno);
 +	dprintf4("alloc_pkey()::%d, ret: %d pkru: 0x%x shadow: 0x%x\n",
 +			__LINE__, ret, __rdpkru(), shadow_pkru);
 +	dprintf1("alloc_pkey()::%d errno: %d\n", __LINE__, errno);
  	/* for shadow checking: */
 -	read_pkey_reg();
 -	dprintf4("%s()::%d, ret: %d pkey_reg: 0x%016llx"
 -		 " shadow: 0x%016llx\n",
 -		__func__, __LINE__, ret, __read_pkey_reg(),
 -		shadow_pkey_reg);
 +	rdpkru();
 +	dprintf4("alloc_pkey()::%d, ret: %d pkru: 0x%x shadow: 0x%x\n",
 +			__LINE__, ret, __rdpkru(), shadow_pkru);
  	return ret;
  }
  
* Unmerged path tools/testing/selftests/vm/pkey-helpers.h
* Unmerged path tools/testing/selftests/vm/pkey-x86.h
* Unmerged path tools/testing/selftests/vm/pkey-helpers.h
* Unmerged path tools/testing/selftests/vm/pkey-x86.h
* Unmerged path tools/testing/selftests/x86/protection_keys.c
