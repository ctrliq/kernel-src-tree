scsi: mpi3mr: Add support for MPT commands

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-408.el8
commit-author Sumit Saxena <sumit.saxena@broadcom.com>
commit 506bc1a0d6ba626492c06e5632a3fbe202770fd2
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-408.el8/506bc1a0.failed

There are certain management commands which require firmware intervention.
These commands are termed MPT commands. Add support for them.

Link: https://lore.kernel.org/r/20220429211641.642010-5-sumit.saxena@broadcom.com
	Reviewed-by: Himanshu Madhani <himanshu.madhani@oracle.com>
	Signed-off-by: Sumit Saxena <sumit.saxena@broadcom.com>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit 506bc1a0d6ba626492c06e5632a3fbe202770fd2)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/mpi3mr/mpi3mr.h
#	drivers/scsi/mpi3mr/mpi3mr_app.c
diff --cc drivers/scsi/mpi3mr/mpi3mr.h
index 054d5f025cbf,fb4c1286b4ea..000000000000
--- a/drivers/scsi/mpi3mr/mpi3mr.h
+++ b/drivers/scsi/mpi3mr/mpi3mr.h
@@@ -169,6 -177,39 +169,42 @@@ extern int prot_mask
  /* MSI Index from Reply Queue Index */
  #define REPLY_QUEUE_IDX_TO_MSIX_IDX(qidx, offset)	(qidx + offset)
  
++<<<<<<< HEAD
++=======
+ /*
+  * Maximum data transfer size definitions for management
+  * application commands
+  */
+ #define MPI3MR_MAX_APP_XFER_SIZE	(1 * 1024 * 1024)
+ #define MPI3MR_MAX_APP_XFER_SEGMENTS	512
+ /*
+  * 2048 sectors are for data buffers and additional 512 sectors for
+  * other buffers
+  */
+ #define MPI3MR_MAX_APP_XFER_SECTORS	(2048 + 512)
+ 
+ /**
+  * struct mpi3mr_buf_map -  local structure to
+  * track kernel and user buffers associated with an BSG
+  * structure.
+  *
+  * @bsg_buf: BSG buffer virtual address
+  * @bsg_buf_len:  BSG buffer length
+  * @kern_buf: Kernel buffer virtual address
+  * @kern_buf_len: Kernel buffer length
+  * @kern_buf_dma: Kernel buffer DMA address
+  * @data_dir: Data direction.
+  */
+ struct mpi3mr_buf_map {
+ 	void *bsg_buf;
+ 	u32 bsg_buf_len;
+ 	void *kern_buf;
+ 	u32 kern_buf_len;
+ 	dma_addr_t kern_buf_dma;
+ 	u8 data_dir;
+ };
+ 
++>>>>>>> 506bc1a0d6ba (scsi: mpi3mr: Add support for MPT commands)
  /* IOC State definitions */
  enum mpi3mr_iocstate {
  	MRIOC_STATE_READY = 1,
@@@ -910,8 -1007,20 +948,21 @@@ void mpi3mr_cleanup_fwevt_list(struct m
  void mpi3mr_flush_host_io(struct mpi3mr_ioc *mrioc);
  void mpi3mr_invalidate_devhandles(struct mpi3mr_ioc *mrioc);
  void mpi3mr_rfresh_tgtdevs(struct mpi3mr_ioc *mrioc);
 -void mpi3mr_flush_delayed_cmd_lists(struct mpi3mr_ioc *mrioc);
 -void mpi3mr_check_rh_fault_ioc(struct mpi3mr_ioc *mrioc, u32 reason_code);
 -void mpi3mr_print_fault_info(struct mpi3mr_ioc *mrioc);
 -void mpi3mr_check_rh_fault_ioc(struct mpi3mr_ioc *mrioc, u32 reason_code);
 +void mpi3mr_flush_delayed_rmhs_list(struct mpi3mr_ioc *mrioc);
  int mpi3mr_process_op_reply_q(struct mpi3mr_ioc *mrioc,
++<<<<<<< HEAD
 +	struct mpi3mr_intr_info *intr_info);
++=======
+ 	struct op_reply_qinfo *op_reply_q);
+ int mpi3mr_blk_mq_poll(struct Scsi_Host *shost, unsigned int queue_num);
+ void mpi3mr_bsg_init(struct mpi3mr_ioc *mrioc);
+ void mpi3mr_bsg_exit(struct mpi3mr_ioc *mrioc);
+ int mpi3mr_issue_tm(struct mpi3mr_ioc *mrioc, u8 tm_type,
+ 	u16 handle, uint lun, u16 htag, ulong timeout,
+ 	struct mpi3mr_drv_cmd *drv_cmd,
+ 	u8 *resp_code, struct scsi_cmnd *scmd);
+ struct mpi3mr_tgt_dev *mpi3mr_get_tgtdev_by_handle(
+ 	struct mpi3mr_ioc *mrioc, u16 handle);
++>>>>>>> 506bc1a0d6ba (scsi: mpi3mr: Add support for MPT commands)
  
  #endif /*MPI3MR_H_INCLUDED*/
* Unmerged path drivers/scsi/mpi3mr/mpi3mr_app.c
* Unmerged path drivers/scsi/mpi3mr/mpi3mr.h
* Unmerged path drivers/scsi/mpi3mr/mpi3mr_app.c
diff --git a/drivers/scsi/mpi3mr/mpi3mr_debug.h b/drivers/scsi/mpi3mr/mpi3mr_debug.h
index c7982443f45a..753056d26183 100644
--- a/drivers/scsi/mpi3mr/mpi3mr_debug.h
+++ b/drivers/scsi/mpi3mr/mpi3mr_debug.h
@@ -124,6 +124,31 @@
 
 #endif /* MPT3SAS_DEBUG_H_INCLUDED */
 
+/**
+ * dprint_dump - print contents of a memory buffer
+ * @req: Pointer to a memory buffer
+ * @sz: Memory buffer size
+ * @namestr: Name String to identify the buffer type
+ */
+static inline void
+dprint_dump(void *req, int sz, const char *name_string)
+{
+	int i;
+	__le32 *mfp = (__le32 *)req;
+
+	sz = sz/4;
+	if (name_string)
+		pr_info("%s:\n\t", name_string);
+	else
+		pr_info("request:\n\t");
+	for (i = 0; i < sz; i++) {
+		if (i && ((i % 8) == 0))
+			pr_info("\n\t");
+		pr_info("%08x ", le32_to_cpu(mfp[i]));
+	}
+	pr_info("\n");
+}
+
 /**
  * dprint_dump_req - print message frame contents
  * @req: pointer to message frame
diff --git a/drivers/scsi/mpi3mr/mpi3mr_os.c b/drivers/scsi/mpi3mr/mpi3mr_os.c
index 4dd7893b5dad..5214a699d50a 100644
--- a/drivers/scsi/mpi3mr/mpi3mr_os.c
+++ b/drivers/scsi/mpi3mr/mpi3mr_os.c
@@ -631,7 +631,7 @@ static struct mpi3mr_tgt_dev  *__mpi3mr_get_tgtdev_by_handle(
  *
  * Return: Target device reference.
  */
-static struct mpi3mr_tgt_dev *mpi3mr_get_tgtdev_by_handle(
+struct mpi3mr_tgt_dev *mpi3mr_get_tgtdev_by_handle(
 	struct mpi3mr_ioc *mrioc, u16 handle)
 {
 	struct mpi3mr_tgt_dev *tgtdev;
@@ -2825,7 +2825,7 @@ inline void mpi3mr_poll_pend_io_completions(struct mpi3mr_ioc *mrioc)
  *
  * Return: 0 on success, non-zero on errors
  */
-static int mpi3mr_issue_tm(struct mpi3mr_ioc *mrioc, u8 tm_type,
+int mpi3mr_issue_tm(struct mpi3mr_ioc *mrioc, u8 tm_type,
 	u16 handle, uint lun, u16 htag, ulong timeout,
 	struct mpi3mr_drv_cmd *drv_cmd,
 	u8 *resp_code, struct scsi_cmnd *scmd)
