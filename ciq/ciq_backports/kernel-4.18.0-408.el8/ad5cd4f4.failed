ext4: fix fallocate to use file_modified to update permissions consistently

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-408.el8
commit-author Darrick J. Wong <djwong@kernel.org>
commit ad5cd4f4ee4d5fcdb1bfb7a0c073072961e70783
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-408.el8/ad5cd4f4.failed

Since the initial introduction of (posix) fallocate back at the turn of
the century, it has been possible to use this syscall to change the
user-visible contents of files.  This can happen by extending the file
size during a preallocation, or through any of the newer modes (punch,
zero, collapse, insert range).  Because the call can be used to change
file contents, we should treat it like we do any other modification to a
file -- update the mtime, and drop set[ug]id privileges/capabilities.

The VFS function file_modified() does all this for us if pass it a
locked inode, so let's make fallocate drop permissions correctly.

	Signed-off-by: Darrick J. Wong <djwong@kernel.org>
Link: https://lore.kernel.org/r/20220308185043.GA117678@magnolia
	Signed-off-by: Theodore Ts'o <tytso@mit.edu>
	Cc: stable@kernel.org
(cherry picked from commit ad5cd4f4ee4d5fcdb1bfb7a0c073072961e70783)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/ext4/extents.c
diff --cc fs/ext4/extents.c
index 1e12482868b3,e473fde6b64b..000000000000
--- a/fs/ext4/extents.c
+++ b/fs/ext4/extents.c
@@@ -4781,12 -4570,14 +4781,16 @@@ static long ext4_zero_range(struct fil
  	}
  
  	flags = EXT4_GET_BLOCKS_CREATE_UNWRIT_EXT;
 +	if (mode & FALLOC_FL_KEEP_SIZE)
 +		flags |= EXT4_GET_BLOCKS_KEEP_SIZE;
  
 -	/* Wait all existing dio workers, newcomers will block on i_rwsem */
 +	/* Wait all existing dio workers, newcomers will block on i_mutex */
  	inode_dio_wait(inode);
  
+ 	ret = file_modified(file);
+ 	if (ret)
+ 		goto out_mutex;
+ 
  	/* Preallocate the range including the unaligned edges */
  	if (partial_begin || partial_end) {
  		ret = ext4_alloc_file_blocks(file,
@@@ -4913,22 -4693,29 +4917,41 @@@ long ext4_fallocate(struct file *file, 
  		     FALLOC_FL_INSERT_RANGE))
  		return -EOPNOTSUPP;
  
++<<<<<<< HEAD
 +	if (mode & FALLOC_FL_PUNCH_HOLE)
 +		return ext4_punch_hole(inode, offset, len);
++=======
+ 	if (mode & FALLOC_FL_PUNCH_HOLE) {
+ 		ret = ext4_punch_hole(file, offset, len);
+ 		goto exit;
+ 	}
++>>>>>>> ad5cd4f4ee4d (ext4: fix fallocate to use file_modified to update permissions consistently)
  
  	ret = ext4_convert_inline_data(inode);
  	if (ret)
 -		goto exit;
 +		return ret;
 +
++<<<<<<< HEAD
 +	if (mode & FALLOC_FL_COLLAPSE_RANGE)
 +		return ext4_collapse_range(inode, offset, len);
 +
 +	if (mode & FALLOC_FL_INSERT_RANGE)
 +		return ext4_insert_range(inode, offset, len);
  
 +	if (mode & FALLOC_FL_ZERO_RANGE)
 +		return ext4_zero_range(file, offset, len, mode);
++=======
+ 	if (mode & FALLOC_FL_COLLAPSE_RANGE) {
+ 		ret = ext4_collapse_range(file, offset, len);
+ 		goto exit;
+ 	}
+ 
+ 	if (mode & FALLOC_FL_INSERT_RANGE) {
+ 		ret = ext4_insert_range(file, offset, len);
+ 		goto exit;
+ 	}
++>>>>>>> ad5cd4f4ee4d (ext4: fix fallocate to use file_modified to update permissions consistently)
  
 -	if (mode & FALLOC_FL_ZERO_RANGE) {
 -		ret = ext4_zero_range(file, offset, len, mode);
 -		goto exit;
 -	}
  	trace_ext4_fallocate_enter(inode, offset, len, mode);
  	lblk = offset >> blkbits;
  
@@@ -4956,9 -4741,13 +4979,13 @@@
  			goto out;
  	}
  
 -	/* Wait all existing dio workers, newcomers will block on i_rwsem */
 +	/* Wait all existing dio workers, newcomers will block on i_mutex */
  	inode_dio_wait(inode);
  
+ 	ret = file_modified(file);
+ 	if (ret)
+ 		goto out;
+ 
  	ret = ext4_alloc_file_blocks(file, lblk, max_blocks, new_size, flags);
  	if (ret)
  		goto out;
@@@ -5421,9 -5249,11 +5448,10 @@@ out
   * This implements the fallocate's collapse range functionality for ext4
   * Returns: 0 and non-zero on error.
   */
- static int ext4_collapse_range(struct inode *inode, loff_t offset, loff_t len)
+ static int ext4_collapse_range(struct file *file, loff_t offset, loff_t len)
  {
+ 	struct inode *inode = file_inode(file);
  	struct super_block *sb = inode->i_sb;
 -	struct address_space *mapping = inode->i_mapping;
  	ext4_lblk_t punch_start, punch_stop;
  	handle_t *handle;
  	unsigned int credits;
@@@ -5565,9 -5400,11 +5597,10 @@@ out_mutex
   * by len bytes.
   * Returns 0 on success, error otherwise.
   */
- static int ext4_insert_range(struct inode *inode, loff_t offset, loff_t len)
+ static int ext4_insert_range(struct file *file, loff_t offset, loff_t len)
  {
+ 	struct inode *inode = file_inode(file);
  	struct super_block *sb = inode->i_sb;
 -	struct address_space *mapping = inode->i_mapping;
  	handle_t *handle;
  	struct ext4_ext_path *path;
  	struct ext4_extent *extent;
diff --git a/fs/ext4/ext4.h b/fs/ext4/ext4.h
index 9aded71dd985..a5ac73393b20 100644
--- a/fs/ext4/ext4.h
+++ b/fs/ext4/ext4.h
@@ -2561,7 +2561,7 @@ extern int ext4_inode_attach_jinode(struct inode *inode);
 extern int ext4_can_truncate(struct inode *inode);
 extern int ext4_truncate(struct inode *);
 extern int ext4_break_layouts(struct inode *);
-extern int ext4_punch_hole(struct inode *inode, loff_t offset, loff_t length);
+extern int ext4_punch_hole(struct file *file, loff_t offset, loff_t length);
 extern void ext4_set_inode_flags(struct inode *, bool init);
 extern int ext4_alloc_da_blocks(struct inode *inode);
 extern void ext4_set_aops(struct inode *inode);
* Unmerged path fs/ext4/extents.c
diff --git a/fs/ext4/inode.c b/fs/ext4/inode.c
index 8210712dca8e..ab04daf5f9a1 100644
--- a/fs/ext4/inode.c
+++ b/fs/ext4/inode.c
@@ -4292,8 +4292,9 @@ int ext4_break_layouts(struct inode *inode)
  * Returns: 0 on success or negative on failure
  */
 
-int ext4_punch_hole(struct inode *inode, loff_t offset, loff_t length)
+int ext4_punch_hole(struct file *file, loff_t offset, loff_t length)
 {
+	struct inode *inode = file_inode(file);
 	struct super_block *sb = inode->i_sb;
 	ext4_lblk_t first_block, stop_block;
 	struct address_space *mapping = inode->i_mapping;
@@ -4355,6 +4356,10 @@ int ext4_punch_hole(struct inode *inode, loff_t offset, loff_t length)
 	/* Wait all existing dio workers, newcomers will block on i_mutex */
 	inode_dio_wait(inode);
 
+	ret = file_modified(file);
+	if (ret)
+		goto out_mutex;
+
 	/*
 	 * Prevent page faults from reinstantiating pages we have released from
 	 * page cache.
