KVM: VMX: Drop unnecessary PI logic to handle impossible conditions

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-408.el8
commit-author Sean Christopherson <seanjc@google.com>
commit c95717218add161f3e93bd454743506ed5bdd8e1
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-408.el8/c9571721.failed

Drop sanity checks on the validity of the previous pCPU when handling
vCPU block/unlock for posted interrupts.  The intention behind the sanity
checks is to avoid memory corruption in case of a race or incorrect locking,
but the code has been stable for a few years now and the checks get in
the way of eliminating kvm_vcpu.pre_cpu.

	Signed-off-by: Sean Christopherson <seanjc@google.com>
Message-Id: <20211009021236.4122790-23-seanjc@google.com>
	Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
(cherry picked from commit c95717218add161f3e93bd454743506ed5bdd8e1)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kvm/vmx/posted_intr.c
diff --cc arch/x86/kvm/vmx/posted_intr.c
index eb8a7ad6f34e,f15d4a7450a5..000000000000
--- a/arch/x86/kvm/vmx/posted_intr.c
+++ b/arch/x86/kvm/vmx/posted_intr.c
@@@ -123,12 -123,10 +123,19 @@@ static void __pi_post_block(struct kvm_
  	} while (cmpxchg64(&pi_desc->control, old.control,
  			   new.control) != old.control);
  
++<<<<<<< HEAD
 +	if (!WARN_ON_ONCE(vcpu->pre_pcpu == -1)) {
 +		raw_spin_lock(&per_cpu(blocked_vcpu_on_cpu_lock, vcpu->pre_pcpu));
 +		list_del(&vcpu->blocked_vcpu_list);
 +		raw_spin_unlock(&per_cpu(blocked_vcpu_on_cpu_lock, vcpu->pre_pcpu));
 +		vcpu->pre_pcpu = -1;
 +	}
++=======
+ 	spin_lock(&per_cpu(blocked_vcpu_on_cpu_lock, vcpu->pre_pcpu));
+ 	list_del(&vcpu->blocked_vcpu_list);
+ 	spin_unlock(&per_cpu(blocked_vcpu_on_cpu_lock, vcpu->pre_pcpu));
+ 	vcpu->pre_pcpu = -1;
++>>>>>>> c95717218add (KVM: VMX: Drop unnecessary PI logic to handle impossible conditions)
  }
  
  /*
@@@ -156,14 -154,12 +163,23 @@@ int pi_pre_block(struct kvm_vcpu *vcpu
  
  	WARN_ON(irqs_disabled());
  	local_irq_disable();
++<<<<<<< HEAD
 +	if (!WARN_ON_ONCE(vcpu->pre_pcpu != -1)) {
 +		vcpu->pre_pcpu = vcpu->cpu;
 +		raw_spin_lock(&per_cpu(blocked_vcpu_on_cpu_lock, vcpu->pre_pcpu));
 +		list_add_tail(&vcpu->blocked_vcpu_list,
 +			      &per_cpu(blocked_vcpu_on_cpu,
 +				       vcpu->pre_pcpu));
 +		raw_spin_unlock(&per_cpu(blocked_vcpu_on_cpu_lock, vcpu->pre_pcpu));
 +	}
++=======
+ 
+ 	vcpu->pre_pcpu = vcpu->cpu;
+ 	spin_lock(&per_cpu(blocked_vcpu_on_cpu_lock, vcpu->pre_pcpu));
+ 	list_add_tail(&vcpu->blocked_vcpu_list,
+ 		      &per_cpu(blocked_vcpu_on_cpu, vcpu->pre_pcpu));
+ 	spin_unlock(&per_cpu(blocked_vcpu_on_cpu_lock, vcpu->pre_pcpu));
++>>>>>>> c95717218add (KVM: VMX: Drop unnecessary PI logic to handle impossible conditions)
  
  	do {
  		old.control = new.control = pi_desc->control;
* Unmerged path arch/x86/kvm/vmx/posted_intr.c
