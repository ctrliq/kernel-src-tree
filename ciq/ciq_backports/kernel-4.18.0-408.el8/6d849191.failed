KVM: x86: Introduce KVM_CAP_DISABLE_QUIRKS2

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-408.el8
commit-author Oliver Upton <oupton@google.com>
commit 6d8491910fcd3324d0f0ece3bd68e85ead3a04d7
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-408.el8/6d849191.failed

KVM_CAP_DISABLE_QUIRKS is irrevocably broken. The capability does not
advertise the set of quirks which may be disabled to userspace, so it is
impossible to predict the behavior of KVM. Worse yet,
KVM_CAP_DISABLE_QUIRKS will tolerate any value for cap->args[0], meaning
it fails to reject attempts to set invalid quirk bits.

The only valid workaround for the quirky quirks API is to add a new CAP.
Actually advertise the set of quirks that can be disabled to userspace
so it can predict KVM's behavior. Reject values for cap->args[0] that
contain invalid bits.

Finally, add documentation for the new capability and describe the
existing quirks.

	Signed-off-by: Oliver Upton <oupton@google.com>
Message-Id: <20220301060351.442881-5-oupton@google.com>
	Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
(cherry picked from commit 6d8491910fcd3324d0f0ece3bd68e85ead3a04d7)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/include/asm/kvm_host.h
#	include/uapi/linux/kvm.h
diff --cc arch/x86/include/asm/kvm_host.h
index 96ecf6f2c1a5,0ddc2e67a731..000000000000
--- a/arch/x86/include/asm/kvm_host.h
+++ b/arch/x86/include/asm/kvm_host.h
@@@ -1946,4 -1961,16 +1946,19 @@@ static inline int kvm_cpu_get_apicid(in
  
  int kvm_cpu_dirty_log_size(void);
  
++<<<<<<< HEAD
++=======
+ int memslot_rmap_alloc(struct kvm_memory_slot *slot, unsigned long npages);
+ 
+ #define KVM_CLOCK_VALID_FLAGS						\
+ 	(KVM_CLOCK_TSC_STABLE | KVM_CLOCK_REALTIME | KVM_CLOCK_HOST_TSC)
+ 
+ #define KVM_X86_VALID_QUIRKS			\
+ 	(KVM_X86_QUIRK_LINT0_REENABLED |	\
+ 	 KVM_X86_QUIRK_CD_NW_CLEARED |		\
+ 	 KVM_X86_QUIRK_LAPIC_MMIO_HOLE |	\
+ 	 KVM_X86_QUIRK_OUT_7E_INC_RIP |		\
+ 	 KVM_X86_QUIRK_MISC_ENABLE_NO_MWAIT)
+ 
++>>>>>>> 6d8491910fcd (KVM: x86: Introduce KVM_CAP_DISABLE_QUIRKS2)
  #endif /* _ASM_X86_KVM_HOST_H */
diff --cc include/uapi/linux/kvm.h
index 46bb4d5a3040,91a6fe4e02c0..000000000000
--- a/include/uapi/linux/kvm.h
+++ b/include/uapi/linux/kvm.h
@@@ -1115,11 -1131,19 +1115,18 @@@ struct kvm_ppc_resize_hpt 
  #define KVM_CAP_HYPERV_ENFORCE_CPUID 199
  #define KVM_CAP_SREGS2 200
  #define KVM_CAP_EXIT_HYPERCALL 201
 -#define KVM_CAP_PPC_RPT_INVALIDATE 202
  #define KVM_CAP_BINARY_STATS_FD 203
  #define KVM_CAP_EXIT_ON_EMULATION_FAILURE 204
 -#define KVM_CAP_ARM_MTE 205
 -#define KVM_CAP_VM_MOVE_ENC_CONTEXT_FROM 206
 -#define KVM_CAP_VM_GPA_BITS 207
  #define KVM_CAP_XSAVE2 208
  #define KVM_CAP_SYS_ATTRIBUTES 209
++<<<<<<< HEAD
 +#define KVM_CAP_S390_MEM_OP_EXTENSION 210
++=======
+ #define KVM_CAP_PPC_AIL_MODE_3 210
+ #define KVM_CAP_S390_MEM_OP_EXTENSION 211
+ #define KVM_CAP_PMU_CAPABILITY 212
+ #define KVM_CAP_DISABLE_QUIRKS2 213
++>>>>>>> 6d8491910fcd (KVM: x86: Introduce KVM_CAP_DISABLE_QUIRKS2)
  
  #ifdef KVM_CAP_IRQ_ROUTING
  
diff --git a/Documentation/virt/kvm/api.rst b/Documentation/virt/kvm/api.rst
index bf465229a63e..5b157d8f42c8 100644
--- a/Documentation/virt/kvm/api.rst
+++ b/Documentation/virt/kvm/api.rst
@@ -6668,6 +6668,56 @@ set in the 'flags' field then both 'insn_size' and 'insn_bytes' have valid data
 in them.)
 
 
+7.31 KVM_CAP_DISABLE_QUIRKS2
+----------------------------
+
+:Capability: KVM_CAP_DISABLE_QUIRKS2
+:Parameters: args[0] - set of KVM quirks to disable
+:Architectures: x86
+:Type: vm
+
+This capability, if enabled, will cause KVM to disable some behavior
+quirks.
+
+Calling KVM_CHECK_EXTENSION for this capability returns a bitmask of
+quirks that can be disabled in KVM.
+
+The argument to KVM_ENABLE_CAP for this capability is a bitmask of
+quirks to disable, and must be a subset of the bitmask returned by
+KVM_CHECK_EXTENSION.
+
+The valid bits in cap.args[0] are:
+
+=================================== ============================================
+ KVM_X86_QUIRK_LINT0_REENABLED      By default, the reset value for the LVT
+                                    LINT0 register is 0x700 (APIC_MODE_EXTINT).
+                                    When this quirk is disabled, the reset value
+                                    is 0x10000 (APIC_LVT_MASKED).
+
+ KVM_X86_QUIRK_CD_NW_CLEARED        By default, KVM clears CR0.CD and CR0.NW.
+                                    When this quirk is disabled, KVM does not
+                                    change the value of CR0.CD and CR0.NW.
+
+ KVM_X86_QUIRK_LAPIC_MMIO_HOLE      By default, the MMIO LAPIC interface is
+                                    available even when configured for x2APIC
+                                    mode. When this quirk is disabled, KVM
+                                    disables the MMIO LAPIC interface if the
+                                    LAPIC is in x2APIC mode.
+
+ KVM_X86_QUIRK_OUT_7E_INC_RIP       By default, KVM pre-increments %rip before
+                                    exiting to userspace for an OUT instruction
+                                    to port 0x7e. When this quirk is disabled,
+                                    KVM does not pre-increment %rip before
+                                    exiting to userspace.
+
+ KVM_X86_QUIRK_MISC_ENABLE_NO_MWAIT When this quirk is disabled, KVM sets
+                                    CPUID.01H:ECX[bit 3] (MONITOR/MWAIT) if
+                                    IA32_MISC_ENABLE[bit 18] (MWAIT) is set.
+                                    Additionally, when this quirk is disabled,
+                                    KVM clears CPUID.01H:ECX[bit 3] if
+                                    IA32_MISC_ENABLE[bit 18] is cleared.
+=================================== ============================================
+
 8. Other capabilities.
 ======================
 
* Unmerged path arch/x86/include/asm/kvm_host.h
diff --git a/arch/x86/kvm/x86.c b/arch/x86/kvm/x86.c
index e014b7ea74df..4475f4b6a043 100644
--- a/arch/x86/kvm/x86.c
+++ b/arch/x86/kvm/x86.c
@@ -4317,6 +4317,9 @@ int kvm_vm_ioctl_check_extension(struct kvm *kvm, long ext)
 			r = sizeof(struct kvm_xsave);
 		break;
 	}
+	case KVM_CAP_DISABLE_QUIRKS2:
+		r = KVM_X86_VALID_QUIRKS;
+		break;
 	default:
 		break;
 	}
@@ -5863,6 +5866,11 @@ int kvm_vm_ioctl_enable_cap(struct kvm *kvm,
 		return -EINVAL;
 
 	switch (cap->cap) {
+	case KVM_CAP_DISABLE_QUIRKS2:
+		r = -EINVAL;
+		if (cap->args[0] & ~KVM_X86_VALID_QUIRKS)
+			break;
+		fallthrough;
 	case KVM_CAP_DISABLE_QUIRKS:
 		kvm->arch.disabled_quirks = cap->args[0];
 		r = 0;
* Unmerged path include/uapi/linux/kvm.h
