scsi: lpfc: Remove failing soft_wwn support

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-408.el8
commit-author James Smart <jsmart2021@gmail.com>
commit 2ea3a393bfae2e50003ecc14b757736eeba7ea6a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-408.el8/2ea3a393.failed

The soft_wwpn/soft_wwn functionality, which allows the driver to modify
service parameters in an attempt to override the adapter-assigned WWN, was
originally attempted to be removed roughly 6 yrs ago as new fabric features
were being introduced that clashed with the implementation.  In the end,
the feature was left in with the user being responsible if things went
south.

We've reached a point where soft_wwn is no longer functional and is failing
in almost all production use cases. Use of Fabric features such as Fabric
Assigned WWPN and Automatic DPORT is now prevalent and the features require
coordination between the adapter and driver that can't be solved by the
simplistic update of the service parameters. As it is no longer functional,
the feature is to be removed.

There are still ways to override the adapter-assigned WWN but they require
the admin to invoke bios/efi level menus.

Link: https://lore.kernel.org/r/20220310154845.11125-1-jsmart2021@gmail.com
	Reviewed-by: Himanshu Madhani <himanshu.madhani@oracle.com>
Co-developed-by: Dick Kennedy <dick.kennedy@broadcom.com>
	Signed-off-by: Dick Kennedy <dick.kennedy@broadcom.com>
	Signed-off-by: James Smart <jsmart2021@gmail.com>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit 2ea3a393bfae2e50003ecc14b757736eeba7ea6a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/lpfc/lpfc_attr.c
diff --cc drivers/scsi/lpfc/lpfc_attr.c
index e7ff29088d98,ff99f7cdbefa..000000000000
--- a/drivers/scsi/lpfc/lpfc_attr.c
+++ b/drivers/scsi/lpfc/lpfc_attr.c
@@@ -6415,130 -6189,127 +6192,254 @@@ LPFC_ATTR_RW(vmid_priority_tagging, LPF
  	     LPFC_VMID_PRIO_TAG_ALL_TARGETS,
  	     "Enable Priority Tagging VMID support");
  
++<<<<<<< HEAD
 +struct device_attribute *lpfc_hba_attrs[] = {
 +	&dev_attr_nvme_info,
 +	&dev_attr_scsi_stat,
 +	&dev_attr_bg_info,
 +	&dev_attr_bg_guard_err,
 +	&dev_attr_bg_apptag_err,
 +	&dev_attr_bg_reftag_err,
 +	&dev_attr_info,
 +	&dev_attr_serialnum,
 +	&dev_attr_modeldesc,
 +	&dev_attr_modelname,
 +	&dev_attr_programtype,
 +	&dev_attr_portnum,
 +	&dev_attr_fwrev,
 +	&dev_attr_hdw,
 +	&dev_attr_option_rom_version,
 +	&dev_attr_link_state,
 +	&dev_attr_num_discovered_ports,
 +	&dev_attr_menlo_mgmt_mode,
 +	&dev_attr_lpfc_drvr_version,
 +	&dev_attr_lpfc_enable_fip,
 +	&dev_attr_lpfc_temp_sensor,
 +	&dev_attr_lpfc_log_verbose,
 +	&dev_attr_lpfc_lun_queue_depth,
 +	&dev_attr_lpfc_tgt_queue_depth,
 +	&dev_attr_lpfc_hba_queue_depth,
 +	&dev_attr_lpfc_peer_port_login,
 +	&dev_attr_lpfc_nodev_tmo,
 +	&dev_attr_lpfc_devloss_tmo,
 +	&dev_attr_lpfc_enable_fc4_type,
 +	&dev_attr_lpfc_fcp_class,
 +	&dev_attr_lpfc_use_adisc,
 +	&dev_attr_lpfc_first_burst_size,
 +	&dev_attr_lpfc_ack0,
 +	&dev_attr_lpfc_xri_rebalancing,
 +	&dev_attr_lpfc_topology,
 +	&dev_attr_lpfc_scan_down,
 +	&dev_attr_lpfc_link_speed,
 +	&dev_attr_lpfc_fcp_io_sched,
 +	&dev_attr_lpfc_ns_query,
 +	&dev_attr_lpfc_fcp2_no_tgt_reset,
 +	&dev_attr_lpfc_cr_delay,
 +	&dev_attr_lpfc_cr_count,
 +	&dev_attr_lpfc_multi_ring_support,
 +	&dev_attr_lpfc_multi_ring_rctl,
 +	&dev_attr_lpfc_multi_ring_type,
 +	&dev_attr_lpfc_fdmi_on,
 +	&dev_attr_lpfc_enable_SmartSAN,
 +	&dev_attr_lpfc_max_luns,
 +	&dev_attr_lpfc_enable_npiv,
 +	&dev_attr_lpfc_fcf_failover_policy,
 +	&dev_attr_lpfc_enable_rrq,
 +	&dev_attr_lpfc_fcp_wait_abts_rsp,
 +	&dev_attr_nport_evt_cnt,
 +	&dev_attr_board_mode,
 +	&dev_attr_max_vpi,
 +	&dev_attr_used_vpi,
 +	&dev_attr_max_rpi,
 +	&dev_attr_used_rpi,
 +	&dev_attr_max_xri,
 +	&dev_attr_used_xri,
 +	&dev_attr_npiv_info,
 +	&dev_attr_issue_reset,
 +	&dev_attr_lpfc_poll,
 +	&dev_attr_lpfc_poll_tmo,
 +	&dev_attr_lpfc_task_mgmt_tmo,
 +	&dev_attr_lpfc_use_msi,
 +	&dev_attr_lpfc_nvme_oas,
 +	&dev_attr_lpfc_nvme_embed_cmd,
 +	&dev_attr_lpfc_fcp_imax,
 +	&dev_attr_lpfc_force_rscn,
 +	&dev_attr_lpfc_cq_poll_threshold,
 +	&dev_attr_lpfc_cq_max_proc_limit,
 +	&dev_attr_lpfc_fcp_cpu_map,
 +	&dev_attr_lpfc_fcp_mq_threshold,
 +	&dev_attr_lpfc_hdw_queue,
 +	&dev_attr_lpfc_irq_chann,
 +	&dev_attr_lpfc_suppress_rsp,
 +	&dev_attr_lpfc_nvmet_mrq,
 +	&dev_attr_lpfc_nvmet_mrq_post,
 +	&dev_attr_lpfc_nvme_enable_fb,
 +	&dev_attr_lpfc_nvmet_fb_size,
 +	&dev_attr_lpfc_enable_bg,
 +	&dev_attr_lpfc_soft_wwnn,
 +	&dev_attr_lpfc_soft_wwpn,
 +	&dev_attr_lpfc_soft_wwn_enable,
 +	&dev_attr_lpfc_enable_hba_reset,
 +	&dev_attr_lpfc_enable_hba_heartbeat,
 +	&dev_attr_lpfc_EnableXLane,
 +	&dev_attr_lpfc_XLanePriority,
 +	&dev_attr_lpfc_xlane_lun,
 +	&dev_attr_lpfc_xlane_tgt,
 +	&dev_attr_lpfc_xlane_vpt,
 +	&dev_attr_lpfc_xlane_lun_state,
 +	&dev_attr_lpfc_xlane_lun_status,
 +	&dev_attr_lpfc_xlane_priority,
 +	&dev_attr_lpfc_sg_seg_cnt,
 +	&dev_attr_lpfc_max_scsicmpl_time,
 +	&dev_attr_lpfc_stat_data_ctrl,
 +	&dev_attr_lpfc_aer_support,
 +	&dev_attr_lpfc_aer_state_cleanup,
 +	&dev_attr_lpfc_sriov_nr_virtfn,
 +	&dev_attr_lpfc_req_fw_upgrade,
 +	&dev_attr_lpfc_suppress_link_up,
 +	&dev_attr_iocb_hw,
 +	&dev_attr_pls,
 +	&dev_attr_pt,
 +	&dev_attr_txq_hw,
 +	&dev_attr_txcmplq_hw,
 +	&dev_attr_lpfc_sriov_hw_max_virtfn,
 +	&dev_attr_protocol,
 +	&dev_attr_lpfc_xlane_supported,
 +	&dev_attr_lpfc_enable_mds_diags,
 +	&dev_attr_lpfc_ras_fwlog_buffsize,
 +	&dev_attr_lpfc_ras_fwlog_level,
 +	&dev_attr_lpfc_ras_fwlog_func,
 +	&dev_attr_lpfc_enable_bbcr,
 +	&dev_attr_lpfc_enable_dpp,
 +	&dev_attr_lpfc_enable_mi,
 +	&dev_attr_cmf_info,
 +	&dev_attr_lpfc_max_vmid,
 +	&dev_attr_lpfc_vmid_inactivity_timeout,
 +	&dev_attr_lpfc_vmid_app_header,
 +	&dev_attr_lpfc_vmid_priority_tagging,
++=======
+ static struct attribute *lpfc_hba_attrs[] = {
+ 	&dev_attr_nvme_info.attr,
+ 	&dev_attr_scsi_stat.attr,
+ 	&dev_attr_bg_info.attr,
+ 	&dev_attr_bg_guard_err.attr,
+ 	&dev_attr_bg_apptag_err.attr,
+ 	&dev_attr_bg_reftag_err.attr,
+ 	&dev_attr_info.attr,
+ 	&dev_attr_serialnum.attr,
+ 	&dev_attr_modeldesc.attr,
+ 	&dev_attr_modelname.attr,
+ 	&dev_attr_programtype.attr,
+ 	&dev_attr_portnum.attr,
+ 	&dev_attr_fwrev.attr,
+ 	&dev_attr_hdw.attr,
+ 	&dev_attr_option_rom_version.attr,
+ 	&dev_attr_link_state.attr,
+ 	&dev_attr_num_discovered_ports.attr,
+ 	&dev_attr_menlo_mgmt_mode.attr,
+ 	&dev_attr_lpfc_drvr_version.attr,
+ 	&dev_attr_lpfc_enable_fip.attr,
+ 	&dev_attr_lpfc_temp_sensor.attr,
+ 	&dev_attr_lpfc_log_verbose.attr,
+ 	&dev_attr_lpfc_lun_queue_depth.attr,
+ 	&dev_attr_lpfc_tgt_queue_depth.attr,
+ 	&dev_attr_lpfc_hba_queue_depth.attr,
+ 	&dev_attr_lpfc_peer_port_login.attr,
+ 	&dev_attr_lpfc_nodev_tmo.attr,
+ 	&dev_attr_lpfc_devloss_tmo.attr,
+ 	&dev_attr_lpfc_enable_fc4_type.attr,
+ 	&dev_attr_lpfc_fcp_class.attr,
+ 	&dev_attr_lpfc_use_adisc.attr,
+ 	&dev_attr_lpfc_first_burst_size.attr,
+ 	&dev_attr_lpfc_ack0.attr,
+ 	&dev_attr_lpfc_xri_rebalancing.attr,
+ 	&dev_attr_lpfc_topology.attr,
+ 	&dev_attr_lpfc_scan_down.attr,
+ 	&dev_attr_lpfc_link_speed.attr,
+ 	&dev_attr_lpfc_fcp_io_sched.attr,
+ 	&dev_attr_lpfc_ns_query.attr,
+ 	&dev_attr_lpfc_fcp2_no_tgt_reset.attr,
+ 	&dev_attr_lpfc_cr_delay.attr,
+ 	&dev_attr_lpfc_cr_count.attr,
+ 	&dev_attr_lpfc_multi_ring_support.attr,
+ 	&dev_attr_lpfc_multi_ring_rctl.attr,
+ 	&dev_attr_lpfc_multi_ring_type.attr,
+ 	&dev_attr_lpfc_fdmi_on.attr,
+ 	&dev_attr_lpfc_enable_SmartSAN.attr,
+ 	&dev_attr_lpfc_max_luns.attr,
+ 	&dev_attr_lpfc_enable_npiv.attr,
+ 	&dev_attr_lpfc_fcf_failover_policy.attr,
+ 	&dev_attr_lpfc_enable_rrq.attr,
+ 	&dev_attr_lpfc_fcp_wait_abts_rsp.attr,
+ 	&dev_attr_nport_evt_cnt.attr,
+ 	&dev_attr_board_mode.attr,
+ 	&dev_attr_max_vpi.attr,
+ 	&dev_attr_used_vpi.attr,
+ 	&dev_attr_max_rpi.attr,
+ 	&dev_attr_used_rpi.attr,
+ 	&dev_attr_max_xri.attr,
+ 	&dev_attr_used_xri.attr,
+ 	&dev_attr_npiv_info.attr,
+ 	&dev_attr_issue_reset.attr,
+ 	&dev_attr_lpfc_poll.attr,
+ 	&dev_attr_lpfc_poll_tmo.attr,
+ 	&dev_attr_lpfc_task_mgmt_tmo.attr,
+ 	&dev_attr_lpfc_use_msi.attr,
+ 	&dev_attr_lpfc_nvme_oas.attr,
+ 	&dev_attr_lpfc_nvme_embed_cmd.attr,
+ 	&dev_attr_lpfc_fcp_imax.attr,
+ 	&dev_attr_lpfc_force_rscn.attr,
+ 	&dev_attr_lpfc_cq_poll_threshold.attr,
+ 	&dev_attr_lpfc_cq_max_proc_limit.attr,
+ 	&dev_attr_lpfc_fcp_cpu_map.attr,
+ 	&dev_attr_lpfc_fcp_mq_threshold.attr,
+ 	&dev_attr_lpfc_hdw_queue.attr,
+ 	&dev_attr_lpfc_irq_chann.attr,
+ 	&dev_attr_lpfc_suppress_rsp.attr,
+ 	&dev_attr_lpfc_nvmet_mrq.attr,
+ 	&dev_attr_lpfc_nvmet_mrq_post.attr,
+ 	&dev_attr_lpfc_nvme_enable_fb.attr,
+ 	&dev_attr_lpfc_nvmet_fb_size.attr,
+ 	&dev_attr_lpfc_enable_bg.attr,
+ 	&dev_attr_lpfc_enable_hba_reset.attr,
+ 	&dev_attr_lpfc_enable_hba_heartbeat.attr,
+ 	&dev_attr_lpfc_EnableXLane.attr,
+ 	&dev_attr_lpfc_XLanePriority.attr,
+ 	&dev_attr_lpfc_xlane_lun.attr,
+ 	&dev_attr_lpfc_xlane_tgt.attr,
+ 	&dev_attr_lpfc_xlane_vpt.attr,
+ 	&dev_attr_lpfc_xlane_lun_state.attr,
+ 	&dev_attr_lpfc_xlane_lun_status.attr,
+ 	&dev_attr_lpfc_xlane_priority.attr,
+ 	&dev_attr_lpfc_sg_seg_cnt.attr,
+ 	&dev_attr_lpfc_max_scsicmpl_time.attr,
+ 	&dev_attr_lpfc_stat_data_ctrl.attr,
+ 	&dev_attr_lpfc_aer_support.attr,
+ 	&dev_attr_lpfc_aer_state_cleanup.attr,
+ 	&dev_attr_lpfc_sriov_nr_virtfn.attr,
+ 	&dev_attr_lpfc_req_fw_upgrade.attr,
+ 	&dev_attr_lpfc_suppress_link_up.attr,
+ 	&dev_attr_iocb_hw.attr,
+ 	&dev_attr_pls.attr,
+ 	&dev_attr_pt.attr,
+ 	&dev_attr_txq_hw.attr,
+ 	&dev_attr_txcmplq_hw.attr,
+ 	&dev_attr_lpfc_sriov_hw_max_virtfn.attr,
+ 	&dev_attr_protocol.attr,
+ 	&dev_attr_lpfc_xlane_supported.attr,
+ 	&dev_attr_lpfc_enable_mds_diags.attr,
+ 	&dev_attr_lpfc_ras_fwlog_buffsize.attr,
+ 	&dev_attr_lpfc_ras_fwlog_level.attr,
+ 	&dev_attr_lpfc_ras_fwlog_func.attr,
+ 	&dev_attr_lpfc_enable_bbcr.attr,
+ 	&dev_attr_lpfc_enable_dpp.attr,
+ 	&dev_attr_lpfc_enable_mi.attr,
+ 	&dev_attr_cmf_info.attr,
+ 	&dev_attr_lpfc_max_vmid.attr,
+ 	&dev_attr_lpfc_vmid_inactivity_timeout.attr,
+ 	&dev_attr_lpfc_vmid_app_header.attr,
+ 	&dev_attr_lpfc_vmid_priority_tagging.attr,
++>>>>>>> 2ea3a393bfae (scsi: lpfc: Remove failing soft_wwn support)
  	NULL,
  };
  
diff --git a/drivers/scsi/lpfc/lpfc.h b/drivers/scsi/lpfc/lpfc.h
index 55324c873063..ae7104a88808 100644
--- a/drivers/scsi/lpfc/lpfc.h
+++ b/drivers/scsi/lpfc/lpfc.h
@@ -1137,8 +1137,6 @@ struct lpfc_hba {
 	uint32_t cfg_nvme_seg_cnt;
 	uint32_t cfg_scsi_seg_cnt;
 	uint32_t cfg_sg_dma_buf_size;
-	uint64_t cfg_soft_wwnn;
-	uint64_t cfg_soft_wwpn;
 	uint32_t cfg_hba_queue_depth;
 	uint32_t cfg_enable_hba_reset;
 	uint32_t cfg_enable_hba_heartbeat;
@@ -1270,7 +1268,6 @@ struct lpfc_hba {
 #define VPD_PORT            0x8         /* valid vpd port data */
 #define VPD_MASK            0xf         /* mask for any vpd data */
 
-	uint8_t soft_wwn_enable;
 
 	struct timer_list fcp_poll_timer;
 	struct timer_list eratt_poll;
* Unmerged path drivers/scsi/lpfc/lpfc_attr.c
diff --git a/drivers/scsi/lpfc/lpfc_init.c b/drivers/scsi/lpfc/lpfc_init.c
index b08d6dc6ae58..9894f93db279 100644
--- a/drivers/scsi/lpfc/lpfc_init.c
+++ b/drivers/scsi/lpfc/lpfc_init.c
@@ -340,7 +340,6 @@ lpfc_dump_wakeup_param_cmpl(struct lpfc_hba *phba, LPFC_MBOXQ_t *pmboxq)
 
 /**
  * lpfc_update_vport_wwn - Updates the fc_nodename, fc_portname,
- *	cfg_soft_wwnn, cfg_soft_wwpn
  * @vport: pointer to lpfc vport data structure.
  *
  *
@@ -353,19 +352,11 @@ lpfc_update_vport_wwn(struct lpfc_vport *vport)
 	uint8_t vvvl = vport->fc_sparam.cmn.valid_vendor_ver_level;
 	u32 *fawwpn_key = (u32 *)&vport->fc_sparam.un.vendorVersion[0];
 
-	/* If the soft name exists then update it using the service params */
-	if (vport->phba->cfg_soft_wwnn)
-		u64_to_wwn(vport->phba->cfg_soft_wwnn,
-			   vport->fc_sparam.nodeName.u.wwn);
-	if (vport->phba->cfg_soft_wwpn)
-		u64_to_wwn(vport->phba->cfg_soft_wwpn,
-			   vport->fc_sparam.portName.u.wwn);
-
 	/*
 	 * If the name is empty or there exists a soft name
 	 * then copy the service params name, otherwise use the fc name
 	 */
-	if (vport->fc_nodename.u.wwn[0] == 0 || vport->phba->cfg_soft_wwnn)
+	if (vport->fc_nodename.u.wwn[0] == 0)
 		memcpy(&vport->fc_nodename, &vport->fc_sparam.nodeName,
 			sizeof(struct lpfc_name));
 	else
@@ -382,7 +373,6 @@ lpfc_update_vport_wwn(struct lpfc_vport *vport)
 		vport->vport_flag |= FAWWPN_PARAM_CHG;
 
 	if (vport->fc_portname.u.wwn[0] == 0 ||
-	    vport->phba->cfg_soft_wwpn ||
 	    (vvvl == 1 && cpu_to_be32(*fawwpn_key) == FAPWWN_KEY_VENDOR) ||
 	    vport->vport_flag & FAWWPN_SET) {
 		memcpy(&vport->fc_portname, &vport->fc_sparam.portName,
