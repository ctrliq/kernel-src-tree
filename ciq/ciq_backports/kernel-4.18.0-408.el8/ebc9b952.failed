nvme: prepare for pairing quiescing and unquiescing

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-408.el8
commit-author Ming Lei <ming.lei@redhat.com>
commit ebc9b95260151d966728cf0063b3b4e465f934d9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-408.el8/ebc9b952.failed

Add two helpers so that we can prepare for pairing quiescing and
unquiescing which will be done in next patch.

	Signed-off-by: Ming Lei <ming.lei@redhat.com>
	Reviewed-by: Christoph Hellwig <hch@lst.de>
Link: https://lore.kernel.org/r/20211014081710.1871747-4-ming.lei@redhat.com
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit ebc9b95260151d966728cf0063b3b4e465f934d9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/nvme/host/core.c
diff --cc drivers/nvme/host/core.c
index 52ad99d87c04,570da6ae7ed8..000000000000
--- a/drivers/nvme/host/core.c
+++ b/drivers/nvme/host/core.c
@@@ -118,36 -119,6 +118,39 @@@ static void nvme_remove_invalid_namespa
  static void nvme_update_keep_alive(struct nvme_ctrl *ctrl,
  				   struct nvme_command *cmd);
  
++<<<<<<< HEAD
 +static void nvme_update_bdev_size(struct gendisk *disk)
 +{
 +	struct block_device *bdev = bdget_disk(disk, 0);
 +
 +	if (bdev) {
 +		bd_set_nr_sectors(bdev, get_capacity(disk));
 +		bdput(bdev);
 +	}
 +}
 +
 +/*
 + * Prepare a queue for teardown.
 + *
 + * This must forcibly unquiesce queues to avoid blocking dispatch, and only set
 + * the capacity to 0 after that to avoid blocking dispatchers that may be
 + * holding bd_butex.  This will end buffered writers dirtying pages that can't
 + * be synced.
 + */
 +static void nvme_set_queue_dying(struct nvme_ns *ns)
 +{
 +	if (test_and_set_bit(NVME_NS_DEAD, &ns->flags))
 +		return;
 +
 +	blk_set_queue_dying(ns->queue);
 +	blk_mq_unquiesce_queue(ns->queue);
 +
 +	set_capacity(ns->disk, 0);
 +	nvme_update_bdev_size(ns->disk);
 +}
 +
++=======
++>>>>>>> ebc9b9526015 (nvme: prepare for pairing quiescing and unquiescing)
  void nvme_queue_scan(struct nvme_ctrl *ctrl)
  {
  	/*
* Unmerged path drivers/nvme/host/core.c
