dm: pass the bio instead of tio to __map_bio

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-408.el8
commit-author Christoph Hellwig <hch@lst.de>
commit 1561b396106d759fdf5f9a71b412e068f74d2cc9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-408.el8/1561b396.failed

This simplifies the callers a bit.

	Signed-off-by: Christoph Hellwig <hch@lst.de>
	Reviewed-by: Mike Snitzer <snitzer@redhat.com>
Link: https://lore.kernel.org/r/20220202160109.108149-7-hch@lst.de
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit 1561b396106d759fdf5f9a71b412e068f74d2cc9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/md/dm.c
diff --cc drivers/md/dm.c
index d626b645f571,a43d280e9bc5..000000000000
--- a/drivers/md/dm.c
+++ b/drivers/md/dm.c
@@@ -1268,14 -1117,13 +1268,18 @@@ static noinline void __set_swap_bios_li
  	mutex_unlock(&md->swap_bios_lock);
  }
  
++<<<<<<< HEAD
 +static blk_qc_t __map_bio(struct dm_target_io *tio)
++=======
+ static void __map_bio(struct bio *clone)
++>>>>>>> 1561b396106d (dm: pass the bio instead of tio to __map_bio)
  {
+ 	struct dm_target_io *tio = clone_to_tio(clone);
  	int r;
  	sector_t sector;
- 	struct bio *clone = &tio->clone;
  	struct dm_io *io = tio->io;
  	struct dm_target *ti = tio->ti;
 +	blk_qc_t ret = BLK_QC_T_NONE;
  
  	clone->bi_end_io = clone_endio;
  
@@@ -1367,7 -1227,11 +1371,11 @@@ static int clone_bio(struct dm_target_i
  	if (bio_integrity(bio))
  		bio_integrity_trim(clone);
  
++<<<<<<< HEAD
++=======
+ 	__map_bio(clone);
++>>>>>>> 1561b396106d (dm: pass the bio instead of tio to __map_bio)
  	return 0;
 -free_tio:
 -	free_tio(tio);
 -	return r;
  }
  
  static void alloc_multiple_bios(struct bio_list *blist, struct clone_info *ci,
@@@ -1428,14 -1278,14 +1436,21 @@@ static void __send_duplicate_bios(struc
  				  unsigned num_bios, unsigned *len)
  {
  	struct bio_list blist = BIO_EMPTY_LIST;
 -	struct bio *clone;
 +	struct bio *bio;
 +	struct dm_target_io *tio;
  
 -	alloc_multiple_bios(&blist, ci, ti, num_bios, len);
 +	alloc_multiple_bios(&blist, ci, ti, num_bios);
  
++<<<<<<< HEAD
 +	while ((bio = bio_list_pop(&blist))) {
 +		tio = container_of(bio, struct dm_target_io, clone);
 +		(void) __clone_and_map_simple_bio(ci, tio, len);
++=======
+ 	while ((clone = bio_list_pop(&blist))) {
+ 		if (len)
+ 			bio_setup_sector(clone, ci->sector, *len);
+ 		__map_bio(clone);
++>>>>>>> 1561b396106d (dm: pass the bio instead of tio to __map_bio)
  	}
  }
  
* Unmerged path drivers/md/dm.c
