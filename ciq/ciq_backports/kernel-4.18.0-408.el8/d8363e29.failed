cpupower: Add function to print AMD P-State performance capabilities

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-408.el8
commit-author Huang Rui <ray.huang@amd.com>
commit d8363e29178249bb505ae388ce1658484396fcde
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-408.el8/d8363e29.failed

AMD P-State kernel module is using the fine grain frequency instead of
acpi hardware pstate. So add a function to print performance and
frequency values.

	Reviewed-by: Shuah Khan <skhan@linuxfoundation.org>
	Signed-off-by: Huang Rui <ray.huang@amd.com>
	Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>
(cherry picked from commit d8363e29178249bb505ae388ce1658484396fcde)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/power/cpupower/utils/cpufreq-info.c
#	tools/power/cpupower/utils/helpers/amd.c
#	tools/power/cpupower/utils/helpers/helpers.h
diff --cc tools/power/cpupower/utils/cpufreq-info.c
index 7b8b34fbfe37,235243ec5ce0..000000000000
--- a/tools/power/cpupower/utils/cpufreq-info.c
+++ b/tools/power/cpupower/utils/cpufreq-info.c
@@@ -147,7 -147,11 +147,15 @@@ static int get_boost_mode_x86(unsigned 
  	printf(_("    Active: %s\n"), active ? _("yes") : _("no"));
  
  	if (cpupower_cpu_info.vendor == X86_VENDOR_AMD &&
++<<<<<<< HEAD
 +	    cpupower_cpu_info.family >= 0x10) {
++=======
+ 	    cpupower_cpu_info.caps & CPUPOWER_CAP_AMD_PSTATE) {
+ 		return 0;
+ 	} else if ((cpupower_cpu_info.vendor == X86_VENDOR_AMD &&
+ 		    cpupower_cpu_info.family >= 0x10) ||
+ 		   cpupower_cpu_info.vendor == X86_VENDOR_HYGON) {
++>>>>>>> d8363e291782 (cpupower: Add function to print AMD P-State performance capabilities)
  		ret = decode_pstates(cpu, b_states, pstates, &pstate_no);
  		if (ret)
  			return ret;
diff --cc tools/power/cpupower/utils/helpers/amd.c
index 4d45d1b44164,c519cc89c97f..000000000000
--- a/tools/power/cpupower/utils/helpers/amd.c
+++ b/tools/power/cpupower/utils/helpers/amd.c
@@@ -175,5 -175,52 +175,55 @@@ static unsigned long amd_pstate_get_dat
  						  MAX_AMD_PSTATE_VALUE_READ_FILES);
  }
  
++<<<<<<< HEAD
++=======
+ void amd_pstate_boost_init(unsigned int cpu, int *support, int *active)
+ {
+ 	unsigned long highest_perf, nominal_perf, cpuinfo_min,
+ 		      cpuinfo_max, amd_pstate_max;
+ 
+ 	highest_perf = amd_pstate_get_data(cpu, AMD_PSTATE_HIGHEST_PERF);
+ 	nominal_perf = acpi_cppc_get_data(cpu, NOMINAL_PERF);
+ 
+ 	*support = highest_perf > nominal_perf ? 1 : 0;
+ 	if (!(*support))
+ 		return;
+ 
+ 	cpufreq_get_hardware_limits(cpu, &cpuinfo_min, &cpuinfo_max);
+ 	amd_pstate_max = amd_pstate_get_data(cpu, AMD_PSTATE_MAX_FREQ);
+ 
+ 	*active = cpuinfo_max == amd_pstate_max ? 1 : 0;
+ }
+ 
+ void amd_pstate_show_perf_and_freq(unsigned int cpu, int no_rounding)
+ {
+ 	printf(_("    AMD PSTATE Highest Performance: %lu. Maximum Frequency: "),
+ 	       amd_pstate_get_data(cpu, AMD_PSTATE_HIGHEST_PERF));
+ 	/*
+ 	 * If boost isn't active, the cpuinfo_max doesn't indicate real max
+ 	 * frequency. So we read it back from amd-pstate sysfs entry.
+ 	 */
+ 	print_speed(amd_pstate_get_data(cpu, AMD_PSTATE_MAX_FREQ), no_rounding);
+ 	printf(".\n");
+ 
+ 	printf(_("    AMD PSTATE Nominal Performance: %lu. Nominal Frequency: "),
+ 	       acpi_cppc_get_data(cpu, NOMINAL_PERF));
+ 	print_speed(acpi_cppc_get_data(cpu, NOMINAL_FREQ) * 1000,
+ 		    no_rounding);
+ 	printf(".\n");
+ 
+ 	printf(_("    AMD PSTATE Lowest Non-linear Performance: %lu. Lowest Non-linear Frequency: "),
+ 	       acpi_cppc_get_data(cpu, LOWEST_NONLINEAR_PERF));
+ 	print_speed(amd_pstate_get_data(cpu, AMD_PSTATE_LOWEST_NONLINEAR_FREQ),
+ 		    no_rounding);
+ 	printf(".\n");
+ 
+ 	printf(_("    AMD PSTATE Lowest Performance: %lu. Lowest Frequency: "),
+ 	       acpi_cppc_get_data(cpu, LOWEST_PERF));
+ 	print_speed(acpi_cppc_get_data(cpu, LOWEST_FREQ) * 1000, no_rounding);
+ 	printf(".\n");
+ }
+ 
++>>>>>>> d8363e291782 (cpupower: Add function to print AMD P-State performance capabilities)
  /* AMD P-State Helper Functions ************************************/
  #endif /* defined(__i386__) || defined(__x86_64__) */
diff --cc tools/power/cpupower/utils/helpers/helpers.h
index cb6c4c99fe16,96e4bede078b..000000000000
--- a/tools/power/cpupower/utils/helpers/helpers.h
+++ b/tools/power/cpupower/utils/helpers/helpers.h
@@@ -136,6 -137,16 +136,19 @@@ extern int decode_pstates(unsigned int 
  
  extern int cpufreq_has_boost_support(unsigned int cpu, int *support,
  				     int *active, int * states);
++<<<<<<< HEAD
++=======
+ 
+ /* AMD P-State stuff **************************/
+ bool cpupower_amd_pstate_enabled(void);
+ void amd_pstate_boost_init(unsigned int cpu,
+ 			   int *support, int *active);
+ void amd_pstate_show_perf_and_freq(unsigned int cpu,
+ 				   int no_rounding);
+ 
+ /* AMD P-State stuff **************************/
+ 
++>>>>>>> d8363e291782 (cpupower: Add function to print AMD P-State performance capabilities)
  /*
   * CPUID functions returning a single datum
   */
@@@ -168,6 -179,15 +181,18 @@@ static inline int cpufreq_has_boost_sup
  					    int *active, int * states)
  { return -1; }
  
++<<<<<<< HEAD
++=======
+ static inline bool cpupower_amd_pstate_enabled(void)
+ { return false; }
+ static inline void amd_pstate_boost_init(unsigned int cpu, int *support,
+ 					 int *active)
+ {}
+ static inline void amd_pstate_show_perf_and_freq(unsigned int cpu,
+ 						 int no_rounding)
+ {}
+ 
++>>>>>>> d8363e291782 (cpupower: Add function to print AMD P-State performance capabilities)
  /* cpuid and cpuinfo helpers  **************************/
  
  static inline unsigned int cpuid_eax(unsigned int op) { return 0; };
* Unmerged path tools/power/cpupower/utils/cpufreq-info.c
* Unmerged path tools/power/cpupower/utils/helpers/amd.c
* Unmerged path tools/power/cpupower/utils/helpers/helpers.h
