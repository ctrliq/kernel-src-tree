time: Prevent undefined behaviour in timespec64_to_ns()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-408.el8
commit-author Zeng Tao <prime.zeng@hisilicon.com>
commit cb47755725da7b90fecbb2aa82ac3b24a7adb89b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-408.el8/cb477557.failed

UBSAN reports:

Undefined behaviour in ./include/linux/time64.h:127:27
signed integer overflow:
17179869187 * 1000000000 cannot be represented in type 'long long int'
Call Trace:
 timespec64_to_ns include/linux/time64.h:127 [inline]
 set_cpu_itimer+0x65c/0x880 kernel/time/itimer.c:180
 do_setitimer+0x8e/0x740 kernel/time/itimer.c:245
 __x64_sys_setitimer+0x14c/0x2c0 kernel/time/itimer.c:336
 do_syscall_64+0xa1/0x540 arch/x86/entry/common.c:295

Commit bd40a175769d ("y2038: itimer: change implementation to timespec64")
replaced the original conversion which handled time clamping correctly with
timespec64_to_ns() which has no overflow protection.

Fix it in timespec64_to_ns() as this is not necessarily limited to the
usage in itimers.

[ tglx: Added comment and adjusted the fixes tag ]

Fixes: 361a3bf00582 ("time64: Add time64.h header and define struct timespec64")
	Signed-off-by: Zeng Tao <prime.zeng@hisilicon.com>
	Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
	Reviewed-by: Arnd Bergmann <arnd@arndb.de>
	Cc: stable@vger.kernel.org
Link: https://lore.kernel.org/r/1598952616-6416-1-git-send-email-prime.zeng@hisilicon.com
(cherry picked from commit cb47755725da7b90fecbb2aa82ac3b24a7adb89b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/time/itimer.c
diff --cc kernel/time/itimer.c
index 78cd3795cee4,00629e658ca1..000000000000
--- a/kernel/time/itimer.c
+++ b/kernel/time/itimer.c
@@@ -149,12 -172,8 +149,17 @@@ static void set_cpu_itimer(struct task_
  	u64 oval, nval, ointerval, ninterval;
  	struct cpu_itimer *it = &tsk->signal->it[clock_id];
  
++<<<<<<< HEAD
 +	/*
 +	 * Use the to_ktime conversion because that clamps the maximum
 +	 * value to KTIME_MAX and avoid multiplication overflows.
 +	 */
 +	nval = ktime_to_ns(timeval_to_ktime(value->it_value));
 +	ninterval = ktime_to_ns(timeval_to_ktime(value->it_interval));
++=======
+ 	nval = timespec64_to_ns(&value->it_value);
+ 	ninterval = timespec64_to_ns(&value->it_interval);
++>>>>>>> cb47755725da (time: Prevent undefined behaviour in timespec64_to_ns())
  
  	spin_lock_irq(&tsk->sighand->siglock);
  
diff --git a/include/linux/time64.h b/include/linux/time64.h
index a911c22d9538..5ded2c7c9cfd 100644
--- a/include/linux/time64.h
+++ b/include/linux/time64.h
@@ -108,6 +108,10 @@ static inline bool timespec64_valid_strict(const struct timespec64 *ts)
  */
 static inline s64 timespec64_to_ns(const struct timespec64 *ts)
 {
+	/* Prevent multiplication overflow */
+	if ((unsigned long long)ts->tv_sec >= KTIME_SEC_MAX)
+		return KTIME_MAX;
+
 	return ((s64) ts->tv_sec * NSEC_PER_SEC) + ts->tv_nsec;
 }
 
* Unmerged path kernel/time/itimer.c
