iommu/vt-d: Enable ATS for the devices in SATC table

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-408.el8
commit-author Yian Chen <yian.chen@intel.com>
commit 97f2f2c5317f55ae3440733a090a96a251da222b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-408.el8/97f2f2c5.failed

Starting from Intel VT-d v3.2, Intel platform BIOS can provide additional
SATC table structure. SATC table includes a list of SoC integrated devices
that support ATC (Address translation cache).

Enabling ATC (via ATS capability) can be a functional requirement for SATC
device operation or optional to enhance device performance/functionality.
This is determined by the bit of ATC_REQUIRED in SATC table. When IOMMU is
working in scalable mode, software chooses to always enable ATS for every
device in SATC table because Intel SoC devices in SATC table are trusted to
use ATS.

On the other hand, if IOMMU is in legacy mode, ATS of SATC capable devices
can work transparently to software and be automatically enabled by IOMMU
hardware. As the result, there is no need for software to enable ATS on
these devices.

This also removes dmar_find_matched_atsr_unit() helper as it becomes dead
code now.

	Signed-off-by: Yian Chen <yian.chen@intel.com>
Link: https://lore.kernel.org/r/20220222185416.1722611-1-yian.chen@intel.com
	Signed-off-by: Lu Baolu <baolu.lu@linux.intel.com>
Link: https://lore.kernel.org/r/20220301020159.633356-13-baolu.lu@linux.intel.com
	Signed-off-by: Joerg Roedel <jroedel@suse.de>
(cherry picked from commit 97f2f2c5317f55ae3440733a090a96a251da222b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/iommu/intel/iommu.c
diff --cc drivers/iommu/intel/iommu.c
index 9088b3ecc44d,8662f5c10721..000000000000
--- a/drivers/iommu/intel/iommu.c
+++ b/drivers/iommu/intel/iommu.c
@@@ -5300,8 -4567,46 +5336,51 @@@ static struct iommu_device *intel_iommu
  	if (!iommu)
  		return ERR_PTR(-ENODEV);
  
++<<<<<<< HEAD
 +	if (translation_pre_enabled(iommu))
 +		dev_iommu_priv_set(dev, DEFER_DEVICE_DOMAIN_INFO);
++=======
+ 	info = kzalloc(sizeof(*info), GFP_KERNEL);
+ 	if (!info)
+ 		return ERR_PTR(-ENOMEM);
+ 
+ 	if (dev_is_real_dma_subdevice(dev)) {
+ 		info->bus = pdev->bus->number;
+ 		info->devfn = pdev->devfn;
+ 		info->segment = pci_domain_nr(pdev->bus);
+ 	} else {
+ 		info->bus = bus;
+ 		info->devfn = devfn;
+ 		info->segment = iommu->segment;
+ 	}
+ 
+ 	info->dev = dev;
+ 	info->iommu = iommu;
+ 	if (dev_is_pci(dev)) {
+ 		if (ecap_dev_iotlb_support(iommu->ecap) &&
+ 		    pci_ats_supported(pdev) &&
+ 		    dmar_ats_supported(pdev, iommu))
+ 			info->ats_supported = 1;
+ 
+ 		if (sm_supported(iommu)) {
+ 			if (pasid_supported(iommu)) {
+ 				int features = pci_pasid_features(pdev);
+ 
+ 				if (features >= 0)
+ 					info->pasid_supported = features | 1;
+ 			}
+ 
+ 			if (info->ats_supported && ecap_prs(iommu->ecap) &&
+ 			    pci_pri_supported(pdev))
+ 				info->pri_supported = 1;
+ 		}
+ 	}
+ 
+ 	spin_lock_irqsave(&device_domain_lock, flags);
+ 	list_add(&info->global, &device_domain_list);
+ 	dev_iommu_priv_set(dev, info);
+ 	spin_unlock_irqrestore(&device_domain_lock, flags);
++>>>>>>> 97f2f2c5317f (iommu/vt-d: Enable ATS for the devices in SATC table)
  
  	return &iommu->iommu;
  }
* Unmerged path drivers/iommu/intel/iommu.c
diff --git a/include/linux/intel-iommu.h b/include/linux/intel-iommu.h
index 075496f6c121..e7f108476743 100644
--- a/include/linux/intel-iommu.h
+++ b/include/linux/intel-iommu.h
@@ -719,7 +719,6 @@ static inline int first_pte_in_page(struct dma_pte *pte)
 }
 
 extern struct dmar_drhd_unit * dmar_find_matched_drhd_unit(struct pci_dev *dev);
-extern int dmar_find_matched_atsr_unit(struct pci_dev *dev);
 
 extern int dmar_enable_qi(struct intel_iommu *iommu);
 extern void dmar_disable_qi(struct intel_iommu *iommu);
