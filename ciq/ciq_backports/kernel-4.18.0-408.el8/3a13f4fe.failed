KVM: MMU: change handle_abnormal_pfn() arguments to kvm_page_fault

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-408.el8
commit-author Paolo Bonzini <pbonzini@redhat.com>
commit 3a13f4fea3c156dcb8aecf9f1637d9a80a31c29d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-408.el8/3a13f4fe.failed

Pass struct kvm_page_fault to handle_abnormal_pfn() instead of
extracting the arguments from the struct.

	Suggested-by: Isaku Yamahata <isaku.yamahata@intel.com>
	Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
(cherry picked from commit 3a13f4fea3c156dcb8aecf9f1637d9a80a31c29d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kvm/mmu/mmu.c
#	arch/x86/kvm/mmu/paging_tmpl.h
diff --cc arch/x86/kvm/mmu/mmu.c
index bc36e41e904d,6821d05c0557..000000000000
--- a/arch/x86/kvm/mmu/mmu.c
+++ b/arch/x86/kvm/mmu/mmu.c
@@@ -3942,12 -3973,10 +3943,16 @@@ static int direct_page_fault(struct kvm
  	mmu_seq = vcpu->kvm->mmu_notifier_seq;
  	smp_rmb();
  
 -	if (kvm_faultin_pfn(vcpu, fault, &r))
 +	if (kvm_faultin_pfn(vcpu, fault->prefault, fault->gfn, gpa, &pfn, &hva,
 +			    fault->write, &map_writable, &r))
  		return r;
  
++<<<<<<< HEAD
 +	if (handle_abnormal_pfn(vcpu, fault->is_tdp ? 0 : gpa,
 +				fault->gfn, pfn, ACC_ALL, &r))
++=======
+ 	if (handle_abnormal_pfn(vcpu, fault, ACC_ALL, &r))
++>>>>>>> 3a13f4fea3c1 (KVM: MMU: change handle_abnormal_pfn() arguments to kvm_page_fault)
  		return r;
  
  	r = RET_PF_RETRY;
diff --cc arch/x86/kvm/mmu/paging_tmpl.h
index de3ee26beb48,0fa7a678b907..000000000000
--- a/arch/x86/kvm/mmu/paging_tmpl.h
+++ b/arch/x86/kvm/mmu/paging_tmpl.h
@@@ -892,11 -890,10 +892,15 @@@ static int FNAME(page_fault)(struct kvm
  	mmu_seq = vcpu->kvm->mmu_notifier_seq;
  	smp_rmb();
  
 -	if (kvm_faultin_pfn(vcpu, fault, &r))
 +	if (kvm_faultin_pfn(vcpu, fault->prefault, fault->gfn, addr, &pfn, &hva,
 +			    fault->write, &map_writable, &r))
  		return r;
  
++<<<<<<< HEAD
 +	if (handle_abnormal_pfn(vcpu, addr, fault->gfn, pfn, walker.pte_access, &r))
++=======
+ 	if (handle_abnormal_pfn(vcpu, fault, walker.pte_access, &r))
++>>>>>>> 3a13f4fea3c1 (KVM: MMU: change handle_abnormal_pfn() arguments to kvm_page_fault)
  		return r;
  
  	/*
* Unmerged path arch/x86/kvm/mmu/mmu.c
* Unmerged path arch/x86/kvm/mmu/paging_tmpl.h
