dm: fold __send_duplicate_bios into __clone_and_map_simple_bio

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-408.el8
commit-author Christoph Hellwig <hch@lst.de>
commit 8eabf5d0a7bd9226d6cc25402dde67f372aae838
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-408.el8/8eabf5d0.failed

Fold __send_duplicate_bios into its only caller to prepare for
refactoring.

	Signed-off-by: Christoph Hellwig <hch@lst.de>
	Reviewed-by: Mike Snitzer <snitzer@redhat.com>
Link: https://lore.kernel.org/r/20220202160109.108149-5-hch@lst.de
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit 8eabf5d0a7bd9226d6cc25402dde67f372aae838)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/md/dm.c
diff --cc drivers/md/dm.c
index d626b645f571,2527b287ead0..000000000000
--- a/drivers/md/dm.c
+++ b/drivers/md/dm.c
@@@ -1410,32 -1273,23 +1410,51 @@@ static void alloc_multiple_bios(struct 
  	}
  }
  
++<<<<<<< HEAD
 +static blk_qc_t __clone_and_map_simple_bio(struct clone_info *ci,
 +					   struct dm_target_io *tio, unsigned *len)
 +{
 +	struct bio *clone = &tio->clone;
 +
 +	tio->len_ptr = len;
 +
 +	__bio_clone_fast(clone, ci->bio);
 +	if (len)
 +		bio_setup_sector(clone, ci->sector, *len);
 +
 +	return __map_bio(tio);
 +}
 +
++=======
++>>>>>>> 8eabf5d0a7bd (dm: fold __send_duplicate_bios into __clone_and_map_simple_bio)
  static void __send_duplicate_bios(struct clone_info *ci, struct dm_target *ti,
  				  unsigned num_bios, unsigned *len)
  {
  	struct bio_list blist = BIO_EMPTY_LIST;
++<<<<<<< HEAD
 +	struct bio *bio;
 +	struct dm_target_io *tio;
 +
 +	alloc_multiple_bios(&blist, ci, ti, num_bios);
 +
 +	while ((bio = bio_list_pop(&blist))) {
 +		tio = container_of(bio, struct dm_target_io, clone);
 +		(void) __clone_and_map_simple_bio(ci, tio, len);
++=======
+ 	struct bio *clone;
+ 
+ 	alloc_multiple_bios(&blist, ci, ti, num_bios);
+ 
+ 	while ((clone = bio_list_pop(&blist))) {
+ 		struct dm_target_io *tio = clone_to_tio(clone);
+ 
+ 		tio->len_ptr = len;
+ 
+ 		__bio_clone_fast(clone, ci->bio);
+ 		if (len)
+ 			bio_setup_sector(clone, ci->sector, *len);
+ 		__map_bio(tio);
++>>>>>>> 8eabf5d0a7bd (dm: fold __send_duplicate_bios into __clone_and_map_simple_bio)
  	}
  }
  
* Unmerged path drivers/md/dm.c
