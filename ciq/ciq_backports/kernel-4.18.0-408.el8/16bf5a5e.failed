smp: Rename flush_smp_call_function_from_idle()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-408.el8
commit-author Thomas Gleixner <tglx@linutronix.de>
commit 16bf5a5e1ec56474ed2a19d72f272ed09a5d3ea1
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-408.el8/16bf5a5e.failed

This is invoked from the stopper thread too, which is definitely not idle.
Rename it to flush_smp_call_function_queue() and fixup the callers.

	Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
	Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>
Link: https://lore.kernel.org/r/20220413133024.305001096@linutronix.de

(cherry picked from commit 16bf5a5e1ec56474ed2a19d72f272ed09a5d3ea1)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/sched/smp.h
#	kernel/smp.c
diff --cc kernel/sched/smp.h
index 9620e323162c,2eb23dd0f285..000000000000
--- a/kernel/sched/smp.h
+++ b/kernel/sched/smp.h
@@@ -7,3 -7,9 +7,12 @@@
  extern void sched_ttwu_pending(void *arg);
  
  extern void send_call_function_single_ipi(int cpu);
++<<<<<<< HEAD
++=======
+ 
+ #ifdef CONFIG_SMP
+ extern void flush_smp_call_function_queue(void);
+ #else
+ static inline void flush_smp_call_function_queue(void) { }
+ #endif
++>>>>>>> 16bf5a5e1ec5 (smp: Rename flush_smp_call_function_from_idle())
diff --cc kernel/smp.c
index e676d27c98b1,8e85f22ed538..000000000000
--- a/kernel/smp.c
+++ b/kernel/smp.c
@@@ -191,7 -539,9 +191,13 @@@ static int generic_exec_single(int cpu
   */
  void generic_smp_call_function_single_interrupt(void)
  {
++<<<<<<< HEAD
 +	flush_smp_call_function_queue(true);
++=======
+ 	cfd_seq_store(this_cpu_ptr(&cfd_seq_local)->gotipi, CFD_SEQ_NOCPU,
+ 		      smp_processor_id(), CFD_SEQ_GOTIPI);
+ 	__flush_smp_call_function_queue(true);
++>>>>>>> 16bf5a5e1ec5 (smp: Rename flush_smp_call_function_from_idle())
  }
  
  /**
@@@ -312,17 -676,35 +318,30 @@@ static void __flush_smp_call_function_q
  	 */
  	if (entry)
  		sched_ttwu_pending(entry);
 -
 -	cfd_seq_store(this_cpu_ptr(&cfd_seq_local)->hdlend, CFD_SEQ_NOCPU,
 -		      smp_processor_id(), CFD_SEQ_HDLEND);
  }
  
- void flush_smp_call_function_from_idle(void)
+ 
+ /**
+  * flush_smp_call_function_queue - Flush pending smp-call-function callbacks
+  *				   from task context (idle, migration thread)
+  *
+  * When TIF_POLLING_NRFLAG is supported and a CPU is in idle and has it
+  * set, then remote CPUs can avoid sending IPIs and wake the idle CPU by
+  * setting TIF_NEED_RESCHED. The idle task on the woken up CPU has to
+  * handle queued SMP function calls before scheduling.
+  *
+  * The migration thread has to ensure that an eventually pending wakeup has
+  * been handled before it migrates a task.
+  */
+ void flush_smp_call_function_queue(void)
  {
  	unsigned long flags;
  
  	if (llist_empty(this_cpu_ptr(&call_single_queue)))
  		return;
  
 -	cfd_seq_store(this_cpu_ptr(&cfd_seq_local)->idle, CFD_SEQ_NOCPU,
 -		      smp_processor_id(), CFD_SEQ_IDLE);
  	local_irq_save(flags);
- 	flush_smp_call_function_queue(true);
+ 	__flush_smp_call_function_queue(true);
  	if (local_softirq_pending())
  		do_softirq();
  
diff --git a/kernel/sched/core.c b/kernel/sched/core.c
index b476dc4c26d0..2646d362e92b 100644
--- a/kernel/sched/core.c
+++ b/kernel/sched/core.c
@@ -1238,7 +1238,7 @@ static int migration_cpu_stop(void *data)
 	 * __migrate_task() such that we will not miss enforcing cpus_ptr
 	 * during wakeups, see set_cpus_allowed_ptr()'s TASK_WAKING test.
 	 */
-	flush_smp_call_function_from_idle();
+	flush_smp_call_function_queue();
 
 	raw_spin_lock(&p->pi_lock);
 	rq_lock(rq, &rf);
diff --git a/kernel/sched/idle.c b/kernel/sched/idle.c
index be17ed4af934..5d1583d54d03 100644
--- a/kernel/sched/idle.c
+++ b/kernel/sched/idle.c
@@ -299,7 +299,7 @@ static void do_idle(void)
 	 * RCU relies on this call to be done outside of an RCU read-side
 	 * critical section.
 	 */
-	flush_smp_call_function_from_idle();
+	flush_smp_call_function_queue();
 	schedule_idle();
 
 	if (unlikely(klp_patch_pending(current)))
* Unmerged path kernel/sched/smp.h
* Unmerged path kernel/smp.c
