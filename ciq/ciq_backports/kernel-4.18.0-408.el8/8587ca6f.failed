mm: move kvmalloc-related functions to slab.h

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-408.el8
commit-author Matthew Wilcox (Oracle) <willy@infradead.org>
commit 8587ca6f34152ea650bad4b2db68456601159024
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-408.el8/8587ca6f.failed

Not all files in the kernel should include mm.h.  Migrating callers from
kmalloc to kvmalloc is easier if the kvmalloc functions are in slab.h.

[akpm@linux-foundation.org: move the new kvrealloc() also]
[akpm@linux-foundation.org: drivers/hwmon/occ/p9_sbe.c needs slab.h]

Link: https://lkml.kernel.org/r/20210622215757.3525604-1-willy@infradead.org
	Signed-off-by: Matthew Wilcox (Oracle) <willy@infradead.org>
	Acked-by: Pekka Enberg <penberg@kernel.org>
	Cc: Christoph Lameter <cl@linux.com>
	Cc: David Rientjes <rientjes@google.com>
	Cc: Joonsoo Kim <iamjoonsoo.kim@lge.com>
	Cc: Vlastimil Babka <vbabka@suse.cz>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 8587ca6f34152ea650bad4b2db68456601159024)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/hwmon/occ/p9_sbe.c
#	drivers/of/kexec.c
#	include/linux/mm.h
diff --cc include/linux/mm.h
index c3d8a9293e63,32b2ecc47408..000000000000
--- a/include/linux/mm.h
+++ b/include/linux/mm.h
@@@ -714,37 -799,16 +714,50 @@@ static inline int is_vmalloc_or_module_
  }
  #endif
  
++<<<<<<< HEAD
 +extern void *kvmalloc_node(size_t size, gfp_t flags, int node);
 +static inline void *kvmalloc(size_t size, gfp_t flags)
 +{
 +	return kvmalloc_node(size, flags, NUMA_NO_NODE);
 +}
 +static inline void *kvzalloc_node(size_t size, gfp_t flags, int node)
 +{
 +	return kvmalloc_node(size, flags | __GFP_ZERO, node);
 +}
 +static inline void *kvzalloc(size_t size, gfp_t flags)
 +{
 +	return kvmalloc(size, flags | __GFP_ZERO);
 +}
 +
 +static inline void *kvmalloc_array(size_t n, size_t size, gfp_t flags)
 +{
 +	size_t bytes;
 +
 +	if (unlikely(check_mul_overflow(n, size, &bytes)))
 +		return NULL;
 +
 +	return kvmalloc(bytes, flags);
 +}
 +
 +static inline void *kvcalloc(size_t n, size_t size, gfp_t flags)
 +{
 +	return kvmalloc_array(n, size, flags | __GFP_ZERO);
 +}
 +
 +extern void kvfree(const void *addr);
 +
++=======
+ static inline int head_compound_mapcount(struct page *head)
+ {
+ 	return atomic_read(compound_mapcount_ptr(head)) + 1;
+ }
+ 
+ /*
+  * Mapcount of compound page as a whole, does not include mapped sub-pages.
+  *
+  * Must be called only for compound pages or any their tail sub-pages.
+  */
++>>>>>>> 8587ca6f3415 (mm: move kvmalloc-related functions to slab.h)
  static inline int compound_mapcount(struct page *page)
  {
  	VM_BUG_ON_PAGE(!PageCompound(page), page);
* Unmerged path drivers/hwmon/occ/p9_sbe.c
* Unmerged path drivers/of/kexec.c
* Unmerged path drivers/hwmon/occ/p9_sbe.c
* Unmerged path drivers/of/kexec.c
* Unmerged path include/linux/mm.h
diff --git a/include/linux/slab.h b/include/linux/slab.h
index b0cd9d167ad2..94ed4bbe7729 100644
--- a/include/linux/slab.h
+++ b/include/linux/slab.h
@@ -725,6 +725,40 @@ static inline void *kzalloc_node(size_t size, gfp_t flags, int node)
 	return kmalloc_node(size, flags | __GFP_ZERO, node);
 }
 
+extern void *kvmalloc_node(size_t size, gfp_t flags, int node);
+static inline void *kvmalloc(size_t size, gfp_t flags)
+{
+	return kvmalloc_node(size, flags, NUMA_NO_NODE);
+}
+static inline void *kvzalloc_node(size_t size, gfp_t flags, int node)
+{
+	return kvmalloc_node(size, flags | __GFP_ZERO, node);
+}
+static inline void *kvzalloc(size_t size, gfp_t flags)
+{
+	return kvmalloc(size, flags | __GFP_ZERO);
+}
+
+static inline void *kvmalloc_array(size_t n, size_t size, gfp_t flags)
+{
+	size_t bytes;
+
+	if (unlikely(check_mul_overflow(n, size, &bytes)))
+		return NULL;
+
+	return kvmalloc(bytes, flags);
+}
+
+static inline void *kvcalloc(size_t n, size_t size, gfp_t flags)
+{
+	return kvmalloc_array(n, size, flags | __GFP_ZERO);
+}
+
+extern void *kvrealloc(const void *p, size_t oldsize, size_t newsize,
+		gfp_t flags);
+extern void kvfree(const void *addr);
+extern void kvfree_sensitive(const void *addr, size_t len);
+
 unsigned int kmem_cache_size(struct kmem_cache *s);
 void __init kmem_cache_init_late(void);
 
