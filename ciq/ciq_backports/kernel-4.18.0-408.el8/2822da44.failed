KVM: x86/mmu: fix parameters to kvm_flush_remote_tlbs_with_address

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-408.el8
commit-author Maxim Levitsky <mlevitsk@redhat.com>
commit 2822da446640d82b7bf65800314ef2a825e8df13
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-408.el8/2822da44.failed

kvm_flush_remote_tlbs_with_address expects (start gfn, number of pages),
and not (start gfn, end gfn)

	Signed-off-by: Maxim Levitsky <mlevitsk@redhat.com>
Message-Id: <20210810205251.424103-3-mlevitsk@redhat.com>
	Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
(cherry picked from commit 2822da446640d82b7bf65800314ef2a825e8df13)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kvm/mmu/mmu.c
diff --cc arch/x86/kvm/mmu/mmu.c
index 4c612c0dc324,3cb2808e1e5c..000000000000
--- a/arch/x86/kvm/mmu/mmu.c
+++ b/arch/x86/kvm/mmu/mmu.c
@@@ -5694,21 -5683,28 +5694,27 @@@ void kvm_zap_gfn_range(struct kvm *kvm
  	bool flush = false;
  
  	write_lock(&kvm->mmu_lock);
 +	for (i = 0; i < KVM_ADDRESS_SPACE_NUM; i++) {
 +		slots = __kvm_memslots(kvm, i);
 +		kvm_for_each_memslot(memslot, slots) {
 +			gfn_t start, end;
 +
 +			start = max(gfn_start, memslot->base_gfn);
 +			end = min(gfn_end, memslot->base_gfn + memslot->npages);
 +			if (start >= end)
 +				continue;
  
 -	if (kvm_memslots_have_rmaps(kvm)) {
 -		for (i = 0; i < KVM_ADDRESS_SPACE_NUM; i++) {
 -			slots = __kvm_memslots(kvm, i);
 -			kvm_for_each_memslot(memslot, slots) {
 -				gfn_t start, end;
 -
 -				start = max(gfn_start, memslot->base_gfn);
 -				end = min(gfn_end, memslot->base_gfn + memslot->npages);
 -				if (start >= end)
 -					continue;
 -
 -				flush = slot_handle_level_range(kvm,
 -						(const struct kvm_memory_slot *) memslot,
 -						kvm_zap_rmapp, PG_LEVEL_4K,
 -						KVM_MAX_HUGEPAGE_LEVEL, start,
 -						end - 1, true, flush);
 -			}
 +			flush = slot_handle_level_range(kvm, memslot, kvm_zap_rmapp,
 +							PG_LEVEL_4K,
 +							KVM_MAX_HUGEPAGE_LEVEL,
 +							start, end - 1, true, flush);
  		}
++<<<<<<< HEAD
++=======
+ 		if (flush)
+ 			kvm_flush_remote_tlbs_with_address(kvm, gfn_start,
+ 							   gfn_end - gfn_start);
++>>>>>>> 2822da446640 (KVM: x86/mmu: fix parameters to kvm_flush_remote_tlbs_with_address)
  	}
  
  	if (is_tdp_mmu_enabled(kvm)) {
* Unmerged path arch/x86/kvm/mmu/mmu.c
