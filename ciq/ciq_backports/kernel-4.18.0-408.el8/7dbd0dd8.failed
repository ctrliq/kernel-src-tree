scsi: mpi3mr: Add support for NVMe passthrough

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-408.el8
commit-author Sumit Saxena <sumit.saxena@broadcom.com>
commit 7dbd0dd8cde356d2a747d5c87dad7c2233dad8a4
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-408.el8/7dbd0dd8.failed

Add support for management applications to send an MPI3 Encapsulated NVMe
passthru command to the NVMe devices attached to an Avenger controller.
Since the NVMe drives are exposed as SCSI devices by the controller, the
standard NVMe applications cannot be used to interact with the drives and
the command sets supported are also limited by the controller firmware.
Special handling is required for MPI3 Encapsulated NVMe passthru commands
for PRP/SGL setup in the commands.

Link: https://lore.kernel.org/r/20220429211641.642010-8-sumit.saxena@broadcom.com
	Reviewed-by: Himanshu Madhani <himanshu.madhani@oracle.com>
	Signed-off-by: Sumit Saxena <sumit.saxena@broadcom.com>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit 7dbd0dd8cde356d2a747d5c87dad7c2233dad8a4)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/mpi3mr/mpi3mr.h
#	drivers/scsi/mpi3mr/mpi3mr_app.c
#	include/uapi/scsi/scsi_bsg_mpi3mr.h
diff --cc drivers/scsi/mpi3mr/mpi3mr.h
index 054d5f025cbf,60e129603a77..000000000000
--- a/drivers/scsi/mpi3mr/mpi3mr.h
+++ b/drivers/scsi/mpi3mr/mpi3mr.h
@@@ -169,6 -181,57 +169,60 @@@ extern int prot_mask
  /* MSI Index from Reply Queue Index */
  #define REPLY_QUEUE_IDX_TO_MSIX_IDX(qidx, offset)	(qidx + offset)
  
++<<<<<<< HEAD
++=======
+ /*
+  * Maximum data transfer size definitions for management
+  * application commands
+  */
+ #define MPI3MR_MAX_APP_XFER_SIZE	(1 * 1024 * 1024)
+ #define MPI3MR_MAX_APP_XFER_SEGMENTS	512
+ /*
+  * 2048 sectors are for data buffers and additional 512 sectors for
+  * other buffers
+  */
+ #define MPI3MR_MAX_APP_XFER_SECTORS	(2048 + 512)
+ 
+ /**
+  * struct mpi3mr_nvme_pt_sge -  Structure to store SGEs for NVMe
+  * Encapsulated commands.
+  *
+  * @base_addr: Physical address
+  * @length: SGE length
+  * @rsvd: Reserved
+  * @rsvd1: Reserved
+  * @sgl_type: sgl type
+  */
+ struct mpi3mr_nvme_pt_sge {
+ 	u64 base_addr;
+ 	u32 length;
+ 	u16 rsvd;
+ 	u8 rsvd1;
+ 	u8 sgl_type;
+ };
+ 
+ /**
+  * struct mpi3mr_buf_map -  local structure to
+  * track kernel and user buffers associated with an BSG
+  * structure.
+  *
+  * @bsg_buf: BSG buffer virtual address
+  * @bsg_buf_len:  BSG buffer length
+  * @kern_buf: Kernel buffer virtual address
+  * @kern_buf_len: Kernel buffer length
+  * @kern_buf_dma: Kernel buffer DMA address
+  * @data_dir: Data direction.
+  */
+ struct mpi3mr_buf_map {
+ 	void *bsg_buf;
+ 	u32 bsg_buf_len;
+ 	void *kern_buf;
+ 	u32 kern_buf_len;
+ 	dma_addr_t kern_buf_dma;
+ 	u8 data_dir;
+ };
+ 
++>>>>>>> 7dbd0dd8cde3 (scsi: mpi3mr: Add support for NVMe passthrough)
  /* IOC State definitions */
  enum mpi3mr_iocstate {
  	MRIOC_STATE_READY = 1,
@@@ -677,12 -753,20 +731,20 @@@ struct scmd_priv 
   * @dev_handle_bitmap_sz: Device handle bitmap size
   * @removepend_bitmap: Remove pending bitmap
   * @delayed_rmhs_list: Delayed device removal list
 - * @evtack_cmds_bitmap_sz: Event Ack bitmap size
 - * @evtack_cmds_bitmap: Event Ack bitmap
 - * @delayed_evtack_cmds_list: Delayed event acknowledgment list
   * @ts_update_counter: Timestamp update counter
 + * @fault_dbg: Fault debug flag
   * @reset_in_progress: Reset in progress flag
   * @unrecoverable: Controller unrecoverable flag
 - * @prev_reset_result: Result of previous reset
   * @reset_mutex: Controller reset mutex
   * @reset_waitq: Controller reset  wait queue
++<<<<<<< HEAD
++=======
+  * @prepare_for_reset: Prepare for reset event received
+  * @prepare_for_reset_timeout_counter: Prepare for reset timeout
+  * @prp_list_virt: NVMe encapsulated PRP list virtual base
+  * @prp_list_dma: NVMe encapsulated PRP list DMA
+  * @prp_sz: NVME encapsulated PRP list size
++>>>>>>> 7dbd0dd8cde3 (scsi: mpi3mr: Add support for NVMe passthrough)
   * @diagsave_timeout: Diagnostic information save timeout
   * @logging_level: Controller debug logging level
   * @flush_io_count: I/O count to flush after reset
@@@ -811,6 -918,14 +873,16 @@@ struct mpi3mr_ioc 
  	struct mutex reset_mutex;
  	wait_queue_head_t reset_waitq;
  
++<<<<<<< HEAD
++=======
+ 	u8 prepare_for_reset;
+ 	u16 prepare_for_reset_timeout_counter;
+ 
+ 	void *prp_list_virt;
+ 	dma_addr_t prp_list_dma;
+ 	u32 prp_sz;
+ 
++>>>>>>> 7dbd0dd8cde3 (scsi: mpi3mr: Add support for NVMe passthrough)
  	u16 diagsave_timeout;
  	int logging_level;
  	u16 flush_io_count;
* Unmerged path drivers/scsi/mpi3mr/mpi3mr_app.c
* Unmerged path include/uapi/scsi/scsi_bsg_mpi3mr.h
* Unmerged path drivers/scsi/mpi3mr/mpi3mr.h
* Unmerged path drivers/scsi/mpi3mr/mpi3mr_app.c
* Unmerged path include/uapi/scsi/scsi_bsg_mpi3mr.h
