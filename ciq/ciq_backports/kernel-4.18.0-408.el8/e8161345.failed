tcp: drop the hash_32() part from the index calculation

jira LE-1907
cve CVE-2022-1012
Rebuild_History Non-Buildable kernel-4.18.0-408.el8
commit-author Willy Tarreau <w@1wt.eu>
commit e8161345ddbb66e449abde10d2fdce93f867eba9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-408.el8/e8161345.failed

In commit 190cc82489f4 ("tcp: change source port randomizarion at
connect() time"), the table_perturb[] array was introduced and an
index was taken from the port_offset via hash_32(). But it turns
out that hash_32() performs a multiplication while the input here
comes from the output of SipHash in secure_seq, that is well
distributed enough to avoid the need for yet another hash.

	Suggested-by: Amit Klein <aksecurity@gmail.com>
	Reviewed-by: Eric Dumazet <edumazet@google.com>
	Signed-off-by: Willy Tarreau <w@1wt.eu>
	Signed-off-by: Jakub Kicinski <kuba@kernel.org>
(cherry picked from commit e8161345ddbb66e449abde10d2fdce93f867eba9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/ipv4/inet_hashtables.c
diff --cc net/ipv4/inet_hashtables.c
index 98c85d0d54d8,a5d57fa679ca..000000000000
--- a/net/ipv4/inet_hashtables.c
+++ b/net/ipv4/inet_hashtables.c
@@@ -809,8 -776,9 +809,14 @@@ int __inet_hash_connect(struct inet_tim
  	if (likely(remaining > 1))
  		remaining &= ~1U;
  
++<<<<<<< HEAD
 +	net_get_random_once(table_perturb, sizeof(table_perturb));
 +	index = hash_32(port_offset, INET_TABLE_PERTURB_SHIFT);
++=======
+ 	net_get_random_once(table_perturb,
+ 			    INET_TABLE_PERTURB_SIZE * sizeof(*table_perturb));
+ 	index = port_offset & (INET_TABLE_PERTURB_SIZE - 1);
++>>>>>>> e8161345ddbb (tcp: drop the hash_32() part from the index calculation)
  
  	offset = READ_ONCE(table_perturb[index]) + (port_offset >> 32);
  	offset %= remaining;
* Unmerged path net/ipv4/inet_hashtables.c
