platform/x86/intel: Move Intel PMT drivers to new subfolder

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-408.el8
commit-author David E. Box <david.e.box@linux.intel.com>
commit e184b1e589a7fbb80bfdd0364c11422999a17a26
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-408.el8/e184b1e5.failed

Move all Intel Platform Monitoring Technology drivers to
drivers/platform/x86/intel/pmt.

	Signed-off-by: David E. Box <david.e.box@linux.intel.com>
	Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Link: https://lore.kernel.org/r/20210727164928.3171521-1-david.e.box@linux.intel.com
	Signed-off-by: Hans de Goede <hdegoede@redhat.com>
(cherry picked from commit e184b1e589a7fbb80bfdd0364c11422999a17a26)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/platform/x86/Kconfig
#	drivers/platform/x86/Makefile
#	drivers/platform/x86/intel/Kconfig
#	drivers/platform/x86/intel/Makefile
diff --cc drivers/platform/x86/Kconfig
index 9c719f85d968,6ad35158ae4e..000000000000
--- a/drivers/platform/x86/Kconfig
+++ b/drivers/platform/x86/Kconfig
@@@ -1208,57 -1165,52 +1208,60 @@@ config INTEL_BXTWC_PMIC_TM
  	  This driver enables the alarm wakeup functionality in the TMU unit
  	  of Whiskey Cove PMIC.
  
 -config INTEL_CHTDC_TI_PWRBTN
 -	tristate "Intel Cherry Trail Dollar Cove TI power button driver"
 -	depends on INTEL_SOC_PMIC_CHTDC_TI
 -	depends on INPUT
 +config SURFACE_PRO3_BUTTON
 +	tristate "Power/home/volume buttons driver for Microsoft Surface Pro 3/4 tablet"
 +	depends on ACPI && INPUT
 +	---help---
 +	  This driver handles the power/home/volume buttons on the Microsoft Surface Pro 3/4 tablet.
 +
 +config SURFACE_3_BUTTON
 +	tristate "Power/home/volume buttons driver for Microsoft Surface 3 tablet"
 +	depends on ACPI && KEYBOARD_GPIO && I2C
 +	---help---
 +	  This driver handles the power/home/volume buttons on the Microsoft Surface 3 tablet.
 +
++<<<<<<< HEAD
 +config INTEL_PMT_CLASS
 +	tristate
  	help
 -	  This option adds a power button driver driver for Dollar Cove TI
 -	  PMIC on Intel Cherry Trail devices.
 +	  The Intel Platform Monitoring Technology (PMT) class driver provides
 +	  the basic sysfs interface and file hierarchy uses by PMT devices.
 +
 +	  For more information, see:
 +	  <file:Documentation/ABI/testing/sysfs-class-intel_pmt>
  
  	  To compile this driver as a module, choose M here: the module
 -	  will be called intel_chtdc_ti_pwrbtn.
 +	  will be called intel_pmt_class.
  
 -config INTEL_MRFLD_PWRBTN
 -	tristate "Intel Merrifield Basin Cove power button driver"
 -	depends on INTEL_SOC_PMIC_MRFLD
 -	depends on INPUT
 +config INTEL_PMT_TELEMETRY
 +	tristate "Intel Platform Monitoring Technology (PMT) Telemetry driver"
 +	depends on MFD_INTEL_PMT
 +	select INTEL_PMT_CLASS
  	help
 -	  This option adds a power button driver for Basin Cove PMIC
 -	  on Intel Merrifield devices.
 +	  The Intel Platform Monitory Technology (PMT) Telemetry driver provides
 +	  access to hardware telemetry metrics on devices that support the
 +	  feature.
  
  	  To compile this driver as a module, choose M here: the module
 -	  will be called intel_mrfld_pwrbtn.
 +	  will be called intel_pmt_telemetry.
  
 -config INTEL_PMC_CORE
 -	tristate "Intel PMC Core driver"
 -	depends on PCI
 -	depends on ACPI
 +config INTEL_PMT_CRASHLOG
 +	tristate "Intel Platform Monitoring Technology (PMT) Crashlog driver"
 +	depends on MFD_INTEL_PMT
 +	select INTEL_PMT_CLASS
  	help
 -	  The Intel Platform Controller Hub for Intel Core SoCs provides access
 -	  to Power Management Controller registers via various interfaces. This
 -	  driver can utilize debugging capabilities and supported features as
 -	  exposed by the Power Management Controller. It also may perform some
 -	  tasks in the PMC in order to enable transition into the SLPS0 state.
 -	  It should be selected on all Intel platforms supported by the driver.
 -
 -	  Supported features:
 -		- SLP_S0_RESIDENCY counter
 -		- PCH IP Power Gating status
 -		- LTR Ignore / LTR Show
 -		- MPHY/PLL gating status (Sunrisepoint PCH only)
 -		- SLPS0 Debug registers (Cannonlake/Icelake PCH)
 -		- Low Power Mode registers (Tigerlake and beyond)
 -		- PMC quirks as needed to enable SLPS0/S0ix
 +	  The Intel Platform Monitoring Technology (PMT) crashlog driver provides
 +	  access to hardware crashlog capabilities on devices that support the
 +	  feature.
 +
 +	  To compile this driver as a module, choose M here: the module
 +	  will be called intel_pmt_crashlog.
  
++=======
++>>>>>>> e184b1e589a7 (platform/x86/intel: Move Intel PMT drivers to new subfolder)
  config INTEL_PUNIT_IPC
  	tristate "Intel P-Unit IPC Driver"
 -	help
 +	---help---
  	  This driver provides support for Intel P-Unit Mailbox IPC mechanism,
  	  which is used to bridge the communications between kernel and P-Unit.
  
diff --cc drivers/platform/x86/Makefile
index 60d6c98f6767,5edfdc2ea7f2..000000000000
--- a/drivers/platform/x86/Makefile
+++ b/drivers/platform/x86/Makefile
@@@ -61,47 -100,42 +61,63 @@@ obj-$(CONFIG_INTEL_WMI_THUNDERBOLT)	+= 
  # before toshiba_acpi initializes
  obj-$(CONFIG_ACPI_TOSHIBA)	+= toshiba_acpi.o
  
 -# Laptop drivers
 -obj-$(CONFIG_ACPI_CMPC)		+= classmate-laptop.o
 -obj-$(CONFIG_COMPAL_LAPTOP)	+= compal-laptop.o
 -obj-$(CONFIG_LG_LAPTOP)		+= lg-laptop.o
 -obj-$(CONFIG_PANASONIC_LAPTOP)	+= panasonic-laptop.o
 -obj-$(CONFIG_SONY_LAPTOP)	+= sony-laptop.o
 -obj-$(CONFIG_SYSTEM76_ACPI)	+= system76_acpi.o
 -obj-$(CONFIG_TOPSTAR_LAPTOP)	+= topstar-laptop.o
 -
 -# Platform drivers
 -obj-$(CONFIG_FW_ATTR_CLASS)		+= firmware_attributes_class.o
 -obj-$(CONFIG_I2C_MULTI_INSTANTIATE)	+= i2c-multi-instantiate.o
 -obj-$(CONFIG_MLX_PLATFORM)		+= mlx-platform.o
 -obj-$(CONFIG_TOUCHSCREEN_DMI)		+= touchscreen_dmi.o
 -obj-$(CONFIG_WIRELESS_HOTKEY)		+= wireless-hotkey.o
 -
 -# Intel uncore drivers
 -obj-$(CONFIG_INTEL_IPS)				+= intel_ips.o
 -obj-$(CONFIG_INTEL_RST)				+= intel-rst.o
 -obj-$(CONFIG_INTEL_SMARTCONNECT)		+= intel-smartconnect.o
 -obj-$(CONFIG_INTEL_SPEED_SELECT_INTERFACE)	+= intel_speed_select_if/
 -obj-$(CONFIG_INTEL_TURBO_MAX_3)			+= intel_turbo_max_3.o
 -obj-$(CONFIG_INTEL_UNCORE_FREQ_CONTROL)		+= intel-uncore-frequency.o
 -
 -# Intel PMIC / PMC / P-Unit devices
 +obj-$(CONFIG_TOSHIBA_BT_RFKILL)	+= toshiba_bluetooth.o
 +obj-$(CONFIG_TOSHIBA_HAPS)	+= toshiba_haps.o
 +obj-$(CONFIG_TOSHIBA_WMI)	+= toshiba-wmi.o
 +obj-$(CONFIG_INTEL_CHT_INT33FE)	+= intel_cht_int33fe.o
 +obj-$(CONFIG_INTEL_INT0002_VGPIO) += intel_int0002_vgpio.o
 +obj-$(CONFIG_INTEL_HID_EVENT)	+= intel-hid.o
 +obj-$(CONFIG_INTEL_VBTN)	+= intel-vbtn.o
 +obj-$(CONFIG_INTEL_SCU_IPC)	+= intel_scu_ipc.o
 +obj-$(CONFIG_INTEL_SCU_IPC_UTIL) += intel_scu_ipcutil.o
 +obj-$(CONFIG_INTEL_MFLD_THERMAL) += intel_mid_thermal.o
 +obj-$(CONFIG_INTEL_IPS)		+= intel_ips.o
 +obj-$(CONFIG_XO1_RFKILL)	+= xo1-rfkill.o
 +obj-$(CONFIG_XO15_EBOOK)	+= xo15-ebook.o
 +obj-$(CONFIG_IBM_RTL)		+= ibm_rtl.o
 +obj-$(CONFIG_SAMSUNG_LAPTOP)	+= samsung-laptop.o
 +obj-$(CONFIG_MXM_WMI)		+= mxm-wmi.o
 +obj-$(CONFIG_INTEL_MID_POWER_BUTTON)	+= intel_mid_powerbtn.o
 +obj-$(CONFIG_INTEL_OAKTRAIL)	+= intel_oaktrail.o
 +obj-$(CONFIG_SAMSUNG_Q10)	+= samsung-q10.o
 +obj-$(CONFIG_APPLE_GMUX)	+= apple-gmux.o
 +obj-$(CONFIG_INTEL_RST)		+= intel-rst.o
 +obj-$(CONFIG_INTEL_SMARTCONNECT)	+= intel-smartconnect.o
 +
 +obj-$(CONFIG_PVPANIC)           += pvpanic.o
 +obj-$(CONFIG_ALIENWARE_WMI)	+= alienware-wmi.o
 +obj-$(CONFIG_INTEL_PMC_IPC)	+= intel_pmc_ipc.o
 +obj-$(CONFIG_SILEAD_DMI)	+= silead_dmi.o
 +obj-$(CONFIG_SURFACE_PRO3_BUTTON)	+= surfacepro3_button.o
 +obj-$(CONFIG_SURFACE_3_BUTTON)	+= surface3_button.o
 +obj-$(CONFIG_INTEL_PUNIT_IPC)  += intel_punit_ipc.o
  obj-$(CONFIG_INTEL_BXTWC_PMIC_TMU)	+= intel_bxtwc_tmu.o
++<<<<<<< HEAD
 +obj-$(CONFIG_INTEL_TELEMETRY)	+= intel_telemetry_core.o \
 +				   intel_telemetry_pltdrv.o \
 +				   intel_telemetry_debugfs.o
 +obj-$(CONFIG_INTEL_PMT_CLASS)		+= intel_pmt_class.o
 +obj-$(CONFIG_INTEL_PMT_TELEMETRY)	+= intel_pmt_telemetry.o
 +obj-$(CONFIG_INTEL_PMT_CRASHLOG)	+= intel_pmt_crashlog.o
 +obj-$(CONFIG_PMC_ATOM)		+= pmc_atom.o
 +obj-$(CONFIG_MLX_PLATFORM)	+= mlx-platform.o
 +obj-$(CONFIG_INTEL_TURBO_MAX_3) += intel_turbo_max_3.o
 +obj-$(CONFIG_INTEL_CHTDC_TI_PWRBTN)	+= intel_chtdc_ti_pwrbtn.o
 +obj-$(CONFIG_I2C_MULTI_INSTANTIATE)	+= i2c-multi-instantiate.o
 +obj-$(CONFIG_INTEL_SPEED_SELECT_INTERFACE) += intel_speed_select_if/
 +obj-$(CONFIG_FW_ATTR_CLASS)		+= firmware_attributes_class.o
++=======
+ obj-$(CONFIG_INTEL_CHTDC_TI_PWRBTN)	+= intel_chtdc_ti_pwrbtn.o
+ obj-$(CONFIG_INTEL_MRFLD_PWRBTN)	+= intel_mrfld_pwrbtn.o
+ obj-$(CONFIG_INTEL_PMC_CORE)		+= intel_pmc_core.o intel_pmc_core_pltdrv.o
+ obj-$(CONFIG_INTEL_PUNIT_IPC)		+= intel_punit_ipc.o
+ obj-$(CONFIG_INTEL_SCU_IPC)		+= intel_scu_ipc.o
+ obj-$(CONFIG_INTEL_SCU_PCI)		+= intel_scu_pcidrv.o
+ obj-$(CONFIG_INTEL_SCU_PLATFORM)	+= intel_scu_pltdrv.o
+ obj-$(CONFIG_INTEL_SCU_WDT)		+= intel_scu_wdt.o
+ obj-$(CONFIG_INTEL_SCU_IPC_UTIL)	+= intel_scu_ipcutil.o
+ obj-$(CONFIG_INTEL_TELEMETRY)		+= intel_telemetry_core.o \
+ 					   intel_telemetry_pltdrv.o \
+ 					   intel_telemetry_debugfs.o
+ obj-$(CONFIG_PMC_ATOM)			+= pmc_atom.o
++>>>>>>> e184b1e589a7 (platform/x86/intel: Move Intel PMT drivers to new subfolder)
diff --cc drivers/platform/x86/intel/Kconfig
index 1a3496800567,6eec084d9bf9..000000000000
--- a/drivers/platform/x86/intel/Kconfig
+++ b/drivers/platform/x86/intel/Kconfig
@@@ -15,22 -15,9 +15,28 @@@ menuconfig X86_PLATFORM_DRIVERS_INTE
  	  and disabled.
  
  if X86_PLATFORM_DRIVERS_INTEL
 +source "drivers/platform/x86/intel/pmc/Kconfig"
  
++<<<<<<< HEAD
 +config INTEL_ISHTP_ECLITE
 +	tristate "Intel ISHTP eclite controller Driver"
 +	depends on INTEL_ISH_HID
 +	depends on ACPI
 +	help
 +	  This driver is for accessing the PSE (Programmable Service Engine) -
 +	  an Embedded Controller like IP - using ISHTP (Integrated Sensor Hub
 +	  Transport Protocol) to get battery, thermal and UCSI (USB Type-C
 +	  Connector System Software Interface) related data from the platform.
 +	  Users who don't want to use discrete Embedded Controller on Intel's
 +	  Elkhartlake platform can leverage this integrated solution of
 +	  ECLite which is part of PSE subsystem.
 +
 +	  To compile this driver as a module, choose M here: the module
 +	  will be called intel_ishtp_eclite.
++=======
+ source "drivers/platform/x86/intel/int33fe/Kconfig"
+ source "drivers/platform/x86/intel/int3472/Kconfig"
+ source "drivers/platform/x86/intel/pmt/Kconfig"
++>>>>>>> e184b1e589a7 (platform/x86/intel: Move Intel PMT drivers to new subfolder)
  
  endif # X86_PLATFORM_DRIVERS_INTEL
diff --cc drivers/platform/x86/intel/Makefile
index 620d6c974a88,ca0ec2c85b05..000000000000
--- a/drivers/platform/x86/intel/Makefile
+++ b/drivers/platform/x86/intel/Makefile
@@@ -3,7 -3,7 +3,13 @@@
  # Makefile for drivers/platform/x86/intel
  # Intel x86 Platform-Specific Drivers
  #
 +obj-$(CONFIG_INTEL_PMC_CORE)		+= pmc/
  
++<<<<<<< HEAD
 +# Intel miscellaneous drivers
 +obj-$(CONFIG_INTEL_ISHTP_ECLITE)	+= ishtp_eclite.o
++=======
+ obj-$(CONFIG_INTEL_CHT_INT33FE)		+= int33fe/
+ obj-$(CONFIG_INTEL_SKL_INT3472)		+= int3472/
+ obj-$(CONFIG_INTEL_PMT_CLASS)		+= pmt/
++>>>>>>> e184b1e589a7 (platform/x86/intel: Move Intel PMT drivers to new subfolder)
diff --git a/MAINTAINERS b/MAINTAINERS
index daede1a933b0..94d55c805bb8 100644
--- a/MAINTAINERS
+++ b/MAINTAINERS
@@ -7563,7 +7563,7 @@ INTEL PMT DRIVER
 M:	"David E. Box" <david.e.box@linux.intel.com>
 S:	Maintained
 F:	drivers/mfd/intel_pmt.c
-F:	drivers/platform/x86/intel_pmt_*
+F:	drivers/platform/x86/intel/pmt/
 
 INTEL PRO/WIRELESS 2100, 2200BG, 2915ABG NETWORK CONNECTION SUPPORT
 M:	Stanislav Yakovlev <stas.yakovlev@gmail.com>
* Unmerged path drivers/platform/x86/Kconfig
* Unmerged path drivers/platform/x86/Makefile
* Unmerged path drivers/platform/x86/intel/Kconfig
* Unmerged path drivers/platform/x86/intel/Makefile
diff --git a/drivers/platform/x86/intel/pmt/Kconfig b/drivers/platform/x86/intel/pmt/Kconfig
new file mode 100644
index 000000000000..d630f883a717
--- /dev/null
+++ b/drivers/platform/x86/intel/pmt/Kconfig
@@ -0,0 +1,40 @@
+# SPDX-License-Identifier: GPL-2.0-only
+#
+# Intel Platform Monitoring Technology drivers
+#
+
+config INTEL_PMT_CLASS
+	tristate
+	help
+	  The Intel Platform Monitoring Technology (PMT) class driver provides
+	  the basic sysfs interface and file hierarchy used by PMT devices.
+
+	  For more information, see:
+	  <file:Documentation/ABI/testing/sysfs-class-intel_pmt>
+
+	  To compile this driver as a module, choose M here: the module
+	  will be called intel_pmt_class.
+
+config INTEL_PMT_TELEMETRY
+	tristate "Intel Platform Monitoring Technology (PMT) Telemetry driver"
+	depends on MFD_INTEL_PMT
+	select INTEL_PMT_CLASS
+	help
+	  The Intel Platform Monitory Technology (PMT) Telemetry driver provides
+	  access to hardware telemetry metrics on devices that support the
+	  feature.
+
+	  To compile this driver as a module, choose M here: the module
+	  will be called intel_pmt_telemetry.
+
+config INTEL_PMT_CRASHLOG
+	tristate "Intel Platform Monitoring Technology (PMT) Crashlog driver"
+	depends on MFD_INTEL_PMT
+	select INTEL_PMT_CLASS
+	help
+	  The Intel Platform Monitoring Technology (PMT) crashlog driver provides
+	  access to hardware crashlog capabilities on devices that support the
+	  feature.
+
+	  To compile this driver as a module, choose M here: the module
+	  will be called intel_pmt_crashlog.
diff --git a/drivers/platform/x86/intel/pmt/Makefile b/drivers/platform/x86/intel/pmt/Makefile
new file mode 100644
index 000000000000..019103ee6522
--- /dev/null
+++ b/drivers/platform/x86/intel/pmt/Makefile
@@ -0,0 +1,12 @@
+# SPDX-License-Identifier: GPL-2.0
+#
+# Makefile for linux/drivers/platform/x86/intel/pmt
+# Intel Platform Monitoring Technology Drivers
+#
+
+pmt_class-objs				+= class.o
+obj-$(CONFIG_INTEL_PMT_CLASS)		+= pmt_class.o
+pmt_telemetry-objs			+= telemetry.o
+obj-$(CONFIG_INTEL_PMT_TELEMETRY)	+= pmt_telemetry.o
+pmt_crashlog-objs			+= crashlog.o
+obj-$(CONFIG_INTEL_PMT_CRASHLOG)	+= pmt_crashlog.o
diff --git a/drivers/platform/x86/intel_pmt_class.c b/drivers/platform/x86/intel/pmt/class.c
similarity index 99%
rename from drivers/platform/x86/intel_pmt_class.c
rename to drivers/platform/x86/intel/pmt/class.c
index c86ff15b1ed5..659b1073033c 100644
--- a/drivers/platform/x86/intel_pmt_class.c
+++ b/drivers/platform/x86/intel/pmt/class.c
@@ -13,7 +13,7 @@
 #include <linux/mm.h>
 #include <linux/pci.h>
 
-#include "intel_pmt_class.h"
+#include "class.h"
 
 #define PMT_XA_START		0
 #define PMT_XA_MAX		INT_MAX
diff --git a/drivers/platform/x86/intel_pmt_class.h b/drivers/platform/x86/intel/pmt/class.h
similarity index 100%
rename from drivers/platform/x86/intel_pmt_class.h
rename to drivers/platform/x86/intel/pmt/class.h
diff --git a/drivers/platform/x86/intel_pmt_crashlog.c b/drivers/platform/x86/intel/pmt/crashlog.c
similarity index 99%
rename from drivers/platform/x86/intel_pmt_crashlog.c
rename to drivers/platform/x86/intel/pmt/crashlog.c
index 92d315a16cfd..5608a8ad1f9f 100644
--- a/drivers/platform/x86/intel_pmt_crashlog.c
+++ b/drivers/platform/x86/intel/pmt/crashlog.c
@@ -15,7 +15,7 @@
 #include <linux/uaccess.h>
 #include <linux/overflow.h>
 
-#include "intel_pmt_class.h"
+#include "class.h"
 
 #define DRV_NAME		"pmt_crashlog"
 
diff --git a/drivers/platform/x86/intel_pmt_telemetry.c b/drivers/platform/x86/intel/pmt/telemetry.c
similarity index 99%
rename from drivers/platform/x86/intel_pmt_telemetry.c
rename to drivers/platform/x86/intel/pmt/telemetry.c
index 9b95ef050457..a58843360fbf 100644
--- a/drivers/platform/x86/intel_pmt_telemetry.c
+++ b/drivers/platform/x86/intel/pmt/telemetry.c
@@ -15,7 +15,7 @@
 #include <linux/uaccess.h>
 #include <linux/overflow.h>
 
-#include "intel_pmt_class.h"
+#include "class.h"
 
 #define TELEM_DEV_NAME		"pmt_telemetry"
 
