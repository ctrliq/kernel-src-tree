thermal: intel: hfi: Handle CPU hotplug events

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-408.el8
commit-author Ricardo Neri <ricardo.neri-calderon@linux.intel.com>
commit 2d74e6319abe278981e79166b6c2d0c3ed39b1ae
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-408.el8/2d74e631.failed

All CPUs in a package are represented in an HFI table. There exists an
HFI table per package. Thus, CPUs in a package need to coordinate to
initialize and access the table. Do such coordination during CPU hotplug.
Use the first CPU to come online in a package to initialize the HFI
instance and the data structure representing it. Other CPUs in the same
package need only to register or unregister themselves in that data
structure.

The HFI depends on both the package-level thermal management and the local
APIC thermal local vector. Thus, to ensure that a CPU coming online has an
associated HFI instance when the hardware issues an HFI event, enable the
HFI only after having enabled the local APIC thermal vector. The thermal
throttle driver takes care of the needed package-level initialization.

	Reviewed-by: Len Brown <len.brown@intel.com>
	Signed-off-by: Ricardo Neri <ricardo.neri-calderon@linux.intel.com>
	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
(cherry picked from commit 2d74e6319abe278981e79166b6c2d0c3ed39b1ae)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kernel/cpu/mce/therm_throt.c
#	drivers/thermal/intel/intel_hfi.c
#	drivers/thermal/intel/intel_hfi.h
diff --cc arch/x86/kernel/cpu/mce/therm_throt.c
index ee229ceee745,8571e57a013a..000000000000
--- a/arch/x86/kernel/cpu/mce/therm_throt.c
+++ b/arch/x86/kernel/cpu/mce/therm_throt.c
@@@ -266,14 -466,47 +266,51 @@@ static void thermal_throttle_remove_dev
  /* Get notified when a cpu comes on/off. Be hotplug friendly. */
  static int thermal_throttle_online(unsigned int cpu)
  {
 -	struct thermal_state *state = &per_cpu(thermal_state, cpu);
  	struct device *dev = get_cpu_device(cpu);
++<<<<<<< HEAD:arch/x86/kernel/cpu/mce/therm_throt.c
++=======
+ 	u32 l;
+ 
+ 	state->package_throttle.level = PACKAGE_LEVEL;
+ 	state->core_throttle.level = CORE_LEVEL;
+ 
+ 	INIT_DELAYED_WORK(&state->package_throttle.therm_work, throttle_active_work);
+ 	INIT_DELAYED_WORK(&state->core_throttle.therm_work, throttle_active_work);
+ 
+ 	/*
+ 	 * The first CPU coming online will enable the HFI. Usually this causes
+ 	 * hardware to issue an HFI thermal interrupt. Such interrupt will reach
+ 	 * the CPU once we enable the thermal vector in the local APIC.
+ 	 */
+ 	intel_hfi_online(cpu);
+ 
+ 	/* Unmask the thermal vector after the above workqueues are initialized. */
+ 	l = apic_read(APIC_LVTTHMR);
+ 	apic_write(APIC_LVTTHMR, l & ~APIC_LVT_MASKED);
++>>>>>>> 2d74e6319abe (thermal: intel: hfi: Handle CPU hotplug events):drivers/thermal/intel/therm_throt.c
  
  	return thermal_throttle_add_dev(dev, cpu);
  }
  
  static int thermal_throttle_offline(unsigned int cpu)
  {
 -	struct thermal_state *state = &per_cpu(thermal_state, cpu);
  	struct device *dev = get_cpu_device(cpu);
++<<<<<<< HEAD:arch/x86/kernel/cpu/mce/therm_throt.c
++=======
+ 	u32 l;
+ 
+ 	/* Mask the thermal vector before draining evtl. pending work */
+ 	l = apic_read(APIC_LVTTHMR);
+ 	apic_write(APIC_LVTTHMR, l | APIC_LVT_MASKED);
+ 
+ 	intel_hfi_offline(cpu);
+ 
+ 	cancel_delayed_work_sync(&state->package_throttle.therm_work);
+ 	cancel_delayed_work_sync(&state->core_throttle.therm_work);
+ 
+ 	state->package_throttle.rate_control_active = false;
+ 	state->core_throttle.rate_control_active = false;
++>>>>>>> 2d74e6319abe (thermal: intel: hfi: Handle CPU hotplug events):drivers/thermal/intel/therm_throt.c
  
  	thermal_throttle_remove_dev(dev);
  	return 0;
* Unmerged path drivers/thermal/intel/intel_hfi.c
* Unmerged path drivers/thermal/intel/intel_hfi.h
* Unmerged path arch/x86/kernel/cpu/mce/therm_throt.c
* Unmerged path drivers/thermal/intel/intel_hfi.c
* Unmerged path drivers/thermal/intel/intel_hfi.h
