thermal: core: Add helpers to browse the cdev, tz and governor list

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-408.el8
commit-author Daniel Lezcano <daniel.lezcano@linaro.org>
commit 3d44a509c1dafb75adfe218f022ad216885c135e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-408.el8/3d44a509.failed

The cdev, tz and governor list, as well as their respective locks are
statically defined in the thermal_core.c file.

In order to give a sane access to these list, like browsing all the
thermal zones or all the cooling devices, let's define a set of
helpers where we pass a callback as a parameter to be called for each
thermal entity.

We keep the self-encapsulation and ensure the locks are correctly
taken when looking at the list.

	Acked-by: Zhang Rui <rui.zhang@intel.com>
	Reviewed-by: Amit Kucheria <amit.kucheria@linaro.org>
	Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
Link: https://lore.kernel.org/r/20200706105538.2159-1-daniel.lezcano@linaro.org
(cherry picked from commit 3d44a509c1dafb75adfe218f022ad216885c135e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/thermal/thermal_core.h
diff --cc drivers/thermal/thermal_core.h
index 0df190ed82a7,fc8990c22704..000000000000
--- a/drivers/thermal/thermal_core.h
+++ b/drivers/thermal/thermal_core.h
@@@ -15,6 -15,79 +15,71 @@@
  /* Initial state of a cooling device during binding */
  #define THERMAL_NO_TARGET -1UL
  
++<<<<<<< HEAD
++=======
+ /* Init section thermal table */
+ extern struct thermal_governor *__governor_thermal_table[];
+ extern struct thermal_governor *__governor_thermal_table_end[];
+ 
+ #define THERMAL_TABLE_ENTRY(table, name)			\
+ 	static typeof(name) *__thermal_table_entry_##name	\
+ 	__used __section(__##table##_thermal_table) = &name
+ 
+ #define THERMAL_GOVERNOR_DECLARE(name)	THERMAL_TABLE_ENTRY(governor, name)
+ 
+ #define for_each_governor_table(__governor)		\
+ 	for (__governor = __governor_thermal_table;	\
+ 	     __governor < __governor_thermal_table_end;	\
+ 	     __governor++)
+ 
+ int for_each_thermal_zone(int (*cb)(struct thermal_zone_device *, void *),
+ 			  void *);
+ 
+ int for_each_thermal_cooling_device(int (*cb)(struct thermal_cooling_device *,
+ 					      void *), void *);
+ 
+ int for_each_thermal_governor(int (*cb)(struct thermal_governor *, void *),
+ 			      void *thermal_governor);
+ 
+ struct thermal_attr {
+ 	struct device_attribute attr;
+ 	char name[THERMAL_NAME_LENGTH];
+ };
+ 
+ static inline bool cdev_is_power_actor(struct thermal_cooling_device *cdev)
+ {
+ 	return cdev->ops->get_requested_power && cdev->ops->state2power &&
+ 		cdev->ops->power2state;
+ }
+ 
+ int power_actor_get_max_power(struct thermal_cooling_device *cdev,
+ 			      struct thermal_zone_device *tz, u32 *max_power);
+ int power_actor_get_min_power(struct thermal_cooling_device *cdev,
+ 			      struct thermal_zone_device *tz, u32 *min_power);
+ int power_actor_set_power(struct thermal_cooling_device *cdev,
+ 			  struct thermal_instance *ti, u32 power);
+ /**
+  * struct thermal_trip - representation of a point in temperature domain
+  * @np: pointer to struct device_node that this trip point was created from
+  * @temperature: temperature value in miliCelsius
+  * @hysteresis: relative hysteresis in miliCelsius
+  * @type: trip point type
+  */
+ struct thermal_trip {
+ 	struct device_node *np;
+ 	int temperature;
+ 	int hysteresis;
+ 	enum thermal_trip_type type;
+ };
+ 
+ int get_tz_trend(struct thermal_zone_device *tz, int trip);
+ 
+ struct thermal_instance *
+ get_thermal_instance(struct thermal_zone_device *tz,
+ 		     struct thermal_cooling_device *cdev,
+ 		     int trip);
+ 
++>>>>>>> 3d44a509c1da (thermal: core: Add helpers to browse the cdev, tz and governor list)
  /*
   * This structure is used to describe the behavior of
   * a certain cooling device on a certain trip point
diff --git a/drivers/thermal/thermal_core.c b/drivers/thermal/thermal_core.c
index cf139cb114db..eab0d103fdd6 100644
--- a/drivers/thermal/thermal_core.c
+++ b/drivers/thermal/thermal_core.c
@@ -696,6 +696,57 @@ void thermal_zone_device_rebind_exception(struct thermal_zone_device *tz,
 	mutex_unlock(&thermal_list_lock);
 }
 
+int for_each_thermal_governor(int (*cb)(struct thermal_governor *, void *),
+			      void *data)
+{
+	struct thermal_governor *gov;
+	int ret = 0;
+
+	mutex_lock(&thermal_governor_lock);
+	list_for_each_entry(gov, &thermal_governor_list, governor_list) {
+		ret = cb(gov, data);
+		if (ret)
+			break;
+	}
+	mutex_unlock(&thermal_governor_lock);
+
+	return ret;
+}
+
+int for_each_thermal_cooling_device(int (*cb)(struct thermal_cooling_device *,
+					      void *), void *data)
+{
+	struct thermal_cooling_device *cdev;
+	int ret = 0;
+
+	mutex_lock(&thermal_list_lock);
+	list_for_each_entry(cdev, &thermal_cdev_list, node) {
+		ret = cb(cdev, data);
+		if (ret)
+			break;
+	}
+	mutex_unlock(&thermal_list_lock);
+
+	return ret;
+}
+
+int for_each_thermal_zone(int (*cb)(struct thermal_zone_device *, void *),
+			  void *data)
+{
+	struct thermal_zone_device *tz;
+	int ret = 0;
+
+	mutex_lock(&thermal_list_lock);
+	list_for_each_entry(tz, &thermal_tz_list, node) {
+		ret = cb(tz, data);
+		if (ret)
+			break;
+	}
+	mutex_unlock(&thermal_list_lock);
+
+	return ret;
+}
+
 void thermal_zone_device_unbind_exception(struct thermal_zone_device *tz,
 					  const char *cdev_type, size_t size)
 {
* Unmerged path drivers/thermal/thermal_core.h
