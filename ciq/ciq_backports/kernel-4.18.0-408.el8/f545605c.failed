selftests/vm: minor cleanup: Makefile and gup_test.c

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-408.el8
commit-author John Hubbard <jhubbard@nvidia.com>
commit f545605cc08e1f1820b4c8748689e7c6d4365d99
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-408.el8/f545605c.failed

A few cleanups that don't deserve separate patches, but that also should
not clutter up other functional changes:

1. Remove an unnecessary #include <prctl.h>

2. Restore the sorted order of TEST_GEN_FILES.

3. Add -lpthread to the common LDLIBS, as it is harmless and several
   tests use it. This gets rid of one special rule already.

Link: https://lkml.kernel.org/r/20201026064021.3545418-5-jhubbard@nvidia.com
	Signed-off-by: John Hubbard <jhubbard@nvidia.com>
	Cc: Jérôme Glisse <jglisse@redhat.com>
	Cc: Jonathan Corbet <corbet@lwn.net>
	Cc: Ralph Campbell <rcampbell@nvidia.com>
	Cc: Shuah Khan <shuah@kernel.org>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit f545605cc08e1f1820b4c8748689e7c6d4365d99)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/testing/selftests/vm/Makefile
diff --cc tools/testing/selftests/vm/Makefile
index af96f445fd87,e640d8145cbd..000000000000
--- a/tools/testing/selftests/vm/Makefile
+++ b/tools/testing/selftests/vm/Makefile
@@@ -19,13 -21,15 +19,14 @@@
  MAKEFLAGS += --no-builtin-rules
  
  CFLAGS = -Wall -I ../../../../usr/include $(EXTRA_CFLAGS)
- LDLIBS = -lrt
+ LDLIBS = -lrt -lpthread
  TEST_GEN_FILES = compaction_test
 -TEST_GEN_FILES += gup_test
 -TEST_GEN_FILES += hmm-tests
 +TEST_GEN_FILES += gup_benchmark
  TEST_GEN_FILES += hugepage-mmap
  TEST_GEN_FILES += hugepage-shm
- TEST_GEN_FILES += map_hugetlb
+ TEST_GEN_FILES += khugepaged
  TEST_GEN_FILES += map_fixed_noreplace
+ TEST_GEN_FILES += map_hugetlb
  TEST_GEN_FILES += map_populate
  TEST_GEN_FILES += mlock-random-test
  TEST_GEN_FILES += mlock2-tests
@@@ -33,7 -38,36 +34,40 @@@ TEST_GEN_FILES += on-fault-limi
  TEST_GEN_FILES += thuge-gen
  TEST_GEN_FILES += transhuge-stress
  TEST_GEN_FILES += userfaultfd
++<<<<<<< HEAD
 +TEST_GEN_FILES += khugepaged
++=======
+ 
+ ifeq ($(ARCH),x86_64)
+ CAN_BUILD_I386 := $(shell ./../x86/check_cc.sh $(CC) ../x86/trivial_32bit_program.c -m32)
+ CAN_BUILD_X86_64 := $(shell ./../x86/check_cc.sh $(CC) ../x86/trivial_64bit_program.c)
+ CAN_BUILD_WITH_NOPIE := $(shell ./../x86/check_cc.sh $(CC) ../x86/trivial_program.c -no-pie)
+ 
+ TARGETS := protection_keys
+ BINARIES_32 := $(TARGETS:%=%_32)
+ BINARIES_64 := $(TARGETS:%=%_64)
+ 
+ ifeq ($(CAN_BUILD_WITH_NOPIE),1)
+ CFLAGS += -no-pie
+ endif
+ 
+ ifeq ($(CAN_BUILD_I386),1)
+ TEST_GEN_FILES += $(BINARIES_32)
+ endif
+ 
+ ifeq ($(CAN_BUILD_X86_64),1)
+ TEST_GEN_FILES += $(BINARIES_64)
+ endif
+ else
+ 
+ ifneq (,$(findstring $(ARCH),powerpc))
+ TEST_GEN_FILES += protection_keys
+ endif
+ 
+ endif
+ 
+ ifneq (,$(filter $(MACHINE),arm64 ia64 mips64 parisc64 ppc64 ppc64le riscv64 s390x sh64 sparc64 x86_64))
++>>>>>>> f545605cc08e (selftests/vm: minor cleanup: Makefile and gup_test.c)
  TEST_GEN_FILES += va_128TBswitch
  TEST_GEN_FILES += virtual_address_range
  TEST_GEN_FILES += write_to_hugetlbfs
@@@ -45,6 -80,57 +79,59 @@@ TEST_FILES := test_vmalloc.s
  KSFT_KHDR_INSTALL := 1
  include ../lib.mk
  
++<<<<<<< HEAD
 +$(OUTPUT)/userfaultfd: LDLIBS += -lpthread
++=======
+ $(OUTPUT)/hmm-tests: LDLIBS += -lhugetlbfs
+ 
+ ifeq ($(ARCH),x86_64)
+ BINARIES_32 := $(patsubst %,$(OUTPUT)/%,$(BINARIES_32))
+ BINARIES_64 := $(patsubst %,$(OUTPUT)/%,$(BINARIES_64))
+ 
+ define gen-target-rule-32
+ $(1) $(1)_32: $(OUTPUT)/$(1)_32
+ .PHONY: $(1) $(1)_32
+ endef
+ 
+ define gen-target-rule-64
+ $(1) $(1)_64: $(OUTPUT)/$(1)_64
+ .PHONY: $(1) $(1)_64
+ endef
+ 
+ ifeq ($(CAN_BUILD_I386),1)
+ $(BINARIES_32): CFLAGS += -m32
+ $(BINARIES_32): LDLIBS += -lrt -ldl -lm
+ $(BINARIES_32): %_32: %.c
+ 	$(CC) $(CFLAGS) $(EXTRA_CFLAGS) $(notdir $^) $(LDLIBS) -o $@
+ $(foreach t,$(TARGETS),$(eval $(call gen-target-rule-32,$(t))))
+ endif
+ 
+ ifeq ($(CAN_BUILD_X86_64),1)
+ $(BINARIES_64): CFLAGS += -m64
+ $(BINARIES_64): LDLIBS += -lrt -ldl
+ $(BINARIES_64): %_64: %.c
+ 	$(CC) $(CFLAGS) $(EXTRA_CFLAGS) $(notdir $^) $(LDLIBS) -o $@
+ $(foreach t,$(TARGETS),$(eval $(call gen-target-rule-64,$(t))))
+ endif
+ 
+ # x86_64 users should be encouraged to install 32-bit libraries
+ ifeq ($(CAN_BUILD_I386)$(CAN_BUILD_X86_64),01)
+ all: warn_32bit_failure
+ 
+ warn_32bit_failure:
+ 	@echo "Warning: you seem to have a broken 32-bit build" 2>&1;		\
+ 	echo  "environment. This will reduce test coverage of 64-bit" 2>&1;	\
+ 	echo  "kernels. If you are using a Debian-like distribution," 2>&1;	\
+ 	echo  "try:"; 2>&1;							\
+ 	echo  "";								\
+ 	echo  "  apt-get install gcc-multilib libc6-i386 libc6-dev-i386";	\
+ 	echo  "";								\
+ 	echo  "If you are using a Fedora-like distribution, try:";		\
+ 	echo  "";								\
+ 	echo  "  yum install glibc-devel.*i686";				\
+ 	exit 0;
+ endif
+ endif
++>>>>>>> f545605cc08e (selftests/vm: minor cleanup: Makefile and gup_test.c)
  
  $(OUTPUT)/mlock-random-test: LDLIBS += -lcap
 -
 -$(OUTPUT)/gup_test: ../../../../mm/gup_test.h
* Unmerged path tools/testing/selftests/vm/Makefile
diff --git a/tools/testing/selftests/vm/gup_benchmark.c b/tools/testing/selftests/vm/gup_benchmark.c
index 31f8bb086907..e504f29f994b 100644
--- a/tools/testing/selftests/vm/gup_benchmark.c
+++ b/tools/testing/selftests/vm/gup_benchmark.c
@@ -5,7 +5,6 @@
 
 #include <sys/ioctl.h>
 #include <sys/mman.h>
-#include <sys/prctl.h>
 #include <sys/stat.h>
 #include <sys/types.h>
 
