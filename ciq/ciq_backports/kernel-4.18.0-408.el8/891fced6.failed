dm: simplify the single bio fast path in __send_duplicate_bios

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-408.el8
commit-author Christoph Hellwig <hch@lst.de>
commit 891fced644a7529bfd4b1436b2341527ce8f68ad
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-408.el8/891fced6.failed

Most targets just need a single flush bio.  Open code that case in
__send_duplicate_bios without the need to add the bio to a list.

	Signed-off-by: Christoph Hellwig <hch@lst.de>
	Reviewed-by: Mike Snitzer <snitzer@redhat.com>
Link: https://lore.kernel.org/r/20220202160109.108149-9-hch@lst.de
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit 891fced644a7529bfd4b1436b2341527ce8f68ad)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/md/dm.c
diff --cc drivers/md/dm.c
index d626b645f571,78df75f57288..000000000000
--- a/drivers/md/dm.c
+++ b/drivers/md/dm.c
@@@ -1371,23 -1232,17 +1371,26 @@@ static int clone_bio(struct dm_target_i
  }
  
  static void alloc_multiple_bios(struct bio_list *blist, struct clone_info *ci,
 -				struct dm_target *ti, unsigned num_bios,
 -				unsigned *len)
 +				struct dm_target *ti, unsigned num_bios)
  {
 -	struct bio *bio;
 +	struct dm_target_io *tio;
  	int try;
  
++<<<<<<< HEAD
 +	if (!num_bios)
 +		return;
 +
 +	if (num_bios == 1) {
 +		tio = alloc_tio(ci, ti, 0, GFP_NOIO);
 +		bio_list_add(blist, &tio->clone);
 +		return;
 +	}
 +
++=======
++>>>>>>> 891fced644a7 (dm: simplify the single bio fast path in __send_duplicate_bios)
  	for (try = 0; try < 2; try++) {
  		int bio_nr;
 +		struct bio *bio;
  
  		if (try)
  			mutex_lock(&ci->io->md->table_devices_lock);
@@@ -1428,14 -1268,25 +1431,34 @@@ static void __send_duplicate_bios(struc
  				  unsigned num_bios, unsigned *len)
  {
  	struct bio_list blist = BIO_EMPTY_LIST;
 -	struct bio *clone;
 +	struct bio *bio;
 +	struct dm_target_io *tio;
  
++<<<<<<< HEAD
 +	alloc_multiple_bios(&blist, ci, ti, num_bios);
 +
 +	while ((bio = bio_list_pop(&blist))) {
 +		tio = container_of(bio, struct dm_target_io, clone);
 +		(void) __clone_and_map_simple_bio(ci, tio, len);
++=======
+ 	switch (num_bios) {
+ 	case 0:
+ 		break;
+ 	case 1:
+ 		clone = alloc_tio(ci, ti, 0, len, GFP_NOIO);
+ 		if (len)
+ 			bio_setup_sector(clone, ci->sector, *len);
+ 		__map_bio(clone);
+ 		break;
+ 	default:
+ 		alloc_multiple_bios(&blist, ci, ti, num_bios, len);
+ 		while ((clone = bio_list_pop(&blist))) {
+ 			if (len)
+ 				bio_setup_sector(clone, ci->sector, *len);
+ 			__map_bio(clone);
+ 		}
+ 		break;
++>>>>>>> 891fced644a7 (dm: simplify the single bio fast path in __send_duplicate_bios)
  	}
  }
  
* Unmerged path drivers/md/dm.c
