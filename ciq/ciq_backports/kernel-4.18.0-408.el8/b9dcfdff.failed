selftests/vm: use a common gup_test.h

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-408.el8
commit-author John Hubbard <jhubbard@nvidia.com>
commit b9dcfdff8b4b223280015281b5050976c484c80a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-408.el8/b9dcfdff.failed

Avoid the need to copy-paste the gup_test ioctl commands and the struct
gup_test definition, between the kernel and the user space application, by
providing a new header file for these.  This allows easier and safer
adding of new ioctl calls, as well as reducing the overall line count.

Details: The header file has to be able to compile independently, because
of the arguably unfortunate way that the Makefile is written: the Makefile
tries to build all of its prerequisites, when really it should be only
building the .c files, and leaving the other prerequisites (LOCAL_HDRS) as
pure dependencies.

That Makefile limitation is probably not worth fixing, but it explains why
one of the includes had to be moved into the new header file.

Also: simplify the ioctl struct (struct gup_test), by deleting the unused
__expansion[10] field.  This sort of thing is what you might see in a
stable ABI, but this low-level, kernel-developer-oriented selftests/vm
system is very much not subject to ABI stability.  So "expansion" and
"reserved" fields are unnecessary here.

Link: https://lkml.kernel.org/r/20201026064021.3545418-3-jhubbard@nvidia.com
	Signed-off-by: John Hubbard <jhubbard@nvidia.com>
	Cc: Jérôme Glisse <jglisse@redhat.com>
	Cc: Jonathan Corbet <corbet@lwn.net>
	Cc: Ralph Campbell <rcampbell@nvidia.com>
	Cc: Shuah Khan <shuah@kernel.org>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit b9dcfdff8b4b223280015281b5050976c484c80a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	mm/gup_benchmark.c
#	tools/testing/selftests/vm/gup_benchmark.c
diff --cc mm/gup_benchmark.c
index 464cae1fa3ea,4c2d70d88f24..000000000000
--- a/mm/gup_benchmark.c
+++ b/mm/gup_benchmark.c
@@@ -4,22 -4,7 +4,26 @@@
  #include <linux/uaccess.h>
  #include <linux/ktime.h>
  #include <linux/debugfs.h>
++<<<<<<< HEAD:mm/gup_benchmark.c
 +
 +#define GUP_FAST_BENCHMARK	_IOWR('g', 1, struct gup_benchmark)
 +#define GUP_BENCHMARK		_IOWR('g', 2, struct gup_benchmark)
 +#define PIN_FAST_BENCHMARK	_IOWR('g', 3, struct gup_benchmark)
 +#define PIN_BENCHMARK		_IOWR('g', 4, struct gup_benchmark)
 +#define PIN_LONGTERM_BENCHMARK	_IOWR('g', 5, struct gup_benchmark)
 +
 +struct gup_benchmark {
 +	__u64 get_delta_usec;
 +	__u64 put_delta_usec;
 +	__u64 addr;
 +	__u64 size;
 +	__u32 nr_pages_per_call;
 +	__u32 flags;
 +	__u64 expansion[10];	/* For future use */
 +};
++=======
+ #include "gup_test.h"
++>>>>>>> b9dcfdff8b4b (selftests/vm: use a common gup_test.h):mm/gup_test.c
  
  static void put_back_pages(unsigned int cmd, struct page **pages,
  			   unsigned long nr_pages)
diff --cc tools/testing/selftests/vm/gup_benchmark.c
index 31f8bb086907,03f7c4f1beaf..000000000000
--- a/tools/testing/selftests/vm/gup_benchmark.c
+++ b/tools/testing/selftests/vm/gup_benchmark.c
@@@ -14,30 -12,12 +12,36 @@@
  #define MB (1UL << 20)
  #define PAGE_SIZE sysconf(_SC_PAGESIZE)
  
++<<<<<<< HEAD:tools/testing/selftests/vm/gup_benchmark.c
 +#define GUP_FAST_BENCHMARK	_IOWR('g', 1, struct gup_benchmark)
 +#define GUP_BENCHMARK		_IOWR('g', 2, struct gup_benchmark)
 +
 +/* Similar to above, but use FOLL_PIN instead of FOLL_GET. */
 +#define PIN_FAST_BENCHMARK	_IOWR('g', 3, struct gup_benchmark)
 +#define PIN_BENCHMARK		_IOWR('g', 4, struct gup_benchmark)
 +#define PIN_LONGTERM_BENCHMARK	_IOWR('g', 5, struct gup_benchmark)
 +
 +/* Just the flags we need, copied from mm.h: */
 +#define FOLL_WRITE	0x01	/* check pte is writable */
 +
 +struct gup_benchmark {
 +	__u64 get_delta_usec;
 +	__u64 put_delta_usec;
 +	__u64 addr;
 +	__u64 size;
 +	__u32 nr_pages_per_call;
 +	__u32 flags;
 +	__u64 expansion[10];	/* For future use */
 +};
 +
++=======
+ /* Just the flags we need, copied from mm.h: */
+ #define FOLL_WRITE	0x01	/* check pte is writable */
+ 
++>>>>>>> b9dcfdff8b4b (selftests/vm: use a common gup_test.h):tools/testing/selftests/vm/gup_test.c
  int main(int argc, char **argv)
  {
 -	struct gup_test gup;
 +	struct gup_benchmark gup;
  	unsigned long size = 128 * MB;
  	int i, fd, filed, opt, nr_pages = 1, thp = -1, repeats = 1, write = 0;
  	int cmd = GUP_FAST_BENCHMARK, flags = MAP_PRIVATE;
* Unmerged path mm/gup_benchmark.c
diff --git a/mm/gup_test.h b/mm/gup_test.h
new file mode 100644
index 000000000000..931c2f3f477a
--- /dev/null
+++ b/mm/gup_test.h
@@ -0,0 +1,22 @@
+/* SPDX-License-Identifier: GPL-2.0-or-later */
+#ifndef __GUP_TEST_H
+#define __GUP_TEST_H
+
+#include <linux/types.h>
+
+#define GUP_FAST_BENCHMARK	_IOWR('g', 1, struct gup_test)
+#define GUP_BENCHMARK		_IOWR('g', 2, struct gup_test)
+#define PIN_FAST_BENCHMARK	_IOWR('g', 3, struct gup_test)
+#define PIN_BENCHMARK		_IOWR('g', 4, struct gup_test)
+#define PIN_LONGTERM_BENCHMARK	_IOWR('g', 5, struct gup_test)
+
+struct gup_test {
+	__u64 get_delta_usec;
+	__u64 put_delta_usec;
+	__u64 addr;
+	__u64 size;
+	__u32 nr_pages_per_call;
+	__u32 flags;
+};
+
+#endif	/* __GUP_TEST_H */
diff --git a/tools/testing/selftests/vm/Makefile b/tools/testing/selftests/vm/Makefile
index 61d353aabf85..f2001ef4dc90 100644
--- a/tools/testing/selftests/vm/Makefile
+++ b/tools/testing/selftests/vm/Makefile
@@ -48,3 +48,5 @@ include ../lib.mk
 $(OUTPUT)/userfaultfd: LDLIBS += -lpthread
 
 $(OUTPUT)/mlock-random-test: LDLIBS += -lcap
+
+$(OUTPUT)/gup_test: ../../../../mm/gup_test.h
* Unmerged path tools/testing/selftests/vm/gup_benchmark.c
