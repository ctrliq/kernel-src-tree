KVM: x86/mmu: Rename TDP MMU functions that handle shadow pages

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-408.el8
commit-author David Matlack <dmatlack@google.com>
commit c298a30c2821cb03274dfc81840f7bd3eb59d5a3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-408.el8/c298a30c.failed

Rename 3 functions in tdp_mmu.c that handle shadow pages:

  alloc_tdp_mmu_page()  -> tdp_mmu_alloc_sp()
  tdp_mmu_link_page()   -> tdp_mmu_link_sp()
  tdp_mmu_unlink_page() -> tdp_mmu_unlink_sp()

These changed make tdp_mmu a consistent prefix before the verb in the
function name, and make it more clear that these functions deal with
kvm_mmu_page structs rather than struct pages.

One could argue that "shadow page" is the wrong term for a page table in
the TDP MMU since it never actually shadows a guest page table.
However, "shadow page" (or "sp" for short) has evolved to become the
standard term in KVM when referring to a kvm_mmu_page struct, and its
associated page table and other metadata, regardless of whether the page
table shadows a guest page table. So this commit just makes the TDP MMU
more consistent with the rest of KVM.

No functional change intended.

	Signed-off-by: David Matlack <dmatlack@google.com>
Message-Id: <20220119230739.2234394-6-dmatlack@google.com>
	Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
(cherry picked from commit c298a30c2821cb03274dfc81840f7bd3eb59d5a3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kvm/mmu/tdp_mmu.c
diff --cc arch/x86/kvm/mmu/tdp_mmu.c
index 81d8077f43f3,349d761a9aed..000000000000
--- a/arch/x86/kvm/mmu/tdp_mmu.c
+++ b/arch/x86/kvm/mmu/tdp_mmu.c
@@@ -255,14 -276,10 +255,19 @@@ static void handle_changed_spte_dirty_l
   * @account_nx: This page replaces a NX large page and should be marked for
   *		eventual reclaim.
   */
++<<<<<<< HEAD
 +static void tdp_mmu_link_page(struct kvm *kvm, struct kvm_mmu_page *sp,
 +			      bool shared, bool account_nx)
++=======
+ static void tdp_mmu_link_sp(struct kvm *kvm, struct kvm_mmu_page *sp,
+ 			    bool account_nx)
++>>>>>>> c298a30c2821 (KVM: x86/mmu: Rename TDP MMU functions that handle shadow pages)
  {
 -	spin_lock(&kvm->arch.tdp_mmu_pages_lock);
 +	if (shared)
 +		spin_lock(&kvm->arch.tdp_mmu_pages_lock);
 +	else
 +		lockdep_assert_held_write(&kvm->mmu_lock);
 +
  	list_add(&sp->link, &kvm->arch.tdp_mmu_pages);
  	if (account_nx)
  		account_huge_nx_page(kvm, sp);
@@@ -994,11 -1040,10 +999,18 @@@ int kvm_tdp_mmu_map(struct kvm_vcpu *vc
  			new_spte = make_nonleaf_spte(child_pt,
  						     !shadow_accessed_mask);
  
++<<<<<<< HEAD
 +			if (tdp_mmu_set_spte_atomic(vcpu->kvm, &iter,
 +						    new_spte)) {
 +				tdp_mmu_link_page(vcpu->kvm, sp, true,
 +						  huge_page_disallowed &&
 +						  req_level >= iter.level);
++=======
+ 			if (!tdp_mmu_set_spte_atomic(vcpu->kvm, &iter, new_spte)) {
+ 				tdp_mmu_link_sp(vcpu->kvm, sp,
+ 						fault->huge_page_disallowed &&
+ 						fault->req_level >= iter.level);
++>>>>>>> c298a30c2821 (KVM: x86/mmu: Rename TDP MMU functions that handle shadow pages)
  
  				trace_kvm_mmu_get_page(sp, true);
  			} else {
* Unmerged path arch/x86/kvm/mmu/tdp_mmu.c
