ext4: make ext_debug() implementation to use pr_debug()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-408.el8
commit-author Ritesh Harjani <riteshh@linux.ibm.com>
commit 70aa1554b01474ab08d08e5a18b0215a7ff1e8dc
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-408.el8/70aa1554.failed

ext_debug() msgs could be helpful, provided those could be enabled
without recompiling kernel and also if we could selectively enable
only required prints for case by case debugging.

So make ext_debug() implementation use pr_debug().
Also change ext_debug() to be defined with CONFIG_EXT4_DEBUG.
So EXT_DEBUG macro now mostly remain for below 3 functions.
ext4_ext_show_path/leaf/move() (whose print msgs use ext_debug()
which again could be dynamically enabled using pr_debug())

This also changes the ext_debug() to take inode as a parameter
to add inode no. in all of it's msgs.
Prints additional info like process name / pid, superblock id etc.
This also removes any explicit function names passed in ext_debug().
Since ext_debug() on it's own prints file, func and line no.

	Signed-off-by: Ritesh Harjani <riteshh@linux.ibm.com>
Link: https://lore.kernel.org/r/d31dc189b0aeda9384fe7665e36da7cd8c61571f.1589086800.git.riteshh@linux.ibm.com
	Signed-off-by: Theodore Ts'o <tytso@mit.edu>
(cherry picked from commit 70aa1554b01474ab08d08e5a18b0215a7ff1e8dc)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/ext4/extents.c
#	fs/ext4/inode.c
diff --cc fs/ext4/extents.c
index 25af762287ee,969f4c030cf0..000000000000
--- a/fs/ext4/extents.c
+++ b/fs/ext4/extents.c
@@@ -3144,12 -2947,12 +3145,12 @@@ again
  		if (ext4_ext_more_to_rm(path + i)) {
  			struct buffer_head *bh;
  			/* go to the next level */
- 			ext_debug("move to level %d (block %llu)\n",
+ 			ext_debug(inode, "move to level %d (block %llu)\n",
  				  i + 1, ext4_idx_pblock(path[i].p_idx));
  			memset(path + i + 1, 0, sizeof(*path));
 -			bh = read_extent_tree_block(inode,
 -				ext4_idx_pblock(path[i].p_idx), depth - i - 1,
 -				EXT4_EX_NOCACHE);
 +			bh = read_extent_tree_block(inode, path[i].p_idx,
 +						    depth - i - 1,
 +						    EXT4_EX_NOCACHE);
  			if (IS_ERR(bh)) {
  				/* should we reset i_size? */
  				err = PTR_ERR(bh);
@@@ -4337,10 -4051,8 +4332,9 @@@ int ext4_ext_map_blocks(handle_t *handl
  	unsigned int allocated_clusters = 0;
  	struct ext4_allocation_request ar;
  	ext4_lblk_t cluster_offset;
 +	bool map_from_cluster = false;
  
- 	ext_debug("blocks %u/%u requested for inode %lu\n",
- 		  map->m_lblk, map->m_len, inode->i_ino);
+ 	ext_debug(inode, "blocks %u/%u requested\n", map->m_lblk, map->m_len);
  	trace_ext4_ext_map_blocks_enter(inode, map->m_lblk, map->m_len, flags);
  
  	/* find extent for this block */
@@@ -4527,11 -4238,10 +4521,16 @@@
  	newblock = ext4_mb_new_blocks(handle, &ar, &err);
  	if (!newblock)
  		goto out2;
 +	ext_debug("allocate new block: goal %llu, found %llu/%u\n",
 +		  ar.goal, newblock, allocated);
 +	free_on_err = 1;
  	allocated_clusters = ar.len;
  	ar.len = EXT4_C2B(sbi, ar.len) - offset;
++<<<<<<< HEAD
++=======
+ 	ext_debug(inode, "allocate new block: goal %llu, found %llu/%u, requested %u\n",
+ 		  ar.goal, newblock, ar.len, allocated);
++>>>>>>> 70aa1554b014 (ext4: make ext_debug() implementation to use pr_debug())
  	if (ar.len > allocated)
  		ar.len = allocated;
  
diff --cc fs/ext4/inode.c
index 17066a31602f,e7bf9388538b..000000000000
--- a/fs/ext4/inode.c
+++ b/fs/ext4/inode.c
@@@ -746,6 -731,9 +745,12 @@@ out_sem
  				return ret;
  		}
  	}
++<<<<<<< HEAD
++=======
+ 
+ 	if (retval < 0)
+ 		ext_debug(inode, "failed with err %d\n", retval);
++>>>>>>> 70aa1554b014 (ext4: make ext_debug() implementation to use pr_debug())
  	return retval;
  }
  
diff --git a/fs/ext4/Kconfig b/fs/ext4/Kconfig
index 0ebc643aa7af..7bc7be4e4015 100644
--- a/fs/ext4/Kconfig
+++ b/fs/ext4/Kconfig
@@ -118,7 +118,7 @@ config EXT4_DEBUG
 	  Enables run-time debugging support for the ext4 filesystem.
 
 	  If you select Y here, then you will be able to turn on debugging
-	  using dynamic debug control for mb_debug() msgs.
+	  using dynamic debug control for mb_debug() / ext_debug() msgs.
 
 config EXT4_KUNIT_TESTS
 	tristate "KUnit tests for ext4" if !KUNIT_ALL_TESTS
diff --git a/fs/ext4/ext4.h b/fs/ext4/ext4.h
index ff1b2962c1b7..930e8fd348f2 100644
--- a/fs/ext4/ext4.h
+++ b/fs/ext4/ext4.h
@@ -78,14 +78,22 @@
 #define ext4_debug(fmt, ...)	no_printk(fmt, ##__VA_ARGS__)
 #endif
 
+ /*
+  * Turn on EXT_DEBUG to enable ext4_ext_show_path/leaf/move in extents.c
+  */
+#define EXT_DEBUG__
+
 /*
- * Turn on EXT_DEBUG to get lots of info about extents operations.
+ * Dynamic printk for controlled extents debugging.
  */
-#define EXT_DEBUG__
-#ifdef EXT_DEBUG
-#define ext_debug(fmt, ...)	printk(fmt, ##__VA_ARGS__)
+#ifdef CONFIG_EXT4_DEBUG
+#define ext_debug(ino, fmt, ...)					\
+	pr_debug("[%s/%d] EXT4-fs (%s): ino %lu: (%s, %d): %s:" fmt,	\
+		 current->comm, task_pid_nr(current),			\
+		 ino->i_sb->s_id, ino->i_ino, __FILE__, __LINE__,	\
+		 __func__, ##__VA_ARGS__)
 #else
-#define ext_debug(fmt, ...)	no_printk(fmt, ##__VA_ARGS__)
+#define ext_debug(ino, fmt, ...)	no_printk(fmt, ##__VA_ARGS__)
 #endif
 
 /* data type for block offset of block group */
* Unmerged path fs/ext4/extents.c
* Unmerged path fs/ext4/inode.c
