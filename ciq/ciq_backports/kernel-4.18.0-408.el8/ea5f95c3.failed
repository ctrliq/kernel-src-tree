selftests/vm/pkeys: fix assertion in pkey_disable_set/clear()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-408.el8
commit-author Ram Pai <linuxram@us.ibm.com>
commit ea5f95c3d6bb117abfe41fd2612f3213cf22b609
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-408.el8/ea5f95c3.failed

In some cases, a pkey's bits need not necessarily change in a way that the
value of the pkey register increases when performing a pkey_disable_set()
or decreases when performing a pkey_disable_clear().

For example, on powerpc, if a pkey's current state is PKEY_DISABLE_ACCESS
and we perform a pkey_write_disable() on it, the bits still remain the
same.  We will observe something similar when the pkey's current state is
0 and a pkey_access_enable() is performed on it.

Either case would cause some assertions to fail.  This fixes the problem.

	Signed-off-by: Ram Pai <linuxram@us.ibm.com>
	Signed-off-by: Sandipan Das <sandipan@linux.ibm.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Acked-by: Dave Hansen <dave.hansen@intel.com>
	Cc: Dave Hansen <dave.hansen@intel.com>
	Cc: Florian Weimer <fweimer@redhat.com>
	Cc: "Desnes A. Nunes do Rosario" <desnesn@linux.vnet.ibm.com>
	Cc: Ingo Molnar <mingo@kernel.org>
	Cc: Thiago Jung Bauermann <bauerman@linux.ibm.com>
	Cc: "Aneesh Kumar K.V" <aneesh.kumar@linux.ibm.com>
	Cc: Michael Ellerman <mpe@ellerman.id.au>
	Cc: Michal Hocko <mhocko@kernel.org>
	Cc: Michal Suchanek <msuchanek@suse.de>
	Cc: Shuah Khan <shuah@kernel.org>
Link: http://lkml.kernel.org/r/8240665131e43fc93eed4eea8194676c1ea39a7f.1585646528.git.sandipan@linux.ibm.com
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit ea5f95c3d6bb117abfe41fd2612f3213cf22b609)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/testing/selftests/x86/protection_keys.c
diff --cc tools/testing/selftests/x86/protection_keys.c
index 5d546dcdbc80,7fd52d5c4bfd..000000000000
--- a/tools/testing/selftests/x86/protection_keys.c
+++ b/tools/testing/selftests/x86/protection_keys.c
@@@ -475,9 -397,10 +475,13 @@@ void pkey_disable_set(int pkey, int fla
  	dprintf1("%s(%d) hw_pkey_get(%d): %x\n", __func__,
  			pkey, pkey, pkey_rights);
  
 -	dprintf1("%s(%d) pkey_reg: 0x%016llx\n",
 -		__func__, pkey, read_pkey_reg());
 +	dprintf1("%s(%d) pkru: 0x%x\n", __func__, pkey, rdpkru());
  	if (flags)
++<<<<<<< HEAD:tools/testing/selftests/x86/protection_keys.c
 +		pkey_assert(rdpkru() > orig_pkru);
++=======
+ 		pkey_assert(read_pkey_reg() >= orig_pkey_reg);
++>>>>>>> ea5f95c3d6bb (selftests/vm/pkeys: fix assertion in pkey_disable_set/clear()):tools/testing/selftests/vm/protection_keys.c
  	dprintf1("END<---%s(%d, 0x%x)\n", __func__,
  		pkey, flags);
  }
@@@ -506,9 -428,10 +510,13 @@@ void pkey_disable_clear(int pkey, int f
  	dprintf1("%s(%d) hw_pkey_get(%d): %x\n", __func__,
  			pkey, pkey, pkey_rights);
  
 -	dprintf1("%s(%d) pkey_reg: 0x%016llx\n", __func__,
 -			pkey, read_pkey_reg());
 +	dprintf1("%s(%d) pkru: 0x%x\n", __func__, pkey, rdpkru());
  	if (flags)
++<<<<<<< HEAD:tools/testing/selftests/x86/protection_keys.c
 +		assert(rdpkru() > orig_pkru);
++=======
+ 		assert(read_pkey_reg() <= orig_pkey_reg);
++>>>>>>> ea5f95c3d6bb (selftests/vm/pkeys: fix assertion in pkey_disable_set/clear()):tools/testing/selftests/vm/protection_keys.c
  }
  
  void pkey_write_allow(int pkey)
* Unmerged path tools/testing/selftests/x86/protection_keys.c
