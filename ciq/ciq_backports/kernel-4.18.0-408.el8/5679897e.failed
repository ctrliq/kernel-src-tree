vfs: make sync_filesystem return errors from ->sync_fs

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-408.el8
commit-author Darrick J. Wong <djwong@kernel.org>
commit 5679897eb104cec9e99609c3f045a0c20603da4c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-408.el8/5679897e.failed

Strangely, sync_filesystem ignores the return code from the ->sync_fs
call, which means that syscalls like syncfs(2) never see the error.
This doesn't seem right, so fix that.

	Signed-off-by: Darrick J. Wong <djwong@kernel.org>
	Reviewed-by: Jan Kara <jack@suse.cz>
	Reviewed-by: Christoph Hellwig <hch@lst.de>
	Acked-by: Christian Brauner <brauner@kernel.org>
(cherry picked from commit 5679897eb104cec9e99609c3f045a0c20603da4c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/sync.c
diff --cc fs/sync.c
index b8a2c675f4c9,c7690016453e..000000000000
--- a/fs/sync.c
+++ b/fs/sync.c
@@@ -61,10 -43,31 +61,38 @@@ int sync_filesystem(struct super_block 
  	if (sb_rdonly(sb))
  		return 0;
  
++<<<<<<< HEAD
 +	ret = __sync_filesystem(sb, 0);
 +	if (ret < 0)
 +		return ret;
 +	return __sync_filesystem(sb, 1);
++=======
+ 	/*
+ 	 * Do the filesystem syncing work.  For simple filesystems
+ 	 * writeback_inodes_sb(sb) just dirties buffers with inodes so we have
+ 	 * to submit I/O for these buffers via sync_blockdev().  This also
+ 	 * speeds up the wait == 1 case since in that case write_inode()
+ 	 * methods call sync_dirty_buffer() and thus effectively write one block
+ 	 * at a time.
+ 	 */
+ 	writeback_inodes_sb(sb, WB_REASON_SYNC);
+ 	if (sb->s_op->sync_fs) {
+ 		ret = sb->s_op->sync_fs(sb, 0);
+ 		if (ret)
+ 			return ret;
+ 	}
+ 	ret = sync_blockdev_nowait(sb->s_bdev);
+ 	if (ret)
+ 		return ret;
+ 
+ 	sync_inodes_sb(sb);
+ 	if (sb->s_op->sync_fs) {
+ 		ret = sb->s_op->sync_fs(sb, 1);
+ 		if (ret)
+ 			return ret;
+ 	}
+ 	return sync_blockdev(sb->s_bdev);
++>>>>>>> 5679897eb104 (vfs: make sync_filesystem return errors from ->sync_fs)
  }
  EXPORT_SYMBOL(sync_filesystem);
  
* Unmerged path fs/sync.c
