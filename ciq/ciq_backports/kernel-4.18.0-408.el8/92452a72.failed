dmaengine: idxd: set defaults for wq configs

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-408.el8
commit-author Dave Jiang <dave.jiang@intel.com>
commit 92452a72ebdf1225aa37690d3648f2af6d0b4fca
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-408.el8/92452a72.failed

Add default values for wq size, max_xfer_size and max_batch_size. These
values should provide a general guidance for the wq configuration when
the user does not specify any specific values.

	Signed-off-by: Dave Jiang <dave.jiang@intel.com>
Link: https://lore.kernel.org/r/163528473483.3926048.7950067926287180976.stgit@djiang5-desk3.ch.intel.com
	Signed-off-by: Vinod Koul <vkoul@kernel.org>
(cherry picked from commit 92452a72ebdf1225aa37690d3648f2af6d0b4fca)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/dma/idxd/device.c
#	drivers/dma/idxd/init.c
diff --cc drivers/dma/idxd/device.c
index eadb0129f3b6,36e213a8108d..000000000000
--- a/drivers/dma/idxd/device.c
+++ b/drivers/dma/idxd/device.c
@@@ -825,11 -847,6 +830,14 @@@ static int idxd_wq_config_write(struct 
  	/* byte 0-3 */
  	wq->wqcfg->wq_size = wq->size;
  
++<<<<<<< HEAD
 +	if (wq->size == 0) {
 +		dev_warn(dev, "Incorrect work queue size: 0\n");
 +		return -EINVAL;
 +	}
 +
++=======
++>>>>>>> 92452a72ebdf (dmaengine: idxd: set defaults for wq configs)
  	/* bytes 4-7 */
  	wq->wqcfg->wq_thresh = wq->threshold;
  
@@@ -957,10 -992,9 +965,8 @@@ static int idxd_wqs_setup(struct idxd_d
  
  		if (!wq->group)
  			continue;
- 		if (!wq->size)
- 			continue;
  
  		if (wq_shared(wq) && !device_swq_supported(idxd)) {
 -			idxd->cmd_status = IDXD_SCMD_WQ_NO_SWQ_SUPPORT;
  			dev_warn(dev, "No shared wq support but configured.\n");
  			return -EINVAL;
  		}
diff --cc drivers/dma/idxd/init.c
index b9299e45c20d,94ecd4bf0f0e..000000000000
--- a/drivers/dma/idxd/init.c
+++ b/drivers/dma/idxd/init.c
@@@ -233,11 -245,12 +233,17 @@@ static int idxd_setup_wqs(struct idxd_d
  		mutex_init(&wq->wq_lock);
  		init_waitqueue_head(&wq->err_queue);
  		init_completion(&wq->wq_dead);
++<<<<<<< HEAD
 +		wq->max_xfer_bytes = idxd->max_xfer_bytes;
 +		wq->max_batch_size = idxd->max_batch_size;
++=======
+ 		init_completion(&wq->wq_resurrect);
+ 		wq->max_xfer_bytes = WQ_DEFAULT_MAX_XFER;
+ 		wq->max_batch_size = WQ_DEFAULT_MAX_BATCH;
++>>>>>>> 92452a72ebdf (dmaengine: idxd: set defaults for wq configs)
  		wq->wqcfg = kzalloc_node(idxd->wqcfg_size, GFP_KERNEL, dev_to_node(dev));
  		if (!wq->wqcfg) {
 -			put_device(conf_dev);
 +			put_device(&wq->conf_dev);
  			rc = -ENOMEM;
  			goto err;
  		}
* Unmerged path drivers/dma/idxd/device.c
diff --git a/drivers/dma/idxd/idxd.h b/drivers/dma/idxd/idxd.h
index 03dc70e1f4d4..7cda94bc3081 100644
--- a/drivers/dma/idxd/idxd.h
+++ b/drivers/dma/idxd/idxd.h
@@ -121,6 +121,10 @@ struct idxd_cdev {
 #define WQ_NAME_SIZE   1024
 #define WQ_TYPE_SIZE   10
 
+#define WQ_DEFAULT_QUEUE_DEPTH		16
+#define WQ_DEFAULT_MAX_XFER		SZ_2M
+#define WQ_DEFAULT_MAX_BATCH		32
+
 enum idxd_op_type {
 	IDXD_OP_BLOCK = 0,
 	IDXD_OP_NONBLOCK = 1,
* Unmerged path drivers/dma/idxd/init.c
