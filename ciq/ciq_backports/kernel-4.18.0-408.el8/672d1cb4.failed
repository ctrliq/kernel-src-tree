scsi: lpfc: Protect memory leak for NPIV ports sending PLOGI_RJT

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-408.el8
commit-author James Smart <jsmart2021@gmail.com>
commit 672d1cb40551ea9c95efad43ab6d45e4ab4e015f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-408.el8/672d1cb4.failed

There is a potential memory leak in lpfc_ignore_els_cmpl() and
lpfc_els_rsp_reject() that was allocated from NPIV PLOGI_RJT
(lpfc_rcv_plogi()'s login_mbox).

Check if cmdiocb->context_un.mbox was allocated in lpfc_ignore_els_cmpl(),
and then free it back to phba->mbox_mem_pool along with mbox->ctx_buf for
service parameters.

For lpfc_els_rsp_reject() failure, free both the ctx_buf for service
parameters and the login_mbox.

Link: https://lore.kernel.org/r/20220412222008.126521-10-jsmart2021@gmail.com
Co-developed-by: Justin Tee <justin.tee@broadcom.com>
	Signed-off-by: Justin Tee <justin.tee@broadcom.com>
	Signed-off-by: James Smart <jsmart2021@gmail.com>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit 672d1cb40551ea9c95efad43ab6d45e4ab4e015f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/lpfc/lpfc_sli.c
diff --cc drivers/scsi/lpfc/lpfc_sli.c
index c511fa9d4f38,ca7766940b4e..000000000000
--- a/drivers/scsi/lpfc/lpfc_sli.c
+++ b/drivers/scsi/lpfc/lpfc_sli.c
@@@ -12312,7 -12068,36 +12312,40 @@@ lpfc_ignore_els_cmpl(struct lpfc_hba *p
  		     struct lpfc_iocbq *rspiocb)
  {
  	struct lpfc_nodelist *ndlp = NULL;
++<<<<<<< HEAD
 +	IOCB_t *irsp = &rspiocb->iocb;
++=======
+ 	IOCB_t *irsp;
+ 	LPFC_MBOXQ_t *mbox;
+ 	struct lpfc_dmabuf *mp;
+ 	u32 ulp_command, ulp_status, ulp_word4, iotag;
+ 
+ 	ulp_command = get_job_cmnd(phba, cmdiocb);
+ 	ulp_status = get_job_ulpstatus(phba, rspiocb);
+ 	ulp_word4 = get_job_word4(phba, rspiocb);
+ 
+ 	if (phba->sli_rev == LPFC_SLI_REV4) {
+ 		iotag = get_wqe_reqtag(cmdiocb);
+ 	} else {
+ 		irsp = &rspiocb->iocb;
+ 		iotag = irsp->ulpIoTag;
+ 
+ 		/* It is possible a PLOGI_RJT for NPIV ports to get aborted.
+ 		 * The MBX_REG_LOGIN64 mbox command is freed back to the
+ 		 * mbox_mem_pool here.
+ 		 */
+ 		if (cmdiocb->context_un.mbox) {
+ 			mbox = cmdiocb->context_un.mbox;
+ 			mp = (struct lpfc_dmabuf *)mbox->ctx_buf;
+ 			if (mp) {
+ 				lpfc_mbuf_free(phba, mp->virt, mp->phys);
+ 				kfree(mp);
+ 			}
+ 			mempool_free(mbox, phba->mbox_mem_pool);
+ 			cmdiocb->context_un.mbox = NULL;
+ 		}
+ 	}
++>>>>>>> 672d1cb40551 (scsi: lpfc: Protect memory leak for NPIV ports sending PLOGI_RJT)
  
  	/* ELS cmd tag <ulpIoTag> completes */
  	lpfc_printf_log(phba, KERN_INFO, LOG_ELS,
diff --git a/drivers/scsi/lpfc/lpfc_nportdisc.c b/drivers/scsi/lpfc/lpfc_nportdisc.c
index 6e34b7fbc91e..809b47e996d2 100644
--- a/drivers/scsi/lpfc/lpfc_nportdisc.c
+++ b/drivers/scsi/lpfc/lpfc_nportdisc.c
@@ -594,9 +594,15 @@ lpfc_rcv_plogi(struct lpfc_vport *vport, struct lpfc_nodelist *ndlp,
 		stat.un.b.lsRjtRsnCode = LSRJT_INVALID_CMD;
 		stat.un.b.lsRjtRsnCodeExp = LSEXP_NOTHING_MORE;
 		rc = lpfc_els_rsp_reject(vport, stat.un.lsRjtError, cmdiocb,
-			ndlp, login_mbox);
-		if (rc)
+					 ndlp, login_mbox);
+		if (rc) {
+			mp = (struct lpfc_dmabuf *)login_mbox->ctx_buf;
+			if (mp) {
+				lpfc_mbuf_free(phba, mp->virt, mp->phys);
+				kfree(mp);
+			}
 			mempool_free(login_mbox, phba->mbox_mem_pool);
+		}
 		return 1;
 	}
 
* Unmerged path drivers/scsi/lpfc/lpfc_sli.c
