selftests/vm/pkeys: move some definitions to arch-specific header

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-408.el8
commit-author Thiago Jung Bauermann <bauerman@linux.ibm.com>
commit 53555e2b4d9a29ff93d9bedfe209328cc69806be
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-408.el8/53555e2b.failed

In preparation for multi-arch support, move definitions which
have arch-specific values to x86-specific header.

	Signed-off-by: Ram Pai <linuxram@us.ibm.com>
	Signed-off-by: Thiago Jung Bauermann <bauerman@linux.ibm.com>
	Signed-off-by: Sandipan Das <sandipan@linux.ibm.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Acked-by: Dave Hansen <dave.hansen@intel.com>
	Cc: Dave Hansen <dave.hansen@intel.com>
	Cc: Florian Weimer <fweimer@redhat.com>
	Cc: "Desnes A. Nunes do Rosario" <desnesn@linux.vnet.ibm.com>
	Cc: Ingo Molnar <mingo@kernel.org>
	Cc: "Aneesh Kumar K.V" <aneesh.kumar@linux.ibm.com>
	Cc: Michael Ellerman <mpe@ellerman.id.au>
	Cc: Michal Hocko <mhocko@kernel.org>
	Cc: Michal Suchanek <msuchanek@suse.de>
	Cc: Shuah Khan <shuah@kernel.org>
Link: http://lkml.kernel.org/r/d58eba2930059c8b209eefd6d5b48fe922a5b010.1585646528.git.sandipan@linux.ibm.com
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 53555e2b4d9a29ff93d9bedfe209328cc69806be)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/testing/selftests/x86/pkey-helpers.h
#	tools/testing/selftests/x86/protection_keys.c
diff --cc tools/testing/selftests/x86/pkey-helpers.h
index 254e5436bdd9,3ed2f021bf7a..000000000000
--- a/tools/testing/selftests/x86/pkey-helpers.h
+++ b/tools/testing/selftests/x86/pkey-helpers.h
@@@ -13,8 -13,13 +13,18 @@@
  #include <ucontext.h>
  #include <sys/mman.h>
  
++<<<<<<< HEAD:tools/testing/selftests/x86/pkey-helpers.h
 +#define NR_PKEYS 16
 +#define PKRU_BITS_PER_PKEY 2
++=======
+ /* Define some kernel-like types */
+ #define  u8 uint8_t
+ #define u16 uint16_t
+ #define u32 uint32_t
+ #define u64 uint64_t
+ 
+ #define PTR_ERR_ENOTSUP ((void *)-ENOTSUP)
++>>>>>>> 53555e2b4d9a (selftests/vm/pkeys: move some definitions to arch-specific header):tools/testing/selftests/vm/pkey-helpers.h
  
  #ifndef DEBUG_LEVEL
  #define DEBUG_LEVEL 0
@@@ -53,53 -58,49 +63,79 @@@ static inline void sigsafe_printf(cons
  #define dprintf3(args...) dprintf_level(3, args)
  #define dprintf4(args...) dprintf_level(4, args)
  
++<<<<<<< HEAD:tools/testing/selftests/x86/pkey-helpers.h
 +extern unsigned int shadow_pkru;
 +static inline unsigned int __rdpkru(void)
 +{
 +	unsigned int eax, edx;
 +	unsigned int ecx = 0;
 +	unsigned int pkru;
 +
 +	asm volatile(".byte 0x0f,0x01,0xee\n\t"
 +		     : "=a" (eax), "=d" (edx)
 +		     : "c" (ecx));
 +	pkru = eax;
 +	return pkru;
 +}
++=======
+ extern void abort_hooks(void);
+ #define pkey_assert(condition) do {		\
+ 	if (!(condition)) {			\
+ 		dprintf0("assert() at %s::%d test_nr: %d iteration: %d\n", \
+ 				__FILE__, __LINE__,	\
+ 				test_nr, iteration_nr);	\
+ 		dprintf0("errno at assert: %d", errno);	\
+ 		abort_hooks();			\
+ 		exit(__LINE__);			\
+ 	}					\
+ } while (0)
+ 
+ #if defined(__i386__) || defined(__x86_64__) /* arch */
+ #include "pkey-x86.h"
+ #else /* arch */
+ #error Architecture not supported
+ #endif /* arch */
+ 
+ extern unsigned int shadow_pkey_reg;
++>>>>>>> 53555e2b4d9a (selftests/vm/pkeys: move some definitions to arch-specific header):tools/testing/selftests/vm/pkey-helpers.h
  
 -static inline unsigned int _read_pkey_reg(int line)
 +static inline unsigned int _rdpkru(int line)
  {
 -	unsigned int pkey_reg = __read_pkey_reg();
 +	unsigned int pkru = __rdpkru();
  
 -	dprintf4("read_pkey_reg(line=%d) pkey_reg: %x shadow: %x\n",
 -			line, pkey_reg, shadow_pkey_reg);
 -	assert(pkey_reg == shadow_pkey_reg);
 +	dprintf4("rdpkru(line=%d) pkru: %x shadow: %x\n",
 +			line, pkru, shadow_pkru);
 +	assert(pkru == shadow_pkru);
  
 -	return pkey_reg;
 +	return pkru;
  }
  
 -#define read_pkey_reg() _read_pkey_reg(__LINE__)
 +#define rdpkru() _rdpkru(__LINE__)
 +
++<<<<<<< HEAD:tools/testing/selftests/x86/pkey-helpers.h
 +static inline void __wrpkru(unsigned int pkru)
 +{
 +	unsigned int eax = pkru;
 +	unsigned int ecx = 0;
 +	unsigned int edx = 0;
 +
 +	dprintf4("%s() changing %08x to %08x\n", __func__, __rdpkru(), pkru);
 +	asm volatile(".byte 0x0f,0x01,0xef\n\t"
 +		     : : "a" (eax), "c" (ecx), "d" (edx));
 +	assert(pkru == __rdpkru());
 +}
  
 +static inline void wrpkru(unsigned int pkru)
++=======
+ static inline void write_pkey_reg(unsigned int pkey_reg)
++>>>>>>> 53555e2b4d9a (selftests/vm/pkeys: move some definitions to arch-specific header):tools/testing/selftests/vm/pkey-helpers.h
  {
 -	dprintf4("%s() changing %08x to %08x\n", __func__,
 -			__read_pkey_reg(), pkey_reg);
 +	dprintf4("%s() changing %08x to %08x\n", __func__, __rdpkru(), pkru);
  	/* will do the shadow check for us: */
 -	read_pkey_reg();
 -	__write_pkey_reg(pkey_reg);
 -	shadow_pkey_reg = pkey_reg;
 -	dprintf4("%s(%08x) pkey_reg: %08x\n", __func__,
 -			pkey_reg, __read_pkey_reg());
 +	rdpkru();
 +	__wrpkru(pkru);
 +	shadow_pkru = pkru;
 +	dprintf4("%s(%08x) pkru: %08x\n", __func__, pkru, __rdpkru());
  }
  
  /*
@@@ -126,94 -127,22 +162,106 @@@ static inline void __pkey_write_allow(i
  	int bit = pkey * 2 + 1;
  
  	if (do_allow_write)
 -		pkey_reg &= (1<<bit);
 +		pkru &= (1<<bit);
  	else
 -		pkey_reg |= (1<<bit);
 +		pkru |= (1<<bit);
  
 -	write_pkey_reg(pkey_reg);
 -	dprintf4("pkey_reg now: %08x\n", read_pkey_reg());
 +	wrpkru(pkru);
 +	dprintf4("pkru now: %08x\n", rdpkru());
  }
  
++<<<<<<< HEAD:tools/testing/selftests/x86/pkey-helpers.h
 +#define PROT_PKEY0     0x10            /* protection key value (bit 0) */
 +#define PROT_PKEY1     0x20            /* protection key value (bit 1) */
 +#define PROT_PKEY2     0x40            /* protection key value (bit 2) */
 +#define PROT_PKEY3     0x80            /* protection key value (bit 3) */
 +
 +#define PAGE_SIZE 4096
 +#define MB	(1<<20)
 +
 +static inline void __cpuid(unsigned int *eax, unsigned int *ebx,
 +		unsigned int *ecx, unsigned int *edx)
 +{
 +	/* ecx is often an input as well as an output. */
 +	asm volatile(
 +		"cpuid;"
 +		: "=a" (*eax),
 +		  "=b" (*ebx),
 +		  "=c" (*ecx),
 +		  "=d" (*edx)
 +		: "0" (*eax), "2" (*ecx));
 +}
 +
 +/* Intel-defined CPU features, CPUID level 0x00000007:0 (ecx) */
 +#define X86_FEATURE_PKU        (1<<3) /* Protection Keys for Userspace */
 +#define X86_FEATURE_OSPKE      (1<<4) /* OS Protection Keys Enable */
 +
 +static inline int cpu_has_pku(void)
 +{
 +	unsigned int eax;
 +	unsigned int ebx;
 +	unsigned int ecx;
 +	unsigned int edx;
 +
 +	eax = 0x7;
 +	ecx = 0x0;
 +	__cpuid(&eax, &ebx, &ecx, &edx);
 +
 +	if (!(ecx & X86_FEATURE_PKU)) {
 +		dprintf2("cpu does not have PKU\n");
 +		return 0;
 +	}
 +	if (!(ecx & X86_FEATURE_OSPKE)) {
 +		dprintf2("cpu does not have OSPKE\n");
 +		return 0;
 +	}
 +	return 1;
 +}
 +
 +#define XSTATE_PKRU_BIT	(9)
 +#define XSTATE_PKRU	0x200
 +
 +int pkru_xstate_offset(void)
 +{
 +	unsigned int eax;
 +	unsigned int ebx;
 +	unsigned int ecx;
 +	unsigned int edx;
 +	int xstate_offset;
 +	int xstate_size;
 +	unsigned long XSTATE_CPUID = 0xd;
 +	int leaf;
 +
 +	/* assume that XSTATE_PKRU is set in XCR0 */
 +	leaf = XSTATE_PKRU_BIT;
 +	{
 +		eax = XSTATE_CPUID;
 +		ecx = leaf;
 +		__cpuid(&eax, &ebx, &ecx, &edx);
 +
 +		if (leaf == XSTATE_PKRU_BIT) {
 +			xstate_offset = ebx;
 +			xstate_size = eax;
 +		}
 +	}
 +
 +	if (xstate_size == 0) {
 +		printf("could not find size/offset of PKRU in xsave state\n");
 +		return 0;
 +	}
 +
 +	return xstate_offset;
 +}
++=======
+ #define ARRAY_SIZE(x) (sizeof(x) / sizeof(*(x)))
+ #define ALIGN_UP(x, align_to)	(((x) + ((align_to)-1)) & ~((align_to)-1))
+ #define ALIGN_DOWN(x, align_to) ((x) & ~((align_to)-1))
+ #define ALIGN_PTR_UP(p, ptr_align_to)	\
+ 	((typeof(p))ALIGN_UP((unsigned long)(p), ptr_align_to))
+ #define ALIGN_PTR_DOWN(p, ptr_align_to)	\
+ 	((typeof(p))ALIGN_DOWN((unsigned long)(p), ptr_align_to))
+ #define __stringify_1(x...)     #x
+ #define __stringify(x...)       __stringify_1(x)
++>>>>>>> 53555e2b4d9a (selftests/vm/pkeys: move some definitions to arch-specific header):tools/testing/selftests/vm/pkey-helpers.h
  
  #endif /* _PKEYS_HELPER_H */
diff --cc tools/testing/selftests/x86/protection_keys.c
index 5d546dcdbc80,2d0e881f109d..000000000000
--- a/tools/testing/selftests/x86/protection_keys.c
+++ b/tools/testing/selftests/x86/protection_keys.c
@@@ -48,19 -48,7 +48,23 @@@
  int iteration_nr = 1;
  int test_nr;
  
++<<<<<<< HEAD:tools/testing/selftests/x86/protection_keys.c
 +unsigned int shadow_pkru;
 +
 +#define HPAGE_SIZE	(1UL<<21)
 +#define ARRAY_SIZE(x) (sizeof(x) / sizeof(*(x)))
 +#define ALIGN_UP(x, align_to)	(((x) + ((align_to)-1)) & ~((align_to)-1))
 +#define ALIGN_DOWN(x, align_to) ((x) & ~((align_to)-1))
 +#define ALIGN_PTR_UP(p, ptr_align_to)	((typeof(p))ALIGN_UP((unsigned long)(p),	ptr_align_to))
 +#define ALIGN_PTR_DOWN(p, ptr_align_to)	((typeof(p))ALIGN_DOWN((unsigned long)(p),	ptr_align_to))
 +#define __stringify_1(x...)     #x
 +#define __stringify(x...)       __stringify_1(x)
 +
 +#define PTR_ERR_ENOTSUP ((void *)-ENOTSUP)
 +
++=======
+ unsigned int shadow_pkey_reg;
++>>>>>>> 53555e2b4d9a (selftests/vm/pkeys: move some definitions to arch-specific header):tools/testing/selftests/vm/protection_keys.c
  int dprint_in_signal;
  char dprint_in_signal_buffer[DPRINT_IN_SIGNAL_BUF_SIZE];
  
@@@ -186,42 -156,6 +184,45 @@@ void lots_o_noops_around_write(int *wri
  	dprintf3("%s() done\n", __func__);
  }
  
++<<<<<<< HEAD:tools/testing/selftests/x86/protection_keys.c
 +/* Define some kernel-like types */
 +#define  u8 uint8_t
 +#define u16 uint16_t
 +#define u32 uint32_t
 +#define u64 uint64_t
 +
 +#ifdef __i386__
 +
 +#ifndef SYS_mprotect_key
 +# define SYS_mprotect_key	380
 +#endif
 +
 +#ifndef SYS_pkey_alloc
 +# define SYS_pkey_alloc		381
 +# define SYS_pkey_free		382
 +#endif
 +
 +#define REG_IP_IDX		REG_EIP
 +#define si_pkey_offset		0x14
 +
 +#else
 +
 +#ifndef SYS_mprotect_key
 +# define SYS_mprotect_key	329
 +#endif
 +
 +#ifndef SYS_pkey_alloc
 +# define SYS_pkey_alloc		330
 +# define SYS_pkey_free		331
 +#endif
 +
 +#define REG_IP_IDX		REG_RIP
 +#define si_pkey_offset		0x20
 +
 +#endif
 +
++=======
++>>>>>>> 53555e2b4d9a (selftests/vm/pkeys: move some definitions to arch-specific header):tools/testing/selftests/vm/protection_keys.c
  void dump_mem(void *dumpme, int len_bytes)
  {
  	char *c = (void *)dumpme;
diff --git a/tools/testing/selftests/vm/pkey-x86.h b/tools/testing/selftests/vm/pkey-x86.h
new file mode 100644
index 000000000000..2f04ade8ca9c
--- /dev/null
+++ b/tools/testing/selftests/vm/pkey-x86.h
@@ -0,0 +1,156 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+
+#ifndef _PKEYS_X86_H
+#define _PKEYS_X86_H
+
+#ifdef __i386__
+
+#ifndef SYS_mprotect_key
+# define SYS_mprotect_key	380
+#endif
+
+#ifndef SYS_pkey_alloc
+# define SYS_pkey_alloc		381
+# define SYS_pkey_free		382
+#endif
+
+#define REG_IP_IDX		REG_EIP
+#define si_pkey_offset		0x14
+
+#else
+
+#ifndef SYS_mprotect_key
+# define SYS_mprotect_key	329
+#endif
+
+#ifndef SYS_pkey_alloc
+# define SYS_pkey_alloc		330
+# define SYS_pkey_free		331
+#endif
+
+#define REG_IP_IDX		REG_RIP
+#define si_pkey_offset		0x20
+
+#endif
+
+#ifndef PKEY_DISABLE_ACCESS
+# define PKEY_DISABLE_ACCESS	0x1
+#endif
+
+#ifndef PKEY_DISABLE_WRITE
+# define PKEY_DISABLE_WRITE	0x2
+#endif
+
+#define NR_PKEYS		16
+#define PKEY_BITS_PER_PKEY	2
+#define HPAGE_SIZE		(1UL<<21)
+#define PAGE_SIZE		4096
+#define MB			(1<<20)
+
+static inline void __page_o_noops(void)
+{
+	/* 8-bytes of instruction * 512 bytes = 1 page */
+	asm(".rept 512 ; nopl 0x7eeeeeee(%eax) ; .endr");
+}
+
+static inline unsigned int __read_pkey_reg(void)
+{
+	unsigned int eax, edx;
+	unsigned int ecx = 0;
+	unsigned int pkey_reg;
+
+	asm volatile(".byte 0x0f,0x01,0xee\n\t"
+		     : "=a" (eax), "=d" (edx)
+		     : "c" (ecx));
+	pkey_reg = eax;
+	return pkey_reg;
+}
+
+static inline void __write_pkey_reg(unsigned int pkey_reg)
+{
+	unsigned int eax = pkey_reg;
+	unsigned int ecx = 0;
+	unsigned int edx = 0;
+
+	dprintf4("%s() changing %08x to %08x\n", __func__,
+			__read_pkey_reg(), pkey_reg);
+	asm volatile(".byte 0x0f,0x01,0xef\n\t"
+		     : : "a" (eax), "c" (ecx), "d" (edx));
+	assert(pkey_reg == __read_pkey_reg());
+}
+
+static inline void __cpuid(unsigned int *eax, unsigned int *ebx,
+		unsigned int *ecx, unsigned int *edx)
+{
+	/* ecx is often an input as well as an output. */
+	asm volatile(
+		"cpuid;"
+		: "=a" (*eax),
+		  "=b" (*ebx),
+		  "=c" (*ecx),
+		  "=d" (*edx)
+		: "0" (*eax), "2" (*ecx));
+}
+
+/* Intel-defined CPU features, CPUID level 0x00000007:0 (ecx) */
+#define X86_FEATURE_PKU        (1<<3) /* Protection Keys for Userspace */
+#define X86_FEATURE_OSPKE      (1<<4) /* OS Protection Keys Enable */
+
+static inline int cpu_has_pku(void)
+{
+	unsigned int eax;
+	unsigned int ebx;
+	unsigned int ecx;
+	unsigned int edx;
+
+	eax = 0x7;
+	ecx = 0x0;
+	__cpuid(&eax, &ebx, &ecx, &edx);
+
+	if (!(ecx & X86_FEATURE_PKU)) {
+		dprintf2("cpu does not have PKU\n");
+		return 0;
+	}
+	if (!(ecx & X86_FEATURE_OSPKE)) {
+		dprintf2("cpu does not have OSPKE\n");
+		return 0;
+	}
+	return 1;
+}
+
+#define XSTATE_PKEY_BIT	(9)
+#define XSTATE_PKEY	0x200
+
+int pkey_reg_xstate_offset(void)
+{
+	unsigned int eax;
+	unsigned int ebx;
+	unsigned int ecx;
+	unsigned int edx;
+	int xstate_offset;
+	int xstate_size;
+	unsigned long XSTATE_CPUID = 0xd;
+	int leaf;
+
+	/* assume that XSTATE_PKEY is set in XCR0 */
+	leaf = XSTATE_PKEY_BIT;
+	{
+		eax = XSTATE_CPUID;
+		ecx = leaf;
+		__cpuid(&eax, &ebx, &ecx, &edx);
+
+		if (leaf == XSTATE_PKEY_BIT) {
+			xstate_offset = ebx;
+			xstate_size = eax;
+		}
+	}
+
+	if (xstate_size == 0) {
+		printf("could not find size/offset of PKEY in xsave state\n");
+		return 0;
+	}
+
+	return xstate_offset;
+}
+
+#endif /* _PKEYS_X86_H */
* Unmerged path tools/testing/selftests/x86/pkey-helpers.h
* Unmerged path tools/testing/selftests/x86/protection_keys.c
