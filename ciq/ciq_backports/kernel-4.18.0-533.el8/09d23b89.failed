iavf: Handle ntuple on/off based on new state machines for flow director

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-533.el8
commit-author Piotr Gardocki <piotrx.gardocki@intel.com>
commit 09d23b8918f9ab0f8114f6b94f2faf8bde3fb52a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-533.el8/09d23b89.failed

ntuple-filter feature on/off:
Default is on. If turned off, the filters will be removed from both
PF and iavf list. The removal is irrespective of current filter state.

Steps to reproduce:
-------------------

1. Ensure ntuple is on.

ethtool -K enp8s0 ntuple-filters on

2. Create a filter to receive the traffic into non-default rx-queue like 15
and ensure traffic is flowing into queue into 15.
Now, turn off ntuple. Traffic should not flow to configured queue 15.
It should flow to default RX queue.

Fixes: 0dbfbabb840d ("iavf: Add framework to enable ethtool ntuple filters")
	Signed-off-by: Piotr Gardocki <piotrx.gardocki@intel.com>
	Reviewed-by: Larysa Zaremba <larysa.zaremba@intel.com>
	Signed-off-by: Ranganatha Rao <ranganatha.rao@intel.com>
	Tested-by: Rafal Romanowski <rafal.romanowski@intel.com>
	Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
(cherry picked from commit 09d23b8918f9ab0f8114f6b94f2faf8bde3fb52a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/intel/iavf/iavf_main.c
diff --cc drivers/net/ethernet/intel/iavf/iavf_main.c
index 02372dcb2d4a,98116872f6bd..000000000000
--- a/drivers/net/ethernet/intel/iavf/iavf_main.c
+++ b/drivers/net/ethernet/intel/iavf/iavf_main.c
@@@ -4434,7 -4405,17 +4477,14 @@@ static int iavf_set_features(struct net
  	    (features & NETIF_VLAN_OFFLOAD_FEATURES))
  		iavf_set_vlan_offload_features(adapter, netdev->features,
  					       features);
 -	if (CRC_OFFLOAD_ALLOWED(adapter) &&
 -	    ((netdev->features & NETIF_F_RXFCS) ^ (features & NETIF_F_RXFCS)))
 -		iavf_schedule_reset(adapter, IAVF_FLAG_RESET_NEEDED);
  
+ 	if ((netdev->features & NETIF_F_NTUPLE) ^ (features & NETIF_F_NTUPLE)) {
+ 		if (features & NETIF_F_NTUPLE)
+ 			adapter->flags |= IAVF_FLAG_FDIR_ENABLED;
+ 		else
+ 			iavf_disable_fdir(adapter);
+ 	}
+ 
  	return 0;
  }
  
@@@ -4730,7 -4763,12 +4780,16 @@@ static netdev_features_t iavf_fix_featu
  {
  	struct iavf_adapter *adapter = netdev_priv(netdev);
  
++<<<<<<< HEAD
 +	return iavf_fix_netdev_vlan_features(adapter, features);
++=======
+ 	features = iavf_fix_netdev_vlan_features(adapter, features);
+ 
+ 	if (!FDIR_FLTR_SUPPORT(adapter))
+ 		features &= ~NETIF_F_NTUPLE;
+ 
+ 	return iavf_fix_strip_features(adapter, features);
++>>>>>>> 09d23b8918f9 (iavf: Handle ntuple on/off based on new state machines for flow director)
  }
  
  static const struct net_device_ops iavf_netdev_ops = {
* Unmerged path drivers/net/ethernet/intel/iavf/iavf_main.c
