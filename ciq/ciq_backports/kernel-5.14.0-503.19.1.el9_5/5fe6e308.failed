bpf: Fix use-after-free in bpf_uprobe_multi_link_attach()

jira LE-2177
cve CVE-2024-47675
Rebuild_History Non-Buildable kernel-5.14.0-503.19.1.el9_5
commit-author Oleg Nesterov <oleg@redhat.com>
commit 5fe6e308abaea082c20fbf2aa5df8e14495622cf
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-5.14.0-503.19.1.el9_5/5fe6e308.failed

If bpf_link_prime() fails, bpf_uprobe_multi_link_attach() goes to the
error_free label and frees the array of bpf_uprobe's without calling
bpf_uprobe_unregister().

This leaks bpf_uprobe->uprobe and worse, this frees bpf_uprobe->consumer
without removing it from the uprobe->consumers list.

Fixes: 89ae89f53d20 ("bpf: Add multi uprobe link")
Closes: https://lore.kernel.org/all/000000000000382d39061f59f2dd@google.com/
	Reported-by: syzbot+f7a1c2c2711e4a780f19@syzkaller.appspotmail.com
	Signed-off-by: Oleg Nesterov <oleg@redhat.com>
	Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
	Acked-by: Andrii Nakryiko <andrii@kernel.org>
	Acked-by: Jiri Olsa <jolsa@kernel.org>
	Tested-by: syzbot+f7a1c2c2711e4a780f19@syzkaller.appspotmail.com
	Cc: stable@vger.kernel.org
Link: https://lore.kernel.org/r/20240813152524.GA7292@redhat.com
(cherry picked from commit 5fe6e308abaea082c20fbf2aa5df8e14495622cf)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/trace/bpf_trace.c
diff --cc kernel/trace/bpf_trace.c
index 3f8e96e308a0,90cd30e9723e..000000000000
--- a/kernel/trace/bpf_trace.c
+++ b/kernel/trace/bpf_trace.c
@@@ -3349,13 -3478,14 +3349,24 @@@ int bpf_uprobe_multi_link_attach(const 
  		      &bpf_uprobe_multi_link_lops, prog);
  
  	for (i = 0; i < cnt; i++) {
++<<<<<<< HEAD
 +		err = uprobe_register_refctr(d_real_inode(link->path.dentry),
 +					     uprobes[i].offset,
 +					     uprobes[i].ref_ctr_offset,
 +					     &uprobes[i].consumer);
 +		if (err) {
 +			bpf_uprobe_unregister(&path, uprobes, i);
 +			goto error_free;
++=======
+ 		uprobes[i].uprobe = uprobe_register(d_real_inode(link->path.dentry),
+ 						    uprobes[i].offset,
+ 						    uprobes[i].ref_ctr_offset,
+ 						    &uprobes[i].consumer);
+ 		if (IS_ERR(uprobes[i].uprobe)) {
+ 			err = PTR_ERR(uprobes[i].uprobe);
+ 			link->cnt = i;
+ 			goto error_unregister;
++>>>>>>> 5fe6e308abae (bpf: Fix use-after-free in bpf_uprobe_multi_link_attach())
  		}
  	}
  
* Unmerged path kernel/trace/bpf_trace.c
