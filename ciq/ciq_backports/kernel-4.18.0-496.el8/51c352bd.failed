netlink: add support for formatted extack messages

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-496.el8
commit-author Edward Cree <ecree.xilinx@gmail.com>
commit 51c352bdbcd23d7ce46b06c1e64c82754dc44044
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-496.el8/51c352bd.failed

Include an 80-byte buffer in struct netlink_ext_ack that can be used
 for scnprintf()ed messages.  This does mean that the resulting string
 can't be enumerated, translated etc. in the way NL_SET_ERR_MSG() was
 designed to allow.

	Signed-off-by: Edward Cree <ecree.xilinx@gmail.com>
	Reviewed-by: Jakub Kicinski <kuba@kernel.org>
	Signed-off-by: Jakub Kicinski <kuba@kernel.org>
(cherry picked from commit 51c352bdbcd23d7ce46b06c1e64c82754dc44044)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/netlink.h
diff --cc include/linux/netlink.h
index bf9c8d07cf74,d81bde5a5844..000000000000
--- a/include/linux/netlink.h
+++ b/include/linux/netlink.h
@@@ -70,14 -71,23 +71,17 @@@ netlink_kernel_create(struct net *net, 
   * @_msg: message string to report - don't access directly, use
   *	%NL_SET_ERR_MSG
   * @bad_attr: attribute with error
 - * @policy: policy for a bad attribute
 - * @miss_type: attribute type which was missing
 - * @miss_nest: nest missing an attribute (%NULL if missing top level attr)
   * @cookie: cookie data to return to userspace (for success)
   * @cookie_len: actual cookie data length
+  * @_msg_buf: output buffer for formatted message strings - don't access
+  *	directly, use %NL_SET_ERR_MSG_FMT
   */
  struct netlink_ext_ack {
  	const char *_msg;
  	const struct nlattr *bad_attr;
 -	const struct nla_policy *policy;
 -	const struct nlattr *miss_nest;
 -	u16 miss_type;
  	u8 cookie[NETLINK_MAX_COOKIE_LEN];
  	u8 cookie_len;
+ 	char _msg_buf[NETLINK_MAX_FMTMSG_LEN];
  };
  
  /* Always use this macro, this allows later putting the
@@@ -99,20 -127,40 +121,28 @@@
  #define NL_SET_ERR_MSG_MOD(extack, msg)			\
  	NL_SET_ERR_MSG((extack), KBUILD_MODNAME ": " msg)
  
++<<<<<<< HEAD
 +#define NL_SET_BAD_ATTR(extack, attr) do {		\
 +	if ((extack))					\
++=======
+ #define NL_SET_ERR_MSG_FMT_MOD(extack, fmt, args...)	\
+ 	NL_SET_ERR_MSG_FMT((extack), KBUILD_MODNAME ": " fmt, ##args)
+ 
+ #define NL_SET_BAD_ATTR_POLICY(extack, attr, pol) do {	\
+ 	if ((extack)) {					\
++>>>>>>> 51c352bdbcd2 (netlink: add support for formatted extack messages)
  		(extack)->bad_attr = (attr);		\
 -		(extack)->policy = (pol);		\
 -	}						\
 -} while (0)
 -
 -#define NL_SET_BAD_ATTR(extack, attr) NL_SET_BAD_ATTR_POLICY(extack, attr, NULL)
 -
 -#define NL_SET_ERR_MSG_ATTR_POL(extack, attr, pol, msg) do {	\
 -	static const char __msg[] = msg;			\
 -	struct netlink_ext_ack *__extack = (extack);		\
 -								\
 -	do_trace_netlink_extack(__msg);				\
 -								\
 -	if (__extack) {						\
 -		__extack->_msg = __msg;				\
 -		__extack->bad_attr = (attr);			\
 -		__extack->policy = (pol);			\
 -	}							\
  } while (0)
  
 -#define NL_SET_ERR_MSG_ATTR(extack, attr, msg)		\
 -	NL_SET_ERR_MSG_ATTR_POL(extack, attr, NULL, msg)
 -
 -#define NL_SET_ERR_ATTR_MISS(extack, nest, type)  do {	\
 +#define NL_SET_ERR_MSG_ATTR(extack, attr, msg) do {	\
 +	static const char __msg[] = msg;		\
  	struct netlink_ext_ack *__extack = (extack);	\
  							\
 +	do_trace_netlink_extack(__msg);			\
 +							\
  	if (__extack) {					\
 -		__extack->miss_nest = (nest);		\
 -		__extack->miss_type = (type);		\
 +		__extack->_msg = __msg;			\
 +		__extack->bad_attr = (attr);		\
  	}						\
  } while (0)
  
* Unmerged path include/linux/netlink.h
