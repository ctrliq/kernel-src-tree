net: Remove the obsolte u64_stats_fetch_*_irq() users (net).

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-496.el8
commit-author Thomas Gleixner <tglx@linutronix.de>
commit d120d1a63b2c484d6175873d8ee736a633f74b70
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-496.el8/d120d1a6.failed

Now that the 32bit UP oddity is gone and 32bit uses always a sequence
count, there is no need for the fetch_irq() variants anymore.

Convert to the regular interface.

	Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
	Signed-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
	Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>
	Signed-off-by: Jakub Kicinski <kuba@kernel.org>
(cherry picked from commit d120d1a63b2c484d6175873d8ee736a633f74b70)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/8021q/vlan_dev.c
#	net/bridge/br_vlan.c
#	net/core/dev.c
#	net/core/devlink.c
#	net/core/drop_monitor.c
#	net/dsa/slave.c
#	net/ipv6/seg6_local.c
diff --cc net/8021q/vlan_dev.c
index 0006e37eb9cc,296d0145932f..000000000000
--- a/net/8021q/vlan_dev.c
+++ b/net/8021q/vlan_dev.c
@@@ -722,13 -712,13 +722,23 @@@ static void vlan_dev_get_stats64(struc
  
  		p = per_cpu_ptr(vlan_dev_priv(dev)->vlan_pcpu_stats, i);
  		do {
++<<<<<<< HEAD
 +			start = u64_stats_fetch_begin_irq(&p->syncp);
 +			rxpackets	= p->rx_packets;
 +			rxbytes		= p->rx_bytes;
 +			rxmulticast	= p->rx_multicast;
 +			txpackets	= p->tx_packets;
 +			txbytes		= p->tx_bytes;
 +		} while (u64_stats_fetch_retry_irq(&p->syncp, start));
++=======
+ 			start = u64_stats_fetch_begin(&p->syncp);
+ 			rxpackets	= u64_stats_read(&p->rx_packets);
+ 			rxbytes		= u64_stats_read(&p->rx_bytes);
+ 			rxmulticast	= u64_stats_read(&p->rx_multicast);
+ 			txpackets	= u64_stats_read(&p->tx_packets);
+ 			txbytes		= u64_stats_read(&p->tx_bytes);
+ 		} while (u64_stats_fetch_retry(&p->syncp, start));
++>>>>>>> d120d1a63b2c (net: Remove the obsolte u64_stats_fetch_*_irq() users (net).)
  
  		stats->rx_packets	+= rxpackets;
  		stats->rx_bytes		+= rxbytes;
diff --cc net/bridge/br_vlan.c
index fdbd1c0010d7,f2fc284abab3..000000000000
--- a/net/bridge/br_vlan.c
+++ b/net/bridge/br_vlan.c
@@@ -1379,17 -1378,17 +1379,26 @@@ void br_vlan_get_stats(const struct net
  
  		cpu_stats = per_cpu_ptr(v->stats, i);
  		do {
++<<<<<<< HEAD
 +			start = u64_stats_fetch_begin_irq(&cpu_stats->syncp);
 +			rxpackets = cpu_stats->rx_packets;
 +			rxbytes = cpu_stats->rx_bytes;
 +			txbytes = cpu_stats->tx_bytes;
 +			txpackets = cpu_stats->tx_packets;
 +		} while (u64_stats_fetch_retry_irq(&cpu_stats->syncp, start));
++=======
+ 			start = u64_stats_fetch_begin(&cpu_stats->syncp);
+ 			rxpackets = u64_stats_read(&cpu_stats->rx_packets);
+ 			rxbytes = u64_stats_read(&cpu_stats->rx_bytes);
+ 			txbytes = u64_stats_read(&cpu_stats->tx_bytes);
+ 			txpackets = u64_stats_read(&cpu_stats->tx_packets);
+ 		} while (u64_stats_fetch_retry(&cpu_stats->syncp, start));
++>>>>>>> d120d1a63b2c (net: Remove the obsolte u64_stats_fetch_*_irq() users (net).)
  
 -		u64_stats_add(&stats->rx_packets, rxpackets);
 -		u64_stats_add(&stats->rx_bytes, rxbytes);
 -		u64_stats_add(&stats->tx_bytes, txbytes);
 -		u64_stats_add(&stats->tx_packets, txpackets);
 +		stats->rx_packets += rxpackets;
 +		stats->rx_bytes += rxbytes;
 +		stats->tx_bytes += txbytes;
 +		stats->tx_packets += txpackets;
  	}
  }
  
diff --cc net/core/dev.c
index 2419f560d93e,cfb68db040a4..000000000000
--- a/net/core/dev.c
+++ b/net/core/dev.c
@@@ -10611,17 -10477,17 +10611,26 @@@ void dev_fetch_sw_netstats(struct rtnl_
  
  		stats = per_cpu_ptr(netstats, cpu);
  		do {
++<<<<<<< HEAD
 +			start = u64_stats_fetch_begin_irq(&stats->syncp);
 +			tmp.rx_packets = stats->rx_packets;
 +			tmp.rx_bytes   = stats->rx_bytes;
 +			tmp.tx_packets = stats->tx_packets;
 +			tmp.tx_bytes   = stats->tx_bytes;
 +		} while (u64_stats_fetch_retry_irq(&stats->syncp, start));
++=======
+ 			start = u64_stats_fetch_begin(&stats->syncp);
+ 			rx_packets = u64_stats_read(&stats->rx_packets);
+ 			rx_bytes   = u64_stats_read(&stats->rx_bytes);
+ 			tx_packets = u64_stats_read(&stats->tx_packets);
+ 			tx_bytes   = u64_stats_read(&stats->tx_bytes);
+ 		} while (u64_stats_fetch_retry(&stats->syncp, start));
++>>>>>>> d120d1a63b2c (net: Remove the obsolte u64_stats_fetch_*_irq() users (net).)
  
 -		s->rx_packets += rx_packets;
 -		s->rx_bytes   += rx_bytes;
 -		s->tx_packets += tx_packets;
 -		s->tx_bytes   += tx_bytes;
 +		s->rx_packets += tmp.rx_packets;
 +		s->rx_bytes   += tmp.rx_bytes;
 +		s->tx_packets += tmp.tx_packets;
 +		s->tx_bytes   += tmp.tx_bytes;
  	}
  }
  EXPORT_SYMBOL_GPL(dev_fetch_sw_netstats);
diff --cc net/core/devlink.c
index 0d4beb71e631,0a16ad45520e..000000000000
--- a/net/core/devlink.c
+++ b/net/core/devlink.c
@@@ -7856,13 -8304,13 +7856,20 @@@ static void devlink_trap_stats_read(str
  
  		cpu_stats = per_cpu_ptr(trap_stats, i);
  		do {
++<<<<<<< HEAD
 +			start = u64_stats_fetch_begin_irq(&cpu_stats->syncp);
 +			rx_packets = cpu_stats->rx_packets;
 +			rx_bytes = cpu_stats->rx_bytes;
 +		} while (u64_stats_fetch_retry_irq(&cpu_stats->syncp, start));
++=======
+ 			start = u64_stats_fetch_begin(&cpu_stats->syncp);
+ 			rx_packets = u64_stats_read(&cpu_stats->rx_packets);
+ 			rx_bytes = u64_stats_read(&cpu_stats->rx_bytes);
+ 		} while (u64_stats_fetch_retry(&cpu_stats->syncp, start));
++>>>>>>> d120d1a63b2c (net: Remove the obsolte u64_stats_fetch_*_irq() users (net).)
  
 -		u64_stats_add(&stats->rx_packets, rx_packets);
 -		u64_stats_add(&stats->rx_bytes, rx_bytes);
 +		stats->rx_packets += rx_packets;
 +		stats->rx_bytes += rx_bytes;
  	}
  }
  
diff --cc net/core/drop_monitor.c
index 51089c9607cd,11aa6e8a3098..000000000000
--- a/net/core/drop_monitor.c
+++ b/net/core/drop_monitor.c
@@@ -1445,11 -1432,11 +1445,17 @@@ static void net_dm_stats_read(struct ne
  		u64 dropped;
  
  		do {
++<<<<<<< HEAD
 +			start = u64_stats_fetch_begin_irq(&cpu_stats->syncp);
 +			dropped = cpu_stats->dropped;
 +		} while (u64_stats_fetch_retry_irq(&cpu_stats->syncp, start));
++=======
+ 			start = u64_stats_fetch_begin(&cpu_stats->syncp);
+ 			dropped = u64_stats_read(&cpu_stats->dropped);
+ 		} while (u64_stats_fetch_retry(&cpu_stats->syncp, start));
++>>>>>>> d120d1a63b2c (net: Remove the obsolte u64_stats_fetch_*_irq() users (net).)
  
 -		u64_stats_add(&stats->dropped, dropped);
 +		stats->dropped += dropped;
  	}
  }
  
@@@ -1489,11 -1476,11 +1495,17 @@@ static void net_dm_hw_stats_read(struc
  		u64 dropped;
  
  		do {
++<<<<<<< HEAD
 +			start = u64_stats_fetch_begin_irq(&cpu_stats->syncp);
 +			dropped = cpu_stats->dropped;
 +		} while (u64_stats_fetch_retry_irq(&cpu_stats->syncp, start));
++=======
+ 			start = u64_stats_fetch_begin(&cpu_stats->syncp);
+ 			dropped = u64_stats_read(&cpu_stats->dropped);
+ 		} while (u64_stats_fetch_retry(&cpu_stats->syncp, start));
++>>>>>>> d120d1a63b2c (net: Remove the obsolte u64_stats_fetch_*_irq() users (net).)
  
 -		u64_stats_add(&stats->dropped, dropped);
 +		stats->dropped += dropped;
  	}
  }
  
diff --cc net/dsa/slave.c
index 24cc4de02bd3,83e419afa89e..000000000000
--- a/net/dsa/slave.c
+++ b/net/dsa/slave.c
@@@ -576,14 -974,14 +576,23 @@@ static void dsa_slave_get_ethtool_stats
  	for_each_possible_cpu(i) {
  		u64 tx_packets, tx_bytes, rx_packets, rx_bytes;
  
 -		s = per_cpu_ptr(dev->tstats, i);
 +		s = per_cpu_ptr(p->stats64, i);
  		do {
++<<<<<<< HEAD
 +			start = u64_stats_fetch_begin_irq(&s->syncp);
 +			tx_packets = s->tx_packets;
 +			tx_bytes = s->tx_bytes;
 +			rx_packets = s->rx_packets;
 +			rx_bytes = s->rx_bytes;
 +		} while (u64_stats_fetch_retry_irq(&s->syncp, start));
++=======
+ 			start = u64_stats_fetch_begin(&s->syncp);
+ 			tx_packets = u64_stats_read(&s->tx_packets);
+ 			tx_bytes = u64_stats_read(&s->tx_bytes);
+ 			rx_packets = u64_stats_read(&s->rx_packets);
+ 			rx_bytes = u64_stats_read(&s->rx_bytes);
+ 		} while (u64_stats_fetch_retry(&s->syncp, start));
++>>>>>>> d120d1a63b2c (net: Remove the obsolte u64_stats_fetch_*_irq() users (net).)
  		data[0] += tx_packets;
  		data[1] += tx_bytes;
  		data[2] += rx_packets;
diff --cc net/ipv6/seg6_local.c
index 925e385e7cac,487f8e98deaa..000000000000
--- a/net/ipv6/seg6_local.c
+++ b/net/ipv6/seg6_local.c
@@@ -882,10 -1564,317 +882,313 @@@ static int cmp_nla_bpf(struct seg6_loca
  	return strcmp(a->bpf.name, b->bpf.name);
  }
  
++<<<<<<< HEAD
++=======
+ static void destroy_attr_bpf(struct seg6_local_lwt *slwt)
+ {
+ 	kfree(slwt->bpf.name);
+ 	if (slwt->bpf.prog)
+ 		bpf_prog_put(slwt->bpf.prog);
+ }
+ 
+ static const struct
+ nla_policy seg6_local_counters_policy[SEG6_LOCAL_CNT_MAX + 1] = {
+ 	[SEG6_LOCAL_CNT_PACKETS]	= { .type = NLA_U64 },
+ 	[SEG6_LOCAL_CNT_BYTES]		= { .type = NLA_U64 },
+ 	[SEG6_LOCAL_CNT_ERRORS]		= { .type = NLA_U64 },
+ };
+ 
+ static int parse_nla_counters(struct nlattr **attrs,
+ 			      struct seg6_local_lwt *slwt,
+ 			      struct netlink_ext_ack *extack)
+ {
+ 	struct pcpu_seg6_local_counters __percpu *pcounters;
+ 	struct nlattr *tb[SEG6_LOCAL_CNT_MAX + 1];
+ 	int ret;
+ 
+ 	ret = nla_parse_nested_deprecated(tb, SEG6_LOCAL_CNT_MAX,
+ 					  attrs[SEG6_LOCAL_COUNTERS],
+ 					  seg6_local_counters_policy, NULL);
+ 	if (ret < 0)
+ 		return ret;
+ 
+ 	/* basic support for SRv6 Behavior counters requires at least:
+ 	 * packets, bytes and errors.
+ 	 */
+ 	if (!tb[SEG6_LOCAL_CNT_PACKETS] || !tb[SEG6_LOCAL_CNT_BYTES] ||
+ 	    !tb[SEG6_LOCAL_CNT_ERRORS])
+ 		return -EINVAL;
+ 
+ 	/* counters are always zero initialized */
+ 	pcounters = seg6_local_alloc_pcpu_counters(GFP_KERNEL);
+ 	if (!pcounters)
+ 		return -ENOMEM;
+ 
+ 	slwt->pcpu_counters = pcounters;
+ 
+ 	return 0;
+ }
+ 
+ static int seg6_local_fill_nla_counters(struct sk_buff *skb,
+ 					struct seg6_local_counters *counters)
+ {
+ 	if (nla_put_u64_64bit(skb, SEG6_LOCAL_CNT_PACKETS, counters->packets,
+ 			      SEG6_LOCAL_CNT_PAD))
+ 		return -EMSGSIZE;
+ 
+ 	if (nla_put_u64_64bit(skb, SEG6_LOCAL_CNT_BYTES, counters->bytes,
+ 			      SEG6_LOCAL_CNT_PAD))
+ 		return -EMSGSIZE;
+ 
+ 	if (nla_put_u64_64bit(skb, SEG6_LOCAL_CNT_ERRORS, counters->errors,
+ 			      SEG6_LOCAL_CNT_PAD))
+ 		return -EMSGSIZE;
+ 
+ 	return 0;
+ }
+ 
+ static int put_nla_counters(struct sk_buff *skb, struct seg6_local_lwt *slwt)
+ {
+ 	struct seg6_local_counters counters = { 0, 0, 0 };
+ 	struct nlattr *nest;
+ 	int rc, i;
+ 
+ 	nest = nla_nest_start(skb, SEG6_LOCAL_COUNTERS);
+ 	if (!nest)
+ 		return -EMSGSIZE;
+ 
+ 	for_each_possible_cpu(i) {
+ 		struct pcpu_seg6_local_counters *pcounters;
+ 		u64 packets, bytes, errors;
+ 		unsigned int start;
+ 
+ 		pcounters = per_cpu_ptr(slwt->pcpu_counters, i);
+ 		do {
+ 			start = u64_stats_fetch_begin(&pcounters->syncp);
+ 
+ 			packets = u64_stats_read(&pcounters->packets);
+ 			bytes = u64_stats_read(&pcounters->bytes);
+ 			errors = u64_stats_read(&pcounters->errors);
+ 
+ 		} while (u64_stats_fetch_retry(&pcounters->syncp, start));
+ 
+ 		counters.packets += packets;
+ 		counters.bytes += bytes;
+ 		counters.errors += errors;
+ 	}
+ 
+ 	rc = seg6_local_fill_nla_counters(skb, &counters);
+ 	if (rc < 0) {
+ 		nla_nest_cancel(skb, nest);
+ 		return rc;
+ 	}
+ 
+ 	return nla_nest_end(skb, nest);
+ }
+ 
+ static int cmp_nla_counters(struct seg6_local_lwt *a, struct seg6_local_lwt *b)
+ {
+ 	/* a and b are equal if both have pcpu_counters set or not */
+ 	return (!!((unsigned long)a->pcpu_counters)) ^
+ 		(!!((unsigned long)b->pcpu_counters));
+ }
+ 
+ static void destroy_attr_counters(struct seg6_local_lwt *slwt)
+ {
+ 	free_percpu(slwt->pcpu_counters);
+ }
+ 
+ static const
+ struct nla_policy seg6_local_flavors_policy[SEG6_LOCAL_FLV_MAX + 1] = {
+ 	[SEG6_LOCAL_FLV_OPERATION]	= { .type = NLA_U32 },
+ 	[SEG6_LOCAL_FLV_LCBLOCK_BITS]	= { .type = NLA_U8 },
+ 	[SEG6_LOCAL_FLV_LCNODE_FN_BITS]	= { .type = NLA_U8 },
+ };
+ 
+ /* check whether the lengths of the Locator-Block and Locator-Node Function
+  * are compatible with the dimension of a C-SID container.
+  */
+ static int seg6_chk_next_csid_cfg(__u8 block_len, __u8 func_len)
+ {
+ 	/* Locator-Block and Locator-Node Function cannot exceed 128 bits
+ 	 * (i.e. C-SID container lenghts).
+ 	 */
+ 	if (next_csid_chk_cntr_bits(block_len, func_len))
+ 		return -EINVAL;
+ 
+ 	/* Locator-Block length must be greater than zero and evenly divisible
+ 	 * by 8. There must be room for a Locator-Node Function, at least.
+ 	 */
+ 	if (next_csid_chk_lcblock_bits(block_len))
+ 		return -EINVAL;
+ 
+ 	/* Locator-Node Function length must be greater than zero and evenly
+ 	 * divisible by 8. There must be room for the Locator-Block.
+ 	 */
+ 	if (next_csid_chk_lcnode_fn_bits(func_len))
+ 		return -EINVAL;
+ 
+ 	return 0;
+ }
+ 
+ static int seg6_parse_nla_next_csid_cfg(struct nlattr **tb,
+ 					struct seg6_flavors_info *finfo,
+ 					struct netlink_ext_ack *extack)
+ {
+ 	__u8 func_len = SEG6_LOCAL_LCNODE_FN_DBITS;
+ 	__u8 block_len = SEG6_LOCAL_LCBLOCK_DBITS;
+ 	int rc;
+ 
+ 	if (tb[SEG6_LOCAL_FLV_LCBLOCK_BITS])
+ 		block_len = nla_get_u8(tb[SEG6_LOCAL_FLV_LCBLOCK_BITS]);
+ 
+ 	if (tb[SEG6_LOCAL_FLV_LCNODE_FN_BITS])
+ 		func_len = nla_get_u8(tb[SEG6_LOCAL_FLV_LCNODE_FN_BITS]);
+ 
+ 	rc = seg6_chk_next_csid_cfg(block_len, func_len);
+ 	if (rc < 0) {
+ 		NL_SET_ERR_MSG(extack,
+ 			       "Invalid Locator Block/Node Function lengths");
+ 		return rc;
+ 	}
+ 
+ 	finfo->lcblock_bits = block_len;
+ 	finfo->lcnode_func_bits = func_len;
+ 
+ 	return 0;
+ }
+ 
+ static int parse_nla_flavors(struct nlattr **attrs, struct seg6_local_lwt *slwt,
+ 			     struct netlink_ext_ack *extack)
+ {
+ 	struct seg6_flavors_info *finfo = &slwt->flv_info;
+ 	struct nlattr *tb[SEG6_LOCAL_FLV_MAX + 1];
+ 	unsigned long fops;
+ 	int rc;
+ 
+ 	rc = nla_parse_nested_deprecated(tb, SEG6_LOCAL_FLV_MAX,
+ 					 attrs[SEG6_LOCAL_FLAVORS],
+ 					 seg6_local_flavors_policy, NULL);
+ 	if (rc < 0)
+ 		return rc;
+ 
+ 	/* this attribute MUST always be present since it represents the Flavor
+ 	 * operation(s) to be carried out.
+ 	 */
+ 	if (!tb[SEG6_LOCAL_FLV_OPERATION])
+ 		return -EINVAL;
+ 
+ 	fops = nla_get_u32(tb[SEG6_LOCAL_FLV_OPERATION]);
+ 	if (fops & ~SEG6_LOCAL_FLV_SUPP_OPS) {
+ 		NL_SET_ERR_MSG(extack, "Unsupported Flavor operation(s)");
+ 		return -EOPNOTSUPP;
+ 	}
+ 
+ 	finfo->flv_ops = fops;
+ 
+ 	if (seg6_next_csid_enabled(fops)) {
+ 		/* Locator-Block and Locator-Node Function lengths can be
+ 		 * provided by the user space. Otherwise, default values are
+ 		 * applied.
+ 		 */
+ 		rc = seg6_parse_nla_next_csid_cfg(tb, finfo, extack);
+ 		if (rc < 0)
+ 			return rc;
+ 	}
+ 
+ 	return 0;
+ }
+ 
+ static int seg6_fill_nla_next_csid_cfg(struct sk_buff *skb,
+ 				       struct seg6_flavors_info *finfo)
+ {
+ 	if (nla_put_u8(skb, SEG6_LOCAL_FLV_LCBLOCK_BITS, finfo->lcblock_bits))
+ 		return -EMSGSIZE;
+ 
+ 	if (nla_put_u8(skb, SEG6_LOCAL_FLV_LCNODE_FN_BITS,
+ 		       finfo->lcnode_func_bits))
+ 		return -EMSGSIZE;
+ 
+ 	return 0;
+ }
+ 
+ static int put_nla_flavors(struct sk_buff *skb, struct seg6_local_lwt *slwt)
+ {
+ 	struct seg6_flavors_info *finfo = &slwt->flv_info;
+ 	__u32 fops = finfo->flv_ops;
+ 	struct nlattr *nest;
+ 	int rc;
+ 
+ 	nest = nla_nest_start(skb, SEG6_LOCAL_FLAVORS);
+ 	if (!nest)
+ 		return -EMSGSIZE;
+ 
+ 	if (nla_put_u32(skb, SEG6_LOCAL_FLV_OPERATION, fops)) {
+ 		rc = -EMSGSIZE;
+ 		goto err;
+ 	}
+ 
+ 	if (seg6_next_csid_enabled(fops)) {
+ 		rc = seg6_fill_nla_next_csid_cfg(skb, finfo);
+ 		if (rc < 0)
+ 			goto err;
+ 	}
+ 
+ 	return nla_nest_end(skb, nest);
+ 
+ err:
+ 	nla_nest_cancel(skb, nest);
+ 	return rc;
+ }
+ 
+ static int seg6_cmp_nla_next_csid_cfg(struct seg6_flavors_info *finfo_a,
+ 				      struct seg6_flavors_info *finfo_b)
+ {
+ 	if (finfo_a->lcblock_bits != finfo_b->lcblock_bits)
+ 		return 1;
+ 
+ 	if (finfo_a->lcnode_func_bits != finfo_b->lcnode_func_bits)
+ 		return 1;
+ 
+ 	return 0;
+ }
+ 
+ static int cmp_nla_flavors(struct seg6_local_lwt *a, struct seg6_local_lwt *b)
+ {
+ 	struct seg6_flavors_info *finfo_a = &a->flv_info;
+ 	struct seg6_flavors_info *finfo_b = &b->flv_info;
+ 
+ 	if (finfo_a->flv_ops != finfo_b->flv_ops)
+ 		return 1;
+ 
+ 	if (seg6_next_csid_enabled(finfo_a->flv_ops)) {
+ 		if (seg6_cmp_nla_next_csid_cfg(finfo_a, finfo_b))
+ 			return 1;
+ 	}
+ 
+ 	return 0;
+ }
+ 
+ static int encap_size_flavors(struct seg6_local_lwt *slwt)
+ {
+ 	struct seg6_flavors_info *finfo = &slwt->flv_info;
+ 	int nlsize;
+ 
+ 	nlsize = nla_total_size(0) +	/* nest SEG6_LOCAL_FLAVORS */
+ 		 nla_total_size(4);	/* SEG6_LOCAL_FLV_OPERATION */
+ 
+ 	if (seg6_next_csid_enabled(finfo->flv_ops))
+ 		nlsize += nla_total_size(1) + /* SEG6_LOCAL_FLV_LCBLOCK_BITS */
+ 			  nla_total_size(1); /* SEG6_LOCAL_FLV_LCNODE_FN_BITS */
+ 
+ 	return nlsize;
+ }
+ 
++>>>>>>> d120d1a63b2c (net: Remove the obsolte u64_stats_fetch_*_irq() users (net).)
  struct seg6_action_param {
 -	int (*parse)(struct nlattr **attrs, struct seg6_local_lwt *slwt,
 -		     struct netlink_ext_ack *extack);
 +	int (*parse)(struct nlattr **attrs, struct seg6_local_lwt *slwt);
  	int (*put)(struct sk_buff *skb, struct seg6_local_lwt *slwt);
  	int (*cmp)(struct seg6_local_lwt *a, struct seg6_local_lwt *b);
 -
 -	/* optional destroy() callback useful for releasing resources which
 -	 * have been previously acquired in the corresponding parse()
 -	 * function.
 -	 */
 -	void (*destroy)(struct seg6_local_lwt *slwt);
  };
  
  static struct seg6_action_param seg6_action_params[SEG6_LOCAL_MAX + 1] = {
* Unmerged path net/8021q/vlan_dev.c
diff --git a/net/bridge/br_multicast.c b/net/bridge/br_multicast.c
index 15c2876dcd11..f9d35dc66681 100644
--- a/net/bridge/br_multicast.c
+++ b/net/bridge/br_multicast.c
@@ -4900,9 +4900,9 @@ void br_multicast_get_stats(const struct net_bridge *br,
 		unsigned int start;
 
 		do {
-			start = u64_stats_fetch_begin_irq(&cpu_stats->syncp);
+			start = u64_stats_fetch_begin(&cpu_stats->syncp);
 			memcpy(&temp, &cpu_stats->mstats, sizeof(temp));
-		} while (u64_stats_fetch_retry_irq(&cpu_stats->syncp, start));
+		} while (u64_stats_fetch_retry(&cpu_stats->syncp, start));
 
 		mcast_stats_add_dir(tdst.igmp_v1queries, temp.igmp_v1queries);
 		mcast_stats_add_dir(tdst.igmp_v2queries, temp.igmp_v2queries);
* Unmerged path net/bridge/br_vlan.c
* Unmerged path net/core/dev.c
* Unmerged path net/core/devlink.c
* Unmerged path net/core/drop_monitor.c
diff --git a/net/core/gen_stats.c b/net/core/gen_stats.c
index 73830f9fde84..64845cbdec3a 100644
--- a/net/core/gen_stats.c
+++ b/net/core/gen_stats.c
@@ -139,10 +139,10 @@ static void gnet_stats_add_basic_cpu(struct gnet_stats_basic_sync *bstats,
 		u64 bytes, packets;
 
 		do {
-			start = u64_stats_fetch_begin_irq(&bcpu->syncp);
+			start = u64_stats_fetch_begin(&bcpu->syncp);
 			bytes = u64_stats_read(&bcpu->bytes);
 			packets = u64_stats_read(&bcpu->packets);
-		} while (u64_stats_fetch_retry_irq(&bcpu->syncp, start));
+		} while (u64_stats_fetch_retry(&bcpu->syncp, start));
 
 		t_bytes += bytes;
 		t_packets += packets;
@@ -166,10 +166,10 @@ void gnet_stats_add_basic(struct gnet_stats_basic_sync *bstats,
 	}
 	do {
 		if (running)
-			start = u64_stats_fetch_begin_irq(&b->syncp);
+			start = u64_stats_fetch_begin(&b->syncp);
 		bytes = u64_stats_read(&b->bytes);
 		packets = u64_stats_read(&b->packets);
-	} while (running && u64_stats_fetch_retry_irq(&b->syncp, start));
+	} while (running && u64_stats_fetch_retry(&b->syncp, start));
 
 	_bstats_update(bstats, bytes, packets);
 }
@@ -191,10 +191,10 @@ static void gnet_stats_read_basic(u64 *ret_bytes, u64 *ret_packets,
 			u64 bytes, packets;
 
 			do {
-				start = u64_stats_fetch_begin_irq(&bcpu->syncp);
+				start = u64_stats_fetch_begin(&bcpu->syncp);
 				bytes = u64_stats_read(&bcpu->bytes);
 				packets = u64_stats_read(&bcpu->packets);
-			} while (u64_stats_fetch_retry_irq(&bcpu->syncp, start));
+			} while (u64_stats_fetch_retry(&bcpu->syncp, start));
 
 			t_bytes += bytes;
 			t_packets += packets;
@@ -205,10 +205,10 @@ static void gnet_stats_read_basic(u64 *ret_bytes, u64 *ret_packets,
 	}
 	do {
 		if (running)
-			start = u64_stats_fetch_begin_irq(&b->syncp);
+			start = u64_stats_fetch_begin(&b->syncp);
 		*ret_bytes = u64_stats_read(&b->bytes);
 		*ret_packets = u64_stats_read(&b->packets);
-	} while (running && u64_stats_fetch_retry_irq(&b->syncp, start));
+	} while (running && u64_stats_fetch_retry(&b->syncp, start));
 }
 
 static int
* Unmerged path net/dsa/slave.c
diff --git a/net/ipv4/af_inet.c b/net/ipv4/af_inet.c
index aeb9c53ed577..b36bc1117ded 100644
--- a/net/ipv4/af_inet.c
+++ b/net/ipv4/af_inet.c
@@ -1693,9 +1693,9 @@ u64 snmp_get_cpu_field64(void __percpu *mib, int cpu, int offt,
 	bhptr = per_cpu_ptr(mib, cpu);
 	syncp = (struct u64_stats_sync *)(bhptr + syncp_offset);
 	do {
-		start = u64_stats_fetch_begin_irq(syncp);
+		start = u64_stats_fetch_begin(syncp);
 		v = *(((u64 *)bhptr) + offt);
-	} while (u64_stats_fetch_retry_irq(syncp, start));
+	} while (u64_stats_fetch_retry(syncp, start));
 
 	return v;
 }
* Unmerged path net/ipv6/seg6_local.c
diff --git a/net/mac80211/sta_info.c b/net/mac80211/sta_info.c
index 2bb6a71c72ef..c5a952574745 100644
--- a/net/mac80211/sta_info.c
+++ b/net/mac80211/sta_info.c
@@ -2435,9 +2435,9 @@ static inline u64 sta_get_tidstats_msdu(struct ieee80211_sta_rx_stats *rxstats,
 	u64 value;
 
 	do {
-		start = u64_stats_fetch_begin_irq(&rxstats->syncp);
+		start = u64_stats_fetch_begin(&rxstats->syncp);
 		value = rxstats->msdu[tid];
-	} while (u64_stats_fetch_retry_irq(&rxstats->syncp, start));
+	} while (u64_stats_fetch_retry(&rxstats->syncp, start));
 
 	return value;
 }
@@ -2503,9 +2503,9 @@ static inline u64 sta_get_stats_bytes(struct ieee80211_sta_rx_stats *rxstats)
 	u64 value;
 
 	do {
-		start = u64_stats_fetch_begin_irq(&rxstats->syncp);
+		start = u64_stats_fetch_begin(&rxstats->syncp);
 		value = rxstats->bytes;
-	} while (u64_stats_fetch_retry_irq(&rxstats->syncp, start));
+	} while (u64_stats_fetch_retry(&rxstats->syncp, start));
 
 	return value;
 }
diff --git a/net/netfilter/ipvs/ip_vs_ctl.c b/net/netfilter/ipvs/ip_vs_ctl.c
index dc2fa1804b52..b9ef9c27b963 100644
--- a/net/netfilter/ipvs/ip_vs_ctl.c
+++ b/net/netfilter/ipvs/ip_vs_ctl.c
@@ -2185,13 +2185,13 @@ static int ip_vs_stats_percpu_show(struct seq_file *seq, void *v)
 		u64 conns, inpkts, outpkts, inbytes, outbytes;
 
 		do {
-			start = u64_stats_fetch_begin_irq(&u->syncp);
+			start = u64_stats_fetch_begin(&u->syncp);
 			conns = u->cnt.conns;
 			inpkts = u->cnt.inpkts;
 			outpkts = u->cnt.outpkts;
 			inbytes = u->cnt.inbytes;
 			outbytes = u->cnt.outbytes;
-		} while (u64_stats_fetch_retry_irq(&u->syncp, start));
+		} while (u64_stats_fetch_retry(&u->syncp, start));
 
 		seq_printf(seq, "%3X %8LX %8LX %8LX %16LX %16LX\n",
 			   i, (u64)conns, (u64)inpkts,
diff --git a/net/netfilter/nf_tables_api.c b/net/netfilter/nf_tables_api.c
index 19044ada1789..2fb51872f93c 100644
--- a/net/netfilter/nf_tables_api.c
+++ b/net/netfilter/nf_tables_api.c
@@ -1354,10 +1354,10 @@ static int nft_dump_stats(struct sk_buff *skb, struct nft_stats __percpu *stats)
 	for_each_possible_cpu(cpu) {
 		cpu_stats = per_cpu_ptr(stats, cpu);
 		do {
-			seq = u64_stats_fetch_begin_irq(&cpu_stats->syncp);
+			seq = u64_stats_fetch_begin(&cpu_stats->syncp);
 			pkts = cpu_stats->pkts;
 			bytes = cpu_stats->bytes;
-		} while (u64_stats_fetch_retry_irq(&cpu_stats->syncp, seq));
+		} while (u64_stats_fetch_retry(&cpu_stats->syncp, seq));
 		total.pkts += pkts;
 		total.bytes += bytes;
 	}
diff --git a/net/openvswitch/datapath.c b/net/openvswitch/datapath.c
index 3ea8f7bd9b69..2b699d514621 100644
--- a/net/openvswitch/datapath.c
+++ b/net/openvswitch/datapath.c
@@ -727,9 +727,9 @@ static void get_dp_stats(const struct datapath *dp, struct ovs_dp_stats *stats,
 		percpu_stats = per_cpu_ptr(dp->stats_percpu, i);
 
 		do {
-			start = u64_stats_fetch_begin_irq(&percpu_stats->syncp);
+			start = u64_stats_fetch_begin(&percpu_stats->syncp);
 			local_stats = *percpu_stats;
-		} while (u64_stats_fetch_retry_irq(&percpu_stats->syncp, start));
+		} while (u64_stats_fetch_retry(&percpu_stats->syncp, start));
 
 		stats->n_hit += local_stats.n_hit;
 		stats->n_missed += local_stats.n_missed;
diff --git a/net/openvswitch/flow_table.c b/net/openvswitch/flow_table.c
index 4c46acf842d7..4606d6973d15 100644
--- a/net/openvswitch/flow_table.c
+++ b/net/openvswitch/flow_table.c
@@ -218,9 +218,9 @@ static void tbl_mask_array_reset_counters(struct mask_array *ma)
 
 			stats = per_cpu_ptr(ma->masks_usage_stats, cpu);
 			do {
-				start = u64_stats_fetch_begin_irq(&stats->syncp);
+				start = u64_stats_fetch_begin(&stats->syncp);
 				counter = stats->usage_cntrs[i];
-			} while (u64_stats_fetch_retry_irq(&stats->syncp, start));
+			} while (u64_stats_fetch_retry(&stats->syncp, start));
 
 			ma->masks_usage_zero_cntr[i] += counter;
 		}
@@ -1147,10 +1147,9 @@ void ovs_flow_masks_rebalance(struct flow_table *table)
 
 			stats = per_cpu_ptr(ma->masks_usage_stats, cpu);
 			do {
-				start = u64_stats_fetch_begin_irq(&stats->syncp);
+				start = u64_stats_fetch_begin(&stats->syncp);
 				counter = stats->usage_cntrs[i];
-			} while (u64_stats_fetch_retry_irq(&stats->syncp,
-							   start));
+			} while (u64_stats_fetch_retry(&stats->syncp, start));
 
 			masks_and_count[i].counter += counter;
 		}
