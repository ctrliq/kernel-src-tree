net: ethernet: mtk_wed: add reset to tx_ring_setup callback

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-496.el8
commit-author Lorenzo Bianconi <lorenzo@kernel.org>
commit 23dca7a90017ff2512c501f7da4c7ca7a95c2d6e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-496.el8/23dca7a9.failed

Introduce reset parameter to mtk_wed_tx_ring_setup signature.
This is a preliminary patch to add Wireless Ethernet Dispatcher reset
support.

Co-developed-by: Sujuan Chen <sujuan.chen@mediatek.com>
	Signed-off-by: Sujuan Chen <sujuan.chen@mediatek.com>
	Signed-off-by: Lorenzo Bianconi <lorenzo@kernel.org>
	Signed-off-by: Paolo Abeni <pabeni@redhat.com>
(cherry picked from commit 23dca7a90017ff2512c501f7da4c7ca7a95c2d6e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mediatek/mtk_wed.c
#	include/linux/soc/mediatek/mtk_wed.h
diff --cc drivers/net/ethernet/mediatek/mtk_wed.c
index 420f6a7c88c7,d041615b2bac..000000000000
--- a/drivers/net/ethernet/mediatek/mtk_wed.c
+++ b/drivers/net/ethernet/mediatek/mtk_wed.c
@@@ -513,11 -1181,18 +513,25 @@@ mtk_wed_ring_alloc(struct mtk_wed_devic
  }
  
  static int
++<<<<<<< HEAD
 +mtk_wed_wdma_ring_setup(struct mtk_wed_device *dev, int idx, int size)
++=======
+ mtk_wed_wdma_rx_ring_setup(struct mtk_wed_device *dev, int idx, int size,
+ 			   bool reset)
++>>>>>>> 23dca7a90017 (net: ethernet: mtk_wed: add reset to tx_ring_setup callback)
  {
 -	u32 desc_size = sizeof(struct mtk_wdma_desc) * dev->hw->version;
 -	struct mtk_wed_ring *wdma;
 +	struct mtk_wed_ring *wdma = &dev->tx_wdma[idx];
  
++<<<<<<< HEAD
 +	if (mtk_wed_ring_alloc(dev, wdma, MTK_WED_WDMA_RING_SIZE))
++=======
+ 	if (idx >= ARRAY_SIZE(dev->rx_wdma))
+ 		return -EINVAL;
+ 
+ 	wdma = &dev->rx_wdma[idx];
+ 	if (!reset && mtk_wed_ring_alloc(dev, wdma, MTK_WED_WDMA_RING_SIZE,
+ 					 desc_size, true))
++>>>>>>> 23dca7a90017 (net: ethernet: mtk_wed: add reset to tx_ring_setup callback)
  		return -ENOMEM;
  
  	wdma_w32(dev, MTK_WDMA_RING_RX(idx) + MTK_WED_RING_OFS_BASE,
@@@ -587,12 -1383,14 +601,21 @@@ mtk_wed_dma_enable(struct mtk_wed_devic
  static void
  mtk_wed_start(struct mtk_wed_device *dev, u32 irq_mask)
  {
 +	u32 val;
  	int i;
  
++<<<<<<< HEAD
 +	for (i = 0; i < ARRAY_SIZE(dev->tx_wdma); i++)
 +		if (!dev->tx_wdma[i].desc)
 +			mtk_wed_wdma_ring_setup(dev, i, 16);
++=======
+ 	if (mtk_wed_get_rx_capa(dev) && mtk_wed_rx_buffer_alloc(dev))
+ 		return;
+ 
+ 	for (i = 0; i < ARRAY_SIZE(dev->rx_wdma); i++)
+ 		if (!dev->rx_wdma[i].desc)
+ 			mtk_wed_wdma_rx_ring_setup(dev, i, 16, false);
++>>>>>>> 23dca7a90017 (net: ethernet: mtk_wed: add reset to tx_ring_setup callback)
  
  	mtk_wed_hw_init(dev);
  	mtk_wed_configure_irq(dev, irq_mask);
@@@ -682,12 -1516,15 +706,21 @@@ mtk_wed_tx_ring_setup(struct mtk_wed_de
  	 * WDMA RX.
  	 */
  
 -	if (WARN_ON(idx >= ARRAY_SIZE(dev->tx_ring)))
 -		return -EINVAL;
 +	BUG_ON(idx >= ARRAY_SIZE(dev->tx_ring));
  
++<<<<<<< HEAD
 +	if (mtk_wed_ring_alloc(dev, ring, MTK_WED_TX_RING_SIZE))
 +		return -ENOMEM;
 +
 +	if (mtk_wed_wdma_ring_setup(dev, idx, MTK_WED_WDMA_RING_SIZE))
++=======
+ 	if (!reset && mtk_wed_ring_alloc(dev, ring, MTK_WED_TX_RING_SIZE,
+ 					 sizeof(*ring->desc), true))
+ 		return -ENOMEM;
+ 
+ 	if (mtk_wed_wdma_rx_ring_setup(dev, idx, MTK_WED_WDMA_RING_SIZE,
+ 				       reset))
++>>>>>>> 23dca7a90017 (net: ethernet: mtk_wed: add reset to tx_ring_setup callback)
  		return -ENOMEM;
  
  	ring->reg_base = MTK_WED_RING_TX(idx);
diff --cc include/linux/soc/mediatek/mtk_wed.h
index 7e00cca06709,beb190449704..000000000000
--- a/include/linux/soc/mediatek/mtk_wed.h
+++ b/include/linux/soc/mediatek/mtk_wed.h
@@@ -59,6 -158,8 +59,11 @@@ struct mtk_wed_device 
  struct mtk_wed_ops {
  	int (*attach)(struct mtk_wed_device *dev);
  	int (*tx_ring_setup)(struct mtk_wed_device *dev, int ring,
++<<<<<<< HEAD
++=======
+ 			     void __iomem *regs, bool reset);
+ 	int (*rx_ring_setup)(struct mtk_wed_device *dev, int ring,
++>>>>>>> 23dca7a90017 (net: ethernet: mtk_wed: add reset to tx_ring_setup callback)
  			     void __iomem *regs);
  	int (*txfree_ring_setup)(struct mtk_wed_device *dev,
  				 void __iomem *regs);
* Unmerged path drivers/net/ethernet/mediatek/mtk_wed.c
diff --git a/drivers/net/wireless/mediatek/mt76/dma.c b/drivers/net/wireless/mediatek/mt76/dma.c
index 7378c4d1e156..28cbf07046c3 100644
--- a/drivers/net/wireless/mediatek/mt76/dma.c
+++ b/drivers/net/wireless/mediatek/mt76/dma.c
@@ -502,7 +502,7 @@ mt76_dma_wed_setup(struct mt76_dev *dev, struct mt76_queue *q)
 
 	switch (type) {
 	case MT76_WED_Q_TX:
-		ret = mtk_wed_device_tx_ring_setup(wed, ring, q->regs);
+		ret = mtk_wed_device_tx_ring_setup(wed, ring, q->regs, false);
 		if (!ret)
 			q->wed_regs = wed->tx_ring[ring].reg_base;
 		break;
* Unmerged path include/linux/soc/mediatek/mtk_wed.h
