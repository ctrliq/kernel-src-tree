wifi: mac80211: configure puncturing bitmap

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-496.el8
commit-author Aloka Dixit <quic_alokad@quicinc.com>
commit 2cc25e4b2a04cdd90dbb2916678745565cc4aeed
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-496.el8/2cc25e4b.failed

- Configure the bitmap in link_conf and notify the driver.
- Modify 'change' in ieee80211_start_ap() from u32 to u64 to support
BSS_CHANGED_EHT_PUNCTURING.
- Propagate the bitmap in channel switch events to userspace.

	Signed-off-by: Aloka Dixit <quic_alokad@quicinc.com>
	Signed-off-by: Muna Sinada <quic_msinada@quicinc.com>
Link: https://lore.kernel.org/r/20230131001227.25014-5-quic_alokad@quicinc.com
	Signed-off-by: Johannes Berg <johannes.berg@intel.com>
(cherry picked from commit 2cc25e4b2a04cdd90dbb2916678745565cc4aeed)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/mac80211/cfg.c
diff --cc net/mac80211/cfg.c
index b5f3e641125e,d2519a4db653..000000000000
--- a/net/mac80211/cfg.c
+++ b/net/mac80211/cfg.c
@@@ -3587,7 -3598,8 +3598,12 @@@ static int __ieee80211_csa_finalize(str
  	if (err)
  		return err;
  
++<<<<<<< HEAD
 +	cfg80211_ch_switch_notify(sdata->dev, &sdata->deflink.csa_chandef, 0);
++=======
+ 	cfg80211_ch_switch_notify(sdata->dev, &sdata->deflink.csa_chandef, 0,
+ 				  sdata->vif.bss_conf.eht_puncturing);
++>>>>>>> 2cc25e4b2a04 (wifi: mac80211: configure puncturing bitmap)
  
  	return 0;
  }
@@@ -3859,7 -3875,8 +3879,12 @@@ __ieee80211_channel_switch(struct wiph
  
  	cfg80211_ch_switch_started_notify(sdata->dev,
  					  &sdata->deflink.csa_chandef, 0,
++<<<<<<< HEAD
 +					  params->count, params->block_tx);
++=======
+ 					  params->count, params->block_tx,
+ 					  sdata->vif.bss_conf.csa_punct_bitmap);
++>>>>>>> 2cc25e4b2a04 (wifi: mac80211: configure puncturing bitmap)
  
  	if (changed) {
  		ieee80211_link_info_change_notify(sdata, &sdata->deflink,
diff --git a/include/net/mac80211.h b/include/net/mac80211.h
index 097ae6183489..dd5306a52e89 100644
--- a/include/net/mac80211.h
+++ b/include/net/mac80211.h
@@ -645,6 +645,7 @@ struct ieee80211_fils_discovery {
  * @csa_active: marks whether a channel switch is going on. Internally it is
  *	write-protected by sdata_lock and local->mtx so holding either is fine
  *	for read access.
+ * @csa_punct_bitmap: new puncturing bitmap for channel switch
  * @mu_mimo_owner: indicates interface owns MU-MIMO capability
  * @chanctx_conf: The channel context this interface is assigned to, or %NULL
  *	when it is not assigned. This pointer is RCU-protected due to the TX
@@ -741,6 +742,8 @@ struct ieee80211_bss_conf {
 	u16 eht_puncturing;
 
 	bool csa_active;
+	u16 csa_punct_bitmap;
+
 	bool mu_mimo_owner;
 	struct ieee80211_chanctx_conf __rcu *chanctx_conf;
 
* Unmerged path net/mac80211/cfg.c
