net: ethernet: mtk_wed: rename tx_wdma array in rx_wdma

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-496.el8
commit-author Lorenzo Bianconi <lorenzo@kernel.org>
commit 084d60ce0c6cef96024d53a58b92d7ff2d8b9318
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-496.el8/084d60ce.failed

Rename tx_wdma queue array in rx_wdma since this is rx side of wdma soc.
Moreover rename mtk_wed_wdma_ring_setup routine in
mtk_wed_wdma_rx_ring_setup()

	Signed-off-by: Lorenzo Bianconi <lorenzo@kernel.org>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 084d60ce0c6cef96024d53a58b92d7ff2d8b9318)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mediatek/mtk_wed.c
diff --cc drivers/net/ethernet/mediatek/mtk_wed.c
index 420f6a7c88c7,e904596e67de..000000000000
--- a/drivers/net/ethernet/mediatek/mtk_wed.c
+++ b/drivers/net/ethernet/mediatek/mtk_wed.c
@@@ -513,11 -688,12 +513,16 @@@ mtk_wed_ring_alloc(struct mtk_wed_devic
  }
  
  static int
- mtk_wed_wdma_ring_setup(struct mtk_wed_device *dev, int idx, int size)
+ mtk_wed_wdma_rx_ring_setup(struct mtk_wed_device *dev, int idx, int size)
  {
++<<<<<<< HEAD
 +	struct mtk_wed_ring *wdma = &dev->tx_wdma[idx];
++=======
+ 	u32 desc_size = sizeof(struct mtk_wdma_desc) * dev->hw->version;
+ 	struct mtk_wed_ring *wdma = &dev->rx_wdma[idx];
++>>>>>>> 084d60ce0c6c (net: ethernet: mtk_wed: rename tx_wdma array in rx_wdma)
  
 -	if (mtk_wed_ring_alloc(dev, wdma, MTK_WED_WDMA_RING_SIZE, desc_size))
 +	if (mtk_wed_ring_alloc(dev, wdma, MTK_WED_WDMA_RING_SIZE))
  		return -ENOMEM;
  
  	wdma_w32(dev, MTK_WDMA_RING_RX(idx) + MTK_WED_RING_OFS_BASE,
@@@ -587,12 -803,11 +592,12 @@@ mtk_wed_dma_enable(struct mtk_wed_devic
  static void
  mtk_wed_start(struct mtk_wed_device *dev, u32 irq_mask)
  {
 +	u32 val;
  	int i;
  
- 	for (i = 0; i < ARRAY_SIZE(dev->tx_wdma); i++)
- 		if (!dev->tx_wdma[i].desc)
- 			mtk_wed_wdma_ring_setup(dev, i, 16);
+ 	for (i = 0; i < ARRAY_SIZE(dev->rx_wdma); i++)
+ 		if (!dev->rx_wdma[i].desc)
+ 			mtk_wed_wdma_rx_ring_setup(dev, i, 16);
  
  	mtk_wed_hw_init(dev);
  	mtk_wed_configure_irq(dev, irq_mask);
@@@ -684,10 -912,11 +689,10 @@@ mtk_wed_tx_ring_setup(struct mtk_wed_de
  
  	BUG_ON(idx >= ARRAY_SIZE(dev->tx_ring));
  
 -	if (mtk_wed_ring_alloc(dev, ring, MTK_WED_TX_RING_SIZE,
 -			       sizeof(*ring->desc)))
 +	if (mtk_wed_ring_alloc(dev, ring, MTK_WED_TX_RING_SIZE))
  		return -ENOMEM;
  
- 	if (mtk_wed_wdma_ring_setup(dev, idx, MTK_WED_WDMA_RING_SIZE))
+ 	if (mtk_wed_wdma_rx_ring_setup(dev, idx, MTK_WED_WDMA_RING_SIZE))
  		return -ENOMEM;
  
  	ring->reg_base = MTK_WED_RING_TX(idx);
* Unmerged path drivers/net/ethernet/mediatek/mtk_wed.c
diff --git a/include/linux/soc/mediatek/mtk_wed.h b/include/linux/soc/mediatek/mtk_wed.h
index 7e00cca06709..dc799d1a82f0 100644
--- a/include/linux/soc/mediatek/mtk_wed.h
+++ b/include/linux/soc/mediatek/mtk_wed.h
@@ -7,6 +7,7 @@
 #include <linux/pci.h>
 
 #define MTK_WED_TX_QUEUES		2
+#define MTK_WED_RX_QUEUES		2
 
 struct mtk_wed_hw;
 struct mtk_wdma_desc;
@@ -31,7 +32,7 @@ struct mtk_wed_device {
 
 	struct mtk_wed_ring tx_ring[MTK_WED_TX_QUEUES];
 	struct mtk_wed_ring txfree_ring;
-	struct mtk_wed_ring tx_wdma[MTK_WED_TX_QUEUES];
+	struct mtk_wed_ring rx_wdma[MTK_WED_RX_QUEUES];
 
 	struct {
 		int size;
