net/sched: cls_api: Move call to tcf_exts_miss_cookie_base_destroy()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-496.el8
commit-author Nathan Chancellor <nathan@kernel.org>
commit 37e1f3acc339b28493eb3dad571c3f01b6af86f6
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-496.el8/37e1f3ac.failed

When CONFIG_NET_CLS_ACT is disabled:

  ../net/sched/cls_api.c:141:13: warning: 'tcf_exts_miss_cookie_base_destroy' defined but not used [-Wunused-function]
    141 | static void tcf_exts_miss_cookie_base_destroy(struct tcf_exts *exts)
        |             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Due to the way the code is structured, it is possible for a definition
of tcf_exts_miss_cookie_base_destroy() to be present without actually
being used. Its single callsite is in an '#ifdef CONFIG_NET_CLS_ACT'
block but a definition will always be present in the file. The version
of tcf_exts_miss_cookie_base_destroy() that actually does something
depends on CONFIG_NET_TC_SKB_EXT, so the stub function is used in both
CONFIG_NET_CLS_ACT=n and CONFIG_NET_CLS_ACT=y + CONFIG_NET_TC_SKB_EXT=n
configurations.

Move the call to tcf_exts_miss_cookie_base_destroy() in
tcf_exts_destroy() out of the '#ifdef CONFIG_NET_CLS_ACT', so that it
always appears used to the compiler, while not changing any behavior
with any of the various configuration combinations.

Fixes: 80cd22c35c90 ("net/sched: cls_api: Support hardware miss to tc action")
	Signed-off-by: Nathan Chancellor <nathan@kernel.org>
	Reviewed-by: Simon Horman <simon.horman@corigine.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 37e1f3acc339b28493eb3dad571c3f01b6af86f6)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/sched/cls_api.c
diff --cc net/sched/cls_api.c
index cbeb5ab635f8,2a6b6be0811b..000000000000
--- a/net/sched/cls_api.c
+++ b/net/sched/cls_api.c
@@@ -3061,8 -3202,47 +3061,13 @@@ out
  	return skb->len;
  }
  
 -int tcf_exts_init_ex(struct tcf_exts *exts, struct net *net, int action,
 -		     int police, struct tcf_proto *tp, u32 handle,
 -		     bool use_action_miss)
 -{
 -	int err = 0;
 -
 -#ifdef CONFIG_NET_CLS_ACT
 -	exts->type = 0;
 -	exts->nr_actions = 0;
 -	/* Note: we do not own yet a reference on net.
 -	 * This reference might be taken later from tcf_exts_get_net().
 -	 */
 -	exts->net = net;
 -	exts->actions = kcalloc(TCA_ACT_MAX_PRIO, sizeof(struct tc_action *),
 -				GFP_KERNEL);
 -	if (!exts->actions)
 -		return -ENOMEM;
 -#endif
 -
 -	exts->action = action;
 -	exts->police = police;
 -
 -	if (!use_action_miss)
 -		return 0;
 -
 -	err = tcf_exts_miss_cookie_base_alloc(exts, tp, handle);
 -	if (err)
 -		goto err_miss_alloc;
 -
 -	return 0;
 -
 -err_miss_alloc:
 -	tcf_exts_destroy(exts);
 -	return err;
 -}
 -EXPORT_SYMBOL(tcf_exts_init_ex);
 -
  void tcf_exts_destroy(struct tcf_exts *exts)
  {
++<<<<<<< HEAD
++=======
+ 	tcf_exts_miss_cookie_base_destroy(exts);
+ 
++>>>>>>> 37e1f3acc339 (net/sched: cls_api: Move call to tcf_exts_miss_cookie_base_destroy())
  #ifdef CONFIG_NET_CLS_ACT
  	if (exts->actions) {
  		tcf_action_destroy(exts->actions, TCA_ACT_UNBIND);
* Unmerged path net/sched/cls_api.c
