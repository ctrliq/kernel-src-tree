x86/microcode/AMD: Fix mixed steppings support

jira LE-1907
cve CVE-2023-20593
Rebuild_History Non-Buildable kernel-rt-5.14.0-284.30.1.rt14.315.el9_2
commit-author Borislav Petkov (AMD) <bp@alien8.de>
commit 7ff6edf4fef38ab404ee7861f257e28eaaeed35f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-rt-5.14.0-284.30.1.rt14.315.el9_2/7ff6edf4.failed

The AMD side of the loader has always claimed to support mixed
steppings. But somewhere along the way, it broke that by assuming that
the cached patch blob is a single one instead of it being one per
*node*.

So turn it into a per-node one so that each node can stash the blob
relevant for it.

  [ NB: Fixes tag is not really the exactly correct one but it is good
    enough. ]

Fixes: fe055896c040 ("x86/microcode: Merge the early microcode loader")
	Signed-off-by: Borislav Petkov (AMD) <bp@alien8.de>
	Cc: <stable@kernel.org> # 2355370cd941 ("x86/microcode/amd: Remove load_microcode_amd()'s bsp parameter")
	Cc: <stable@kernel.org> # a5ad92134bd1 ("x86/microcode/AMD: Add a @cpu parameter to the reloading functions")
Link: https://lore.kernel.org/r/20230130161709.11615-4-bp@alien8.de
(cherry picked from commit 7ff6edf4fef38ab404ee7861f257e28eaaeed35f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kernel/cpu/microcode/amd.c
diff --cc arch/x86/kernel/cpu/microcode/amd.c
index 1d62d70761f1,9eb457b10341..000000000000
--- a/arch/x86/kernel/cpu/microcode/amd.c
+++ b/arch/x86/kernel/cpu/microcode/amd.c
@@@ -578,12 -580,12 +580,12 @@@ int __init save_microcode_in_initrd_amd
  	return 0;
  }
  
 -void reload_ucode_amd(unsigned int cpu)
 +void reload_ucode_amd(void)
  {
- 	struct microcode_amd *mc;
  	u32 rev, dummy __always_unused;
+ 	struct microcode_amd *mc;
  
- 	mc = (struct microcode_amd *)amd_ucode_patch;
+ 	mc = (struct microcode_amd *)amd_ucode_patch[cpu_to_node(cpu)];
  
  	rdmsr(MSR_AMD64_PATCH_LEVEL, rev, dummy);
  
@@@ -850,9 -852,10 +852,11 @@@ static enum ucode_state __load_microcod
  	return UCODE_OK;
  }
  
 -static enum ucode_state load_microcode_amd(u8 family, const u8 *data, size_t size)
 +static enum ucode_state
 +load_microcode_amd(bool save, u8 family, const u8 *data, size_t size)
  {
+ 	struct cpuinfo_x86 *c;
+ 	unsigned int nid, cpu;
  	struct ucode_patch *p;
  	enum ucode_state ret;
  
@@@ -865,22 -868,22 +869,31 @@@
  		return ret;
  	}
  
- 	p = find_patch(0);
- 	if (!p) {
- 		return ret;
- 	} else {
- 		if (boot_cpu_data.microcode >= p->patch_id)
- 			return ret;
+ 	for_each_node(nid) {
+ 		cpu = cpumask_first(cpumask_of_node(nid));
+ 		c = &cpu_data(cpu);
+ 
+ 		p = find_patch(cpu);
+ 		if (!p)
+ 			continue;
+ 
+ 		if (c->microcode >= p->patch_id)
+ 			continue;
  
  		ret = UCODE_NEW;
- 	}
  
++<<<<<<< HEAD
 +	/* save BSP's matching patch for early load */
 +	if (!save)
 +		return ret;
 +
 +	memset(amd_ucode_patch, 0, PATCH_MAX_SIZE);
 +	memcpy(amd_ucode_patch, p->data, min_t(u32, p->size, PATCH_MAX_SIZE));
++=======
+ 		memset(&amd_ucode_patch[nid], 0, PATCH_MAX_SIZE);
+ 		memcpy(&amd_ucode_patch[nid], p->data, min_t(u32, p->size, PATCH_MAX_SIZE));
+ 	}
++>>>>>>> 7ff6edf4fef3 (x86/microcode/AMD: Fix mixed steppings support)
  
  	return ret;
  }
* Unmerged path arch/x86/kernel/cpu/microcode/amd.c
