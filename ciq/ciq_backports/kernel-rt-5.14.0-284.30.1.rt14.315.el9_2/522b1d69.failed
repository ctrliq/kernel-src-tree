x86/cpu/amd: Add a Zenbleed fix

jira LE-1907
cve CVE-2023-20593
Rebuild_History Non-Buildable kernel-rt-5.14.0-284.30.1.rt14.315.el9_2
commit-author Borislav Petkov (AMD) <bp@alien8.de>
commit 522b1d69219d8f083173819fde04f994aa051a98
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-rt-5.14.0-284.30.1.rt14.315.el9_2/522b1d69.failed

Add a fix for the Zen2 VZEROUPPER data corruption bug where under
certain circumstances executing VZEROUPPER can cause register
corruption or leak data.

The optimal fix is through microcode but in the case the proper
microcode revision has not been applied, enable a fallback fix using
a chicken bit.

	Signed-off-by: Borislav Petkov (AMD) <bp@alien8.de>
(cherry picked from commit 522b1d69219d8f083173819fde04f994aa051a98)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/include/asm/microcode_amd.h
#	arch/x86/kernel/cpu/amd.c
#	arch/x86/kernel/cpu/common.c
diff --cc arch/x86/include/asm/microcode_amd.h
index 7063b5a43220,9675c621c1ca..000000000000
--- a/arch/x86/include/asm/microcode_amd.h
+++ b/arch/x86/include/asm/microcode_amd.h
@@@ -47,12 -47,14 +47,22 @@@ struct microcode_amd 
  extern void __init load_ucode_amd_bsp(unsigned int family);
  extern void load_ucode_amd_ap(unsigned int family);
  extern int __init save_microcode_in_initrd_amd(unsigned int family);
++<<<<<<< HEAD
 +void reload_ucode_amd(void);
++=======
+ void reload_ucode_amd(unsigned int cpu);
+ extern void amd_check_microcode(void);
++>>>>>>> 522b1d69219d (x86/cpu/amd: Add a Zenbleed fix)
  #else
  static inline void __init load_ucode_amd_bsp(unsigned int family) {}
  static inline void load_ucode_amd_ap(unsigned int family) {}
  static inline int __init
  save_microcode_in_initrd_amd(unsigned int family) { return -EINVAL; }
++<<<<<<< HEAD
 +static inline void reload_ucode_amd(void) {}
++=======
+ static inline void reload_ucode_amd(unsigned int cpu) {}
+ static inline void amd_check_microcode(void) {}
++>>>>>>> 522b1d69219d (x86/cpu/amd: Add a Zenbleed fix)
  #endif
  #endif /* _ASM_X86_MICROCODE_AMD_H */
diff --cc arch/x86/kernel/cpu/amd.c
index 30e39e2f3ed9,26ad7ca423e7..000000000000
--- a/arch/x86/kernel/cpu/amd.c
+++ b/arch/x86/kernel/cpu/amd.c
@@@ -1053,6 -1117,19 +1099,22 @@@ static void init_amd(struct cpuinfo_x8
  		msr_set_bit(MSR_K7_HWCR, MSR_K7_HWCR_IRPERF_EN_BIT);
  
  	check_null_seg_clears_base(c);
++<<<<<<< HEAD
++=======
+ 
+ 	/*
+ 	 * Make sure EFER[AIBRSE - Automatic IBRS Enable] is set. The APs are brought up
+ 	 * using the trampoline code and as part of it, MSR_EFER gets prepared there in
+ 	 * order to be replicated onto them. Regardless, set it here again, if not set,
+ 	 * to protect against any future refactoring/code reorganization which might
+ 	 * miss setting this important bit.
+ 	 */
+ 	if (spectre_v2_in_eibrs_mode(spectre_v2_enabled) &&
+ 	    cpu_has(c, X86_FEATURE_AUTOIBRS))
+ 		WARN_ON_ONCE(msr_set_bit(MSR_EFER, _EFER_AUTOIBRS));
+ 
+ 	zenbleed_check(c);
++>>>>>>> 522b1d69219d (x86/cpu/amd: Add a Zenbleed fix)
  }
  
  #ifdef CONFIG_X86_32
diff --cc arch/x86/kernel/cpu/common.c
index d9c43da4eea0,0ba1067f4e5f..000000000000
--- a/arch/x86/kernel/cpu/common.c
+++ b/arch/x86/kernel/cpu/common.c
@@@ -2297,19 -2287,12 +2297,25 @@@ void microcode_check(void
  
  	perf_check_microcode();
  
++<<<<<<< HEAD
 +	/* Reload CPUID max function as it might've changed. */
 +	info.cpuid_level = cpuid_eax(0);
++=======
+ 	amd_check_microcode();
+ 
+ 	store_cpu_caps(&curr_info);
++>>>>>>> 522b1d69219d (x86/cpu/amd: Add a Zenbleed fix)
 +
 +	/*
 +	 * Copy all capability leafs to pick up the synthetic ones so that
 +	 * memcmp() below doesn't fail on that. The ones coming from CPUID will
 +	 * get overwritten in get_cpu_cap().
 +	 */
 +	memcpy(&info.x86_capability, &boot_cpu_data.x86_capability, sizeof(info.x86_capability));
 +
 +	get_cpu_cap(&info);
  
 -	if (!memcmp(&prev_info->x86_capability, &curr_info.x86_capability,
 -		    sizeof(prev_info->x86_capability)))
 +	if (!memcmp(&info.x86_capability, &boot_cpu_data.x86_capability, sizeof(info.x86_capability)))
  		return;
  
  	pr_warn("x86/CPU: CPU features have changed after loading microcode, but might not take effect.\n");
diff --git a/arch/x86/include/asm/microcode.h b/arch/x86/include/asm/microcode.h
index aa675783412f..5deab75c0ad4 100644
--- a/arch/x86/include/asm/microcode.h
+++ b/arch/x86/include/asm/microcode.h
@@ -5,6 +5,7 @@
 #include <asm/cpu.h>
 #include <linux/earlycpio.h>
 #include <linux/initrd.h>
+#include <asm/microcode_amd.h>
 
 struct ucode_patch {
 	struct list_head plist;
* Unmerged path arch/x86/include/asm/microcode_amd.h
diff --git a/arch/x86/include/asm/msr-index.h b/arch/x86/include/asm/msr-index.h
index 1958598a2f93..f0f5f45d440b 100644
--- a/arch/x86/include/asm/msr-index.h
+++ b/arch/x86/include/asm/msr-index.h
@@ -527,6 +527,7 @@
 #define MSR_AMD64_DE_CFG		0xc0011029
 #define MSR_AMD64_DE_CFG_LFENCE_SERIALIZE_BIT	 1
 #define MSR_AMD64_DE_CFG_LFENCE_SERIALIZE	BIT_ULL(MSR_AMD64_DE_CFG_LFENCE_SERIALIZE_BIT)
+#define MSR_AMD64_DE_CFG_ZEN2_FP_BACKUP_FIX_BIT 9
 
 #define MSR_AMD64_BU_CFG2		0xc001102a
 #define MSR_AMD64_IBSFETCHCTL		0xc0011030
* Unmerged path arch/x86/kernel/cpu/amd.c
* Unmerged path arch/x86/kernel/cpu/common.c
