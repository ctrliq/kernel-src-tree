NFSD: Fix problem of COMMIT and NFS4ERR_DELAY in infinite loop

jira LE-1907
Rebuild_History Non-Buildable kernel-rt-5.14.0-284.30.1.rt14.315.el9_2
commit-author Dai Ngo <dai.ngo@oracle.com>
commit 147abcacee33781e75588869e944ddb07528a897
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-rt-5.14.0-284.30.1.rt14.315.el9_2/147abcac.failed

The following request sequence to the same file causes the NFS client and
server getting into an infinite loop with COMMIT and NFS4ERR_DELAY:

OPEN
REMOVE
WRITE
COMMIT

Problem reported by recall11, recall12, recall14, recall20, recall22,
recall40, recall42, recall48, recall50 of nfstest suite.

This patch restores the handling of race condition in nfsd_file_do_acquire
with unlink to that prior of the regression.

Fixes: ac3a2585f018 ("nfsd: rework refcounting in filecache")
	Signed-off-by: Dai Ngo <dai.ngo@oracle.com>
	Reviewed-by: Jeff Layton <jlayton@kernel.org>
	Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
(cherry picked from commit 147abcacee33781e75588869e944ddb07528a897)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/nfsd/filecache.c
diff --cc fs/nfsd/filecache.c
index a3be16080ed9,ee9c923192e0..000000000000
--- a/fs/nfsd/filecache.c
+++ b/fs/nfsd/filecache.c
@@@ -1168,13 -1098,16 +1168,17 @@@ open_file
  	 * If construction failed, or we raced with a call to unlink()
  	 * then unhash.
  	 */
++<<<<<<< HEAD
 +	if (status == nfs_ok && key.inode->i_nlink == 0)
 +		status = nfserr_jukebox;
 +	if (status != nfs_ok)
++=======
+ 	if (status != nfs_ok || inode->i_nlink == 0)
++>>>>>>> 147abcacee33 (NFSD: Fix problem of COMMIT and NFS4ERR_DELAY in infinite loop)
  		nfsd_file_unhash(nf);
 -	clear_and_wake_up_bit(NFSD_FILE_PENDING, &nf->nf_flags);
 -	if (status == nfs_ok)
 -		goto out;
 -
 -construction_err:
 -	if (refcount_dec_and_test(&nf->nf_ref))
 -		nfsd_file_free(nf);
 -	nf = NULL;
 +	clear_bit_unlock(NFSD_FILE_PENDING, &nf->nf_flags);
 +	smp_mb__after_atomic();
 +	wake_up_bit(&nf->nf_flags, NFSD_FILE_PENDING);
  	goto out;
  }
  
* Unmerged path fs/nfsd/filecache.c
