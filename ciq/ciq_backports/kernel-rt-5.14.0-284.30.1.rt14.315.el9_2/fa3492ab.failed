rxrpc: Trace rxrpc_bundle refcount

jira LE-1907
Rebuild_History Non-Buildable kernel-rt-5.14.0-284.30.1.rt14.315.el9_2
commit-author David Howells <dhowells@redhat.com>
commit fa3492abb64b93b2b5d6fdf7a5b687a1fa810d74
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-rt-5.14.0-284.30.1.rt14.315.el9_2/fa3492ab.failed

Add a tracepoint for the rxrpc_bundle refcounting.

	Signed-off-by: David Howells <dhowells@redhat.com>
cc: Marc Dionne <marc.dionne@auristor.com>
cc: linux-afs@lists.infradead.org
(cherry picked from commit fa3492abb64b93b2b5d6fdf7a5b687a1fa810d74)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/rxrpc/conn_client.c
#	net/rxrpc/conn_object.c
diff --cc net/rxrpc/conn_client.c
index 827c1308297c,34ff6fa85c32..000000000000
--- a/net/rxrpc/conn_client.c
+++ b/net/rxrpc/conn_client.c
@@@ -140,7 -150,8 +145,12 @@@ struct rxrpc_bundle *rxrpc_get_bundle(s
  
  static void rxrpc_free_bundle(struct rxrpc_bundle *bundle)
  {
++<<<<<<< HEAD
 +	rxrpc_put_peer(bundle->params.peer);
++=======
+ 	trace_rxrpc_bundle(bundle->debug_id, 1, rxrpc_bundle_free);
+ 	rxrpc_put_peer(bundle->peer, rxrpc_peer_put_bundle);
++>>>>>>> fa3492abb64b (rxrpc: Trace rxrpc_bundle refcount)
  	kfree(bundle);
  }
  
@@@ -195,14 -211,13 +204,21 @@@ rxrpc_alloc_client_connection(struct rx
  	list_add_tail(&conn->proc_link, &rxnet->conn_proc_list);
  	write_unlock(&rxnet->conn_lock);
  
++<<<<<<< HEAD
 +	rxrpc_get_bundle(bundle);
 +	rxrpc_get_peer(conn->params.peer);
 +	rxrpc_get_local(conn->params.local);
 +	key_get(conn->params.key);
++=======
+ 	rxrpc_get_bundle(bundle, rxrpc_bundle_get_client_conn);
+ 	rxrpc_get_peer(conn->peer, rxrpc_peer_get_client_conn);
+ 	rxrpc_get_local(conn->local, rxrpc_local_get_client_conn);
+ 	key_get(conn->key);
++>>>>>>> fa3492abb64b (rxrpc: Trace rxrpc_bundle refcount)
  
 -	trace_rxrpc_conn(conn->debug_id, refcount_read(&conn->ref),
 -			 rxrpc_conn_new_client);
 +	trace_rxrpc_conn(conn->debug_id, rxrpc_conn_new_client,
 +			 refcount_read(&conn->ref),
 +			 __builtin_return_address(0));
  
  	atomic_inc(&rxnet->nr_client_conns);
  	trace_rxrpc_client(conn, -1, rxrpc_client_alloc);
diff --cc net/rxrpc/conn_object.c
index 156bd26daf74,f7c271a740ed..000000000000
--- a/net/rxrpc/conn_object.c
+++ b/net/rxrpc/conn_object.c
@@@ -362,13 -362,13 +362,19 @@@ static void rxrpc_destroy_connection(st
  	rxrpc_purge_queue(&conn->rx_queue);
  
  	conn->security->clear(conn);
++<<<<<<< HEAD
 +	key_put(conn->params.key);
 +	rxrpc_put_bundle(conn->bundle);
 +	rxrpc_put_peer(conn->params.peer);
++=======
+ 	key_put(conn->key);
+ 	rxrpc_put_bundle(conn->bundle, rxrpc_bundle_put_conn);
+ 	rxrpc_put_peer(conn->peer, rxrpc_peer_put_conn);
++>>>>>>> fa3492abb64b (rxrpc: Trace rxrpc_bundle refcount)
  
 -	if (atomic_dec_and_test(&conn->local->rxnet->nr_conns))
 -		wake_up_var(&conn->local->rxnet->nr_conns);
 -	rxrpc_put_local(conn->local, rxrpc_local_put_kill_conn);
 +	if (atomic_dec_and_test(&conn->params.local->rxnet->nr_conns))
 +		wake_up_var(&conn->params.local->rxnet->nr_conns);
 +	rxrpc_put_local(conn->params.local);
  
  	kfree(conn);
  	_leave("");
diff --git a/include/trace/events/rxrpc.h b/include/trace/events/rxrpc.h
index 2a52121d73a0..7bc8c0fe0394 100644
--- a/include/trace/events/rxrpc.h
+++ b/include/trace/events/rxrpc.h
@@ -45,6 +45,15 @@
 	EM(rxrpc_peer_processing,		"PRO") \
 	E_(rxrpc_peer_put,			"PUT")
 
+#define rxrpc_bundle_traces \
+	EM(rxrpc_bundle_free,			"FREE        ") \
+	EM(rxrpc_bundle_get_client_call,	"GET clt-call") \
+	EM(rxrpc_bundle_get_client_conn,	"GET clt-conn") \
+	EM(rxrpc_bundle_get_service_conn,	"GET svc-conn") \
+	EM(rxrpc_bundle_put_conn,		"PUT conn    ") \
+	EM(rxrpc_bundle_put_discard,		"PUT discard ") \
+	E_(rxrpc_bundle_new,			"NEW         ")
+
 #define rxrpc_conn_traces \
 	EM(rxrpc_conn_got,			"GOT") \
 	EM(rxrpc_conn_new_client,		"NWc") \
@@ -305,6 +314,7 @@
 #define EM(a, b) a,
 #define E_(a, b) a
 
+enum rxrpc_bundle_trace		{ rxrpc_bundle_traces } __mode(byte);
 enum rxrpc_call_trace		{ rxrpc_call_traces } __mode(byte);
 enum rxrpc_client_trace		{ rxrpc_client_traces } __mode(byte);
 enum rxrpc_congest_change	{ rxrpc_congest_changes } __mode(byte);
@@ -334,6 +344,7 @@ enum rxrpc_txqueue_trace	{ rxrpc_txqueue_traces } __mode(byte);
 #define EM(a, b) TRACE_DEFINE_ENUM(a);
 #define E_(a, b) TRACE_DEFINE_ENUM(a);
 
+rxrpc_bundle_traces;
 rxrpc_call_traces;
 rxrpc_client_traces;
 rxrpc_congest_changes;
@@ -415,6 +426,29 @@ TRACE_EVENT(rxrpc_peer,
 		      __entry->where)
 	    );
 
+TRACE_EVENT(rxrpc_bundle,
+	    TP_PROTO(unsigned int bundle_debug_id, int ref, enum rxrpc_bundle_trace why),
+
+	    TP_ARGS(bundle_debug_id, ref, why),
+
+	    TP_STRUCT__entry(
+		    __field(unsigned int,	bundle		)
+		    __field(int,		ref		)
+		    __field(int,		why		)
+			     ),
+
+	    TP_fast_assign(
+		    __entry->bundle = bundle_debug_id;
+		    __entry->ref = ref;
+		    __entry->why = why;
+			   ),
+
+	    TP_printk("CB=%08x %s r=%d",
+		      __entry->bundle,
+		      __print_symbolic(__entry->why, rxrpc_bundle_traces),
+		      __entry->ref)
+	    );
+
 TRACE_EVENT(rxrpc_conn,
 	    TP_PROTO(unsigned int conn_debug_id, enum rxrpc_conn_trace op,
 		     int usage, const void *where),
diff --git a/net/rxrpc/ar-internal.h b/net/rxrpc/ar-internal.h
index 46ce41afb431..6cbde770f903 100644
--- a/net/rxrpc/ar-internal.h
+++ b/net/rxrpc/ar-internal.h
@@ -863,8 +863,8 @@ extern unsigned long rxrpc_conn_idle_client_fast_expiry;
 extern struct idr rxrpc_client_conn_ids;
 
 void rxrpc_destroy_client_conn_ids(void);
-struct rxrpc_bundle *rxrpc_get_bundle(struct rxrpc_bundle *);
-void rxrpc_put_bundle(struct rxrpc_bundle *);
+struct rxrpc_bundle *rxrpc_get_bundle(struct rxrpc_bundle *, enum rxrpc_bundle_trace);
+void rxrpc_put_bundle(struct rxrpc_bundle *, enum rxrpc_bundle_trace);
 int rxrpc_connect_call(struct rxrpc_sock *, struct rxrpc_call *,
 		       struct rxrpc_conn_parameters *, struct sockaddr_rxrpc *,
 		       gfp_t);
* Unmerged path net/rxrpc/conn_client.c
* Unmerged path net/rxrpc/conn_object.c
diff --git a/net/rxrpc/conn_service.c b/net/rxrpc/conn_service.c
index 6e6aa02c6f9e..1a5ea3491d4d 100644
--- a/net/rxrpc/conn_service.c
+++ b/net/rxrpc/conn_service.c
@@ -133,7 +133,8 @@ struct rxrpc_connection *rxrpc_prealloc_service_connection(struct rxrpc_net *rxn
 		 */
 		conn->state = RXRPC_CONN_SERVICE_PREALLOC;
 		refcount_set(&conn->ref, 2);
-		conn->bundle = rxrpc_get_bundle(&rxrpc_service_dummy_bundle);
+		conn->bundle = rxrpc_get_bundle(&rxrpc_service_dummy_bundle,
+						rxrpc_bundle_get_service_conn);
 
 		atomic_inc(&rxnet->nr_conns);
 		write_lock(&rxnet->conn_lock);
