device-dax: Fix duplicate 'hmem' device registration

jira LE-1907
Rebuild_History Non-Buildable kernel-rt-5.14.0-284.30.1.rt14.315.el9_2
commit-author Dan Williams <dan.j.williams@intel.com>
commit 472faf72b33d80aa8e7a99c9410c1a23d3bf0cd8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-rt-5.14.0-284.30.1.rt14.315.el9_2/472faf72.failed

So called "soft-reserved" memory is an EFI conventional memory range
with the EFI_MEMORY_SP attribute set. That attribute indicates that the
memory is not part of the platform general purpose memory pool and may
want some consideration from the system administrator about whether to
keep that memory set aside for dedicated access through device-dax (map
a device file), or assigned to the page allocator as another general
purpose memory node target.

Absent an ACPI HMAT table the default device-dax registration creates
coarse grained devices that are delineated by EFI Memory Map entries.
With the HMAT the devices are delineated by the finer grained ranges
associated with the proximity domain of the memory target. I.e. the HMAT
describes the properties of performance differentiated memory and each
unique performance description results in a unique target proximity
domain where each memory proximity domain has an associated SRAT entry
that delineates the address range.

The intent was that SRAT-defined device-dax instances are registered
first. Then any left-over address range with the EFI_MEMORY_SP
attribute, but not covered by the SRAT, would have a coarse grained
device-dax instance established. However, the scheme to detect what
ranges are left to be assigned to a device was buggy and resulted in
multiple overlapping device-dax instances. Fix this by using explicit
tracking for which ranges have been handled.

Now, this new approach may leave memory stranded in the presence of
broken platform firmware that fails to fully describe all EFI_MEMORY_SP
ranges in the HMAT. That requires a deeper fix if it becomes a problem
in practice.

	Reported-by: "Tallam Mahendra Kumar" <tallam.mahendra.kumar@intel.com>
	Reported-by: Mustafa Hajeer <mustafa.hajeer@intel.com>
	Debugged-by: Vishal Verma <vishal.l.verma@intel.com>
	Tested-by: Vishal Verma <vishal.l.verma@intel.com>
Link: https://lore.kernel.org/r/166890823379.4183293.15333502171004313377.stgit@dwillia2-xfh.jf.intel.com
	Signed-off-by: Dan Williams <dan.j.williams@intel.com>
(cherry picked from commit 472faf72b33d80aa8e7a99c9410c1a23d3bf0cd8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/dax/hmem/device.c
diff --cc drivers/dax/hmem/device.c
index acf31cc1dbcc,903325aac991..000000000000
--- a/drivers/dax/hmem/device.c
+++ b/drivers/dax/hmem/device.c
@@@ -66,7 -79,9 +79,13 @@@ void hmem_register_device(int target_ni
  	return;
  
  out_resource:
++<<<<<<< HEAD
 +	put_device(&pdev->dev);
++=======
+ 	__release_region(&hmem_active, res.start, resource_size(&res));
+ out_active:
+ 	platform_device_put(pdev);
++>>>>>>> 472faf72b33d (device-dax: Fix duplicate 'hmem' device registration)
  out_pdev:
  	memregion_free(id);
  }
* Unmerged path drivers/dax/hmem/device.c
