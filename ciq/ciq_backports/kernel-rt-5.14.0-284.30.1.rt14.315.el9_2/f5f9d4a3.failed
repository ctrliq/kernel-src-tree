nfsd: move reply cache initialization into nfsd startup

jira LE-1907
Rebuild_History Non-Buildable kernel-rt-5.14.0-284.30.1.rt14.315.el9_2
commit-author Jeff Layton <jlayton@kernel.org>
commit f5f9d4a314da88c0a5faa6d168bf69081b7a25ae
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-rt-5.14.0-284.30.1.rt14.315.el9_2/f5f9d4a3.failed

There's no need to start the reply cache before nfsd is up and running,
and doing so means that we register a shrinker for every net namespace
instead of just the ones where nfsd is running.

Move it to the per-net nfsd startup instead.

	Reported-by: Dai Ngo <dai.ngo@oracle.com>
	Signed-off-by: Jeff Layton <jlayton@kernel.org>
	Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
(cherry picked from commit f5f9d4a314da88c0a5faa6d168bf69081b7a25ae)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/nfsd/nfsctl.c
diff --cc fs/nfsd/nfsctl.c
index 3eddf1d7e1ca,f2a0d6ac88df..000000000000
--- a/fs/nfsd/nfsctl.c
+++ b/fs/nfsd/nfsctl.c
@@@ -1453,18 -1457,12 +1453,25 @@@ static __net_init int nfsd_init_net(str
  		goto out_idmap_error;
  	nn->nfsd_versions = NULL;
  	nn->nfsd4_minorversions = NULL;
++<<<<<<< HEAD
 +	retval = nfsd_reply_cache_init(nn);
 +	if (retval)
 +		goto out_drc_error;
 +	nfsd4_init_leases_net(nn);
 +
++=======
+ 	nfsd4_init_leases_net(nn);
++>>>>>>> f5f9d4a314da (nfsd: move reply cache initialization into nfsd startup)
  	get_random_bytes(&nn->siphash_key, sizeof(nn->siphash_key));
  	seqlock_init(&nn->writeverf_lock);
  
  	return 0;
  
++<<<<<<< HEAD
 +out_drc_error:
 +	nfsd_idmap_shutdown(net);
++=======
++>>>>>>> f5f9d4a314da (nfsd: move reply cache initialization into nfsd startup)
  out_idmap_error:
  	nfsd_export_shutdown(net);
  out_export_error:
* Unmerged path fs/nfsd/nfsctl.c
diff --git a/fs/nfsd/nfssvc.c b/fs/nfsd/nfssvc.c
index 011c556caa1e..66b9ccdc362c 100644
--- a/fs/nfsd/nfssvc.c
+++ b/fs/nfsd/nfssvc.c
@@ -421,16 +421,23 @@ static int nfsd_startup_net(struct net *net, const struct cred *cred)
 	ret = nfsd_file_cache_start_net(net);
 	if (ret)
 		goto out_lockd;
-	ret = nfs4_state_start_net(net);
+
+	ret = nfsd_reply_cache_init(nn);
 	if (ret)
 		goto out_filecache;
 
+	ret = nfs4_state_start_net(net);
+	if (ret)
+		goto out_reply_cache;
+
 #ifdef CONFIG_NFSD_V4_2_INTER_SSC
 	nfsd4_ssc_init_umount_work(nn);
 #endif
 	nn->nfsd_net_up = true;
 	return 0;
 
+out_reply_cache:
+	nfsd_reply_cache_shutdown(nn);
 out_filecache:
 	nfsd_file_cache_shutdown_net(net);
 out_lockd:
@@ -448,6 +455,7 @@ static void nfsd_shutdown_net(struct net *net)
 	struct nfsd_net *nn = net_generic(net, nfsd_net_id);
 
 	nfs4_state_shutdown_net(net);
+	nfsd_reply_cache_shutdown(nn);
 	nfsd_file_cache_shutdown_net(net);
 	if (nn->lockd_up) {
 		lockd_down(net);
