s390/vfio_ap: fix handling of error response codes

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-523.el8
commit-author Tony Krowiak <akrowiak@linux.ibm.com>
commit 51d4d9877087685ac577a4a314f85e1b2046cae6
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-523.el8/51d4d987.failed

Some response codes returned from the queue reset function are not being
handled correctly; this patch fixes them:

1. Response code 3, AP queue deconfigured: Deconfiguring an AP adapter
   resets all of its queues, so this is handled by indicating the reset
   verification completed successfully.

2. For all response codes other than 0 (normal reset completion), 2
   (queue reset in progress) and 3 (AP deconfigured), the -EIO error will
   be returned from the vfio_ap_mdev_reset_queue() function. In all cases,
   all fields of the status word other than the response code will be
   set to zero, so it makes no sense to check status bits.

	Signed-off-by: Tony Krowiak <akrowiak@linux.ibm.com>
	Reviewed-by: Jason J. Herne <jjherne@linux.ibm.com>
	Reviewed-by: Harald Freudenberger <freude@linux.ibm.com>
Link: https://lore.kernel.org/r/20230118203111.529766-6-akrowiak@linux.ibm.com
	Signed-off-by: Christian Borntraeger <borntraeger@linux.ibm.com>
	Signed-off-by: Heiko Carstens <hca@linux.ibm.com>
(cherry picked from commit 51d4d9877087685ac577a4a314f85e1b2046cae6)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/s390/crypto/vfio_ap_ops.c
diff --cc drivers/s390/crypto/vfio_ap_ops.c
index f00713f44b7e,3bf012b3508e..000000000000
--- a/drivers/s390/crypto/vfio_ap_ops.c
+++ b/drivers/s390/crypto/vfio_ap_ops.c
@@@ -1604,23 -1661,24 +1604,34 @@@ retry_zapq
  			ret = apq_reset_check(q);
  		break;
  	case AP_RESPONSE_RESET_IN_PROGRESS:
++<<<<<<< HEAD
 +		if (retry--) {
 +			msleep(20);
 +			goto retry_zapq;
 +		}
 +		ret = -EBUSY;
 +		break;
 +	case AP_RESPONSE_Q_NOT_AVAIL:
++=======
+ 		/*
+ 		 * There is a reset issued by another process in progress. Let's wait
+ 		 * for that to complete. Since we have no idea whether it was a RAPQ or
+ 		 * ZAPQ, then if it completes successfully, let's issue the ZAPQ.
+ 		 */
+ 		ret = apq_reset_check(q);
+ 		if (ret)
+ 			break;
+ 		goto retry_zapq;
++>>>>>>> 51d4d9877087 (s390/vfio_ap: fix handling of error response codes)
  	case AP_RESPONSE_DECONFIGURED:
- 	case AP_RESPONSE_CHECKSTOPPED:
- 		WARN_ONCE(status.irq_enabled,
- 			  "PQAP/ZAPQ for %02x.%04x failed with rc=%u while IRQ enabled",
- 			  AP_QID_CARD(q->apqn), AP_QID_QUEUE(q->apqn),
- 			  status.response_code);
- 		ret = -EBUSY;
- 		goto free_resources;
+ 		/*
+ 		 * When an AP adapter is deconfigured, the associated
+ 		 * queues are reset, so let's return a value indicating the reset
+ 		 * completed successfully.
+ 		 */
+ 		ret = 0;
+ 		break;
  	default:
- 		/* things are really broken, give up */
  		WARN(true,
  		     "PQAP/ZAPQ for %02x.%04x failed with invalid rc=%u\n",
  		     AP_QID_CARD(q->apqn), AP_QID_QUEUE(q->apqn),
* Unmerged path drivers/s390/crypto/vfio_ap_ops.c
