ice: Fix race conditions between virtchnl handling and VF ndo ops

jira NONE_AUTOMATION
Rebuild_History Non-Buildable kernel-rt-4.18.0-348.12.2.rt7.143.el8_5
commit-author Brett Creeley <brett.creeley@intel.com>
commit e6ba5273d4ede03d075d7a116b8edad1f6115f4d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-rt-4.18.0-348.12.2.rt7.143.el8_5/e6ba5273.failed

The VF can be configured via the PF's ndo ops at the same time the PF is
receiving/handling virtchnl messages. This has many issues, with
one of them being the ndo op could be actively resetting a VF (i.e.
resetting it to the default state and deleting/re-adding the VF's VSI)
while a virtchnl message is being handled. The following error was seen
because a VF ndo op was used to change a VF's trust setting while the
VIRTCHNL_OP_CONFIG_VSI_QUEUES was ongoing:

[35274.192484] ice 0000:88:00.0: Failed to set LAN Tx queue context, error: ICE_ERR_PARAM
[35274.193074] ice 0000:88:00.0: VF 0 failed opcode 6, retval: -5
[35274.193640] iavf 0000:88:01.0: PF returned error -5 (IAVF_ERR_PARAM) to our request 6

Fix this by making sure the virtchnl handling and VF ndo ops that
trigger VF resets cannot run concurrently. This is done by adding a
struct mutex cfg_lock to each VF structure. For VF ndo ops, the mutex
will be locked around the critical operations and VFR. Since the ndo ops
will trigger a VFR, the virtchnl thread will use mutex_trylock(). This
is done because if any other thread (i.e. VF ndo op) has the mutex, then
that means the current VF message being handled is no longer valid, so
just ignore it.

This issue can be seen using the following commands:

for i in {0..50}; do
        rmmod ice
        modprobe ice

        sleep 1

        echo 1 > /sys/class/net/ens785f0/device/sriov_numvfs
        echo 1 > /sys/class/net/ens785f1/device/sriov_numvfs

        ip link set ens785f1 vf 0 trust on
        ip link set ens785f0 vf 0 trust on

        sleep 2

        echo 0 > /sys/class/net/ens785f0/device/sriov_numvfs
        echo 0 > /sys/class/net/ens785f1/device/sriov_numvfs
        sleep 1
        echo 1 > /sys/class/net/ens785f0/device/sriov_numvfs
        echo 1 > /sys/class/net/ens785f1/device/sriov_numvfs

        ip link set ens785f1 vf 0 trust on
        ip link set ens785f0 vf 0 trust on
done

Fixes: 7c710869d64e ("ice: Add handlers for VF netdevice operations")
	Signed-off-by: Brett Creeley <brett.creeley@intel.com>
	Tested-by: Konrad Jankowski <konrad0.jankowski@intel.com>
	Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
(cherry picked from commit e6ba5273d4ede03d075d7a116b8edad1f6115f4d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c
diff --cc drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c
index a691e28932af,217ff5e9a6f1..000000000000
--- a/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c
+++ b/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c
@@@ -1893,6 -1946,10 +1895,13 @@@ static void ice_set_dflt_settings_vfs(s
  		 */
  		ice_vf_ctrl_invalidate_vsi(vf);
  		ice_vf_fdir_init(vf);
++<<<<<<< HEAD
++=======
+ 
+ 		ice_vc_set_dflt_vf_ops(&vf->vc_ops);
+ 
+ 		mutex_init(&vf->cfg_lock);
++>>>>>>> e6ba5273d4ed (ice: Fix race conditions between virtchnl handling and VF ndo ops)
  	}
  }
  
@@@ -4334,12 -4690,21 +4346,21 @@@ error_handler
  		return;
  	}
  
+ 	/* VF is being configured in another context that triggers a VFR, so no
+ 	 * need to process this message
+ 	 */
+ 	if (!mutex_trylock(&vf->cfg_lock)) {
+ 		dev_info(dev, "VF %u is being configured in another context that will trigger a VFR, so there is no need to handle this message\n",
+ 			 vf->vf_id);
+ 		return;
+ 	}
+ 
  	switch (v_opcode) {
  	case VIRTCHNL_OP_VERSION:
 -		err = ops->get_ver_msg(vf, msg);
 +		err = ice_vc_get_ver_msg(vf, msg);
  		break;
  	case VIRTCHNL_OP_GET_VF_RESOURCES:
 -		err = ops->get_vf_res_msg(vf, msg);
 +		err = ice_vc_get_vf_res_msg(vf, msg);
  		if (ice_vf_init_vlan_stripping(vf))
  			dev_err(dev, "Failed to initialize VLAN stripping for VF %d\n",
  				vf->vf_id);
* Unmerged path drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c
diff --git a/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.h b/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.h
index d800ed83d6c3..3da39d63a24b 100644
--- a/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.h
+++ b/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.h
@@ -69,6 +69,11 @@ struct ice_mdd_vf_events {
 struct ice_vf {
 	struct ice_pf *pf;
 
+	/* Used during virtchnl message handling and NDO ops against the VF
+	 * that will trigger a VFR
+	 */
+	struct mutex cfg_lock;
+
 	u16 vf_id;			/* VF ID in the PF space */
 	u16 lan_vsi_idx;		/* index into PF struct */
 	u16 ctrl_vsi_idx;
