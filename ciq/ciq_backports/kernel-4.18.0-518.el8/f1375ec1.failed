cpufreq: amd-pstate: Expose struct amd_cpudata

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-518.el8
commit-author Meng Li <li.meng@amd.com>
commit f1375ec1df09fb09fecfdf9418d3784e7ba12469
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-518.el8/f1375ec1.failed

Expose struct amd_cpudata to AMD P-State unit test module.

This data struct will be used on the following AMD P-State unit test
(amd-pstate-ut) module. The amd-pstate-ut module can get some
AMD infomations by this data struct. For example: highest perf,
nominal perf, boost supported etc.

	Signed-off-by: Meng Li <li.meng@amd.com>
	Acked-by: Huang Rui <ray.huang@amd.com>
	Acked-by: Shuah Khan <skhan@linuxfoundation.org>
	Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>
(cherry picked from commit f1375ec1df09fb09fecfdf9418d3784e7ba12469)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	MAINTAINERS
#	drivers/cpufreq/amd-pstate.c
diff --cc MAINTAINERS
index fb6333c15e47,5c404d2686d1..000000000000
--- a/MAINTAINERS
+++ b/MAINTAINERS
@@@ -846,7 -1030,23 +846,27 @@@ S:	Maintaine
  F:	Documentation/x86/amd_hsmp.rst
  F:	arch/x86/include/asm/amd_hsmp.h
  F:	arch/x86/include/uapi/asm/amd_hsmp.h
++<<<<<<< HEAD
 +F:	drivers/platform/x86/amd_hsmp.c
++=======
+ F:	drivers/platform/x86/amd/hsmp.c
+ 
+ AMD POWERPLAY AND SWSMU
+ M:	Evan Quan <evan.quan@amd.com>
+ L:	amd-gfx@lists.freedesktop.org
+ S:	Supported
+ T:	git https://gitlab.freedesktop.org/agd5f/linux.git
+ F:	drivers/gpu/drm/amd/pm/
+ 
+ AMD PSTATE DRIVER
+ M:	Huang Rui <ray.huang@amd.com>
+ L:	linux-pm@vger.kernel.org
+ S:	Supported
+ F:	Documentation/admin-guide/pm/amd-pstate.rst
+ F:	drivers/cpufreq/amd-pstate*
+ F:	include/linux/amd-pstate.h
+ F:	tools/power/x86/amd_pstate_tracer/amd_pstate_trace.py
++>>>>>>> f1375ec1df09 (cpufreq: amd-pstate: Expose struct amd_cpudata)
  
  AMD PTDMA DRIVER
  M:	Sanjay R Mehta <sanju.mehta@amd.com>
diff --cc drivers/cpufreq/amd-pstate.c
index 81cc0ab912e3,218f777a5915..000000000000
--- a/drivers/cpufreq/amd-pstate.c
+++ b/drivers/cpufreq/amd-pstate.c
@@@ -58,68 -59,13 +59,71 @@@
   * we disable it by default to go acpi-cpufreq on these processors and add a
   * module parameter to be able to enable it manually for debugging.
   */
 -static bool shared_mem = false;
 -module_param(shared_mem, bool, 0444);
 -MODULE_PARM_DESC(shared_mem,
 -		 "enable amd-pstate on processors with shared memory solution (false = disabled (default), true = enabled)");
 -
  static struct cpufreq_driver amd_pstate_driver;
 +static int cppc_load __initdata;
 +
++<<<<<<< HEAD
 +/**
 + * struct  amd_aperf_mperf
 + * @aperf: actual performance frequency clock count
 + * @mperf: maximum performance frequency clock count
 + * @tsc:   time stamp counter
 + */
 +struct amd_aperf_mperf {
 +	u64 aperf;
 +	u64 mperf;
 +	u64 tsc;
 +};
 +
 +/**
 + * struct amd_cpudata - private CPU data for AMD P-State
 + * @cpu: CPU number
 + * @req: constraint request to apply
 + * @cppc_req_cached: cached performance request hints
 + * @highest_perf: the maximum performance an individual processor may reach,
 + *		  assuming ideal conditions
 + * @nominal_perf: the maximum sustained performance level of the processor,
 + *		  assuming ideal operating conditions
 + * @lowest_nonlinear_perf: the lowest performance level at which nonlinear power
 + *			   savings are achieved
 + * @lowest_perf: the absolute lowest performance level of the processor
 + * @max_freq: the frequency that mapped to highest_perf
 + * @min_freq: the frequency that mapped to lowest_perf
 + * @nominal_freq: the frequency that mapped to nominal_perf
 + * @lowest_nonlinear_freq: the frequency that mapped to lowest_nonlinear_perf
 + * @cur: Difference of Aperf/Mperf/tsc count between last and current sample
 + * @prev: Last Aperf/Mperf/tsc count value read from register
 + * @freq: current cpu frequency value
 + * @boost_supported: check whether the Processor or SBIOS supports boost mode
 + *
 + * The amd_cpudata is key private data for each CPU thread in AMD P-State, and
 + * represents all the attributes and goals that AMD P-State requests at runtime.
 + */
 +struct amd_cpudata {
 +	int	cpu;
 +
 +	struct	freq_qos_request req[2];
 +	u64	cppc_req_cached;
 +
 +	u32	highest_perf;
 +	u32	nominal_perf;
 +	u32	lowest_nonlinear_perf;
 +	u32	lowest_perf;
 +
 +	u32	max_freq;
 +	u32	min_freq;
 +	u32	nominal_freq;
 +	u32	lowest_nonlinear_freq;
 +
 +	struct amd_aperf_mperf cur;
 +	struct amd_aperf_mperf prev;
  
 +	u64 	freq;
 +	bool	boost_supported;
 +};
 +
++=======
++>>>>>>> f1375ec1df09 (cpufreq: amd-pstate: Expose struct amd_cpudata)
  static inline int pstate_enable(bool enable)
  {
  	return wrmsrl_safe(MSR_AMD_CPPC_ENABLE, enable);
* Unmerged path MAINTAINERS
* Unmerged path drivers/cpufreq/amd-pstate.c
diff --git a/include/linux/amd-pstate.h b/include/linux/amd-pstate.h
new file mode 100644
index 000000000000..1c4b8659f171
--- /dev/null
+++ b/include/linux/amd-pstate.h
@@ -0,0 +1,77 @@
+/* SPDX-License-Identifier: GPL-2.0-only */
+/*
+ * linux/include/linux/amd-pstate.h
+ *
+ * Copyright (C) 2022 Advanced Micro Devices, Inc.
+ *
+ * Author: Meng Li <li.meng@amd.com>
+ */
+
+#ifndef _LINUX_AMD_PSTATE_H
+#define _LINUX_AMD_PSTATE_H
+
+#include <linux/pm_qos.h>
+
+/*********************************************************************
+ *                        AMD P-state INTERFACE                       *
+ *********************************************************************/
+/**
+ * struct  amd_aperf_mperf
+ * @aperf: actual performance frequency clock count
+ * @mperf: maximum performance frequency clock count
+ * @tsc:   time stamp counter
+ */
+struct amd_aperf_mperf {
+	u64 aperf;
+	u64 mperf;
+	u64 tsc;
+};
+
+/**
+ * struct amd_cpudata - private CPU data for AMD P-State
+ * @cpu: CPU number
+ * @req: constraint request to apply
+ * @cppc_req_cached: cached performance request hints
+ * @highest_perf: the maximum performance an individual processor may reach,
+ *		  assuming ideal conditions
+ * @nominal_perf: the maximum sustained performance level of the processor,
+ *		  assuming ideal operating conditions
+ * @lowest_nonlinear_perf: the lowest performance level at which nonlinear power
+ *			   savings are achieved
+ * @lowest_perf: the absolute lowest performance level of the processor
+ * @max_freq: the frequency that mapped to highest_perf
+ * @min_freq: the frequency that mapped to lowest_perf
+ * @nominal_freq: the frequency that mapped to nominal_perf
+ * @lowest_nonlinear_freq: the frequency that mapped to lowest_nonlinear_perf
+ * @cur: Difference of Aperf/Mperf/tsc count between last and current sample
+ * @prev: Last Aperf/Mperf/tsc count value read from register
+ * @freq: current cpu frequency value
+ * @boost_supported: check whether the Processor or SBIOS supports boost mode
+ *
+ * The amd_cpudata is key private data for each CPU thread in AMD P-State, and
+ * represents all the attributes and goals that AMD P-State requests at runtime.
+ */
+struct amd_cpudata {
+	int	cpu;
+
+	struct	freq_qos_request req[2];
+	u64	cppc_req_cached;
+
+	u32	highest_perf;
+	u32	nominal_perf;
+	u32	lowest_nonlinear_perf;
+	u32	lowest_perf;
+
+	u32	max_freq;
+	u32	min_freq;
+	u32	nominal_freq;
+	u32	lowest_nonlinear_freq;
+
+	struct amd_aperf_mperf cur;
+	struct amd_aperf_mperf prev;
+
+	u64	freq;
+	bool	boost_supported;
+};
+
+#endif /* _LINUX_AMD_PSTATE_H */
