ACPI: x86: s2idle: Stop using AMD specific codepath for Rembrandt+

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-529.el8
commit-author Mario Limonciello <mario.limonciello@amd.com>
commit e555c85792bd5f9828a2fd2ca9761f70efb1c77b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-529.el8/e555c857.failed

After we introduced a module parameter and quirk infrastructure for
picking the Microsoft GUID over the SOC vendor GUID we discovered
that lots and lots of systems are getting this wrong.

The table continues to grow, and is becoming unwieldy.

We don't really have any benefit to forcing vendors to populate the
AMD GUID. This is just extra work, and more and more vendors seem
to mess it up.  As the Microsoft GUID is used by Windows as well,
it's very likely that it won't be messed up like this.

So drop all the quirks forcing it and the Rembrandt behavior. This
means that Cezanne or later effectively only run the Microsoft GUID
codepath with the exception of HP Elitebook 8*5 G9.

Fixes: fd894f05cf30 ("ACPI: x86: s2idle: If a new AMD _HID is missing assume Rembrandt")
	Cc: stable@vger.kernel.org # 6.1
	Reported-by: Benjamin Cheng <ben@bcheng.me>
	Reported-by: bilkow@tutanota.com
	Reported-by: Paul <paul@zogpog.com>
Link: https://gitlab.freedesktop.org/drm/amd/-/issues/2292
Link: https://bugzilla.kernel.org/show_bug.cgi?id=216768
	Signed-off-by: Mario Limonciello <mario.limonciello@amd.com>
	Reviewed-by: Philipp Zabel <philipp.zabel@gmail.com>
	Tested-by: Philipp Zabel <philipp.zabel@gmail.com>
	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
(cherry picked from commit e555c85792bd5f9828a2fd2ca9761f70efb1c77b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/acpi/x86/s2idle.c
diff --cc drivers/acpi/x86/s2idle.c
index dc91a3e2d72a,c7afce465a07..000000000000
--- a/drivers/acpi/x86/s2idle.c
+++ b/drivers/acpi/x86/s2idle.c
@@@ -396,32 -384,24 +384,52 @@@ static const struct acpi_device_id amd_
  	{}
  };
  
++<<<<<<< HEAD
 +static int lps0_prefer_microsoft(const struct dmi_system_id *id)
 +{
 +	pr_debug("Preferring Microsoft GUID.\n");
 +	prefer_microsoft_dsm_guid = true;
 +	return 0;
 +}
 +
 +static const struct dmi_system_id s2idle_dmi_table[] __initconst = {
 +	{
 +		/*
 +		 * ASUS TUF Gaming A17 FA707RE
 +		 * https://bugzilla.kernel.org/show_bug.cgi?id=216101
 +		 */
 +		.callback = lps0_prefer_microsoft,
 +		.matches = {
 +			DMI_MATCH(DMI_SYS_VENDOR, "ASUSTeK COMPUTER INC."),
 +			DMI_MATCH(DMI_PRODUCT_NAME, "ASUS TUF Gaming A17"),
 +		},
 +	},
 +	{
 +		/* ASUS ROG Zephyrus G14 (2022) */
 +		.callback = lps0_prefer_microsoft,
 +		.matches = {
 +			DMI_MATCH(DMI_SYS_VENDOR, "ASUSTeK COMPUTER INC."),
 +			DMI_MATCH(DMI_PRODUCT_NAME, "ROG Zephyrus G14 GA402"),
++=======
+ static int lps0_prefer_amd(const struct dmi_system_id *id)
+ {
+ 	pr_debug("Using AMD GUID w/ _REV 2.\n");
+ 	rev_id = 2;
+ 	return 0;
+ }
+ static const struct dmi_system_id s2idle_dmi_table[] __initconst = {
+ 	{
+ 		/*
+ 		 * AMD Rembrandt based HP EliteBook 835/845/865 G9
+ 		 * Contains specialized AML in AMD/_REV 2 path to avoid
+ 		 * triggering a bug in Qualcomm WLAN firmware. This may be
+ 		 * removed in the future if that firmware is fixed.
+ 		 */
+ 		.callback = lps0_prefer_amd,
+ 		.matches = {
+ 			DMI_MATCH(DMI_BOARD_VENDOR, "HP"),
+ 			DMI_MATCH(DMI_BOARD_NAME, "8990"),
++>>>>>>> e555c85792bd (ACPI: x86: s2idle: Stop using AMD specific codepath for Rembrandt+)
  		},
  	},
  	{}
@@@ -443,20 -426,14 +451,23 @@@ static int lps0_device_attach(struct ac
  		if (dev_id->id[0])
  			data = (const struct amd_lps0_hid_device_data *) dev_id->driver_data;
  		else
- 			data = &amd_rembrandt;
- 		rev_id = data->rev_id;
+ 			data = &amd_cezanne;
  		lps0_dsm_func_mask = validate_dsm(adev->handle,
  					ACPI_LPS0_DSM_UUID_AMD, rev_id, &lps0_dsm_guid);
 +		lps0_dsm_func_mask_microsoft = validate_dsm(adev->handle,
 +					ACPI_LPS0_DSM_UUID_MICROSOFT, 0,
 +					&lps0_dsm_guid_microsoft);
  		if (lps0_dsm_func_mask > 0x3 && data->check_off_by_one) {
  			lps0_dsm_func_mask = (lps0_dsm_func_mask << 1) | 0x1;
  			acpi_handle_debug(adev->handle, "_DSM UUID %s: Adjusted function mask: 0x%x\n",
  					  ACPI_LPS0_DSM_UUID_AMD, lps0_dsm_func_mask);
++<<<<<<< HEAD
 +		} else if (lps0_dsm_func_mask_microsoft > 0 && data->prefer_amd_guid &&
 +				(!strcmp(hid, "AMDI0007") ||
 +				 !strcmp(hid, "AMDI0008"))) {
++=======
+ 		} else if (lps0_dsm_func_mask_microsoft > 0 && rev_id) {
++>>>>>>> e555c85792bd (ACPI: x86: s2idle: Stop using AMD specific codepath for Rembrandt+)
  			lps0_dsm_func_mask_microsoft = -EINVAL;
  			acpi_handle_debug(adev->handle, "_DSM Using AMD method\n");
  		}
* Unmerged path drivers/acpi/x86/s2idle.c
