ACPI: thermal: Use white space more consistently

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-529.el8
commit-author Rafael J. Wysocki <rafael.j.wysocki@intel.com>
commit 52ce50498c6f432fad13315f0387bfc100e2d18b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-529.el8/52ce5049.failed

The usage of white space in the ACPI thermal driver is not very
consistent, so improve that a bit.

While at it, add missing braces to if()/else in a few places.

No functional impact.

	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
	Acked-by: Daniel Lezcano <daniel.lezcano@linaro.org>
(cherry picked from commit 52ce50498c6f432fad13315f0387bfc100e2d18b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/acpi/thermal.c
diff --cc drivers/acpi/thermal.c
index 2e962e067ffa,d33854ce89e7..000000000000
--- a/drivers/acpi/thermal.c
+++ b/drivers/acpi/thermal.c
@@@ -297,11 -280,10 +296,15 @@@ static int acpi_thermal_trips_update(st
  		 */
  		if (ACPI_FAILURE(status)) {
  			tz->trips.critical.flags.valid = 0;
 -			acpi_handle_debug(tz->device->handle,
 -					  "No critical threshold\n");
 +			ACPI_DEBUG_PRINT((ACPI_DB_INFO,
 +					  "No critical threshold\n"));
  		} else if (tmp <= 2732) {
++<<<<<<< HEAD
 +			pr_warn(FW_BUG "Invalid critical threshold (%llu)\n",
 +				tmp);
++=======
+ 			pr_info(FW_BUG "Invalid critical threshold (%llu)\n", tmp);
++>>>>>>> 52ce50498c6f (ACPI: thermal: Use white space more consistently)
  			tz->trips.critical.flags.valid = 0;
  		} else {
  			tz->trips.critical.flags.valid = 1;
@@@ -328,12 -310,11 +331,11 @@@
  
  	/* Critical Sleep (optional) */
  	if (flag & ACPI_TRIPS_HOT) {
- 		status = acpi_evaluate_integer(tz->device->handle,
- 				"_HOT", NULL, &tmp);
+ 		status = acpi_evaluate_integer(tz->device->handle, "_HOT", NULL, &tmp);
  		if (ACPI_FAILURE(status)) {
  			tz->trips.hot.flags.valid = 0;
 -			acpi_handle_debug(tz->device->handle,
 -					  "No hot threshold\n");
 +			ACPI_DEBUG_PRINT((ACPI_DB_INFO,
 +					"No hot threshold\n"));
  		} else {
  			tz->trips.hot.temperature = tmp;
  			tz->trips.hot.flags.valid = 1;
@@@ -390,24 -370,25 +391,33 @@@
  	if ((flag & ACPI_TRIPS_DEVICES) && tz->trips.passive.flags.valid) {
  		memset(&devices, 0, sizeof(struct acpi_handle_list));
  		status = acpi_evaluate_reference(tz->device->handle, "_PSL",
- 							NULL, &devices);
+ 						 NULL, &devices);
  		if (ACPI_FAILURE(status)) {
 -			acpi_handle_info(tz->device->handle,
 -					 "Invalid passive threshold\n");
 +			pr_warn(PREFIX "Invalid passive threshold\n");
  			tz->trips.passive.flags.valid = 0;
- 		}
- 		else
+ 		} else {
  			tz->trips.passive.flags.valid = 1;
+ 		}
  
  		if (memcmp(&tz->trips.passive.devices, &devices,
- 				sizeof(struct acpi_handle_list))) {
+ 			   sizeof(struct acpi_handle_list))) {
  			memcpy(&tz->trips.passive.devices, &devices,
++<<<<<<< HEAD
 +				sizeof(struct acpi_handle_list));
 +			ACPI_THERMAL_TRIPS_EXCEPTION(flag, "device");
++=======
+ 			       sizeof(struct acpi_handle_list));
+ 			ACPI_THERMAL_TRIPS_EXCEPTION(flag, tz, "device");
++>>>>>>> 52ce50498c6f (ACPI: thermal: Use white space more consistently)
  		}
  	}
  	if ((flag & ACPI_TRIPS_PASSIVE) || (flag & ACPI_TRIPS_DEVICES)) {
  		if (valid != tz->trips.passive.flags.valid)
++<<<<<<< HEAD
 +				ACPI_THERMAL_TRIPS_EXCEPTION(flag, "state");
++=======
+ 			ACPI_THERMAL_TRIPS_EXCEPTION(flag, tz, "state");
++>>>>>>> 52ce50498c6f (ACPI: thermal: Use white space more consistently)
  	}
  
  	/* Active (optional) */
@@@ -449,23 -432,23 +461,28 @@@
  		}
  
  		name[2] = 'L';
- 		if ((flag & ACPI_TRIPS_DEVICES) && tz->trips.active[i].flags.valid ) {
+ 		if ((flag & ACPI_TRIPS_DEVICES) && tz->trips.active[i].flags.valid) {
  			memset(&devices, 0, sizeof(struct acpi_handle_list));
  			status = acpi_evaluate_reference(tz->device->handle,
- 						name, NULL, &devices);
+ 							 name, NULL, &devices);
  			if (ACPI_FAILURE(status)) {
 -				acpi_handle_info(tz->device->handle,
 -						 "Invalid active%d threshold\n", i);
 +				pr_warn(PREFIX "Invalid active%d threshold\n",
 +					i);
  				tz->trips.active[i].flags.valid = 0;
- 			}
- 			else
+ 			} else {
  				tz->trips.active[i].flags.valid = 1;
+ 			}
  
  			if (memcmp(&tz->trips.active[i].devices, &devices,
- 					sizeof(struct acpi_handle_list))) {
+ 				   sizeof(struct acpi_handle_list))) {
  				memcpy(&tz->trips.active[i].devices, &devices,
++<<<<<<< HEAD
 +					sizeof(struct acpi_handle_list));
 +				ACPI_THERMAL_TRIPS_EXCEPTION(flag, "device");
++=======
+ 				       sizeof(struct acpi_handle_list));
+ 				ACPI_THERMAL_TRIPS_EXCEPTION(flag, tz, "device");
++>>>>>>> 52ce50498c6f (ACPI: thermal: Use white space more consistently)
  			}
  		}
  		if ((flag & ACPI_TRIPS_ACTIVE) || (flag & ACPI_TRIPS_DEVICES))
@@@ -479,11 -462,11 +496,11 @@@
  	if (flag & ACPI_TRIPS_DEVICES) {
  		memset(&devices, 0, sizeof(devices));
  		status = acpi_evaluate_reference(tz->device->handle, "_TZD",
- 						NULL, &devices);
- 		if (ACPI_SUCCESS(status)
- 		    && memcmp(&tz->devices, &devices, sizeof(devices))) {
+ 						 NULL, &devices);
+ 		if (ACPI_SUCCESS(status) &&
+ 		    memcmp(&tz->devices, &devices, sizeof(devices))) {
  			tz->devices = devices;
 -			ACPI_THERMAL_TRIPS_EXCEPTION(flag, tz, "device");
 +			ACPI_THERMAL_TRIPS_EXCEPTION(flag, "device");
  		}
  	}
  
@@@ -635,12 -617,11 +651,12 @@@ static int thermal_get_crit_temp(struc
  
  	if (tz->trips.critical.flags.valid) {
  		*temperature = deci_kelvin_to_millicelsius_with_offset(
- 				tz->trips.critical.temperature,
- 				tz->kelvin_offset);
+ 					tz->trips.critical.temperature,
+ 					tz->kelvin_offset);
  		return 0;
 -	} else
 -		return -EINVAL;
 +	}
 +
 +	return -EINVAL;
  }
  
  static int thermal_get_trend(struct thermal_zone_device *thermal,
@@@ -915,11 -898,11 +933,11 @@@ static void acpi_thermal_notify(struct 
  		acpi_thermal_trips_update(tz, ACPI_TRIPS_REFRESH_DEVICES);
  		acpi_queue_thermal_check(tz);
  		acpi_bus_generate_netlink_event(device->pnp.device_class,
- 						  dev_name(&device->dev), event, 0);
+ 						dev_name(&device->dev), event, 0);
  		break;
  	default:
 -		acpi_handle_debug(device->handle, "Unsupported event [0x%x]\n",
 -				  event);
 +		ACPI_DEBUG_PRINT((ACPI_DB_INFO,
 +				  "Unsupported event [0x%x]\n", event));
  		break;
  	}
  }
@@@ -958,9 -941,8 +976,8 @@@ static void acpi_thermal_aml_dependency
  
  static int acpi_thermal_get_info(struct acpi_thermal *tz)
  {
 -	int result = 0;
 +	int result;
  
- 
  	if (!tz)
  		return -EINVAL;
  
@@@ -1036,10 -1018,9 +1053,9 @@@ static void acpi_thermal_check_fn(struc
  
  static int acpi_thermal_add(struct acpi_device *device)
  {
 -	int result = 0;
 -	struct acpi_thermal *tz = NULL;
 +	struct acpi_thermal *tz;
 +	int result;
  
- 
  	if (!device)
  		return -EINVAL;
  
@@@ -1135,35 -1117,31 +1152,37 @@@ static int acpi_thermal_resume(struct d
  #endif
  
  static int thermal_act(const struct dmi_system_id *d) {
- 
  	if (act == 0) {
 -		pr_notice("%s detected: disabling all active thermal trip points\n",
 -			  d->ident);
 +		pr_notice(PREFIX "%s detected: "
 +			  "disabling all active thermal trip points\n", d->ident);
  		act = -1;
  	}
  	return 0;
  }
  static int thermal_nocrt(const struct dmi_system_id *d) {
++<<<<<<< HEAD
 +
 +	pr_notice(PREFIX "%s detected: "
 +		  "disabling all critical thermal trip point actions.\n", d->ident);
++=======
+ 	pr_notice("%s detected: disabling all critical thermal trip point actions.\n",
+ 		  d->ident);
++>>>>>>> 52ce50498c6f (ACPI: thermal: Use white space more consistently)
  	nocrt = 1;
  	return 0;
  }
  static int thermal_tzp(const struct dmi_system_id *d) {
- 
  	if (tzp == 0) {
 -		pr_notice("%s detected: enabling thermal zone polling\n",
 -			  d->ident);
 +		pr_notice(PREFIX "%s detected: "
 +			  "enabling thermal zone polling\n", d->ident);
  		tzp = 300;	/* 300 dS = 30 Seconds */
  	}
  	return 0;
  }
  static int thermal_psv(const struct dmi_system_id *d) {
- 
  	if (psv == 0) {
 -		pr_notice("%s detected: disabling all passive thermal trip points\n",
 -			  d->ident);
 +		pr_notice(PREFIX "%s detected: "
 +			  "disabling all passive thermal trip points\n", d->ident);
  		psv = -1;
  	}
  	return 0;
* Unmerged path drivers/acpi/thermal.c
