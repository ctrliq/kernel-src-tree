ACPI: scan: Eliminate __acpi_device_add()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-529.el8
commit-author Rafael J. Wysocki <rafael.j.wysocki@intel.com>
commit 6e1850b2f3747942d3813a2fde82f1e46aa593d1
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-529.el8/6e1850b2.failed

Instead of having acpi_device_add() defined as a wrapper around
__acpi_device_add(), export acpi_tie_acpi_dev() so it can be called
directly by acpi_add_power_resource(), fold acpi_device_add() into the
latter and rename __acpi_device_add() to acpi_device_add().

No intentional functional impact.

	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
	Reviewed-by: Punit Agrawal <punit.agrawal@bytedance.com>
(cherry picked from commit 6e1850b2f3747942d3813a2fde82f1e46aa593d1)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/acpi/internal.h
#	drivers/acpi/power.c
#	drivers/acpi/scan.c
diff --cc drivers/acpi/internal.h
index 4520818e1184,219c02df9a08..000000000000
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@@ -111,10 -102,10 +111,16 @@@ struct acpi_device_bus_id 
  	struct list_head node;
  };
  
 +int acpi_device_add(struct acpi_device *device,
 +		    void (*release)(struct device *));
  void acpi_init_device_object(struct acpi_device *device, acpi_handle handle,
++<<<<<<< HEAD
 +			     int type);
++=======
+ 			     int type, void (*release)(struct device *));
+ int acpi_tie_acpi_dev(struct acpi_device *adev);
+ int acpi_device_add(struct acpi_device *device);
++>>>>>>> 6e1850b2f374 (ACPI: scan: Eliminate __acpi_device_add())
  int acpi_device_setup_files(struct acpi_device *dev);
  void acpi_device_remove_files(struct acpi_device *dev);
  void acpi_device_add_finalize(struct acpi_device *device);
diff --cc drivers/acpi/power.c
index e911d4afa875,f2588aba8421..000000000000
--- a/drivers/acpi/power.c
+++ b/drivers/acpi/power.c
@@@ -983,11 -967,13 +984,19 @@@ struct acpi_device *acpi_add_power_reso
  	if (acpi_power_get_state(resource, &state_dummy))
  		__acpi_power_on(resource);
  
 -	pr_info("%s [%s]\n", acpi_device_name(device), acpi_device_bid(device));
 +	printk(KERN_INFO PREFIX "%s [%s]\n", acpi_device_name(device),
 +	       acpi_device_bid(device));
  
++<<<<<<< HEAD
 +	device->flags.match_driver = true;
 +	result = acpi_device_add(device, acpi_release_power_resource);
++=======
+ 	result = acpi_tie_acpi_dev(device);
+ 	if (result)
+ 		goto err;
+ 
+ 	result = acpi_device_add(device);
++>>>>>>> 6e1850b2f374 (ACPI: scan: Eliminate __acpi_device_add())
  	if (result)
  		goto err;
  
diff --cc drivers/acpi/scan.c
index c33e86308828,0d9c350608bf..000000000000
--- a/drivers/acpi/scan.c
+++ b/drivers/acpi/scan.c
@@@ -632,7 -628,22 +632,26 @@@ static struct acpi_device_bus_id *acpi_
  	return NULL;
  }
  
++<<<<<<< HEAD
 +static int acpi_tie_acpi_dev(struct acpi_device *adev)
++=======
+ static int acpi_device_set_name(struct acpi_device *device,
+ 				struct acpi_device_bus_id *acpi_device_bus_id)
+ {
+ 	struct ida *instance_ida = &acpi_device_bus_id->instance_ida;
+ 	int result;
+ 
+ 	result = ida_alloc(instance_ida, GFP_KERNEL);
+ 	if (result < 0)
+ 		return result;
+ 
+ 	device->pnp.instance_no = result;
+ 	dev_set_name(&device->dev, "%s:%02x", acpi_device_bus_id->bus_id, result);
+ 	return 0;
+ }
+ 
+ int acpi_tie_acpi_dev(struct acpi_device *adev)
++>>>>>>> 6e1850b2f374 (ACPI: scan: Eliminate __acpi_device_add())
  {
  	acpi_handle handle = adev->handle;
  	acpi_status status;
@@@ -662,8 -673,7 +681,12 @@@ static void acpi_store_pld_crc(struct a
  	ACPI_FREE(pld);
  }
  
++<<<<<<< HEAD
 +static int __acpi_device_add(struct acpi_device *device,
 +			     void (*release)(struct device *))
++=======
+ int acpi_device_add(struct acpi_device *device)
++>>>>>>> 6e1850b2f374 (ACPI: scan: Eliminate __acpi_device_add())
  {
  	struct acpi_device_bus_id *acpi_device_bus_id;
  	int result;
@@@ -748,17 -755,6 +771,20 @@@ err_unlock
  	return result;
  }
  
++<<<<<<< HEAD
 +int acpi_device_add(struct acpi_device *adev, void (*release)(struct device *))
 +{
 +	int ret;
 +
 +	ret = acpi_tie_acpi_dev(adev);
 +	if (ret)
 +		return ret;
 +
 +	return __acpi_device_add(adev, release);
 +}
 +
++=======
++>>>>>>> 6e1850b2f374 (ACPI: scan: Eliminate __acpi_device_add())
  /* --------------------------------------------------------------------------
                                   Device Enumeration
     -------------------------------------------------------------------------- */
@@@ -1791,7 -1856,7 +1817,11 @@@ static int acpi_add_single_object(struc
  		mutex_unlock(&acpi_dep_list_lock);
  
  	if (!result)
++<<<<<<< HEAD
 +		result = __acpi_device_add(device, acpi_device_release);
++=======
+ 		result = acpi_device_add(device);
++>>>>>>> 6e1850b2f374 (ACPI: scan: Eliminate __acpi_device_add())
  
  	if (result) {
  		acpi_device_release(&device->dev);
* Unmerged path drivers/acpi/internal.h
* Unmerged path drivers/acpi/power.c
* Unmerged path drivers/acpi/scan.c
