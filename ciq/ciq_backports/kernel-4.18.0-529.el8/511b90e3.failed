mptcp: fix disconnect vs accept race

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-529.el8
commit-author Paolo Abeni <pabeni@redhat.com>
commit 511b90e39250135a7f900f1c3afbce25543018a2
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-529.el8/511b90e3.failed

Despite commit 0ad529d9fd2b ("mptcp: fix possible divide by zero in
recvmsg()"), the mptcp protocol is still prone to a race between
disconnect() (or shutdown) and accept.

The root cause is that the mentioned commit checks the msk-level
flag, but mptcp_stream_accept() does acquire the msk-level lock,
as it can rely directly on the first subflow lock.

As reported by Christoph than can lead to a race where an msk
socket is accepted after that mptcp_subflow_queue_clean() releases
the listener socket lock and just before it takes destructive
actions leading to the following splat:

BUG: kernel NULL pointer dereference, address: 0000000000000012
PGD 5a4ca067 P4D 5a4ca067 PUD 37d4c067 PMD 0
Oops: 0000 [#1] PREEMPT SMP
CPU: 2 PID: 10955 Comm: syz-executor.5 Not tainted 6.5.0-rc1-gdc7b257ee5dd #37
Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.11.0-2.el7 04/01/2014
RIP: 0010:mptcp_stream_accept+0x1ee/0x2f0 include/net/inet_sock.h:330
Code: 0a 09 00 48 8b 1b 4c 39 e3 74 07 e8 bc 7c 7f fe eb a1 e8 b5 7c 7f fe 4c 8b 6c 24 08 eb 05 e8 a9 7c 7f fe 49 8b 85 d8 09 00 00 <0f> b6 40 12 88 44 24 07 0f b6 6c 24 07 bf 07 00 00 00 89 ee e8 89
RSP: 0018:ffffc90000d07dc0 EFLAGS: 00010293
RAX: 0000000000000000 RBX: ffff888037e8d020 RCX: ffff88803b093300
RDX: 0000000000000000 RSI: ffffffff833822c5 RDI: ffffffff8333896a
RBP: 0000607f82031520 R08: ffff88803b093300 R09: 0000000000000000
R10: 0000000000000000 R11: 0000000000003e83 R12: ffff888037e8d020
R13: ffff888037e8c680 R14: ffff888009af7900 R15: ffff888009af6880
FS:  00007fc26d708640(0000) GS:ffff88807dd00000(0000) knlGS:0000000000000000
CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
CR2: 0000000000000012 CR3: 0000000066bc5001 CR4: 0000000000370ee0
DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
Call Trace:
 <TASK>
 do_accept+0x1ae/0x260 net/socket.c:1872
 __sys_accept4+0x9b/0x110 net/socket.c:1913
 __do_sys_accept4 net/socket.c:1954 [inline]
 __se_sys_accept4 net/socket.c:1951 [inline]
 __x64_sys_accept4+0x20/0x30 net/socket.c:1951
 do_syscall_x64 arch/x86/entry/common.c:50 [inline]
 do_syscall_64+0x47/0xa0 arch/x86/entry/common.c:80
 entry_SYSCALL_64_after_hwframe+0x6e/0xd8

Address the issue by temporary removing the pending request socket
from the accept queue, so that racing accept() can't touch them.

After depleting the msk - the ssk still exists, as plain TCP sockets,
re-insert them into the accept queue, so that later inet_csk_listen_stop()
will complete the tcp socket disposal.

Fixes: 2a6a870e44dd ("mptcp: stops worker on unaccepted sockets at listener close")
	Cc: stable@vger.kernel.org
	Reported-by: Christoph Paasch <cpaasch@apple.com>
Closes: https://github.com/multipath-tcp/mptcp_net-next/issues/423
	Signed-off-by: Paolo Abeni <pabeni@redhat.com>
	Reviewed-by: Matthieu Baerts <matthieu.baerts@tessares.net>
	Signed-off-by: Matthieu Baerts <matthieu.baerts@tessares.net>
Link: https://lore.kernel.org/r/20230803-upstream-net-20230803-misc-fixes-6-5-v1-4-6671b1ab11cc@tessares.net
	Signed-off-by: Jakub Kicinski <kuba@kernel.org>
(cherry picked from commit 511b90e39250135a7f900f1c3afbce25543018a2)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/mptcp/subflow.c
diff --cc net/mptcp/subflow.c
index 7d8558c6c894,94ae7dd01c65..000000000000
--- a/net/mptcp/subflow.c
+++ b/net/mptcp/subflow.c
@@@ -1507,32 -1793,21 +1507,49 @@@ static void subflow_state_change(struc
  void mptcp_subflow_queue_clean(struct sock *listener_sk, struct sock *listener_ssk)
  {
  	struct request_sock_queue *queue = &inet_csk(listener_ssk)->icsk_accept_queue;
++<<<<<<< HEAD
 +	struct mptcp_sock *msk, *next, *head = NULL;
 +	struct request_sock *req;
++=======
+ 	struct request_sock *req, *head, *tail;
+ 	struct mptcp_subflow_context *subflow;
+ 	struct sock *sk, *ssk;
++>>>>>>> 511b90e39250 (mptcp: fix disconnect vs accept race)
  
- 	/* build a list of all unaccepted mptcp sockets */
+ 	/* Due to lock dependencies no relevant lock can be acquired under rskq_lock.
+ 	 * Splice the req list, so that accept() can not reach the pending ssk after
+ 	 * the listener socket is released below.
+ 	 */
  	spin_lock_bh(&queue->rskq_lock);
++<<<<<<< HEAD
 +	for (req = queue->rskq_accept_head; req; req = req->dl_next) {
 +		struct mptcp_subflow_context *subflow;
 +		struct sock *ssk = req->sk;
 +		struct mptcp_sock *msk;
 +
 +		if (!sk_is_mptcp(ssk))
 +			continue;
 +
 +		subflow = mptcp_subflow_ctx(ssk);
 +		if (!subflow || !subflow->conn)
 +			continue;
 +
 +		/* skip if already in list */
 +		msk = mptcp_sk(subflow->conn);
 +		if (msk->dl_next || msk == head)
 +			continue;
 +
 +		msk->dl_next = head;
 +		head = msk;
 +	}
++=======
+ 	head = queue->rskq_accept_head;
+ 	tail = queue->rskq_accept_tail;
+ 	queue->rskq_accept_head = NULL;
+ 	queue->rskq_accept_tail = NULL;
++>>>>>>> 511b90e39250 (mptcp: fix disconnect vs accept race)
  	spin_unlock_bh(&queue->rskq_lock);
+ 
  	if (!head)
  		return;
  
@@@ -1541,35 -1816,37 +1558,53 @@@
  	 */
  	release_sock(listener_ssk);
  
++<<<<<<< HEAD
 +	for (msk = head; msk; msk = next) {
 +		struct sock *sk = (struct sock *)msk;
 +		bool do_cancel_work;
++=======
+ 	for (req = head; req; req = req->dl_next) {
+ 		ssk = req->sk;
+ 		if (!sk_is_mptcp(ssk))
+ 			continue;
+ 
+ 		subflow = mptcp_subflow_ctx(ssk);
+ 		if (!subflow || !subflow->conn)
+ 			continue;
+ 
+ 		sk = subflow->conn;
+ 		sock_hold(sk);
++>>>>>>> 511b90e39250 (mptcp: fix disconnect vs accept race)
  
 +		sock_hold(sk);
  		lock_sock_nested(sk, SINGLE_DEPTH_NESTING);
++<<<<<<< HEAD
 +		next = msk->dl_next;
 +		msk->first = NULL;
 +		msk->dl_next = NULL;
 +
 +		do_cancel_work = __mptcp_close(sk, 0);
++=======
+ 		__mptcp_unaccepted_force_close(sk);
++>>>>>>> 511b90e39250 (mptcp: fix disconnect vs accept race)
  		release_sock(sk);
 -
 -		/* lockdep will report a false positive ABBA deadlock
 -		 * between cancel_work_sync and the listener socket.
 -		 * The involved locks belong to different sockets WRT
 -		 * the existing AB chain.
 -		 * Using a per socket key is problematic as key
 -		 * deregistration requires process context and must be
 -		 * performed at socket disposal time, in atomic
 -		 * context.
 -		 * Just tell lockdep to consider the listener socket
 -		 * released here.
 -		 */
 -		mutex_release(&listener_sk->sk_lock.dep_map, _RET_IP_);
 -		mptcp_cancel_work(sk);
 -		mutex_acquire(&listener_sk->sk_lock.dep_map, 0, 0, _RET_IP_);
 -
 +		if (do_cancel_work) {
 +			/* lockdep will report a false positive ABBA deadlock
 +			 * between cancel_work_sync and the listener socket.
 +			 * The involved locks belong to different sockets WRT
 +			 * the existing AB chain.
 +			 * Using a per socket key is problematic as key
 +			 * deregistration requires process context and must be
 +			 * performed at socket disposal time, in atomic
 +			 * context.
 +			 * Just tell lockdep to consider the listener socket
 +			 * released here.
 +			 */
 +			mutex_release(&listener_sk->sk_lock.dep_map, _RET_IP_);
 +			mptcp_cancel_work(sk);
 +			mutex_acquire(&listener_sk->sk_lock.dep_map,
 +				      SINGLE_DEPTH_NESTING, 0, _RET_IP_);
 +		}
  		sock_put(sk);
  	}
  
diff --git a/net/mptcp/protocol.h b/net/mptcp/protocol.h
index e985de3f0f58..a8f70b6da2bb 100644
--- a/net/mptcp/protocol.h
+++ b/net/mptcp/protocol.h
@@ -272,7 +272,6 @@ struct mptcp_sock {
 
 	u32 setsockopt_seq;
 	char		ca_name[TCP_CA_NAME_MAX];
-	struct mptcp_sock	*dl_next;
 };
 
 #define mptcp_lock_sock(___sk, cb) do {					\
* Unmerged path net/mptcp/subflow.c
