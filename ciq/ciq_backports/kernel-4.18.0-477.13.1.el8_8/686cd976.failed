crypto: drbg - Only fail when jent is unavailable in FIPS mode

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-477.13.1.el8_8
commit-author Herbert Xu <herbert@gondor.apana.org.au>
commit 686cd976b6ddedeeb1a1fb09ba53a891d3cc9a03
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-477.13.1.el8_8/686cd976.failed

When jent initialisation fails for any reason other than ENOENT,
the entire drbg fails to initialise, even when we're not in FIPS
mode.  This is wrong because we can still use the kernel RNG when
we're not in FIPS mode.

Change it so that it only fails when we are in FIPS mode.

Fixes: 57225e679788 ("crypto: drbg - Use callback API for random readiness")
	Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
	Reviewed-by: Stephan Mueller <smueller@chronox.de>
	Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
(cherry picked from commit 686cd976b6ddedeeb1a1fb09ba53a891d3cc9a03)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	crypto/drbg.c
diff --cc crypto/drbg.c
index 6be1b7cfaa9b,ff4ebbc68efa..000000000000
--- a/crypto/drbg.c
+++ b/crypto/drbg.c
@@@ -1510,34 -1542,16 +1510,41 @@@ static int drbg_prepare_hrng(struct drb
  		return 0;
  
  	drbg->jent = crypto_alloc_rng("jitterentropy_rng", 0, 0);
 -	if (IS_ERR(drbg->jent)) {
 -		const int err = PTR_ERR(drbg->jent);
  
++<<<<<<< HEAD
 +	INIT_WORK(&drbg->seed_work, drbg_async_seed);
 +
 +	drbg->random_ready.owner = THIS_MODULE;
 +	drbg->random_ready.func = drbg_schedule_async_seed;
 +
 +	err = add_random_ready_callback(&drbg->random_ready);
 +
 +	switch (err) {
 +	case 0:
 +		break;
 +
 +	case -EALREADY:
 +		err = 0;
 +		fallthrough;
 +
 +	default:
 +		drbg->random_ready.func = NULL;
 +		return err;
++=======
+ 		drbg->jent = NULL;
+ 		if (fips_enabled)
+ 			return err;
+ 		pr_info("DRBG: Continuing without Jitter RNG\n");
++>>>>>>> 686cd976b6dd (crypto: drbg - Only fail when jent is unavailable in FIPS mode)
  	}
  
 -	return 0;
 +	/*
 +	 * Require frequent reseeds until the seed source is fully
 +	 * initialized.
 +	 */
 +	drbg->reseed_threshold = 50;
 +
 +	return err;
  }
  
  /*
* Unmerged path crypto/drbg.c
