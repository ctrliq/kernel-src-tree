scsi: target: iscsi: Control authentication per ACL

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-494.el8
commit-author Dmitry Bogdanov <d.bogdanov@yadro.com>
commit a6e0d179764cb31b2981c85e6fd156adc777e4ed
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-494.el8/a6e0d179.failed

Add acls/{ACL}/attrib/authentication attribute that controls authentication
for particular ACL. By default, this attribute inherits a value of the
authentication attribute of the target port group to keep backward
compatibility.

Authentication attribute has 3 states:

 "0" - authentication is turned off for this ACL

 "1" - authentication is required for this ACL

 "-1" - authentication is inherited from TPG

Link: https://lore.kernel.org/r/20220523095905.26070-4-d.bogdanov@yadro.com
	Reviewed-by: Roman Bolshakov <r.bolshakov@yadro.com>
	Reviewed-by: Konstantin Shelekhin <k.shelekhin@yadro.com>
	Reviewed-by: Mike Christie <michael.christie@oracle.com>
	Signed-off-by: Dmitry Bogdanov <d.bogdanov@yadro.com>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit a6e0d179764cb31b2981c85e6fd156adc777e4ed)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/target/iscsi/iscsi_target_nego.c
diff --cc drivers/target/iscsi/iscsi_target_nego.c
index 5e35f8260dd3,9ce35a59962b..000000000000
--- a/drivers/target/iscsi/iscsi_target_nego.c
+++ b/drivers/target/iscsi/iscsi_target_nego.c
@@@ -821,8 -811,45 +821,48 @@@ static int iscsi_target_do_authenticati
  	return 0;
  }
  
++<<<<<<< HEAD
++=======
+ static bool iscsi_conn_auth_required(struct iscsit_conn *conn)
+ {
+ 	struct iscsi_node_acl *nacl;
+ 	struct se_node_acl *se_nacl;
+ 
+ 	if (conn->sess->sess_ops->SessionType) {
+ 		/*
+ 		 * For SessionType=Discovery
+ 		 */
+ 		return conn->tpg->tpg_attrib.authentication;
+ 	}
+ 	/*
+ 	 * For SessionType=Normal
+ 	 */
+ 	se_nacl = conn->sess->se_sess->se_node_acl;
+ 	if (!se_nacl) {
+ 		pr_debug("Unknown ACL %s is trying to connect\n",
+ 			 se_nacl->initiatorname);
+ 		return true;
+ 	}
+ 
+ 	if (se_nacl->dynamic_node_acl) {
+ 		pr_debug("Dynamic ACL %s is trying to connect\n",
+ 			 se_nacl->initiatorname);
+ 		return conn->tpg->tpg_attrib.authentication;
+ 	}
+ 
+ 	pr_debug("Known ACL %s is trying to connect\n",
+ 		 se_nacl->initiatorname);
+ 
+ 	nacl = to_iscsi_nacl(se_nacl);
+ 	if (nacl->node_attrib.authentication == NA_AUTHENTICATION_INHERITED)
+ 		return conn->tpg->tpg_attrib.authentication;
+ 
+ 	return nacl->node_attrib.authentication;
+ }
+ 
++>>>>>>> a6e0d179764c (scsi: target: iscsi: Control authentication per ACL)
  static int iscsi_target_handle_csg_zero(
 -	struct iscsit_conn *conn,
 +	struct iscsi_conn *conn,
  	struct iscsi_login *login)
  {
  	int ret;
diff --git a/drivers/target/iscsi/iscsi_target_configfs.c b/drivers/target/iscsi/iscsi_target_configfs.c
index a91d31b1fb73..72d61431085c 100644
--- a/drivers/target/iscsi/iscsi_target_configfs.c
+++ b/drivers/target/iscsi/iscsi_target_configfs.c
@@ -322,6 +322,36 @@ ISCSI_NACL_ATTR(random_datain_pdu_offsets);
 ISCSI_NACL_ATTR(random_datain_seq_offsets);
 ISCSI_NACL_ATTR(random_r2t_offsets);
 
+static ssize_t iscsi_nacl_attrib_authentication_show(struct config_item *item,
+		char *page)
+{
+	struct se_node_acl *se_nacl = attrib_to_nacl(item);
+	struct iscsi_node_acl *nacl = to_iscsi_nacl(se_nacl);
+
+	return sprintf(page, "%d\n", nacl->node_attrib.authentication);
+}
+
+static ssize_t iscsi_nacl_attrib_authentication_store(struct config_item *item,
+		const char *page, size_t count)
+{
+	struct se_node_acl *se_nacl = attrib_to_nacl(item);
+	struct iscsi_node_acl *nacl = to_iscsi_nacl(se_nacl);
+	s32 val;
+	int ret;
+
+	ret = kstrtos32(page, 0, &val);
+	if (ret)
+		return ret;
+	if (val != 0 && val != 1 && val != NA_AUTHENTICATION_INHERITED)
+		return -EINVAL;
+
+	nacl->node_attrib.authentication = val;
+
+	return count;
+}
+
+CONFIGFS_ATTR(iscsi_nacl_attrib_, authentication);
+
 static struct configfs_attribute *lio_target_nacl_attrib_attrs[] = {
 	&iscsi_nacl_attrib_attr_dataout_timeout,
 	&iscsi_nacl_attrib_attr_dataout_timeout_retries,
@@ -331,6 +361,7 @@ static struct configfs_attribute *lio_target_nacl_attrib_attrs[] = {
 	&iscsi_nacl_attrib_attr_random_datain_pdu_offsets,
 	&iscsi_nacl_attrib_attr_random_datain_seq_offsets,
 	&iscsi_nacl_attrib_attr_random_r2t_offsets,
+	&iscsi_nacl_attrib_attr_authentication,
 	NULL,
 };
 
* Unmerged path drivers/target/iscsi/iscsi_target_nego.c
diff --git a/drivers/target/iscsi/iscsi_target_nodeattrib.c b/drivers/target/iscsi/iscsi_target_nodeattrib.c
index 208cca8a363c..a6ea9c8a1e58 100644
--- a/drivers/target/iscsi/iscsi_target_nodeattrib.c
+++ b/drivers/target/iscsi/iscsi_target_nodeattrib.c
@@ -38,6 +38,7 @@ void iscsit_set_default_node_attribues(
 {
 	struct iscsi_node_attrib *a = &acl->node_attrib;
 
+	a->authentication = NA_AUTHENTICATION_INHERITED;
 	a->dataout_timeout = NA_DATAOUT_TIMEOUT;
 	a->dataout_timeout_retries = NA_DATAOUT_TIMEOUT_RETRIES;
 	a->nopin_timeout = NA_NOPIN_TIMEOUT;
diff --git a/include/target/iscsi/iscsi_target_core.h b/include/target/iscsi/iscsi_target_core.h
index feaa527231d0..06f4b6835862 100644
--- a/include/target/iscsi/iscsi_target_core.h
+++ b/include/target/iscsi/iscsi_target_core.h
@@ -26,6 +26,7 @@ struct sock;
 #define ISCSI_RX_THREAD_NAME		"iscsi_trx"
 #define ISCSI_TX_THREAD_NAME		"iscsi_ttx"
 #define ISCSI_IQN_LEN			224
+#define NA_AUTHENTICATION_INHERITED	-1
 
 /* struct iscsi_node_attrib sanity values */
 #define NA_DATAOUT_TIMEOUT		3
@@ -718,6 +719,7 @@ struct iscsi_login {
 } ____cacheline_aligned;
 
 struct iscsi_node_attrib {
+	s32			authentication;
 	u32			dataout_timeout;
 	u32			dataout_timeout_retries;
 	u32			default_erl;
