rtc: Improve performance of rtc_time64_to_tm(). Add tests.

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-494.el8
commit-author Cassio Neri <cassio.neri@gmail.com>
commit 1d1bb12a8b1805ddeef9793ebeb920179fb0fa38
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-494.el8/1d1bb12a.failed

The current implementation of rtc_time64_to_tm() contains unnecessary
loops, branches and look-up tables. The new one uses an arithmetic-based
algorithm appeared in [1] and is approximately 4.3 times faster (YMMV).

The drawback is that the new code isn't intuitive and contains many 'magic
numbers' (not unusual for this type of algorithm). However, [1] justifies
all those numbers and, given this function's history, the code is unlikely
to need much maintenance, if any at all.

Add a KUnit test case that checks every day in a 160,000 years interval
starting on 1970-01-01 against the expected result. Add a new config
RTC_LIB_KUNIT_TEST symbol to give the option to run this test suite.

[1] Neri, Schneider, "Euclidean Affine Functions and Applications to
Calendar Algorithms". https://arxiv.org/abs/2102.06959

	Signed-off-by: Cassio Neri <cassio.neri@gmail.com>
	Reported-by: kernel test robot <lkp@intel.com>
	Signed-off-by: Alexandre Belloni <alexandre.belloni@bootlin.com>
Link: https://lore.kernel.org/r/20210624201343.85441-1-cassio.neri@gmail.com
(cherry picked from commit 1d1bb12a8b1805ddeef9793ebeb920179fb0fa38)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/rtc/Makefile
#	drivers/rtc/rtc-lib.c
diff --cc drivers/rtc/Makefile
index 5ff2fc0c361a,763d3628c603..000000000000
--- a/drivers/rtc/Makefile
+++ b/drivers/rtc/Makefile
@@@ -175,4 -178,4 +175,8 @@@ obj-$(CONFIG_RTC_DRV_WM8350)	+= rtc-wm8
  obj-$(CONFIG_RTC_DRV_X1205)	+= rtc-x1205.o
  obj-$(CONFIG_RTC_DRV_XGENE)	+= rtc-xgene.o
  obj-$(CONFIG_RTC_DRV_ZYNQMP)	+= rtc-zynqmp.o
++<<<<<<< HEAD
 +obj-$(CONFIG_RTC_DRV_GOLDFISH)	+= rtc-goldfish.o
++=======
+ obj-$(CONFIG_RTC_LIB_KUNIT_TEST)	+= lib_test.o
++>>>>>>> 1d1bb12a8b18 (rtc: Improve performance of rtc_time64_to_tm(). Add tests.)
diff --cc drivers/rtc/rtc-lib.c
index 4a3c0f3aab14,fe361652727a..000000000000
--- a/drivers/rtc/rtc-lib.c
+++ b/drivers/rtc/rtc-lib.c
@@@ -6,10 -7,8 +6,15 @@@
   *
   * based on arch/arm/common/rtctime.c and other bits
   *
++<<<<<<< HEAD:drivers/rtc/rtc-lib.c
 + * This program is free software; you can redistribute it and/or modify
 + * it under the terms of the GNU General Public License version 2 as
 + * published by the Free Software Foundation.
 +*/
++=======
+  * Author: Cassio Neri <cassio.neri@gmail.com> (rtc_time64_to_tm)
+  */
++>>>>>>> 1d1bb12a8b18 (rtc: Improve performance of rtc_time64_to_tm(). Add tests.):drivers/rtc/lib.c
  
  #include <linux/export.h>
  #include <linux/rtc.h>
@@@ -25,8 -24,6 +30,11 @@@ static const unsigned short rtc_ydays[2
  	{ 0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366 }
  };
  
++<<<<<<< HEAD:drivers/rtc/rtc-lib.c
 +#define LEAPS_THRU_END_OF(y) ((y)/4 - (y)/100 + (y)/400)
 +
++=======
++>>>>>>> 1d1bb12a8b18 (rtc: Improve performance of rtc_time64_to_tm(). Add tests.):drivers/rtc/lib.c
  /*
   * The number of days in the month.
   */
@@@ -45,10 -42,12 +53,19 @@@ int rtc_year_days(unsigned int day, uns
  }
  EXPORT_SYMBOL(rtc_year_days);
  
++<<<<<<< HEAD:drivers/rtc/rtc-lib.c
 +
 +/*
 + * rtc_time_to_tm64 - Converts time64_t to rtc_time.
 + * Convert seconds since 01-01-1970 00:00:00 to Gregorian date.
++=======
+ /**
+  * rtc_time64_to_tm - converts time64_t to rtc_time.
+  *
+  * @time:	The number of seconds since 01-01-1970 00:00:00.
+  *		(Must be positive.)
+  * @tm:		Pointer to the struct rtc_time.
++>>>>>>> 1d1bb12a8b18 (rtc: Improve performance of rtc_time64_to_tm(). Add tests.):drivers/rtc/lib.c
   */
  void rtc_time64_to_tm(time64_t time, struct rtc_time *tm)
  {
diff --git a/drivers/rtc/Kconfig b/drivers/rtc/Kconfig
index a2ba5db36145..9901a5ee77f7 100644
--- a/drivers/rtc/Kconfig
+++ b/drivers/rtc/Kconfig
@@ -9,6 +9,16 @@ config RTC_MC146818_LIB
 	bool
 	select RTC_LIB
 
+config RTC_LIB_KUNIT_TEST
+	tristate "KUnit test for RTC lib functions" if !KUNIT_ALL_TESTS
+	depends on KUNIT
+	default KUNIT_ALL_TESTS
+	select RTC_LIB
+	help
+	  Enable this option to test RTC library functions.
+
+	  If unsure, say N.
+
 menuconfig RTC_CLASS
 	bool "Real Time Clock"
 	default n
* Unmerged path drivers/rtc/Makefile
diff --git a/drivers/rtc/lib_test.c b/drivers/rtc/lib_test.c
new file mode 100644
index 000000000000..2124b67a2f43
--- /dev/null
+++ b/drivers/rtc/lib_test.c
@@ -0,0 +1,79 @@
+// SPDX-License-Identifier: LGPL-2.1+
+
+#include <kunit/test.h>
+#include <linux/rtc.h>
+
+/*
+ * Advance a date by one day.
+ */
+static void advance_date(int *year, int *month, int *mday, int *yday)
+{
+	if (*mday != rtc_month_days(*month - 1, *year)) {
+		++*mday;
+		++*yday;
+		return;
+	}
+
+	*mday = 1;
+	if (*month != 12) {
+		++*month;
+		++*yday;
+		return;
+	}
+
+	*month = 1;
+	*yday  = 1;
+	++*year;
+}
+
+/*
+ * Checks every day in a 160000 years interval starting on 1970-01-01
+ * against the expected result.
+ */
+static void rtc_time64_to_tm_test_date_range(struct kunit *test)
+{
+	/*
+	 * 160000 years	= (160000 / 400) * 400 years
+	 *		= (160000 / 400) * 146097 days
+	 *		= (160000 / 400) * 146097 * 86400 seconds
+	 */
+	time64_t total_secs = ((time64_t) 160000) / 400 * 146097 * 86400;
+
+	int year	= 1970;
+	int month	= 1;
+	int mday	= 1;
+	int yday	= 1;
+
+	struct rtc_time result;
+	time64_t secs;
+	s64 days;
+
+	for (secs = 0; secs <= total_secs; secs += 86400) {
+
+		rtc_time64_to_tm(secs, &result);
+
+		days = div_s64(secs, 86400);
+
+		#define FAIL_MSG "%d/%02d/%02d (%2d) : %ld", \
+			year, month, mday, yday, days
+
+		KUNIT_ASSERT_EQ_MSG(test, year - 1900, result.tm_year, FAIL_MSG);
+		KUNIT_ASSERT_EQ_MSG(test, month - 1, result.tm_mon, FAIL_MSG);
+		KUNIT_ASSERT_EQ_MSG(test, mday, result.tm_mday, FAIL_MSG);
+		KUNIT_ASSERT_EQ_MSG(test, yday, result.tm_yday, FAIL_MSG);
+
+		advance_date(&year, &month, &mday, &yday);
+	}
+}
+
+static struct kunit_case rtc_lib_test_cases[] = {
+	KUNIT_CASE(rtc_time64_to_tm_test_date_range),
+	{}
+};
+
+static struct kunit_suite rtc_lib_test_suite = {
+	.name = "rtc_lib_test_cases",
+	.test_cases = rtc_lib_test_cases,
+};
+
+kunit_test_suite(rtc_lib_test_suite);
* Unmerged path drivers/rtc/rtc-lib.c
