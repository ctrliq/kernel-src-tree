kunit: split out part of kunit_assert into a static const

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-494.el8
commit-author Daniel Latypov <dlatypov@google.com>
commit 21957f90b28f6bc118c055e3e564d45f6e4df45d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-494.el8/21957f90.failed

This is per Linus's suggestion in [1].

The issue there is that every KUNIT_EXPECT/KUNIT_ASSERT puts a
kunit_assert object onto the stack. Normally we rely on compilers to
elide this, but when that doesn't work out, this blows up the stack
usage of kunit test functions.

We can move some data off the stack by making it static.
This change introduces a new `struct kunit_loc` to hold the file and
line number and then just passing assert_type (EXPECT or ASSERT) as an
argument.

In [1], it was suggested to also move out the format string as well, but
users could theoretically craft a format string at runtime, so we can't.

This change leaves a copy of `assert_type` in kunit_assert for now
because cleaning up all the macros to not pass it around is a bit more
involved.

Here's an example of the expanded code for KUNIT_FAIL():
if (__builtin_expect(!!(!(false)), 0)) {
  static const struct kunit_loc loc = { .file = ... };
  struct kunit_fail_assert __assertion = { .assert = { .type ...  };
  kunit_do_failed_assertion(test, &loc, KUNIT_EXPECTATION, &__assertion.assert, ...);
};

[1] https://groups.google.com/g/kunit-dev/c/i3fZXgvBrfA/m/VULQg1z6BAAJ

	Signed-off-by: Daniel Latypov <dlatypov@google.com>
	Suggested-by: Linus Torvalds <torvalds@linux-foundation.org>
	Reviewed-by: David Gow <davidgow@google.com>
	Reviewed-by: Brendan Higgins <brendanhiggins@google.com>
	Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>
(cherry picked from commit 21957f90b28f6bc118c055e3e564d45f6e4df45d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/kunit/test.h
#	lib/kunit/test.c
diff --cc include/kunit/test.h
index 4c7dbf50afed,7b752175e614..000000000000
--- a/include/kunit/test.h
+++ b/include/kunit/test.h
@@@ -490,18 -771,23 +490,38 @@@ void __printf(2, 3) kunit_log_append(ch
   */
  #define KUNIT_SUCCEED(test) do {} while (0)
  
++<<<<<<< HEAD
 +void kunit_do_assertion(struct kunit *test,
 +			struct kunit_assert *assert,
 +			bool pass,
 +			const char *fmt, ...);
 +
 +#define KUNIT_ASSERTION(test, pass, assert_class, INITIALIZER, fmt, ...) do {  \
 +	struct assert_class __assertion = INITIALIZER;			       \
 +	kunit_do_assertion(test,					       \
 +			   &__assertion.assert,				       \
 +			   pass,					       \
 +			   fmt,						       \
 +			   ##__VA_ARGS__);				       \
++=======
+ void kunit_do_failed_assertion(struct kunit *test,
+ 			       const struct kunit_loc *loc,
+ 			       enum kunit_assert_type type,
+ 			       struct kunit_assert *assert,
+ 			       const char *fmt, ...);
+ 
+ #define KUNIT_ASSERTION(test, assert_type, pass, assert_class, INITIALIZER, fmt, ...) do { \
+ 	if (unlikely(!(pass))) {					       \
+ 		static const struct kunit_loc loc = KUNIT_CURRENT_LOC;	       \
+ 		struct assert_class __assertion = INITIALIZER;		       \
+ 		kunit_do_failed_assertion(test,				       \
+ 					  &loc,				       \
+ 					  assert_type,			       \
+ 					  &__assertion.assert,		       \
+ 					  fmt,				       \
+ 					  ##__VA_ARGS__);		       \
+ 	}								       \
++>>>>>>> 21957f90b28f (kunit: split out part of kunit_assert into a static const)
  } while (0)
  
  
diff --cc lib/kunit/test.c
index 835780513eaa,7dec3248562f..000000000000
--- a/lib/kunit/test.c
+++ b/lib/kunit/test.c
@@@ -276,16 -277,13 +277,24 @@@ static void __noreturn kunit_abort(stru
  	WARN_ONCE(true, "Throw could not abort from test!\n");
  }
  
++<<<<<<< HEAD
 +void kunit_do_assertion(struct kunit *test,
 +			struct kunit_assert *assert,
 +			bool pass,
 +			const char *fmt, ...)
++=======
+ void kunit_do_failed_assertion(struct kunit *test,
+ 			       const struct kunit_loc *loc,
+ 			       enum kunit_assert_type type,
+ 			       struct kunit_assert *assert,
+ 			       const char *fmt, ...)
++>>>>>>> 21957f90b28f (kunit: split out part of kunit_assert into a static const)
  {
  	va_list args;
 +
 +	if (pass)
 +		return;
 +
  	va_start(args, fmt);
  
  	assert->message.fmt = fmt;
@@@ -295,10 -293,10 +304,10 @@@
  
  	va_end(args);
  
- 	if (assert->type == KUNIT_ASSERTION)
+ 	if (type == KUNIT_ASSERTION)
  		kunit_abort(test);
  }
 -EXPORT_SYMBOL_GPL(kunit_do_failed_assertion);
 +EXPORT_SYMBOL_GPL(kunit_do_assertion);
  
  void kunit_init_test(struct kunit *test, const char *name, char *log)
  {
diff --git a/include/kunit/assert.h b/include/kunit/assert.h
index f568166ef034..0da1bbdd1ee8 100644
--- a/include/kunit/assert.h
+++ b/include/kunit/assert.h
@@ -28,11 +28,21 @@ enum kunit_assert_type {
 	KUNIT_EXPECTATION,
 };
 
+/**
+ * struct kunit_loc - Identifies the source location of a line of code.
+ * @line: the line number in the file.
+ * @file: the file name.
+ */
+struct kunit_loc {
+	int line;
+	const char *file;
+};
+
+#define KUNIT_CURRENT_LOC { .file = __FILE__, .line = __LINE__ }
+
 /**
  * struct kunit_assert - Data for printing a failed assertion or expectation.
  * @type: the type (either an expectation or an assertion) of this kunit_assert.
- * @line: the source code line number that the expectation/assertion is at.
- * @file: the file path of the source file that the expectation/assertion is in.
  * @message: an optional message to provide additional context.
  * @format: a function which formats the data in this kunit_assert to a string.
  *
@@ -40,9 +50,9 @@ enum kunit_assert_type {
  * format a string to a user reporting the failure.
  */
 struct kunit_assert {
+	 // TODO(dlatypov@google.com): delete this unused field when we've
+	 // updated all the related KUNIT_INIT_ASSERT* macros.
 	enum kunit_assert_type type;
-	int line;
-	const char *file;
 	struct va_format message;
 	void (*format)(const struct kunit_assert *assert,
 		       struct string_stream *stream);
@@ -65,14 +75,13 @@ struct kunit_assert {
  */
 #define KUNIT_INIT_ASSERT_STRUCT(assert_type, fmt) {			       \
 	.type = assert_type,						       \
-	.file = __FILE__,						       \
-	.line = __LINE__,						       \
 	.message = KUNIT_INIT_VA_FMT_NULL,				       \
 	.format = fmt							       \
 }
 
-void kunit_base_assert_format(const struct kunit_assert *assert,
-			      struct string_stream *stream);
+void kunit_assert_prologue(const struct kunit_loc *loc,
+			   enum kunit_assert_type type,
+			   struct string_stream *stream);
 
 void kunit_assert_print_msg(const struct kunit_assert *assert,
 			    struct string_stream *stream);
* Unmerged path include/kunit/test.h
diff --git a/lib/kunit/assert.c b/lib/kunit/assert.c
index 4d9a1295efc7..9f4492a8e24e 100644
--- a/lib/kunit/assert.c
+++ b/lib/kunit/assert.c
@@ -10,12 +10,13 @@
 
 #include "string-stream.h"
 
-void kunit_base_assert_format(const struct kunit_assert *assert,
+void kunit_assert_prologue(const struct kunit_loc *loc,
+			   enum kunit_assert_type type,
 			      struct string_stream *stream)
 {
 	const char *expect_or_assert = NULL;
 
-	switch (assert->type) {
+	switch (type) {
 	case KUNIT_EXPECTATION:
 		expect_or_assert = "EXPECTATION";
 		break;
@@ -25,9 +26,9 @@ void kunit_base_assert_format(const struct kunit_assert *assert,
 	}
 
 	string_stream_add(stream, "%s FAILED at %s:%d\n",
-			  expect_or_assert, assert->file, assert->line);
+			  expect_or_assert, loc->file, loc->line);
 }
-EXPORT_SYMBOL_GPL(kunit_base_assert_format);
+EXPORT_SYMBOL_GPL(kunit_assert_prologue);
 
 void kunit_assert_print_msg(const struct kunit_assert *assert,
 			    struct string_stream *stream)
* Unmerged path lib/kunit/test.c
