scsi: target: iscsi: Add support for extended CDB AHS

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-494.el8
commit-author Dmitry Bogdanov <d.bogdanov@yadro.com>
commit 8f1f7d297bce50d9daea95ca67e1c10aea6c232c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-494.el8/8f1f7d29.failed

Variable length SCSI commands are transferred over iSCSI via two CDB
buffers - in Basic Header Segment and in Additional Header Segment (AHS).
Since AHS is not supported yet, a target reads just BHS (48 byte) from TCP
and treats the remaining octets as a next new iSCSI PDU that causes
protocol errors.

Add support for the Extended CDB AHS type.

Link: https://lore.kernel.org/r/20220718152555.17084-2-d.bogdanov@yadro.com
	Reviewed-by: Mike Christie <michael.christie@oracle.com>
	Signed-off-by: Dmitry Bogdanov <d.bogdanov@yadro.com>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit 8f1f7d297bce50d9daea95ca67e1c10aea6c232c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/target/iscsi/iscsi_target.c
diff --cc drivers/target/iscsi/iscsi_target.c
index e7cabc848728,baf4da7bb3b4..000000000000
--- a/drivers/target/iscsi/iscsi_target.c
+++ b/drivers/target/iscsi/iscsi_target.c
@@@ -1176,8 -1202,12 +1202,15 @@@ int iscsit_setup_scsi_cmd(struct iscsi_
  	target_get_sess_cmd(&cmd->se_cmd, true);
  
  	cmd->se_cmd.tag = (__force u32)cmd->init_task_tag;
- 	cmd->sense_reason = target_cmd_init_cdb(&cmd->se_cmd, hdr->cdb,
+ 	cmd->sense_reason = target_cmd_init_cdb(&cmd->se_cmd, cdb,
  						GFP_KERNEL);
++<<<<<<< HEAD
++=======
+ 
+ 	if (cdb != hdr->cdb)
+ 		kfree(cdb);
+ 
++>>>>>>> 8f1f7d297bce (scsi: target: iscsi: Add support for extended CDB AHS)
  	if (cmd->sense_reason) {
  		if (cmd->sense_reason == TCM_OUT_OF_RESOURCES) {
  			return iscsit_add_reject_cmd(cmd,
@@@ -3965,11 -4062,12 +3998,12 @@@ static bool iscsi_target_check_conn_sta
  	return ret;
  }
  
 -static void iscsit_get_rx_pdu(struct iscsit_conn *conn)
 +static void iscsit_get_rx_pdu(struct iscsi_conn *conn)
  {
  	int ret;
- 	u8 *buffer, opcode;
+ 	u8 *buffer, *tmp_buf, opcode;
  	u32 checksum = 0, digest = 0;
+ 	struct iscsi_hdr *hdr;
  	struct kvec iov;
  
  	buffer = kcalloc(ISCSI_HDR_LEN, sizeof(*buffer), GFP_KERNEL);
* Unmerged path drivers/target/iscsi/iscsi_target.c
