scsi: target: iscsi: Rename iscsi_conn to iscsit_conn

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-494.el8
commit-author Max Gurtovoy <mgurtovoy@nvidia.com>
commit be36d683fc29e74bbd29347717be72beb6a74219
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-494.el8/be36d683.failed

The structure iscsi_conn naming is used by the iSCSI initiator
driver. Rename the target conn to iscsit_conn to have more readable code.

Link: https://lore.kernel.org/r/20220428092939.36768-2-mgurtovoy@nvidia.com
	Reviewed-by: Mike Christie <michael.christie@oracle.com>
	Signed-off-by: Max Gurtovoy <mgurtovoy@nvidia.com>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit be36d683fc29e74bbd29347717be72beb6a74219)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/ulp/isert/ib_isert.c
#	drivers/target/iscsi/cxgbit/cxgbit.h
#	drivers/target/iscsi/cxgbit/cxgbit_ddp.c
#	drivers/target/iscsi/cxgbit/cxgbit_target.c
#	drivers/target/iscsi/iscsi_target.c
#	drivers/target/iscsi/iscsi_target.h
#	drivers/target/iscsi/iscsi_target_configfs.c
#	drivers/target/iscsi/iscsi_target_erl0.h
#	drivers/target/iscsi/iscsi_target_erl1.c
#	drivers/target/iscsi/iscsi_target_erl1.h
#	drivers/target/iscsi/iscsi_target_erl2.h
#	drivers/target/iscsi/iscsi_target_nego.c
#	drivers/target/iscsi/iscsi_target_tmr.c
#	drivers/target/iscsi/iscsi_target_tmr.h
#	drivers/target/iscsi/iscsi_target_util.c
#	drivers/target/iscsi/iscsi_target_util.h
#	include/target/iscsi/iscsi_target_core.h
#	include/target/iscsi/iscsi_transport.h
diff --cc drivers/infiniband/ulp/isert/ib_isert.c
index a36182cbe7a5,48064bd8aa2c..000000000000
--- a/drivers/infiniband/ulp/isert/ib_isert.c
+++ b/drivers/infiniband/ulp/isert/ib_isert.c
@@@ -47,7 -46,7 +47,11 @@@ static struct workqueue_struct *isert_c
  static struct workqueue_struct *isert_release_wq;
  
  static int
++<<<<<<< HEAD
 +isert_put_response(struct iscsi_conn *conn, struct iscsi_cmd *cmd);
++=======
+ isert_put_response(struct iscsit_conn *conn, struct iscsit_cmd *cmd);
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  static int
  isert_login_post_recv(struct isert_conn *isert_conn);
  static int
@@@ -1017,11 -1017,11 +1021,16 @@@ isert_rx_login_req(struct isert_conn *i
  		complete(&isert_conn->login_comp);
  		return;
  	}
 -	schedule_delayed_work(&conn->login_work, 0);
 +	queue_delayed_work(isert_login_wq, &conn->login_work, 0);
  }
  
++<<<<<<< HEAD
 +static struct iscsi_cmd
 +*isert_allocate_cmd(struct iscsi_conn *conn, struct iser_rx_desc *rx_desc)
++=======
+ static struct iscsit_cmd
+ *isert_allocate_cmd(struct iscsit_conn *conn, struct iser_rx_desc *rx_desc)
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  {
  	struct isert_conn *isert_conn = conn->context;
  	struct isert_cmd *isert_cmd;
@@@ -1042,10 -1042,10 +1051,10 @@@
  
  static int
  isert_handle_scsi_cmd(struct isert_conn *isert_conn,
 -		      struct isert_cmd *isert_cmd, struct iscsit_cmd *cmd,
 +		      struct isert_cmd *isert_cmd, struct iscsi_cmd *cmd,
  		      struct iser_rx_desc *rx_desc, unsigned char *buf)
  {
- 	struct iscsi_conn *conn = isert_conn->conn;
+ 	struct iscsit_conn *conn = isert_conn->conn;
  	struct iscsi_scsi_req *hdr = (struct iscsi_scsi_req *)buf;
  	int imm_data, imm_data_len, unsol_data, sg_nents, rc;
  	bool dump_payload = false;
@@@ -1114,8 -1114,8 +1123,13 @@@ isert_handle_iscsi_dataout(struct isert
  			   struct iser_rx_desc *rx_desc, unsigned char *buf)
  {
  	struct scatterlist *sg_start;
++<<<<<<< HEAD
 +	struct iscsi_conn *conn = isert_conn->conn;
 +	struct iscsi_cmd *cmd = NULL;
++=======
+ 	struct iscsit_conn *conn = isert_conn->conn;
+ 	struct iscsit_cmd *cmd = NULL;
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  	struct iscsi_data *hdr = (struct iscsi_data *)buf;
  	u32 unsol_data_len = ntoh24(hdr->dlength);
  	int rc, sg_nents, sg_off, page_off;
@@@ -1171,10 -1171,10 +1185,10 @@@
  
  static int
  isert_handle_nop_out(struct isert_conn *isert_conn, struct isert_cmd *isert_cmd,
 -		     struct iscsit_cmd *cmd, struct iser_rx_desc *rx_desc,
 +		     struct iscsi_cmd *cmd, struct iser_rx_desc *rx_desc,
  		     unsigned char *buf)
  {
- 	struct iscsi_conn *conn = isert_conn->conn;
+ 	struct iscsit_conn *conn = isert_conn->conn;
  	struct iscsi_nopout *hdr = (struct iscsi_nopout *)buf;
  	int rc;
  
@@@ -1190,10 -1190,10 +1204,10 @@@
  
  static int
  isert_handle_text_cmd(struct isert_conn *isert_conn, struct isert_cmd *isert_cmd,
 -		      struct iscsit_cmd *cmd, struct iser_rx_desc *rx_desc,
 +		      struct iscsi_cmd *cmd, struct iser_rx_desc *rx_desc,
  		      struct iscsi_text *hdr)
  {
- 	struct iscsi_conn *conn = isert_conn->conn;
+ 	struct iscsit_conn *conn = isert_conn->conn;
  	u32 payload_length = ntoh24(hdr->dlength);
  	int rc;
  	unsigned char *text_in = NULL;
@@@ -1220,8 -1220,8 +1234,13 @@@ isert_rx_opcode(struct isert_conn *iser
  		uint32_t write_stag, uint64_t write_va)
  {
  	struct iscsi_hdr *hdr = isert_get_iscsi_hdr(rx_desc);
++<<<<<<< HEAD
 +	struct iscsi_conn *conn = isert_conn->conn;
 +	struct iscsi_cmd *cmd;
++=======
+ 	struct iscsit_conn *conn = isert_conn->conn;
+ 	struct iscsit_cmd *cmd;
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  	struct isert_cmd *isert_cmd;
  	int ret = -EINVAL;
  	u8 opcode = (hdr->opcode & ISCSI_OPCODE_MASK);
@@@ -1426,9 -1426,9 +1445,9 @@@ isert_rdma_rw_ctx_destroy(struct isert_
  static void
  isert_put_cmd(struct isert_cmd *isert_cmd, bool comp_err)
  {
 -	struct iscsit_cmd *cmd = isert_cmd->iscsit_cmd;
 +	struct iscsi_cmd *cmd = isert_cmd->iscsi_cmd;
  	struct isert_conn *isert_conn = isert_cmd->conn;
- 	struct iscsi_conn *conn = isert_conn->conn;
+ 	struct iscsit_conn *conn = isert_conn->conn;
  	struct iscsi_text_rsp *hdr;
  
  	isert_dbg("Cmd %p\n", isert_cmd);
@@@ -1756,7 -1755,7 +1775,11 @@@ isert_post_response(struct isert_conn *
  }
  
  static int
++<<<<<<< HEAD
 +isert_put_response(struct iscsi_conn *conn, struct iscsi_cmd *cmd)
++=======
+ isert_put_response(struct iscsit_conn *conn, struct iscsit_cmd *cmd)
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  {
  	struct isert_cmd *isert_cmd = iscsit_priv_cmd(cmd);
  	struct isert_conn *isert_conn = conn->context;
@@@ -1807,7 -1806,7 +1830,11 @@@
  }
  
  static void
++<<<<<<< HEAD
 +isert_aborted_task(struct iscsi_conn *conn, struct iscsi_cmd *cmd)
++=======
+ isert_aborted_task(struct iscsit_conn *conn, struct iscsit_cmd *cmd)
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  {
  	struct isert_cmd *isert_cmd = iscsit_priv_cmd(cmd);
  	struct isert_conn *isert_conn = conn->context;
@@@ -1843,7 -1842,7 +1870,11 @@@ isert_get_sup_prot_ops(struct iscsit_co
  }
  
  static int
++<<<<<<< HEAD
 +isert_put_nopin(struct iscsi_cmd *cmd, struct iscsi_conn *conn,
++=======
+ isert_put_nopin(struct iscsit_cmd *cmd, struct iscsit_conn *conn,
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  		bool nopout_response)
  {
  	struct isert_cmd *isert_cmd = iscsit_priv_cmd(cmd);
@@@ -1870,7 -1862,7 +1901,11 @@@
  }
  
  static int
++<<<<<<< HEAD
 +isert_put_logout_rsp(struct iscsi_cmd *cmd, struct iscsi_conn *conn)
++=======
+ isert_put_logout_rsp(struct iscsit_cmd *cmd, struct iscsit_conn *conn)
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  {
  	struct isert_cmd *isert_cmd = iscsit_priv_cmd(cmd);
  	struct isert_conn *isert_conn = conn->context;
@@@ -1888,7 -1880,7 +1923,11 @@@
  }
  
  static int
++<<<<<<< HEAD
 +isert_put_tm_rsp(struct iscsi_cmd *cmd, struct iscsi_conn *conn)
++=======
+ isert_put_tm_rsp(struct iscsit_cmd *cmd, struct iscsit_conn *conn)
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  {
  	struct isert_cmd *isert_cmd = iscsit_priv_cmd(cmd);
  	struct isert_conn *isert_conn = conn->context;
@@@ -1906,7 -1898,7 +1945,11 @@@
  }
  
  static int
++<<<<<<< HEAD
 +isert_put_reject(struct iscsi_cmd *cmd, struct iscsi_conn *conn)
++=======
+ isert_put_reject(struct iscsit_cmd *cmd, struct iscsit_conn *conn)
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  {
  	struct isert_cmd *isert_cmd = iscsit_priv_cmd(cmd);
  	struct isert_conn *isert_conn = conn->context;
@@@ -1941,7 -1933,7 +1984,11 @@@
  }
  
  static int
++<<<<<<< HEAD
 +isert_put_text_rsp(struct iscsi_cmd *cmd, struct iscsi_conn *conn)
++=======
+ isert_put_text_rsp(struct iscsit_cmd *cmd, struct iscsit_conn *conn)
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  {
  	struct isert_cmd *isert_cmd = iscsit_priv_cmd(cmd);
  	struct isert_conn *isert_conn = conn->context;
@@@ -2096,7 -2088,7 +2143,11 @@@ rdma_ctx_post
  }
  
  static int
++<<<<<<< HEAD
 +isert_put_datain(struct iscsi_conn *conn, struct iscsi_cmd *cmd)
++=======
+ isert_put_datain(struct iscsit_conn *conn, struct iscsit_cmd *cmd)
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  {
  	struct se_cmd *se_cmd = &cmd->se_cmd;
  	struct isert_cmd *isert_cmd = iscsit_priv_cmd(cmd);
@@@ -2137,7 -2129,7 +2188,11 @@@
  }
  
  static int
++<<<<<<< HEAD
 +isert_get_dataout(struct iscsi_conn *conn, struct iscsi_cmd *cmd, bool recovery)
++=======
+ isert_get_dataout(struct iscsit_conn *conn, struct iscsit_cmd *cmd, bool recovery)
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  {
  	struct isert_cmd *isert_cmd = iscsit_priv_cmd(cmd);
  	int ret;
@@@ -2155,7 -2147,7 +2210,11 @@@
  }
  
  static int
++<<<<<<< HEAD
 +isert_immediate_queue(struct iscsi_conn *conn, struct iscsi_cmd *cmd, int state)
++=======
+ isert_immediate_queue(struct iscsit_conn *conn, struct iscsit_cmd *cmd, int state)
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  {
  	struct isert_cmd *isert_cmd = iscsit_priv_cmd(cmd);
  	int ret = 0;
@@@ -2181,7 -2172,7 +2240,11 @@@
  }
  
  static int
++<<<<<<< HEAD
 +isert_response_queue(struct iscsi_conn *conn, struct iscsi_cmd *cmd, int state)
++=======
+ isert_response_queue(struct iscsit_conn *conn, struct iscsit_cmd *cmd, int state)
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  {
  	struct isert_conn *isert_conn = conn->context;
  	int ret;
@@@ -2530,9 -2521,9 +2593,9 @@@ isert_wait4cmds(struct iscsit_conn *con
   * before blocking on the target_wait_for_session_cmds
   */
  static void
- isert_put_unsol_pending_cmds(struct iscsi_conn *conn)
+ isert_put_unsol_pending_cmds(struct iscsit_conn *conn)
  {
 -	struct iscsit_cmd *cmd, *tmp;
 +	struct iscsi_cmd *cmd, *tmp;
  	static LIST_HEAD(drop_cmd_list);
  
  	spin_lock_bh(&conn->cmd_lock);
diff --cc drivers/target/iscsi/cxgbit/cxgbit.h
index f51419a3c1dd,aff727629663..000000000000
--- a/drivers/target/iscsi/cxgbit/cxgbit.h
+++ b/drivers/target/iscsi/cxgbit/cxgbit.h
@@@ -329,10 -326,10 +329,17 @@@ int cxgbit_rx_data_ack(struct cxgbit_so
  int cxgbit_l2t_send(struct cxgbit_device *, struct sk_buff *,
  		    struct l2t_entry *);
  void cxgbit_push_tx_frames(struct cxgbit_sock *);
++<<<<<<< HEAD
 +int cxgbit_put_login_tx(struct iscsi_conn *, struct iscsi_login *, u32);
 +int cxgbit_xmit_pdu(struct iscsi_conn *, struct iscsi_cmd *,
 +		    struct iscsi_datain_req *, const void *, u32);
 +void cxgbit_get_r2t_ttt(struct iscsi_conn *, struct iscsi_cmd *,
++=======
+ int cxgbit_put_login_tx(struct iscsit_conn *, struct iscsi_login *, u32);
+ int cxgbit_xmit_pdu(struct iscsit_conn *, struct iscsit_cmd *,
+ 		    struct iscsi_datain_req *, const void *, u32);
+ void cxgbit_get_r2t_ttt(struct iscsit_conn *, struct iscsit_cmd *,
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  			struct iscsi_r2t *);
  u32 cxgbit_send_tx_flowc_wr(struct cxgbit_sock *);
  int cxgbit_ofld_send(struct cxgbit_device *, struct sk_buff *);
@@@ -343,8 -340,8 +350,13 @@@ struct cxgbit_device *cxgbit_find_devic
  /* DDP */
  int cxgbit_ddp_init(struct cxgbit_device *);
  int cxgbit_setup_conn_pgidx(struct cxgbit_sock *, u32);
++<<<<<<< HEAD
 +int cxgbit_reserve_ttt(struct cxgbit_sock *, struct iscsi_cmd *);
 +void cxgbit_unmap_cmd(struct iscsi_conn *, struct iscsi_cmd *);
++=======
+ int cxgbit_reserve_ttt(struct cxgbit_sock *, struct iscsit_cmd *);
+ void cxgbit_unmap_cmd(struct iscsit_conn *, struct iscsit_cmd *);
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  
  static inline
  struct cxgbi_ppm *cdev2ppm(struct cxgbit_device *cdev)
diff --cc drivers/target/iscsi/cxgbit/cxgbit_ddp.c
index 5ab627f9b539,17fd0d8cc490..000000000000
--- a/drivers/target/iscsi/cxgbit/cxgbit_ddp.c
+++ b/drivers/target/iscsi/cxgbit/cxgbit_ddp.c
@@@ -230,7 -227,7 +230,11 @@@ rel_ppods
  }
  
  void
++<<<<<<< HEAD
 +cxgbit_get_r2t_ttt(struct iscsi_conn *conn, struct iscsi_cmd *cmd,
++=======
+ cxgbit_get_r2t_ttt(struct iscsit_conn *conn, struct iscsit_cmd *cmd,
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  		   struct iscsi_r2t *r2t)
  {
  	struct cxgbit_sock *csk = conn->context;
@@@ -263,7 -260,7 +267,11 @@@ out
  	r2t->targ_xfer_tag = ttinfo->tag;
  }
  
++<<<<<<< HEAD
 +void cxgbit_unmap_cmd(struct iscsi_conn *conn, struct iscsi_cmd *cmd)
++=======
+ void cxgbit_unmap_cmd(struct iscsit_conn *conn, struct iscsit_cmd *cmd)
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  {
  	struct cxgbit_cmd *ccmd = iscsit_priv_cmd(cmd);
  
diff --cc drivers/target/iscsi/cxgbit/cxgbit_target.c
index 22128810b9c1,acfc39683c87..000000000000
--- a/drivers/target/iscsi/cxgbit/cxgbit_target.c
+++ b/drivers/target/iscsi/cxgbit/cxgbit_target.c
@@@ -393,10 -390,10 +393,10 @@@ cxgbit_map_skb(struct iscsi_cmd *cmd, s
  }
  
  static int
 -cxgbit_tx_datain_iso(struct cxgbit_sock *csk, struct iscsit_cmd *cmd,
 +cxgbit_tx_datain_iso(struct cxgbit_sock *csk, struct iscsi_cmd *cmd,
  		     struct iscsi_datain_req *dr)
  {
- 	struct iscsi_conn *conn = csk->conn;
+ 	struct iscsit_conn *conn = csk->conn;
  	struct sk_buff *skb;
  	struct iscsi_datain datain;
  	struct cxgbit_iso_info iso_info;
@@@ -513,7 -510,7 +513,11 @@@ cxgbit_tx_datain(struct cxgbit_sock *cs
  }
  
  static int
++<<<<<<< HEAD
 +cxgbit_xmit_datain_pdu(struct iscsi_conn *conn, struct iscsi_cmd *cmd,
++=======
+ cxgbit_xmit_datain_pdu(struct iscsit_conn *conn, struct iscsit_cmd *cmd,
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  		       struct iscsi_datain_req *dr,
  		       const struct iscsi_datain *datain)
  {
@@@ -533,7 -530,7 +537,11 @@@
  }
  
  static int
++<<<<<<< HEAD
 +cxgbit_xmit_nondatain_pdu(struct iscsi_conn *conn, struct iscsi_cmd *cmd,
++=======
+ cxgbit_xmit_nondatain_pdu(struct iscsit_conn *conn, struct iscsit_cmd *cmd,
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  			  const void *data_buf, u32 data_buf_len)
  {
  	struct cxgbit_sock *csk = conn->context;
@@@ -563,7 -560,7 +571,11 @@@
  }
  
  int
++<<<<<<< HEAD
 +cxgbit_xmit_pdu(struct iscsi_conn *conn, struct iscsi_cmd *cmd,
++=======
+ cxgbit_xmit_pdu(struct iscsit_conn *conn, struct iscsit_cmd *cmd,
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  		struct iscsi_datain_req *dr, const void *buf, u32 buf_len)
  {
  	if (dr)
@@@ -835,12 -832,12 +847,12 @@@ cxgbit_skb_copy_to_sg(struct sk_buff *s
  	}
  }
  
 -static struct iscsit_cmd *cxgbit_allocate_cmd(struct cxgbit_sock *csk)
 +static struct iscsi_cmd *cxgbit_allocate_cmd(struct cxgbit_sock *csk)
  {
- 	struct iscsi_conn *conn = csk->conn;
+ 	struct iscsit_conn *conn = csk->conn;
  	struct cxgbi_ppm *ppm = cdev2ppm(csk->com.cdev);
  	struct cxgbit_cmd *ccmd;
 -	struct iscsit_cmd *cmd;
 +	struct iscsi_cmd *cmd;
  
  	cmd = iscsit_allocate_cmd(conn, TASK_INTERRUPTIBLE);
  	if (!cmd) {
@@@ -856,10 -853,10 +868,10 @@@
  }
  
  static int
 -cxgbit_handle_immediate_data(struct iscsit_cmd *cmd, struct iscsi_scsi_req *hdr,
 +cxgbit_handle_immediate_data(struct iscsi_cmd *cmd, struct iscsi_scsi_req *hdr,
  			     u32 length)
  {
- 	struct iscsi_conn *conn = cmd->conn;
+ 	struct iscsit_conn *conn = cmd->conn;
  	struct cxgbit_sock *csk = conn->context;
  	struct cxgbit_lro_pdu_cb *pdu_cb = cxgbit_rx_pdu_cb(csk->skb);
  
@@@ -913,10 -910,10 +925,10 @@@
  }
  
  static int
 -cxgbit_get_immediate_data(struct iscsit_cmd *cmd, struct iscsi_scsi_req *hdr,
 +cxgbit_get_immediate_data(struct iscsi_cmd *cmd, struct iscsi_scsi_req *hdr,
  			  bool dump_payload)
  {
- 	struct iscsi_conn *conn = cmd->conn;
+ 	struct iscsit_conn *conn = cmd->conn;
  	int cmdsn_ret = 0, immed_ret = IMMEDIATE_DATA_NORMAL_OPERATION;
  	/*
  	 * Special case for Unsupported SAM WRITE Opcodes and ImmediateData=Yes.
@@@ -967,9 -964,9 +979,9 @@@ after_immediate_data
  }
  
  static int
 -cxgbit_handle_scsi_cmd(struct cxgbit_sock *csk, struct iscsit_cmd *cmd)
 +cxgbit_handle_scsi_cmd(struct cxgbit_sock *csk, struct iscsi_cmd *cmd)
  {
- 	struct iscsi_conn *conn = csk->conn;
+ 	struct iscsit_conn *conn = csk->conn;
  	struct cxgbit_lro_pdu_cb *pdu_cb = cxgbit_rx_pdu_cb(csk->skb);
  	struct iscsi_scsi_req *hdr = (struct iscsi_scsi_req *)pdu_cb->hdr;
  	int rc;
@@@ -998,8 -995,8 +1010,13 @@@
  static int cxgbit_handle_iscsi_dataout(struct cxgbit_sock *csk)
  {
  	struct scatterlist *sg_start;
++<<<<<<< HEAD
 +	struct iscsi_conn *conn = csk->conn;
 +	struct iscsi_cmd *cmd = NULL;
++=======
+ 	struct iscsit_conn *conn = csk->conn;
+ 	struct iscsit_cmd *cmd = NULL;
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  	struct cxgbit_cmd *ccmd;
  	struct cxgbi_task_tag_info *ttinfo;
  	struct cxgbit_lro_pdu_cb *pdu_cb = cxgbit_rx_pdu_cb(csk->skb);
@@@ -1087,9 -1084,9 +1104,9 @@@ check_payload
  	return 0;
  }
  
 -static int cxgbit_handle_nop_out(struct cxgbit_sock *csk, struct iscsit_cmd *cmd)
 +static int cxgbit_handle_nop_out(struct cxgbit_sock *csk, struct iscsi_cmd *cmd)
  {
- 	struct iscsi_conn *conn = csk->conn;
+ 	struct iscsit_conn *conn = csk->conn;
  	struct cxgbit_lro_pdu_cb *pdu_cb = cxgbit_rx_pdu_cb(csk->skb);
  	struct iscsi_nopout *hdr = (struct iscsi_nopout *)pdu_cb->hdr;
  	unsigned char *ping_data = NULL;
@@@ -1155,9 -1152,9 +1172,9 @@@ out
  }
  
  static int
 -cxgbit_handle_text_cmd(struct cxgbit_sock *csk, struct iscsit_cmd *cmd)
 +cxgbit_handle_text_cmd(struct cxgbit_sock *csk, struct iscsi_cmd *cmd)
  {
- 	struct iscsi_conn *conn = csk->conn;
+ 	struct iscsit_conn *conn = csk->conn;
  	struct cxgbit_lro_pdu_cb *pdu_cb = cxgbit_rx_pdu_cb(csk->skb);
  	struct iscsi_text *hdr = (struct iscsi_text *)pdu_cb->hdr;
  	u32 payload_length = pdu_cb->dlen;
@@@ -1212,8 -1209,8 +1229,13 @@@ static int cxgbit_target_rx_opcode(stru
  {
  	struct cxgbit_lro_pdu_cb *pdu_cb = cxgbit_rx_pdu_cb(csk->skb);
  	struct iscsi_hdr *hdr = (struct iscsi_hdr *)pdu_cb->hdr;
++<<<<<<< HEAD
 +	struct iscsi_conn *conn = csk->conn;
 +	struct iscsi_cmd *cmd = NULL;
++=======
+ 	struct iscsit_conn *conn = csk->conn;
+ 	struct iscsit_cmd *cmd = NULL;
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  	u8 opcode = (hdr->opcode & ISCSI_OPCODE_MASK);
  	int ret = -EINVAL;
  
diff --cc drivers/target/iscsi/iscsi_target.c
index e18864143503,2c4f94b76061..000000000000
--- a/drivers/target/iscsi/iscsi_target.c
+++ b/drivers/target/iscsi/iscsi_target.c
@@@ -481,15 -472,15 +481,23 @@@ int iscsit_del_np(struct iscsi_np *np
  	return 0;
  }
  
- static void iscsit_get_rx_pdu(struct iscsi_conn *);
+ static void iscsit_get_rx_pdu(struct iscsit_conn *);
  
++<<<<<<< HEAD
 +int iscsit_queue_rsp(struct iscsi_conn *conn, struct iscsi_cmd *cmd)
++=======
+ int iscsit_queue_rsp(struct iscsit_conn *conn, struct iscsit_cmd *cmd)
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  {
  	return iscsit_add_cmd_to_response_queue(cmd, cmd->conn, cmd->i_state);
  }
  EXPORT_SYMBOL(iscsit_queue_rsp);
  
++<<<<<<< HEAD
 +void iscsit_aborted_task(struct iscsi_conn *conn, struct iscsi_cmd *cmd)
++=======
+ void iscsit_aborted_task(struct iscsit_conn *conn, struct iscsit_cmd *cmd)
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  {
  	spin_lock_bh(&conn->cmd_lock);
  	if (!list_empty(&cmd->i_conn_node))
@@@ -502,10 -493,10 +510,14 @@@ EXPORT_SYMBOL(iscsit_aborted_task)
  
  static void iscsit_do_crypto_hash_buf(struct ahash_request *, const void *,
  				      u32, u32, const void *, void *);
- static void iscsit_tx_thread_wait_for_tcp(struct iscsi_conn *);
+ static void iscsit_tx_thread_wait_for_tcp(struct iscsit_conn *);
  
  static int
++<<<<<<< HEAD
 +iscsit_xmit_nondatain_pdu(struct iscsi_conn *conn, struct iscsi_cmd *cmd,
++=======
+ iscsit_xmit_nondatain_pdu(struct iscsit_conn *conn, struct iscsit_cmd *cmd,
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  			  const void *data_buf, u32 data_buf_len)
  {
  	struct iscsi_hdr *hdr = (struct iscsi_hdr *)cmd->pdu;
@@@ -573,13 -564,13 +585,17 @@@
  	return 0;
  }
  
 -static int iscsit_map_iovec(struct iscsit_cmd *cmd, struct kvec *iov, int nvec,
 +static int iscsit_map_iovec(struct iscsi_cmd *cmd, struct kvec *iov, int nvec,
  			    u32 data_offset, u32 data_length);
 -static void iscsit_unmap_iovec(struct iscsit_cmd *);
 -static u32 iscsit_do_crypto_hash_sg(struct ahash_request *, struct iscsit_cmd *,
 +static void iscsit_unmap_iovec(struct iscsi_cmd *);
 +static u32 iscsit_do_crypto_hash_sg(struct ahash_request *, struct iscsi_cmd *,
  				    u32, u32, u32, u8 *);
  static int
++<<<<<<< HEAD
 +iscsit_xmit_datain_pdu(struct iscsi_conn *conn, struct iscsi_cmd *cmd,
++=======
+ iscsit_xmit_datain_pdu(struct iscsit_conn *conn, struct iscsit_cmd *cmd,
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  		       const struct iscsi_datain *datain)
  {
  	struct kvec *iov;
@@@ -653,7 -644,7 +669,11 @@@
  	return 0;
  }
  
++<<<<<<< HEAD
 +static int iscsit_xmit_pdu(struct iscsi_conn *conn, struct iscsi_cmd *cmd,
++=======
+ static int iscsit_xmit_pdu(struct iscsit_conn *conn, struct iscsit_cmd *cmd,
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  			   struct iscsi_datain_req *dr, const void *buf,
  			   u32 buf_len)
  {
@@@ -957,10 -957,10 +977,10 @@@ static void iscsit_unmap_iovec(struct i
  		kunmap(sg_page(&sg[i]));
  }
  
- static void iscsit_ack_from_expstatsn(struct iscsi_conn *conn, u32 exp_statsn)
+ static void iscsit_ack_from_expstatsn(struct iscsit_conn *conn, u32 exp_statsn)
  {
  	LIST_HEAD(ack_list);
 -	struct iscsit_cmd *cmd, *cmd_p;
 +	struct iscsi_cmd *cmd, *cmd_p;
  
  	conn->exp_statsn = exp_statsn;
  
@@@ -1000,7 -1000,7 +1020,11 @@@ static int iscsit_allocate_iovecs(struc
  	return 0;
  }
  
++<<<<<<< HEAD
 +int iscsit_setup_scsi_cmd(struct iscsi_conn *conn, struct iscsi_cmd *cmd,
++=======
+ int iscsit_setup_scsi_cmd(struct iscsit_conn *conn, struct iscsit_cmd *cmd,
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  			  unsigned char *buf)
  {
  	int data_direction, payload_length;
@@@ -1224,7 -1225,7 +1248,11 @@@ void iscsit_set_unsolicited_dataout(str
  }
  EXPORT_SYMBOL(iscsit_set_unsolicited_dataout);
  
++<<<<<<< HEAD
 +int iscsit_process_scsi_cmd(struct iscsi_conn *conn, struct iscsi_cmd *cmd,
++=======
+ int iscsit_process_scsi_cmd(struct iscsit_conn *conn, struct iscsit_cmd *cmd,
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  			    struct iscsi_scsi_req *hdr)
  {
  	int cmdsn_ret = 0;
@@@ -1348,7 -1349,7 +1376,11 @@@ iscsit_get_immediate_data(struct iscsi_
  }
  
  static int
++<<<<<<< HEAD
 +iscsit_handle_scsi_cmd(struct iscsi_conn *conn, struct iscsi_cmd *cmd,
++=======
+ iscsit_handle_scsi_cmd(struct iscsit_conn *conn, struct iscsit_cmd *cmd,
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  			   unsigned char *buf)
  {
  	struct iscsi_scsi_req *hdr = (struct iscsi_scsi_req *)buf;
@@@ -1454,8 -1455,8 +1486,13 @@@ static void iscsit_do_crypto_hash_buf(s
  }
  
  int
++<<<<<<< HEAD
 +__iscsit_check_dataout_hdr(struct iscsi_conn *conn, void *buf,
 +			   struct iscsi_cmd *cmd, u32 payload_length,
++=======
+ __iscsit_check_dataout_hdr(struct iscsit_conn *conn, void *buf,
+ 			   struct iscsit_cmd *cmd, u32 payload_length,
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  			   bool *success)
  {
  	struct iscsi_data *hdr = buf;
@@@ -1558,11 -1559,11 +1595,16 @@@
  EXPORT_SYMBOL(__iscsit_check_dataout_hdr);
  
  int
++<<<<<<< HEAD
 +iscsit_check_dataout_hdr(struct iscsi_conn *conn, void *buf,
 +			 struct iscsi_cmd **out_cmd)
++=======
+ iscsit_check_dataout_hdr(struct iscsit_conn *conn, void *buf,
+ 			 struct iscsit_cmd **out_cmd)
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  {
  	struct iscsi_data *hdr = buf;
 -	struct iscsit_cmd *cmd;
 +	struct iscsi_cmd *cmd;
  	u32 payload_length = ntoh24(hdr->dlength);
  	int rc;
  	bool success = false;
@@@ -1593,7 -1594,7 +1635,11 @@@
  EXPORT_SYMBOL(iscsit_check_dataout_hdr);
  
  static int
++<<<<<<< HEAD
 +iscsit_get_dataout(struct iscsi_conn *conn, struct iscsi_cmd *cmd,
++=======
+ iscsit_get_dataout(struct iscsit_conn *conn, struct iscsit_cmd *cmd,
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  		   struct iscsi_data *hdr)
  {
  	struct kvec *iov;
@@@ -1661,10 -1662,10 +1707,10 @@@
  }
  
  int
 -iscsit_check_dataout_payload(struct iscsit_cmd *cmd, struct iscsi_data *hdr,
 +iscsit_check_dataout_payload(struct iscsi_cmd *cmd, struct iscsi_data *hdr,
  			     bool data_crc_failed)
  {
- 	struct iscsi_conn *conn = cmd->conn;
+ 	struct iscsit_conn *conn = cmd->conn;
  	int rc, ooo_cmdsn;
  	/*
  	 * Increment post receive data and CRC values or perform
@@@ -1699,9 -1700,9 +1745,9 @@@
  }
  EXPORT_SYMBOL(iscsit_check_dataout_payload);
  
- static int iscsit_handle_data_out(struct iscsi_conn *conn, unsigned char *buf)
+ static int iscsit_handle_data_out(struct iscsit_conn *conn, unsigned char *buf)
  {
 -	struct iscsit_cmd *cmd = NULL;
 +	struct iscsi_cmd *cmd = NULL;
  	struct iscsi_data *hdr = (struct iscsi_data *)buf;
  	int rc;
  	bool data_crc_failed = false;
@@@ -1721,7 -1722,7 +1767,11 @@@
  	return iscsit_check_dataout_payload(cmd, hdr, data_crc_failed);
  }
  
++<<<<<<< HEAD
 +int iscsit_setup_nop_out(struct iscsi_conn *conn, struct iscsi_cmd *cmd,
++=======
+ int iscsit_setup_nop_out(struct iscsit_conn *conn, struct iscsit_cmd *cmd,
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  			 struct iscsi_nopout *hdr)
  {
  	u32 payload_length = ntoh24(hdr->dlength);
@@@ -1788,10 -1789,10 +1838,14 @@@
  }
  EXPORT_SYMBOL(iscsit_setup_nop_out);
  
++<<<<<<< HEAD
 +int iscsit_process_nop_out(struct iscsi_conn *conn, struct iscsi_cmd *cmd,
++=======
+ int iscsit_process_nop_out(struct iscsit_conn *conn, struct iscsit_cmd *cmd,
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  			   struct iscsi_nopout *hdr)
  {
 -	struct iscsit_cmd *cmd_p = NULL;
 +	struct iscsi_cmd *cmd_p = NULL;
  	int cmdsn_ret = 0;
  	/*
  	 * Initiator is expecting a NopIN ping reply..
@@@ -1850,7 -1851,7 +1904,11 @@@
  }
  EXPORT_SYMBOL(iscsit_process_nop_out);
  
++<<<<<<< HEAD
 +static int iscsit_handle_nop_out(struct iscsi_conn *conn, struct iscsi_cmd *cmd,
++=======
+ static int iscsit_handle_nop_out(struct iscsit_conn *conn, struct iscsit_cmd *cmd,
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  				 unsigned char *buf)
  {
  	unsigned char *ping_data = NULL;
@@@ -1977,7 -1978,7 +2035,11 @@@ static enum tcm_tmreq_table iscsit_conv
  }
  
  int
++<<<<<<< HEAD
 +iscsit_handle_task_mgt_cmd(struct iscsi_conn *conn, struct iscsi_cmd *cmd,
++=======
+ iscsit_handle_task_mgt_cmd(struct iscsit_conn *conn, struct iscsit_cmd *cmd,
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  			   unsigned char *buf)
  {
  	struct se_tmr_req *se_tmr;
@@@ -2158,7 -2159,7 +2220,11 @@@ EXPORT_SYMBOL(iscsit_handle_task_mgt_cm
  
  /* #warning FIXME: Support Text Command parameters besides SendTargets */
  int
++<<<<<<< HEAD
 +iscsit_setup_text_cmd(struct iscsi_conn *conn, struct iscsi_cmd *cmd,
++=======
+ iscsit_setup_text_cmd(struct iscsit_conn *conn, struct iscsit_cmd *cmd,
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  		      struct iscsi_text *hdr)
  {
  	u32 payload_length = ntoh24(hdr->dlength);
@@@ -2198,7 -2199,7 +2264,11 @@@
  EXPORT_SYMBOL(iscsit_setup_text_cmd);
  
  int
++<<<<<<< HEAD
 +iscsit_process_text_cmd(struct iscsi_conn *conn, struct iscsi_cmd *cmd,
++=======
+ iscsit_process_text_cmd(struct iscsit_conn *conn, struct iscsit_cmd *cmd,
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  			struct iscsi_text *hdr)
  {
  	unsigned char *text_in = cmd->text_in_ptr, *text_ptr;
@@@ -2257,7 -2258,7 +2327,11 @@@ reject
  EXPORT_SYMBOL(iscsit_process_text_cmd);
  
  static int
++<<<<<<< HEAD
 +iscsit_handle_text_cmd(struct iscsi_conn *conn, struct iscsi_cmd *cmd,
++=======
+ iscsit_handle_text_cmd(struct iscsit_conn *conn, struct iscsit_cmd *cmd,
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  		       unsigned char *buf)
  {
  	struct iscsi_text *hdr = (struct iscsi_text *)buf;
@@@ -2346,9 -2347,9 +2420,13 @@@ reject
  	return iscsit_reject_cmd(cmd, ISCSI_REASON_PROTOCOL_ERROR, buf);
  }
  
++<<<<<<< HEAD
 +int iscsit_logout_closesession(struct iscsi_cmd *cmd, struct iscsi_conn *conn)
++=======
+ int iscsit_logout_closesession(struct iscsit_cmd *cmd, struct iscsit_conn *conn)
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  {
- 	struct iscsi_conn *conn_p;
+ 	struct iscsit_conn *conn_p;
  	struct iscsi_session *sess = conn->sess;
  
  	pr_debug("Received logout request CLOSESESSION on CID: %hu"
@@@ -2376,9 -2377,9 +2454,13 @@@
  	return 0;
  }
  
++<<<<<<< HEAD
 +int iscsit_logout_closeconnection(struct iscsi_cmd *cmd, struct iscsi_conn *conn)
++=======
+ int iscsit_logout_closeconnection(struct iscsit_cmd *cmd, struct iscsit_conn *conn)
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  {
- 	struct iscsi_conn *l_conn;
+ 	struct iscsit_conn *l_conn;
  	struct iscsi_session *sess = conn->sess;
  
  	pr_debug("Received logout request CLOSECONNECTION for CID:"
@@@ -2424,7 -2425,7 +2506,11 @@@
  	return 0;
  }
  
++<<<<<<< HEAD
 +int iscsit_logout_removeconnforrecovery(struct iscsi_cmd *cmd, struct iscsi_conn *conn)
++=======
+ int iscsit_logout_removeconnforrecovery(struct iscsit_cmd *cmd, struct iscsit_conn *conn)
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  {
  	struct iscsi_session *sess = conn->sess;
  
@@@ -2454,7 -2455,7 +2540,11 @@@
  }
  
  int
++<<<<<<< HEAD
 +iscsit_handle_logout_cmd(struct iscsi_conn *conn, struct iscsi_cmd *cmd,
++=======
+ iscsit_handle_logout_cmd(struct iscsit_conn *conn, struct iscsit_cmd *cmd,
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  			unsigned char *buf)
  {
  	int cmdsn_ret, logout_remove = 0;
@@@ -2707,10 -2708,10 +2797,15 @@@ static int iscsit_handle_immediate_data
  
  /* #warning iscsi_build_conn_drop_async_message() only sends out on connections
  	with active network interface */
- static void iscsit_build_conn_drop_async_message(struct iscsi_conn *conn)
+ static void iscsit_build_conn_drop_async_message(struct iscsit_conn *conn)
  {
++<<<<<<< HEAD
 +	struct iscsi_cmd *cmd;
 +	struct iscsi_conn *conn_p;
++=======
+ 	struct iscsit_cmd *cmd;
+ 	struct iscsit_conn *conn_p;
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  	bool found = false;
  
  	lockdep_assert_held(&conn->sess->conn_lock);
@@@ -2749,8 -2750,8 +2844,13 @@@
  }
  
  static int iscsit_send_conn_drop_async_message(
++<<<<<<< HEAD
 +	struct iscsi_cmd *cmd,
 +	struct iscsi_conn *conn)
++=======
+ 	struct iscsit_cmd *cmd,
+ 	struct iscsit_conn *conn)
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  {
  	struct iscsi_async *hdr;
  
@@@ -2789,7 -2790,7 +2889,11 @@@ static void iscsit_tx_thread_wait_for_t
  }
  
  void
++<<<<<<< HEAD
 +iscsit_build_datain_pdu(struct iscsi_cmd *cmd, struct iscsi_conn *conn,
++=======
+ iscsit_build_datain_pdu(struct iscsit_cmd *cmd, struct iscsit_conn *conn,
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  			struct iscsi_datain *datain, struct iscsi_data_rsp *hdr,
  			bool set_statsn)
  {
@@@ -2834,7 -2835,7 +2938,11 @@@
  }
  EXPORT_SYMBOL(iscsit_build_datain_pdu);
  
++<<<<<<< HEAD
 +static int iscsit_send_datain(struct iscsi_cmd *cmd, struct iscsi_conn *conn)
++=======
+ static int iscsit_send_datain(struct iscsit_cmd *cmd, struct iscsit_conn *conn)
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  {
  	struct iscsi_data_rsp *hdr = (struct iscsi_data_rsp *)&cmd->pdu[0];
  	struct iscsi_datain datain;
@@@ -2895,10 -2896,10 +3003,14 @@@
  }
  
  int
++<<<<<<< HEAD
 +iscsit_build_logout_rsp(struct iscsi_cmd *cmd, struct iscsi_conn *conn,
++=======
+ iscsit_build_logout_rsp(struct iscsit_cmd *cmd, struct iscsit_conn *conn,
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  			struct iscsi_logout_rsp *hdr)
  {
- 	struct iscsi_conn *logout_conn = NULL;
+ 	struct iscsit_conn *logout_conn = NULL;
  	struct iscsi_conn_recovery *cr = NULL;
  	struct iscsi_session *sess = conn->sess;
  	/*
@@@ -2990,7 -2991,7 +3102,11 @@@
  EXPORT_SYMBOL(iscsit_build_logout_rsp);
  
  static int
++<<<<<<< HEAD
 +iscsit_send_logout(struct iscsi_cmd *cmd, struct iscsi_conn *conn)
++=======
+ iscsit_send_logout(struct iscsit_cmd *cmd, struct iscsit_conn *conn)
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  {
  	int rc;
  
@@@ -3003,7 -3004,7 +3119,11 @@@
  }
  
  void
++<<<<<<< HEAD
 +iscsit_build_nopin_rsp(struct iscsi_cmd *cmd, struct iscsi_conn *conn,
++=======
+ iscsit_build_nopin_rsp(struct iscsit_cmd *cmd, struct iscsit_conn *conn,
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  		       struct iscsi_nopin *hdr, bool nopout_response)
  {
  	hdr->opcode		= ISCSI_OP_NOOP_IN;
@@@ -3034,8 -3035,8 +3154,13 @@@ EXPORT_SYMBOL(iscsit_build_nopin_rsp)
   *	Unsolicited NOPIN, either requesting a response or not.
   */
  static int iscsit_send_unsolicited_nopin(
++<<<<<<< HEAD
 +	struct iscsi_cmd *cmd,
 +	struct iscsi_conn *conn,
++=======
+ 	struct iscsit_cmd *cmd,
+ 	struct iscsit_conn *conn,
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  	int want_response)
  {
  	struct iscsi_nopin *hdr = (struct iscsi_nopin *)&cmd->pdu[0];
@@@ -3059,7 -3060,7 +3184,11 @@@
  }
  
  static int
++<<<<<<< HEAD
 +iscsit_send_nopin(struct iscsi_cmd *cmd, struct iscsi_conn *conn)
++=======
+ iscsit_send_nopin(struct iscsit_cmd *cmd, struct iscsit_conn *conn)
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  {
  	struct iscsi_nopin *hdr = (struct iscsi_nopin *)&cmd->pdu[0];
  
@@@ -3077,8 -3078,8 +3206,13 @@@
  }
  
  static int iscsit_send_r2t(
++<<<<<<< HEAD
 +	struct iscsi_cmd *cmd,
 +	struct iscsi_conn *conn)
++=======
+ 	struct iscsit_cmd *cmd,
+ 	struct iscsit_conn *conn)
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  {
  	struct iscsi_r2t *r2t;
  	struct iscsi_r2t_rsp *hdr;
@@@ -3134,8 -3135,8 +3268,13 @@@
   *		connection recovery.
   */
  int iscsit_build_r2ts_for_cmd(
++<<<<<<< HEAD
 +	struct iscsi_conn *conn,
 +	struct iscsi_cmd *cmd,
++=======
+ 	struct iscsit_conn *conn,
+ 	struct iscsit_cmd *cmd,
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  	bool recovery)
  {
  	int first_r2t = 1;
@@@ -3217,7 -3218,7 +3356,11 @@@
  }
  EXPORT_SYMBOL(iscsit_build_r2ts_for_cmd);
  
++<<<<<<< HEAD
 +void iscsit_build_rsp_pdu(struct iscsi_cmd *cmd, struct iscsi_conn *conn,
++=======
+ void iscsit_build_rsp_pdu(struct iscsit_cmd *cmd, struct iscsit_conn *conn,
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  			bool inc_stat_sn, struct iscsi_scsi_rsp *hdr)
  {
  	if (inc_stat_sn)
@@@ -3251,7 -3252,7 +3394,11 @@@
  }
  EXPORT_SYMBOL(iscsit_build_rsp_pdu);
  
++<<<<<<< HEAD
 +static int iscsit_send_response(struct iscsi_cmd *cmd, struct iscsi_conn *conn)
++=======
+ static int iscsit_send_response(struct iscsit_cmd *cmd, struct iscsit_conn *conn)
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  {
  	struct iscsi_scsi_rsp *hdr = (struct iscsi_scsi_rsp *)&cmd->pdu[0];
  	bool inc_stat_sn = (cmd->i_state == ISTATE_SEND_STATUS);
@@@ -3308,7 -3309,7 +3455,11 @@@ static u8 iscsit_convert_tcm_tmr_rsp(st
  }
  
  void
++<<<<<<< HEAD
 +iscsit_build_task_mgt_rsp(struct iscsi_cmd *cmd, struct iscsi_conn *conn,
++=======
+ iscsit_build_task_mgt_rsp(struct iscsit_cmd *cmd, struct iscsit_conn *conn,
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  			  struct iscsi_tm_rsp *hdr)
  {
  	struct se_tmr_req *se_tmr = cmd->se_cmd.se_tmr_req;
@@@ -3331,7 -3332,7 +3482,11 @@@
  EXPORT_SYMBOL(iscsit_build_task_mgt_rsp);
  
  static int
++<<<<<<< HEAD
 +iscsit_send_task_mgt_rsp(struct iscsi_cmd *cmd, struct iscsi_conn *conn)
++=======
+ iscsit_send_task_mgt_rsp(struct iscsit_cmd *cmd, struct iscsit_conn *conn)
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  {
  	struct iscsi_tm_rsp *hdr = (struct iscsi_tm_rsp *)&cmd->pdu[0];
  
@@@ -3493,7 -3494,7 +3648,11 @@@ eob
  }
  
  int
++<<<<<<< HEAD
 +iscsit_build_text_rsp(struct iscsi_cmd *cmd, struct iscsi_conn *conn,
++=======
+ iscsit_build_text_rsp(struct iscsit_cmd *cmd, struct iscsit_conn *conn,
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  		      struct iscsi_text_rsp *hdr,
  		      enum iscsit_transport_type network_transport)
  {
@@@ -3543,8 -3544,8 +3702,13 @@@
  EXPORT_SYMBOL(iscsit_build_text_rsp);
  
  static int iscsit_send_text_rsp(
++<<<<<<< HEAD
 +	struct iscsi_cmd *cmd,
 +	struct iscsi_conn *conn)
++=======
+ 	struct iscsit_cmd *cmd,
+ 	struct iscsit_conn *conn)
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  {
  	struct iscsi_text_rsp *hdr = (struct iscsi_text_rsp *)cmd->pdu;
  	int text_length;
@@@ -3560,7 -3561,7 +3724,11 @@@
  }
  
  void
++<<<<<<< HEAD
 +iscsit_build_reject(struct iscsi_cmd *cmd, struct iscsi_conn *conn,
++=======
+ iscsit_build_reject(struct iscsit_cmd *cmd, struct iscsit_conn *conn,
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  		    struct iscsi_reject *hdr)
  {
  	hdr->opcode		= ISCSI_OP_REJECT;
@@@ -3577,8 -3578,8 +3745,13 @@@
  EXPORT_SYMBOL(iscsit_build_reject);
  
  static int iscsit_send_reject(
++<<<<<<< HEAD
 +	struct iscsi_cmd *cmd,
 +	struct iscsi_conn *conn)
++=======
+ 	struct iscsit_cmd *cmd,
+ 	struct iscsit_conn *conn)
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  {
  	struct iscsi_reject *hdr = (struct iscsi_reject *)&cmd->pdu[0];
  
@@@ -3592,9 -3593,14 +3765,9 @@@
  						     ISCSI_HDR_LEN);
  }
  
- void iscsit_thread_get_cpumask(struct iscsi_conn *conn)
+ void iscsit_thread_get_cpumask(struct iscsit_conn *conn)
  {
  	int ord, cpu;
 -	cpumask_t conn_allowed_cpumask;
 -
 -	cpumask_and(&conn_allowed_cpumask, iscsit_global->allowed_cpumask,
 -		    cpu_online_mask);
 -
  	/*
  	 * bitmap_id is assigned from iscsit_global->ts_bitmap from
  	 * within iscsit_start_kthreads()
@@@ -3617,8 -3624,64 +3790,69 @@@
  	cpumask_setall(conn->conn_cpumask);
  }
  
++<<<<<<< HEAD
 +int
 +iscsit_immediate_queue(struct iscsi_conn *conn, struct iscsi_cmd *cmd, int state)
++=======
+ static void iscsit_thread_reschedule(struct iscsit_conn *conn)
+ {
+ 	/*
+ 	 * If iscsit_global->allowed_cpumask modified, reschedule iSCSI
+ 	 * connection's RX/TX threads update conn->allowed_cpumask.
+ 	 */
+ 	if (!cpumask_equal(iscsit_global->allowed_cpumask,
+ 			   conn->allowed_cpumask)) {
+ 		iscsit_thread_get_cpumask(conn);
+ 		conn->conn_tx_reset_cpumask = 1;
+ 		conn->conn_rx_reset_cpumask = 1;
+ 		cpumask_copy(conn->allowed_cpumask,
+ 			     iscsit_global->allowed_cpumask);
+ 	}
+ }
+ 
+ void iscsit_thread_check_cpumask(
+ 	struct iscsit_conn *conn,
+ 	struct task_struct *p,
+ 	int mode)
+ {
+ 	/*
+ 	 * The TX and RX threads maybe call iscsit_thread_check_cpumask()
+ 	 * at the same time. The RX thread might be faster and return from
+ 	 * iscsit_thread_reschedule() with conn_rx_reset_cpumask set to 0.
+ 	 * Then the TX thread sets it back to 1.
+ 	 * The next time the RX thread loops, it sees conn_rx_reset_cpumask
+ 	 * set to 1 and calls set_cpus_allowed_ptr() again and set it to 0.
+ 	 */
+ 	iscsit_thread_reschedule(conn);
+ 
+ 	/*
+ 	 * mode == 1 signals iscsi_target_tx_thread() usage.
+ 	 * mode == 0 signals iscsi_target_rx_thread() usage.
+ 	 */
+ 	if (mode == 1) {
+ 		if (!conn->conn_tx_reset_cpumask)
+ 			return;
+ 	} else {
+ 		if (!conn->conn_rx_reset_cpumask)
+ 			return;
+ 	}
+ 
+ 	/*
+ 	 * Update the CPU mask for this single kthread so that
+ 	 * both TX and RX kthreads are scheduled to run on the
+ 	 * same CPU.
+ 	 */
+ 	set_cpus_allowed_ptr(p, conn->conn_cpumask);
+ 	if (mode == 1)
+ 		conn->conn_tx_reset_cpumask = 0;
+ 	else
+ 		conn->conn_rx_reset_cpumask = 0;
+ }
+ EXPORT_SYMBOL(iscsit_thread_check_cpumask);
+ 
+ int
+ iscsit_immediate_queue(struct iscsit_conn *conn, struct iscsit_cmd *cmd, int state)
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  {
  	int ret;
  
@@@ -3685,7 -3748,7 +3919,11 @@@ iscsit_handle_immediate_queue(struct is
  }
  
  int
++<<<<<<< HEAD
 +iscsit_response_queue(struct iscsi_conn *conn, struct iscsi_cmd *cmd, int state)
++=======
+ iscsit_response_queue(struct iscsit_conn *conn, struct iscsit_cmd *cmd, int state)
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  {
  	int ret;
  
@@@ -3814,9 -3877,9 +4052,15 @@@ static int iscsit_handle_response_queue
  
  int iscsi_target_tx_thread(void *arg)
  {
++<<<<<<< HEAD
 +	int ret = 0, flags;
 +	struct iscsi_conn *conn = arg;
 +	bool conn_freed = false, loopback;
++=======
+ 	int ret = 0;
+ 	struct iscsit_conn *conn = arg;
+ 	bool conn_freed = false;
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  
  	/*
  	 * Allow ourselves to be interrupted by SIGINT so that a
@@@ -3877,10 -3933,10 +4121,10 @@@ out
  	return 0;
  }
  
- static int iscsi_target_rx_opcode(struct iscsi_conn *conn, unsigned char *buf)
+ static int iscsi_target_rx_opcode(struct iscsit_conn *conn, unsigned char *buf)
  {
  	struct iscsi_hdr *hdr = (struct iscsi_hdr *)buf;
 -	struct iscsit_cmd *cmd;
 +	struct iscsi_cmd *cmd;
  	int ret = 0;
  
  	switch (hdr->opcode & ISCSI_OPCODE_MASK) {
@@@ -4049,8 -4105,8 +4293,13 @@@ static void iscsit_get_rx_pdu(struct is
  
  int iscsi_target_rx_thread(void *arg)
  {
++<<<<<<< HEAD
 +	int rc, flags;
 +	struct iscsi_conn *conn = arg;
++=======
+ 	int rc;
+ 	struct iscsit_conn *conn = arg;
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  	bool conn_freed = false;
  
  	/*
@@@ -4091,10 -4141,10 +4340,10 @@@ out
  	return 0;
  }
  
- static void iscsit_release_commands_from_conn(struct iscsi_conn *conn)
+ static void iscsit_release_commands_from_conn(struct iscsit_conn *conn)
  {
  	LIST_HEAD(tmp_list);
 -	struct iscsit_cmd *cmd = NULL, *cmd_tmp = NULL;
 +	struct iscsi_cmd *cmd = NULL, *cmd_tmp = NULL;
  	struct iscsi_session *sess = conn->sess;
  	/*
  	 * We expect this function to only ever be called from either RX or TX
@@@ -4147,9 -4185,9 +4396,9 @@@
  }
  
  static void iscsit_stop_timers_for_cmds(
- 	struct iscsi_conn *conn)
+ 	struct iscsit_conn *conn)
  {
 -	struct iscsit_cmd *cmd;
 +	struct iscsi_cmd *cmd;
  
  	spin_lock_bh(&conn->cmd_lock);
  	list_for_each_entry(cmd, &conn->conn_cmd_list, i_conn_node) {
@@@ -4554,8 -4592,8 +4803,13 @@@ static void iscsit_logout_post_handler_
   *	Return of 0 causes the TX thread to restart.
   */
  int iscsit_logout_post_handler(
++<<<<<<< HEAD
 +	struct iscsi_cmd *cmd,
 +	struct iscsi_conn *conn)
++=======
+ 	struct iscsit_cmd *cmd,
+ 	struct iscsit_conn *conn)
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  {
  	int ret = 0;
  
diff --cc drivers/target/iscsi/iscsi_target.h
index b35a96ded9c1,314e29fcaa5a..000000000000
--- a/drivers/target/iscsi/iscsi_target.h
+++ b/drivers/target/iscsi/iscsi_target.h
@@@ -5,8 -5,8 +5,13 @@@
  #include <linux/types.h>
  #include <linux/spinlock.h>
  
++<<<<<<< HEAD
 +struct iscsi_cmd;
 +struct iscsi_conn;
++=======
+ struct iscsit_cmd;
+ struct iscsit_conn;
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  struct iscsi_np;
  struct iscsi_portal_group;
  struct iscsi_session;
@@@ -30,17 -30,17 +35,28 @@@ extern struct iscsi_np *iscsit_add_np(s
  extern int iscsit_reset_np_thread(struct iscsi_np *, struct iscsi_tpg_np *,
  				struct iscsi_portal_group *, bool);
  extern int iscsit_del_np(struct iscsi_np *);
++<<<<<<< HEAD
 +extern int iscsit_reject_cmd(struct iscsi_cmd *cmd, u8, unsigned char *);
 +extern void iscsit_set_unsolicited_dataout(struct iscsi_cmd *);
 +extern int iscsit_logout_closesession(struct iscsi_cmd *, struct iscsi_conn *);
 +extern int iscsit_logout_closeconnection(struct iscsi_cmd *, struct iscsi_conn *);
 +extern int iscsit_logout_removeconnforrecovery(struct iscsi_cmd *, struct iscsi_conn *);
 +extern int iscsit_send_async_msg(struct iscsi_conn *, u16, u8, u8);
 +extern int iscsit_build_r2ts_for_cmd(struct iscsi_conn *, struct iscsi_cmd *, bool recovery);
 +extern void iscsit_thread_get_cpumask(struct iscsi_conn *);
++=======
+ extern int iscsit_reject_cmd(struct iscsit_cmd *cmd, u8, unsigned char *);
+ extern void iscsit_set_unsolicited_dataout(struct iscsit_cmd *);
+ extern int iscsit_logout_closesession(struct iscsit_cmd *, struct iscsit_conn *);
+ extern int iscsit_logout_closeconnection(struct iscsit_cmd *, struct iscsit_conn *);
+ extern int iscsit_logout_removeconnforrecovery(struct iscsit_cmd *, struct iscsit_conn *);
+ extern int iscsit_send_async_msg(struct iscsit_conn *, u16, u8, u8);
+ extern int iscsit_build_r2ts_for_cmd(struct iscsit_conn *, struct iscsit_cmd *, bool recovery);
+ extern void iscsit_thread_get_cpumask(struct iscsit_conn *);
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  extern int iscsi_target_tx_thread(void *);
  extern int iscsi_target_rx_thread(void *);
- extern int iscsit_close_connection(struct iscsi_conn *);
+ extern int iscsit_close_connection(struct iscsit_conn *);
  extern int iscsit_close_session(struct iscsi_session *, bool can_sleep);
  extern void iscsit_fail_session(struct iscsi_session *);
  extern void iscsit_stop_session(struct iscsi_session *, int, int);
diff --cc drivers/target/iscsi/iscsi_target_configfs.c
index 5591019ea505,aadc855f67fa..000000000000
--- a/drivers/target/iscsi/iscsi_target_configfs.c
+++ b/drivers/target/iscsi/iscsi_target_configfs.c
@@@ -1342,8 -1366,8 +1342,13 @@@ static u32 lio_sess_get_initiator_sid
  
  static int lio_queue_data_in(struct se_cmd *se_cmd)
  {
++<<<<<<< HEAD
 +	struct iscsi_cmd *cmd = container_of(se_cmd, struct iscsi_cmd, se_cmd);
 +	struct iscsi_conn *conn = cmd->conn;
++=======
+ 	struct iscsit_cmd *cmd = container_of(se_cmd, struct iscsit_cmd, se_cmd);
+ 	struct iscsit_conn *conn = cmd->conn;
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  
  	cmd->i_state = ISTATE_SEND_DATAIN;
  	return conn->conn_transport->iscsit_queue_data_in(conn, cmd);
@@@ -1351,8 -1375,8 +1356,13 @@@
  
  static int lio_write_pending(struct se_cmd *se_cmd)
  {
++<<<<<<< HEAD
 +	struct iscsi_cmd *cmd = container_of(se_cmd, struct iscsi_cmd, se_cmd);
 +	struct iscsi_conn *conn = cmd->conn;
++=======
+ 	struct iscsit_cmd *cmd = container_of(se_cmd, struct iscsit_cmd, se_cmd);
+ 	struct iscsit_conn *conn = cmd->conn;
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  
  	if (!cmd->immediate_data && !cmd->unsolicited_data)
  		return conn->conn_transport->iscsit_get_dataout(conn, cmd, false);
@@@ -1362,8 -1386,8 +1372,13 @@@
  
  static int lio_queue_status(struct se_cmd *se_cmd)
  {
++<<<<<<< HEAD
 +	struct iscsi_cmd *cmd = container_of(se_cmd, struct iscsi_cmd, se_cmd);
 +	struct iscsi_conn *conn = cmd->conn;
++=======
+ 	struct iscsit_cmd *cmd = container_of(se_cmd, struct iscsit_cmd, se_cmd);
+ 	struct iscsit_conn *conn = cmd->conn;
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  
  	cmd->i_state = ISTATE_SEND_STATUS;
  
diff --cc drivers/target/iscsi/iscsi_target_erl0.h
index 883ebf6d36cf,9d34c1cd6b57..000000000000
--- a/drivers/target/iscsi/iscsi_target_erl0.h
+++ b/drivers/target/iscsi/iscsi_target_erl0.h
@@@ -4,13 -4,13 +4,18 @@@
  
  #include <linux/types.h>
  
++<<<<<<< HEAD
 +struct iscsi_cmd;
 +struct iscsi_conn;
++=======
+ struct iscsit_cmd;
+ struct iscsit_conn;
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  struct iscsi_session;
  
 -extern void iscsit_set_dataout_sequence_values(struct iscsit_cmd *);
 -extern int iscsit_check_pre_dataout(struct iscsit_cmd *, unsigned char *);
 -extern int iscsit_check_post_dataout(struct iscsit_cmd *, unsigned char *, u8);
 +extern void iscsit_set_dataout_sequence_values(struct iscsi_cmd *);
 +extern int iscsit_check_pre_dataout(struct iscsi_cmd *, unsigned char *);
 +extern int iscsit_check_post_dataout(struct iscsi_cmd *, unsigned char *, u8);
  extern void iscsit_start_time2retain_handler(struct iscsi_session *);
  extern void iscsit_handle_time2retain_timeout(struct timer_list *t);
  extern int iscsit_stop_time2retain_timer(struct iscsi_session *);
diff --cc drivers/target/iscsi/iscsi_target_erl1.c
index 7a416fff316c,2c3ac5986b45..000000000000
--- a/drivers/target/iscsi/iscsi_target_erl1.c
+++ b/drivers/target/iscsi/iscsi_target_erl1.c
@@@ -892,10 -884,10 +892,10 @@@ int iscsit_execute_ooo_cmdsns(struct is
   *	2. With no locks held directly from iscsi_handle_XXX_pdu() functions
   *	for immediate commands.
   */
 -int iscsit_execute_cmd(struct iscsit_cmd *cmd, int ooo)
 +int iscsit_execute_cmd(struct iscsi_cmd *cmd, int ooo)
  {
  	struct se_cmd *se_cmd = &cmd->se_cmd;
- 	struct iscsi_conn *conn = cmd->conn;
+ 	struct iscsit_conn *conn = cmd->conn;
  	int lr = 0;
  
  	spin_lock_bh(&cmd->istate_lock);
@@@ -1103,8 -1095,8 +1103,13 @@@ void iscsit_handle_dataout_timeout(stru
  {
  	u32 pdu_length = 0, pdu_offset = 0;
  	u32 r2t_length = 0, r2t_offset = 0;
++<<<<<<< HEAD
 +	struct iscsi_cmd *cmd = from_timer(cmd, t, dataout_timer);
 +	struct iscsi_conn *conn = cmd->conn;
++=======
+ 	struct iscsit_cmd *cmd = from_timer(cmd, t, dataout_timer);
+ 	struct iscsit_conn *conn = cmd->conn;
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  	struct iscsi_session *sess = NULL;
  	struct iscsi_node_attrib *na;
  
@@@ -1187,9 -1179,9 +1192,9 @@@ failure
  	iscsit_dec_conn_usage_count(conn);
  }
  
 -void iscsit_mod_dataout_timer(struct iscsit_cmd *cmd)
 +void iscsit_mod_dataout_timer(struct iscsi_cmd *cmd)
  {
- 	struct iscsi_conn *conn = cmd->conn;
+ 	struct iscsit_conn *conn = cmd->conn;
  	struct iscsi_session *sess = conn->sess;
  	struct iscsi_node_attrib *na = iscsit_tpg_get_node_attrib(sess);
  
@@@ -1207,8 -1199,8 +1212,13 @@@
  }
  
  void iscsit_start_dataout_timer(
++<<<<<<< HEAD
 +	struct iscsi_cmd *cmd,
 +	struct iscsi_conn *conn)
++=======
+ 	struct iscsit_cmd *cmd,
+ 	struct iscsit_conn *conn)
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  {
  	struct iscsi_session *sess = conn->sess;
  	struct iscsi_node_attrib *na = iscsit_tpg_get_node_attrib(sess);
diff --cc drivers/target/iscsi/iscsi_target_erl1.h
index 1f6973f87fea,b1e60fb26d5f..000000000000
--- a/drivers/target/iscsi/iscsi_target_erl1.h
+++ b/drivers/target/iscsi/iscsi_target_erl1.h
@@@ -5,34 -5,34 +5,57 @@@
  #include <linux/types.h>
  #include <scsi/iscsi_proto.h> /* itt_t */
  
++<<<<<<< HEAD
 +struct iscsi_cmd;
 +struct iscsi_conn;
++=======
+ struct iscsit_cmd;
+ struct iscsit_conn;
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  struct iscsi_datain_req;
  struct iscsi_ooo_cmdsn;
  struct iscsi_pdu;
  struct iscsi_session;
  
- extern int iscsit_dump_data_payload(struct iscsi_conn *, u32, int);
+ extern int iscsit_dump_data_payload(struct iscsit_conn *, u32, int);
  extern int iscsit_create_recovery_datain_values_datasequenceinorder_yes(
 -			struct iscsit_cmd *, struct iscsi_datain_req *);
 +			struct iscsi_cmd *, struct iscsi_datain_req *);
  extern int iscsit_create_recovery_datain_values_datasequenceinorder_no(
++<<<<<<< HEAD
 +			struct iscsi_cmd *, struct iscsi_datain_req *);
 +extern int iscsit_handle_recovery_datain_or_r2t(struct iscsi_conn *, unsigned char *,
++=======
+ 			struct iscsit_cmd *, struct iscsi_datain_req *);
+ extern int iscsit_handle_recovery_datain_or_r2t(struct iscsit_conn *, unsigned char *,
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  			itt_t, u32, u32, u32);
- extern int iscsit_handle_status_snack(struct iscsi_conn *, itt_t, u32,
+ extern int iscsit_handle_status_snack(struct iscsit_conn *, itt_t, u32,
  			u32, u32);
++<<<<<<< HEAD
 +extern int iscsit_handle_data_ack(struct iscsi_conn *, u32, u32, u32);
 +extern int iscsit_dataout_datapduinorder_no_fbit(struct iscsi_cmd *, struct iscsi_pdu *);
 +extern int iscsit_recover_dataout_sequence(struct iscsi_cmd *, u32, u32);
 +extern void iscsit_clear_ooo_cmdsns_for_conn(struct iscsi_conn *);
++=======
+ extern int iscsit_handle_data_ack(struct iscsit_conn *, u32, u32, u32);
+ extern int iscsit_dataout_datapduinorder_no_fbit(struct iscsit_cmd *, struct iscsi_pdu *);
+ extern int iscsit_recover_dataout_sequence(struct iscsit_cmd *, u32, u32);
+ extern void iscsit_clear_ooo_cmdsns_for_conn(struct iscsit_conn *);
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  extern void iscsit_free_all_ooo_cmdsns(struct iscsi_session *);
  extern int iscsit_execute_ooo_cmdsns(struct iscsi_session *);
 -extern int iscsit_execute_cmd(struct iscsit_cmd *, int);
 -extern int iscsit_handle_ooo_cmdsn(struct iscsi_session *, struct iscsit_cmd *, u32);
 +extern int iscsit_execute_cmd(struct iscsi_cmd *, int);
 +extern int iscsit_handle_ooo_cmdsn(struct iscsi_session *, struct iscsi_cmd *, u32);
  extern void iscsit_remove_ooo_cmdsn(struct iscsi_session *, struct iscsi_ooo_cmdsn *);
  extern void iscsit_handle_dataout_timeout(struct timer_list *t);
++<<<<<<< HEAD
 +extern void iscsit_mod_dataout_timer(struct iscsi_cmd *);
 +extern void iscsit_start_dataout_timer(struct iscsi_cmd *, struct iscsi_conn *);
 +extern void iscsit_stop_dataout_timer(struct iscsi_cmd *);
++=======
+ extern void iscsit_mod_dataout_timer(struct iscsit_cmd *);
+ extern void iscsit_start_dataout_timer(struct iscsit_cmd *, struct iscsit_conn *);
+ extern void iscsit_stop_dataout_timer(struct iscsit_cmd *);
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  
  #endif /* ISCSI_TARGET_ERL1_H */
diff --cc drivers/target/iscsi/iscsi_target_erl2.h
index a39b0caf2337,5b311ed9ebc4..000000000000
--- a/drivers/target/iscsi/iscsi_target_erl2.h
+++ b/drivers/target/iscsi/iscsi_target_erl2.h
@@@ -4,8 -4,8 +4,13 @@@
  
  #include <linux/types.h>
  
++<<<<<<< HEAD
 +struct iscsi_cmd;
 +struct iscsi_conn;
++=======
+ struct iscsit_cmd;
+ struct iscsit_conn;
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  struct iscsi_conn_recovery;
  struct iscsi_session;
  
@@@ -16,11 -16,11 +21,11 @@@ extern struct iscsi_conn_recovery *iscs
  extern void iscsit_free_connection_recovery_entries(struct iscsi_session *);
  extern int iscsit_remove_active_connection_recovery_entry(
  			struct iscsi_conn_recovery *, struct iscsi_session *);
 -extern int iscsit_remove_cmd_from_connection_recovery(struct iscsit_cmd *,
 +extern int iscsit_remove_cmd_from_connection_recovery(struct iscsi_cmd *,
  			struct iscsi_session *);
  extern void iscsit_discard_cr_cmds_by_expstatsn(struct iscsi_conn_recovery *, u32);
- extern int iscsit_discard_unacknowledged_ooo_cmdsns_for_conn(struct iscsi_conn *);
- extern int iscsit_prepare_cmds_for_reallegiance(struct iscsi_conn *);
- extern int iscsit_connection_recovery_transport_reset(struct iscsi_conn *);
+ extern int iscsit_discard_unacknowledged_ooo_cmdsns_for_conn(struct iscsit_conn *);
+ extern int iscsit_prepare_cmds_for_reallegiance(struct iscsit_conn *);
+ extern int iscsit_connection_recovery_transport_reset(struct iscsit_conn *);
  
  #endif /*** ISCSI_TARGET_ERL2_H ***/
diff --cc drivers/target/iscsi/iscsi_target_nego.c
index c33d905112b8,b65c73fc6073..000000000000
--- a/drivers/target/iscsi/iscsi_target_nego.c
+++ b/drivers/target/iscsi/iscsi_target_nego.c
@@@ -976,14 -968,7 +976,18 @@@ static int iscsi_target_handle_csg_one(
  	return 0;
  }
  
++<<<<<<< HEAD
 +/*
 + * RETURN VALUE:
 + *
 + *  1 = Login successful
 + * -1 = Login failed
 + *  0 = More PDU exchanges required
 + */
 +static int iscsi_target_do_login(struct iscsi_conn *conn, struct iscsi_login *login)
++=======
+ static int iscsi_target_do_login(struct iscsit_conn *conn, struct iscsi_login *login)
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  {
  	int pdu_count = 0;
  	struct iscsi_login_req *login_req;
diff --cc drivers/target/iscsi/iscsi_target_tmr.c
index cb231c907d51,e3c3a08db1e0..000000000000
--- a/drivers/target/iscsi/iscsi_target_tmr.c
+++ b/drivers/target/iscsi/iscsi_target_tmr.c
@@@ -36,11 -28,11 +36,16 @@@
  #include "iscsi_target.h"
  
  u8 iscsit_tmr_abort_task(
 -	struct iscsit_cmd *cmd,
 +	struct iscsi_cmd *cmd,
  	unsigned char *buf)
  {
++<<<<<<< HEAD
 +	struct iscsi_cmd *ref_cmd;
 +	struct iscsi_conn *conn = cmd->conn;
++=======
+ 	struct iscsit_cmd *ref_cmd;
+ 	struct iscsit_conn *conn = cmd->conn;
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  	struct iscsi_tmr_req *tmr_req = cmd->tmr_req;
  	struct se_tmr_req *se_tmr = cmd->se_cmd.se_tmr_req;
  	struct iscsi_tm *hdr = (struct iscsi_tm *) buf;
@@@ -111,11 -103,11 +116,16 @@@ int iscsit_tmr_task_cold_reset
  }
  
  u8 iscsit_tmr_task_reassign(
 -	struct iscsit_cmd *cmd,
 +	struct iscsi_cmd *cmd,
  	unsigned char *buf)
  {
++<<<<<<< HEAD
 +	struct iscsi_cmd *ref_cmd = NULL;
 +	struct iscsi_conn *conn = cmd->conn;
++=======
+ 	struct iscsit_cmd *ref_cmd = NULL;
+ 	struct iscsit_conn *conn = cmd->conn;
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  	struct iscsi_conn_recovery *cr = NULL;
  	struct iscsi_tmr_req *tmr_req = cmd->tmr_req;
  	struct se_tmr_req *se_tmr = cmd->se_cmd.se_tmr_req;
@@@ -201,9 -193,9 +211,9 @@@ static void iscsit_task_reassign_remove
  
  static int iscsit_task_reassign_complete_nop_out(
  	struct iscsi_tmr_req *tmr_req,
- 	struct iscsi_conn *conn)
+ 	struct iscsit_conn *conn)
  {
 -	struct iscsit_cmd *cmd = tmr_req->ref_cmd;
 +	struct iscsi_cmd *cmd = tmr_req->ref_cmd;
  	struct iscsi_conn_recovery *cr;
  
  	if (!cmd->cr) {
@@@ -304,10 -296,10 +314,10 @@@ static int iscsit_task_reassign_complet
  }
  
  static int iscsit_task_reassign_complete_read(
 -	struct iscsit_cmd *cmd,
 +	struct iscsi_cmd *cmd,
  	struct iscsi_tmr_req *tmr_req)
  {
- 	struct iscsi_conn *conn = cmd->conn;
+ 	struct iscsit_conn *conn = cmd->conn;
  	struct iscsi_datain_req *dr;
  	struct se_cmd *se_cmd = &cmd->se_cmd;
  	/*
@@@ -357,10 -349,10 +367,10 @@@
  }
  
  static int iscsit_task_reassign_complete_none(
 -	struct iscsit_cmd *cmd,
 +	struct iscsi_cmd *cmd,
  	struct iscsi_tmr_req *tmr_req)
  {
- 	struct iscsi_conn *conn = cmd->conn;
+ 	struct iscsit_conn *conn = cmd->conn;
  
  	cmd->i_state = ISTATE_SEND_STATUS;
  	iscsit_add_cmd_to_response_queue(cmd, conn, cmd->i_state);
@@@ -369,9 -361,9 +379,9 @@@
  
  static int iscsit_task_reassign_complete_scsi_cmnd(
  	struct iscsi_tmr_req *tmr_req,
- 	struct iscsi_conn *conn)
+ 	struct iscsit_conn *conn)
  {
 -	struct iscsit_cmd *cmd = tmr_req->ref_cmd;
 +	struct iscsi_cmd *cmd = tmr_req->ref_cmd;
  	struct iscsi_conn_recovery *cr;
  
  	if (!cmd->cr) {
@@@ -418,9 -410,9 +428,9 @@@
  
  static int iscsit_task_reassign_complete(
  	struct iscsi_tmr_req *tmr_req,
- 	struct iscsi_conn *conn)
+ 	struct iscsit_conn *conn)
  {
 -	struct iscsit_cmd *cmd;
 +	struct iscsi_cmd *cmd;
  	int ret = 0;
  
  	if (!tmr_req->ref_cmd) {
@@@ -459,7 -451,7 +469,11 @@@
   *	Right now the only one that its really needed for is
   *	connection recovery releated TASK_REASSIGN.
   */
++<<<<<<< HEAD
 +int iscsit_tmr_post_handler(struct iscsi_cmd *cmd, struct iscsi_conn *conn)
++=======
+ int iscsit_tmr_post_handler(struct iscsit_cmd *cmd, struct iscsit_conn *conn)
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  {
  	struct iscsi_tmr_req *tmr_req = cmd->tmr_req;
  	struct se_tmr_req *se_tmr = cmd->se_cmd.se_tmr_req;
@@@ -483,8 -475,8 +497,13 @@@ static int iscsit_task_reassign_prepare
  }
  
  static void iscsit_task_reassign_prepare_unsolicited_dataout(
++<<<<<<< HEAD
 +	struct iscsi_cmd *cmd,
 +	struct iscsi_conn *conn)
++=======
+ 	struct iscsit_cmd *cmd,
+ 	struct iscsit_conn *conn)
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  {
  	int i, j;
  	struct iscsi_pdu *pdu = NULL;
@@@ -552,9 -544,9 +571,9 @@@
  
  static int iscsit_task_reassign_prepare_write(
  	struct iscsi_tmr_req *tmr_req,
- 	struct iscsi_conn *conn)
+ 	struct iscsit_conn *conn)
  {
 -	struct iscsit_cmd *cmd = tmr_req->ref_cmd;
 +	struct iscsi_cmd *cmd = tmr_req->ref_cmd;
  	struct iscsi_pdu *pdu = NULL;
  	struct iscsi_r2t *r2t = NULL, *r2t_tmp;
  	int first_incomplete_r2t = 1, i = 0;
@@@ -785,9 -777,9 +804,9 @@@ drop_unacknowledged_r2ts
   */
  int iscsit_check_task_reassign_expdatasn(
  	struct iscsi_tmr_req *tmr_req,
- 	struct iscsi_conn *conn)
+ 	struct iscsit_conn *conn)
  {
 -	struct iscsit_cmd *ref_cmd = tmr_req->ref_cmd;
 +	struct iscsi_cmd *ref_cmd = tmr_req->ref_cmd;
  
  	if (ref_cmd->iscsi_opcode != ISCSI_OP_SCSI_CMD)
  		return 0;
diff --cc drivers/target/iscsi/iscsi_target_tmr.h
index 301f0936bd8e,3413d0f596c8..000000000000
--- a/drivers/target/iscsi/iscsi_target_tmr.h
+++ b/drivers/target/iscsi/iscsi_target_tmr.h
@@@ -4,18 -4,18 +4,32 @@@
  
  #include <linux/types.h>
  
++<<<<<<< HEAD
 +struct iscsi_cmd;
 +struct iscsi_conn;
 +struct iscsi_tmr_req;
 +
 +extern u8 iscsit_tmr_abort_task(struct iscsi_cmd *, unsigned char *);
 +extern int iscsit_tmr_task_warm_reset(struct iscsi_conn *, struct iscsi_tmr_req *,
++=======
+ struct iscsit_cmd;
+ struct iscsit_conn;
+ struct iscsi_tmr_req;
+ 
+ extern u8 iscsit_tmr_abort_task(struct iscsit_cmd *, unsigned char *);
+ extern int iscsit_tmr_task_warm_reset(struct iscsit_conn *, struct iscsi_tmr_req *,
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  			unsigned char *);
- extern int iscsit_tmr_task_cold_reset(struct iscsi_conn *, struct iscsi_tmr_req *,
+ extern int iscsit_tmr_task_cold_reset(struct iscsit_conn *, struct iscsi_tmr_req *,
  			unsigned char *);
++<<<<<<< HEAD
 +extern u8 iscsit_tmr_task_reassign(struct iscsi_cmd *, unsigned char *);
 +extern int iscsit_tmr_post_handler(struct iscsi_cmd *, struct iscsi_conn *);
++=======
+ extern u8 iscsit_tmr_task_reassign(struct iscsit_cmd *, unsigned char *);
+ extern int iscsit_tmr_post_handler(struct iscsit_cmd *, struct iscsit_conn *);
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  extern int iscsit_check_task_reassign_expdatasn(struct iscsi_tmr_req *,
- 			struct iscsi_conn *);
+ 			struct iscsit_conn *);
  
  #endif /* ISCSI_TARGET_TMR_H */
diff --cc drivers/target/iscsi/iscsi_target_util.c
index 4a0a71687e9a,be50f857d1b1..000000000000
--- a/drivers/target/iscsi/iscsi_target_util.c
+++ b/drivers/target/iscsi/iscsi_target_util.c
@@@ -160,9 -152,9 +160,13 @@@ static int iscsit_wait_for_tag(struct s
   * May be called from software interrupt (timer) context for allocating
   * iSCSI NopINs.
   */
++<<<<<<< HEAD
 +struct iscsi_cmd *iscsit_allocate_cmd(struct iscsi_conn *conn, int state)
++=======
+ struct iscsit_cmd *iscsit_allocate_cmd(struct iscsit_conn *conn, int state)
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  {
 -	struct iscsit_cmd *cmd;
 +	struct iscsi_cmd *cmd;
  	struct se_session *se_sess = conn->sess->se_sess;
  	int size, tag, cpu;
  
@@@ -290,7 -282,7 +294,11 @@@ static inline int iscsit_check_received
   * Commands may be received out of order if MC/S is in use.
   * Ensure they are executed in CmdSN order.
   */
++<<<<<<< HEAD
 +int iscsit_sequence_cmd(struct iscsi_conn *conn, struct iscsi_cmd *cmd,
++=======
+ int iscsit_sequence_cmd(struct iscsit_conn *conn, struct iscsit_cmd *cmd,
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  			unsigned char *buf, __be32 cmdsn)
  {
  	int ret, cmdsn_ret;
@@@ -341,9 -333,9 +349,9 @@@
  }
  EXPORT_SYMBOL(iscsit_sequence_cmd);
  
 -int iscsit_check_unsolicited_dataout(struct iscsit_cmd *cmd, unsigned char *buf)
 +int iscsit_check_unsolicited_dataout(struct iscsi_cmd *cmd, unsigned char *buf)
  {
- 	struct iscsi_conn *conn = cmd->conn;
+ 	struct iscsit_conn *conn = cmd->conn;
  	struct se_cmd *se_cmd = &cmd->se_cmd;
  	struct iscsi_data *hdr = (struct iscsi_data *) buf;
  	u32 payload_length = ntoh24(hdr->dlength);
@@@ -385,11 -377,11 +393,16 @@@
  	return 0;
  }
  
++<<<<<<< HEAD
 +struct iscsi_cmd *iscsit_find_cmd_from_itt(
 +	struct iscsi_conn *conn,
++=======
+ struct iscsit_cmd *iscsit_find_cmd_from_itt(
+ 	struct iscsit_conn *conn,
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  	itt_t init_task_tag)
  {
 -	struct iscsit_cmd *cmd;
 +	struct iscsi_cmd *cmd;
  
  	spin_lock_bh(&conn->cmd_lock);
  	list_for_each_entry(cmd, &conn->conn_cmd_list, i_conn_node) {
@@@ -406,8 -398,8 +419,13 @@@
  }
  EXPORT_SYMBOL(iscsit_find_cmd_from_itt);
  
++<<<<<<< HEAD
 +struct iscsi_cmd *iscsit_find_cmd_from_itt_or_dump(
 +	struct iscsi_conn *conn,
++=======
+ struct iscsit_cmd *iscsit_find_cmd_from_itt_or_dump(
+ 	struct iscsit_conn *conn,
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  	itt_t init_task_tag,
  	u32 length)
  {
@@@ -433,11 -425,11 +451,16 @@@
  }
  EXPORT_SYMBOL(iscsit_find_cmd_from_itt_or_dump);
  
++<<<<<<< HEAD
 +struct iscsi_cmd *iscsit_find_cmd_from_ttt(
 +	struct iscsi_conn *conn,
++=======
+ struct iscsit_cmd *iscsit_find_cmd_from_ttt(
+ 	struct iscsit_conn *conn,
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  	u32 targ_xfer_tag)
  {
 -	struct iscsit_cmd *cmd = NULL;
 +	struct iscsi_cmd *cmd = NULL;
  
  	spin_lock_bh(&conn->cmd_lock);
  	list_for_each_entry(cmd, &conn->conn_cmd_list, i_conn_node) {
@@@ -506,8 -498,8 +529,13 @@@ int iscsit_find_cmd_for_recovery
  }
  
  void iscsit_add_cmd_to_immediate_queue(
++<<<<<<< HEAD
 +	struct iscsi_cmd *cmd,
 +	struct iscsi_conn *conn,
++=======
+ 	struct iscsit_cmd *cmd,
+ 	struct iscsit_conn *conn,
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  	u8 state)
  {
  	struct iscsi_queue_req *qr;
@@@ -553,8 -545,8 +581,13 @@@ struct iscsi_queue_req *iscsit_get_cmd_
  }
  
  static void iscsit_remove_cmd_from_immediate_queue(
++<<<<<<< HEAD
 +	struct iscsi_cmd *cmd,
 +	struct iscsi_conn *conn)
++=======
+ 	struct iscsit_cmd *cmd,
+ 	struct iscsit_conn *conn)
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  {
  	struct iscsi_queue_req *qr, *qr_tmp;
  
@@@ -582,8 -574,8 +615,13 @@@
  }
  
  int iscsit_add_cmd_to_response_queue(
++<<<<<<< HEAD
 +	struct iscsi_cmd *cmd,
 +	struct iscsi_conn *conn,
++=======
+ 	struct iscsit_cmd *cmd,
+ 	struct iscsit_conn *conn,
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  	u8 state)
  {
  	struct iscsi_queue_req *qr;
@@@ -629,8 -621,8 +667,13 @@@ struct iscsi_queue_req *iscsit_get_cmd_
  }
  
  static void iscsit_remove_cmd_from_response_queue(
++<<<<<<< HEAD
 +	struct iscsi_cmd *cmd,
 +	struct iscsi_conn *conn)
++=======
+ 	struct iscsit_cmd *cmd,
+ 	struct iscsit_conn *conn)
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  {
  	struct iscsi_queue_req *qr, *qr_tmp;
  
@@@ -730,9 -720,9 +773,9 @@@ void iscsit_release_cmd(struct iscsi_cm
  }
  EXPORT_SYMBOL(iscsit_release_cmd);
  
 -void __iscsit_free_cmd(struct iscsit_cmd *cmd, bool check_queues)
 +void __iscsit_free_cmd(struct iscsi_cmd *cmd, bool check_queues)
  {
- 	struct iscsi_conn *conn = cmd->conn;
+ 	struct iscsit_conn *conn = cmd->conn;
  
  	WARN_ON(!list_empty(&cmd->i_conn_node));
  
@@@ -877,10 -867,10 +920,14 @@@ void iscsit_inc_conn_usage_count(struc
  	spin_unlock_bh(&conn->conn_usage_lock);
  }
  
++<<<<<<< HEAD
 +int iscsit_add_nopin(struct iscsi_conn *conn, int want_response)
++=======
+ static int iscsit_add_nopin(struct iscsit_conn *conn, int want_response)
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  {
  	u8 state;
 -	struct iscsit_cmd *cmd;
 +	struct iscsi_cmd *cmd;
  
  	cmd = iscsit_allocate_cmd(conn, TASK_RUNNING);
  	if (!cmd)
@@@ -1052,8 -1041,8 +1099,13 @@@ void iscsit_stop_nopin_timer(struct isc
  }
  
  int iscsit_send_tx_data(
++<<<<<<< HEAD
 +	struct iscsi_cmd *cmd,
 +	struct iscsi_conn *conn,
++=======
+ 	struct iscsit_cmd *cmd,
+ 	struct iscsit_conn *conn,
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  	int use_misc)
  {
  	int tx_sent, tx_size;
@@@ -1085,8 -1074,8 +1137,13 @@@ send_data
  }
  
  int iscsit_fe_sendpage_sg(
++<<<<<<< HEAD
 +	struct iscsi_cmd *cmd,
 +	struct iscsi_conn *conn)
++=======
+ 	struct iscsit_cmd *cmd,
+ 	struct iscsit_conn *conn)
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  {
  	struct scatterlist *sg = cmd->first_data_sg;
  	struct kvec iov;
diff --cc drivers/target/iscsi/iscsi_target_util.h
index c4474943f310,dcdcdfe4fd7e..000000000000
--- a/drivers/target/iscsi/iscsi_target_util.h
+++ b/drivers/target/iscsi/iscsi_target_util.h
@@@ -7,67 -7,66 +7,112 @@@
  
  #define MARKER_SIZE	8
  
++<<<<<<< HEAD
 +struct iscsi_cmd;
 +struct iscsi_conn;
 +struct iscsi_conn_recovery;
 +struct iscsi_session;
 +
 +extern int iscsit_add_r2t_to_list(struct iscsi_cmd *, u32, u32, int, u32);
 +extern struct iscsi_r2t *iscsit_get_r2t_for_eos(struct iscsi_cmd *, u32, u32);
 +extern struct iscsi_r2t *iscsit_get_r2t_from_list(struct iscsi_cmd *);
 +extern void iscsit_free_r2t(struct iscsi_r2t *, struct iscsi_cmd *);
 +extern void iscsit_free_r2ts_from_list(struct iscsi_cmd *);
 +extern struct iscsi_cmd *iscsit_alloc_cmd(struct iscsi_conn *, gfp_t);
 +extern struct iscsi_cmd *iscsit_allocate_cmd(struct iscsi_conn *, int);
 +extern struct iscsi_seq *iscsit_get_seq_holder_for_datain(struct iscsi_cmd *, u32);
 +extern struct iscsi_seq *iscsit_get_seq_holder_for_r2t(struct iscsi_cmd *);
 +extern struct iscsi_r2t *iscsit_get_holder_for_r2tsn(struct iscsi_cmd *, u32);
 +extern int iscsit_sequence_cmd(struct iscsi_conn *conn, struct iscsi_cmd *cmd,
 +			       unsigned char * ,__be32 cmdsn);
 +extern int iscsit_check_unsolicited_dataout(struct iscsi_cmd *, unsigned char *);
 +extern struct iscsi_cmd *iscsit_find_cmd_from_itt_or_dump(struct iscsi_conn *,
 +			itt_t, u32);
 +extern struct iscsi_cmd *iscsit_find_cmd_from_ttt(struct iscsi_conn *, u32);
 +extern int iscsit_find_cmd_for_recovery(struct iscsi_session *, struct iscsi_cmd **,
 +			struct iscsi_conn_recovery **, itt_t);
 +extern void iscsit_add_cmd_to_immediate_queue(struct iscsi_cmd *, struct iscsi_conn *, u8);
 +extern struct iscsi_queue_req *iscsit_get_cmd_from_immediate_queue(struct iscsi_conn *);
 +extern int iscsit_add_cmd_to_response_queue(struct iscsi_cmd *, struct iscsi_conn *, u8);
 +extern struct iscsi_queue_req *iscsit_get_cmd_from_response_queue(struct iscsi_conn *);
 +extern void iscsit_remove_cmd_from_tx_queues(struct iscsi_cmd *, struct iscsi_conn *);
 +extern bool iscsit_conn_all_queues_empty(struct iscsi_conn *);
 +extern void iscsit_free_queue_reqs_for_conn(struct iscsi_conn *);
 +extern void iscsit_release_cmd(struct iscsi_cmd *);
 +extern void __iscsit_free_cmd(struct iscsi_cmd *, bool);
 +extern void iscsit_free_cmd(struct iscsi_cmd *, bool);
++=======
+ struct iscsit_cmd;
+ struct iscsit_conn;
+ struct iscsi_conn_recovery;
+ struct iscsi_session;
+ 
+ extern int iscsit_add_r2t_to_list(struct iscsit_cmd *, u32, u32, int, u32);
+ extern struct iscsi_r2t *iscsit_get_r2t_for_eos(struct iscsit_cmd *, u32, u32);
+ extern struct iscsi_r2t *iscsit_get_r2t_from_list(struct iscsit_cmd *);
+ extern void iscsit_free_r2t(struct iscsi_r2t *, struct iscsit_cmd *);
+ extern void iscsit_free_r2ts_from_list(struct iscsit_cmd *);
+ extern struct iscsit_cmd *iscsit_alloc_cmd(struct iscsit_conn *, gfp_t);
+ extern struct iscsit_cmd *iscsit_allocate_cmd(struct iscsit_conn *, int);
+ extern struct iscsi_seq *iscsit_get_seq_holder_for_datain(struct iscsit_cmd *, u32);
+ extern struct iscsi_seq *iscsit_get_seq_holder_for_r2t(struct iscsit_cmd *);
+ extern struct iscsi_r2t *iscsit_get_holder_for_r2tsn(struct iscsit_cmd *, u32);
+ extern int iscsit_sequence_cmd(struct iscsit_conn *conn, struct iscsit_cmd *cmd,
+ 			       unsigned char * ,__be32 cmdsn);
+ extern int iscsit_check_unsolicited_dataout(struct iscsit_cmd *, unsigned char *);
+ extern struct iscsit_cmd *iscsit_find_cmd_from_itt_or_dump(struct iscsit_conn *,
+ 			itt_t, u32);
+ extern struct iscsit_cmd *iscsit_find_cmd_from_ttt(struct iscsit_conn *, u32);
+ extern int iscsit_find_cmd_for_recovery(struct iscsi_session *, struct iscsit_cmd **,
+ 			struct iscsi_conn_recovery **, itt_t);
+ extern void iscsit_add_cmd_to_immediate_queue(struct iscsit_cmd *, struct iscsit_conn *, u8);
+ extern struct iscsi_queue_req *iscsit_get_cmd_from_immediate_queue(struct iscsit_conn *);
+ extern int iscsit_add_cmd_to_response_queue(struct iscsit_cmd *, struct iscsit_conn *, u8);
+ extern struct iscsi_queue_req *iscsit_get_cmd_from_response_queue(struct iscsit_conn *);
+ extern void iscsit_remove_cmd_from_tx_queues(struct iscsit_cmd *, struct iscsit_conn *);
+ extern bool iscsit_conn_all_queues_empty(struct iscsit_conn *);
+ extern void iscsit_free_queue_reqs_for_conn(struct iscsit_conn *);
+ extern void iscsit_release_cmd(struct iscsit_cmd *);
+ extern void __iscsit_free_cmd(struct iscsit_cmd *, bool);
+ extern void iscsit_free_cmd(struct iscsit_cmd *, bool);
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  extern bool iscsit_check_session_usage_count(struct iscsi_session *sess, bool can_sleep);
  extern void iscsit_dec_session_usage_count(struct iscsi_session *);
  extern void iscsit_inc_session_usage_count(struct iscsi_session *);
- extern struct iscsi_conn *iscsit_get_conn_from_cid(struct iscsi_session *, u16);
- extern struct iscsi_conn *iscsit_get_conn_from_cid_rcfr(struct iscsi_session *, u16);
- extern void iscsit_check_conn_usage_count(struct iscsi_conn *);
- extern void iscsit_dec_conn_usage_count(struct iscsi_conn *);
- extern void iscsit_inc_conn_usage_count(struct iscsi_conn *);
+ extern struct iscsit_conn *iscsit_get_conn_from_cid(struct iscsi_session *, u16);
+ extern struct iscsit_conn *iscsit_get_conn_from_cid_rcfr(struct iscsi_session *, u16);
+ extern void iscsit_check_conn_usage_count(struct iscsit_conn *);
+ extern void iscsit_dec_conn_usage_count(struct iscsit_conn *);
+ extern void iscsit_inc_conn_usage_count(struct iscsit_conn *);
  extern void iscsit_handle_nopin_response_timeout(struct timer_list *t);
- extern void iscsit_mod_nopin_response_timer(struct iscsi_conn *);
- extern void iscsit_start_nopin_response_timer(struct iscsi_conn *);
- extern void iscsit_stop_nopin_response_timer(struct iscsi_conn *);
+ extern void iscsit_mod_nopin_response_timer(struct iscsit_conn *);
+ extern void iscsit_start_nopin_response_timer(struct iscsit_conn *);
+ extern void iscsit_stop_nopin_response_timer(struct iscsit_conn *);
  extern void iscsit_handle_nopin_timeout(struct timer_list *t);
++<<<<<<< HEAD
 +extern void __iscsit_start_nopin_timer(struct iscsi_conn *);
 +extern void iscsit_start_nopin_timer(struct iscsi_conn *);
 +extern void iscsit_stop_nopin_timer(struct iscsi_conn *);
 +extern int iscsit_send_tx_data(struct iscsi_cmd *, struct iscsi_conn *, int);
 +extern int iscsit_fe_sendpage_sg(struct iscsi_cmd *, struct iscsi_conn *);
 +extern int iscsit_tx_login_rsp(struct iscsi_conn *, u8, u8);
++=======
+ extern void __iscsit_start_nopin_timer(struct iscsit_conn *);
+ extern void iscsit_start_nopin_timer(struct iscsit_conn *);
+ extern void iscsit_stop_nopin_timer(struct iscsit_conn *);
+ extern int iscsit_send_tx_data(struct iscsit_cmd *, struct iscsit_conn *, int);
+ extern int iscsit_fe_sendpage_sg(struct iscsit_cmd *, struct iscsit_conn *);
+ extern int iscsit_tx_login_rsp(struct iscsit_conn *, u8, u8);
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  extern void iscsit_print_session_params(struct iscsi_session *);
  extern int iscsit_print_dev_to_proc(char *, char **, off_t, int);
  extern int iscsit_print_sessions_to_proc(char *, char **, off_t, int);
  extern int iscsit_print_tpg_to_proc(char *, char **, off_t, int);
- extern int rx_data(struct iscsi_conn *, struct kvec *, int, int);
- extern int tx_data(struct iscsi_conn *, struct kvec *, int, int);
- extern void iscsit_collect_login_stats(struct iscsi_conn *, u8, u8);
- extern struct iscsi_tiqn *iscsit_snmp_get_tiqn(struct iscsi_conn *);
+ extern int rx_data(struct iscsit_conn *, struct kvec *, int, int);
+ extern int tx_data(struct iscsit_conn *, struct kvec *, int, int);
+ extern void iscsit_collect_login_stats(struct iscsit_conn *, u8, u8);
+ extern struct iscsi_tiqn *iscsit_snmp_get_tiqn(struct iscsit_conn *);
  extern void iscsit_fill_cxn_timeout_err_stats(struct iscsi_session *);
 +extern int iscsit_add_nopin(struct iscsi_conn *, int);
  
  #endif /*** ISCSI_TARGET_UTIL_H ***/
diff --cc include/target/iscsi/iscsi_target_core.h
index 4e33298a35f2,76581e0f3d98..000000000000
--- a/include/target/iscsi/iscsi_target_core.h
+++ b/include/target/iscsi/iscsi_target_core.h
@@@ -900,38 -898,10 +900,46 @@@ static inline u32 session_get_next_ttt(
  	return ttt;
  }
  
++<<<<<<< HEAD
 +extern struct iscsi_cmd *iscsit_find_cmd_from_itt(struct iscsi_conn *, itt_t);
 +
 +static inline void iscsit_thread_check_cpumask(
 +	struct iscsi_conn *conn,
 +	struct task_struct *p,
 +	int mode)
 +{
 +	/*
 +	 * mode == 1 signals iscsi_target_tx_thread() usage.
 +	 * mode == 0 signals iscsi_target_rx_thread() usage.
 +	 */
 +	if (mode == 1) {
 +		if (!conn->conn_tx_reset_cpumask)
 +			return;
 +		conn->conn_tx_reset_cpumask = 0;
 +	} else {
 +		if (!conn->conn_rx_reset_cpumask)
 +			return;
 +		conn->conn_rx_reset_cpumask = 0;
 +	}
 +	/*
 +	 * Update the CPU mask for this single kthread so that
 +	 * both TX and RX kthreads are scheduled to run on the
 +	 * same CPU.
 +	 */
 +	set_cpus_allowed_ptr(p, conn->conn_cpumask);
 +}
++=======
+ extern struct iscsit_cmd *iscsit_find_cmd_from_itt(struct iscsit_conn *, itt_t);
+ 
+ extern void iscsit_thread_check_cpumask(struct iscsit_conn *conn,
+ 					struct task_struct *p,
+ 					int mode);
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  
 +#define iscsit_set_max_cmdsn(hdr, conn) \
 +{ \
 +	u32 max_cmdsn = (u32) atomic_read(&conn->sess->max_cmd_sn); \
 +	hdr->max_cmdsn = cpu_to_be32(max_cmdsn); \
 +	conn->sess->last_max_cmd_sn = max_cmdsn; \
 +}
  #endif /* ISCSI_TARGET_CORE_H */
diff --cc include/target/iscsi/iscsi_transport.h
index 878733ca584c,2ab26bb6f808..000000000000
--- a/include/target/iscsi/iscsi_transport.h
+++ b/include/target/iscsi/iscsi_transport.h
@@@ -12,29 -12,29 +12,48 @@@ struct iscsit_transport 
  	struct module *owner;
  	struct list_head t_node;
  	int (*iscsit_setup_np)(struct iscsi_np *, struct sockaddr_storage *);
- 	int (*iscsit_accept_np)(struct iscsi_np *, struct iscsi_conn *);
+ 	int (*iscsit_accept_np)(struct iscsi_np *, struct iscsit_conn *);
  	void (*iscsit_free_np)(struct iscsi_np *);
++<<<<<<< HEAD
 +	void (*iscsit_wait_conn)(struct iscsi_conn *);
 +	void (*iscsit_free_conn)(struct iscsi_conn *);
 +	int (*iscsit_get_login_rx)(struct iscsi_conn *, struct iscsi_login *);
 +	int (*iscsit_put_login_tx)(struct iscsi_conn *, struct iscsi_login *, u32);
 +	int (*iscsit_immediate_queue)(struct iscsi_conn *, struct iscsi_cmd *, int);
 +	int (*iscsit_response_queue)(struct iscsi_conn *, struct iscsi_cmd *, int);
 +	int (*iscsit_get_dataout)(struct iscsi_conn *, struct iscsi_cmd *, bool);
 +	int (*iscsit_queue_data_in)(struct iscsi_conn *, struct iscsi_cmd *);
 +	int (*iscsit_queue_status)(struct iscsi_conn *, struct iscsi_cmd *);
 +	void (*iscsit_aborted_task)(struct iscsi_conn *, struct iscsi_cmd *);
 +	int (*iscsit_xmit_pdu)(struct iscsi_conn *, struct iscsi_cmd *,
 +			       struct iscsi_datain_req *, const void *, u32);
 +	void (*iscsit_unmap_cmd)(struct iscsi_conn *, struct iscsi_cmd *);
 +	void (*iscsit_get_rx_pdu)(struct iscsi_conn *);
 +	int (*iscsit_validate_params)(struct iscsi_conn *);
 +	void (*iscsit_get_r2t_ttt)(struct iscsi_conn *, struct iscsi_cmd *,
++=======
+ 	void (*iscsit_wait_conn)(struct iscsit_conn *);
+ 	void (*iscsit_free_conn)(struct iscsit_conn *);
+ 	int (*iscsit_get_login_rx)(struct iscsit_conn *, struct iscsi_login *);
+ 	int (*iscsit_put_login_tx)(struct iscsit_conn *, struct iscsi_login *, u32);
+ 	int (*iscsit_immediate_queue)(struct iscsit_conn *, struct iscsit_cmd *, int);
+ 	int (*iscsit_response_queue)(struct iscsit_conn *, struct iscsit_cmd *, int);
+ 	int (*iscsit_get_dataout)(struct iscsit_conn *, struct iscsit_cmd *, bool);
+ 	int (*iscsit_queue_data_in)(struct iscsit_conn *, struct iscsit_cmd *);
+ 	int (*iscsit_queue_status)(struct iscsit_conn *, struct iscsit_cmd *);
+ 	void (*iscsit_aborted_task)(struct iscsit_conn *, struct iscsit_cmd *);
+ 	int (*iscsit_xmit_pdu)(struct iscsit_conn *, struct iscsit_cmd *,
+ 			       struct iscsi_datain_req *, const void *, u32);
+ 	void (*iscsit_unmap_cmd)(struct iscsit_conn *, struct iscsit_cmd *);
+ 	void (*iscsit_get_rx_pdu)(struct iscsit_conn *);
+ 	int (*iscsit_validate_params)(struct iscsit_conn *);
+ 	void (*iscsit_get_r2t_ttt)(struct iscsit_conn *, struct iscsit_cmd *,
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  				   struct iscsi_r2t *);
- 	enum target_prot_op (*iscsit_get_sup_prot_ops)(struct iscsi_conn *);
+ 	enum target_prot_op (*iscsit_get_sup_prot_ops)(struct iscsit_conn *);
  };
  
 -static inline void *iscsit_priv_cmd(struct iscsit_cmd *cmd)
 +static inline void *iscsit_priv_cmd(struct iscsi_cmd *cmd)
  {
  	return (void *)(cmd + 1);
  }
@@@ -51,57 -51,57 +70,111 @@@ extern void iscsit_put_transport(struc
  /*
   * From iscsi_target.c
   */
++<<<<<<< HEAD
 +extern int iscsit_setup_scsi_cmd(struct iscsi_conn *, struct iscsi_cmd *,
 +				unsigned char *);
 +extern void iscsit_set_unsolicited_dataout(struct iscsi_cmd *);
 +extern int iscsit_process_scsi_cmd(struct iscsi_conn *, struct iscsi_cmd *,
 +				struct iscsi_scsi_req *);
 +extern int
 +__iscsit_check_dataout_hdr(struct iscsi_conn *, void *,
 +			   struct iscsi_cmd *, u32, bool *);
 +extern int
 +iscsit_check_dataout_hdr(struct iscsi_conn *conn, void *buf,
 +			 struct iscsi_cmd **out_cmd);
 +extern int iscsit_check_dataout_payload(struct iscsi_cmd *, struct iscsi_data *,
 +				bool);
 +extern int iscsit_setup_nop_out(struct iscsi_conn *, struct iscsi_cmd *,
 +				struct iscsi_nopout *);
 +extern int iscsit_process_nop_out(struct iscsi_conn *, struct iscsi_cmd *,
 +				struct iscsi_nopout *);
 +extern int iscsit_handle_logout_cmd(struct iscsi_conn *, struct iscsi_cmd *,
 +				unsigned char *);
 +extern int iscsit_handle_task_mgt_cmd(struct iscsi_conn *, struct iscsi_cmd *,
 +				unsigned char *);
 +extern int iscsit_setup_text_cmd(struct iscsi_conn *, struct iscsi_cmd *,
 +				 struct iscsi_text *);
 +extern int iscsit_process_text_cmd(struct iscsi_conn *, struct iscsi_cmd *,
 +				   struct iscsi_text *);
 +extern void iscsit_build_rsp_pdu(struct iscsi_cmd *, struct iscsi_conn *,
 +				bool, struct iscsi_scsi_rsp *);
 +extern void iscsit_build_nopin_rsp(struct iscsi_cmd *, struct iscsi_conn *,
 +				struct iscsi_nopin *, bool);
 +extern void iscsit_build_task_mgt_rsp(struct iscsi_cmd *, struct iscsi_conn *,
 +				struct iscsi_tm_rsp *);
 +extern int iscsit_build_text_rsp(struct iscsi_cmd *, struct iscsi_conn *,
 +				struct iscsi_text_rsp *,
 +				enum iscsit_transport_type);
 +extern void iscsit_build_reject(struct iscsi_cmd *, struct iscsi_conn *,
 +				struct iscsi_reject *);
 +extern int iscsit_build_logout_rsp(struct iscsi_cmd *, struct iscsi_conn *,
 +				struct iscsi_logout_rsp *);
 +extern int iscsit_logout_post_handler(struct iscsi_cmd *, struct iscsi_conn *);
 +extern int iscsit_queue_rsp(struct iscsi_conn *, struct iscsi_cmd *);
 +extern void iscsit_aborted_task(struct iscsi_conn *, struct iscsi_cmd *);
 +extern int iscsit_add_reject(struct iscsi_conn *, u8, unsigned char *);
 +extern int iscsit_reject_cmd(struct iscsi_cmd *, u8, unsigned char *);
 +extern int iscsit_handle_snack(struct iscsi_conn *, unsigned char *);
 +extern void iscsit_build_datain_pdu(struct iscsi_cmd *, struct iscsi_conn *,
 +				    struct iscsi_datain *,
 +				    struct iscsi_data_rsp *, bool);
 +extern int iscsit_build_r2ts_for_cmd(struct iscsi_conn *, struct iscsi_cmd *,
 +				     bool);
 +extern int iscsit_immediate_queue(struct iscsi_conn *, struct iscsi_cmd *, int);
 +extern int iscsit_response_queue(struct iscsi_conn *, struct iscsi_cmd *, int);
++=======
+ extern int iscsit_setup_scsi_cmd(struct iscsit_conn *, struct iscsit_cmd *,
+ 				unsigned char *);
+ extern void iscsit_set_unsolicited_dataout(struct iscsit_cmd *);
+ extern int iscsit_process_scsi_cmd(struct iscsit_conn *, struct iscsit_cmd *,
+ 				struct iscsi_scsi_req *);
+ extern int
+ __iscsit_check_dataout_hdr(struct iscsit_conn *, void *,
+ 			   struct iscsit_cmd *, u32, bool *);
+ extern int
+ iscsit_check_dataout_hdr(struct iscsit_conn *conn, void *buf,
+ 			 struct iscsit_cmd **out_cmd);
+ extern int iscsit_check_dataout_payload(struct iscsit_cmd *, struct iscsi_data *,
+ 				bool);
+ extern int iscsit_setup_nop_out(struct iscsit_conn *, struct iscsit_cmd *,
+ 				struct iscsi_nopout *);
+ extern int iscsit_process_nop_out(struct iscsit_conn *, struct iscsit_cmd *,
+ 				struct iscsi_nopout *);
+ extern int iscsit_handle_logout_cmd(struct iscsit_conn *, struct iscsit_cmd *,
+ 				unsigned char *);
+ extern int iscsit_handle_task_mgt_cmd(struct iscsit_conn *, struct iscsit_cmd *,
+ 				unsigned char *);
+ extern int iscsit_setup_text_cmd(struct iscsit_conn *, struct iscsit_cmd *,
+ 				 struct iscsi_text *);
+ extern int iscsit_process_text_cmd(struct iscsit_conn *, struct iscsit_cmd *,
+ 				   struct iscsi_text *);
+ extern void iscsit_build_rsp_pdu(struct iscsit_cmd *, struct iscsit_conn *,
+ 				bool, struct iscsi_scsi_rsp *);
+ extern void iscsit_build_nopin_rsp(struct iscsit_cmd *, struct iscsit_conn *,
+ 				struct iscsi_nopin *, bool);
+ extern void iscsit_build_task_mgt_rsp(struct iscsit_cmd *, struct iscsit_conn *,
+ 				struct iscsi_tm_rsp *);
+ extern int iscsit_build_text_rsp(struct iscsit_cmd *, struct iscsit_conn *,
+ 				struct iscsi_text_rsp *,
+ 				enum iscsit_transport_type);
+ extern void iscsit_build_reject(struct iscsit_cmd *, struct iscsit_conn *,
+ 				struct iscsi_reject *);
+ extern int iscsit_build_logout_rsp(struct iscsit_cmd *, struct iscsit_conn *,
+ 				struct iscsi_logout_rsp *);
+ extern int iscsit_logout_post_handler(struct iscsit_cmd *, struct iscsit_conn *);
+ extern int iscsit_queue_rsp(struct iscsit_conn *, struct iscsit_cmd *);
+ extern void iscsit_aborted_task(struct iscsit_conn *, struct iscsit_cmd *);
+ extern int iscsit_add_reject(struct iscsit_conn *, u8, unsigned char *);
+ extern int iscsit_reject_cmd(struct iscsit_cmd *, u8, unsigned char *);
+ extern int iscsit_handle_snack(struct iscsit_conn *, unsigned char *);
+ extern void iscsit_build_datain_pdu(struct iscsit_cmd *, struct iscsit_conn *,
+ 				    struct iscsi_datain *,
+ 				    struct iscsi_data_rsp *, bool);
+ extern int iscsit_build_r2ts_for_cmd(struct iscsit_conn *, struct iscsit_cmd *,
+ 				     bool);
+ extern int iscsit_immediate_queue(struct iscsit_conn *, struct iscsit_cmd *, int);
+ extern int iscsit_response_queue(struct iscsit_conn *, struct iscsit_cmd *, int);
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  /*
   * From iscsi_target_device.c
   */
@@@ -119,20 -118,20 +192,36 @@@ extern void iscsit_stop_dataout_timer(s
  /*
   * From iscsi_target_tmr.c
   */
++<<<<<<< HEAD
 +extern int iscsit_tmr_post_handler(struct iscsi_cmd *, struct iscsi_conn *);
++=======
+ extern int iscsit_tmr_post_handler(struct iscsit_cmd *, struct iscsit_conn *);
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  
  /*
   * From iscsi_target_util.c
   */
++<<<<<<< HEAD
 +extern struct iscsi_cmd *iscsit_allocate_cmd(struct iscsi_conn *, int);
 +extern int iscsit_sequence_cmd(struct iscsi_conn *, struct iscsi_cmd *,
 +			       unsigned char *, __be32);
 +extern void iscsit_release_cmd(struct iscsi_cmd *);
 +extern void iscsit_free_cmd(struct iscsi_cmd *, bool);
 +extern void iscsit_add_cmd_to_immediate_queue(struct iscsi_cmd *,
 +					      struct iscsi_conn *, u8);
 +extern struct iscsi_cmd *
 +iscsit_find_cmd_from_itt_or_dump(struct iscsi_conn *conn,
++=======
+ extern struct iscsit_cmd *iscsit_allocate_cmd(struct iscsit_conn *, int);
+ extern int iscsit_sequence_cmd(struct iscsit_conn *, struct iscsit_cmd *,
+ 			       unsigned char *, __be32);
+ extern void iscsit_release_cmd(struct iscsit_cmd *);
+ extern void iscsit_free_cmd(struct iscsit_cmd *, bool);
+ extern void iscsit_add_cmd_to_immediate_queue(struct iscsit_cmd *,
+ 					      struct iscsit_conn *, u8);
+ extern struct iscsit_cmd *
+ iscsit_find_cmd_from_itt_or_dump(struct iscsit_conn *conn,
++>>>>>>> be36d683fc29 (scsi: target: iscsi: Rename iscsi_conn to iscsit_conn)
  				 itt_t init_task_tag, u32 length);
  
  /*
* Unmerged path drivers/infiniband/ulp/isert/ib_isert.c
diff --git a/drivers/infiniband/ulp/isert/ib_isert.h b/drivers/infiniband/ulp/isert/ib_isert.h
index ca8cfebe26ca..e56058438868 100644
--- a/drivers/infiniband/ulp/isert/ib_isert.h
+++ b/drivers/infiniband/ulp/isert/ib_isert.h
@@ -173,7 +173,7 @@ struct isert_conn {
 	u64			login_rsp_dma;
 	struct iser_rx_desc	*rx_descs;
 	struct ib_recv_wr	rx_wr[ISERT_QP_MAX_RECV_DTOS];
-	struct iscsi_conn	*conn;
+	struct iscsit_conn	*conn;
 	struct list_head	node;
 	struct completion	login_comp;
 	struct completion	login_req_comp;
* Unmerged path drivers/target/iscsi/cxgbit/cxgbit.h
diff --git a/drivers/target/iscsi/cxgbit/cxgbit_cm.c b/drivers/target/iscsi/cxgbit/cxgbit_cm.c
index c34a69624762..3db46c879e0a 100644
--- a/drivers/target/iscsi/cxgbit/cxgbit_cm.c
+++ b/drivers/target/iscsi/cxgbit/cxgbit_cm.c
@@ -468,7 +468,7 @@ int cxgbit_setup_np(struct iscsi_np *np, struct sockaddr_storage *ksockaddr)
 }
 
 static void
-cxgbit_set_conn_info(struct iscsi_np *np, struct iscsi_conn *conn,
+cxgbit_set_conn_info(struct iscsi_np *np, struct iscsit_conn *conn,
 		     struct cxgbit_sock *csk)
 {
 	conn->login_family = np->np_sockaddr.ss_family;
@@ -476,7 +476,7 @@ cxgbit_set_conn_info(struct iscsi_np *np, struct iscsi_conn *conn,
 	conn->local_sockaddr = csk->com.local_addr;
 }
 
-int cxgbit_accept_np(struct iscsi_np *np, struct iscsi_conn *conn)
+int cxgbit_accept_np(struct iscsi_np *np, struct iscsit_conn *conn)
 {
 	struct cxgbit_np *cnp = np->np_context;
 	struct cxgbit_sock *csk;
@@ -720,7 +720,7 @@ void cxgbit_abort_conn(struct cxgbit_sock *csk)
 
 static void __cxgbit_free_conn(struct cxgbit_sock *csk)
 {
-	struct iscsi_conn *conn = csk->conn;
+	struct iscsit_conn *conn = csk->conn;
 	bool release = false;
 
 	pr_debug("%s: state %d\n",
@@ -754,7 +754,7 @@ static void __cxgbit_free_conn(struct cxgbit_sock *csk)
 		cxgbit_put_csk(csk);
 }
 
-void cxgbit_free_conn(struct iscsi_conn *conn)
+void cxgbit_free_conn(struct iscsit_conn *conn)
 {
 	__cxgbit_free_conn(conn->context);
 }
* Unmerged path drivers/target/iscsi/cxgbit/cxgbit_ddp.c
diff --git a/drivers/target/iscsi/cxgbit/cxgbit_main.c b/drivers/target/iscsi/cxgbit/cxgbit_main.c
index 1c7c0926350d..5b9c931c4d61 100644
--- a/drivers/target/iscsi/cxgbit/cxgbit_main.c
+++ b/drivers/target/iscsi/cxgbit/cxgbit_main.c
@@ -660,7 +660,7 @@ cxgbit_dcbevent_notify(struct notifier_block *nb, unsigned long action,
 }
 #endif
 
-static enum target_prot_op cxgbit_get_sup_prot_ops(struct iscsi_conn *conn)
+static enum target_prot_op cxgbit_get_sup_prot_ops(struct iscsit_conn *conn)
 {
 	return TARGET_PROT_NORMAL;
 }
* Unmerged path drivers/target/iscsi/cxgbit/cxgbit_target.c
* Unmerged path drivers/target/iscsi/iscsi_target.c
* Unmerged path drivers/target/iscsi/iscsi_target.h
diff --git a/drivers/target/iscsi/iscsi_target_auth.c b/drivers/target/iscsi/iscsi_target_auth.c
index 9b2fc9a02248..a703b22e9375 100644
--- a/drivers/target/iscsi/iscsi_target_auth.c
+++ b/drivers/target/iscsi/iscsi_target_auth.c
@@ -43,7 +43,7 @@ static char *chap_get_digest_name(const int digest_type)
 }
 
 static int chap_gen_challenge(
-	struct iscsi_conn *conn,
+	struct iscsit_conn *conn,
 	int caller,
 	char *c_str,
 	unsigned int *c_len)
@@ -136,14 +136,14 @@ static int chap_check_algorithm(const char *a_str)
 	return r;
 }
 
-static void chap_close(struct iscsi_conn *conn)
+static void chap_close(struct iscsit_conn *conn)
 {
 	kfree(conn->auth_protocol);
 	conn->auth_protocol = NULL;
 }
 
 static struct iscsi_chap *chap_server_open(
-	struct iscsi_conn *conn,
+	struct iscsit_conn *conn,
 	struct iscsi_node_auth *auth,
 	const char *a_str,
 	char *aic_str,
@@ -214,7 +214,7 @@ static struct iscsi_chap *chap_server_open(
 }
 
 static int chap_server_compute_hash(
-	struct iscsi_conn *conn,
+	struct iscsit_conn *conn,
 	struct iscsi_node_auth *auth,
 	char *nr_in_ptr,
 	char *nr_out_ptr,
@@ -506,7 +506,7 @@ static int chap_server_compute_hash(
 }
 
 u32 chap_main_loop(
-	struct iscsi_conn *conn,
+	struct iscsit_conn *conn,
 	struct iscsi_node_auth *auth,
 	char *in_text,
 	char *out_text,
diff --git a/drivers/target/iscsi/iscsi_target_auth.h b/drivers/target/iscsi/iscsi_target_auth.h
index fc75c1c20e23..ceb9b7754770 100644
--- a/drivers/target/iscsi/iscsi_target_auth.h
+++ b/drivers/target/iscsi/iscsi_target_auth.h
@@ -27,9 +27,9 @@
 #define CHAP_STAGE_SERVER_NR	5
 
 struct iscsi_node_auth;
-struct iscsi_conn;
+struct iscsit_conn;
 
-extern u32 chap_main_loop(struct iscsi_conn *, struct iscsi_node_auth *, char *, char *,
+extern u32 chap_main_loop(struct iscsit_conn *, struct iscsi_node_auth *, char *, char *,
 				int *, int *);
 
 struct iscsi_chap {
* Unmerged path drivers/target/iscsi/iscsi_target_configfs.c
diff --git a/drivers/target/iscsi/iscsi_target_datain_values.c b/drivers/target/iscsi/iscsi_target_datain_values.c
index 173ddd93c757..b1745ea3c2fc 100644
--- a/drivers/target/iscsi/iscsi_target_datain_values.c
+++ b/drivers/target/iscsi/iscsi_target_datain_values.c
@@ -88,7 +88,7 @@ static struct iscsi_datain_req *iscsit_set_datain_values_yes_and_yes(
 	struct iscsi_datain *datain)
 {
 	u32 next_burst_len, read_data_done, read_data_left;
-	struct iscsi_conn *conn = cmd->conn;
+	struct iscsit_conn *conn = cmd->conn;
 	struct iscsi_datain_req *dr;
 
 	dr = iscsit_get_datain_req(cmd);
@@ -186,7 +186,7 @@ static struct iscsi_datain_req *iscsit_set_datain_values_no_and_yes(
 	struct iscsi_datain *datain)
 {
 	u32 offset, read_data_done, read_data_left, seq_send_order;
-	struct iscsi_conn *conn = cmd->conn;
+	struct iscsit_conn *conn = cmd->conn;
 	struct iscsi_datain_req *dr;
 	struct iscsi_seq *seq;
 
@@ -307,7 +307,7 @@ static struct iscsi_datain_req *iscsit_set_datain_values_yes_and_no(
 	struct iscsi_datain *datain)
 {
 	u32 next_burst_len, read_data_done, read_data_left;
-	struct iscsi_conn *conn = cmd->conn;
+	struct iscsit_conn *conn = cmd->conn;
 	struct iscsi_datain_req *dr;
 	struct iscsi_pdu *pdu;
 
@@ -406,7 +406,7 @@ static struct iscsi_datain_req *iscsit_set_datain_values_no_and_no(
 	struct iscsi_datain *datain)
 {
 	u32 read_data_done, read_data_left, seq_send_order;
-	struct iscsi_conn *conn = cmd->conn;
+	struct iscsit_conn *conn = cmd->conn;
 	struct iscsi_datain_req *dr;
 	struct iscsi_pdu *pdu;
 	struct iscsi_seq *seq = NULL;
@@ -507,7 +507,7 @@ struct iscsi_datain_req *iscsit_get_datain_values(
 	struct iscsi_cmd *cmd,
 	struct iscsi_datain *datain)
 {
-	struct iscsi_conn *conn = cmd->conn;
+	struct iscsit_conn *conn = cmd->conn;
 
 	if (conn->sess->sess_ops->DataSequenceInOrder &&
 	    conn->sess->sess_ops->DataPDUInOrder)
diff --git a/drivers/target/iscsi/iscsi_target_erl0.c b/drivers/target/iscsi/iscsi_target_erl0.c
index b3290da64177..5e3a46546da5 100644
--- a/drivers/target/iscsi/iscsi_target_erl0.c
+++ b/drivers/target/iscsi/iscsi_target_erl0.c
@@ -39,7 +39,7 @@
 void iscsit_set_dataout_sequence_values(
 	struct iscsi_cmd *cmd)
 {
-	struct iscsi_conn *conn = cmd->conn;
+	struct iscsit_conn *conn = cmd->conn;
 	/*
 	 * Still set seq_start_offset and seq_end_offset for Unsolicited
 	 * DataOUT, even if DataSequenceInOrder=No.
@@ -74,7 +74,7 @@ static int iscsit_dataout_within_command_recovery_check(
 	struct iscsi_cmd *cmd,
 	unsigned char *buf)
 {
-	struct iscsi_conn *conn = cmd->conn;
+	struct iscsit_conn *conn = cmd->conn;
 	struct iscsi_data *hdr = (struct iscsi_data *) buf;
 	u32 payload_length = ntoh24(hdr->dlength);
 
@@ -141,7 +141,7 @@ static int iscsit_dataout_check_unsolicited_sequence(
 	unsigned char *buf)
 {
 	u32 first_burst_len;
-	struct iscsi_conn *conn = cmd->conn;
+	struct iscsit_conn *conn = cmd->conn;
 	struct iscsi_data *hdr = (struct iscsi_data *) buf;
 	u32 payload_length = ntoh24(hdr->dlength);
 
@@ -216,7 +216,7 @@ static int iscsit_dataout_check_sequence(
 	unsigned char *buf)
 {
 	u32 next_burst_len;
-	struct iscsi_conn *conn = cmd->conn;
+	struct iscsit_conn *conn = cmd->conn;
 	struct iscsi_seq *seq = NULL;
 	struct iscsi_data *hdr = (struct iscsi_data *) buf;
 	u32 payload_length = ntoh24(hdr->dlength);
@@ -345,7 +345,7 @@ static int iscsit_dataout_check_datasn(
 	unsigned char *buf)
 {
 	u32 data_sn = 0;
-	struct iscsi_conn *conn = cmd->conn;
+	struct iscsit_conn *conn = cmd->conn;
 	struct iscsi_data *hdr = (struct iscsi_data *) buf;
 	u32 payload_length = ntoh24(hdr->dlength);
 
@@ -396,7 +396,7 @@ static int iscsit_dataout_pre_datapduinorder_yes(
 	unsigned char *buf)
 {
 	int dump = 0, recovery = 0;
-	struct iscsi_conn *conn = cmd->conn;
+	struct iscsit_conn *conn = cmd->conn;
 	struct iscsi_data *hdr = (struct iscsi_data *) buf;
 	u32 payload_length = ntoh24(hdr->dlength);
 
@@ -542,7 +542,7 @@ static int iscsit_dataout_post_crc_passed(
 	unsigned char *buf)
 {
 	int ret, send_r2t = 0;
-	struct iscsi_conn *conn = cmd->conn;
+	struct iscsit_conn *conn = cmd->conn;
 	struct iscsi_seq *seq = NULL;
 	struct iscsi_data *hdr = (struct iscsi_data *) buf;
 	u32 payload_length = ntoh24(hdr->dlength);
@@ -652,7 +652,7 @@ static int iscsit_dataout_post_crc_failed(
 	struct iscsi_cmd *cmd,
 	unsigned char *buf)
 {
-	struct iscsi_conn *conn = cmd->conn;
+	struct iscsit_conn *conn = cmd->conn;
 	struct iscsi_pdu *pdu;
 	struct iscsi_data *hdr = (struct iscsi_data *) buf;
 	u32 payload_length = ntoh24(hdr->dlength);
@@ -691,7 +691,7 @@ int iscsit_check_pre_dataout(
 	unsigned char *buf)
 {
 	int ret;
-	struct iscsi_conn *conn = cmd->conn;
+	struct iscsit_conn *conn = cmd->conn;
 
 	ret = iscsit_dataout_within_command_recovery_check(cmd, buf);
 	if ((ret == DATAOUT_WITHIN_COMMAND_RECOVERY) ||
@@ -729,7 +729,7 @@ int iscsit_check_post_dataout(
 	unsigned char *buf,
 	u8 data_crc_failed)
 {
-	struct iscsi_conn *conn = cmd->conn;
+	struct iscsit_conn *conn = cmd->conn;
 
 	cmd->dataout_timeout_retries = 0;
 
@@ -827,7 +827,7 @@ int iscsit_stop_time2retain_timer(struct iscsi_session *sess)
 	return 0;
 }
 
-void iscsit_connection_reinstatement_rcfr(struct iscsi_conn *conn)
+void iscsit_connection_reinstatement_rcfr(struct iscsit_conn *conn)
 {
 	spin_lock_bh(&conn->state_lock);
 	if (atomic_read(&conn->connection_exit)) {
@@ -851,7 +851,7 @@ void iscsit_connection_reinstatement_rcfr(struct iscsi_conn *conn)
 	complete(&conn->conn_post_wait_comp);
 }
 
-void iscsit_cause_connection_reinstatement(struct iscsi_conn *conn, int sleep)
+void iscsit_cause_connection_reinstatement(struct iscsit_conn *conn, int sleep)
 {
 	spin_lock_bh(&conn->state_lock);
 	if (atomic_read(&conn->connection_exit)) {
@@ -896,7 +896,7 @@ void iscsit_fall_back_to_erl0(struct iscsi_session *sess)
 	atomic_set(&sess->session_fall_back_to_erl0, 1);
 }
 
-static void iscsit_handle_connection_cleanup(struct iscsi_conn *conn)
+static void iscsit_handle_connection_cleanup(struct iscsit_conn *conn)
 {
 	struct iscsi_session *sess = conn->sess;
 
@@ -912,7 +912,7 @@ static void iscsit_handle_connection_cleanup(struct iscsi_conn *conn)
 	}
 }
 
-void iscsit_take_action_for_connection_exit(struct iscsi_conn *conn, bool *conn_freed)
+void iscsit_take_action_for_connection_exit(struct iscsit_conn *conn, bool *conn_freed)
 {
 	*conn_freed = false;
 
* Unmerged path drivers/target/iscsi/iscsi_target_erl0.h
* Unmerged path drivers/target/iscsi/iscsi_target_erl1.c
* Unmerged path drivers/target/iscsi/iscsi_target_erl1.h
diff --git a/drivers/target/iscsi/iscsi_target_erl2.c b/drivers/target/iscsi/iscsi_target_erl2.c
index b08b620b1bf0..0916d09e876a 100644
--- a/drivers/target/iscsi/iscsi_target_erl2.c
+++ b/drivers/target/iscsi/iscsi_target_erl2.c
@@ -38,7 +38,7 @@ void iscsit_create_conn_recovery_datain_values(
 	__be32 exp_data_sn)
 {
 	u32 data_sn = 0;
-	struct iscsi_conn *conn = cmd->conn;
+	struct iscsit_conn *conn = cmd->conn;
 
 	cmd->next_burst_len = 0;
 	cmd->read_data_done = 0;
@@ -65,7 +65,7 @@ void iscsit_create_conn_recovery_dataout_values(
 	struct iscsi_cmd *cmd)
 {
 	u32 write_data_done = 0;
-	struct iscsi_conn *conn = cmd->conn;
+	struct iscsit_conn *conn = cmd->conn;
 
 	cmd->data_sn = 0;
 	cmd->next_burst_len = 0;
@@ -271,7 +271,7 @@ void iscsit_discard_cr_cmds_by_expstatsn(
 	}
 }
 
-int iscsit_discard_unacknowledged_ooo_cmdsns_for_conn(struct iscsi_conn *conn)
+int iscsit_discard_unacknowledged_ooo_cmdsns_for_conn(struct iscsit_conn *conn)
 {
 	u32 dropped_count = 0;
 	struct iscsi_cmd *cmd, *cmd_tmp;
@@ -312,7 +312,7 @@ int iscsit_discard_unacknowledged_ooo_cmdsns_for_conn(struct iscsi_conn *conn)
 	return 0;
 }
 
-int iscsit_prepare_cmds_for_reallegiance(struct iscsi_conn *conn)
+int iscsit_prepare_cmds_for_reallegiance(struct iscsit_conn *conn)
 {
 	u32 cmd_count = 0;
 	struct iscsi_cmd *cmd, *cmd_tmp;
@@ -426,7 +426,7 @@ int iscsit_prepare_cmds_for_reallegiance(struct iscsi_conn *conn)
 	return 0;
 }
 
-int iscsit_connection_recovery_transport_reset(struct iscsi_conn *conn)
+int iscsit_connection_recovery_transport_reset(struct iscsit_conn *conn)
 {
 	atomic_set(&conn->connection_recovery, 1);
 
* Unmerged path drivers/target/iscsi/iscsi_target_erl2.h
diff --git a/drivers/target/iscsi/iscsi_target_login.c b/drivers/target/iscsi/iscsi_target_login.c
index 712aa79e4a15..af732607eea0 100644
--- a/drivers/target/iscsi/iscsi_target_login.c
+++ b/drivers/target/iscsi/iscsi_target_login.c
@@ -43,7 +43,7 @@
 
 #include <target/iscsi/iscsi_transport.h>
 
-static struct iscsi_login *iscsi_login_init_conn(struct iscsi_conn *conn)
+static struct iscsi_login *iscsi_login_init_conn(struct iscsit_conn *conn)
 {
 	struct iscsi_login *login;
 
@@ -81,9 +81,9 @@ static struct iscsi_login *iscsi_login_init_conn(struct iscsi_conn *conn)
 
 /*
  * Used by iscsi_target_nego.c:iscsi_target_locate_portal() to setup
- * per struct iscsi_conn libcrypto contexts for crc32c and crc32-intel
+ * per struct iscsit_conn libcrypto contexts for crc32c and crc32-intel
  */
-int iscsi_login_setup_crypto(struct iscsi_conn *conn)
+int iscsi_login_setup_crypto(struct iscsit_conn *conn)
 {
 	struct crypto_ahash *tfm;
 
@@ -120,7 +120,7 @@ int iscsi_login_setup_crypto(struct iscsi_conn *conn)
 }
 
 static int iscsi_login_check_initiator_version(
-	struct iscsi_conn *conn,
+	struct iscsit_conn *conn,
 	u8 version_max,
 	u8 version_min)
 {
@@ -136,7 +136,7 @@ static int iscsi_login_check_initiator_version(
 	return 0;
 }
 
-int iscsi_check_for_session_reinstatement(struct iscsi_conn *conn)
+int iscsi_check_for_session_reinstatement(struct iscsit_conn *conn)
 {
 	int sessiontype;
 	struct iscsi_param *initiatorname_param = NULL, *sessiontype_param = NULL;
@@ -213,7 +213,7 @@ int iscsi_check_for_session_reinstatement(struct iscsi_conn *conn)
 
 static int iscsi_login_set_conn_values(
 	struct iscsi_session *sess,
-	struct iscsi_conn *conn,
+	struct iscsit_conn *conn,
 	__be16 cid)
 {
 	int ret;
@@ -234,7 +234,7 @@ static int iscsi_login_set_conn_values(
 }
 
 __printf(2, 3) int iscsi_change_param_sprintf(
-	struct iscsi_conn *conn,
+	struct iscsit_conn *conn,
 	const char *fmt, ...)
 {
 	va_list args;
@@ -261,7 +261,7 @@ EXPORT_SYMBOL(iscsi_change_param_sprintf);
  *	or session reinstatement.
  */
 static int iscsi_login_zero_tsih_s1(
-	struct iscsi_conn *conn,
+	struct iscsit_conn *conn,
 	unsigned char *buf)
 {
 	struct iscsi_session *sess = NULL;
@@ -346,7 +346,7 @@ static int iscsi_login_zero_tsih_s1(
 }
 
 static int iscsi_login_zero_tsih_s2(
-	struct iscsi_conn *conn)
+	struct iscsit_conn *conn)
 {
 	struct iscsi_node_attrib *na;
 	struct iscsi_session *sess = conn->sess;
@@ -467,7 +467,7 @@ static int iscsi_login_zero_tsih_s2(
 }
 
 static int iscsi_login_non_zero_tsih_s1(
-	struct iscsi_conn *conn,
+	struct iscsit_conn *conn,
 	unsigned char *buf)
 {
 	struct iscsi_login_req *pdu = (struct iscsi_login_req *)buf;
@@ -479,7 +479,7 @@ static int iscsi_login_non_zero_tsih_s1(
  *	Add a new connection to an existing session.
  */
 static int iscsi_login_non_zero_tsih_s2(
-	struct iscsi_conn *conn,
+	struct iscsit_conn *conn,
 	unsigned char *buf)
 {
 	struct iscsi_portal_group *tpg = conn->tpg;
@@ -555,11 +555,11 @@ static int iscsi_login_non_zero_tsih_s2(
 }
 
 int iscsi_login_post_auth_non_zero_tsih(
-	struct iscsi_conn *conn,
+	struct iscsit_conn *conn,
 	u16 cid,
 	u32 exp_statsn)
 {
-	struct iscsi_conn *conn_ptr = NULL;
+	struct iscsit_conn *conn_ptr = NULL;
 	struct iscsi_conn_recovery *cr = NULL;
 	struct iscsi_session *sess = conn->sess;
 
@@ -621,7 +621,7 @@ int iscsi_login_post_auth_non_zero_tsih(
 	return 0;
 }
 
-static void iscsi_post_login_start_timers(struct iscsi_conn *conn)
+static void iscsi_post_login_start_timers(struct iscsit_conn *conn)
 {
 	struct iscsi_session *sess = conn->sess;
 	/*
@@ -634,7 +634,7 @@ static void iscsi_post_login_start_timers(struct iscsi_conn *conn)
 		iscsit_start_nopin_timer(conn);
 }
 
-int iscsit_start_kthreads(struct iscsi_conn *conn)
+int iscsit_start_kthreads(struct iscsit_conn *conn)
 {
 	int ret = 0;
 
@@ -682,7 +682,7 @@ int iscsit_start_kthreads(struct iscsi_conn *conn)
 
 void iscsi_post_login_handler(
 	struct iscsi_np *np,
-	struct iscsi_conn *conn,
+	struct iscsit_conn *conn,
 	u8 zero_tsih)
 {
 	int stop_timer = 0;
@@ -739,7 +739,7 @@ void iscsi_post_login_handler(
 		conn->conn_tx_reset_cpumask = 1;
 		/*
 		 * Wakeup the sleeping iscsi_target_rx_thread() now that
-		 * iscsi_conn is in TARG_CONN_STATE_LOGGED_IN state.
+		 * iscsit_conn is in TARG_CONN_STATE_LOGGED_IN state.
 		 */
 		complete(&conn->rx_login_comp);
 		iscsit_dec_conn_usage_count(conn);
@@ -801,7 +801,7 @@ void iscsi_post_login_handler(
 	conn->conn_tx_reset_cpumask = 1;
 	/*
 	 * Wakeup the sleeping iscsi_target_rx_thread() now that
-	 * iscsi_conn is in TARG_CONN_STATE_LOGGED_IN state.
+	 * iscsit_conn is in TARG_CONN_STATE_LOGGED_IN state.
 	 */
 	complete(&conn->rx_login_comp);
 	iscsit_dec_conn_usage_count(conn);
@@ -961,7 +961,7 @@ int iscsi_target_setup_login_socket(
 	return 0;
 }
 
-int iscsit_accept_np(struct iscsi_np *np, struct iscsi_conn *conn)
+int iscsit_accept_np(struct iscsi_np *np, struct iscsit_conn *conn)
 {
 	struct socket *new_sock, *sock = np->np_socket;
 	struct dst_entry *dst;
@@ -1028,7 +1028,7 @@ int iscsit_accept_np(struct iscsi_np *np, struct iscsi_conn *conn)
 	return 0;
 }
 
-int iscsit_get_login_rx(struct iscsi_conn *conn, struct iscsi_login *login)
+int iscsit_get_login_rx(struct iscsit_conn *conn, struct iscsi_login *login)
 {
 	struct iscsi_login_req *login_req;
 	u32 padding = 0, payload_length;
@@ -1073,7 +1073,7 @@ int iscsit_get_login_rx(struct iscsi_conn *conn, struct iscsi_login *login)
 	return 0;
 }
 
-int iscsit_put_login_tx(struct iscsi_conn *conn, struct iscsi_login *login,
+int iscsit_put_login_tx(struct iscsit_conn *conn, struct iscsi_login *login,
 			u32 length)
 {
 	if (iscsi_login_tx_data(conn, login->rsp, login->rsp_buf, length) < 0)
@@ -1083,7 +1083,7 @@ int iscsit_put_login_tx(struct iscsi_conn *conn, struct iscsi_login *login,
 }
 
 static int
-iscsit_conn_set_transport(struct iscsi_conn *conn, struct iscsit_transport *t)
+iscsit_conn_set_transport(struct iscsit_conn *conn, struct iscsit_transport *t)
 {
 	int rc;
 
@@ -1102,11 +1102,11 @@ iscsit_conn_set_transport(struct iscsi_conn *conn, struct iscsit_transport *t)
 	return 0;
 }
 
-static struct iscsi_conn *iscsit_alloc_conn(struct iscsi_np *np)
+static struct iscsit_conn *iscsit_alloc_conn(struct iscsi_np *np)
 {
-	struct iscsi_conn *conn;
+	struct iscsit_conn *conn;
 
-	conn = kzalloc(sizeof(struct iscsi_conn), GFP_KERNEL);
+	conn = kzalloc(sizeof(struct iscsit_conn), GFP_KERNEL);
 	if (!conn) {
 		pr_err("Could not allocate memory for new connection\n");
 		return NULL;
@@ -1163,7 +1163,7 @@ static struct iscsi_conn *iscsit_alloc_conn(struct iscsi_np *np)
 	return NULL;
 }
 
-void iscsit_free_conn(struct iscsi_conn *conn)
+void iscsit_free_conn(struct iscsit_conn *conn)
 {
 	free_cpumask_var(conn->conn_cpumask);
 	kfree(conn->conn_ops);
@@ -1171,7 +1171,7 @@ void iscsit_free_conn(struct iscsi_conn *conn)
 	kfree(conn);
 }
 
-void iscsi_target_login_sess_out(struct iscsi_conn *conn,
+void iscsi_target_login_sess_out(struct iscsit_conn *conn,
 				 bool zero_tsih, bool new_sess)
 {
 	if (!new_sess)
@@ -1243,7 +1243,7 @@ static int __iscsi_target_login_thread(struct iscsi_np *np)
 {
 	u8 *buffer, zero_tsih = 0;
 	int ret = 0, rc;
-	struct iscsi_conn *conn = NULL;
+	struct iscsit_conn *conn = NULL;
 	struct iscsi_login *login;
 	struct iscsi_portal_group *tpg = NULL;
 	struct iscsi_login_req *pdu;
@@ -1386,7 +1386,7 @@ static int __iscsi_target_login_thread(struct iscsi_np *np)
 
 	tpg = conn->tpg;
 	if (!tpg) {
-		pr_err("Unable to locate struct iscsi_conn->tpg\n");
+		pr_err("Unable to locate struct iscsit_conn->tpg\n");
 		goto new_sess_out;
 	}
 
diff --git a/drivers/target/iscsi/iscsi_target_login.h b/drivers/target/iscsi/iscsi_target_login.h
index fc95e6150253..3ca2f232b387 100644
--- a/drivers/target/iscsi/iscsi_target_login.h
+++ b/drivers/target/iscsi/iscsi_target_login.h
@@ -4,25 +4,25 @@
 
 #include <linux/types.h>
 
-struct iscsi_conn;
+struct iscsit_conn;
 struct iscsi_login;
 struct iscsi_np;
 struct sockaddr_storage;
 
-extern int iscsi_login_setup_crypto(struct iscsi_conn *);
-extern int iscsi_check_for_session_reinstatement(struct iscsi_conn *);
-extern int iscsi_login_post_auth_non_zero_tsih(struct iscsi_conn *, u16, u32);
+extern int iscsi_login_setup_crypto(struct iscsit_conn *);
+extern int iscsi_check_for_session_reinstatement(struct iscsit_conn *);
+extern int iscsi_login_post_auth_non_zero_tsih(struct iscsit_conn *, u16, u32);
 extern int iscsit_setup_np(struct iscsi_np *,
 				struct sockaddr_storage *);
 extern int iscsi_target_setup_login_socket(struct iscsi_np *,
 				struct sockaddr_storage *);
-extern int iscsit_accept_np(struct iscsi_np *, struct iscsi_conn *);
-extern int iscsit_get_login_rx(struct iscsi_conn *, struct iscsi_login *);
-extern int iscsit_put_login_tx(struct iscsi_conn *, struct iscsi_login *, u32);
-extern void iscsit_free_conn(struct iscsi_conn *);
-extern int iscsit_start_kthreads(struct iscsi_conn *);
-extern void iscsi_post_login_handler(struct iscsi_np *, struct iscsi_conn *, u8);
-extern void iscsi_target_login_sess_out(struct iscsi_conn *, bool, bool);
+extern int iscsit_accept_np(struct iscsi_np *, struct iscsit_conn *);
+extern int iscsit_get_login_rx(struct iscsit_conn *, struct iscsi_login *);
+extern int iscsit_put_login_tx(struct iscsit_conn *, struct iscsi_login *, u32);
+extern void iscsit_free_conn(struct iscsit_conn *);
+extern int iscsit_start_kthreads(struct iscsit_conn *);
+extern void iscsi_post_login_handler(struct iscsi_np *, struct iscsit_conn *, u8);
+extern void iscsi_target_login_sess_out(struct iscsit_conn *, bool, bool);
 extern int iscsi_target_login_thread(void *);
 extern void iscsi_handle_login_thread_timeout(struct timer_list *t);
 
* Unmerged path drivers/target/iscsi/iscsi_target_nego.c
diff --git a/drivers/target/iscsi/iscsi_target_nego.h b/drivers/target/iscsi/iscsi_target_nego.h
index 835e1b769b3f..ed30b9ee75e6 100644
--- a/drivers/target/iscsi/iscsi_target_nego.h
+++ b/drivers/target/iscsi/iscsi_target_nego.h
@@ -5,21 +5,21 @@
 #define DECIMAL         0
 #define HEX             1
 
-struct iscsi_conn;
+struct iscsit_conn;
 struct iscsi_login;
 struct iscsi_np;
 
 extern void convert_null_to_semi(char *, int);
 extern int extract_param(const char *, const char *, unsigned int, char *,
 		unsigned char *);
-extern int iscsi_target_check_login_request(struct iscsi_conn *,
+extern int iscsi_target_check_login_request(struct iscsit_conn *,
 		struct iscsi_login *);
-extern int iscsi_target_get_initial_payload(struct iscsi_conn *,
+extern int iscsi_target_get_initial_payload(struct iscsit_conn *,
 		struct iscsi_login *);
-extern int iscsi_target_locate_portal(struct iscsi_np *, struct iscsi_conn *,
+extern int iscsi_target_locate_portal(struct iscsi_np *, struct iscsit_conn *,
 		struct iscsi_login *);
 extern int iscsi_target_start_negotiation(
-		struct iscsi_login *, struct iscsi_conn *);
-extern void iscsi_target_nego_release(struct iscsi_conn *);
+		struct iscsi_login *, struct iscsit_conn *);
+extern void iscsi_target_nego_release(struct iscsit_conn *);
 
 #endif /* ISCSI_TARGET_NEGO_H */
diff --git a/drivers/target/iscsi/iscsi_target_nodeattrib.c b/drivers/target/iscsi/iscsi_target_nodeattrib.c
index 208cca8a363c..656607cdd07d 100644
--- a/drivers/target/iscsi/iscsi_target_nodeattrib.c
+++ b/drivers/target/iscsi/iscsi_target_nodeattrib.c
@@ -105,7 +105,7 @@ int iscsit_na_nopin_timeout(
 {
 	struct iscsi_node_attrib *a = &acl->node_attrib;
 	struct iscsi_session *sess;
-	struct iscsi_conn *conn;
+	struct iscsit_conn *conn;
 	struct se_node_acl *se_nacl = &a->nacl->se_node_acl;
 	struct se_session *se_sess;
 	u32 orig_nopin_timeout = a->nopin_timeout;
diff --git a/drivers/target/iscsi/iscsi_target_parameters.c b/drivers/target/iscsi/iscsi_target_parameters.c
index 4d504851a136..331e28aab10d 100644
--- a/drivers/target/iscsi/iscsi_target_parameters.c
+++ b/drivers/target/iscsi/iscsi_target_parameters.c
@@ -23,7 +23,7 @@
 #include "iscsi_target_parameters.h"
 
 int iscsi_login_rx_data(
-	struct iscsi_conn *conn,
+	struct iscsit_conn *conn,
 	char *buf,
 	int length)
 {
@@ -45,7 +45,7 @@ int iscsi_login_rx_data(
 }
 
 int iscsi_login_tx_data(
-	struct iscsi_conn *conn,
+	struct iscsit_conn *conn,
 	char *pdu_buf,
 	char *text_buf,
 	int text_length)
@@ -963,7 +963,7 @@ static char *iscsi_check_valuelist_for_support(
 }
 
 static int iscsi_check_acceptor_state(struct iscsi_param *param, char *value,
-				struct iscsi_conn *conn)
+				struct iscsit_conn *conn)
 {
 	u8 acceptor_boolean_value = 0, proposer_boolean_value = 0;
 	char *negotiated_value = NULL;
@@ -1360,7 +1360,7 @@ int iscsi_decode_text_input(
 	u8 sender,
 	char *textbuf,
 	u32 length,
-	struct iscsi_conn *conn)
+	struct iscsit_conn *conn)
 {
 	struct iscsi_param_list *param_list = conn->param_list;
 	char *tmpbuf, *start = NULL, *end = NULL;
diff --git a/drivers/target/iscsi/iscsi_target_parameters.h b/drivers/target/iscsi/iscsi_target_parameters.h
index 240c4c4344f6..00fbbebb8c75 100644
--- a/drivers/target/iscsi/iscsi_target_parameters.h
+++ b/drivers/target/iscsi/iscsi_target_parameters.h
@@ -25,13 +25,13 @@ struct iscsi_param {
 	struct list_head p_list;
 } ____cacheline_aligned;
 
-struct iscsi_conn;
+struct iscsit_conn;
 struct iscsi_conn_ops;
 struct iscsi_param_list;
 struct iscsi_sess_ops;
 
-extern int iscsi_login_rx_data(struct iscsi_conn *, char *, int);
-extern int iscsi_login_tx_data(struct iscsi_conn *, char *, char *, int);
+extern int iscsi_login_rx_data(struct iscsit_conn *, char *, int);
+extern int iscsi_login_tx_data(struct iscsit_conn *, char *, char *, int);
 extern void iscsi_dump_conn_ops(struct iscsi_conn_ops *);
 extern void iscsi_dump_sess_ops(struct iscsi_sess_ops *);
 extern void iscsi_print_params(struct iscsi_param_list *);
@@ -45,7 +45,7 @@ extern void iscsi_release_param_list(struct iscsi_param_list *);
 extern struct iscsi_param *iscsi_find_param_from_key(char *, struct iscsi_param_list *);
 extern int iscsi_extract_key_value(char *, char **, char **);
 extern int iscsi_update_param_value(struct iscsi_param *, char *);
-extern int iscsi_decode_text_input(u8, u8, char *, u32, struct iscsi_conn *);
+extern int iscsi_decode_text_input(u8, u8, char *, u32, struct iscsit_conn *);
 extern int iscsi_encode_text_output(u8, u8, char *, u32 *,
 			struct iscsi_param_list *, bool);
 extern int iscsi_check_negotiated_keys(struct iscsi_param_list *);
diff --git a/drivers/target/iscsi/iscsi_target_seq_pdu_list.c b/drivers/target/iscsi/iscsi_target_seq_pdu_list.c
index f65e5e584212..88f12f9b6b16 100644
--- a/drivers/target/iscsi/iscsi_target_seq_pdu_list.c
+++ b/drivers/target/iscsi/iscsi_target_seq_pdu_list.c
@@ -216,7 +216,7 @@ static void iscsit_determine_counts_for_list(
 	u32 burstlength = 0, offset = 0;
 	u32 unsolicited_data_length = 0;
 	u32 mdsl;
-	struct iscsi_conn *conn = cmd->conn;
+	struct iscsit_conn *conn = cmd->conn;
 
 	if (cmd->se_cmd.data_direction == DMA_TO_DEVICE)
 		mdsl = cmd->conn->conn_ops->MaxXmitDataSegmentLength;
@@ -297,7 +297,7 @@ static int iscsit_do_build_pdu_and_seq_lists(
 	int check_immediate = 0, datapduinorder, datasequenceinorder;
 	u32 burstlength = 0, offset = 0, i = 0, mdsl;
 	u32 pdu_count = 0, seq_no = 0, unsolicited_data_length = 0;
-	struct iscsi_conn *conn = cmd->conn;
+	struct iscsit_conn *conn = cmd->conn;
 	struct iscsi_pdu *pdu = cmd->pdu_list;
 	struct iscsi_seq *seq = cmd->seq_list;
 
@@ -497,7 +497,7 @@ int iscsit_build_pdu_and_seq_lists(
 {
 	struct iscsi_build_list bl;
 	u32 pdu_count = 0, seq_count = 1;
-	struct iscsi_conn *conn = cmd->conn;
+	struct iscsit_conn *conn = cmd->conn;
 	struct iscsi_pdu *pdu = NULL;
 	struct iscsi_seq *seq = NULL;
 
@@ -595,7 +595,7 @@ struct iscsi_pdu *iscsit_get_pdu_holder_for_seq(
 	struct iscsi_seq *seq)
 {
 	u32 i;
-	struct iscsi_conn *conn = cmd->conn;
+	struct iscsit_conn *conn = cmd->conn;
 	struct iscsi_pdu *pdu = NULL;
 
 	if (!cmd->pdu_list) {
* Unmerged path drivers/target/iscsi/iscsi_target_tmr.c
* Unmerged path drivers/target/iscsi/iscsi_target_tmr.h
* Unmerged path drivers/target/iscsi/iscsi_target_util.c
* Unmerged path drivers/target/iscsi/iscsi_target_util.h
* Unmerged path include/target/iscsi/iscsi_target_core.h
* Unmerged path include/target/iscsi/iscsi_transport.h
