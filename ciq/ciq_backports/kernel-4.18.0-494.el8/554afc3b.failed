gcc-plugins/structleak: add makefile var for disabling structleak

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-494.el8
commit-author Brendan Higgins <brendanhiggins@google.com>
commit 554afc3b9797511e3245864e32aebeb6abbab1e3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-494.el8/554afc3b.failed

KUnit and structleak don't play nice, so add a makefile variable for
enabling structleak when it complains.

Co-developed-by: Kees Cook <keescook@chromium.org>
	Signed-off-by: Kees Cook <keescook@chromium.org>
	Signed-off-by: Brendan Higgins <brendanhiggins@google.com>
	Reviewed-by: David Gow <davidgow@google.com>
	Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>
(cherry picked from commit 554afc3b9797511e3245864e32aebeb6abbab1e3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	scripts/Makefile.gcc-plugins
diff --cc scripts/Makefile.gcc-plugins
index c961b9a65d11,4aad28480035..000000000000
--- a/scripts/Makefile.gcc-plugins
+++ b/scripts/Makefile.gcc-plugins
@@@ -2,37 -2,64 +2,52 @@@
  gcc-plugin-$(CONFIG_GCC_PLUGIN_CYC_COMPLEXITY)	+= cyc_complexity_plugin.so
  
  gcc-plugin-$(CONFIG_GCC_PLUGIN_LATENT_ENTROPY)	+= latent_entropy_plugin.so
 -gcc-plugin-cflags-$(CONFIG_GCC_PLUGIN_LATENT_ENTROPY)		\
 -		+= -DLATENT_ENTROPY_PLUGIN
 +gcc-plugin-cflags-$(CONFIG_GCC_PLUGIN_LATENT_ENTROPY)	+= -DLATENT_ENTROPY_PLUGIN
  ifdef CONFIG_GCC_PLUGIN_LATENT_ENTROPY
 -    DISABLE_LATENT_ENTROPY_PLUGIN += -fplugin-arg-latent_entropy_plugin-disable
 +    DISABLE_LATENT_ENTROPY_PLUGIN			+= -fplugin-arg-latent_entropy_plugin-disable
  endif
 -export DISABLE_LATENT_ENTROPY_PLUGIN
  
  gcc-plugin-$(CONFIG_GCC_PLUGIN_SANCOV)		+= sancov_plugin.so
 -
  gcc-plugin-$(CONFIG_GCC_PLUGIN_STRUCTLEAK)	+= structleak_plugin.so
++<<<<<<< HEAD
 +gcc-plugin-cflags-$(CONFIG_GCC_PLUGIN_STRUCTLEAK_VERBOSE)	+= -fplugin-arg-structleak_plugin-verbose
 +gcc-plugin-cflags-$(CONFIG_GCC_PLUGIN_STRUCTLEAK_BYREF_ALL)	+= -fplugin-arg-structleak_plugin-byref-all
 +gcc-plugin-cflags-$(CONFIG_GCC_PLUGIN_STRUCTLEAK)	+= -DSTRUCTLEAK_PLUGIN
++=======
+ gcc-plugin-cflags-$(CONFIG_GCC_PLUGIN_STRUCTLEAK_VERBOSE)	\
+ 		+= -fplugin-arg-structleak_plugin-verbose
+ gcc-plugin-cflags-$(CONFIG_GCC_PLUGIN_STRUCTLEAK_BYREF)		\
+ 		+= -fplugin-arg-structleak_plugin-byref
+ gcc-plugin-cflags-$(CONFIG_GCC_PLUGIN_STRUCTLEAK_BYREF_ALL)	\
+ 		+= -fplugin-arg-structleak_plugin-byref-all
+ ifdef CONFIG_GCC_PLUGIN_STRUCTLEAK
+     DISABLE_STRUCTLEAK_PLUGIN += -fplugin-arg-structleak_plugin-disable
+ endif
+ export DISABLE_STRUCTLEAK_PLUGIN
+ gcc-plugin-cflags-$(CONFIG_GCC_PLUGIN_STRUCTLEAK)		\
+ 		+= -DSTRUCTLEAK_PLUGIN
++>>>>>>> 554afc3b9797 (gcc-plugins/structleak: add makefile var for disabling structleak)
  
  gcc-plugin-$(CONFIG_GCC_PLUGIN_RANDSTRUCT)	+= randomize_layout_plugin.so
 -gcc-plugin-cflags-$(CONFIG_GCC_PLUGIN_RANDSTRUCT)		\
 -		+= -DRANDSTRUCT_PLUGIN
 -gcc-plugin-cflags-$(CONFIG_GCC_PLUGIN_RANDSTRUCT_PERFORMANCE)	\
 -		+= -fplugin-arg-randomize_layout_plugin-performance-mode
 +gcc-plugin-cflags-$(CONFIG_GCC_PLUGIN_RANDSTRUCT)	+= -DRANDSTRUCT_PLUGIN
 +gcc-plugin-cflags-$(CONFIG_GCC_PLUGIN_RANDSTRUCT_PERFORMANCE)	+= -fplugin-arg-randomize_layout_plugin-performance-mode
  
 -gcc-plugin-$(CONFIG_GCC_PLUGIN_STACKLEAK)	+= stackleak_plugin.so
 -gcc-plugin-cflags-$(CONFIG_GCC_PLUGIN_STACKLEAK)		\
 -		+= -DSTACKLEAK_PLUGIN
 -gcc-plugin-cflags-$(CONFIG_GCC_PLUGIN_STACKLEAK)		\
 -		+= -fplugin-arg-stackleak_plugin-track-min-size=$(CONFIG_STACKLEAK_TRACK_MIN_SIZE)
 -gcc-plugin-cflags-$(CONFIG_GCC_PLUGIN_STACKLEAK)		\
 -		+= -fplugin-arg-stackleak_plugin-arch=$(SRCARCH)
 -ifdef CONFIG_GCC_PLUGIN_STACKLEAK
 -    DISABLE_STACKLEAK_PLUGIN += -fplugin-arg-stackleak_plugin-disable
 -endif
 -export DISABLE_STACKLEAK_PLUGIN
 +GCC_PLUGINS_CFLAGS := $(strip $(addprefix -fplugin=$(objtree)/scripts/gcc-plugins/, $(gcc-plugin-y)) $(gcc-plugin-cflags-y))
  
 -gcc-plugin-$(CONFIG_GCC_PLUGIN_ARM_SSP_PER_TASK) += arm_ssp_per_task_plugin.so
 -ifdef CONFIG_GCC_PLUGIN_ARM_SSP_PER_TASK
 -    DISABLE_ARM_SSP_PER_TASK_PLUGIN += -fplugin-arg-arm_ssp_per_task_plugin-disable
 -endif
 -export DISABLE_ARM_SSP_PER_TASK_PLUGIN
 +export GCC_PLUGINS_CFLAGS GCC_PLUGIN GCC_PLUGIN_SUBDIR
 +export DISABLE_LATENT_ENTROPY_PLUGIN
  
 -# All the plugin CFLAGS are collected here in case a build target needs to
 -# filter them out of the KBUILD_CFLAGS.
 -GCC_PLUGINS_CFLAGS := $(strip $(addprefix -fplugin=$(objtree)/scripts/gcc-plugins/, $(gcc-plugin-y)) $(gcc-plugin-cflags-y))
 -# The sancov_plugin.so is included via CFLAGS_KCOV, so it is removed here.
 +# sancov_plugin.so can be only in CFLAGS_KCOV because avoid duplication.
  GCC_PLUGINS_CFLAGS := $(filter-out %/sancov_plugin.so, $(GCC_PLUGINS_CFLAGS))
 -export GCC_PLUGINS_CFLAGS
  
 -# Add the flags to the build!
  KBUILD_CFLAGS += $(GCC_PLUGINS_CFLAGS)
 -
 -# All enabled GCC plugins are collected here for building below.
  GCC_PLUGIN := $(gcc-plugin-y)
 -export GCC_PLUGIN
 +GCC_PLUGIN_SUBDIR := $(gcc-plugin-subdir-y)
 +
 +# Actually do the build, if requested.
 +PHONY += gcc-plugins
 +gcc-plugins: scripts_basic
 +ifdef CONFIG_GCC_PLUGINS
 +	$(Q)$(MAKE) $(build)=scripts/gcc-plugins
 +endif
 +	@:
* Unmerged path scripts/Makefile.gcc-plugins
