Documentation: KUnit: reword description of assertions

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-494.el8
commit-author Daniel Latypov <dlatypov@google.com>
commit ec0a42a17e463ee5b1ebd2d60337e8ae8e5ace2b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-494.el8/ec0a42a1.failed

The existing wording implies that kunit_kmalloc_array() is "the method
under test". We're actually testing the sort() function in that example.
This is because the example was changed in commit 953574390634
("Documentation: KUnit: Rework writing page to focus on writing tests"),
but the wording was not.

Also add a `note` telling people they can use the KUNIT_ASSERT_EQ()
macros from any function. Some users might be coming from a framework
like gUnit where that'll compile but silently do the wrong thing.

	Signed-off-by: Daniel Latypov <dlatypov@google.com>
	Reviewed-by: Sadiya Kazi <sadiyakazi@google.com>
	Reviewed-by: David Gow <davidgow@google.com>
	Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>
(cherry picked from commit ec0a42a17e463ee5b1ebd2d60337e8ae8e5ace2b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	Documentation/dev-tools/kunit/usage.rst
diff --cc Documentation/dev-tools/kunit/usage.rst
index 63c2d2f27789,22416ebb94ab..000000000000
--- a/Documentation/dev-tools/kunit/usage.rst
+++ b/Documentation/dev-tools/kunit/usage.rst
@@@ -148,28 -98,59 +148,70 @@@ For example
  
  .. code-block:: c
  
 -	static void test_sort(struct kunit *test)
 +	static void mock_test_do_expect_default_return(struct kunit *test)
  	{
 -		int *a, i, r = 1;
 -		a = kunit_kmalloc_array(test, TEST_LEN, sizeof(*a), GFP_KERNEL);
 -		KUNIT_ASSERT_NOT_ERR_OR_NULL(test, a);
 -		for (i = 0; i < TEST_LEN; i++) {
 -			r = (r * 725861) % 6599;
 -			a[i] = r;
 -		}
 -		sort(a, TEST_LEN, sizeof(*a), cmpint, NULL);
 -		for (i = 0; i < TEST_LEN-1; i++)
 -			KUNIT_EXPECT_LE(test, a[i], a[i + 1]);
 +		struct mock_test_context *ctx = test->priv;
 +		struct mock *mock = ctx->mock;
 +		int param0 = 5, param1 = -5;
 +		const char *two_param_types[] = {"int", "int"};
 +		const void *two_params[] = {&param0, &param1};
 +		const void *ret;
 +
 +		ret = mock->do_expect(mock,
 +				      "test_printk", test_printk,
 +				      two_param_types, two_params,
 +				      ARRAY_SIZE(two_params));
 +		KUNIT_ASSERT_NOT_ERR_OR_NULL(test, ret);
 +		KUNIT_EXPECT_EQ(test, -4, *((int *) ret));
  	}
  
++<<<<<<< HEAD
 +In this example, the method under test should return a pointer to a value, so
 +if the pointer returned by the method is null or an errno, we don't want to
 +bother continuing the test since the following expectation could crash the test
 +case. `ASSERT_NOT_ERR_OR_NULL(...)` allows us to bail out of the test case if
 +the appropriate conditions have not been satisfied to complete the test.
++=======
+ In this example, we need to be able to allocate an array to test the ``sort()``
+ function. So we use ``KUNIT_ASSERT_NOT_ERR_OR_NULL()`` to abort the test if
+ there's an allocation error.
+ 
+ .. note::
+    In other test frameworks, ``ASSERT`` macros are often implemented by calling
+    ``return`` so they only work from the test function. In KUnit, we stop the
+    current kthread on failure, so you can call them from anywhere.
+ 
+ Customizing error messages
+ --------------------------
+ 
+ Each of the ``KUNIT_EXPECT`` and ``KUNIT_ASSERT`` macros have a ``_MSG``
+ variant.  These take a format string and arguments to provide additional
+ context to the automatically generated error messages.
+ 
+ .. code-block:: c
+ 
+ 	char some_str[41];
+ 	generate_sha1_hex_string(some_str);
+ 
+ 	/* Before. Not easy to tell why the test failed. */
+ 	KUNIT_EXPECT_EQ(test, strlen(some_str), 40);
+ 
+ 	/* After. Now we see the offending string. */
+ 	KUNIT_EXPECT_EQ_MSG(test, strlen(some_str), 40, "some_str='%s'", some_str);
+ 
+ Alternatively, one can take full control over the error message by using
+ ``KUNIT_FAIL()``, e.g.
+ 
+ .. code-block:: c
+ 
+ 	/* Before */
+ 	KUNIT_EXPECT_EQ(test, some_setup_function(), 0);
+ 
+ 	/* After: full control over the failure message. */
+ 	if (some_setup_function())
+ 		KUNIT_FAIL(test, "Failed to setup thing for testing");
+ 
++>>>>>>> ec0a42a17e46 (Documentation: KUnit: reword description of assertions)
  
  Test Suites
  ~~~~~~~~~~~
* Unmerged path Documentation/dev-tools/kunit/usage.rst
