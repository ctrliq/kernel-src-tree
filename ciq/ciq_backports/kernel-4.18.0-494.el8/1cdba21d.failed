kunit: add ability to specify suite-level init and exit functions

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-494.el8
commit-author Daniel Latypov <dlatypov@google.com>
commit 1cdba21db2ca31514c60b9732fc3963ae24c59e0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-494.el8/1cdba21d.failed

KUnit has support for setup/cleanup logic for each test case in a suite.
But it lacks the ability to specify setup/cleanup for the entire suite
itself.

This can be used to do setup that is too expensive or cumbersome to do
for each test.
Or it can be used to do simpler things like log debug information after
the suite completes.
It's a fairly common feature, so the lack of it is noticeable.

Some examples in other frameworks and languages:
* https://docs.python.org/3/library/unittest.html#setupclass-and-teardownclass
* https://google.github.io/googletest/reference/testing.html#Test::SetUpTestSuite

Meta:
This is very similar to this patch here: https://lore.kernel.org/linux-kselftest/20210805043503.20252-3-bvanassche@acm.org/
The changes from that patch:
* pass in `struct kunit *` so users can do stuff like
  `kunit_info(suite, "debug message")`
* makes sure the init failure is bubbled up as a failure
* updates kunit-example-test.c to use a suite init
* Updates kunit/usage.rst to mention the new support
* some minor cosmetic things
  * use `suite_{init,exit}` instead of `{init/exit}_suite`
  * make suite init error message more consistent w/ test init
  * etc.

	Signed-off-by: Daniel Latypov <dlatypov@google.com>
	Reviewed-by: David Gow <davidgow@google.com>
	Reviewed-by: Brendan Higgins <brendanhiggins@google.com>
	Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>
(cherry picked from commit 1cdba21db2ca31514c60b9732fc3963ae24c59e0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	Documentation/dev-tools/kunit/usage.rst
diff --cc Documentation/dev-tools/kunit/usage.rst
index 63c2d2f27789,d62a04255c2e..000000000000
--- a/Documentation/dev-tools/kunit/usage.rst
+++ b/Documentation/dev-tools/kunit/usage.rst
@@@ -174,16 -121,12 +174,25 @@@ the appropriate conditions have not bee
  Test Suites
  ~~~~~~~~~~~
  
++<<<<<<< HEAD
 +Now obviously one unit test isn't very helpful; the power comes from having
 +many test cases covering all of a unit's behaviors. Consequently it is common
 +to have many *similar* tests; in order to reduce duplication in these closely
 +related tests most unit testing frameworks - including KUnit - provide the
 +concept of a *test suite*. A *test suite* is just a collection of test cases
 +for a unit of code with a set up function that gets invoked before every test
 +case and then a tear down function that gets invoked after every test case
 +completes.
 +
 +Example:
++=======
+ We need many test cases covering all the unit's behaviors. It is common to have
+ many similar tests. In order to reduce duplication in these closely related
+ tests, most unit testing frameworks (including KUnit) provide the concept of a
+ *test suite*. A test suite is a collection of test cases for a unit of code
+ with optional setup and teardown functions that run before/after the whole
+ suite and/or every test case. For example:
++>>>>>>> 1cdba21db2ca (kunit: add ability to specify suite-level init and exit functions)
  
  .. code-block:: c
  
@@@ -202,23 -147,49 +213,33 @@@
  	};
  	kunit_test_suite(example_test_suite);
  
++<<<<<<< HEAD
 +In the above example the test suite, ``example_test_suite``, would run the test
 +cases ``example_test_foo``, ``example_test_bar``, and ``example_test_baz``;
 +each would have ``example_test_init`` called immediately before it and would
 +have ``example_test_exit`` called immediately after it.
 +``kunit_test_suite(example_test_suite)`` registers the test suite with the
 +KUnit test framework.
++=======
+ In the above example, the test suite ``example_test_suite`` would first run
+ ``example_suite_init``, then run the test cases ``example_test_foo``,
+ ``example_test_bar``, and ``example_test_baz``. Each would have
+ ``example_test_init`` called immediately before it and ``example_test_exit``
+ called immediately after it. Finally, ``example_suite_exit`` would be called
+ after everything else. ``kunit_test_suite(example_test_suite)`` registers the
+ test suite with the KUnit test framework.
++>>>>>>> 1cdba21db2ca (kunit: add ability to specify suite-level init and exit functions)
  
  .. note::
 -   A test case will only run if it is associated with a test suite.
 -
 -``kunit_test_suite(...)`` is a macro which tells the linker to put the
 -specified test suite in a special linker section so that it can be run by KUnit
 -either after ``late_init``, or when the test module is loaded (if the test was
 -built as a module).
 -
 -For more information, see Documentation/dev-tools/kunit/api/test.rst.
 +   A test case will only be run if it is associated with a test suite.
  
 -Writing Tests For Other Architectures
 --------------------------------------
 +``kunit_test_suite(...)`` is a macro which tells the linker to put the specified
 +test suite in a special linker section so that it can be run by KUnit either
 +after late_init, or when the test module is loaded (depending on whether the
 +test was built in or not).
  
 -It is better to write tests that run on UML to tests that only run under a
 -particular architecture. It is better to write tests that run under QEMU or
 -another easy to obtain (and monetarily free) software environment to a specific
 -piece of hardware.
 -
 -Nevertheless, there are still valid reasons to write a test that is architecture
 -or hardware specific. For example, we might want to test code that really
 -belongs in ``arch/some-arch/*``. Even so, try to write the test so that it does
 -not depend on physical hardware. Some of our test cases may not need hardware,
 -only few tests actually require the hardware to test it. When hardware is not
 -available, instead of disabling tests, we can skip them.
 -
 -Now that we have narrowed down exactly what bits are hardware specific, the
 -actual procedure for writing and running the tests is same as writing normal
 -KUnit tests.
 -
 -.. important::
 -   We may have to reset hardware state. If this is not possible, we may only
 -   be able to run one test case per invocation.
 -
 -.. TODO(brendanhiggins@google.com): Add an actual example of an architecture-
 -   dependent KUnit test.
 +For more information on these types of things see the
 +Documentation/dev-tools/kunit/api/test.rst.
  
  Common Patterns
  ===============
* Unmerged path Documentation/dev-tools/kunit/usage.rst
diff --git a/include/kunit/test.h b/include/kunit/test.h
index d16461268705..416c40ce50e3 100644
--- a/include/kunit/test.h
+++ b/include/kunit/test.h
@@ -143,6 +143,8 @@ static inline char *kunit_status_to_ok_not_ok(enum kunit_status status)
  * struct kunit_suite - describes a related collection of &struct kunit_case
  *
  * @name:	the name of the test. Purely informational.
+ * @suite_init:	called once per test suite before the test cases.
+ * @suite_exit:	called once per test suite after all test cases.
  * @init:	called before every test case.
  * @exit:	called after every test case.
  * @test_cases:	a null terminated array of test cases.
@@ -157,6 +159,8 @@ static inline char *kunit_status_to_ok_not_ok(enum kunit_status status)
  */
 struct kunit_suite {
 	const char name[256];
+	int (*suite_init)(struct kunit_suite *suite);
+	void (*suite_exit)(struct kunit_suite *suite);
 	int (*init)(struct kunit *test);
 	void (*exit)(struct kunit *test);
 	struct kunit_case *test_cases;
@@ -165,6 +169,7 @@ struct kunit_suite {
 	char status_comment[KUNIT_STATUS_COMMENT_SIZE];
 	struct dentry *debugfs;
 	char *log;
+	int suite_init_err;
 };
 
 /**
diff --git a/lib/kunit/kunit-example-test.c b/lib/kunit/kunit-example-test.c
index 4bbf37c04eba..23d37b702997 100644
--- a/lib/kunit/kunit-example-test.c
+++ b/lib/kunit/kunit-example-test.c
@@ -40,6 +40,17 @@ static int example_test_init(struct kunit *test)
 	return 0;
 }
 
+/*
+ * This is run once before all test cases in the suite.
+ * See the comment on example_test_suite for more information.
+ */
+static int example_test_init_suite(struct kunit_suite *suite)
+{
+	kunit_info(suite, "initializing suite\n");
+
+	return 0;
+}
+
 /*
  * This test should always be skipped.
  */
@@ -140,17 +151,20 @@ static struct kunit_case example_test_cases[] = {
  * may be specified which runs after every test case and can be used to for
  * cleanup. For clarity, running tests in a test suite would behave as follows:
  *
+ * suite.suite_init(suite);
  * suite.init(test);
  * suite.test_case[0](test);
  * suite.exit(test);
  * suite.init(test);
  * suite.test_case[1](test);
  * suite.exit(test);
+ * suite.suite_exit(suite);
  * ...;
  */
 static struct kunit_suite example_test_suite = {
 	.name = "example",
 	.init = example_test_init,
+	.suite_init = example_test_init_suite,
 	.test_cases = example_test_cases,
 };
 
diff --git a/lib/kunit/test.c b/lib/kunit/test.c
index 0929e834e2d9..c5a7c31057b7 100644
--- a/lib/kunit/test.c
+++ b/lib/kunit/test.c
@@ -179,6 +179,9 @@ enum kunit_status kunit_suite_has_succeeded(struct kunit_suite *suite)
 	const struct kunit_case *test_case;
 	enum kunit_status status = KUNIT_SKIPPED;
 
+	if (suite->suite_init_err)
+		return KUNIT_FAILURE;
+
 	kunit_suite_for_each_test_case(suite, test_case) {
 		if (test_case->status == KUNIT_FAILURE)
 			return KUNIT_FAILURE;
@@ -497,6 +500,15 @@ int kunit_run_tests(struct kunit_suite *suite)
 	struct kunit_result_stats suite_stats = { 0 };
 	struct kunit_result_stats total_stats = { 0 };
 
+	if (suite->suite_init) {
+		suite->suite_init_err = suite->suite_init(suite);
+		if (suite->suite_init_err) {
+			kunit_err(suite, KUNIT_SUBTEST_INDENT
+				  "# failed to initialize (%d)", suite->suite_init_err);
+			goto suite_end;
+		}
+	}
+
 	kunit_print_suite_start(suite);
 
 	kunit_suite_for_each_test_case(suite, test_case) {
@@ -550,7 +562,11 @@ int kunit_run_tests(struct kunit_suite *suite)
 		kunit_accumulate_stats(&total_stats, param_stats);
 	}
 
+	if (suite->suite_exit)
+		suite->suite_exit(suite);
+
 	kunit_print_suite_stats(suite, suite_stats, total_stats);
+suite_end:
 	kunit_print_suite_end(suite);
 
 	return 0;
@@ -561,6 +577,7 @@ static void kunit_init_suite(struct kunit_suite *suite)
 {
 	kunit_debugfs_create_suite(suite);
 	suite->status_comment[0] = '\0';
+	suite->suite_init_err = 0;
 }
 
 int __kunit_test_suites_init(struct kunit_suite * const * const suites)
