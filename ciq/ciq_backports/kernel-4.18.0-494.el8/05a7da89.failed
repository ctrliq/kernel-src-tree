kunit: drop unused assert_type from kunit_assert and clean up macros

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-494.el8
commit-author Daniel Latypov <dlatypov@google.com>
commit 05a7da89c15ddb3fc7618a16f5941eca68fc441c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-494.el8/05a7da89.failed

This field has been split out from kunit_assert to make the struct less
heavy along with the filename and line number.

This change drops the assert_type field and cleans up all the macros
that were plumbing assert_type into kunit_assert.

	Signed-off-by: Daniel Latypov <dlatypov@google.com>
	Reviewed-by: David Gow <davidgow@google.com>
	Reviewed-by: Brendan Higgins <brendanhiggins@google.com>
	Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>
(cherry picked from commit 05a7da89c15ddb3fc7618a16f5941eca68fc441c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/kunit/assert.h
diff --cc include/kunit/assert.h
index f568166ef034,f2b3ae5cc2de..000000000000
--- a/include/kunit/assert.h
+++ b/include/kunit/assert.h
@@@ -28,11 -28,20 +28,14 @@@ enum kunit_assert_type 
  	KUNIT_EXPECTATION,
  };
  
 -/**
 - * struct kunit_loc - Identifies the source location of a line of code.
 - * @line: the line number in the file.
 - * @file: the file name.
 - */
 -struct kunit_loc {
 -	int line;
 -	const char *file;
 -};
 -
 -#define KUNIT_CURRENT_LOC { .file = __FILE__, .line = __LINE__ }
 -
  /**
   * struct kunit_assert - Data for printing a failed assertion or expectation.
++<<<<<<< HEAD
 + * @type: the type (either an expectation or an assertion) of this kunit_assert.
 + * @line: the source code line number that the expectation/assertion is at.
 + * @file: the file path of the source file that the expectation/assertion is in.
++=======
++>>>>>>> 05a7da89c15d (kunit: drop unused assert_type from kunit_assert and clean up macros)
   * @message: an optional message to provide additional context.
   * @format: a function which formats the data in this kunit_assert to a string.
   *
@@@ -40,9 -49,6 +43,12 @@@
   * format a string to a user reporting the failure.
   */
  struct kunit_assert {
++<<<<<<< HEAD
 +	enum kunit_assert_type type;
 +	int line;
 +	const char *file;
++=======
++>>>>>>> 05a7da89c15d (kunit: drop unused assert_type from kunit_assert and clean up macros)
  	struct va_format message;
  	void (*format)(const struct kunit_assert *assert,
  		       struct string_stream *stream);
@@@ -63,10 -68,7 +68,14 @@@
   *
   * The base initializer for a &struct kunit_assert.
   */
++<<<<<<< HEAD
 +#define KUNIT_INIT_ASSERT_STRUCT(assert_type, fmt) {			       \
 +	.type = assert_type,						       \
 +	.file = __FILE__,						       \
 +	.line = __LINE__,						       \
++=======
+ #define KUNIT_INIT_ASSERT_STRUCT(fmt) {					       \
++>>>>>>> 05a7da89c15d (kunit: drop unused assert_type from kunit_assert and clean up macros)
  	.message = KUNIT_INIT_VA_FMT_NULL,				       \
  	.format = fmt							       \
  }
* Unmerged path include/kunit/assert.h
diff --git a/include/kunit/test.h b/include/kunit/test.h
index 4c7dbf50afed..bd59766106ef 100644
--- a/include/kunit/test.h
+++ b/include/kunit/test.h
@@ -509,7 +509,7 @@ void kunit_do_assertion(struct kunit *test,
 	KUNIT_ASSERTION(test,						       \
 			false,						       \
 			kunit_fail_assert,				       \
-			KUNIT_INIT_FAIL_ASSERT_STRUCT(assert_type),      \
+			KUNIT_INIT_FAIL_ASSERT_STRUCT,			       \
 			fmt,						       \
 			##__VA_ARGS__)
 
@@ -539,8 +539,7 @@ void kunit_do_assertion(struct kunit *test,
 	KUNIT_ASSERTION(test,						       \
 			!!(condition) == !!expected_true,		       \
 			kunit_unary_assert,				       \
-			KUNIT_INIT_UNARY_ASSERT_STRUCT(assert_type,	       \
-						       #condition,	       \
+			KUNIT_INIT_UNARY_ASSERT_STRUCT(#condition,	       \
 						       expected_true),	       \
 			fmt,						       \
 			##__VA_ARGS__)
@@ -597,8 +596,7 @@ do {									       \
 	KUNIT_ASSERTION(test,						       \
 			__left op __right,				       \
 			assert_class,					       \
-			ASSERT_CLASS_INIT(assert_type,			       \
-					  #op,				       \
+			ASSERT_CLASS_INIT(#op,				       \
 					  #left,			       \
 					  __left,			       \
 					  #right,			       \
@@ -951,8 +949,7 @@ do {									       \
 	KUNIT_ASSERTION(test,						       \
 			strcmp(__left, __right) op 0,			       \
 			kunit_binary_str_assert,			       \
-			KUNIT_INIT_BINARY_STR_ASSERT_STRUCT(assert_type,       \
-							#op,		       \
+			KUNIT_INIT_BINARY_STR_ASSERT_STRUCT(#op,	       \
 							#left,		       \
 							__left,		       \
 							#right,		       \
@@ -1010,8 +1007,7 @@ do {									       \
 	KUNIT_ASSERTION(test,						       \
 			!IS_ERR_OR_NULL(__ptr),				       \
 			kunit_ptr_not_err_assert,			       \
-			KUNIT_INIT_PTR_NOT_ERR_STRUCT(assert_type,	       \
-						      #ptr,		       \
+			KUNIT_INIT_PTR_NOT_ERR_STRUCT(#ptr,		       \
 						      __ptr),		       \
 			fmt,						       \
 			##__VA_ARGS__);					       \
