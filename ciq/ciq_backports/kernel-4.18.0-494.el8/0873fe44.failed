scsi: target: iscsi: Rename iscsi_session to iscsit_session

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-494.el8
commit-author Max Gurtovoy <mgurtovoy@nvidia.com>
commit 0873fe44e780eb8ff7932aed347de8dd4103cea7
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-494.el8/0873fe44.failed

The structure iscsi_session naming is used by the iSCSI initiator
driver. Rename the target session to iscsit_session to have more readable
code.

Link: https://lore.kernel.org/r/20220428092939.36768-3-mgurtovoy@nvidia.com
	Reviewed-by: Mike Christie <michael.christie@oracle.com>
	Signed-off-by: Max Gurtovoy <mgurtovoy@nvidia.com>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit 0873fe44e780eb8ff7932aed347de8dd4103cea7)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/target/iscsi/iscsi_target.c
#	drivers/target/iscsi/iscsi_target.h
#	drivers/target/iscsi/iscsi_target_configfs.c
#	drivers/target/iscsi/iscsi_target_device.c
#	drivers/target/iscsi/iscsi_target_device.h
#	drivers/target/iscsi/iscsi_target_erl0.h
#	drivers/target/iscsi/iscsi_target_erl1.c
#	drivers/target/iscsi/iscsi_target_erl1.h
#	drivers/target/iscsi/iscsi_target_erl2.c
#	drivers/target/iscsi/iscsi_target_erl2.h
#	drivers/target/iscsi/iscsi_target_login.c
#	drivers/target/iscsi/iscsi_target_nodeattrib.c
#	drivers/target/iscsi/iscsi_target_util.c
#	drivers/target/iscsi/iscsi_target_util.h
#	include/target/iscsi/iscsi_transport.h
diff --cc drivers/target/iscsi/iscsi_target.c
index e18864143503,d425cc386d87..000000000000
--- a/drivers/target/iscsi/iscsi_target.c
+++ b/drivers/target/iscsi/iscsi_target.c
@@@ -2346,10 -2347,10 +2346,15 @@@ reject
  	return iscsit_reject_cmd(cmd, ISCSI_REASON_PROTOCOL_ERROR, buf);
  }
  
 -int iscsit_logout_closesession(struct iscsit_cmd *cmd, struct iscsit_conn *conn)
 +int iscsit_logout_closesession(struct iscsi_cmd *cmd, struct iscsi_conn *conn)
  {
++<<<<<<< HEAD
 +	struct iscsi_conn *conn_p;
 +	struct iscsi_session *sess = conn->sess;
++=======
+ 	struct iscsit_conn *conn_p;
+ 	struct iscsit_session *sess = conn->sess;
++>>>>>>> 0873fe44e780 (scsi: target: iscsi: Rename iscsi_session to iscsit_session)
  
  	pr_debug("Received logout request CLOSESESSION on CID: %hu"
  		" for SID: %u.\n", conn->cid, conn->sess->sid);
@@@ -2376,10 -2377,10 +2381,15 @@@
  	return 0;
  }
  
 -int iscsit_logout_closeconnection(struct iscsit_cmd *cmd, struct iscsit_conn *conn)
 +int iscsit_logout_closeconnection(struct iscsi_cmd *cmd, struct iscsi_conn *conn)
  {
++<<<<<<< HEAD
 +	struct iscsi_conn *l_conn;
 +	struct iscsi_session *sess = conn->sess;
++=======
+ 	struct iscsit_conn *l_conn;
+ 	struct iscsit_session *sess = conn->sess;
++>>>>>>> 0873fe44e780 (scsi: target: iscsi: Rename iscsi_session to iscsit_session)
  
  	pr_debug("Received logout request CLOSECONNECTION for CID:"
  		" %hu on CID: %hu.\n", cmd->logout_cid, conn->cid);
@@@ -2424,9 -2425,9 +2434,9 @@@
  	return 0;
  }
  
 -int iscsit_logout_removeconnforrecovery(struct iscsit_cmd *cmd, struct iscsit_conn *conn)
 +int iscsit_logout_removeconnforrecovery(struct iscsi_cmd *cmd, struct iscsi_conn *conn)
  {
- 	struct iscsi_session *sess = conn->sess;
+ 	struct iscsit_session *sess = conn->sess;
  
  	pr_debug("Received explicit REMOVECONNFORRECOVERY logout for"
  		" CID: %hu on CID: %hu.\n", cmd->logout_cid, conn->cid);
@@@ -2895,12 -2896,12 +2905,12 @@@ static int iscsit_send_datain(struct is
  }
  
  int
 -iscsit_build_logout_rsp(struct iscsit_cmd *cmd, struct iscsit_conn *conn,
 +iscsit_build_logout_rsp(struct iscsi_cmd *cmd, struct iscsi_conn *conn,
  			struct iscsi_logout_rsp *hdr)
  {
 -	struct iscsit_conn *logout_conn = NULL;
 +	struct iscsi_conn *logout_conn = NULL;
  	struct iscsi_conn_recovery *cr = NULL;
- 	struct iscsi_session *sess = conn->sess;
+ 	struct iscsit_session *sess = conn->sess;
  	/*
  	 * The actual shutting down of Sessions and/or Connections
  	 * for CLOSESESSION and CLOSECONNECTION Logout Requests
@@@ -4091,11 -4141,11 +4101,16 @@@ out
  	return 0;
  }
  
 -static void iscsit_release_commands_from_conn(struct iscsit_conn *conn)
 +static void iscsit_release_commands_from_conn(struct iscsi_conn *conn)
  {
  	LIST_HEAD(tmp_list);
++<<<<<<< HEAD
 +	struct iscsi_cmd *cmd = NULL, *cmd_tmp = NULL;
 +	struct iscsi_session *sess = conn->sess;
++=======
+ 	struct iscsit_cmd *cmd = NULL, *cmd_tmp = NULL;
+ 	struct iscsit_session *sess = conn->sess;
++>>>>>>> 0873fe44e780 (scsi: target: iscsi: Rename iscsi_session to iscsit_session)
  	/*
  	 * We expect this function to only ever be called from either RX or TX
  	 * thread context via iscsit_close_connection() once the other context
@@@ -4160,10 -4198,10 +4175,10 @@@ static void iscsit_stop_timers_for_cmds
  }
  
  int iscsit_close_connection(
 -	struct iscsit_conn *conn)
 +	struct iscsi_conn *conn)
  {
  	int conn_logout = (conn->conn_state == TARG_CONN_STATE_IN_LOGOUT);
- 	struct iscsi_session	*sess = conn->sess;
+ 	struct iscsit_session	*sess = conn->sess;
  
  	pr_debug("Closing iSCSI connection CID %hu on SID:"
  		" %u\n", conn->cid, sess->sid);
@@@ -4468,9 -4506,9 +4483,9 @@@ int iscsit_close_session(struct iscsit_
  }
  
  static void iscsit_logout_post_handler_closesession(
 -	struct iscsit_conn *conn)
 +	struct iscsi_conn *conn)
  {
- 	struct iscsi_session *sess = conn->sess;
+ 	struct iscsit_session *sess = conn->sess;
  	int sleep = 1;
  	/*
  	 * Traditional iscsi/tcp will invoke this logic from TX thread
@@@ -4515,11 -4553,11 +4530,16 @@@ static void iscsit_logout_post_handler_
  }
  
  static void iscsit_logout_post_handler_diffcid(
 -	struct iscsit_conn *conn,
 +	struct iscsi_conn *conn,
  	u16 cid)
  {
++<<<<<<< HEAD
 +	struct iscsi_conn *l_conn;
 +	struct iscsi_session *sess = conn->sess;
++=======
+ 	struct iscsit_conn *l_conn;
+ 	struct iscsit_session *sess = conn->sess;
++>>>>>>> 0873fe44e780 (scsi: target: iscsi: Rename iscsi_session to iscsit_session)
  	bool conn_found = false;
  
  	if (!sess)
@@@ -4611,9 -4649,9 +4631,9 @@@ int iscsit_logout_post_handler
  }
  EXPORT_SYMBOL(iscsit_logout_post_handler);
  
- void iscsit_fail_session(struct iscsi_session *sess)
+ void iscsit_fail_session(struct iscsit_session *sess)
  {
 -	struct iscsit_conn *conn;
 +	struct iscsi_conn *conn;
  
  	spin_lock_bh(&sess->conn_lock);
  	list_for_each_entry(conn, &sess->sess_conn_list, conn_list) {
diff --cc drivers/target/iscsi/iscsi_target.h
index b35a96ded9c1,0c997a08adec..000000000000
--- a/drivers/target/iscsi/iscsi_target.h
+++ b/drivers/target/iscsi/iscsi_target.h
@@@ -5,11 -5,11 +5,11 @@@
  #include <linux/types.h>
  #include <linux/spinlock.h>
  
 -struct iscsit_cmd;
 -struct iscsit_conn;
 +struct iscsi_cmd;
 +struct iscsi_conn;
  struct iscsi_np;
  struct iscsi_portal_group;
- struct iscsi_session;
+ struct iscsit_session;
  struct iscsi_tpg_np;
  struct kref;
  struct sockaddr_storage;
@@@ -30,20 -30,20 +30,27 @@@ extern struct iscsi_np *iscsit_add_np(s
  extern int iscsit_reset_np_thread(struct iscsi_np *, struct iscsi_tpg_np *,
  				struct iscsi_portal_group *, bool);
  extern int iscsit_del_np(struct iscsi_np *);
 -extern int iscsit_reject_cmd(struct iscsit_cmd *cmd, u8, unsigned char *);
 -extern void iscsit_set_unsolicited_dataout(struct iscsit_cmd *);
 -extern int iscsit_logout_closesession(struct iscsit_cmd *, struct iscsit_conn *);
 -extern int iscsit_logout_closeconnection(struct iscsit_cmd *, struct iscsit_conn *);
 -extern int iscsit_logout_removeconnforrecovery(struct iscsit_cmd *, struct iscsit_conn *);
 -extern int iscsit_send_async_msg(struct iscsit_conn *, u16, u8, u8);
 -extern int iscsit_build_r2ts_for_cmd(struct iscsit_conn *, struct iscsit_cmd *, bool recovery);
 -extern void iscsit_thread_get_cpumask(struct iscsit_conn *);
 +extern int iscsit_reject_cmd(struct iscsi_cmd *cmd, u8, unsigned char *);
 +extern void iscsit_set_unsolicited_dataout(struct iscsi_cmd *);
 +extern int iscsit_logout_closesession(struct iscsi_cmd *, struct iscsi_conn *);
 +extern int iscsit_logout_closeconnection(struct iscsi_cmd *, struct iscsi_conn *);
 +extern int iscsit_logout_removeconnforrecovery(struct iscsi_cmd *, struct iscsi_conn *);
 +extern int iscsit_send_async_msg(struct iscsi_conn *, u16, u8, u8);
 +extern int iscsit_build_r2ts_for_cmd(struct iscsi_conn *, struct iscsi_cmd *, bool recovery);
 +extern void iscsit_thread_get_cpumask(struct iscsi_conn *);
  extern int iscsi_target_tx_thread(void *);
  extern int iscsi_target_rx_thread(void *);
++<<<<<<< HEAD
 +extern int iscsit_close_connection(struct iscsi_conn *);
 +extern int iscsit_close_session(struct iscsi_session *, bool can_sleep);
 +extern void iscsit_fail_session(struct iscsi_session *);
 +extern void iscsit_stop_session(struct iscsi_session *, int, int);
++=======
+ extern int iscsit_close_connection(struct iscsit_conn *);
+ extern int iscsit_close_session(struct iscsit_session *, bool can_sleep);
+ extern void iscsit_fail_session(struct iscsit_session *);
+ extern void iscsit_stop_session(struct iscsit_session *, int, int);
++>>>>>>> 0873fe44e780 (scsi: target: iscsi: Rename iscsi_session to iscsit_session)
  extern int iscsit_release_sessions_for_tpg(struct iscsi_portal_group *, int);
  
  extern struct iscsit_global *iscsit_global;
diff --cc drivers/target/iscsi/iscsi_target_configfs.c
index 5591019ea505,72f5ff959636..000000000000
--- a/drivers/target/iscsi/iscsi_target_configfs.c
+++ b/drivers/target/iscsi/iscsi_target_configfs.c
@@@ -506,8 -498,8 +506,13 @@@ static struct configfs_attribute *lio_t
  static ssize_t lio_target_nacl_info_show(struct config_item *item, char *page)
  {
  	struct se_node_acl *se_nacl = acl_to_nacl(item);
++<<<<<<< HEAD
 +	struct iscsi_session *sess;
 +	struct iscsi_conn *conn;
++=======
+ 	struct iscsit_session *sess;
+ 	struct iscsit_conn *conn;
++>>>>>>> 0873fe44e780 (scsi: target: iscsi: Rename iscsi_session to iscsit_session)
  	struct se_session *se_sess;
  	ssize_t rb = 0;
  	u32 max_cmd_sn;
diff --cc drivers/target/iscsi/iscsi_target_device.c
index 9734029f4020,b565ce3b2677..000000000000
--- a/drivers/target/iscsi/iscsi_target_device.c
+++ b/drivers/target/iscsi/iscsi_target_device.c
@@@ -26,10 -17,7 +26,14 @@@
  #include "iscsi_target_tpg.h"
  #include "iscsi_target_util.h"
  
++<<<<<<< HEAD
 +#define iscsit_needs_delayed_maxcmdsn_increment(conn) \
 +	(conn->conn_transport->transport_type == ISCSI_INFINIBAND)
 +
 +void iscsit_determine_maxcmdsn(struct iscsi_session *sess)
++=======
+ void iscsit_determine_maxcmdsn(struct iscsit_session *sess)
++>>>>>>> 0873fe44e780 (scsi: target: iscsi: Rename iscsi_session to iscsit_session)
  {
  	struct se_node_acl *se_nacl;
  
@@@ -54,7 -42,7 +58,11 @@@
  	atomic_add(se_nacl->queue_depth - 1, &sess->max_cmd_sn);
  }
  
++<<<<<<< HEAD
 +void __iscsit_increment_maxcmdsn(struct iscsi_cmd *cmd, struct iscsi_session *sess)
++=======
+ void iscsit_increment_maxcmdsn(struct iscsit_cmd *cmd, struct iscsit_session *sess)
++>>>>>>> 0873fe44e780 (scsi: target: iscsi: Rename iscsi_session to iscsit_session)
  {
  	u32 max_cmd_sn;
  
diff --cc drivers/target/iscsi/iscsi_target_device.h
index ab2166f17785,366340120558..000000000000
--- a/drivers/target/iscsi/iscsi_target_device.h
+++ b/drivers/target/iscsi/iscsi_target_device.h
@@@ -2,10 -2,10 +2,18 @@@
  #ifndef ISCSI_TARGET_DEVICE_H
  #define ISCSI_TARGET_DEVICE_H
  
++<<<<<<< HEAD
 +struct iscsi_cmd;
 +struct iscsi_session;
 +
 +extern void iscsit_determine_maxcmdsn(struct iscsi_session *);
 +extern void iscsit_increment_maxcmdsn(struct iscsi_cmd *, struct iscsi_session *);
++=======
+ struct iscsit_cmd;
+ struct iscsit_session;
+ 
+ extern void iscsit_determine_maxcmdsn(struct iscsit_session *);
+ extern void iscsit_increment_maxcmdsn(struct iscsit_cmd *, struct iscsit_session *);
++>>>>>>> 0873fe44e780 (scsi: target: iscsi: Rename iscsi_session to iscsit_session)
  
  #endif /* ISCSI_TARGET_DEVICE_H */
diff --cc drivers/target/iscsi/iscsi_target_erl0.h
index 883ebf6d36cf,2a877d13977d..000000000000
--- a/drivers/target/iscsi/iscsi_target_erl0.h
+++ b/drivers/target/iscsi/iscsi_target_erl0.h
@@@ -4,19 -4,19 +4,36 @@@
  
  #include <linux/types.h>
  
++<<<<<<< HEAD
 +struct iscsi_cmd;
 +struct iscsi_conn;
 +struct iscsi_session;
 +
 +extern void iscsit_set_dataout_sequence_values(struct iscsi_cmd *);
 +extern int iscsit_check_pre_dataout(struct iscsi_cmd *, unsigned char *);
 +extern int iscsit_check_post_dataout(struct iscsi_cmd *, unsigned char *, u8);
 +extern void iscsit_start_time2retain_handler(struct iscsi_session *);
 +extern void iscsit_handle_time2retain_timeout(struct timer_list *t);
 +extern int iscsit_stop_time2retain_timer(struct iscsi_session *);
 +extern void iscsit_connection_reinstatement_rcfr(struct iscsi_conn *);
 +extern void iscsit_cause_connection_reinstatement(struct iscsi_conn *, int);
 +extern void iscsit_fall_back_to_erl0(struct iscsi_session *);
 +extern void iscsit_take_action_for_connection_exit(struct iscsi_conn *, bool *);
++=======
+ struct iscsit_cmd;
+ struct iscsit_conn;
+ struct iscsit_session;
+ 
+ extern void iscsit_set_dataout_sequence_values(struct iscsit_cmd *);
+ extern int iscsit_check_pre_dataout(struct iscsit_cmd *, unsigned char *);
+ extern int iscsit_check_post_dataout(struct iscsit_cmd *, unsigned char *, u8);
+ extern void iscsit_start_time2retain_handler(struct iscsit_session *);
+ extern void iscsit_handle_time2retain_timeout(struct timer_list *t);
+ extern int iscsit_stop_time2retain_timer(struct iscsit_session *);
+ extern void iscsit_connection_reinstatement_rcfr(struct iscsit_conn *);
+ extern void iscsit_cause_connection_reinstatement(struct iscsit_conn *, int);
+ extern void iscsit_fall_back_to_erl0(struct iscsit_session *);
+ extern void iscsit_take_action_for_connection_exit(struct iscsit_conn *, bool *);
++>>>>>>> 0873fe44e780 (scsi: target: iscsi: Rename iscsi_session to iscsit_session)
  
  #endif   /*** ISCSI_TARGET_ERL0_H ***/
diff --cc drivers/target/iscsi/iscsi_target_erl1.c
index 7a416fff316c,f460a66c0e7c..000000000000
--- a/drivers/target/iscsi/iscsi_target_erl1.c
+++ b/drivers/target/iscsi/iscsi_target_erl1.c
@@@ -833,10 -825,10 +833,10 @@@ void iscsit_remove_ooo_cmdsn
  	kmem_cache_free(lio_ooo_cache, ooo_cmdsn);
  }
  
 -void iscsit_clear_ooo_cmdsns_for_conn(struct iscsit_conn *conn)
 +void iscsit_clear_ooo_cmdsns_for_conn(struct iscsi_conn *conn)
  {
  	struct iscsi_ooo_cmdsn *ooo_cmdsn;
- 	struct iscsi_session *sess = conn->sess;
+ 	struct iscsit_session *sess = conn->sess;
  
  	mutex_lock(&sess->cmdsn_mutex);
  	list_for_each_entry(ooo_cmdsn, &sess->sess_ooo_cmdsn_list, ooo_list) {
@@@ -848,10 -840,10 +848,10 @@@
  	mutex_unlock(&sess->cmdsn_mutex);
  }
  
- int iscsit_execute_ooo_cmdsns(struct iscsi_session *sess)
+ int iscsit_execute_ooo_cmdsns(struct iscsit_session *sess)
  {
  	int ooo_count = 0;
 -	struct iscsit_cmd *cmd = NULL;
 +	struct iscsi_cmd *cmd = NULL;
  	struct iscsi_ooo_cmdsn *ooo_cmdsn, *ooo_cmdsn_tmp;
  
  	lockdep_assert_held(&sess->cmdsn_mutex);
@@@ -1017,8 -1009,8 +1017,13 @@@ void iscsit_free_all_ooo_cmdsns(struct 
  }
  
  int iscsit_handle_ooo_cmdsn(
++<<<<<<< HEAD
 +	struct iscsi_session *sess,
 +	struct iscsi_cmd *cmd,
++=======
+ 	struct iscsit_session *sess,
+ 	struct iscsit_cmd *cmd,
++>>>>>>> 0873fe44e780 (scsi: target: iscsi: Rename iscsi_session to iscsit_session)
  	u32 cmdsn)
  {
  	int batch = 0;
@@@ -1103,9 -1095,9 +1108,15 @@@ void iscsit_handle_dataout_timeout(stru
  {
  	u32 pdu_length = 0, pdu_offset = 0;
  	u32 r2t_length = 0, r2t_offset = 0;
++<<<<<<< HEAD
 +	struct iscsi_cmd *cmd = from_timer(cmd, t, dataout_timer);
 +	struct iscsi_conn *conn = cmd->conn;
 +	struct iscsi_session *sess = NULL;
++=======
+ 	struct iscsit_cmd *cmd = from_timer(cmd, t, dataout_timer);
+ 	struct iscsit_conn *conn = cmd->conn;
+ 	struct iscsit_session *sess = NULL;
++>>>>>>> 0873fe44e780 (scsi: target: iscsi: Rename iscsi_session to iscsit_session)
  	struct iscsi_node_attrib *na;
  
  	iscsit_inc_conn_usage_count(conn);
@@@ -1187,10 -1179,10 +1198,15 @@@ failure
  	iscsit_dec_conn_usage_count(conn);
  }
  
 -void iscsit_mod_dataout_timer(struct iscsit_cmd *cmd)
 +void iscsit_mod_dataout_timer(struct iscsi_cmd *cmd)
  {
++<<<<<<< HEAD
 +	struct iscsi_conn *conn = cmd->conn;
 +	struct iscsi_session *sess = conn->sess;
++=======
+ 	struct iscsit_conn *conn = cmd->conn;
+ 	struct iscsit_session *sess = conn->sess;
++>>>>>>> 0873fe44e780 (scsi: target: iscsi: Rename iscsi_session to iscsit_session)
  	struct iscsi_node_attrib *na = iscsit_tpg_get_node_attrib(sess);
  
  	spin_lock_bh(&cmd->dataout_timeout_lock);
@@@ -1207,10 -1199,10 +1223,10 @@@
  }
  
  void iscsit_start_dataout_timer(
 -	struct iscsit_cmd *cmd,
 -	struct iscsit_conn *conn)
 +	struct iscsi_cmd *cmd,
 +	struct iscsi_conn *conn)
  {
- 	struct iscsi_session *sess = conn->sess;
+ 	struct iscsit_session *sess = conn->sess;
  	struct iscsi_node_attrib *na = iscsit_tpg_get_node_attrib(sess);
  
  	lockdep_assert_held(&cmd->dataout_timeout_lock);
diff --cc drivers/target/iscsi/iscsi_target_erl1.h
index 1f6973f87fea,12472eefe559..000000000000
--- a/drivers/target/iscsi/iscsi_target_erl1.h
+++ b/drivers/target/iscsi/iscsi_target_erl1.h
@@@ -10,29 -10,29 +10,41 @@@ struct iscsi_conn
  struct iscsi_datain_req;
  struct iscsi_ooo_cmdsn;
  struct iscsi_pdu;
- struct iscsi_session;
+ struct iscsit_session;
  
 -extern int iscsit_dump_data_payload(struct iscsit_conn *, u32, int);
 +extern int iscsit_dump_data_payload(struct iscsi_conn *, u32, int);
  extern int iscsit_create_recovery_datain_values_datasequenceinorder_yes(
 -			struct iscsit_cmd *, struct iscsi_datain_req *);
 +			struct iscsi_cmd *, struct iscsi_datain_req *);
  extern int iscsit_create_recovery_datain_values_datasequenceinorder_no(
 -			struct iscsit_cmd *, struct iscsi_datain_req *);
 -extern int iscsit_handle_recovery_datain_or_r2t(struct iscsit_conn *, unsigned char *,
 +			struct iscsi_cmd *, struct iscsi_datain_req *);
 +extern int iscsit_handle_recovery_datain_or_r2t(struct iscsi_conn *, unsigned char *,
  			itt_t, u32, u32, u32);
 -extern int iscsit_handle_status_snack(struct iscsit_conn *, itt_t, u32,
 +extern int iscsit_handle_status_snack(struct iscsi_conn *, itt_t, u32,
  			u32, u32);
++<<<<<<< HEAD
 +extern int iscsit_handle_data_ack(struct iscsi_conn *, u32, u32, u32);
 +extern int iscsit_dataout_datapduinorder_no_fbit(struct iscsi_cmd *, struct iscsi_pdu *);
 +extern int iscsit_recover_dataout_sequence(struct iscsi_cmd *, u32, u32);
 +extern void iscsit_clear_ooo_cmdsns_for_conn(struct iscsi_conn *);
 +extern void iscsit_free_all_ooo_cmdsns(struct iscsi_session *);
 +extern int iscsit_execute_ooo_cmdsns(struct iscsi_session *);
 +extern int iscsit_execute_cmd(struct iscsi_cmd *, int);
 +extern int iscsit_handle_ooo_cmdsn(struct iscsi_session *, struct iscsi_cmd *, u32);
 +extern void iscsit_remove_ooo_cmdsn(struct iscsi_session *, struct iscsi_ooo_cmdsn *);
++=======
+ extern int iscsit_handle_data_ack(struct iscsit_conn *, u32, u32, u32);
+ extern int iscsit_dataout_datapduinorder_no_fbit(struct iscsit_cmd *, struct iscsi_pdu *);
+ extern int iscsit_recover_dataout_sequence(struct iscsit_cmd *, u32, u32);
+ extern void iscsit_clear_ooo_cmdsns_for_conn(struct iscsit_conn *);
+ extern void iscsit_free_all_ooo_cmdsns(struct iscsit_session *);
+ extern int iscsit_execute_ooo_cmdsns(struct iscsit_session *);
+ extern int iscsit_execute_cmd(struct iscsit_cmd *, int);
+ extern int iscsit_handle_ooo_cmdsn(struct iscsit_session *, struct iscsit_cmd *, u32);
+ extern void iscsit_remove_ooo_cmdsn(struct iscsit_session *, struct iscsi_ooo_cmdsn *);
++>>>>>>> 0873fe44e780 (scsi: target: iscsi: Rename iscsi_session to iscsit_session)
  extern void iscsit_handle_dataout_timeout(struct timer_list *t);
 -extern void iscsit_mod_dataout_timer(struct iscsit_cmd *);
 -extern void iscsit_start_dataout_timer(struct iscsit_cmd *, struct iscsit_conn *);
 -extern void iscsit_stop_dataout_timer(struct iscsit_cmd *);
 +extern void iscsit_mod_dataout_timer(struct iscsi_cmd *);
 +extern void iscsit_start_dataout_timer(struct iscsi_cmd *, struct iscsi_conn *);
 +extern void iscsit_stop_dataout_timer(struct iscsi_cmd *);
  
  #endif /* ISCSI_TARGET_ERL1_H */
diff --cc drivers/target/iscsi/iscsi_target_erl2.c
index b08b620b1bf0,18e88d2ea5fd..000000000000
--- a/drivers/target/iscsi/iscsi_target_erl2.c
+++ b/drivers/target/iscsi/iscsi_target_erl2.c
@@@ -125,9 -117,9 +125,9 @@@ struct iscsi_conn_recovery *iscsit_get_
  	return NULL;
  }
  
- void iscsit_free_connection_recovery_entries(struct iscsi_session *sess)
+ void iscsit_free_connection_recovery_entries(struct iscsit_session *sess)
  {
 -	struct iscsit_cmd *cmd, *cmd_tmp;
 +	struct iscsi_cmd *cmd, *cmd_tmp;
  	struct iscsi_conn_recovery *cr, *cr_tmp;
  
  	spin_lock(&sess->cr_a_lock);
@@@ -205,8 -197,8 +205,13 @@@ static void iscsit_remove_inactive_conn
   *	Called with cr->conn_recovery_cmd_lock help.
   */
  int iscsit_remove_cmd_from_connection_recovery(
++<<<<<<< HEAD
 +	struct iscsi_cmd *cmd,
 +	struct iscsi_session *sess)
++=======
+ 	struct iscsit_cmd *cmd,
+ 	struct iscsit_session *sess)
++>>>>>>> 0873fe44e780 (scsi: target: iscsi: Rename iscsi_session to iscsit_session)
  {
  	struct iscsi_conn_recovery *cr;
  
@@@ -226,8 -218,8 +231,13 @@@ void iscsit_discard_cr_cmds_by_expstats
  	u32 exp_statsn)
  {
  	u32 dropped_count = 0;
++<<<<<<< HEAD
 +	struct iscsi_cmd *cmd, *cmd_tmp;
 +	struct iscsi_session *sess = cr->sess;
++=======
+ 	struct iscsit_cmd *cmd, *cmd_tmp;
+ 	struct iscsit_session *sess = cr->sess;
++>>>>>>> 0873fe44e780 (scsi: target: iscsi: Rename iscsi_session to iscsit_session)
  
  	spin_lock(&cr->conn_recovery_cmd_lock);
  	list_for_each_entry_safe(cmd, cmd_tmp,
@@@ -271,12 -263,12 +281,12 @@@
  	}
  }
  
 -int iscsit_discard_unacknowledged_ooo_cmdsns_for_conn(struct iscsit_conn *conn)
 +int iscsit_discard_unacknowledged_ooo_cmdsns_for_conn(struct iscsi_conn *conn)
  {
  	u32 dropped_count = 0;
 -	struct iscsit_cmd *cmd, *cmd_tmp;
 +	struct iscsi_cmd *cmd, *cmd_tmp;
  	struct iscsi_ooo_cmdsn *ooo_cmdsn, *ooo_cmdsn_tmp;
- 	struct iscsi_session *sess = conn->sess;
+ 	struct iscsit_session *sess = conn->sess;
  
  	mutex_lock(&sess->cmdsn_mutex);
  	list_for_each_entry_safe(ooo_cmdsn, ooo_cmdsn_tmp,
diff --cc drivers/target/iscsi/iscsi_target_erl2.h
index a39b0caf2337,6655e4bcf893..000000000000
--- a/drivers/target/iscsi/iscsi_target_erl2.h
+++ b/drivers/target/iscsi/iscsi_target_erl2.h
@@@ -4,23 -4,23 +4,29 @@@
  
  #include <linux/types.h>
  
 -struct iscsit_cmd;
 -struct iscsit_conn;
 +struct iscsi_cmd;
 +struct iscsi_conn;
  struct iscsi_conn_recovery;
- struct iscsi_session;
+ struct iscsit_session;
  
 -extern void iscsit_create_conn_recovery_datain_values(struct iscsit_cmd *, __be32);
 -extern void iscsit_create_conn_recovery_dataout_values(struct iscsit_cmd *);
 +extern void iscsit_create_conn_recovery_datain_values(struct iscsi_cmd *, __be32);
 +extern void iscsit_create_conn_recovery_dataout_values(struct iscsi_cmd *);
  extern struct iscsi_conn_recovery *iscsit_get_inactive_connection_recovery_entry(
- 			struct iscsi_session *, u16);
- extern void iscsit_free_connection_recovery_entries(struct iscsi_session *);
+ 			struct iscsit_session *, u16);
+ extern void iscsit_free_connection_recovery_entries(struct iscsit_session *);
  extern int iscsit_remove_active_connection_recovery_entry(
++<<<<<<< HEAD
 +			struct iscsi_conn_recovery *, struct iscsi_session *);
 +extern int iscsit_remove_cmd_from_connection_recovery(struct iscsi_cmd *,
 +			struct iscsi_session *);
++=======
+ 			struct iscsi_conn_recovery *, struct iscsit_session *);
+ extern int iscsit_remove_cmd_from_connection_recovery(struct iscsit_cmd *,
+ 			struct iscsit_session *);
++>>>>>>> 0873fe44e780 (scsi: target: iscsi: Rename iscsi_session to iscsit_session)
  extern void iscsit_discard_cr_cmds_by_expstatsn(struct iscsi_conn_recovery *, u32);
 -extern int iscsit_discard_unacknowledged_ooo_cmdsns_for_conn(struct iscsit_conn *);
 -extern int iscsit_prepare_cmds_for_reallegiance(struct iscsit_conn *);
 -extern int iscsit_connection_recovery_transport_reset(struct iscsit_conn *);
 +extern int iscsit_discard_unacknowledged_ooo_cmdsns_for_conn(struct iscsi_conn *);
 +extern int iscsit_prepare_cmds_for_reallegiance(struct iscsi_conn *);
 +extern int iscsit_connection_recovery_transport_reset(struct iscsi_conn *);
  
  #endif /*** ISCSI_TARGET_ERL2_H ***/
diff --cc drivers/target/iscsi/iscsi_target_login.c
index 712aa79e4a15,6b94eecc4790..000000000000
--- a/drivers/target/iscsi/iscsi_target_login.c
+++ b/drivers/target/iscsi/iscsi_target_login.c
@@@ -212,8 -204,8 +212,13 @@@ int iscsi_check_for_session_reinstateme
  }
  
  static int iscsi_login_set_conn_values(
++<<<<<<< HEAD
 +	struct iscsi_session *sess,
 +	struct iscsi_conn *conn,
++=======
+ 	struct iscsit_session *sess,
+ 	struct iscsit_conn *conn,
++>>>>>>> 0873fe44e780 (scsi: target: iscsi: Rename iscsi_session to iscsit_session)
  	__be16 cid)
  {
  	int ret;
@@@ -261,10 -253,10 +266,10 @@@ EXPORT_SYMBOL(iscsi_change_param_sprint
   *	or session reinstatement.
   */
  static int iscsi_login_zero_tsih_s1(
 -	struct iscsit_conn *conn,
 +	struct iscsi_conn *conn,
  	unsigned char *buf)
  {
- 	struct iscsi_session *sess = NULL;
+ 	struct iscsit_session *sess = NULL;
  	struct iscsi_login_req *pdu = (struct iscsi_login_req *)buf;
  	int ret;
  
@@@ -346,10 -337,10 +351,10 @@@ free_sess
  }
  
  static int iscsi_login_zero_tsih_s2(
 -	struct iscsit_conn *conn)
 +	struct iscsi_conn *conn)
  {
  	struct iscsi_node_attrib *na;
- 	struct iscsi_session *sess = conn->sess;
+ 	struct iscsit_session *sess = conn->sess;
  	bool iser = false;
  
  	sess->tpg = conn->tpg;
@@@ -559,9 -550,9 +564,9 @@@ int iscsi_login_post_auth_non_zero_tsih
  	u16 cid,
  	u32 exp_statsn)
  {
 -	struct iscsit_conn *conn_ptr = NULL;
 +	struct iscsi_conn *conn_ptr = NULL;
  	struct iscsi_conn_recovery *cr = NULL;
- 	struct iscsi_session *sess = conn->sess;
+ 	struct iscsit_session *sess = conn->sess;
  
  	/*
  	 * By following item 5 in the login table,  if we have found
@@@ -621,9 -612,9 +626,9 @@@
  	return 0;
  }
  
 -static void iscsi_post_login_start_timers(struct iscsit_conn *conn)
 +static void iscsi_post_login_start_timers(struct iscsi_conn *conn)
  {
- 	struct iscsi_session *sess = conn->sess;
+ 	struct iscsit_session *sess = conn->sess;
  	/*
  	 * FIXME: Unsolicited NopIN support for ISER
  	 */
diff --cc drivers/target/iscsi/iscsi_target_nodeattrib.c
index 208cca8a363c,874cb33c9be0..000000000000
--- a/drivers/target/iscsi/iscsi_target_nodeattrib.c
+++ b/drivers/target/iscsi/iscsi_target_nodeattrib.c
@@@ -104,8 -96,8 +104,13 @@@ int iscsit_na_nopin_timeout
  	u32 nopin_timeout)
  {
  	struct iscsi_node_attrib *a = &acl->node_attrib;
++<<<<<<< HEAD
 +	struct iscsi_session *sess;
 +	struct iscsi_conn *conn;
++=======
+ 	struct iscsit_session *sess;
+ 	struct iscsit_conn *conn;
++>>>>>>> 0873fe44e780 (scsi: target: iscsi: Rename iscsi_session to iscsit_session)
  	struct se_node_acl *se_nacl = &a->nacl->se_node_acl;
  	struct se_session *se_sess;
  	u32 orig_nopin_timeout = a->nopin_timeout;
diff --cc drivers/target/iscsi/iscsi_target_util.c
index 4a0a71687e9a,8d9f21372b67..000000000000
--- a/drivers/target/iscsi/iscsi_target_util.c
+++ b/drivers/target/iscsi/iscsi_target_util.c
@@@ -454,8 -446,8 +454,13 @@@ struct iscsi_cmd *iscsit_find_cmd_from_
  }
  
  int iscsit_find_cmd_for_recovery(
++<<<<<<< HEAD
 +	struct iscsi_session *sess,
 +	struct iscsi_cmd **cmd_ptr,
++=======
+ 	struct iscsit_session *sess,
+ 	struct iscsit_cmd **cmd_ptr,
++>>>>>>> 0873fe44e780 (scsi: target: iscsi: Rename iscsi_session to iscsit_session)
  	struct iscsi_conn_recovery **cr_ptr,
  	itt_t init_task_tag)
  {
@@@ -702,9 -694,9 +707,9 @@@ void iscsit_free_queue_reqs_for_conn(st
  	spin_unlock_bh(&conn->response_queue_lock);
  }
  
 -void iscsit_release_cmd(struct iscsit_cmd *cmd)
 +void iscsit_release_cmd(struct iscsi_cmd *cmd)
  {
- 	struct iscsi_session *sess;
+ 	struct iscsit_session *sess;
  	struct se_cmd *se_cmd = &cmd->se_cmd;
  
  	WARN_ON(!list_empty(&cmd->i_conn_node));
@@@ -808,9 -798,9 +813,13 @@@ void iscsit_inc_session_usage_count(str
  	spin_unlock_bh(&sess->session_usage_lock);
  }
  
++<<<<<<< HEAD
 +struct iscsi_conn *iscsit_get_conn_from_cid(struct iscsi_session *sess, u16 cid)
++=======
+ struct iscsit_conn *iscsit_get_conn_from_cid(struct iscsit_session *sess, u16 cid)
++>>>>>>> 0873fe44e780 (scsi: target: iscsi: Rename iscsi_session to iscsit_session)
  {
 -	struct iscsit_conn *conn;
 +	struct iscsi_conn *conn;
  
  	spin_lock_bh(&sess->conn_lock);
  	list_for_each_entry(conn, &sess->sess_conn_list, conn_list) {
@@@ -826,9 -816,9 +835,13 @@@
  	return NULL;
  }
  
++<<<<<<< HEAD
 +struct iscsi_conn *iscsit_get_conn_from_cid_rcfr(struct iscsi_session *sess, u16 cid)
++=======
+ struct iscsit_conn *iscsit_get_conn_from_cid_rcfr(struct iscsit_session *sess, u16 cid)
++>>>>>>> 0873fe44e780 (scsi: target: iscsi: Rename iscsi_session to iscsit_session)
  {
 -	struct iscsit_conn *conn;
 +	struct iscsi_conn *conn;
  
  	spin_lock_bh(&sess->conn_lock);
  	list_for_each_entry(conn, &sess->sess_conn_list, conn_list) {
@@@ -906,8 -895,8 +919,13 @@@ int iscsit_add_nopin(struct iscsi_conn 
  
  void iscsit_handle_nopin_response_timeout(struct timer_list *t)
  {
++<<<<<<< HEAD
 +	struct iscsi_conn *conn = from_timer(conn, t, nopin_response_timer);
 +	struct iscsi_session *sess = conn->sess;
++=======
+ 	struct iscsit_conn *conn = from_timer(conn, t, nopin_response_timer);
+ 	struct iscsit_session *sess = conn->sess;
++>>>>>>> 0873fe44e780 (scsi: target: iscsi: Rename iscsi_session to iscsit_session)
  
  	iscsit_inc_conn_usage_count(conn);
  
@@@ -930,9 -919,9 +948,9 @@@
  	iscsit_dec_conn_usage_count(conn);
  }
  
 -void iscsit_mod_nopin_response_timer(struct iscsit_conn *conn)
 +void iscsit_mod_nopin_response_timer(struct iscsi_conn *conn)
  {
- 	struct iscsi_session *sess = conn->sess;
+ 	struct iscsit_session *sess = conn->sess;
  	struct iscsi_node_attrib *na = iscsit_tpg_get_node_attrib(sess);
  
  	spin_lock_bh(&conn->nopin_timer_lock);
@@@ -946,9 -935,9 +964,9 @@@
  	spin_unlock_bh(&conn->nopin_timer_lock);
  }
  
 -void iscsit_start_nopin_response_timer(struct iscsit_conn *conn)
 +void iscsit_start_nopin_response_timer(struct iscsi_conn *conn)
  {
- 	struct iscsi_session *sess = conn->sess;
+ 	struct iscsit_session *sess = conn->sess;
  	struct iscsi_node_attrib *na = iscsit_tpg_get_node_attrib(sess);
  
  	spin_lock_bh(&conn->nopin_timer_lock);
@@@ -1003,9 -992,9 +1021,9 @@@ void iscsit_handle_nopin_timeout(struc
  	iscsit_dec_conn_usage_count(conn);
  }
  
 -void __iscsit_start_nopin_timer(struct iscsit_conn *conn)
 +void __iscsit_start_nopin_timer(struct iscsi_conn *conn)
  {
- 	struct iscsi_session *sess = conn->sess;
+ 	struct iscsit_session *sess = conn->sess;
  	struct iscsi_node_attrib *na = iscsit_tpg_get_node_attrib(sess);
  
  	lockdep_assert_held(&conn->nopin_timer_lock);
@@@ -1209,9 -1198,9 +1227,9 @@@ int iscsit_tx_login_rsp(struct iscsi_co
  	return conn->conn_transport->iscsit_put_login_tx(conn, login, 0);
  }
  
- void iscsit_print_session_params(struct iscsi_session *sess)
+ void iscsit_print_session_params(struct iscsit_session *sess)
  {
 -	struct iscsit_conn *conn;
 +	struct iscsi_conn *conn;
  
  	pr_debug("-----------------------------[Session Params for"
  		" SID: %u]-----------------------------\n", sess->sid);
diff --cc drivers/target/iscsi/iscsi_target_util.h
index c4474943f310,33ea799a0850..000000000000
--- a/drivers/target/iscsi/iscsi_target_util.h
+++ b/drivers/target/iscsi/iscsi_target_util.h
@@@ -7,67 -7,66 +7,109 @@@
  
  #define MARKER_SIZE	8
  
 -struct iscsit_cmd;
 -struct iscsit_conn;
 +struct iscsi_cmd;
 +struct iscsi_conn;
  struct iscsi_conn_recovery;
- struct iscsi_session;
+ struct iscsit_session;
  
 -extern int iscsit_add_r2t_to_list(struct iscsit_cmd *, u32, u32, int, u32);
 -extern struct iscsi_r2t *iscsit_get_r2t_for_eos(struct iscsit_cmd *, u32, u32);
 -extern struct iscsi_r2t *iscsit_get_r2t_from_list(struct iscsit_cmd *);
 -extern void iscsit_free_r2t(struct iscsi_r2t *, struct iscsit_cmd *);
 -extern void iscsit_free_r2ts_from_list(struct iscsit_cmd *);
 -extern struct iscsit_cmd *iscsit_alloc_cmd(struct iscsit_conn *, gfp_t);
 -extern struct iscsit_cmd *iscsit_allocate_cmd(struct iscsit_conn *, int);
 -extern struct iscsi_seq *iscsit_get_seq_holder_for_datain(struct iscsit_cmd *, u32);
 -extern struct iscsi_seq *iscsit_get_seq_holder_for_r2t(struct iscsit_cmd *);
 -extern struct iscsi_r2t *iscsit_get_holder_for_r2tsn(struct iscsit_cmd *, u32);
 -extern int iscsit_sequence_cmd(struct iscsit_conn *conn, struct iscsit_cmd *cmd,
 +extern int iscsit_add_r2t_to_list(struct iscsi_cmd *, u32, u32, int, u32);
 +extern struct iscsi_r2t *iscsit_get_r2t_for_eos(struct iscsi_cmd *, u32, u32);
 +extern struct iscsi_r2t *iscsit_get_r2t_from_list(struct iscsi_cmd *);
 +extern void iscsit_free_r2t(struct iscsi_r2t *, struct iscsi_cmd *);
 +extern void iscsit_free_r2ts_from_list(struct iscsi_cmd *);
 +extern struct iscsi_cmd *iscsit_alloc_cmd(struct iscsi_conn *, gfp_t);
 +extern struct iscsi_cmd *iscsit_allocate_cmd(struct iscsi_conn *, int);
 +extern struct iscsi_seq *iscsit_get_seq_holder_for_datain(struct iscsi_cmd *, u32);
 +extern struct iscsi_seq *iscsit_get_seq_holder_for_r2t(struct iscsi_cmd *);
 +extern struct iscsi_r2t *iscsit_get_holder_for_r2tsn(struct iscsi_cmd *, u32);
 +extern int iscsit_sequence_cmd(struct iscsi_conn *conn, struct iscsi_cmd *cmd,
  			       unsigned char * ,__be32 cmdsn);
 -extern int iscsit_check_unsolicited_dataout(struct iscsit_cmd *, unsigned char *);
 -extern struct iscsit_cmd *iscsit_find_cmd_from_itt_or_dump(struct iscsit_conn *,
 +extern int iscsit_check_unsolicited_dataout(struct iscsi_cmd *, unsigned char *);
 +extern struct iscsi_cmd *iscsit_find_cmd_from_itt_or_dump(struct iscsi_conn *,
  			itt_t, u32);
++<<<<<<< HEAD
 +extern struct iscsi_cmd *iscsit_find_cmd_from_ttt(struct iscsi_conn *, u32);
 +extern int iscsit_find_cmd_for_recovery(struct iscsi_session *, struct iscsi_cmd **,
 +			struct iscsi_conn_recovery **, itt_t);
 +extern void iscsit_add_cmd_to_immediate_queue(struct iscsi_cmd *, struct iscsi_conn *, u8);
 +extern struct iscsi_queue_req *iscsit_get_cmd_from_immediate_queue(struct iscsi_conn *);
 +extern int iscsit_add_cmd_to_response_queue(struct iscsi_cmd *, struct iscsi_conn *, u8);
 +extern struct iscsi_queue_req *iscsit_get_cmd_from_response_queue(struct iscsi_conn *);
 +extern void iscsit_remove_cmd_from_tx_queues(struct iscsi_cmd *, struct iscsi_conn *);
 +extern bool iscsit_conn_all_queues_empty(struct iscsi_conn *);
 +extern void iscsit_free_queue_reqs_for_conn(struct iscsi_conn *);
 +extern void iscsit_release_cmd(struct iscsi_cmd *);
 +extern void __iscsit_free_cmd(struct iscsi_cmd *, bool);
 +extern void iscsit_free_cmd(struct iscsi_cmd *, bool);
 +extern bool iscsit_check_session_usage_count(struct iscsi_session *sess, bool can_sleep);
 +extern void iscsit_dec_session_usage_count(struct iscsi_session *);
 +extern void iscsit_inc_session_usage_count(struct iscsi_session *);
 +extern struct iscsi_conn *iscsit_get_conn_from_cid(struct iscsi_session *, u16);
 +extern struct iscsi_conn *iscsit_get_conn_from_cid_rcfr(struct iscsi_session *, u16);
 +extern void iscsit_check_conn_usage_count(struct iscsi_conn *);
 +extern void iscsit_dec_conn_usage_count(struct iscsi_conn *);
 +extern void iscsit_inc_conn_usage_count(struct iscsi_conn *);
++=======
+ extern struct iscsit_cmd *iscsit_find_cmd_from_ttt(struct iscsit_conn *, u32);
+ extern int iscsit_find_cmd_for_recovery(struct iscsit_session *, struct iscsit_cmd **,
+ 			struct iscsi_conn_recovery **, itt_t);
+ extern void iscsit_add_cmd_to_immediate_queue(struct iscsit_cmd *, struct iscsit_conn *, u8);
+ extern struct iscsi_queue_req *iscsit_get_cmd_from_immediate_queue(struct iscsit_conn *);
+ extern int iscsit_add_cmd_to_response_queue(struct iscsit_cmd *, struct iscsit_conn *, u8);
+ extern struct iscsi_queue_req *iscsit_get_cmd_from_response_queue(struct iscsit_conn *);
+ extern void iscsit_remove_cmd_from_tx_queues(struct iscsit_cmd *, struct iscsit_conn *);
+ extern bool iscsit_conn_all_queues_empty(struct iscsit_conn *);
+ extern void iscsit_free_queue_reqs_for_conn(struct iscsit_conn *);
+ extern void iscsit_release_cmd(struct iscsit_cmd *);
+ extern void __iscsit_free_cmd(struct iscsit_cmd *, bool);
+ extern void iscsit_free_cmd(struct iscsit_cmd *, bool);
+ extern bool iscsit_check_session_usage_count(struct iscsit_session *sess, bool can_sleep);
+ extern void iscsit_dec_session_usage_count(struct iscsit_session *);
+ extern void iscsit_inc_session_usage_count(struct iscsit_session *);
+ extern struct iscsit_conn *iscsit_get_conn_from_cid(struct iscsit_session *, u16);
+ extern struct iscsit_conn *iscsit_get_conn_from_cid_rcfr(struct iscsit_session *, u16);
+ extern void iscsit_check_conn_usage_count(struct iscsit_conn *);
+ extern void iscsit_dec_conn_usage_count(struct iscsit_conn *);
+ extern void iscsit_inc_conn_usage_count(struct iscsit_conn *);
++>>>>>>> 0873fe44e780 (scsi: target: iscsi: Rename iscsi_session to iscsit_session)
  extern void iscsit_handle_nopin_response_timeout(struct timer_list *t);
 -extern void iscsit_mod_nopin_response_timer(struct iscsit_conn *);
 -extern void iscsit_start_nopin_response_timer(struct iscsit_conn *);
 -extern void iscsit_stop_nopin_response_timer(struct iscsit_conn *);
 +extern void iscsit_mod_nopin_response_timer(struct iscsi_conn *);
 +extern void iscsit_start_nopin_response_timer(struct iscsi_conn *);
 +extern void iscsit_stop_nopin_response_timer(struct iscsi_conn *);
  extern void iscsit_handle_nopin_timeout(struct timer_list *t);
++<<<<<<< HEAD
 +extern void __iscsit_start_nopin_timer(struct iscsi_conn *);
 +extern void iscsit_start_nopin_timer(struct iscsi_conn *);
 +extern void iscsit_stop_nopin_timer(struct iscsi_conn *);
 +extern int iscsit_send_tx_data(struct iscsi_cmd *, struct iscsi_conn *, int);
 +extern int iscsit_fe_sendpage_sg(struct iscsi_cmd *, struct iscsi_conn *);
 +extern int iscsit_tx_login_rsp(struct iscsi_conn *, u8, u8);
 +extern void iscsit_print_session_params(struct iscsi_session *);
 +extern int iscsit_print_dev_to_proc(char *, char **, off_t, int);
 +extern int iscsit_print_sessions_to_proc(char *, char **, off_t, int);
 +extern int iscsit_print_tpg_to_proc(char *, char **, off_t, int);
 +extern int rx_data(struct iscsi_conn *, struct kvec *, int, int);
 +extern int tx_data(struct iscsi_conn *, struct kvec *, int, int);
 +extern void iscsit_collect_login_stats(struct iscsi_conn *, u8, u8);
 +extern struct iscsi_tiqn *iscsit_snmp_get_tiqn(struct iscsi_conn *);
 +extern void iscsit_fill_cxn_timeout_err_stats(struct iscsi_session *);
 +extern int iscsit_add_nopin(struct iscsi_conn *, int);
++=======
+ extern void __iscsit_start_nopin_timer(struct iscsit_conn *);
+ extern void iscsit_start_nopin_timer(struct iscsit_conn *);
+ extern void iscsit_stop_nopin_timer(struct iscsit_conn *);
+ extern int iscsit_send_tx_data(struct iscsit_cmd *, struct iscsit_conn *, int);
+ extern int iscsit_fe_sendpage_sg(struct iscsit_cmd *, struct iscsit_conn *);
+ extern int iscsit_tx_login_rsp(struct iscsit_conn *, u8, u8);
+ extern void iscsit_print_session_params(struct iscsit_session *);
+ extern int iscsit_print_dev_to_proc(char *, char **, off_t, int);
+ extern int iscsit_print_sessions_to_proc(char *, char **, off_t, int);
+ extern int iscsit_print_tpg_to_proc(char *, char **, off_t, int);
+ extern int rx_data(struct iscsit_conn *, struct kvec *, int, int);
+ extern int tx_data(struct iscsit_conn *, struct kvec *, int, int);
+ extern void iscsit_collect_login_stats(struct iscsit_conn *, u8, u8);
+ extern struct iscsi_tiqn *iscsit_snmp_get_tiqn(struct iscsit_conn *);
+ extern void iscsit_fill_cxn_timeout_err_stats(struct iscsit_session *);
++>>>>>>> 0873fe44e780 (scsi: target: iscsi: Rename iscsi_session to iscsit_session)
  
  #endif /*** ISCSI_TARGET_UTIL_H ***/
diff --cc include/target/iscsi/iscsi_transport.h
index 878733ca584c,42cfe02ea909..000000000000
--- a/include/target/iscsi/iscsi_transport.h
+++ b/include/target/iscsi/iscsi_transport.h
@@@ -105,8 -105,7 +105,12 @@@ extern int iscsit_response_queue(struc
  /*
   * From iscsi_target_device.c
   */
++<<<<<<< HEAD
 +extern void iscsit_increment_maxcmdsn(struct iscsi_cmd *, struct iscsi_session *);
 +extern void iscsit_increment_maxcmdsn_on_release(struct iscsi_cmd *, struct iscsi_session *);
++=======
+ extern void iscsit_increment_maxcmdsn(struct iscsit_cmd *, struct iscsit_session *);
++>>>>>>> 0873fe44e780 (scsi: target: iscsi: Rename iscsi_session to iscsit_session)
  /*
   * From iscsi_target_erl0.c
   */
* Unmerged path drivers/target/iscsi/iscsi_target.c
* Unmerged path drivers/target/iscsi/iscsi_target.h
* Unmerged path drivers/target/iscsi/iscsi_target_configfs.c
* Unmerged path drivers/target/iscsi/iscsi_target_device.c
* Unmerged path drivers/target/iscsi/iscsi_target_device.h
diff --git a/drivers/target/iscsi/iscsi_target_erl0.c b/drivers/target/iscsi/iscsi_target_erl0.c
index b3290da64177..3a0729986b05 100644
--- a/drivers/target/iscsi/iscsi_target_erl0.c
+++ b/drivers/target/iscsi/iscsi_target_erl0.c
@@ -751,7 +751,7 @@ int iscsit_check_post_dataout(
 
 void iscsit_handle_time2retain_timeout(struct timer_list *t)
 {
-	struct iscsi_session *sess = from_timer(sess, t, time2retain_timer);
+	struct iscsit_session *sess = from_timer(sess, t, time2retain_timer);
 	struct iscsi_portal_group *tpg = sess->tpg;
 	struct se_portal_group *se_tpg = &tpg->tpg_se_tpg;
 
@@ -776,7 +776,7 @@ void iscsit_handle_time2retain_timeout(struct timer_list *t)
 	iscsit_close_session(sess, false);
 }
 
-void iscsit_start_time2retain_handler(struct iscsi_session *sess)
+void iscsit_start_time2retain_handler(struct iscsit_session *sess)
 {
 	int tpg_active;
 	/*
@@ -802,7 +802,7 @@ void iscsit_start_time2retain_handler(struct iscsi_session *sess)
 		  jiffies + sess->sess_ops->DefaultTime2Retain * HZ);
 }
 
-int iscsit_stop_time2retain_timer(struct iscsi_session *sess)
+int iscsit_stop_time2retain_timer(struct iscsit_session *sess)
 {
 	struct iscsi_portal_group *tpg = sess->tpg;
 	struct se_portal_group *se_tpg = &tpg->tpg_se_tpg;
@@ -888,7 +888,7 @@ void iscsit_cause_connection_reinstatement(struct iscsi_conn *conn, int sleep)
 }
 EXPORT_SYMBOL(iscsit_cause_connection_reinstatement);
 
-void iscsit_fall_back_to_erl0(struct iscsi_session *sess)
+void iscsit_fall_back_to_erl0(struct iscsit_session *sess)
 {
 	pr_debug("Falling back to ErrorRecoveryLevel=0 for SID:"
 			" %u\n", sess->sid);
@@ -898,7 +898,7 @@ void iscsit_fall_back_to_erl0(struct iscsi_session *sess)
 
 static void iscsit_handle_connection_cleanup(struct iscsi_conn *conn)
 {
-	struct iscsi_session *sess = conn->sess;
+	struct iscsit_session *sess = conn->sess;
 
 	if ((sess->sess_ops->ErrorRecoveryLevel == 2) &&
 	    !atomic_read(&sess->session_reinstatement) &&
* Unmerged path drivers/target/iscsi/iscsi_target_erl0.h
* Unmerged path drivers/target/iscsi/iscsi_target_erl1.c
* Unmerged path drivers/target/iscsi/iscsi_target_erl1.h
* Unmerged path drivers/target/iscsi/iscsi_target_erl2.c
* Unmerged path drivers/target/iscsi/iscsi_target_erl2.h
* Unmerged path drivers/target/iscsi/iscsi_target_login.c
diff --git a/drivers/target/iscsi/iscsi_target_nego.c b/drivers/target/iscsi/iscsi_target_nego.c
index c33d905112b8..de0642e4351e 100644
--- a/drivers/target/iscsi/iscsi_target_nego.c
+++ b/drivers/target/iscsi/iscsi_target_nego.c
@@ -110,7 +110,7 @@ static u32 iscsi_handle_authentication(
 	int *out_length,
 	unsigned char *authtype)
 {
-	struct iscsi_session *sess = conn->sess;
+	struct iscsit_session *sess = conn->sess;
 	struct iscsi_node_auth *auth;
 	struct iscsi_node_acl *iscsi_nacl;
 	struct iscsi_portal_group *iscsi_tpg;
@@ -1074,7 +1074,7 @@ int iscsi_target_locate_portal(
 {
 	char *i_buf = NULL, *s_buf = NULL, *t_buf = NULL;
 	char *tmpbuf, *start = NULL, *end = NULL, *key, *value;
-	struct iscsi_session *sess = conn->sess;
+	struct iscsit_session *sess = conn->sess;
 	struct iscsi_tiqn *tiqn;
 	struct iscsi_tpg_np *tpg_np = NULL;
 	struct iscsi_login_req *login_req;
@@ -1247,7 +1247,7 @@ int iscsi_target_locate_portal(
 
 	/*
 	 * conn->sess->node_acl will be set when the referenced
-	 * struct iscsi_session is located from received ISID+TSIH in
+	 * struct iscsit_session is located from received ISID+TSIH in
 	 * iscsi_login_non_zero_tsih_s2().
 	 */
 	if (!login->leading_connection) {
* Unmerged path drivers/target/iscsi/iscsi_target_nodeattrib.c
diff --git a/drivers/target/iscsi/iscsi_target_seq_pdu_list.c b/drivers/target/iscsi/iscsi_target_seq_pdu_list.c
index f65e5e584212..c3177d4e9674 100644
--- a/drivers/target/iscsi/iscsi_target_seq_pdu_list.c
+++ b/drivers/target/iscsi/iscsi_target_seq_pdu_list.c
@@ -501,7 +501,7 @@ int iscsit_build_pdu_and_seq_lists(
 	struct iscsi_pdu *pdu = NULL;
 	struct iscsi_seq *seq = NULL;
 
-	struct iscsi_session *sess = conn->sess;
+	struct iscsit_session *sess = conn->sess;
 	struct iscsi_node_attrib *na;
 
 	/*
diff --git a/drivers/target/iscsi/iscsi_target_stat.c b/drivers/target/iscsi/iscsi_target_stat.c
index edb1e42fabf2..e21ba9b52500 100644
--- a/drivers/target/iscsi/iscsi_target_stat.c
+++ b/drivers/target/iscsi/iscsi_target_stat.c
@@ -607,7 +607,7 @@ static ssize_t iscsi_stat_sess_node_show(struct config_item *item, char *page)
 {
 	struct iscsi_node_acl *acl = iscsi_stat_nacl(item);
 	struct se_node_acl *se_nacl = &acl->se_node_acl;
-	struct iscsi_session *sess;
+	struct iscsit_session *sess;
 	struct se_session *se_sess;
 	ssize_t ret = 0;
 
@@ -628,7 +628,7 @@ static ssize_t iscsi_stat_sess_indx_show(struct config_item *item, char *page)
 {
 	struct iscsi_node_acl *acl = iscsi_stat_nacl(item);
 	struct se_node_acl *se_nacl = &acl->se_node_acl;
-	struct iscsi_session *sess;
+	struct iscsit_session *sess;
 	struct se_session *se_sess;
 	ssize_t ret = 0;
 
@@ -650,7 +650,7 @@ static ssize_t iscsi_stat_sess_cmd_pdus_show(struct config_item *item,
 {
 	struct iscsi_node_acl *acl = iscsi_stat_nacl(item);
 	struct se_node_acl *se_nacl = &acl->se_node_acl;
-	struct iscsi_session *sess;
+	struct iscsit_session *sess;
 	struct se_session *se_sess;
 	ssize_t ret = 0;
 
@@ -672,7 +672,7 @@ static ssize_t iscsi_stat_sess_rsp_pdus_show(struct config_item *item,
 {
 	struct iscsi_node_acl *acl = iscsi_stat_nacl(item);
 	struct se_node_acl *se_nacl = &acl->se_node_acl;
-	struct iscsi_session *sess;
+	struct iscsit_session *sess;
 	struct se_session *se_sess;
 	ssize_t ret = 0;
 
@@ -694,7 +694,7 @@ static ssize_t iscsi_stat_sess_txdata_octs_show(struct config_item *item,
 {
 	struct iscsi_node_acl *acl = iscsi_stat_nacl(item);
 	struct se_node_acl *se_nacl = &acl->se_node_acl;
-	struct iscsi_session *sess;
+	struct iscsit_session *sess;
 	struct se_session *se_sess;
 	ssize_t ret = 0;
 
@@ -716,7 +716,7 @@ static ssize_t iscsi_stat_sess_rxdata_octs_show(struct config_item *item,
 {
 	struct iscsi_node_acl *acl = iscsi_stat_nacl(item);
 	struct se_node_acl *se_nacl = &acl->se_node_acl;
-	struct iscsi_session *sess;
+	struct iscsit_session *sess;
 	struct se_session *se_sess;
 	ssize_t ret = 0;
 
@@ -738,7 +738,7 @@ static ssize_t iscsi_stat_sess_conn_digest_errors_show(struct config_item *item,
 {
 	struct iscsi_node_acl *acl = iscsi_stat_nacl(item);
 	struct se_node_acl *se_nacl = &acl->se_node_acl;
-	struct iscsi_session *sess;
+	struct iscsit_session *sess;
 	struct se_session *se_sess;
 	ssize_t ret = 0;
 
@@ -760,7 +760,7 @@ static ssize_t iscsi_stat_sess_conn_timeout_errors_show(
 {
 	struct iscsi_node_acl *acl = iscsi_stat_nacl(item);
 	struct se_node_acl *se_nacl = &acl->se_node_acl;
-	struct iscsi_session *sess;
+	struct iscsit_session *sess;
 	struct se_session *se_sess;
 	ssize_t ret = 0;
 
diff --git a/drivers/target/iscsi/iscsi_target_tmr.c b/drivers/target/iscsi/iscsi_target_tmr.c
index cb231c907d51..af441c5ef2d4 100644
--- a/drivers/target/iscsi/iscsi_target_tmr.c
+++ b/drivers/target/iscsi/iscsi_target_tmr.c
@@ -75,7 +75,7 @@ int iscsit_tmr_task_warm_reset(
 	struct iscsi_tmr_req *tmr_req,
 	unsigned char *buf)
 {
-	struct iscsi_session *sess = conn->sess;
+	struct iscsit_session *sess = conn->sess;
 	struct iscsi_node_attrib *na = iscsit_tpg_get_node_attrib(sess);
 
 	if (!na->tmr_warm_reset) {
@@ -95,7 +95,7 @@ int iscsit_tmr_task_cold_reset(
 	struct iscsi_tmr_req *tmr_req,
 	unsigned char *buf)
 {
-	struct iscsi_session *sess = conn->sess;
+	struct iscsit_session *sess = conn->sess;
 	struct iscsi_node_attrib *na = iscsit_tpg_get_node_attrib(sess);
 
 	if (!na->tmr_cold_reset) {
@@ -185,7 +185,7 @@ u8 iscsit_tmr_task_reassign(
 static void iscsit_task_reassign_remove_cmd(
 	struct iscsi_cmd *cmd,
 	struct iscsi_conn_recovery *cr,
-	struct iscsi_session *sess)
+	struct iscsit_session *sess)
 {
 	int ret;
 
diff --git a/drivers/target/iscsi/iscsi_target_tpg.c b/drivers/target/iscsi/iscsi_target_tpg.c
index f3671ffdf149..6e67fae17e13 100644
--- a/drivers/target/iscsi/iscsi_target_tpg.c
+++ b/drivers/target/iscsi/iscsi_target_tpg.c
@@ -398,7 +398,7 @@ int iscsit_tpg_disable_portal_group(struct iscsi_portal_group *tpg, int force)
 }
 
 struct iscsi_node_attrib *iscsit_tpg_get_node_attrib(
-	struct iscsi_session *sess)
+	struct iscsit_session *sess)
 {
 	struct se_session *se_sess = sess->se_sess;
 	struct se_node_acl *se_nacl = se_sess->se_node_acl;
diff --git a/drivers/target/iscsi/iscsi_target_tpg.h b/drivers/target/iscsi/iscsi_target_tpg.h
index 88576f5d0ca4..839e45362776 100644
--- a/drivers/target/iscsi/iscsi_target_tpg.h
+++ b/drivers/target/iscsi/iscsi_target_tpg.h
@@ -5,7 +5,7 @@
 #include <linux/types.h>
 
 struct iscsi_np;
-struct iscsi_session;
+struct iscsit_session;
 struct iscsi_tiqn;
 struct iscsi_tpg_np;
 struct se_node_acl;
@@ -28,7 +28,7 @@ extern struct iscsi_node_acl *iscsit_tpg_add_initiator_node_acl(
 			struct iscsi_portal_group *, const char *, u32);
 extern void iscsit_tpg_del_initiator_node_acl(struct iscsi_portal_group *,
 			struct se_node_acl *);
-extern struct iscsi_node_attrib *iscsit_tpg_get_node_attrib(struct iscsi_session *);
+extern struct iscsi_node_attrib *iscsit_tpg_get_node_attrib(struct iscsit_session *);
 extern void iscsit_tpg_del_external_nps(struct iscsi_tpg_np *);
 extern struct iscsi_tpg_np *iscsit_tpg_locate_child_np(struct iscsi_tpg_np *, int);
 extern struct iscsi_tpg_np *iscsit_tpg_add_network_portal(struct iscsi_portal_group *,
* Unmerged path drivers/target/iscsi/iscsi_target_util.c
* Unmerged path drivers/target/iscsi/iscsi_target_util.h
diff --git a/include/target/iscsi/iscsi_target_core.h b/include/target/iscsi/iscsi_target_core.h
index 4e33298a35f2..70abe7ed3130 100644
--- a/include/target/iscsi/iscsi_target_core.h
+++ b/include/target/iscsi/iscsi_target_core.h
@@ -484,7 +484,7 @@ struct iscsi_cmd {
 	/* Pointer to connection recovery entry */
 	struct iscsi_conn_recovery *cr;
 	/* Session the command is part of,  used for connection recovery */
-	struct iscsi_session	*sess;
+	struct iscsit_session	*sess;
 	/* list_head for connection list */
 	struct list_head	i_conn_node;
 	/* The TCM I/O descriptor that is accessed via container_of() */
@@ -600,7 +600,7 @@ struct iscsi_conn {
 	struct iscsi_portal_group *tpg;
 	struct iscsi_tpg_np	*tpg_np;
 	/* Pointer to parent session */
-	struct iscsi_session	*sess;
+	struct iscsit_session	*sess;
 	int			bitmap_id;
 	int			rx_thread_active;
 	struct task_struct	*rx_thread;
@@ -620,11 +620,11 @@ struct iscsi_conn_recovery {
 	struct list_head	conn_recovery_cmd_list;
 	spinlock_t		conn_recovery_cmd_lock;
 	struct timer_list	time2retain_timer;
-	struct iscsi_session	*sess;
+	struct iscsit_session	*sess;
 	struct list_head	cr_list;
 }  ____cacheline_aligned;
 
-struct iscsi_session {
+struct iscsit_session {
 	u8			initiator_vendor;
 	u8			isid[6];
 	enum iscsi_timer_flags_table time2retain_timer_flags;
@@ -887,7 +887,7 @@ struct iscsit_global {
 	struct iscsi_portal_group	*discovery_tpg;
 };
 
-static inline u32 session_get_next_ttt(struct iscsi_session *session)
+static inline u32 session_get_next_ttt(struct iscsit_session *session)
 {
 	u32 ttt;
 
* Unmerged path include/target/iscsi/iscsi_transport.h
