lib/math/rational: add Kunit test cases

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-494.el8
commit-author Trent Piepho <tpiepho@gmail.com>
commit b6c75c4afceb8bc065a4ebb5c6c381452bf96f53
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-494.el8/b6c75c4a.failed

Adds a number of test cases that cover a range of possible code paths.

[akpm@linux-foundation.org: remove non-ascii characters, fix whitespace]
[colin.king@canonical.com: fix spelling mistake "demominator" -> "denominator"]
  Link: https://lkml.kernel.org/r/20210526085049.6393-1-colin.king@canonical.com

Link: https://lkml.kernel.org/r/20210525144250.214670-2-tpiepho@gmail.com
	Signed-off-by: Trent Piepho <tpiepho@gmail.com>
	Signed-off-by: Colin Ian King <colin.king@canonical.com>
	Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
	Cc: Daniel Latypov <dlatypov@google.com>
	Cc: Oskar Schirmer <oskar@scara.com>
	Cc: Yiyuan Guo <yguoaz@gmail.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit b6c75c4afceb8bc065a4ebb5c6c381452bf96f53)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	lib/Kconfig.debug
#	lib/math/Makefile
diff --cc lib/Kconfig.debug
index 745b2ebbbec6,ea9a4096007d..000000000000
--- a/lib/Kconfig.debug
+++ b/lib/Kconfig.debug
@@@ -2183,12 -2444,13 +2183,22 @@@ config SLUB_KUNIT_TES
  
  	  If unsure, say N.
  
++<<<<<<< HEAD
 +config MEMCPY_KUNIT_TEST
 +	tristate "Test memcpy(), memmove(), and memset() functions at runtime" if !KUNIT_ALL_TESTS
 +	depends on KUNIT
 +	default KUNIT_ALL_TESTS
 +	help
 +	  Builds unit tests for memcpy(), memmove(), and memset() functions.
++=======
+ config RATIONAL_KUNIT_TEST
+ 	tristate "KUnit test for rational.c" if !KUNIT_ALL_TESTS
+ 	depends on KUNIT
+ 	select RATIONAL
+ 	default KUNIT_ALL_TESTS
+ 	help
+ 	  This builds the rational math unit test.
++>>>>>>> b6c75c4afceb (lib/math/rational: add Kunit test cases)
  	  For more information on KUnit and unit tests in general please refer
  	  to the KUnit documentation in Documentation/dev-tools/kunit/.
  
diff --cc lib/math/Makefile
index 583bbfebfc09,bfac26ddfc22..000000000000
--- a/lib/math/Makefile
+++ b/lib/math/Makefile
@@@ -3,3 -4,6 +3,9 @@@ obj-y += div64.o gcd.o lcm.o int_pow.o 
  obj-$(CONFIG_CORDIC)		+= cordic.o
  obj-$(CONFIG_PRIME_NUMBERS)	+= prime_numbers.o
  obj-$(CONFIG_RATIONAL)		+= rational.o
++<<<<<<< HEAD
++=======
+ 
+ obj-$(CONFIG_TEST_DIV64)	+= test_div64.o
+ obj-$(CONFIG_RATIONAL_KUNIT_TEST) += rational-test.o
++>>>>>>> b6c75c4afceb (lib/math/rational: add Kunit test cases)
* Unmerged path lib/Kconfig.debug
* Unmerged path lib/math/Makefile
diff --git a/lib/math/rational-test.c b/lib/math/rational-test.c
new file mode 100644
index 000000000000..01611ddff420
--- /dev/null
+++ b/lib/math/rational-test.c
@@ -0,0 +1,56 @@
+// SPDX-License-Identifier: GPL-2.0
+
+#include <kunit/test.h>
+
+#include <linux/rational.h>
+
+struct rational_test_param {
+	unsigned long num, den;
+	unsigned long max_num, max_den;
+	unsigned long exp_num, exp_den;
+
+	const char *name;
+};
+
+static const struct rational_test_param test_parameters[] = {
+	{ 1230,	10,	100, 20,	100, 1,    "Exceeds bounds, semi-convergent term > 1/2 last term" },
+	{ 34567,100, 	120, 20,	120, 1,    "Exceeds bounds, semi-convergent term < 1/2 last term" },
+	{ 1, 30,	100, 10,	0, 1,	   "Closest to zero" },
+	{ 1, 19,	100, 10,	1, 10,     "Closest to smallest non-zero" },
+	{ 27,32,	16, 16,		11, 13,    "Use convergent" },
+	{ 1155, 7735,	255, 255,	33, 221,   "Exact answer" },
+	{ 87, 32,	70, 32,		68, 25,    "Semiconvergent, numerator limit" },
+	{ 14533, 4626,	15000, 2400,	7433, 2366, "Semiconvergent, denominator limit" },
+};
+
+static void get_desc(const struct rational_test_param *param, char *desc)
+{
+	strscpy(desc, param->name, KUNIT_PARAM_DESC_SIZE);
+}
+
+/* Creates function rational_gen_params */
+KUNIT_ARRAY_PARAM(rational, test_parameters, get_desc);
+
+static void rational_test(struct kunit *test)
+{
+	const struct rational_test_param *param = (const struct rational_test_param *)test->param_value;
+	unsigned long n = 0, d = 0;
+
+	rational_best_approximation(param->num, param->den, param->max_num, param->max_den, &n, &d);
+	KUNIT_EXPECT_EQ(test, n, param->exp_num);
+	KUNIT_EXPECT_EQ(test, d, param->exp_den);
+}
+
+static struct kunit_case rational_test_cases[] = {
+	KUNIT_CASE_PARAM(rational_test, rational_gen_params),
+	{}
+};
+
+static struct kunit_suite rational_test_suite = {
+	.name = "rational",
+	.test_cases = rational_test_cases,
+};
+
+kunit_test_suites(&rational_test_suite);
+
+MODULE_LICENSE("GPL v2");
