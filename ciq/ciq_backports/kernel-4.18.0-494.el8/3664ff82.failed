dm: add helper macro for simple DM target module init and exit

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-494.el8
commit-author Yangtao Li <frank.li@vivo.com>
commit 3664ff82dae1ef9f14f7763d3dd30565e7ef9e14
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-494.el8/3664ff82.failed

Eliminate duplicate boilerplate code for simple modules that contain
a single DM target driver without any additional setup code.

Add a new module_dm() macro, which replaces the module_init() and
module_exit() with template functions that call dm_register_target()
and dm_unregister_target() respectively.

	Signed-off-by: Yangtao Li <frank.li@vivo.com>
	Signed-off-by: Mike Snitzer <snitzer@kernel.org>
(cherry picked from commit 3664ff82dae1ef9f14f7763d3dd30565e7ef9e14)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/md/dm-crypt.c
#	drivers/md/dm-delay.c
#	drivers/md/dm-dust.c
#	drivers/md/dm-ebs-target.c
#	drivers/md/dm-era-target.c
#	drivers/md/dm-flakey.c
#	drivers/md/dm-log-writes.c
#	drivers/md/dm-switch.c
#	drivers/md/dm-verity-target.c
#	drivers/md/dm-writecache.c
#	drivers/md/dm-zero.c
diff --cc drivers/md/dm-crypt.c
index eb57e4bb06b5,8b47b913ee83..000000000000
--- a/drivers/md/dm-crypt.c
+++ b/drivers/md/dm-crypt.c
@@@ -3536,25 -3659,7 +3536,29 @@@ static struct target_type crypt_target 
  	.iterate_devices = crypt_iterate_devices,
  	.io_hints = crypt_io_hints,
  };
++<<<<<<< HEAD
 +
 +static int __init dm_crypt_init(void)
 +{
 +	int r;
 +
 +	r = dm_register_target(&crypt_target);
 +	if (r < 0)
 +		DMERR("register failed %d", r);
 +
 +	return r;
 +}
 +
 +static void __exit dm_crypt_exit(void)
 +{
 +	dm_unregister_target(&crypt_target);
 +}
 +
 +module_init(dm_crypt_init);
 +module_exit(dm_crypt_exit);
++=======
+ module_dm(crypt);
++>>>>>>> 3664ff82dae1 (dm: add helper macro for simple DM target module init and exit)
  
  MODULE_AUTHOR("Jana Saout <jana@saout.de>");
  MODULE_DESCRIPTION(DM_NAME " target for transparent encryption / decryption");
diff --cc drivers/md/dm-delay.c
index 213d4d779155,7433525e5985..000000000000
--- a/drivers/md/dm-delay.c
+++ b/drivers/md/dm-delay.c
@@@ -362,31 -367,7 +362,35 @@@ static struct target_type delay_target 
  	.status	     = delay_status,
  	.iterate_devices = delay_iterate_devices,
  };
++<<<<<<< HEAD
 +
 +static int __init dm_delay_init(void)
 +{
 +	int r;
 +
 +	r = dm_register_target(&delay_target);
 +	if (r < 0) {
 +		DMERR("register failed %d", r);
 +		goto bad_register;
 +	}
 +
 +	return 0;
 +
 +bad_register:
 +	return r;
 +}
 +
 +static void __exit dm_delay_exit(void)
 +{
 +	dm_unregister_target(&delay_target);
 +}
 +
 +/* Module hooks */
 +module_init(dm_delay_init);
 +module_exit(dm_delay_exit);
++=======
+ module_dm(delay);
++>>>>>>> 3664ff82dae1 (dm: add helper macro for simple DM target module init and exit)
  
  MODULE_DESCRIPTION(DM_NAME " delay target");
  MODULE_AUTHOR("Heinz Mauelshagen <mauelshagen@redhat.com>");
diff --cc drivers/md/dm-era-target.c
index f8193a036190,0d70914217ee..000000000000
--- a/drivers/md/dm-era-target.c
+++ b/drivers/md/dm-era-target.c
@@@ -1739,27 -1753,7 +1739,31 @@@ static struct target_type era_target = 
  	.iterate_devices = era_iterate_devices,
  	.io_hints = era_io_hints
  };
++<<<<<<< HEAD
 +
 +static int __init dm_era_init(void)
 +{
 +	int r;
 +
 +	r = dm_register_target(&era_target);
 +	if (r) {
 +		DMERR("era target registration failed: %d", r);
 +		return r;
 +	}
 +
 +	return 0;
 +}
 +
 +static void __exit dm_era_exit(void)
 +{
 +	dm_unregister_target(&era_target);
 +}
 +
 +module_init(dm_era_init);
 +module_exit(dm_era_exit);
++=======
+ module_dm(era);
++>>>>>>> 3664ff82dae1 (dm: add helper macro for simple DM target module init and exit)
  
  MODULE_DESCRIPTION(DM_NAME " era target");
  MODULE_AUTHOR("Joe Thornber <ejt@redhat.com>");
diff --cc drivers/md/dm-flakey.c
index fe966d201e60,ebcfb99b186b..000000000000
--- a/drivers/md/dm-flakey.c
+++ b/drivers/md/dm-flakey.c
@@@ -499,25 -506,7 +499,29 @@@ static struct target_type flakey_targe
  	.prepare_ioctl = flakey_prepare_ioctl,
  	.iterate_devices = flakey_iterate_devices,
  };
++<<<<<<< HEAD
 +
 +static int __init dm_flakey_init(void)
 +{
 +	int r = dm_register_target(&flakey_target);
 +
 +	if (r < 0)
 +		DMERR("register failed %d", r);
 +
 +	return r;
 +}
 +
 +static void __exit dm_flakey_exit(void)
 +{
 +	dm_unregister_target(&flakey_target);
 +}
 +
 +/* Module hooks */
 +module_init(dm_flakey_init);
 +module_exit(dm_flakey_exit);
++=======
+ module_dm(flakey);
++>>>>>>> 3664ff82dae1 (dm: add helper macro for simple DM target module init and exit)
  
  MODULE_DESCRIPTION(DM_NAME " flakey target");
  MODULE_AUTHOR("Joe Thornber <dm-devel@redhat.com>");
diff --cc drivers/md/dm-log-writes.c
index e3d35c6c9f71,f17a6cf2284e..000000000000
--- a/drivers/md/dm-log-writes.c
+++ b/drivers/md/dm-log-writes.c
@@@ -1030,28 -934,10 +1030,32 @@@ static struct target_type log_writes_ta
  	.iterate_devices = log_writes_iterate_devices,
  	.io_hints = log_writes_io_hints,
  	.direct_access = log_writes_dax_direct_access,
 +	.dax_copy_from_iter = log_writes_dax_copy_from_iter,
 +	.dax_copy_to_iter = log_writes_dax_copy_to_iter,
  	.dax_zero_page_range = log_writes_dax_zero_page_range,
 -	.dax_recovery_write = log_writes_dax_recovery_write,
  };
++<<<<<<< HEAD
 +
 +static int __init dm_log_writes_init(void)
 +{
 +	int r = dm_register_target(&log_writes_target);
 +
 +	if (r < 0)
 +		DMERR("register failed %d", r);
 +
 +	return r;
 +}
 +
 +static void __exit dm_log_writes_exit(void)
 +{
 +	dm_unregister_target(&log_writes_target);
 +}
 +
 +module_init(dm_log_writes_init);
 +module_exit(dm_log_writes_exit);
++=======
+ module_dm(log_writes);
++>>>>>>> 3664ff82dae1 (dm: add helper macro for simple DM target module init and exit)
  
  MODULE_DESCRIPTION(DM_NAME " log writes target");
  MODULE_AUTHOR("Josef Bacik <jbacik@fb.com>");
diff --cc drivers/md/dm-switch.c
index 262e2b0fd975,dfd9fb52a6f3..000000000000
--- a/drivers/md/dm-switch.c
+++ b/drivers/md/dm-switch.c
@@@ -560,25 -565,7 +560,29 @@@ static struct target_type switch_targe
  	.prepare_ioctl = switch_prepare_ioctl,
  	.iterate_devices = switch_iterate_devices,
  };
++<<<<<<< HEAD
 +
 +static int __init dm_switch_init(void)
 +{
 +	int r;
 +
 +	r = dm_register_target(&switch_target);
 +	if (r < 0)
 +		DMERR("dm_register_target() failed %d", r);
 +
 +	return r;
 +}
 +
 +static void __exit dm_switch_exit(void)
 +{
 +	dm_unregister_target(&switch_target);
 +}
 +
 +module_init(dm_switch_init);
 +module_exit(dm_switch_exit);
++=======
+ module_dm(switch);
++>>>>>>> 3664ff82dae1 (dm: add helper macro for simple DM target module init and exit)
  
  MODULE_DESCRIPTION(DM_NAME " dynamic path switching target");
  MODULE_AUTHOR("Kevin D. O'Kelley <Kevin_OKelley@dell.com>");
diff --cc drivers/md/dm-verity-target.c
index 796e7a784265,e35c16e06d06..000000000000
--- a/drivers/md/dm-verity-target.c
+++ b/drivers/md/dm-verity-target.c
@@@ -1406,25 -1514,7 +1406,29 @@@ static struct target_type verity_targe
  	.iterate_devices = verity_iterate_devices,
  	.io_hints	= verity_io_hints,
  };
++<<<<<<< HEAD
 +
 +static int __init dm_verity_init(void)
 +{
 +	int r;
 +
 +	r = dm_register_target(&verity_target);
 +	if (r < 0)
 +		DMERR("register failed %d", r);
 +
 +	return r;
 +}
 +
 +static void __exit dm_verity_exit(void)
 +{
 +	dm_unregister_target(&verity_target);
 +}
 +
 +module_init(dm_verity_init);
 +module_exit(dm_verity_exit);
++=======
+ module_dm(verity);
++>>>>>>> 3664ff82dae1 (dm: add helper macro for simple DM target module init and exit)
  
  MODULE_AUTHOR("Mikulas Patocka <mpatocka@redhat.com>");
  MODULE_AUTHOR("Mandeep Baines <msb@chromium.org>");
diff --cc drivers/md/dm-writecache.c
index bb164ba09d0c,074cb785eafc..000000000000
--- a/drivers/md/dm-writecache.c
+++ b/drivers/md/dm-writecache.c
@@@ -2739,27 -2773,7 +2739,31 @@@ static struct target_type writecache_ta
  	.iterate_devices	= writecache_iterate_devices,
  	.io_hints		= writecache_io_hints,
  };
++<<<<<<< HEAD
 +
 +static int __init dm_writecache_init(void)
 +{
 +	int r;
 +
 +	r = dm_register_target(&writecache_target);
 +	if (r < 0) {
 +		DMERR("register failed %d", r);
 +		return r;
 +	}
 +
 +	return 0;
 +}
 +
 +static void __exit dm_writecache_exit(void)
 +{
 +	dm_unregister_target(&writecache_target);
 +}
 +
 +module_init(dm_writecache_init);
 +module_exit(dm_writecache_exit);
++=======
+ module_dm(writecache);
++>>>>>>> 3664ff82dae1 (dm: add helper macro for simple DM target module init and exit)
  
  MODULE_DESCRIPTION(DM_NAME " writecache target");
  MODULE_AUTHOR("Mikulas Patocka <dm-devel@redhat.com>");
diff --cc drivers/md/dm-zero.c
index 2d605afcb66a,3b13e6eb1aa4..000000000000
--- a/drivers/md/dm-zero.c
+++ b/drivers/md/dm-zero.c
@@@ -74,24 -75,7 +74,28 @@@ static struct target_type zero_target 
  	.map    = zero_map,
  	.io_hints = zero_io_hints,
  };
++<<<<<<< HEAD
 +
 +static int __init dm_zero_init(void)
 +{
 +	int r = dm_register_target(&zero_target);
 +
 +	if (r < 0)
 +		DMERR("register failed %d", r);
 +
 +	return r;
 +}
 +
 +static void __exit dm_zero_exit(void)
 +{
 +	dm_unregister_target(&zero_target);
 +}
 +
 +module_init(dm_zero_init)
 +module_exit(dm_zero_exit)
++=======
+ module_dm(zero);
++>>>>>>> 3664ff82dae1 (dm: add helper macro for simple DM target module init and exit)
  
  MODULE_AUTHOR("Jana Saout <jana@saout.de>");
  MODULE_DESCRIPTION(DM_NAME " dummy target returning zeros");
* Unmerged path drivers/md/dm-dust.c
* Unmerged path drivers/md/dm-ebs-target.c
* Unmerged path drivers/md/dm-crypt.c
* Unmerged path drivers/md/dm-delay.c
* Unmerged path drivers/md/dm-dust.c
* Unmerged path drivers/md/dm-ebs-target.c
* Unmerged path drivers/md/dm-era-target.c
* Unmerged path drivers/md/dm-flakey.c
* Unmerged path drivers/md/dm-log-writes.c
diff --git a/drivers/md/dm-raid.c b/drivers/md/dm-raid.c
index c7dad9f2387b..454375eae392 100644
--- a/drivers/md/dm-raid.c
+++ b/drivers/md/dm-raid.c
@@ -4063,23 +4063,7 @@ static struct target_type raid_target = {
 	.preresume = raid_preresume,
 	.resume = raid_resume,
 };
-
-static int __init dm_raid_init(void)
-{
-	DMINFO("Loading target version %u.%u.%u",
-	       raid_target.version[0],
-	       raid_target.version[1],
-	       raid_target.version[2]);
-	return dm_register_target(&raid_target);
-}
-
-static void __exit dm_raid_exit(void)
-{
-	dm_unregister_target(&raid_target);
-}
-
-module_init(dm_raid_init);
-module_exit(dm_raid_exit);
+module_dm(raid);
 
 module_param(devices_handle_discard_safely, bool, 0644);
 MODULE_PARM_DESC(devices_handle_discard_safely,
* Unmerged path drivers/md/dm-switch.c
diff --git a/drivers/md/dm-unstripe.c b/drivers/md/dm-unstripe.c
index 7357c1bd5863..1b4c224ae1d3 100644
--- a/drivers/md/dm-unstripe.c
+++ b/drivers/md/dm-unstripe.c
@@ -187,19 +187,7 @@ static struct target_type unstripe_target = {
 	.iterate_devices = unstripe_iterate_devices,
 	.io_hints = unstripe_io_hints,
 };
-
-static int __init dm_unstripe_init(void)
-{
-	return dm_register_target(&unstripe_target);
-}
-
-static void __exit dm_unstripe_exit(void)
-{
-	dm_unregister_target(&unstripe_target);
-}
-
-module_init(dm_unstripe_init);
-module_exit(dm_unstripe_exit);
+module_dm(unstripe);
 
 MODULE_DESCRIPTION(DM_NAME " unstriped target");
 MODULE_ALIAS("dm-unstriped");
* Unmerged path drivers/md/dm-verity-target.c
* Unmerged path drivers/md/dm-writecache.c
* Unmerged path drivers/md/dm-zero.c
diff --git a/drivers/md/dm-zoned-target.c b/drivers/md/dm-zoned-target.c
index c95f000edfe6..dc8f4192d8ae 100644
--- a/drivers/md/dm-zoned-target.c
+++ b/drivers/md/dm-zoned-target.c
@@ -938,7 +938,7 @@ static int dmz_iterate_devices(struct dm_target *ti,
 	return fn(ti, dmz->ddev, 0, capacity, data);
 }
 
-static struct target_type dmz_type = {
+static struct target_type zoned_target = {
 	.name		 = "zoned",
 	.version	 = {1, 0, 0},
 	.features	 = DM_TARGET_SINGLETON | DM_TARGET_MIXED_ZONED_MODEL,
@@ -953,19 +953,7 @@ static struct target_type dmz_type = {
 	.resume		 = dmz_resume,
 	.iterate_devices = dmz_iterate_devices,
 };
-
-static int __init dmz_init(void)
-{
-	return dm_register_target(&dmz_type);
-}
-
-static void __exit dmz_exit(void)
-{
-	dm_unregister_target(&dmz_type);
-}
-
-module_init(dmz_init);
-module_exit(dmz_exit);
+module_dm(zoned);
 
 MODULE_DESCRIPTION(DM_NAME " target for zoned block devices");
 MODULE_AUTHOR("Damien Le Moal <damien.lemoal@wdc.com>");
diff --git a/include/linux/device-mapper.h b/include/linux/device-mapper.h
index baa823f06474..85445b6a0bde 100644
--- a/include/linux/device-mapper.h
+++ b/include/linux/device-mapper.h
@@ -599,6 +599,26 @@ struct dm_table *dm_swap_table(struct mapped_device *md,
 #define DMEMIT(x...) sz += ((sz >= maxlen) ? \
 			  0 : scnprintf(result + sz, maxlen - sz, x))
 
+/**
+ * module_dm() - Helper macro for DM targets that don't do anything
+ * special in their module_init and module_exit.
+ * Each module may only use this macro once, and calling it replaces
+ * module_init() and module_exit().
+ *
+ * @name: DM target's name
+ */
+#define module_dm(name) \
+static int __init dm_##name##_init(void) \
+{ \
+	return dm_register_target(&(name##_target)); \
+} \
+module_init(dm_##name##_init) \
+static void __exit dm_##name##_exit(void) \
+{ \
+	dm_unregister_target(&(name##_target)); \
+} \
+module_exit(dm_##name##_exit)
+
 /*
  * Definitions of return values from target end_io function.
  */
