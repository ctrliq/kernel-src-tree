s390/ipl: add DEFINE_GENERIC_LOADPARM()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-494.el8
commit-author Sven Schnelle <svens@linux.ibm.com>
commit c676aac66f5b2b03a1090bc6b1891486255f7159
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-494.el8/c676aac6.failed

In the current code each reipl type implements its own pair of loadparm
show/store functions. Add a macro to deduplicate the code a bit.

	Reviewed-by: Heiko Carstens <hca@linux.ibm.com>
	Signed-off-by: Sven Schnelle <svens@linux.ibm.com>
Fixes: 87fd22e0ae92 ("s390/ipl: add eckd support")
	Cc: <stable@vger.kernel.org>
	Signed-off-by: Heiko Carstens <hca@linux.ibm.com>
(cherry picked from commit c676aac66f5b2b03a1090bc6b1891486255f7159)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/s390/kernel/ipl.c
diff --cc arch/s390/kernel/ipl.c
index 0b4f185cc612,d7b433261145..000000000000
--- a/arch/s390/kernel/ipl.c
+++ b/arch/s390/kernel/ipl.c
@@@ -877,23 -888,26 +877,39 @@@ static ssize_t reipl_generic_loadparm_s
  	return len;
  }
  
- /* FCP wrapper */
- static ssize_t reipl_fcp_loadparm_show(struct kobject *kobj,
- 				       struct kobj_attribute *attr, char *page)
- {
- 	return reipl_generic_loadparm_show(reipl_block_fcp, page);
- }
- 
+ #define DEFINE_GENERIC_LOADPARM(name)							\
+ static ssize_t reipl_##name##_loadparm_show(struct kobject *kobj,			\
+ 					    struct kobj_attribute *attr, char *page)	\
+ {											\
+ 	return reipl_generic_loadparm_show(reipl_block_##name, page);			\
+ }											\
+ static ssize_t reipl_##name##_loadparm_store(struct kobject *kobj,			\
+ 					     struct kobj_attribute *attr,		\
+ 					     const char *buf, size_t len)		\
+ {											\
+ 	return reipl_generic_loadparm_store(reipl_block_##name, buf, len);		\
+ }											\
+ static struct kobj_attribute sys_reipl_##name##_loadparm_attr =				\
+ 	__ATTR(loadparm, 0644, reipl_##name##_loadparm_show,				\
+ 	       reipl_##name##_loadparm_store)
+ 
++<<<<<<< HEAD
 +static ssize_t reipl_fcp_loadparm_store(struct kobject *kobj,
 +					struct kobj_attribute *attr,
 +					const char *buf, size_t len)
 +{
 +	return reipl_generic_loadparm_store(reipl_block_fcp, buf, len);
 +}
 +
 +static struct kobj_attribute sys_reipl_fcp_loadparm_attr =
 +	__ATTR(loadparm, S_IRUGO | S_IWUSR, reipl_fcp_loadparm_show,
 +					    reipl_fcp_loadparm_store);
++=======
+ DEFINE_GENERIC_LOADPARM(fcp);
+ DEFINE_GENERIC_LOADPARM(nvme);
+ DEFINE_GENERIC_LOADPARM(ccw);
+ DEFINE_GENERIC_LOADPARM(nss);
++>>>>>>> c676aac66f5b (s390/ipl: add DEFINE_GENERIC_LOADPARM())
  
  static ssize_t reipl_fcp_clear_show(struct kobject *kobj,
  				    struct kobj_attribute *attr, char *page)
@@@ -983,24 -997,6 +999,27 @@@ DEFINE_IPL_ATTR_RW(reipl_nvme, bootprog
  DEFINE_IPL_ATTR_RW(reipl_nvme, br_lba, "%lld\n", "%lld\n",
  		   reipl_block_nvme->nvme.br_lba);
  
++<<<<<<< HEAD
 +/* nvme wrapper */
 +static ssize_t reipl_nvme_loadparm_show(struct kobject *kobj,
 +				       struct kobj_attribute *attr, char *page)
 +{
 +	return reipl_generic_loadparm_show(reipl_block_nvme, page);
 +}
 +
 +static ssize_t reipl_nvme_loadparm_store(struct kobject *kobj,
 +					struct kobj_attribute *attr,
 +					const char *buf, size_t len)
 +{
 +	return reipl_generic_loadparm_store(reipl_block_nvme, buf, len);
 +}
 +
 +static struct kobj_attribute sys_reipl_nvme_loadparm_attr =
 +	__ATTR(loadparm, S_IRUGO | S_IWUSR, reipl_nvme_loadparm_show,
 +					    reipl_nvme_loadparm_store);
 +
++=======
++>>>>>>> c676aac66f5b (s390/ipl: add DEFINE_GENERIC_LOADPARM())
  static struct attribute *reipl_nvme_attrs[] = {
  	&sys_reipl_nvme_fid_attr.attr,
  	&sys_reipl_nvme_nsid_attr.attr,
@@@ -1036,38 -1032,6 +1055,41 @@@ static struct kobj_attribute sys_reipl_
  /* CCW reipl device attributes */
  DEFINE_IPL_CCW_ATTR_RW(reipl_ccw, device, reipl_block_ccw->ccw);
  
++<<<<<<< HEAD
 +/* NSS wrapper */
 +static ssize_t reipl_nss_loadparm_show(struct kobject *kobj,
 +				       struct kobj_attribute *attr, char *page)
 +{
 +	return reipl_generic_loadparm_show(reipl_block_nss, page);
 +}
 +
 +static ssize_t reipl_nss_loadparm_store(struct kobject *kobj,
 +					struct kobj_attribute *attr,
 +					const char *buf, size_t len)
 +{
 +	return reipl_generic_loadparm_store(reipl_block_nss, buf, len);
 +}
 +
 +/* CCW wrapper */
 +static ssize_t reipl_ccw_loadparm_show(struct kobject *kobj,
 +				       struct kobj_attribute *attr, char *page)
 +{
 +	return reipl_generic_loadparm_show(reipl_block_ccw, page);
 +}
 +
 +static ssize_t reipl_ccw_loadparm_store(struct kobject *kobj,
 +					struct kobj_attribute *attr,
 +					const char *buf, size_t len)
 +{
 +	return reipl_generic_loadparm_store(reipl_block_ccw, buf, len);
 +}
 +
 +static struct kobj_attribute sys_reipl_ccw_loadparm_attr =
 +	__ATTR(loadparm, S_IRUGO | S_IWUSR, reipl_ccw_loadparm_show,
 +					    reipl_ccw_loadparm_store);
 +
++=======
++>>>>>>> c676aac66f5b (s390/ipl: add DEFINE_GENERIC_LOADPARM())
  static ssize_t reipl_ccw_clear_show(struct kobject *kobj,
  				    struct kobj_attribute *attr, char *page)
  {
@@@ -1237,13 -1201,9 +1259,16 @@@ static ssize_t reipl_nss_name_store(str
  }
  
  static struct kobj_attribute sys_reipl_nss_name_attr =
 -	__ATTR(name, 0644, reipl_nss_name_show,
 -	       reipl_nss_name_store);
 +	__ATTR(name, S_IRUGO | S_IWUSR, reipl_nss_name_show,
 +					reipl_nss_name_store);
  
++<<<<<<< HEAD
 +static struct kobj_attribute sys_reipl_nss_loadparm_attr =
 +	__ATTR(loadparm, S_IRUGO | S_IWUSR, reipl_nss_loadparm_show,
 +					    reipl_nss_loadparm_store);
 +
++=======
++>>>>>>> c676aac66f5b (s390/ipl: add DEFINE_GENERIC_LOADPARM())
  static struct attribute *reipl_nss_attrs[] = {
  	&sys_reipl_nss_name_attr.attr,
  	&sys_reipl_nss_loadparm_attr.attr,
* Unmerged path arch/s390/kernel/ipl.c
