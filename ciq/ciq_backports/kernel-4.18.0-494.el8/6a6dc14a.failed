vfio/ccw: calculate number of IDAWs regardless of format

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-494.el8
commit-author Eric Farman <farman@linux.ibm.com>
commit 6a6dc14ac84733cf5864a7cf9f5b3e43f6a79be8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-494.el8/6a6dc14a.failed

The idal_nr_words() routine works well for 4K IDAWs, but lost its
ability to handle the old 2K formats with the removal of 31-bit
builds in commit 5a79859ae0f3 ("s390: remove 31 bit support").

Since there's nothing preventing a guest from generating this IDAW
format, let's re-introduce the math for them and use both when
calculating the number of IDAWs based on the bits specified in
the ORB.

	Signed-off-by: Eric Farman <farman@linux.ibm.com>
	Reviewed-by: Matthew Rosato <mjrosato@linux.ibm.com>
	Signed-off-by: Heiko Carstens <hca@linux.ibm.com>
(cherry picked from commit 6a6dc14ac84733cf5864a7cf9f5b3e43f6a79be8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/s390/cio/vfio_ccw_cp.c
diff --cc drivers/s390/cio/vfio_ccw_cp.c
index 3054373c1ee5,6a2c6ee83807..000000000000
--- a/drivers/s390/cio/vfio_ccw_cp.c
+++ b/drivers/s390/cio/vfio_ccw_cp.c
@@@ -504,20 -496,29 +504,39 @@@ static int ccwchain_fetch_tic(struct cc
  	return -EFAULT;
  }
  
++<<<<<<< HEAD
 +static int ccwchain_fetch_direct(struct ccwchain *chain,
 +				 int idx,
 +				 struct channel_program *cp)
++=======
+ /*
+  * ccw_count_idaws() - Calculate the number of IDAWs needed to transfer
+  * a specified amount of data
+  *
+  * @ccw: The Channel Command Word being translated
+  * @cp: Channel Program being processed
+  *
+  * The ORB is examined, since it specifies what IDAWs could actually be
+  * used by any CCW in the channel program, regardless of whether or not
+  * the CCW actually does. An ORB that does not specify Format-2-IDAW
+  * Control could still contain a CCW with an IDAL, which would be
+  * Format-1 and thus only move 2K with each IDAW. Thus all CCWs within
+  * the channel program must follow the same size requirements.
+  */
+ static int ccw_count_idaws(struct ccw1 *ccw,
+ 			   struct channel_program *cp)
++>>>>>>> 6a6dc14ac847 (vfio/ccw: calculate number of IDAWs regardless of format)
  {
 -	struct vfio_device *vdev =
 -		&container_of(cp, struct vfio_ccw_private, cp)->vdev;
 +	struct ccw1 *ccw;
 +	struct pfn_array *pa;
  	u64 iova;
 -	int size = cp->orb.cmd.c64 ? sizeof(u64) : sizeof(u32);
 +	unsigned long *idaws;
  	int ret;
  	int bytes = 1;
 +	int idaw_nr, idal_len;
 +	int i;
 +
 +	ccw = chain->ch_ccw + idx;
  
  	if (ccw->count)
  		bytes = ccw->count;
@@@ -532,7 -532,42 +551,39 @@@
  	} else {
  		iova = ccw->cda;
  	}
++<<<<<<< HEAD
 +	idaw_nr = idal_nr_words((void *)iova, bytes);
++=======
+ 
+ 	/* Format-1 IDAWs operate on 2K each */
+ 	if (!cp->orb.cmd.c64)
+ 		return idal_2k_nr_words((void *)iova, bytes);
+ 
+ 	/* Using the 2K variant of Format-2 IDAWs? */
+ 	if (cp->orb.cmd.i2k)
+ 		return idal_2k_nr_words((void *)iova, bytes);
+ 
+ 	/* The 'usual' case is 4K Format-2 IDAWs */
+ 	return idal_nr_words((void *)iova, bytes);
+ }
+ 
+ static int ccwchain_fetch_ccw(struct ccw1 *ccw,
+ 			      struct page_array *pa,
+ 			      struct channel_program *cp)
+ {
+ 	struct vfio_device *vdev =
+ 		&container_of(cp, struct vfio_ccw_private, cp)->vdev;
+ 	unsigned long *idaws;
+ 	int ret;
+ 	int idaw_nr, idal_len;
+ 	int i;
+ 
+ 	/* Calculate size of IDAL */
+ 	idaw_nr = ccw_count_idaws(ccw, cp);
+ 	if (idaw_nr < 0)
+ 		return idaw_nr;
+ 
++>>>>>>> 6a6dc14ac847 (vfio/ccw: calculate number of IDAWs regardless of format)
  	idal_len = idaw_nr * sizeof(*idaws);
  
  	/* Allocate an IDAL from host storage */
diff --git a/arch/s390/include/asm/idals.h b/arch/s390/include/asm/idals.h
index 15578fd762f6..2795ffa779f3 100644
--- a/arch/s390/include/asm/idals.h
+++ b/arch/s390/include/asm/idals.h
@@ -23,6 +23,9 @@
 #define IDA_SIZE_LOG 12 /* 11 for 2k , 12 for 4k */
 #define IDA_BLOCK_SIZE (1L<<IDA_SIZE_LOG)
 
+#define IDA_2K_SIZE_LOG 11
+#define IDA_2K_BLOCK_SIZE (1L << IDA_2K_SIZE_LOG)
+
 /*
  * Test if an address/length pair needs an idal list.
  */
@@ -42,6 +45,15 @@ static inline unsigned int idal_nr_words(void *vaddr, unsigned int length)
 		(IDA_BLOCK_SIZE-1)) >> IDA_SIZE_LOG;
 }
 
+/*
+ * Return the number of 2K IDA words needed for an address/length pair.
+ */
+static inline unsigned int idal_2k_nr_words(void *vaddr, unsigned int length)
+{
+	return ((__pa(vaddr) & (IDA_2K_BLOCK_SIZE - 1)) + length +
+		(IDA_2K_BLOCK_SIZE - 1)) >> IDA_2K_SIZE_LOG;
+}
+
 /*
  * Create the list of idal words for an address/length pair.
  */
* Unmerged path drivers/s390/cio/vfio_ccw_cp.c
