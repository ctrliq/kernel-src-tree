RDMA/mlx5: Set ODP caps only if device profile support ODP

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-373.el8
commit-author Shay Drory <shayd@nvidia.com>
commit e5dc370bd9d6ea1c692c83f2b64a4204c0fa48fb
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-373.el8/e5dc370b.failed

Currently, ODP caps are set during the init stage of mlx5_ib_dev,
regardless of whether the device profile supports ODP or not.  There is no
point in setting ODP caps if the device profile doesn't support
ODP. Hence, move setting the ODP caps to the odp_init stage.

Link: https://lore.kernel.org/r/20210318135259.681264-1-leon@kernel.org
	Reviewed-by: Maor Gottlieb <maorg@nvidia.com>
	Signed-off-by: Shay Drory <shayd@nvidia.com>
	Signed-off-by: Leon Romanovsky <leonro@nvidia.com>
	Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
(cherry picked from commit e5dc370bd9d6ea1c692c83f2b64a4204c0fa48fb)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/hw/mlx5/odp.c
diff --cc drivers/infiniband/hw/mlx5/odp.c
index 4701fc81d8a6,782b2af8f211..000000000000
--- a/drivers/infiniband/hw/mlx5/odp.c
+++ b/drivers/infiniband/hw/mlx5/odp.c
@@@ -334,9 -310,14 +334,17 @@@ void mlx5_ib_invalidate_range(struct ib
  		destroy_unused_implicit_child_mr(mr);
  out:
  	mutex_unlock(&umem_odp->umem_mutex);
 -	return true;
  }
  
++<<<<<<< HEAD
 +void mlx5_ib_internal_fill_odp_caps(struct mlx5_ib_dev *dev)
++=======
+ const struct mmu_interval_notifier_ops mlx5_mn_ops = {
+ 	.invalidate = mlx5_ib_invalidate_range,
+ };
+ 
+ static void internal_fill_odp_caps(struct mlx5_ib_dev *dev)
++>>>>>>> e5dc370bd9d6 (RDMA/mlx5: Set ODP caps only if device profile support ODP)
  {
  	struct ib_odp_caps *caps = &dev->odp_caps;
  
diff --git a/drivers/infiniband/hw/mlx5/main.c b/drivers/infiniband/hw/mlx5/main.c
index 476da6f5435a..46c013720296 100644
--- a/drivers/infiniband/hw/mlx5/main.c
+++ b/drivers/infiniband/hw/mlx5/main.c
@@ -3898,8 +3898,6 @@ static int mlx5_ib_stage_init_init(struct mlx5_ib_dev *dev)
 		dev->port[i].roce.last_port_state = IB_PORT_DOWN;
 	}
 
-	mlx5_ib_internal_fill_odp_caps(dev);
-
 	err = mlx5_ib_init_multiport_master(dev);
 	if (err)
 		return err;
diff --git a/drivers/infiniband/hw/mlx5/mlx5_ib.h b/drivers/infiniband/hw/mlx5/mlx5_ib.h
index ba5066be432c..2781688260ed 100644
--- a/drivers/infiniband/hw/mlx5/mlx5_ib.h
+++ b/drivers/infiniband/hw/mlx5/mlx5_ib.h
@@ -1346,7 +1346,6 @@ struct ib_mr *mlx5_ib_reg_dm_mr(struct ib_pd *pd, struct ib_dm *dm,
 				struct uverbs_attr_bundle *attrs);
 
 #ifdef CONFIG_INFINIBAND_ON_DEMAND_PAGING
-void mlx5_ib_internal_fill_odp_caps(struct mlx5_ib_dev *dev);
 int mlx5_ib_odp_init_one(struct mlx5_ib_dev *ibdev);
 void mlx5_ib_odp_cleanup_one(struct mlx5_ib_dev *ibdev);
 int __init mlx5_ib_odp_init(void);
@@ -1361,11 +1360,6 @@ int mlx5_ib_advise_mr_prefetch(struct ib_pd *pd,
 			       enum ib_uverbs_advise_mr_advice advice,
 			       u32 flags, struct ib_sge *sg_list, u32 num_sge);
 #else /* CONFIG_INFINIBAND_ON_DEMAND_PAGING */
-static inline void mlx5_ib_internal_fill_odp_caps(struct mlx5_ib_dev *dev)
-{
-	return;
-}
-
 static inline int mlx5_ib_odp_init_one(struct mlx5_ib_dev *ibdev) { return 0; }
 static inline void mlx5_ib_odp_cleanup_one(struct mlx5_ib_dev *ibdev) {}
 static inline int mlx5_ib_odp_init(void) { return 0; }
* Unmerged path drivers/infiniband/hw/mlx5/odp.c
