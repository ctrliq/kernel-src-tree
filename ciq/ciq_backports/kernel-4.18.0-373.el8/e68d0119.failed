software node: Introduce device_add_software_node()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-373.el8
commit-author Heikki Krogerus <heikki.krogerus@linux.intel.com>
commit e68d0119e3284334de5650a1ac42ef4e179f895e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-373.el8/e68d0119.failed

This helper will register a software node and then assign
it to device at the same time. The function will also make
sure that the device can't have more than one software node.

	Acked-by: Felipe Balbi <balbi@kernel.org>
	Signed-off-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
Link: https://lore.kernel.org/r/20210115094914.88401-2-heikki.krogerus@linux.intel.com
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit e68d0119e3284334de5650a1ac42ef4e179f895e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/base/swnode.c
#	include/linux/property.h
diff --cc drivers/base/swnode.c
index 880ed7df9238,4842dd678200..000000000000
--- a/drivers/base/swnode.c
+++ b/drivers/base/swnode.c
@@@ -845,41 -857,51 +858,89 @@@ void fwnode_remove_software_node(struc
  EXPORT_SYMBOL_GPL(fwnode_remove_software_node);
  
  /**
++<<<<<<< HEAD
 + * device_create_managed_software_node - Create a software node for a device
 + * @dev: The device the software node is assigned to.
 + * @properties: Device properties for the software node.
 + * @parent: Parent of the software node.
 + *
 + * Creates a software node as a managed resource for @dev, which means the
 + * lifetime of the newly created software node is tied to the lifetime of @dev.
 + * Software nodes created with this function should not be reused or shared
 + * because of that. The function takes a deep copy of @properties for the
 + * software node.
 + *
 + * Since the new software node is assigned directly to @dev, and since it should
 + * not be shared, it is not returned to the caller. The function returns 0 on
 + * success, and errno in case of an error.
 + */
 +int device_create_managed_software_node(struct device *dev,
 +					const struct property_entry *properties,
 +					const struct software_node *parent)
 +{
 +	struct fwnode_handle *p = software_node_fwnode(parent);
 +	struct fwnode_handle *fwnode;
 +
 +	if (parent && !p)
 +		return -EINVAL;
 +
 +	fwnode = fwnode_create_software_node(properties, p);
 +	if (IS_ERR(fwnode))
 +		return PTR_ERR(fwnode);
 +
 +	to_swnode(fwnode)->managed = true;
 +	set_secondary_fwnode(dev, fwnode);
 +
 +	return 0;
 +}
 +EXPORT_SYMBOL_GPL(device_create_managed_software_node);
++=======
+  * device_add_software_node - Assign software node to a device
+  * @dev: The device the software node is meant for.
+  * @swnode: The software node.
+  *
+  * This function will register @swnode and make it the secondary firmware node
+  * pointer of @dev. If @dev has no primary node, then @swnode will become the primary
+  * node.
+  */
+ int device_add_software_node(struct device *dev, const struct software_node *swnode)
+ {
+ 	int ret;
+ 
+ 	/* Only one software node per device. */
+ 	if (dev_to_swnode(dev))
+ 		return -EBUSY;
+ 
+ 	ret = software_node_register(swnode);
+ 	if (ret)
+ 		return ret;
+ 
+ 	set_secondary_fwnode(dev, software_node_fwnode(swnode));
+ 
+ 	return 0;
+ }
+ EXPORT_SYMBOL_GPL(device_add_software_node);
+ 
+ /**
+  * device_remove_software_node - Remove device's software node
+  * @dev: The device with the software node.
+  *
+  * This function will unregister the software node of @dev.
+  */
+ void device_remove_software_node(struct device *dev)
+ {
+ 	struct swnode *swnode;
+ 
+ 	swnode = dev_to_swnode(dev);
+ 	if (!swnode)
+ 		return;
+ 
+ 	software_node_notify(dev, KOBJ_REMOVE);
+ 	set_secondary_fwnode(dev, NULL);
+ 	kobject_put(&swnode->kobj);
+ }
+ EXPORT_SYMBOL_GPL(device_remove_software_node);
++>>>>>>> e68d0119e328 (software node: Introduce device_add_software_node())
  
  int software_node_notify(struct device *dev, unsigned long action)
  {
diff --cc include/linux/property.h
index b56f82009d9e,b0e413dc5927..000000000000
--- a/include/linux/property.h
+++ b/include/linux/property.h
@@@ -459,8 -488,7 +459,13 @@@ fwnode_create_software_node(const struc
  			    const struct fwnode_handle *parent);
  void fwnode_remove_software_node(struct fwnode_handle *fwnode);
  
++<<<<<<< HEAD
 +int device_create_managed_software_node(struct device *dev,
 +					const struct property_entry *properties,
 +					const struct software_node *parent);
++=======
+ int device_add_software_node(struct device *dev, const struct software_node *swnode);
+ void device_remove_software_node(struct device *dev);
++>>>>>>> e68d0119e328 (software node: Introduce device_add_software_node())
  
  #endif /* _LINUX_PROPERTY_H_ */
* Unmerged path drivers/base/swnode.c
* Unmerged path include/linux/property.h
