net/mlx5: Move devlink port from mlx5e priv to mlx5e resources

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-373.el8
commit-author Roi Dayan <roid@nvidia.com>
commit c27971d08abecc91f06214dacc66ce3ce2662a44
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-373.el8/c27971d0.failed

We re-use the native NIC port net device instance for the Uplink
representor, and the devlink port.
When changing profiles we reset the mlx5e priv but we should still
use the devlink port so move it to mlx5e resources.

	Signed-off-by: Roi Dayan <roid@nvidia.com>
	Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
(cherry picked from commit c27971d08abecc91f06214dacc66ce3ce2662a44)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en/devlink.c
#	drivers/net/ethernet/mellanox/mlx5/core/en/reporter_rx.c
#	drivers/net/ethernet/mellanox/mlx5/core/en/reporter_tx.c
#	include/linux/mlx5/driver.h
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en/devlink.c
index 73414ce0a713,765f3064689d..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en/devlink.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en/devlink.c
@@@ -18,14 -17,11 +18,15 @@@ mlx5e_devlink_get_port_parent_id(struc
  int mlx5e_devlink_port_register(struct mlx5e_priv *priv)
  {
  	struct devlink *devlink = priv_to_devlink(priv->mdev);
 +	struct mlx5_core_dev *mdev = priv->mdev;
  	struct devlink_port_attrs attrs = {};
  	struct netdev_phys_item_id ppid = {};
+ 	struct devlink_port *dl_port;
  	unsigned int dl_port_index;
  
 +	if (!mlx5_core_is_sf(mdev))
 +		return 0; /* RHEL-only: Disable 'devlink port' support for non-switchdev mode*/
 +
  	if (mlx5_core_is_pf(priv->mdev)) {
  		attrs.flavour = DEVLINK_PORT_FLAVOUR_PHYSICAL;
  		attrs.phys.port_number = PCI_FUNC(priv->mdev->pdev->devfn);
@@@ -48,38 -46,21 +51,50 @@@
  
  void mlx5e_devlink_port_type_eth_set(struct mlx5e_priv *priv)
  {
++<<<<<<< HEAD
 +	struct mlx5_core_dev *mdev = priv->mdev;
 +
 +	if (!mlx5_core_is_sf(mdev))
 +		return; /* RHEL-only: Disable 'devlink port' support for non-switchdev mode*/
 +
 +	devlink_port_type_eth_set(&priv->dl_port, priv->netdev);
++=======
+ 	struct devlink_port *dl_port = mlx5e_devlink_get_dl_port(priv);
+ 
+ 	devlink_port_type_eth_set(dl_port, priv->netdev);
++>>>>>>> c27971d08abe (net/mlx5: Move devlink port from mlx5e priv to mlx5e resources)
  }
  
  void mlx5e_devlink_port_unregister(struct mlx5e_priv *priv)
  {
++<<<<<<< HEAD
 +	struct mlx5_core_dev *mdev = priv->mdev;
 +
 +	if (!mlx5_core_is_sf(mdev))
 +		return; /* RHEL-only: Disable 'devlink port' support for non-switchdev mode*/
 +
 +	devlink_port_unregister(&priv->dl_port);
++=======
+ 	struct devlink_port *dl_port = mlx5e_devlink_get_dl_port(priv);
+ 
+ 	devlink_port_unregister(dl_port);
++>>>>>>> c27971d08abe (net/mlx5: Move devlink port from mlx5e priv to mlx5e resources)
  }
  
  struct devlink_port *mlx5e_get_devlink_port(struct net_device *dev)
  {
  	struct mlx5e_priv *priv = netdev_priv(dev);
 +	struct mlx5e_rep_priv *rpriv = priv->ppriv;
 +	struct mlx5_core_dev *mdev = priv->mdev;
 +
 +	if (!netif_device_present(dev))
 +		return NULL;
 +
 +	if (mdev->priv.eswitch && rpriv && rpriv->rep && rpriv->rep->vport)
 +		return mlx5_esw_offloads_devlink_port(mdev->priv.eswitch, rpriv->rep->vport);
 +
 +	if (!mlx5_core_is_sf(mdev))
 +		return NULL; /* RHEL-only: Disable 'devlink port' support for non-switchdev mode*/
  
- 	return &priv->dl_port;
+ 	return mlx5e_devlink_get_dl_port(priv);
  }
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en/reporter_rx.c
index 0fe702a8575b,f0a419fc4adf..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en/reporter_rx.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en/reporter_rx.c
@@@ -615,13 -616,11 +616,21 @@@ static const struct devlink_health_repo
  
  void mlx5e_reporter_rx_create(struct mlx5e_priv *priv)
  {
++<<<<<<< HEAD
 +	struct devlink *devlink = priv_to_devlink(priv->mdev);
 +	struct devlink_health_reporter *reporter;
 +
 +	reporter = devlink_health_reporter_create(devlink,
 +						  &mlx5_rx_reporter_ops,
 +						  MLX5E_REPORTER_RX_GRACEFUL_PERIOD,
 +						  priv);
++=======
+ 	struct devlink_port *dl_port = mlx5e_devlink_get_dl_port(priv);
+ 	struct devlink_health_reporter *reporter;
+ 
+ 	reporter = devlink_port_health_reporter_create(dl_port, &mlx5_rx_reporter_ops,
+ 						       MLX5E_REPORTER_RX_GRACEFUL_PERIOD, priv);
++>>>>>>> c27971d08abe (net/mlx5: Move devlink port from mlx5e priv to mlx5e resources)
  	if (IS_ERR(reporter)) {
  		netdev_warn(priv->netdev, "Failed to create rx reporter, err = %ld\n",
  			    PTR_ERR(reporter));
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en/reporter_tx.c
index 7f3c30fee253,db64fa2620c4..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en/reporter_tx.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en/reporter_tx.c
@@@ -572,15 -573,11 +573,21 @@@ static const struct devlink_health_repo
  
  void mlx5e_reporter_tx_create(struct mlx5e_priv *priv)
  {
+ 	struct devlink_port *dl_port = mlx5e_devlink_get_dl_port(priv);
  	struct devlink_health_reporter *reporter;
 -
 +	struct mlx5_core_dev *mdev = priv->mdev;
 +	struct devlink *devlink;
 +
++<<<<<<< HEAD
 +	devlink = priv_to_devlink(mdev);
 +	reporter =
 +		devlink_health_reporter_create(devlink, &mlx5_tx_reporter_ops,
 +					       MLX5_REPORTER_TX_GRACEFUL_PERIOD,
 +					       priv);
++=======
+ 	reporter = devlink_port_health_reporter_create(dl_port, &mlx5_tx_reporter_ops,
+ 						       MLX5_REPORTER_TX_GRACEFUL_PERIOD, priv);
++>>>>>>> c27971d08abe (net/mlx5: Move devlink port from mlx5e priv to mlx5e resources)
  	if (IS_ERR(reporter)) {
  		netdev_warn(priv->netdev,
  			    "Failed to create tx reporter, err = %ld\n",
diff --cc include/linux/mlx5/driver.h
index be0cf5ca081d,f1d0340e46a7..000000000000
--- a/include/linux/mlx5/driver.h
+++ b/include/linux/mlx5/driver.h
@@@ -654,7 -650,7 +654,11 @@@ struct mlx5e_resources 
  		struct mlx5_core_mkey      mkey;
  		struct mlx5_sq_bfreg       bfreg;
  	} hw_objs;
++<<<<<<< HEAD
 +	struct net_device *uplink_netdev;
++=======
+ 	struct devlink_port dl_port;
++>>>>>>> c27971d08abe (net/mlx5: Move devlink port from mlx5e priv to mlx5e resources)
  };
  
  enum mlx5_sw_icm_type {
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en.h b/drivers/net/ethernet/mellanox/mlx5/core/en.h
index 5b255e3986bc..6068478898bb 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en.h
@@ -885,7 +885,6 @@ struct mlx5e_priv {
 #endif
 	struct devlink_health_reporter *tx_reporter;
 	struct devlink_health_reporter *rx_reporter;
-	struct devlink_port            dl_port;
 	struct mlx5e_xsk           xsk;
 #if IS_ENABLED(CONFIG_PCI_HYPERV_INTERFACE)
 	struct mlx5e_hv_vhca_stats_agent stats_agent;
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en/devlink.c
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en/devlink.h b/drivers/net/ethernet/mellanox/mlx5/core/en/devlink.h
index 83123a801adc..10b50feb9883 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en/devlink.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en/devlink.h
@@ -12,4 +12,10 @@ void mlx5e_devlink_port_unregister(struct mlx5e_priv *priv);
 void mlx5e_devlink_port_type_eth_set(struct mlx5e_priv *priv);
 struct devlink_port *mlx5e_get_devlink_port(struct net_device *dev);
 
+static inline struct devlink_port *
+mlx5e_devlink_get_dl_port(struct mlx5e_priv *priv)
+{
+	return &priv->mdev->mlx5e_res.dl_port;
+}
+
 #endif
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en/reporter_rx.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en/reporter_tx.c
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en_rx.c b/drivers/net/ethernet/mellanox/mlx5/core/en_rx.c
index 8951a92e326c..ae2a7560942b 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_rx.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_rx.c
@@ -53,6 +53,7 @@
 #include "en/health.h"
 #include "en/params.h"
 #include "devlink.h"
+#include "en/devlink.h"
 
 static struct sk_buff *
 mlx5e_skb_from_cqe_mpwrq_linear(struct mlx5e_rq *rq, struct mlx5e_mpw_info *wi,
@@ -1826,6 +1827,7 @@ static void mlx5e_trap_handle_rx_cqe(struct mlx5e_rq *rq, struct mlx5_cqe64 *cqe
 	struct mlx5e_priv *priv = netdev_priv(rq->netdev);
 	struct mlx5_wq_cyc *wq = &rq->wqe.wq;
 	struct mlx5e_wqe_frag_info *wi;
+	struct devlink_port *dl_port;
 	struct sk_buff *skb;
 	u32 cqe_bcnt;
 	u16 trap_id;
@@ -1848,7 +1850,8 @@ static void mlx5e_trap_handle_rx_cqe(struct mlx5e_rq *rq, struct mlx5_cqe64 *cqe
 	mlx5e_complete_rx_cqe(rq, cqe, cqe_bcnt, skb);
 	skb_push(skb, ETH_HLEN);
 
-	mlx5_devlink_trap_report(rq->mdev, trap_id, skb, &priv->dl_port);
+	dl_port = mlx5e_devlink_get_dl_port(priv);
+	mlx5_devlink_trap_report(rq->mdev, trap_id, skb, dl_port);
 	dev_kfree_skb_any(skb);
 
 free_wqe:
* Unmerged path include/linux/mlx5/driver.h
