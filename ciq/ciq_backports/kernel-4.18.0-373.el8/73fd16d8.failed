mm/gup: remove unused get_user_pages_locked()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-373.el8
commit-author John Hubbard <jhubbard@nvidia.com>
commit 73fd16d8080f7b1537ba7aa29917f64d6fffa664
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-373.el8/73fd16d8.failed

Now that the last caller of get_user_pages_locked() is gone, remove it.

Link: https://lkml.kernel.org/r/20220204020010.68930-6-jhubbard@nvidia.com
	Signed-off-by: John Hubbard <jhubbard@nvidia.com>
	Reviewed-by: Jan Kara <jack@suse.cz>
	Reviewed-by: Jason Gunthorpe <jgg@nvidia.com>
	Reviewed-by: Claudio Imbrenda <imbrenda@linux.ibm.com>
	Reviewed-by: Christoph Hellwig <hch@lst.de>
	Cc: Alex Williamson <alex.williamson@redhat.com>
	Cc: Andrea Arcangeli <aarcange@redhat.com>
	Cc: David Hildenbrand <david@redhat.com>
	Cc: Jason Gunthorpe <jgg@ziepe.ca>
	Cc: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
	Cc: Lukas Bulwahn <lukas.bulwahn@gmail.com>
	Cc: Matthew Wilcox (Oracle) <willy@infradead.org>
	Cc: Peter Xu <peterx@redhat.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 73fd16d8080f7b1537ba7aa29917f64d6fffa664)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/mm.h
#	mm/gup.c
diff --cc include/linux/mm.h
index 230c8d984885,c02a8cc16e4f..000000000000
--- a/include/linux/mm.h
+++ b/include/linux/mm.h
@@@ -1689,10 -1916,6 +1689,13 @@@ long get_user_pages(unsigned long start
  long pin_user_pages(unsigned long start, unsigned long nr_pages,
  		    unsigned int gup_flags, struct page **pages,
  		    struct vm_area_struct **vmas);
++<<<<<<< HEAD
 +long get_user_pages_locked(unsigned long start, unsigned long nr_pages,
 +		    unsigned int gup_flags, struct page **pages, int *locked);
 +long pin_user_pages_locked(unsigned long start, unsigned long nr_pages,
 +		    unsigned int gup_flags, struct page **pages, int *locked);
++=======
++>>>>>>> 73fd16d8080f (mm/gup: remove unused get_user_pages_locked())
  long get_user_pages_unlocked(unsigned long start, unsigned long nr_pages,
  		    struct page **pages, unsigned int gup_flags);
  long pin_user_pages_unlocked(unsigned long start, unsigned long nr_pages,
diff --cc mm/gup.c
index 2d14c0391dbe,85d59dc08644..000000000000
--- a/mm/gup.c
+++ b/mm/gup.c
@@@ -2014,63 -2126,6 +2014,66 @@@ long get_user_pages(unsigned long start
  }
  EXPORT_SYMBOL(get_user_pages);
  
++<<<<<<< HEAD
 +/**
 + * get_user_pages_locked() is suitable to replace the form:
 + *
 + *      mmap_read_lock(mm);
 + *      do_something()
 + *      get_user_pages(tsk, mm, ..., pages, NULL);
 + *      mmap_read_unlock(mm);
 + *
 + *  to:
 + *
 + *      int locked = 1;
 + *      mmap_read_lock(mm);
 + *      do_something()
 + *      get_user_pages_locked(tsk, mm, ..., pages, &locked);
 + *      if (locked)
 + *          mmap_read_unlock(mm);
 + *
 + * @start:      starting user address
 + * @nr_pages:   number of pages from start to pin
 + * @gup_flags:  flags modifying lookup behaviour
 + * @pages:      array that receives pointers to the pages pinned.
 + *              Should be at least nr_pages long. Or NULL, if caller
 + *              only intends to ensure the pages are faulted in.
 + * @locked:     pointer to lock flag indicating whether lock is held and
 + *              subsequently whether VM_FAULT_RETRY functionality can be
 + *              utilised. Lock must initially be held.
 + *
 + * We can leverage the VM_FAULT_RETRY functionality in the page fault
 + * paths better by using either get_user_pages_locked() or
 + * get_user_pages_unlocked().
 + *
 + */
 +long get_user_pages_locked(unsigned long start, unsigned long nr_pages,
 +			   unsigned int gup_flags, struct page **pages,
 +			   int *locked)
 +{
 +	/*
 +	 * FIXME: Current FOLL_LONGTERM behavior is incompatible with
 +	 * FAULT_FLAG_ALLOW_RETRY because of the FS DAX check requirement on
 +	 * vmas.  As there are no users of this flag in this call we simply
 +	 * disallow this option for now.
 +	 */
 +	if (WARN_ON_ONCE(gup_flags & FOLL_LONGTERM))
 +		return -EINVAL;
 +	/*
 +	 * FOLL_PIN must only be set internally by the pin_user_pages*() APIs,
 +	 * never directly by the caller, so enforce that:
 +	 */
 +	if (WARN_ON_ONCE(gup_flags & FOLL_PIN))
 +		return -EINVAL;
 +
 +	return __get_user_pages_locked(current, current->mm, start, nr_pages,
 +				       pages, NULL, locked,
 +				       gup_flags | FOLL_TOUCH);
 +}
 +EXPORT_SYMBOL(get_user_pages_locked);
 +
++=======
++>>>>>>> 73fd16d8080f (mm/gup: remove unused get_user_pages_locked())
  /*
   * get_user_pages_unlocked() is suitable to replace the form:
   *
* Unmerged path include/linux/mm.h
* Unmerged path mm/gup.c
