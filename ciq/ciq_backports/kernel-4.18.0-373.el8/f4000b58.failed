ALSA: line6: fix control and interrupt message timeouts

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-373.el8
commit-author Johan Hovold <johan@kernel.org>
commit f4000b58b64344871d7b27c05e73932f137cfef6
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-373.el8/f4000b58.failed

USB control and interrupt message timeouts are specified in milliseconds
and should specifically not vary with CONFIG_HZ.

Fixes: 705ececd1c60 ("Staging: add line6 usb driver")
	Cc: stable@vger.kernel.org      # 2.6.30
	Signed-off-by: Johan Hovold <johan@kernel.org>
Link: https://lore.kernel.org/r/20211025121142.6531-3-johan@kernel.org
	Signed-off-by: Takashi Iwai <tiwai@suse.de>
(cherry picked from commit f4000b58b64344871d7b27c05e73932f137cfef6)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	sound/usb/line6/driver.c
#	sound/usb/line6/toneport.c
diff --cc sound/usb/line6/driver.c
index b359c965c5e5,59faa5a9a714..000000000000
--- a/sound/usb/line6/driver.c
+++ b/sound/usb/line6/driver.c
@@@ -387,7 -387,8 +387,12 @@@ int line6_read_data(struct usb_line6 *l
  	/* receive the result: */
  	ret = usb_control_msg_recv(usbdev, 0, 0x67,
  				   USB_TYPE_VENDOR | USB_RECIP_DEVICE | USB_DIR_IN,
++<<<<<<< HEAD
 +				   0x0013, 0x0000, data, datalen, LINE6_TIMEOUT * HZ, GFP_KERNEL);
++=======
+ 				   0x0013, 0x0000, data, datalen, LINE6_TIMEOUT,
+ 				   GFP_KERNEL);
++>>>>>>> f4000b58b643 (ALSA: line6: fix control and interrupt message timeouts)
  	if (ret)
  		dev_err(line6->ifcdev, "read failed (error %d)\n", ret);
  
@@@ -416,8 -417,8 +421,13 @@@ int line6_write_data(struct usb_line6 *
  
  	ret = usb_control_msg_send(usbdev, 0, 0x67,
  				   USB_TYPE_VENDOR | USB_RECIP_DEVICE | USB_DIR_OUT,
++<<<<<<< HEAD
 +				   0x0022, address, data, datalen,
 +					LINE6_TIMEOUT * HZ, GFP_KERNEL);
++=======
+ 				   0x0022, address, data, datalen, LINE6_TIMEOUT,
+ 				   GFP_KERNEL);
++>>>>>>> f4000b58b643 (ALSA: line6: fix control and interrupt message timeouts)
  	if (ret) {
  		dev_err(line6->ifcdev,
  			"write request failed (error %d)\n", ret);
@@@ -429,7 -430,8 +439,12 @@@
  
  		ret = usb_control_msg_recv(usbdev, 0, 0x67,
  					   USB_TYPE_VENDOR | USB_RECIP_DEVICE | USB_DIR_IN,
++<<<<<<< HEAD
 +					   0x0012, 0x0000, status, 1, LINE6_TIMEOUT * HZ, GFP_KERNEL);
++=======
+ 					   0x0012, 0x0000, status, 1, LINE6_TIMEOUT,
+ 					   GFP_KERNEL);
++>>>>>>> f4000b58b643 (ALSA: line6: fix control and interrupt message timeouts)
  		if (ret) {
  			dev_err(line6->ifcdev,
  				"receiving status failed (error %d)\n", ret);
diff --cc sound/usb/line6/toneport.c
index 280a7850c277,e33df58740a9..000000000000
--- a/sound/usb/line6/toneport.c
+++ b/sound/usb/line6/toneport.c
@@@ -128,7 -128,8 +128,12 @@@ static int toneport_send_cmd(struct usb
  
  	ret = usb_control_msg_send(usbdev, 0, 0x67,
  				   USB_TYPE_VENDOR | USB_RECIP_DEVICE | USB_DIR_OUT,
++<<<<<<< HEAD
 +				   cmd1, cmd2, NULL, 0, LINE6_TIMEOUT * HZ, GFP_KERNEL);
++=======
+ 				   cmd1, cmd2, NULL, 0, LINE6_TIMEOUT,
+ 				   GFP_KERNEL);
++>>>>>>> f4000b58b643 (ALSA: line6: fix control and interrupt message timeouts)
  
  	if (ret) {
  		dev_err(&usbdev->dev, "send failed (error %d)\n", ret);
* Unmerged path sound/usb/line6/driver.c
diff --git a/sound/usb/line6/driver.h b/sound/usb/line6/driver.h
index 71d3da1db8c8..ecf3a2b39c7e 100644
--- a/sound/usb/line6/driver.h
+++ b/sound/usb/line6/driver.h
@@ -27,7 +27,7 @@
 #define LINE6_FALLBACK_INTERVAL 10
 #define LINE6_FALLBACK_MAXPACKETSIZE 16
 
-#define LINE6_TIMEOUT 1
+#define LINE6_TIMEOUT 1000
 #define LINE6_BUFSIZE_LISTEN 64
 #define LINE6_MIDI_MESSAGE_MAXLEN 256
 
diff --git a/sound/usb/line6/podhd.c b/sound/usb/line6/podhd.c
index 28794a35949d..b24bc82f89e3 100644
--- a/sound/usb/line6/podhd.c
+++ b/sound/usb/line6/podhd.c
@@ -190,7 +190,7 @@ static int podhd_dev_start(struct usb_line6_podhd *pod)
 	ret = usb_control_msg_send(usbdev, 0,
 					0x67, USB_TYPE_VENDOR | USB_RECIP_DEVICE | USB_DIR_OUT,
 					0x11, 0,
-					NULL, 0, LINE6_TIMEOUT * HZ, GFP_KERNEL);
+					NULL, 0, LINE6_TIMEOUT, GFP_KERNEL);
 	if (ret) {
 		dev_err(pod->line6.ifcdev, "read request failed (error %d)\n", ret);
 		goto exit;
@@ -200,7 +200,7 @@ static int podhd_dev_start(struct usb_line6_podhd *pod)
 	ret = usb_control_msg_recv(usbdev, 0, 0x67,
 					USB_TYPE_VENDOR | USB_RECIP_DEVICE | USB_DIR_IN,
 					0x11, 0x0,
-					init_bytes, 3, LINE6_TIMEOUT * HZ, GFP_KERNEL);
+					init_bytes, 3, LINE6_TIMEOUT, GFP_KERNEL);
 	if (ret) {
 		dev_err(pod->line6.ifcdev,
 			"receive length failed (error %d)\n", ret);
@@ -220,7 +220,7 @@ static int podhd_dev_start(struct usb_line6_podhd *pod)
 					USB_REQ_SET_FEATURE,
 					USB_TYPE_STANDARD | USB_RECIP_DEVICE | USB_DIR_OUT,
 					1, 0,
-					NULL, 0, LINE6_TIMEOUT * HZ, GFP_KERNEL);
+					NULL, 0, LINE6_TIMEOUT, GFP_KERNEL);
 exit:
 	return ret;
 }
* Unmerged path sound/usb/line6/toneport.c
