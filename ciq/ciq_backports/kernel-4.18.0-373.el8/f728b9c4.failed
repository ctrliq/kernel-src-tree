mm: change lookup_node() to use get_user_pages_fast()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-373.el8
commit-author John Hubbard <jhubbard@nvidia.com>
commit f728b9c48d567b3f79b5fba8b993dd4f3e36bab2
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-373.el8/f728b9c4.failed

The purpose of calling get_user_pages_locked() from lookup_node() was to
allow for unlocking the mmap_lock when reading a page from the disk
during a page fault (hidden behind VM_FAULT_RETRY).  The idea was to
reduce contention on the heavily-used mmap_lock.  (Thanks to Jan Kara
for clearly pointing that out, and in fact I've used some of his wording
here.)

However, it is unlikely for lookup_node() to take a page fault.  With
that in mind, change over to calling get_user_pages_fast().  This
simplifies the code, runs a little faster in the expected case, and
allows removing get_user_pages_locked() entirely, in a subsequent patch.

Link: https://lkml.kernel.org/r/20220204020010.68930-5-jhubbard@nvidia.com
	Signed-off-by: John Hubbard <jhubbard@nvidia.com>
	Reviewed-by: Jan Kara <jack@suse.cz>
	Reviewed-by: Jason Gunthorpe <jgg@nvidia.com>
	Reviewed-by: Claudio Imbrenda <imbrenda@linux.ibm.com>
	Reviewed-by: Christoph Hellwig <hch@lst.de>
	Cc: Alex Williamson <alex.williamson@redhat.com>
	Cc: Andrea Arcangeli <aarcange@redhat.com>
	Cc: David Hildenbrand <david@redhat.com>
	Cc: Jason Gunthorpe <jgg@ziepe.ca>
	Cc: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
	Cc: Lukas Bulwahn <lukas.bulwahn@gmail.com>
	Cc: Matthew Wilcox (Oracle) <willy@infradead.org>
	Cc: Peter Xu <peterx@redhat.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit f728b9c48d567b3f79b5fba8b993dd4f3e36bab2)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	mm/mempolicy.c
diff --cc mm/mempolicy.c
index b09080ea18df,340c22c62193..000000000000
--- a/mm/mempolicy.c
+++ b/mm/mempolicy.c
@@@ -960,10 -965,9 +957,16 @@@ static long do_get_mempolicy(int *polic
  	if (flags & MPOL_F_NODE) {
  		if (flags & MPOL_F_ADDR) {
  			/*
++<<<<<<< HEAD
 +			 * Take a refcount on the mpol, lookup_node()
 +			 * wil drop the mmap_lock, so after calling
 +			 * lookup_node() only "pol" remains valid, "vma"
 +			 * is stale.
++=======
+ 			 * Take a refcount on the mpol, because we are about to
+ 			 * drop the mmap_lock, after which only "pol" remains
+ 			 * valid, "vma" is stale.
++>>>>>>> f728b9c48d56 (mm: change lookup_node() to use get_user_pages_fast())
  			 */
  			pol_refcount = pol;
  			vma = NULL;
* Unmerged path mm/mempolicy.c
