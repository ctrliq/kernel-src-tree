optee: simplify i2c access

jira LE-1907
cve CVE-2021-44733
Rebuild_History Non-Buildable kernel-4.18.0-373.el8
commit-author Arnd Bergmann <arnd@arndb.de>
commit 67bc809752796acb2641ca343cad5b45eef31d7c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-373.el8/67bc8097.failed

Storing a bogus i2c_client structure on the stack adds overhead and
causes a compile-time warning:

drivers/tee/optee/rpc.c:493:6: error: stack frame size of 1056 bytes in function 'optee_handle_rpc' [-Werror,-Wframe-larger-than=]
void optee_handle_rpc(struct tee_context *ctx, struct optee_rpc_param *param,

Change the implementation of handle_rpc_func_cmd_i2c_transfer() to
open-code the i2c_transfer() call, which makes it easier to read
and avoids the warning.

Fixes: c05210ab9757 ("drivers: optee: allow op-tee to access devices on the i2c bus")
	Tested-by: Jorge Ramirez-Ortiz <jorge@foundries.io>
	Signed-off-by: Arnd Bergmann <arnd@arndb.de>
	Signed-off-by: Jens Wiklander <jens.wiklander@linaro.org>
(cherry picked from commit 67bc809752796acb2641ca343cad5b45eef31d7c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/tee/optee/rpc.c
diff --cc drivers/tee/optee/rpc.c
index 5b6a6edf488f,6cbb3643c6c4..000000000000
--- a/drivers/tee/optee/rpc.c
+++ b/drivers/tee/optee/rpc.c
@@@ -95,34 -86,32 +96,47 @@@ static void handle_rpc_func_cmd_i2c_tra
  			goto bad;
  	}
  
- 	client.adapter = i2c_get_adapter(params[0].u.value.b);
- 	if (!client.adapter)
+ 	adapter = i2c_get_adapter(params[0].u.value.b);
+ 	if (!adapter)
  		goto bad;
  
++<<<<<<< HEAD
 +	if (params[1].u.value.a & OPTEE_RPC_I2C_FLAGS_TEN_BIT) {
 +		if (!i2c_check_functionality(client.adapter,
++=======
+ 	if (params[1].u.value.a & OPTEE_MSG_RPC_CMD_I2C_FLAGS_TEN_BIT) {
+ 		if (!i2c_check_functionality(adapter,
++>>>>>>> 67bc80975279 (optee: simplify i2c access)
  					     I2C_FUNC_10BIT_ADDR)) {
- 			i2c_put_adapter(client.adapter);
+ 			i2c_put_adapter(adapter);
  			goto bad;
  		}
  
- 		client.flags = I2C_CLIENT_TEN;
+ 		msg.flags = I2C_M_TEN;
  	}
  
- 	client.addr = params[0].u.value.c;
- 	snprintf(client.name, I2C_NAME_SIZE, "i2c%d", client.adapter->nr);
+ 	msg.addr = params[0].u.value.c;
+ 	msg.buf  = params[2].u.memref.shm->kaddr;
+ 	msg.len  = params[2].u.memref.size;
  
  	switch (params[0].u.value.a) {
++<<<<<<< HEAD
 +	case OPTEE_RPC_I2C_TRANSFER_RD:
 +		ret = i2c_master_recv(&client, params[2].u.memref.shm->kaddr,
 +				      params[2].u.memref.size);
 +		break;
 +	case OPTEE_RPC_I2C_TRANSFER_WR:
 +		ret = i2c_master_send(&client, params[2].u.memref.shm->kaddr,
 +				      params[2].u.memref.size);
++=======
+ 	case OPTEE_MSG_RPC_CMD_I2C_TRANSFER_RD:
+ 		msg.flags |= I2C_M_RD;
+ 		break;
+ 	case OPTEE_MSG_RPC_CMD_I2C_TRANSFER_WR:
++>>>>>>> 67bc80975279 (optee: simplify i2c access)
  		break;
  	default:
- 		i2c_put_adapter(client.adapter);
+ 		i2c_put_adapter(adapter);
  		goto bad;
  	}
  
* Unmerged path drivers/tee/optee/rpc.c
