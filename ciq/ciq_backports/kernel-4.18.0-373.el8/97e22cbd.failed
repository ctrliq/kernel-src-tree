ASoC: SOF: Make Intel IPC stream ops generic

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-373.el8
commit-author Bud Liviu-Alexandru <budliviu@gmail.com>
commit 97e22cbd0dc318f1cedb3546d2047403506bdc2d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-373.el8/97e22cbd.failed

This operations should be generic as there is nothing Intel
specific. This works well for NXP i.MX8 stream IPC ops.

We start by moving sof/intel/intel-ipc.c into sof/stream-ipc.c and
rename the functions to be generic.

Notice that we use newly introduced snd_sof_dsp_mailbox_read
instead of sof_mailbox_read, to make sure that we are not
bound to existing MMIO memory access, and we allow platform
to implement their own memory access routines.

	Signed-off-by: Daniel Baluta <daniel.baluta@nxp.com>
	Signed-off-by: Bud Liviu-Alexandru <budliviu@gmail.com>
	Reviewed-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
	Reviewed-by: Daniel Baluta <daniel.baluta@gmail.com>
	Reviewed-by: PÃ©ter Ujfalusi <peter.ujfalusi@linux.intel.com>
Link: https://lore.kernel.org/r/20211004152147.1268978-3-daniel.baluta@oss.nxp.com
	Signed-off-by: Mark Brown <broonie@kernel.org>
(cherry picked from commit 97e22cbd0dc318f1cedb3546d2047403506bdc2d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	sound/soc/sof/intel/pci-tng.c
#	sound/soc/sof/stream-ipc.c
diff --cc sound/soc/sof/intel/pci-tng.c
index 1e08231262bc,18eb41b8a8f4..000000000000
--- a/sound/soc/sof/intel/pci-tng.c
+++ b/sound/soc/sof/intel/pci-tng.c
@@@ -29,6 -31,175 +29,178 @@@ static struct snd_soc_acpi_mach sof_tng
  	{}
  };
  
++<<<<<<< HEAD
++=======
+ static const struct snd_sof_debugfs_map tng_debugfs[] = {
+ 	{"dmac0", DSP_BAR, DMAC0_OFFSET, DMAC_SIZE,
+ 	 SOF_DEBUGFS_ACCESS_ALWAYS},
+ 	{"dmac1", DSP_BAR, DMAC1_OFFSET, DMAC_SIZE,
+ 	 SOF_DEBUGFS_ACCESS_ALWAYS},
+ 	{"ssp0", DSP_BAR, SSP0_OFFSET, SSP_SIZE,
+ 	 SOF_DEBUGFS_ACCESS_ALWAYS},
+ 	{"ssp1", DSP_BAR, SSP1_OFFSET, SSP_SIZE,
+ 	 SOF_DEBUGFS_ACCESS_ALWAYS},
+ 	{"ssp2", DSP_BAR, SSP2_OFFSET, SSP_SIZE,
+ 	 SOF_DEBUGFS_ACCESS_ALWAYS},
+ 	{"iram", DSP_BAR, IRAM_OFFSET, IRAM_SIZE,
+ 	 SOF_DEBUGFS_ACCESS_D0_ONLY},
+ 	{"dram", DSP_BAR, DRAM_OFFSET, DRAM_SIZE,
+ 	 SOF_DEBUGFS_ACCESS_D0_ONLY},
+ 	{"shim", DSP_BAR, SHIM_OFFSET, SHIM_SIZE_BYT,
+ 	 SOF_DEBUGFS_ACCESS_ALWAYS},
+ };
+ 
+ static int tangier_pci_probe(struct snd_sof_dev *sdev)
+ {
+ 	struct snd_sof_pdata *pdata = sdev->pdata;
+ 	const struct sof_dev_desc *desc = pdata->desc;
+ 	struct pci_dev *pci = to_pci_dev(sdev->dev);
+ 	u32 base, size;
+ 	int ret;
+ 
+ 	/* DSP DMA can only access low 31 bits of host memory */
+ 	ret = dma_coerce_mask_and_coherent(&pci->dev, DMA_BIT_MASK(31));
+ 	if (ret < 0) {
+ 		dev_err(sdev->dev, "error: failed to set DMA mask %d\n", ret);
+ 		return ret;
+ 	}
+ 
+ 	/* LPE base */
+ 	base = pci_resource_start(pci, desc->resindex_lpe_base) - IRAM_OFFSET;
+ 	size = PCI_BAR_SIZE;
+ 
+ 	dev_dbg(sdev->dev, "LPE PHY base at 0x%x size 0x%x", base, size);
+ 	sdev->bar[DSP_BAR] = devm_ioremap(sdev->dev, base, size);
+ 	if (!sdev->bar[DSP_BAR]) {
+ 		dev_err(sdev->dev, "error: failed to ioremap LPE base 0x%x size 0x%x\n",
+ 			base, size);
+ 		return -ENODEV;
+ 	}
+ 	dev_dbg(sdev->dev, "LPE VADDR %p\n", sdev->bar[DSP_BAR]);
+ 
+ 	/* IMR base - optional */
+ 	if (desc->resindex_imr_base == -1)
+ 		goto irq;
+ 
+ 	base = pci_resource_start(pci, desc->resindex_imr_base);
+ 	size = pci_resource_len(pci, desc->resindex_imr_base);
+ 
+ 	/* some BIOSes don't map IMR */
+ 	if (base == 0x55aa55aa || base == 0x0) {
+ 		dev_info(sdev->dev, "IMR not set by BIOS. Ignoring\n");
+ 		goto irq;
+ 	}
+ 
+ 	dev_dbg(sdev->dev, "IMR base at 0x%x size 0x%x", base, size);
+ 	sdev->bar[IMR_BAR] = devm_ioremap(sdev->dev, base, size);
+ 	if (!sdev->bar[IMR_BAR]) {
+ 		dev_err(sdev->dev, "error: failed to ioremap IMR base 0x%x size 0x%x\n",
+ 			base, size);
+ 		return -ENODEV;
+ 	}
+ 	dev_dbg(sdev->dev, "IMR VADDR %p\n", sdev->bar[IMR_BAR]);
+ 
+ irq:
+ 	/* register our IRQ */
+ 	sdev->ipc_irq = pci->irq;
+ 	dev_dbg(sdev->dev, "using IRQ %d\n", sdev->ipc_irq);
+ 	ret = devm_request_threaded_irq(sdev->dev, sdev->ipc_irq,
+ 					atom_irq_handler, atom_irq_thread,
+ 					0, "AudioDSP", sdev);
+ 	if (ret < 0) {
+ 		dev_err(sdev->dev, "error: failed to register IRQ %d\n",
+ 			sdev->ipc_irq);
+ 		return ret;
+ 	}
+ 
+ 	/* enable BUSY and disable DONE Interrupt by default */
+ 	snd_sof_dsp_update_bits64(sdev, DSP_BAR, SHIM_IMRX,
+ 				  SHIM_IMRX_BUSY | SHIM_IMRX_DONE,
+ 				  SHIM_IMRX_DONE);
+ 
+ 	/* set default mailbox offset for FW ready message */
+ 	sdev->dsp_box.offset = MBOX_OFFSET;
+ 
+ 	return ret;
+ }
+ 
+ const struct snd_sof_dsp_ops sof_tng_ops = {
+ 	/* device init */
+ 	.probe		= tangier_pci_probe,
+ 
+ 	/* DSP core boot / reset */
+ 	.run		= atom_run,
+ 	.reset		= atom_reset,
+ 
+ 	/* Register IO */
+ 	.write		= sof_io_write,
+ 	.read		= sof_io_read,
+ 	.write64	= sof_io_write64,
+ 	.read64		= sof_io_read64,
+ 
+ 	/* Block IO */
+ 	.block_read	= sof_block_read,
+ 	.block_write	= sof_block_write,
+ 
+ 	/* Mailbox IO */
+ 	.mailbox_read	= sof_mailbox_read,
+ 	.mailbox_write	= sof_mailbox_write,
+ 
+ 	/* doorbell */
+ 	.irq_handler	= atom_irq_handler,
+ 	.irq_thread	= atom_irq_thread,
+ 
+ 	/* ipc */
+ 	.send_msg	= atom_send_msg,
+ 	.fw_ready	= sof_fw_ready,
+ 	.get_mailbox_offset = atom_get_mailbox_offset,
+ 	.get_window_offset = atom_get_window_offset,
+ 
+ 	.ipc_msg_data	= sof_ipc_msg_data,
+ 	.ipc_pcm_params	= sof_ipc_pcm_params,
+ 
+ 	/* machine driver */
+ 	.machine_select = atom_machine_select,
+ 	.machine_register = sof_machine_register,
+ 	.machine_unregister = sof_machine_unregister,
+ 	.set_mach_params = atom_set_mach_params,
+ 
+ 	/* debug */
+ 	.debug_map	= tng_debugfs,
+ 	.debug_map_count	= ARRAY_SIZE(tng_debugfs),
+ 	.dbg_dump	= atom_dump,
+ 	.debugfs_add_region_item = snd_sof_debugfs_add_region_item_iomem,
+ 
+ 	/* stream callbacks */
+ 	.pcm_open	= sof_stream_pcm_open,
+ 	.pcm_close	= sof_stream_pcm_close,
+ 
+ 	/* module loading */
+ 	.load_module	= snd_sof_parse_module_memcpy,
+ 
+ 	/*Firmware loading */
+ 	.load_firmware	= snd_sof_load_firmware_memcpy,
+ 
+ 	/* DAI drivers */
+ 	.drv = atom_dai,
+ 	.num_drv = 3, /* we have only 3 SSPs on byt*/
+ 
+ 	/* ALSA HW info flags */
+ 	.hw_info =	SNDRV_PCM_INFO_MMAP |
+ 			SNDRV_PCM_INFO_MMAP_VALID |
+ 			SNDRV_PCM_INFO_INTERLEAVED |
+ 			SNDRV_PCM_INFO_PAUSE |
+ 			SNDRV_PCM_INFO_BATCH,
+ 
+ 	.dsp_arch_ops = &sof_xtensa_arch_ops,
+ };
+ 
+ const struct sof_intel_dsp_desc tng_chip_info = {
+ 	.cores_num = 1,
+ 	.host_managed_cores_mask = 1,
+ };
+ 
++>>>>>>> 97e22cbd0dc3 (ASoC: SOF: Make Intel IPC stream ops generic)
  static const struct sof_dev_desc tng_desc = {
  	.machines		= sof_tng_machines,
  	.resindex_lpe_base	= 3,	/* IRAM, but subtract IRAM offset */
diff --cc sound/soc/sof/stream-ipc.c
index d550f68ba0d9,15a55851faeb..000000000000
--- a/sound/soc/sof/stream-ipc.c
+++ b/sound/soc/sof/stream-ipc.c
@@@ -43,13 -43,13 +43,17 @@@ int sof_ipc_msg_data(struct snd_sof_de
  
  	return 0;
  }
++<<<<<<< HEAD:sound/soc/sof/intel/intel-ipc.c
 +EXPORT_SYMBOL(intel_ipc_msg_data);
++=======
+ EXPORT_SYMBOL(sof_ipc_msg_data);
++>>>>>>> 97e22cbd0dc3 (ASoC: SOF: Make Intel IPC stream ops generic):sound/soc/sof/stream-ipc.c
  
- int intel_ipc_pcm_params(struct snd_sof_dev *sdev,
- 			 struct snd_pcm_substream *substream,
- 			 const struct sof_ipc_pcm_params_reply *reply)
+ int sof_ipc_pcm_params(struct snd_sof_dev *sdev,
+ 		       struct snd_pcm_substream *substream,
+ 		       const struct sof_ipc_pcm_params_reply *reply)
  {
- 	struct intel_stream *stream = substream->runtime->private_data;
+ 	struct sof_stream *stream = substream->runtime->private_data;
  	size_t posn_offset = reply->posn_offset;
  
  	/* check if offset is overflow or it is not aligned */
@@@ -64,12 -64,12 +68,16 @@@
  
  	return 0;
  }
++<<<<<<< HEAD:sound/soc/sof/intel/intel-ipc.c
 +EXPORT_SYMBOL(intel_ipc_pcm_params);
++=======
+ EXPORT_SYMBOL(sof_ipc_pcm_params);
++>>>>>>> 97e22cbd0dc3 (ASoC: SOF: Make Intel IPC stream ops generic):sound/soc/sof/stream-ipc.c
  
- int intel_pcm_open(struct snd_sof_dev *sdev,
- 		   struct snd_pcm_substream *substream)
+ int sof_stream_pcm_open(struct snd_sof_dev *sdev,
+ 			struct snd_pcm_substream *substream)
  {
- 	struct intel_stream *stream = kmalloc(sizeof(*stream), GFP_KERNEL);
+ 	struct sof_stream *stream = kmalloc(sizeof(*stream), GFP_KERNEL);
  
  	if (!stream)
  		return -ENOMEM;
@@@ -86,18 -86,18 +94,26 @@@
  
  	return 0;
  }
++<<<<<<< HEAD:sound/soc/sof/intel/intel-ipc.c
 +EXPORT_SYMBOL(intel_pcm_open);
++=======
+ EXPORT_SYMBOL(sof_stream_pcm_open);
++>>>>>>> 97e22cbd0dc3 (ASoC: SOF: Make Intel IPC stream ops generic):sound/soc/sof/stream-ipc.c
  
- int intel_pcm_close(struct snd_sof_dev *sdev,
- 		    struct snd_pcm_substream *substream)
+ int sof_stream_pcm_close(struct snd_sof_dev *sdev,
+ 			 struct snd_pcm_substream *substream)
  {
- 	struct intel_stream *stream = substream->runtime->private_data;
+ 	struct sof_stream *stream = substream->runtime->private_data;
  
  	substream->runtime->private_data = NULL;
  	kfree(stream);
  
  	return 0;
  }
++<<<<<<< HEAD:sound/soc/sof/intel/intel-ipc.c
 +EXPORT_SYMBOL(intel_pcm_close);
++=======
+ EXPORT_SYMBOL(sof_stream_pcm_close);
++>>>>>>> 97e22cbd0dc3 (ASoC: SOF: Make Intel IPC stream ops generic):sound/soc/sof/stream-ipc.c
  
  MODULE_LICENSE("Dual BSD/GPL");
diff --git a/sound/soc/sof/Makefile b/sound/soc/sof/Makefile
index bdea0faac117..c5b97c66a9f1 100644
--- a/sound/soc/sof/Makefile
+++ b/sound/soc/sof/Makefile
@@ -1,7 +1,7 @@
 # SPDX-License-Identifier: (GPL-2.0-only OR BSD-3-Clause)
 
 snd-sof-objs := core.o ops.o loader.o ipc.o pcm.o pm.o debug.o topology.o\
-		control.o trace.o utils.o sof-audio.o
+		control.o trace.o utils.o sof-audio.o stream-ipc.o
 
 snd-sof-$(CONFIG_SND_SOC_SOF_DEBUG_PROBES) += sof-probes.o
 
diff --git a/sound/soc/sof/intel/Makefile b/sound/soc/sof/intel/Makefile
index 12709639036c..523d84108934 100644
--- a/sound/soc/sof/intel/Makefile
+++ b/sound/soc/sof/intel/Makefile
@@ -3,8 +3,6 @@
 snd-sof-acpi-intel-byt-objs := byt.o
 snd-sof-acpi-intel-bdw-objs := bdw.o
 
-snd-sof-intel-ipc-objs := intel-ipc.o
-
 snd-sof-intel-hda-common-objs := hda.o hda-loader.o hda-stream.o hda-trace.o \
 				 hda-dsp.o hda-ipc.o hda-ctrl.o hda-pcm.o \
 				 hda-dai.o hda-bus.o \
@@ -15,7 +13,6 @@ snd-sof-intel-hda-objs := hda-codec.o
 
 obj-$(CONFIG_SND_SOC_SOF_INTEL_ATOM_HIFI_EP) += snd-sof-acpi-intel-byt.o
 obj-$(CONFIG_SND_SOC_SOF_BROADWELL) += snd-sof-acpi-intel-bdw.o
-obj-$(CONFIG_SND_SOC_SOF_INTEL_HIFI_EP_IPC) += snd-sof-intel-ipc.o
 obj-$(CONFIG_SND_SOC_SOF_HDA_COMMON) += snd-sof-intel-hda-common.o
 obj-$(CONFIG_SND_SOC_SOF_HDA) += snd-sof-intel-hda.o
 
diff --git a/sound/soc/sof/intel/bdw.c b/sound/soc/sof/intel/bdw.c
index 96ace32fc1be..d74fdc675c7b 100644
--- a/sound/soc/sof/intel/bdw.c
+++ b/sound/soc/sof/intel/bdw.c
@@ -622,8 +622,8 @@ static const struct snd_sof_dsp_ops sof_bdw_ops = {
 	.get_mailbox_offset = bdw_get_mailbox_offset,
 	.get_window_offset = bdw_get_window_offset,
 
-	.ipc_msg_data	= intel_ipc_msg_data,
-	.ipc_pcm_params	= intel_ipc_pcm_params,
+	.ipc_msg_data	= sof_ipc_msg_data,
+	.ipc_pcm_params	= sof_ipc_pcm_params,
 
 	/* machine driver */
 	.machine_select = bdw_machine_select,
@@ -637,8 +637,8 @@ static const struct snd_sof_dsp_ops sof_bdw_ops = {
 	.dbg_dump   = bdw_dump,
 
 	/* stream callbacks */
-	.pcm_open	= intel_pcm_open,
-	.pcm_close	= intel_pcm_close,
+	.pcm_open	= sof_stream_pcm_open,
+	.pcm_close	= sof_stream_pcm_close,
 
 	/* Module loading */
 	.load_module    = snd_sof_parse_module_memcpy,
diff --git a/sound/soc/sof/intel/byt.c b/sound/soc/sof/intel/byt.c
index d725edd4a6bf..82b6f59ceeb7 100644
--- a/sound/soc/sof/intel/byt.c
+++ b/sound/soc/sof/intel/byt.c
@@ -878,8 +878,8 @@ static const struct snd_sof_dsp_ops sof_byt_ops = {
 	.get_mailbox_offset = atom_get_mailbox_offset,
 	.get_window_offset = atom_get_window_offset,
 
-	.ipc_msg_data	= intel_ipc_msg_data,
-	.ipc_pcm_params	= intel_ipc_pcm_params,
+	.ipc_msg_data	= sof_ipc_msg_data,
+	.ipc_pcm_params	= sof_ipc_pcm_params,
 
 	/* machine driver */
 	.machine_select = atom_machine_select,
@@ -893,8 +893,8 @@ static const struct snd_sof_dsp_ops sof_byt_ops = {
 	.dbg_dump	= atom_dump,
 
 	/* stream callbacks */
-	.pcm_open	= intel_pcm_open,
-	.pcm_close	= intel_pcm_close,
+	.pcm_open	= sof_stream_pcm_open,
+	.pcm_close	= sof_stream_pcm_close,
 
 	/* module loading */
 	.load_module	= snd_sof_parse_module_memcpy,
@@ -955,8 +955,8 @@ static const struct snd_sof_dsp_ops sof_cht_ops = {
 	.get_mailbox_offset = atom_get_mailbox_offset,
 	.get_window_offset = atom_get_window_offset,
 
-	.ipc_msg_data	= intel_ipc_msg_data,
-	.ipc_pcm_params	= intel_ipc_pcm_params,
+	.ipc_msg_data	= sof_ipc_msg_data,
+	.ipc_pcm_params	= sof_ipc_pcm_params,
 
 	/* machine driver */
 	.machine_select = atom_machine_select,
@@ -970,8 +970,8 @@ static const struct snd_sof_dsp_ops sof_cht_ops = {
 	.dbg_dump	= atom_dump,
 
 	/* stream callbacks */
-	.pcm_open	= intel_pcm_open,
-	.pcm_close	= intel_pcm_close,
+	.pcm_open	= sof_stream_pcm_open,
+	.pcm_close	= sof_stream_pcm_close,
 
 	/* module loading */
 	.load_module	= snd_sof_parse_module_memcpy,
diff --git a/sound/soc/sof/intel/intel-ipc.c b/sound/soc/sof/intel/intel-ipc.c
deleted file mode 100644
index d550f68ba0d9..000000000000
--- a/sound/soc/sof/intel/intel-ipc.c
+++ /dev/null
@@ -1,103 +0,0 @@
-// SPDX-License-Identifier: (GPL-2.0-only OR BSD-3-Clause)
-//
-// This file is provided under a dual BSD/GPLv2 license.  When using or
-// redistributing this file, you may do so under either license.
-//
-// Copyright(c) 2019 Intel Corporation. All rights reserved.
-//
-// Authors: Guennadi Liakhovetski <guennadi.liakhovetski@linux.intel.com>
-
-/* Intel-specific SOF IPC code */
-
-#include <linux/device.h>
-#include <linux/export.h>
-#include <linux/module.h>
-#include <linux/types.h>
-
-#include <sound/pcm.h>
-#include <sound/sof/stream.h>
-
-#include "../ops.h"
-#include "../sof-priv.h"
-
-struct intel_stream {
-	size_t posn_offset;
-};
-
-/* Mailbox-based Intel IPC implementation */
-int intel_ipc_msg_data(struct snd_sof_dev *sdev,
-		       struct snd_pcm_substream *substream,
-		       void *p, size_t sz)
-{
-	if (!substream || !sdev->stream_box.size) {
-		sof_mailbox_read(sdev, sdev->dsp_box.offset, p, sz);
-	} else {
-		struct intel_stream *stream = substream->runtime->private_data;
-
-		/* The stream might already be closed */
-		if (!stream)
-			return -ESTRPIPE;
-
-		sof_mailbox_read(sdev, stream->posn_offset, p, sz);
-	}
-
-	return 0;
-}
-EXPORT_SYMBOL(intel_ipc_msg_data);
-
-int intel_ipc_pcm_params(struct snd_sof_dev *sdev,
-			 struct snd_pcm_substream *substream,
-			 const struct sof_ipc_pcm_params_reply *reply)
-{
-	struct intel_stream *stream = substream->runtime->private_data;
-	size_t posn_offset = reply->posn_offset;
-
-	/* check if offset is overflow or it is not aligned */
-	if (posn_offset > sdev->stream_box.size ||
-	    posn_offset % sizeof(struct sof_ipc_stream_posn) != 0)
-		return -EINVAL;
-
-	stream->posn_offset = sdev->stream_box.offset + posn_offset;
-
-	dev_dbg(sdev->dev, "pcm: stream dir %d, posn mailbox offset is %zu",
-		substream->stream, stream->posn_offset);
-
-	return 0;
-}
-EXPORT_SYMBOL(intel_ipc_pcm_params);
-
-int intel_pcm_open(struct snd_sof_dev *sdev,
-		   struct snd_pcm_substream *substream)
-{
-	struct intel_stream *stream = kmalloc(sizeof(*stream), GFP_KERNEL);
-
-	if (!stream)
-		return -ENOMEM;
-
-	/* binding pcm substream to hda stream */
-	substream->runtime->private_data = stream;
-
-	/* align to DMA minimum transfer size */
-	snd_pcm_hw_constraint_step(substream->runtime, 0, SNDRV_PCM_HW_PARAM_PERIOD_BYTES, 4);
-
-	/* avoid circular buffer wrap in middle of period */
-	snd_pcm_hw_constraint_integer(substream->runtime,
-				      SNDRV_PCM_HW_PARAM_PERIODS);
-
-	return 0;
-}
-EXPORT_SYMBOL(intel_pcm_open);
-
-int intel_pcm_close(struct snd_sof_dev *sdev,
-		    struct snd_pcm_substream *substream)
-{
-	struct intel_stream *stream = substream->runtime->private_data;
-
-	substream->runtime->private_data = NULL;
-	kfree(stream);
-
-	return 0;
-}
-EXPORT_SYMBOL(intel_pcm_close);
-
-MODULE_LICENSE("Dual BSD/GPL");
* Unmerged path sound/soc/sof/intel/pci-tng.c
diff --git a/sound/soc/sof/sof-priv.h b/sound/soc/sof/sof-priv.h
index 94632a45d6b0..92d9d271a026 100644
--- a/sound/soc/sof/sof-priv.h
+++ b/sound/soc/sof/sof-priv.h
@@ -568,17 +568,17 @@ int sof_block_read(struct snd_sof_dev *sdev, enum snd_sof_fw_blk_type blk_type,
 
 int sof_fw_ready(struct snd_sof_dev *sdev, u32 msg_id);
 
-int intel_ipc_msg_data(struct snd_sof_dev *sdev,
+int sof_ipc_msg_data(struct snd_sof_dev *sdev,
+		     struct snd_pcm_substream *substream,
+		     void *p, size_t sz);
+int sof_ipc_pcm_params(struct snd_sof_dev *sdev,
 		       struct snd_pcm_substream *substream,
-		       void *p, size_t sz);
-int intel_ipc_pcm_params(struct snd_sof_dev *sdev,
-			 struct snd_pcm_substream *substream,
-			 const struct sof_ipc_pcm_params_reply *reply);
-
-int intel_pcm_open(struct snd_sof_dev *sdev,
-		   struct snd_pcm_substream *substream);
-int intel_pcm_close(struct snd_sof_dev *sdev,
-		    struct snd_pcm_substream *substream);
+		       const struct sof_ipc_pcm_params_reply *reply);
+
+int sof_stream_pcm_open(struct snd_sof_dev *sdev,
+			struct snd_pcm_substream *substream);
+int sof_stream_pcm_close(struct snd_sof_dev *sdev,
+			 struct snd_pcm_substream *substream);
 
 int sof_machine_check(struct snd_sof_dev *sdev);
 
* Unmerged path sound/soc/sof/stream-ipc.c
