optee: refactor driver with internal callbacks

jira LE-1907
cve CVE-2021-44733
Rebuild_History Non-Buildable kernel-4.18.0-373.el8
commit-author Jens Wiklander <jens.wiklander@linaro.org>
commit 4602c5842f649da2fbd2cea3560af750cfbd59e3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-373.el8/4602c584.failed

The OP-TEE driver is refactored with three internal callbacks replacing
direct calls to optee_from_msg_param(), optee_to_msg_param() and
optee_do_call_with_arg().

These functions a central to communicating with OP-TEE in secure world
by using the SMC Calling Convention directly.

This refactoring makes room for using other primitives to communicate
with OP-TEE in secure world while being able to reuse as much as
possible from the present driver.

	Reviewed-by: Sumit Garg <sumit.garg@linaro.org>
	Signed-off-by: Jens Wiklander <jens.wiklander@linaro.org>
(cherry picked from commit 4602c5842f649da2fbd2cea3560af750cfbd59e3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/tee/optee/call.c
#	drivers/tee/optee/core.c
#	drivers/tee/optee/optee_private.h
#	drivers/tee/optee/rpc.c
diff --cc drivers/tee/optee/call.c
index 437500004448,ddedde45f1ee..000000000000
--- a/drivers/tee/optee/call.c
+++ b/drivers/tee/optee/call.c
@@@ -1,15 -1,6 +1,19 @@@
 -// SPDX-License-Identifier: GPL-2.0-only
  /*
++<<<<<<< HEAD
 + * Copyright (c) 2015, Linaro Limited
 + *
 + * This software is licensed under the terms of the GNU General Public
 + * License version 2, as published by the Free Software Foundation, and
 + * may be copied, distributed, and modified under those terms.
 + *
 + * This program is distributed in the hope that it will be useful,
 + * but WITHOUT ANY WARRANTY; without even the implied warranty of
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 + * GNU General Public License for more details.
 + *
++=======
+  * Copyright (c) 2015-2021, Linaro Limited
++>>>>>>> 4602c5842f64 (optee: refactor driver with internal callbacks)
   */
  #include <linux/arm-smccc.h>
  #include <linux/device.h>
@@@ -297,6 -284,25 +297,28 @@@ out
  	return rc;
  }
  
++<<<<<<< HEAD
++=======
+ int optee_close_session_helper(struct tee_context *ctx, u32 session)
+ {
+ 	struct tee_shm *shm;
+ 	struct optee *optee = tee_get_drvdata(ctx->teedev);
+ 	struct optee_msg_arg *msg_arg;
+ 
+ 	shm = get_msg_arg(ctx, 0, &msg_arg);
+ 	if (IS_ERR(shm))
+ 		return PTR_ERR(shm);
+ 
+ 	msg_arg->cmd = OPTEE_MSG_CMD_CLOSE_SESSION;
+ 	msg_arg->session = session;
+ 	optee->ops->do_call_with_arg(ctx, shm);
+ 
+ 	tee_shm_free(shm);
+ 
+ 	return 0;
+ }
+ 
++>>>>>>> 4602c5842f64 (optee: refactor driver with internal callbacks)
  int optee_close_session(struct tee_context *ctx, u32 session)
  {
  	struct optee_context_data *ctxdata = ctx->data;
diff --cc drivers/tee/optee/core.c
index 0491a41e8d58,26492d3115f5..000000000000
--- a/drivers/tee/optee/core.c
+++ b/drivers/tee/optee/core.c
@@@ -1,15 -1,6 +1,19 @@@
 -// SPDX-License-Identifier: GPL-2.0-only
  /*
++<<<<<<< HEAD
 + * Copyright (c) 2015, Linaro Limited
 + *
 + * This software is licensed under the terms of the GNU General Public
 + * License version 2, as published by the Free Software Foundation, and
 + * may be copied, distributed, and modified under those terms.
 + *
 + * This program is distributed in the hope that it will be useful,
 + * but WITHOUT ANY WARRANTY; without even the implied warranty of
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 + * GNU General Public License for more details.
 + *
++=======
+  * Copyright (c) 2015-2021, Linaro Limited
++>>>>>>> 4602c5842f64 (optee: refactor driver with internal callbacks)
   */
  
  #define pr_fmt(fmt) KBUILD_MODNAME ": " fmt
@@@ -313,22 -327,27 +362,22 @@@ static void optee_release(struct tee_co
  		kfree(sess);
  	}
  	kfree(ctxdata);
 -	ctx->data = NULL;
 -}
  
 -static void optee_release(struct tee_context *ctx)
 -{
 -	optee_release_helper(ctx, optee_close_session_helper);
 -}
 +	if (!IS_ERR(shm))
 +		tee_shm_free(shm);
  
 -static void optee_release_supp(struct tee_context *ctx)
 -{
 -	struct optee *optee = tee_get_drvdata(ctx->teedev);
 +	ctx->data = NULL;
  
 -	optee_release_helper(ctx, optee_close_session_helper);
 -	if (optee->scan_bus_wq) {
 -		destroy_workqueue(optee->scan_bus_wq);
 -		optee->scan_bus_wq = NULL;
 +	if (teedev == optee->supp_teedev) {
 +		if (optee->scan_bus_wq) {
 +			destroy_workqueue(optee->scan_bus_wq);
 +			optee->scan_bus_wq = NULL;
 +		}
 +		optee_supp_release(&optee->supp);
  	}
 -	optee_supp_release(&optee->supp);
  }
  
- static const struct tee_driver_ops optee_ops = {
+ static const struct tee_driver_ops optee_clnt_ops = {
  	.get_version = optee_get_version,
  	.open = optee_open,
  	.release = optee_release,
diff --cc drivers/tee/optee/optee_private.h
index 0b388ab3c6a5,beca97017996..000000000000
--- a/drivers/tee/optee/optee_private.h
+++ b/drivers/tee/optee/optee_private.h
@@@ -1,15 -1,6 +1,19 @@@
 -/* SPDX-License-Identifier: GPL-2.0-only */
  /*
++<<<<<<< HEAD
 + * Copyright (c) 2015, Linaro Limited
 + *
 + * This software is licensed under the terms of the GNU General Public
 + * License version 2, as published by the Free Software Foundation, and
 + * may be copied, distributed, and modified under those terms.
 + *
 + * This program is distributed in the hope that it will be useful,
 + * but WITHOUT ANY WARRANTY; without even the implied warranty of
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 + * GNU General Public License for more details.
 + *
++=======
+  * Copyright (c) 2015-2021, Linaro Limited
++>>>>>>> 4602c5842f64 (optee: refactor driver with internal callbacks)
   */
  
  #ifndef OPTEE_PRIVATE_H
diff --cc drivers/tee/optee/rpc.c
index 5b6a6edf488f,309258d47790..000000000000
--- a/drivers/tee/optee/rpc.c
+++ b/drivers/tee/optee/rpc.c
@@@ -1,15 -1,6 +1,19 @@@
 -// SPDX-License-Identifier: GPL-2.0-only
  /*
++<<<<<<< HEAD
 + * Copyright (c) 2015-2016, Linaro Limited
 + *
 + * This software is licensed under the terms of the GNU General Public
 + * License version 2, as published by the Free Software Foundation, and
 + * may be copied, distributed, and modified under those terms.
 + *
 + * This program is distributed in the hope that it will be useful,
 + * but WITHOUT ANY WARRANTY; without even the implied warranty of
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 + * GNU General Public License for more details.
 + *
++=======
+  * Copyright (c) 2015-2021, Linaro Limited
++>>>>>>> 4602c5842f64 (optee: refactor driver with internal callbacks)
   */
  
  #define pr_fmt(fmt) KBUILD_MODNAME ": " fmt
@@@ -64,8 -55,10 +68,12 @@@ bad
  static void handle_rpc_func_cmd_i2c_transfer(struct tee_context *ctx,
  					     struct optee_msg_arg *arg)
  {
++<<<<<<< HEAD
 +	struct i2c_client client = { 0 };
++=======
+ 	struct optee *optee = tee_get_drvdata(ctx->teedev);
++>>>>>>> 4602c5842f64 (optee: refactor driver with internal callbacks)
  	struct tee_param *params;
 -	struct i2c_adapter *adapter;
 -	struct i2c_msg msg = { };
  	size_t i;
  	int ret = -EOPNOTSUPP;
  	u8 attr[] = {
@@@ -129,8 -121,11 +138,14 @@@
  	if (ret < 0) {
  		arg->ret = TEEC_ERROR_COMMUNICATION;
  	} else {
++<<<<<<< HEAD
 +		params[3].u.value.a = ret;
 +		if (optee_to_msg_param(arg->params, arg->num_params, params))
++=======
+ 		params[3].u.value.a = msg.len;
+ 		if (optee->ops->to_msg_param(optee, arg->params,
+ 					     arg->num_params, params))
++>>>>>>> 4602c5842f64 (optee: refactor driver with internal callbacks)
  			arg->ret = TEEC_ERROR_BAD_PARAMETERS;
  		else
  			arg->ret = TEEC_SUCCESS;
* Unmerged path drivers/tee/optee/call.c
* Unmerged path drivers/tee/optee/core.c
* Unmerged path drivers/tee/optee/optee_private.h
* Unmerged path drivers/tee/optee/rpc.c
