net/mlx5e: Add states to PTP channel

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-373.el8
commit-author Aya Levin <ayal@nvidia.com>
commit 24c22dd0918bd136b7bea0f3a521ccf355fb432b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-373.el8/24c22dd0.failed

Add PTP TX state to PTP channel, which indicates the corresponding SQ is
available. Further patches in the set extend PTP channel to include RQ.
The PTP channel state will be used for separation and coexistence of RX
and TX PTP. Enhance conditions to verify the TX PTP state is set.

	Signed-off-by: Aya Levin <ayal@nvidia.com>
	Reviewed-by: Tariq Toukan <tariqt@nvidia.com>
	Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
(cherry picked from commit 24c22dd0918bd136b7bea0f3a521ccf355fb432b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en/ptp.h
#	drivers/net/ethernet/mellanox/mlx5/core/en/reporter_tx.c
#	drivers/net/ethernet/mellanox/mlx5/core/en_tx.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en/ptp.h
index 28aa5ae118f4,36c46274a46a..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en/ptp.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en/ptp.h
@@@ -17,7 -16,12 +17,16 @@@ struct mlx5e_ptpsq 
  	struct mlx5e_ptp_cq_stats *cq_stats;
  };
  
++<<<<<<< HEAD
 +struct mlx5e_port_ptp {
++=======
+ enum {
+ 	MLX5E_PTP_STATE_TX,
+ 	MLX5E_PTP_STATE_NUM_STATES,
+ };
+ 
+ struct mlx5e_ptp {
++>>>>>>> 24c22dd0918b (net/mlx5e: Add states to PTP channel)
  	/* data path */
  	struct mlx5e_ptpsq         ptpsq[MLX5E_MAX_NUM_TC];
  	struct napi_struct         napi;
@@@ -35,20 -38,14 +44,24 @@@
  	struct mlx5e_priv         *priv;
  	struct mlx5_core_dev      *mdev;
  	struct hwtstamp_config    *tstamp;
++<<<<<<< HEAD
 +	DECLARE_BITMAP(state, MLX5E_CHANNEL_NUM_STATES);
 +	int                        ix;
++=======
+ 	DECLARE_BITMAP(state, MLX5E_PTP_STATE_NUM_STATES);
++>>>>>>> 24c22dd0918b (net/mlx5e: Add states to PTP channel)
  };
  
 -int mlx5e_ptp_open(struct mlx5e_priv *priv, struct mlx5e_params *params,
 -		   u8 lag_port, struct mlx5e_ptp **cp);
 -void mlx5e_ptp_close(struct mlx5e_ptp *c);
 -void mlx5e_ptp_activate_channel(struct mlx5e_ptp *c);
 -void mlx5e_ptp_deactivate_channel(struct mlx5e_ptp *c);
 +struct mlx5e_ptp_params {
 +	struct mlx5e_params        params;
 +	struct mlx5e_sq_param      txq_sq_param;
 +};
 +
 +int mlx5e_port_ptp_open(struct mlx5e_priv *priv, struct mlx5e_params *params,
 +			u8 lag_port, struct mlx5e_port_ptp **cp);
 +void mlx5e_port_ptp_close(struct mlx5e_port_ptp *c);
 +void mlx5e_ptp_activate_channel(struct mlx5e_port_ptp *c);
 +void mlx5e_ptp_deactivate_channel(struct mlx5e_port_ptp *c);
  
  enum {
  	MLX5E_SKB_CB_CQE_HWTSTAMP  = BIT(0),
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en/reporter_tx.c
index 7f3c30fee253,1a0505bd1e9a..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en/reporter_tx.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en/reporter_tx.c
@@@ -314,12 -316,11 +315,18 @@@ mlx5e_tx_reporter_diagnose_common_confi
  	if (err)
  		return err;
  
++<<<<<<< HEAD
 +	generic_ptpsq = priv->channels.port_ptp ?
 +			&priv->channels.port_ptp->ptpsq[0] :
 +			NULL;
 +	if (!generic_ptpsq)
++=======
+ 	if (!ptp_ch || !test_bit(MLX5E_PTP_STATE_TX, ptp_ch->state))
++>>>>>>> 24c22dd0918b (net/mlx5e: Add states to PTP channel)
  		goto out;
  
+ 	generic_ptpsq = &ptp_ch->ptpsq[0];
+ 
  	err = mlx5e_health_fmsg_named_obj_nest_start(fmsg, "PTP");
  	if (err)
  		return err;
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_tx.c
index 98c6c818aa51,8ba62671f5f1..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_tx.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_tx.c
@@@ -143,12 -144,13 +145,20 @@@ u16 mlx5e_select_queue(struct net_devic
  				return txq_ix;
  		}
  
++<<<<<<< HEAD
 +		if (unlikely(priv->channels.port_ptp))
 +			if (unlikely(skb_shinfo(skb)->tx_flags & SKBTX_HW_TSTAMP) &&
 +			    mlx5e_use_ptpsq(skb))
 +				return mlx5e_select_ptpsq(dev, skb);
++=======
+ 		ptp_channel = READ_ONCE(priv->channels.ptp);
+ 		if (unlikely(ptp_channel) &&
+ 		    test_bit(MLX5E_PTP_STATE_TX, ptp_channel->state) &&
+ 		    mlx5e_use_ptpsq(skb))
+ 			return mlx5e_select_ptpsq(dev, skb);
++>>>>>>> 24c22dd0918b (net/mlx5e: Add states to PTP channel)
  
 -		txq_ix = netdev_pick_tx(dev, skb, NULL);
 +		txq_ix = fallback(dev, skb, NULL);
  		/* Fix netdev_pick_tx() not to choose ptp_channel and HTB txqs.
  		 * If they are selected, switch to regular queues.
  		 * Driver to select these queues only at mlx5e_select_ptpsq()
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en/ptp.c b/drivers/net/ethernet/mellanox/mlx5/core/en/ptp.c
index f9afbdefded5..cced43c8977a 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en/ptp.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en/ptp.c
@@ -127,9 +127,11 @@ static int mlx5e_ptp_napi_poll(struct napi_struct *napi, int budget)
 
 	ch_stats->poll++;
 
-	for (i = 0; i < c->num_tc; i++) {
-		busy |= mlx5e_poll_tx_cq(&c->ptpsq[i].txqsq.cq, budget);
-		busy |= mlx5e_ptp_poll_ts_cq(&c->ptpsq[i].ts_cq, budget);
+	if (test_bit(MLX5E_PTP_STATE_TX, c->state)) {
+		for (i = 0; i < c->num_tc; i++) {
+			busy |= mlx5e_poll_tx_cq(&c->ptpsq[i].txqsq.cq, budget);
+			busy |= mlx5e_ptp_poll_ts_cq(&c->ptpsq[i].ts_cq, budget);
+		}
 	}
 
 	if (busy) {
@@ -142,9 +144,11 @@ static int mlx5e_ptp_napi_poll(struct napi_struct *napi, int budget)
 
 	ch_stats->arm++;
 
-	for (i = 0; i < c->num_tc; i++) {
-		mlx5e_cq_arm(&c->ptpsq[i].txqsq.cq);
-		mlx5e_cq_arm(&c->ptpsq[i].ts_cq);
+	if (test_bit(MLX5E_PTP_STATE_TX, c->state)) {
+		for (i = 0; i < c->num_tc; i++) {
+			mlx5e_cq_arm(&c->ptpsq[i].txqsq.cq);
+			mlx5e_cq_arm(&c->ptpsq[i].ts_cq);
+		}
 	}
 
 out:
@@ -415,9 +419,10 @@ static void mlx5e_ptp_build_params(struct mlx5e_port_ptp *c,
 	params->num_tc = orig->num_tc;
 
 	/* SQ */
-	params->log_sq_size = orig->log_sq_size;
-
-	mlx5e_ptp_build_sq_param(c->mdev, params, &cparams->txq_sq_param);
+	if (test_bit(MLX5E_PTP_STATE_TX, c->state)) {
+		params->log_sq_size = orig->log_sq_size;
+		mlx5e_ptp_build_sq_param(c->mdev, params, &cparams->txq_sq_param);
+	}
 }
 
 static int mlx5e_ptp_open_queues(struct mlx5e_port_ptp *c,
@@ -425,26 +430,38 @@ static int mlx5e_ptp_open_queues(struct mlx5e_port_ptp *c,
 {
 	int err;
 
-	err = mlx5e_ptp_open_cqs(c, cparams);
-	if (err)
-		return err;
-
-	err = mlx5e_ptp_open_txqsqs(c, cparams);
-	if (err)
-		goto close_cqs;
+	if (test_bit(MLX5E_PTP_STATE_TX, c->state)) {
+		err = mlx5e_ptp_open_cqs(c, cparams);
+		if (err)
+			return err;
 
+		err = mlx5e_ptp_open_txqsqs(c, cparams);
+		if (err)
+			goto close_cqs;
+	}
 	return 0;
 
 close_cqs:
-	mlx5e_ptp_close_cqs(c);
+	if (test_bit(MLX5E_PTP_STATE_TX, c->state))
+		mlx5e_ptp_close_cqs(c);
 
 	return err;
 }
 
 static void mlx5e_ptp_close_queues(struct mlx5e_port_ptp *c)
 {
-	mlx5e_ptp_close_txqsqs(c);
-	mlx5e_ptp_close_cqs(c);
+	if (test_bit(MLX5E_PTP_STATE_TX, c->state)) {
+		mlx5e_ptp_close_txqsqs(c);
+		mlx5e_ptp_close_cqs(c);
+	}
+}
+
+static int mlx5e_ptp_set_state(struct mlx5e_ptp *c, struct mlx5e_params *params)
+{
+	if (MLX5E_GET_PFLAG(params, MLX5E_PFLAG_TX_PORT_TS))
+		__set_bit(MLX5E_PTP_STATE_TX, c->state);
+
+	return bitmap_empty(c->state, MLX5E_PTP_STATE_NUM_STATES) ? -EINVAL : 0;
 }
 
 int mlx5e_port_ptp_open(struct mlx5e_priv *priv, struct mlx5e_params *params,
@@ -479,6 +496,10 @@ int mlx5e_port_ptp_open(struct mlx5e_priv *priv, struct mlx5e_params *params,
 	c->irq_desc = irq_to_desc(irq);
 	c->lag_port = lag_port;
 
+	err = mlx5e_ptp_set_state(c, params);
+	if (err)
+		goto err_free;
+
 	netif_napi_add(netdev, &c->napi, mlx5e_ptp_napi_poll, 64);
 
 	mlx5e_ptp_build_params(c, cparams, params);
@@ -495,7 +516,7 @@ int mlx5e_port_ptp_open(struct mlx5e_priv *priv, struct mlx5e_params *params,
 
 err_napi_del:
 	netif_napi_del(&c->napi);
-
+err_free:
 	kvfree(cparams);
 	kvfree(c);
 	return err;
@@ -515,16 +536,20 @@ void mlx5e_ptp_activate_channel(struct mlx5e_port_ptp *c)
 
 	napi_enable(&c->napi);
 
-	for (tc = 0; tc < c->num_tc; tc++)
-		mlx5e_activate_txqsq(&c->ptpsq[tc].txqsq);
+	if (test_bit(MLX5E_PTP_STATE_TX, c->state)) {
+		for (tc = 0; tc < c->num_tc; tc++)
+			mlx5e_activate_txqsq(&c->ptpsq[tc].txqsq);
+	}
 }
 
 void mlx5e_ptp_deactivate_channel(struct mlx5e_port_ptp *c)
 {
 	int tc;
 
-	for (tc = 0; tc < c->num_tc; tc++)
-		mlx5e_deactivate_txqsq(&c->ptpsq[tc].txqsq);
+	if (test_bit(MLX5E_PTP_STATE_TX, c->state)) {
+		for (tc = 0; tc < c->num_tc; tc++)
+			mlx5e_deactivate_txqsq(&c->ptpsq[tc].txqsq);
+	}
 
 	napi_disable(&c->napi);
 }
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en/ptp.h
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en/reporter_tx.c
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en_main.c b/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
index fca0e8f30721..38fdc4092290 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
@@ -2764,6 +2764,9 @@ static void mlx5e_build_txq_maps(struct mlx5e_priv *priv)
 	if (!priv->channels.port_ptp)
 		return;
 
+	if (!test_bit(MLX5E_PTP_STATE_TX, priv->channels.ptp->state))
+		return;
+
 	for (tc = 0; tc < num_tc; tc++) {
 		struct mlx5e_port_ptp *c = priv->channels.port_ptp;
 		struct mlx5e_txqsq *sq = &c->ptpsq[tc].txqsq;
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_tx.c
