drivers: hv, hyperv_fb: Untangle and refactor Hyper-V panic notifiers

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-483.el8
commit-author Guilherme G. Piccoli <gpiccoli@igalia.com>
commit d786e00d19f9fc80c2239a07643b08ea75b8b364
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-483.el8/d786e00d.failed

Currently Hyper-V guests are among the most relevant users of the panic
infrastructure, like panic notifiers, kmsg dumpers, etc. The reasons rely
both in cleaning-up procedures (closing hypervisor <-> guest connection,
disabling some paravirtualized timer) as well as to data collection
(sending panic information to the hypervisor) and framebuffer management.

The thing is: some notifiers are related to others, ordering matters, some
functionalities are duplicated and there are lots of conditionals behind
sending panic information to the hypervisor. As part of an effort to
clean-up the panic notifiers mechanism and better document things, we
hereby address some of the issues/complexities of Hyper-V panic handling
through the following changes:

(a) We have die and panic notifiers on vmbus_drv.c and both have goals of
sending panic information to the hypervisor, though the panic notifier is
also responsible for a cleaning-up procedure.

This commit clears the code by splitting the panic notifier in two, one
for closing the vmbus connection whereas the other is only for sending
panic info to hypervisor. With that, it was possible to merge the die and
panic notifiers in a single/well-documented function, and clear some
conditional complexities on sending such information to the hypervisor.

(b) There is a Hyper-V framebuffer panic notifier, which relies in doing
a vmbus operation that demands a valid connection. So, we must order this
notifier with the panic notifier from vmbus_drv.c, to guarantee that the
framebuffer code executes before the vmbus connection is unloaded.

Also, this commit removes a useless header.

Although there is code rework and re-ordering, we expect that this change
has no functional regressions but instead optimize the path and increase
panic reliability on Hyper-V. This was tested on Hyper-V with success.

	Cc: Andrea Parri (Microsoft) <parri.andrea@gmail.com>
	Cc: Dexuan Cui <decui@microsoft.com>
	Cc: Haiyang Zhang <haiyangz@microsoft.com>
	Cc: "K. Y. Srinivasan" <kys@microsoft.com>
	Cc: Petr Mladek <pmladek@suse.com>
	Cc: Stephen Hemminger <sthemmin@microsoft.com>
	Cc: Tianyu Lan <Tianyu.Lan@microsoft.com>
	Cc: Wei Liu <wei.liu@kernel.org>
	Reviewed-by: Michael Kelley <mikelley@microsoft.com>
	Tested-by: Fabio A M Martins <fabiomirmar@gmail.com>
	Signed-off-by: Guilherme G. Piccoli <gpiccoli@igalia.com>
	Tested-by: Michael Kelley <mikelley@microsoft.com>
Link: https://lore.kernel.org/r/20220819221731.480795-11-gpiccoli@igalia.com
	Signed-off-by: Wei Liu <wei.liu@kernel.org>
(cherry picked from commit d786e00d19f9fc80c2239a07643b08ea75b8b364)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/hv/vmbus_drv.c
diff --cc drivers/hv/vmbus_drv.c
index a409a7b5df37,0f00d57b7c25..000000000000
--- a/drivers/hv/vmbus_drv.c
+++ b/drivers/hv/vmbus_drv.c
@@@ -38,7 -25,7 +38,11 @@@
  #include <linux/sched/task_stack.h>
  
  #include <linux/delay.h>
++<<<<<<< HEAD
 +#include <linux/notifier.h>
++=======
+ #include <linux/panic_notifier.h>
++>>>>>>> d786e00d19f9 (drivers: hv, hyperv_fb: Untangle and refactor Hyper-V panic notifiers)
  #include <linux/ptrace.h>
  #include <linux/screen_info.h>
  #include <linux/kdebug.h>
* Unmerged path drivers/hv/vmbus_drv.c
diff --git a/drivers/video/fbdev/hyperv_fb.c b/drivers/video/fbdev/hyperv_fb.c
index 595cb3009410..031b59fc304b 100644
--- a/drivers/video/fbdev/hyperv_fb.c
+++ b/drivers/video/fbdev/hyperv_fb.c
@@ -1240,7 +1240,15 @@ static int hvfb_probe(struct hv_device *hdev,
 	par->fb_ready = true;
 
 	par->synchronous_fb = false;
+
+	/*
+	 * We need to be sure this panic notifier runs _before_ the
+	 * vmbus disconnect, so order it by priority. It must execute
+	 * before the function hv_panic_vmbus_unload() [drivers/hv/vmbus_drv.c],
+	 * which is almost at the end of list, with priority = INT_MIN + 1.
+	 */
 	par->hvfb_panic_nb.notifier_call = hvfb_on_panic;
+	par->hvfb_panic_nb.priority = INT_MIN + 10,
 	atomic_notifier_chain_register(&panic_notifier_list,
 				       &par->hvfb_panic_nb);
 
