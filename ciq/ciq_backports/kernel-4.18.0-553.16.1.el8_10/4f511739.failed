x86/bugs: Replace CONFIG_SPECTRE_BHI_{ON,OFF} with CONFIG_MITIGATION_SPECTRE_BHI

jira LE-1907
cve {CVE-2024-2201
cve [RHEL-28202]
cve Long)
cve (Waiman
cve CONFIG_MITIGATION_SPECTRE_BHI
cve with
cve ON,OFF
Rebuild_History Non-Buildable kernel-4.18.0-553.16.1.el8_10
commit-author Josh Poimboeuf <jpoimboe@kernel.org>
commit 4f511739c54b549061993b53fc0380f48dfca23b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-553.16.1.el8_10/4f511739.failed

For consistency with the other CONFIG_MITIGATION_* options, replace the
CONFIG_SPECTRE_BHI_{ON,OFF} options with a single
CONFIG_MITIGATION_SPECTRE_BHI option.

[ mingo: Fix ]

	Signed-off-by: Josh Poimboeuf <jpoimboe@kernel.org>
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
	Cc: Sean Christopherson <seanjc@google.com>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Nikolay Borisov <nik.borisov@suse.com>
Link: https://lore.kernel.org/r/3833812ea63e7fdbe36bf8b932e63f70d18e2a2a.1712813475.git.jpoimboe@kernel.org
(cherry picked from commit 4f511739c54b549061993b53fc0380f48dfca23b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/Kconfig
#	arch/x86/kernel/cpu/bugs.c
diff --cc arch/x86/Kconfig
index 73d31811cdd5,4474bf32d0a4..000000000000
--- a/arch/x86/Kconfig
+++ b/arch/x86/Kconfig
@@@ -2605,6 -2622,27 +2605,30 @@@ config GDS_FORCE_MITIGATIO
  
  	  If in doubt, say N.
  
++<<<<<<< HEAD
++=======
+ config MITIGATION_RFDS
+ 	bool "RFDS Mitigation"
+ 	depends on CPU_SUP_INTEL
+ 	default y
+ 	help
+ 	  Enable mitigation for Register File Data Sampling (RFDS) by default.
+ 	  RFDS is a hardware vulnerability which affects Intel Atom CPUs. It
+ 	  allows unprivileged speculative access to stale data previously
+ 	  stored in floating point, vector and integer registers.
+ 	  See also <file:Documentation/admin-guide/hw-vuln/reg-file-data-sampling.rst>
+ 
+ config MITIGATION_SPECTRE_BHI
+ 	bool "Mitigate Spectre-BHB (Branch History Injection)"
+ 	depends on CPU_SUP_INTEL
+ 	default y
+ 	help
+ 	  Enable BHI mitigations. BHI attacks are a form of Spectre V2 attacks
+ 	  where the branch history buffer is poisoned to speculatively steer
+ 	  indirect branches.
+ 	  See <file:Documentation/admin-guide/hw-vuln/spectre.rst>
+ 
++>>>>>>> 4f511739c54b (x86/bugs: Replace CONFIG_SPECTRE_BHI_{ON,OFF} with CONFIG_MITIGATION_SPECTRE_BHI)
  endif
  
  config ARCH_HAS_ADD_PAGES
diff --cc arch/x86/kernel/cpu/bugs.c
index 845ec3ddb3cc,ca295b0c1eee..000000000000
--- a/arch/x86/kernel/cpu/bugs.c
+++ b/arch/x86/kernel/cpu/bugs.c
@@@ -1541,6 -1606,73 +1541,76 @@@ static void __init spectre_v2_determine
  	dump_stack();
  }
  
++<<<<<<< HEAD
++=======
+ /*
+  * Set BHI_DIS_S to prevent indirect branches in kernel to be influenced by
+  * branch history in userspace. Not needed if BHI_NO is set.
+  */
+ static bool __init spec_ctrl_bhi_dis(void)
+ {
+ 	if (!boot_cpu_has(X86_FEATURE_BHI_CTRL))
+ 		return false;
+ 
+ 	x86_spec_ctrl_base |= SPEC_CTRL_BHI_DIS_S;
+ 	update_spec_ctrl(x86_spec_ctrl_base);
+ 	setup_force_cpu_cap(X86_FEATURE_CLEAR_BHB_HW);
+ 
+ 	return true;
+ }
+ 
+ enum bhi_mitigations {
+ 	BHI_MITIGATION_OFF,
+ 	BHI_MITIGATION_ON,
+ };
+ 
+ static enum bhi_mitigations bhi_mitigation __ro_after_init =
+ 	IS_ENABLED(CONFIG_MITIGATION_SPECTRE_BHI) ? BHI_MITIGATION_ON : BHI_MITIGATION_OFF;
+ 
+ static int __init spectre_bhi_parse_cmdline(char *str)
+ {
+ 	if (!str)
+ 		return -EINVAL;
+ 
+ 	if (!strcmp(str, "off"))
+ 		bhi_mitigation = BHI_MITIGATION_OFF;
+ 	else if (!strcmp(str, "on"))
+ 		bhi_mitigation = BHI_MITIGATION_ON;
+ 	else
+ 		pr_err("Ignoring unknown spectre_bhi option (%s)", str);
+ 
+ 	return 0;
+ }
+ early_param("spectre_bhi", spectre_bhi_parse_cmdline);
+ 
+ static void __init bhi_select_mitigation(void)
+ {
+ 	if (bhi_mitigation == BHI_MITIGATION_OFF)
+ 		return;
+ 
+ 	/* Retpoline mitigates against BHI unless the CPU has RRSBA behavior */
+ 	if (cpu_feature_enabled(X86_FEATURE_RETPOLINE)) {
+ 		spec_ctrl_disable_kernel_rrsba();
+ 		if (rrsba_disabled)
+ 			return;
+ 	}
+ 
+ 	if (spec_ctrl_bhi_dis())
+ 		return;
+ 
+ 	if (!IS_ENABLED(CONFIG_X86_64))
+ 		return;
+ 
+ 	/* Mitigate KVM by default */
+ 	setup_force_cpu_cap(X86_FEATURE_CLEAR_BHB_LOOP_ON_VMEXIT);
+ 	pr_info("Spectre BHI mitigation: SW BHB clearing on vm exit\n");
+ 
+ 	/* Mitigate syscalls when the mitigation is forced =on */
+ 	setup_force_cpu_cap(X86_FEATURE_CLEAR_BHB_LOOP);
+ 	pr_info("Spectre BHI mitigation: SW BHB clearing on syscall\n");
+ }
+ 
++>>>>>>> 4f511739c54b (x86/bugs: Replace CONFIG_SPECTRE_BHI_{ON,OFF} with CONFIG_MITIGATION_SPECTRE_BHI)
  static void __init spectre_v2_select_mitigation(void)
  {
  	enum spectre_v2_mitigation_cmd cmd = spectre_v2_parse_cmdline();
* Unmerged path arch/x86/Kconfig
* Unmerged path arch/x86/kernel/cpu/bugs.c
