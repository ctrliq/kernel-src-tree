Adjust cifssb maximum read size

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-553.16.1.el8_10
commit-author Rohith Surabattula <rohiths@microsoft.com>
commit 06a466565d54a1a42168f9033a062a3f5c40e73b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-553.16.1.el8_10/06a46656.failed

When session gets reconnected during mount then read size in super block fs context
gets set to zero and after negotiate, rsize is not modified which results in
incorrect read with requested bytes as zero. Fixes intermittent failure
of xfstest generic/240

Note that stable requires a different version of this patch which will be
sent to the stable mailing list.

	Signed-off-by: Rohith Surabattula <rohiths@microsoft.com>
	Acked-by: Paulo Alcantara (SUSE) <pc@cjr.nz>
	Signed-off-by: Steve French <stfrench@microsoft.com>
(cherry picked from commit 06a466565d54a1a42168f9033a062a3f5c40e73b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/cifs/cifsfs.c
diff --cc fs/cifs/cifsfs.c
index c1c820624f7f,677c02aa8731..000000000000
--- a/fs/cifs/cifsfs.c
+++ b/fs/cifs/cifsfs.c
@@@ -217,8 -209,14 +217,19 @@@ cifs_read_super(struct super_block *sb
  	rc = super_setup_bdi(sb);
  	if (rc)
  		goto out_no_root;
++<<<<<<< HEAD
 +	/* tune readahead according to rsize */
 +	sb->s_bdi->ra_pages = cifs_sb->ctx->rsize / PAGE_SIZE;
++=======
+ 	/* tune readahead according to rsize if readahead size not set on mount */
+ 	if (cifs_sb->ctx->rsize == 0)
+ 		cifs_sb->ctx->rsize =
+ 			tcon->ses->server->ops->negotiate_rsize(tcon, cifs_sb->ctx);
+ 	if (cifs_sb->ctx->rasize)
+ 		sb->s_bdi->ra_pages = cifs_sb->ctx->rasize / PAGE_SIZE;
+ 	else
+ 		sb->s_bdi->ra_pages = cifs_sb->ctx->rsize / PAGE_SIZE;
++>>>>>>> 06a466565d54 (Adjust cifssb maximum read size)
  
  	sb->s_blocksize = CIFS_MAX_MSGSIZE;
  	sb->s_blocksize_bits = 14;	/* default 2**14 = CIFS_MAX_MSGSIZE */
* Unmerged path fs/cifs/cifsfs.c
diff --git a/fs/cifs/file.c b/fs/cifs/file.c
index 95a0d76da8f9..63af316c7e97 100644
--- a/fs/cifs/file.c
+++ b/fs/cifs/file.c
@@ -3660,6 +3660,11 @@ cifs_send_async_read(loff_t offset, size_t len, struct cifsFileInfo *open_file,
 				break;
 		}
 
+		if (cifs_sb->ctx->rsize == 0)
+			cifs_sb->ctx->rsize =
+				server->ops->negotiate_rsize(tlink_tcon(open_file->tlink),
+							     cifs_sb->ctx);
+
 		rc = server->ops->wait_mtu_credits(server, cifs_sb->ctx->rsize,
 						   &rsize, credits);
 		if (rc)
@@ -4431,6 +4436,11 @@ static int cifs_readpages(struct file *file, struct address_space *mapping,
 				break;
 		}
 
+		if (cifs_sb->ctx->rsize == 0)
+			cifs_sb->ctx->rsize =
+				server->ops->negotiate_rsize(tlink_tcon(open_file->tlink),
+							     cifs_sb->ctx);
+
 		rc = server->ops->wait_mtu_credits(server, cifs_sb->ctx->rsize,
 						   &rsize, credits);
 		if (rc)
