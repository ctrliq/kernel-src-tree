perf record: Introduce data file at mmap buffer object

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-553.16.1.el8_10
commit-author Alexey Bayduraev <alexey.v.bayduraev@linux.intel.com>
commit 56f735fff35e31e54027df36a653b0268bc94f06
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-553.16.1.el8_10/56f735ff.failed

Introduce data file objects into mmap object so it could be used to
process and store data stream from the corresponding kernel data buffer.
Initialize data files located at mmap buffer objects so trace data
can be written into several data file located at data directory.

	Signed-off-by: Alexey Bayduraev <alexey.v.bayduraev@linux.intel.com>
	Tested-by: Jiri Olsa <jolsa@kernel.org>
	Acked-by: Andi Kleen <ak@linux.intel.com>
	Acked-by: Namhyung Kim <namhyung@gmail.com>
	Cc: Adrian Hunter <adrian.hunter@intel.com>
	Cc: Alexander Antonov <alexander.antonov@linux.intel.com>
	Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
	Cc: Alexei Budankov <abudankov@huawei.com>
	Cc: Ingo Molnar <mingo@redhat.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Riccardo Mancini <rickyman7@gmail.com>
Link: https://lore.kernel.org/r/177077f7734b63e5c999ccd75ac6dc3c694f0d0d.1642440724.git.alexey.v.bayduraev@linux.intel.com
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 56f735fff35e31e54027df36a653b0268bc94f06)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/builtin-record.c
diff --cc tools/perf/builtin-record.c
index a12318efae5a,8766a3dc9440..000000000000
--- a/tools/perf/builtin-record.c
+++ b/tools/perf/builtin-record.c
@@@ -843,6 -899,215 +847,10 @@@ static int record__kcore_copy(struct ma
  static int record__mmap_evlist(struct record *rec,
  			       struct evlist *evlist)
  {
++<<<<<<< HEAD
++=======
+ 	int i, ret;
++>>>>>>> 56f735fff35e (perf record: Introduce data file at mmap buffer object)
  	struct record_opts *opts = &rec->opts;
  	bool auxtrace_overwrite = opts->auxtrace_snapshot_mode ||
  				  opts->auxtrace_sample_mode;
@@@ -873,6 -1138,26 +881,29 @@@
  				return -EINVAL;
  		}
  	}
++<<<<<<< HEAD
++=======
+ 
+ 	if (evlist__initialize_ctlfd(evlist, opts->ctl_fd, opts->ctl_fd_ack))
+ 		return -1;
+ 
+ 	ret = record__alloc_thread_data(rec, evlist);
+ 	if (ret)
+ 		return ret;
+ 
+ 	if (record__threads_enabled(rec)) {
+ 		ret = perf_data__create_dir(&rec->data, evlist->core.nr_mmaps);
+ 		if (ret)
+ 			return ret;
+ 		for (i = 0; i < evlist->core.nr_mmaps; i++) {
+ 			if (evlist->mmap)
+ 				evlist->mmap[i].file = &rec->data.dir.files[i];
+ 			if (evlist->overwrite_mmap)
+ 				evlist->overwrite_mmap[i].file = &rec->data.dir.files[i];
+ 		}
+ 	}
+ 
++>>>>>>> 56f735fff35e (perf record: Introduce data file at mmap buffer object)
  	return 0;
  }
  
* Unmerged path tools/perf/builtin-record.c
diff --git a/tools/perf/util/mmap.h b/tools/perf/util/mmap.h
index 9d5f589f02ae..2c49f05e877c 100644
--- a/tools/perf/util/mmap.h
+++ b/tools/perf/util/mmap.h
@@ -43,6 +43,7 @@ struct mmap {
 	struct mmap_cpu_mask	affinity_mask;
 	void		*data;
 	int		comp_level;
+	struct perf_data_file *file;
 };
 
 struct mmap_params {
