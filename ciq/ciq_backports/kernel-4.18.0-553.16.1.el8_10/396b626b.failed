perf record: Introduce thread local variable

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-553.16.1.el8_10
commit-author Alexey Bayduraev <alexey.v.bayduraev@linux.intel.com>
commit 396b626b95d22664d2f2e5ca332e777ea699a10e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-553.16.1.el8_10/396b626b.failed

Introduce thread local variable and use it for threaded trace streaming.
Use thread affinity mask instead of record affinity mask in affinity
modes. Use evlist__ctlfd_update() to propagate control commands from
thread object to global evlist object to enable evlist__ctlfd_*
functionality. Move waking and sample statistic to struct record_thread
and introduce record__waking function to calculate the total number of
wakes.

	Reviewed-by: Riccardo Mancini <rickyman7@gmail.com>
	Signed-off-by: Alexey Bayduraev <alexey.v.bayduraev@linux.intel.com>
	Tested-by: Jiri Olsa <jolsa@kernel.org>
	Tested-by: Riccardo Mancini <rickyman7@gmail.com>
	Acked-by: Andi Kleen <ak@linux.intel.com>
	Acked-by: Namhyung Kim <namhyung@gmail.com>
	Cc: Adrian Hunter <adrian.hunter@intel.com>
	Cc: Alexander Antonov <alexander.antonov@linux.intel.com>
	Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
	Cc: Alexei Budankov <abudankov@huawei.com>
	Cc: Ingo Molnar <mingo@redhat.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
Link: https://lore.kernel.org/r/0d127555219991c1dcd6c6bb76b24fa6b78d2932.1642440724.git.alexey.v.bayduraev@linux.intel.com
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 396b626b95d22664d2f2e5ca332e777ea699a10e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/builtin-record.c
diff --cc tools/perf/builtin-record.c
index a12318efae5a,163d261dd293..000000000000
--- a/tools/perf/builtin-record.c
+++ b/tools/perf/builtin-record.c
@@@ -87,6 -90,30 +87,33 @@@ struct switch_output 
  	int		 cur_file;
  };
  
++<<<<<<< HEAD
++=======
+ struct thread_mask {
+ 	struct mmap_cpu_mask	maps;
+ 	struct mmap_cpu_mask	affinity;
+ };
+ 
+ struct record_thread {
+ 	pid_t			tid;
+ 	struct thread_mask	*mask;
+ 	struct {
+ 		int		msg[2];
+ 		int		ack[2];
+ 	} pipes;
+ 	struct fdarray		pollfd;
+ 	int			ctlfd_pos;
+ 	int			nr_mmaps;
+ 	struct mmap		**maps;
+ 	struct mmap		**overwrite_maps;
+ 	struct record		*rec;
+ 	unsigned long long	samples;
+ 	unsigned long		waking;
+ };
+ 
+ static __thread struct record_thread *thread;
+ 
++>>>>>>> 396b626b95d2 (perf record: Introduce thread local variable)
  struct record {
  	struct perf_tool	tool;
  	struct record_opts	opts;
@@@ -109,8 -136,11 +136,7 @@@
  	bool			timestamp_boundary;
  	struct switch_output	switch_output;
  	unsigned long long	samples;
- 	struct mmap_cpu_mask	affinity_mask;
  	unsigned long		output_max_size;	/* = 0: unlimited */
 -	struct perf_debuginfod	debuginfod;
 -	int			nr_threads;
 -	struct thread_mask	*thread_masks;
 -	struct record_thread	*thread_data;
  };
  
  static volatile int done;
@@@ -2032,8 -2318,11 +2113,14 @@@ static int __cmd_record(struct record *
  		record__synthesize_workload(rec, true);
  
  out_child:
- 	evlist__finalize_ctlfd(rec->evlist);
+ 	record__stop_threads(rec);
  	record__mmap_read_all(rec, true);
++<<<<<<< HEAD
++=======
+ out_free_threads:
+ 	record__free_thread_data(rec);
+ 	evlist__finalize_ctlfd(rec->evlist);
++>>>>>>> 396b626b95d2 (perf record: Introduce thread local variable)
  	record__aio_mmap_read_sync(rec);
  
  	if (rec->session->bytes_transferred && rec->session->bytes_compressed) {
@@@ -2784,17 -3224,6 +2871,20 @@@ int cmd_record(int argc, const char **a
  
  	symbol__init(NULL);
  
++<<<<<<< HEAD
 +	if (rec->opts.affinity != PERF_AFFINITY_SYS) {
 +		rec->affinity_mask.nbits = cpu__max_cpu();
 +		rec->affinity_mask.bits = bitmap_zalloc(rec->affinity_mask.nbits);
 +		if (!rec->affinity_mask.bits) {
 +			pr_err("Failed to allocate thread mask for %zd cpus\n", rec->affinity_mask.nbits);
 +			err = -ENOMEM;
 +			goto out_opts;
 +		}
 +		pr_debug2("thread mask[%zd]: empty\n", rec->affinity_mask.nbits);
 +	}
 +
++=======
++>>>>>>> 396b626b95d2 (perf record: Introduce thread local variable)
  	err = record__auxtrace_init(rec);
  	if (err)
  		goto out;
* Unmerged path tools/perf/builtin-record.c
