x86/bhi: Mitigate KVM by default

jira LE-1907
cve CVE-2024-2201
Rebuild_History Non-Buildable kernel-4.18.0-553.16.1.el8_10
commit-author Pawan Gupta <pawan.kumar.gupta@linux.intel.com>
commit 95a6ccbdc7199a14b71ad8901cb788ba7fb5167b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-553.16.1.el8_10/95a6ccbd.failed

BHI mitigation mode spectre_bhi=auto does not deploy the software
mitigation by default. In a cloud environment, it is a likely scenario
where userspace is trusted but the guests are not trusted. Deploying
system wide mitigation in such cases is not desirable.

Update the auto mode to unconditionally mitigate against malicious
guests. Deploy the software sequence at VMexit in auto mode also, when
hardware mitigation is not available. Unlike the force =on mode,
software sequence is not deployed at syscalls in auto mode.

	Suggested-by: Alexandre Chartre <alexandre.chartre@oracle.com>
	Signed-off-by: Pawan Gupta <pawan.kumar.gupta@linux.intel.com>
	Signed-off-by: Daniel Sneddon <daniel.sneddon@linux.intel.com>
	Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
	Reviewed-by: Alexandre Chartre <alexandre.chartre@oracle.com>
	Reviewed-by: Josh Poimboeuf <jpoimboe@kernel.org>

(cherry picked from commit 95a6ccbdc7199a14b71ad8901cb788ba7fb5167b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	Documentation/admin-guide/hw-vuln/spectre.rst
#	Documentation/admin-guide/kernel-parameters.txt
#	arch/x86/include/asm/cpufeatures.h
#	arch/x86/include/asm/nospec-branch.h
#	arch/x86/kernel/cpu/bugs.c
#	arch/x86/kvm/vmx/vmenter.S
diff --cc Documentation/admin-guide/hw-vuln/spectre.rst
index 166facdabe9f,b70b1d8bd8e6..000000000000
--- a/Documentation/admin-guide/hw-vuln/spectre.rst
+++ b/Documentation/admin-guide/hw-vuln/spectre.rst
@@@ -430,6 -429,23 +430,26 @@@ The possible values in this file are
    'PBRSB-eIBRS: Not affected'  CPU is not affected by PBRSB
    ===========================  =======================================================
  
++<<<<<<< HEAD
++=======
+   - Branch History Injection (BHI) protection status:
+ 
+ .. list-table::
+ 
+  * - BHI: Not affected
+    - System is not affected
+  * - BHI: Retpoline
+    - System is protected by retpoline
+  * - BHI: BHI_DIS_S
+    - System is protected by BHI_DIS_S
+  * - BHI: SW loop; KVM SW loop
+    - System is protected by software clearing sequence
+  * - BHI: Syscall hardening
+    - Syscalls are hardened against BHI
+  * - BHI: Syscall hardening; KVM: SW loop
+    - System is protected from userspace attacks by syscall hardening; KVM is protected by software clearing sequence
+ 
++>>>>>>> 95a6ccbdc719 (x86/bhi: Mitigate KVM by default)
  Full mitigation might require a microcode update from the CPU
  vendor. When the necessary microcode is not available, the kernel will
  report vulnerability.
@@@ -638,6 -658,22 +658,25 @@@ kernel command line
  		spectre_v2=off. Spectre variant 1 mitigations
  		cannot be disabled.
  
++<<<<<<< HEAD
++=======
+ 	spectre_bhi=
+ 
+ 		[X86] Control mitigation of Branch History Injection
+ 		(BHI) vulnerability. Syscalls are hardened against BHI
+ 		regardless of this setting. This setting affects the deployment
+ 		of the HW BHI control and the SW BHB clearing sequence.
+ 
+ 		on
+ 			unconditionally enable.
+ 		off
+ 			unconditionally disable.
+ 		auto
+ 			enable if hardware mitigation
+ 			control(BHI_DIS_S) is available, otherwise
+ 			enable alternate mitigation in KVM.
+ 
++>>>>>>> 95a6ccbdc719 (x86/bhi: Mitigate KVM by default)
  For spectre_v2_user see Documentation/admin-guide/kernel-parameters.txt
  
  Mitigation selection guide
diff --cc Documentation/admin-guide/kernel-parameters.txt
index 7966e84c59b3,4fa46302f436..000000000000
--- a/Documentation/admin-guide/kernel-parameters.txt
+++ b/Documentation/admin-guide/kernel-parameters.txt
@@@ -5021,12 -6058,24 +5021,28 @@@
  	softlockup_all_cpu_backtrace=
  			[KNL] Should the soft-lockup detector generate
  			backtraces on all cpus.
 -			Format: 0 | 1
 +			Format: <integer>
  
  	sonypi.*=	[HW] Sony Programmable I/O Control Device driver
 -			See Documentation/admin-guide/laptops/sonypi.rst
 +			See Documentation/laptops/sonypi.txt
  
++<<<<<<< HEAD
 +	spectre_v2=	[X86] Control mitigation of Spectre variant 2
++=======
+ 	spectre_bhi=	[X86] Control mitigation of Branch History Injection
+ 			(BHI) vulnerability. Syscalls are hardened against BHI
+ 			reglardless of this setting. This setting affects the
+ 			deployment of the HW BHI control and the SW BHB
+ 			clearing sequence.
+ 
+ 			on   - unconditionally enable.
+ 			off  - unconditionally disable.
+ 			auto - (default) enable hardware mitigation
+ 			       (BHI_DIS_S) if available, otherwise enable
+ 			       alternate mitigation in KVM.
+ 
+ 	spectre_v2=	[X86,EARLY] Control mitigation of Spectre variant 2
++>>>>>>> 95a6ccbdc719 (x86/bhi: Mitigate KVM by default)
  			(indirect branch speculation) vulnerability.
  			The default operation protects the kernel from
  			user space attacks.
diff --cc arch/x86/include/asm/cpufeatures.h
index fff57d23f577,3c7434329661..000000000000
--- a/arch/x86/include/asm/cpufeatures.h
+++ b/arch/x86/include/asm/cpufeatures.h
@@@ -447,6 -466,10 +447,13 @@@
   * Reuse free bits when adding new feature flags!
   */
  #define X86_FEATURE_AMD_LBR_PMC_FREEZE	(21*32+ 0) /* AMD LBR and PMC Freeze */
++<<<<<<< HEAD
++=======
+ #define X86_FEATURE_CLEAR_BHB_LOOP	(21*32+ 1) /* "" Clear branch history at syscall entry using SW loop */
+ #define X86_FEATURE_BHI_CTRL		(21*32+ 2) /* "" BHI_DIS_S HW control available */
+ #define X86_FEATURE_CLEAR_BHB_HW	(21*32+ 3) /* "" BHI_DIS_S HW control enabled */
+ #define X86_FEATURE_CLEAR_BHB_LOOP_ON_VMEXIT (21*32+ 4) /* "" Clear branch history at vmexit using SW loop */
++>>>>>>> 95a6ccbdc719 (x86/bhi: Mitigate KVM by default)
  
  /*
   * BUG word(s)
diff --cc arch/x86/include/asm/nospec-branch.h
index 9d381b856139,ff5f1ecc7d1e..000000000000
--- a/arch/x86/include/asm/nospec-branch.h
+++ b/arch/x86/include/asm/nospec-branch.h
@@@ -215,6 -326,19 +215,22 @@@
  	ALTERNATIVE "", __stringify(verw _ASM_RIP(mds_verw_sel)), X86_FEATURE_CLEAR_CPU_BUF
  .endm
  
++<<<<<<< HEAD
++=======
+ #ifdef CONFIG_X86_64
+ .macro CLEAR_BRANCH_HISTORY
+ 	ALTERNATIVE "", "call clear_bhb_loop", X86_FEATURE_CLEAR_BHB_LOOP
+ .endm
+ 
+ .macro CLEAR_BRANCH_HISTORY_VMEXIT
+ 	ALTERNATIVE "", "call clear_bhb_loop", X86_FEATURE_CLEAR_BHB_LOOP_ON_VMEXIT
+ .endm
+ #else
+ #define CLEAR_BRANCH_HISTORY
+ #define CLEAR_BRANCH_HISTORY_VMEXIT
+ #endif
+ 
++>>>>>>> 95a6ccbdc719 (x86/bhi: Mitigate KVM by default)
  #else /* __ASSEMBLY__ */
  
  #define ANNOTATE_RETPOLINE_SAFE					\
diff --cc arch/x86/kernel/cpu/bugs.c
index 845ec3ddb3cc,295463707e68..000000000000
--- a/arch/x86/kernel/cpu/bugs.c
+++ b/arch/x86/kernel/cpu/bugs.c
@@@ -1541,6 -1607,79 +1541,82 @@@ static void __init spectre_v2_determine
  	dump_stack();
  }
  
++<<<<<<< HEAD
++=======
+ /*
+  * Set BHI_DIS_S to prevent indirect branches in kernel to be influenced by
+  * branch history in userspace. Not needed if BHI_NO is set.
+  */
+ static bool __init spec_ctrl_bhi_dis(void)
+ {
+ 	if (!boot_cpu_has(X86_FEATURE_BHI_CTRL))
+ 		return false;
+ 
+ 	x86_spec_ctrl_base |= SPEC_CTRL_BHI_DIS_S;
+ 	update_spec_ctrl(x86_spec_ctrl_base);
+ 	setup_force_cpu_cap(X86_FEATURE_CLEAR_BHB_HW);
+ 
+ 	return true;
+ }
+ 
+ enum bhi_mitigations {
+ 	BHI_MITIGATION_OFF,
+ 	BHI_MITIGATION_ON,
+ 	BHI_MITIGATION_AUTO,
+ };
+ 
+ static enum bhi_mitigations bhi_mitigation __ro_after_init =
+ 	IS_ENABLED(CONFIG_SPECTRE_BHI_ON)  ? BHI_MITIGATION_ON  :
+ 	IS_ENABLED(CONFIG_SPECTRE_BHI_OFF) ? BHI_MITIGATION_OFF :
+ 					     BHI_MITIGATION_AUTO;
+ 
+ static int __init spectre_bhi_parse_cmdline(char *str)
+ {
+ 	if (!str)
+ 		return -EINVAL;
+ 
+ 	if (!strcmp(str, "off"))
+ 		bhi_mitigation = BHI_MITIGATION_OFF;
+ 	else if (!strcmp(str, "on"))
+ 		bhi_mitigation = BHI_MITIGATION_ON;
+ 	else if (!strcmp(str, "auto"))
+ 		bhi_mitigation = BHI_MITIGATION_AUTO;
+ 	else
+ 		pr_err("Ignoring unknown spectre_bhi option (%s)", str);
+ 
+ 	return 0;
+ }
+ early_param("spectre_bhi", spectre_bhi_parse_cmdline);
+ 
+ static void __init bhi_select_mitigation(void)
+ {
+ 	if (bhi_mitigation == BHI_MITIGATION_OFF)
+ 		return;
+ 
+ 	/* Retpoline mitigates against BHI unless the CPU has RRSBA behavior */
+ 	if (cpu_feature_enabled(X86_FEATURE_RETPOLINE) &&
+ 	    !(x86_read_arch_cap_msr() & ARCH_CAP_RRSBA))
+ 		return;
+ 
+ 	if (spec_ctrl_bhi_dis())
+ 		return;
+ 
+ 	if (!IS_ENABLED(CONFIG_X86_64))
+ 		return;
+ 
+ 	/* Mitigate KVM by default */
+ 	setup_force_cpu_cap(X86_FEATURE_CLEAR_BHB_LOOP_ON_VMEXIT);
+ 	pr_info("Spectre BHI mitigation: SW BHB clearing on vm exit\n");
+ 
+ 	if (bhi_mitigation == BHI_MITIGATION_AUTO)
+ 		return;
+ 
+ 	/* Mitigate syscalls when the mitigation is forced =on */
+ 	setup_force_cpu_cap(X86_FEATURE_CLEAR_BHB_LOOP);
+ 	pr_info("Spectre BHI mitigation: SW BHB clearing on syscall\n");
+ }
+ 
++>>>>>>> 95a6ccbdc719 (x86/bhi: Mitigate KVM by default)
  static void __init spectre_v2_select_mitigation(void)
  {
  	enum spectre_v2_mitigation_cmd cmd = spectre_v2_parse_cmdline();
@@@ -2723,6 -2809,23 +2799,26 @@@ static char *pbrsb_eibrs_state(void
  	}
  }
  
++<<<<<<< HEAD
++=======
+ static const char * const spectre_bhi_state(void)
+ {
+ 	if (!boot_cpu_has_bug(X86_BUG_BHI))
+ 		return "; BHI: Not affected";
+ 	else if  (boot_cpu_has(X86_FEATURE_CLEAR_BHB_HW))
+ 		return "; BHI: BHI_DIS_S";
+ 	else if  (boot_cpu_has(X86_FEATURE_CLEAR_BHB_LOOP))
+ 		return "; BHI: SW loop, KVM: SW loop";
+ 	else if (boot_cpu_has(X86_FEATURE_RETPOLINE) &&
+ 		 !(x86_read_arch_cap_msr() & ARCH_CAP_RRSBA))
+ 		return "; BHI: Retpoline";
+ 	else if  (boot_cpu_has(X86_FEATURE_CLEAR_BHB_LOOP_ON_VMEXIT))
+ 		return "; BHI: Syscall hardening, KVM: SW loop";
+ 
+ 	return "; BHI: Vulnerable (Syscall hardening enabled)";
+ }
+ 
++>>>>>>> 95a6ccbdc719 (x86/bhi: Mitigate KVM by default)
  static ssize_t spectre_v2_show_state(char *buf)
  {
  	if (spectre_v2_enabled == SPECTRE_V2_LFENCE)
diff --cc arch/x86/kvm/vmx/vmenter.S
index b86dc4e6ef99,f6986dee6f8c..000000000000
--- a/arch/x86/kvm/vmx/vmenter.S
+++ b/arch/x86/kvm/vmx/vmenter.S
@@@ -239,6 -275,8 +239,11 @@@ SYM_INNER_LABEL(vmx_vmexit, SYM_L_GLOBA
  
  	call vmx_spec_ctrl_restore_host
  
++<<<<<<< HEAD
++=======
+ 	CLEAR_BRANCH_HISTORY_VMEXIT
+ 
++>>>>>>> 95a6ccbdc719 (x86/bhi: Mitigate KVM by default)
  	/* Put return value in AX */
  	mov %_ASM_BX, %_ASM_AX
  
* Unmerged path Documentation/admin-guide/hw-vuln/spectre.rst
* Unmerged path Documentation/admin-guide/kernel-parameters.txt
* Unmerged path arch/x86/include/asm/cpufeatures.h
* Unmerged path arch/x86/include/asm/nospec-branch.h
* Unmerged path arch/x86/kernel/cpu/bugs.c
* Unmerged path arch/x86/kvm/vmx/vmenter.S
