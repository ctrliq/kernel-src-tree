x86/bugs: Cache the value of MSR_IA32_ARCH_CAPABILITIES

jira LE-1907
cve CVE-2024-2201
Rebuild_History Non-Buildable kernel-4.18.0-553.16.1.el8_10
commit-author Josh Poimboeuf <jpoimboe@kernel.org>
commit cb2db5bb04d7f778fbc1a1ea2507aab436f1bff3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-553.16.1.el8_10/cb2db5bb.failed

There's no need to keep reading MSR_IA32_ARCH_CAPABILITIES over and
over.  It's even read in the BHI sysfs function which is a big no-no.
Just read it once and cache it.

Fixes: ec9404e40e8f ("x86/bhi: Add BHI mitigation knob")
	Signed-off-by: Josh Poimboeuf <jpoimboe@kernel.org>
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
	Reviewed-by: Nikolay Borisov <nik.borisov@suse.com>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Sean Christopherson <seanjc@google.com>
Link: https://lore.kernel.org/r/9592a18a814368e75f8f4b9d74d3883aa4fd1eaf.1712813475.git.jpoimboe@kernel.org
(cherry picked from commit cb2db5bb04d7f778fbc1a1ea2507aab436f1bff3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kernel/cpu/bugs.c
diff --cc arch/x86/kernel/cpu/bugs.c
index 845ec3ddb3cc,ff59fa8bb610..000000000000
--- a/arch/x86/kernel/cpu/bugs.c
+++ b/arch/x86/kernel/cpu/bugs.c
@@@ -526,6 -478,57 +523,60 @@@ static int __init mmio_stale_data_parse
  early_param("mmio_stale_data", mmio_stale_data_parse_cmdline);
  
  #undef pr_fmt
++<<<<<<< HEAD
++=======
+ #define pr_fmt(fmt)	"Register File Data Sampling: " fmt
+ 
+ enum rfds_mitigations {
+ 	RFDS_MITIGATION_OFF,
+ 	RFDS_MITIGATION_VERW,
+ 	RFDS_MITIGATION_UCODE_NEEDED,
+ };
+ 
+ /* Default mitigation for Register File Data Sampling */
+ static enum rfds_mitigations rfds_mitigation __ro_after_init =
+ 	IS_ENABLED(CONFIG_MITIGATION_RFDS) ? RFDS_MITIGATION_VERW : RFDS_MITIGATION_OFF;
+ 
+ static const char * const rfds_strings[] = {
+ 	[RFDS_MITIGATION_OFF]			= "Vulnerable",
+ 	[RFDS_MITIGATION_VERW]			= "Mitigation: Clear Register File",
+ 	[RFDS_MITIGATION_UCODE_NEEDED]		= "Vulnerable: No microcode",
+ };
+ 
+ static void __init rfds_select_mitigation(void)
+ {
+ 	if (!boot_cpu_has_bug(X86_BUG_RFDS) || cpu_mitigations_off()) {
+ 		rfds_mitigation = RFDS_MITIGATION_OFF;
+ 		return;
+ 	}
+ 	if (rfds_mitigation == RFDS_MITIGATION_OFF)
+ 		return;
+ 
+ 	if (ia32_cap & ARCH_CAP_RFDS_CLEAR)
+ 		setup_force_cpu_cap(X86_FEATURE_CLEAR_CPU_BUF);
+ 	else
+ 		rfds_mitigation = RFDS_MITIGATION_UCODE_NEEDED;
+ }
+ 
+ static __init int rfds_parse_cmdline(char *str)
+ {
+ 	if (!str)
+ 		return -EINVAL;
+ 
+ 	if (!boot_cpu_has_bug(X86_BUG_RFDS))
+ 		return 0;
+ 
+ 	if (!strcmp(str, "off"))
+ 		rfds_mitigation = RFDS_MITIGATION_OFF;
+ 	else if (!strcmp(str, "on"))
+ 		rfds_mitigation = RFDS_MITIGATION_VERW;
+ 
+ 	return 0;
+ }
+ early_param("reg_file_data_sampling", rfds_parse_cmdline);
+ 
+ #undef pr_fmt
++>>>>>>> cb2db5bb04d7 (x86/bugs: Cache the value of MSR_IA32_ARCH_CAPABILITIES)
  #define pr_fmt(fmt)     "" fmt
  
  static void __init md_clear_update_mitigation(void)
@@@ -2723,6 -2801,23 +2769,26 @@@ static char *pbrsb_eibrs_state(void
  	}
  }
  
++<<<<<<< HEAD
++=======
+ static const char *spectre_bhi_state(void)
+ {
+ 	if (!boot_cpu_has_bug(X86_BUG_BHI))
+ 		return "; BHI: Not affected";
+ 	else if  (boot_cpu_has(X86_FEATURE_CLEAR_BHB_HW))
+ 		return "; BHI: BHI_DIS_S";
+ 	else if  (boot_cpu_has(X86_FEATURE_CLEAR_BHB_LOOP))
+ 		return "; BHI: SW loop, KVM: SW loop";
+ 	else if (boot_cpu_has(X86_FEATURE_RETPOLINE) &&
+ 		 !(ia32_cap & ARCH_CAP_RRSBA))
+ 		return "; BHI: Retpoline";
+ 	else if  (boot_cpu_has(X86_FEATURE_CLEAR_BHB_LOOP_ON_VMEXIT))
+ 		return "; BHI: Syscall hardening, KVM: SW loop";
+ 
+ 	return "; BHI: Vulnerable (Syscall hardening enabled)";
+ }
+ 
++>>>>>>> cb2db5bb04d7 (x86/bugs: Cache the value of MSR_IA32_ARCH_CAPABILITIES)
  static ssize_t spectre_v2_show_state(char *buf)
  {
  	if (spectre_v2_enabled == SPECTRE_V2_LFENCE)
* Unmerged path arch/x86/kernel/cpu/bugs.c
