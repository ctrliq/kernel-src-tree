Revert "net/mlx5: Block entering switchdev mode with ns inconsistency"

jira LE-1907
cve CVE-2023-52658
Rebuild_History Non-Buildable kernel-4.18.0-553.16.1.el8_10
commit-author Gavin Li <gavinl@nvidia.com>
commit 8deeefb24786ea7950b37bde4516b286c877db00
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-553.16.1.el8_10/8deeefb2.failed

This reverts commit 662404b24a4c4d839839ed25e3097571f5938b9b.
The revert is required due to the suspicion it is not good for anything
and cause crash.

Fixes: 662404b24a4c ("net/mlx5e: Block entering switchdev mode with ns inconsistency")
	Signed-off-by: Gavin Li <gavinl@nvidia.com>
	Reviewed-by: Jiri Pirko <jiri@nvidia.com>
	Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
(cherry picked from commit 8deeefb24786ea7950b37bde4516b286c877db00)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/eswitch_offloads.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/eswitch_offloads.c
index a5dbaa780037,14b3bd3c5e2f..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/eswitch_offloads.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/eswitch_offloads.c
@@@ -3315,20 -3658,34 +3315,51 @@@ static int esw_inline_mode_to_devlink(u
  	return 0;
  }
  
++<<<<<<< HEAD
 +static bool esw_offloads_devlink_ns_eq_netdev_ns(struct devlink *devlink)
 +{
 +	struct mlx5_core_dev *dev = devlink_priv(devlink);
 +	struct net *devl_net, *netdev_net;
 +	bool ret = false;
 +
 +	mutex_lock(&dev->mlx5e_res.uplink_netdev_lock);
 +	if (dev->mlx5e_res.uplink_netdev) {
 +		netdev_net = dev_net(dev->mlx5e_res.uplink_netdev);
 +		devl_net = devlink_net(devlink);
 +		ret = net_eq(devl_net, netdev_net);
 +	}
 +	mutex_unlock(&dev->mlx5e_res.uplink_netdev_lock);
 +	return ret;
++=======
+ int mlx5_eswitch_block_mode(struct mlx5_core_dev *dev)
+ {
+ 	struct mlx5_eswitch *esw = dev->priv.eswitch;
+ 	int err;
+ 
+ 	if (!mlx5_esw_allowed(esw))
+ 		return 0;
+ 
+ 	/* Take TC into account */
+ 	err = mlx5_esw_try_lock(esw);
+ 	if (err < 0)
+ 		return err;
+ 
+ 	esw->offloads.num_block_mode++;
+ 	mlx5_esw_unlock(esw);
+ 	return 0;
+ }
+ 
+ void mlx5_eswitch_unblock_mode(struct mlx5_core_dev *dev)
+ {
+ 	struct mlx5_eswitch *esw = dev->priv.eswitch;
+ 
+ 	if (!mlx5_esw_allowed(esw))
+ 		return;
+ 
+ 	down_write(&esw->mode_lock);
+ 	esw->offloads.num_block_mode--;
+ 	up_write(&esw->mode_lock);
++>>>>>>> 8deeefb24786 (Revert "net/mlx5: Block entering switchdev mode with ns inconsistency")
  }
  
  int mlx5_devlink_eswitch_mode_set(struct devlink *devlink, u16 mode,
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/eswitch_offloads.c
