xfs: fix bounds check in xfs_defer_agfl_block()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-553.16.1.el8_10
commit-author Dave Chinner <dchinner@redhat.com>
commit 2bed0d82c2f78b91a0a9a5a73da57ee883a0c070
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-553.16.1.el8_10/2bed0d82.failed

Need to happen before we allocate and then leak the xefi. Found by
coverity via an xfsprogs libxfs scan.

[djwong: This also fixes the type of the @agbno argument.]

Fixes: 7dfee17b13e5 ("xfs: validate block number being freed before adding to xefi")
	Signed-off-by: Dave Chinner <dchinner@redhat.com>
	Reviewed-by: Christoph Hellwig <hch@lst.de>
	Reviewed-by: Darrick J. Wong <djwong@kernel.org>
	Signed-off-by: Darrick J. Wong <djwong@kernel.org>
(cherry picked from commit 2bed0d82c2f78b91a0a9a5a73da57ee883a0c070)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/xfs/libxfs/xfs_alloc.c
diff --cc fs/xfs/libxfs/xfs_alloc.c
index 2debb6bf24be,e2da7de9b37e..000000000000
--- a/fs/xfs/libxfs/xfs_alloc.c
+++ b/fs/xfs/libxfs/xfs_alloc.c
@@@ -2487,17 -2474,21 +2487,34 @@@ xfs_defer_agfl_block
  	struct xfs_owner_info		*oinfo)
  {
  	struct xfs_mount		*mp = tp->t_mountp;
++<<<<<<< HEAD
 +	struct xfs_extent_free_item	*new;		/* new element */
++=======
+ 	struct xfs_extent_free_item	*xefi;
+ 	xfs_fsblock_t			fsbno = XFS_AGB_TO_FSB(mp, agno, agbno);
++>>>>>>> 2bed0d82c2f7 (xfs: fix bounds check in xfs_defer_agfl_block())
  
 -	ASSERT(xfs_extfree_item_cache != NULL);
 +	ASSERT(xfs_bmap_free_item_zone != NULL);
  	ASSERT(oinfo != NULL);
  
++<<<<<<< HEAD
 +	new = kmem_cache_alloc(xfs_bmap_free_item_zone,
 +			       GFP_KERNEL | __GFP_NOFAIL);
 +	new->xefi_startblock = XFS_AGB_TO_FSB(mp, agno, agbno);
 +	new->xefi_blockcount = 1;
 +	new->xefi_oinfo = *oinfo;
 +	new->xefi_skip_discard = false;
++=======
+ 	if (XFS_IS_CORRUPT(mp, !xfs_verify_fsbno(mp, fsbno)))
+ 		return -EFSCORRUPTED;
+ 
+ 	xefi = kmem_cache_zalloc(xfs_extfree_item_cache,
+ 			       GFP_KERNEL | __GFP_NOFAIL);
+ 	xefi->xefi_startblock = fsbno;
+ 	xefi->xefi_blockcount = 1;
+ 	xefi->xefi_owner = oinfo->oi_owner;
+ 	xefi->xefi_agresv = XFS_AG_RESV_AGFL;
++>>>>>>> 2bed0d82c2f7 (xfs: fix bounds check in xfs_defer_agfl_block())
  
  	trace_xfs_agfl_free_defer(mp, agno, 0, agbno, 1);
  
* Unmerged path fs/xfs/libxfs/xfs_alloc.c
