perf record: Introduce bytes written stats

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-553.16.1.el8_10
commit-author Alexey Bayduraev <alexey.v.bayduraev@linux.intel.com>
commit ae9c7242b29fa2976c70b5b250f8942cf7289211
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-553.16.1.el8_10/ae9c7242.failed

Introduce a function to calculate the total amount of data written
and use it to support the --max-size option.

	Reviewed-by: Riccardo Mancini <rickyman7@gmail.com>
	Signed-off-by: Alexey Bayduraev <alexey.v.bayduraev@linux.intel.com>
	Tested-by: Jiri Olsa <jolsa@kernel.org>
	Tested-by: Riccardo Mancini <rickyman7@gmail.com>
	Acked-by: Namhyung Kim <namhyung@kernel.org>
	Cc: Adrian Hunter <adrian.hunter@intel.com>
	Cc: Alexander Antonov <alexander.antonov@linux.intel.com>
	Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
	Cc: Alexei Budankov <abudankov@huawei.com>
	Cc: Andi Kleen <ak@linux.intel.com>
	Cc: Ingo Molnar <mingo@redhat.com>
	Cc: Peter Zijlstra <peterz@infradead.org>
Link: https://lore.kernel.org/r/3e2c69186641446f8ab003ec209bccc762b3394d.1642440724.git.alexey.v.bayduraev@linux.intel.com
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit ae9c7242b29fa2976c70b5b250f8942cf7289211)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/builtin-record.c
diff --cc tools/perf/builtin-record.c
index a12318efae5a,50981bbc98bb..000000000000
--- a/tools/perf/builtin-record.c
+++ b/tools/perf/builtin-record.c
@@@ -87,6 -90,41 +87,44 @@@ struct switch_output 
  	int		 cur_file;
  };
  
++<<<<<<< HEAD
++=======
+ struct thread_mask {
+ 	struct mmap_cpu_mask	maps;
+ 	struct mmap_cpu_mask	affinity;
+ };
+ 
+ struct record_thread {
+ 	pid_t			tid;
+ 	struct thread_mask	*mask;
+ 	struct {
+ 		int		msg[2];
+ 		int		ack[2];
+ 	} pipes;
+ 	struct fdarray		pollfd;
+ 	int			ctlfd_pos;
+ 	int			nr_mmaps;
+ 	struct mmap		**maps;
+ 	struct mmap		**overwrite_maps;
+ 	struct record		*rec;
+ 	unsigned long long	samples;
+ 	unsigned long		waking;
+ 	u64			bytes_written;
+ };
+ 
+ static __thread struct record_thread *thread;
+ 
+ enum thread_msg {
+ 	THREAD_MSG__UNDEFINED = 0,
+ 	THREAD_MSG__READY,
+ 	THREAD_MSG__MAX,
+ };
+ 
+ static const char *thread_msg_tags[THREAD_MSG__MAX] = {
+ 	"UNDEFINED", "READY"
+ };
+ 
++>>>>>>> ae9c7242b29f (perf record: Introduce bytes written stats)
  struct record {
  	struct perf_tool	tool;
  	struct record_opts	opts;
@@@ -158,7 -226,10 +208,14 @@@ static int record__write(struct record 
  		return -1;
  	}
  
++<<<<<<< HEAD
 +	rec->bytes_written += size;
++=======
+ 	if (map && map->file)
+ 		thread->bytes_written += size;
+ 	else
+ 		rec->bytes_written += size;
++>>>>>>> ae9c7242b29f (perf record: Introduce bytes written stats)
  
  	if (record__output_max_size_exceeded(rec) && !done) {
  		fprintf(stderr, "[ perf record: perf size limit reached (%" PRIu64 " KB),"
* Unmerged path tools/perf/builtin-record.c
