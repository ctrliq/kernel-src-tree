fs/proc: do_task_stat: move thread_group_cputime_adjusted() outside of lock_task_sighand()

jira LE-1907
cve CVE-2024-26686
Rebuild_History Non-Buildable kernel-4.18.0-553.16.1.el8_10
commit-author Oleg Nesterov <oleg@redhat.com>
commit 60f92acb60a989b14e4b744501a0df0f82ef30a3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-553.16.1.el8_10/60f92acb.failed

Patch series "fs/proc: do_task_stat: use sig->stats_".

do_task_stat() has the same problem as getrusage() had before "getrusage:
use sig->stats_lock rather than lock_task_sighand()": a hard lockup.  If
NR_CPUS threads call lock_task_sighand() at the same time and the process
has NR_THREADS, spin_lock_irq will spin with irqs disabled O(NR_CPUS *
NR_THREADS) time.


This patch (of 3):

thread_group_cputime() does its own locking, we can safely shift
thread_group_cputime_adjusted() which does another for_each_thread loop
outside of ->siglock protected section.

Not only this removes for_each_thread() from the critical section with
irqs disabled, this removes another case when stats_lock is taken with
siglock held.  We want to remove this dependency, then we can change the
users of stats_lock to not disable irqs.

Link: https://lkml.kernel.org/r/20240123153313.GA21832@redhat.com
Link: https://lkml.kernel.org/r/20240123153355.GA21854@redhat.com
	Signed-off-by: Oleg Nesterov <oleg@redhat.com>
	Signed-off-by: Dylan Hatch <dylanbhatch@google.com>
	Cc: Eric W. Biederman <ebiederm@xmission.com>
	Cc: <stable@vger.kernel.org>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
(cherry picked from commit 60f92acb60a989b14e4b744501a0df0f82ef30a3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/proc/array.c
diff --cc fs/proc/array.c
index ed41b8b9bd7f,45ba91863808..000000000000
--- a/fs/proc/array.c
+++ b/fs/proc/array.c
@@@ -526,11 -560,14 +525,19 @@@ static int do_task_stat(struct seq_fil
  	}
  
  	if (permitted && (!whole || num_threads < 2))
++<<<<<<< HEAD
 +		wchan = get_wchan(task);
 +	if (!whole) {
++=======
+ 		wchan = !task_is_running(task);
+ 
+ 	if (whole) {
+ 		thread_group_cputime_adjusted(task, &utime, &stime);
+ 	} else {
+ 		task_cputime_adjusted(task, &utime, &stime);
++>>>>>>> 60f92acb60a9 (fs/proc: do_task_stat: move thread_group_cputime_adjusted() outside of lock_task_sighand())
  		min_flt = task->min_flt;
  		maj_flt = task->maj_flt;
- 		task_cputime_adjusted(task, &utime, &stime);
  		gtime = task_gtime(task);
  	}
  
* Unmerged path fs/proc/array.c
