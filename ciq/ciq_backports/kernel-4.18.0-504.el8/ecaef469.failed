cacheinfo: Initialize variables in fetch_cache_info()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-504.el8
commit-author Pierre Gondois <pierre.gondois@arm.com>
commit ecaef469920fd6d2c7687f19081946f47684a423
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-504.el8/ecaef469.failed

Set potentially uninitialized variables to 0. This is particularly
relevant when CONFIG_ACPI_PPTT is not set.

	Reported-by: kernel test robot <lkp@intel.com>
Link: https://lore.kernel.org/all/202301052307.JYt1GWaJ-lkp@intel.com/
	Reported-by: Dan Carpenter <error27@gmail.com>
Link: https://lore.kernel.org/all/Y86iruJPuwNN7rZw@kili/
Fixes: 5944ce092b97 ("arch_topology: Build cacheinfo from primary CPU")
	Signed-off-by: Pierre Gondois <pierre.gondois@arm.com>
	Reviewed-by: Conor Dooley <conor.dooley@microchip.com>
Link: https://lore.kernel.org/r/20230124154053.355376-2-pierre.gondois@arm.com
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit ecaef469920fd6d2c7687f19081946f47684a423)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/base/cacheinfo.c
diff --cc drivers/base/cacheinfo.c
index 9ffa98a81659,f6573c335f4c..000000000000
--- a/drivers/base/cacheinfo.c
+++ b/drivers/base/cacheinfo.c
@@@ -355,6 -408,50 +355,53 @@@ int __weak populate_cache_leaves(unsign
  	return -ENOENT;
  }
  
++<<<<<<< HEAD
++=======
+ static inline
+ int allocate_cache_info(int cpu)
+ {
+ 	per_cpu_cacheinfo(cpu) = kcalloc(cache_leaves(cpu),
+ 					 sizeof(struct cacheinfo), GFP_ATOMIC);
+ 	if (!per_cpu_cacheinfo(cpu)) {
+ 		cache_leaves(cpu) = 0;
+ 		return -ENOMEM;
+ 	}
+ 
+ 	return 0;
+ }
+ 
+ int fetch_cache_info(unsigned int cpu)
+ {
+ 	struct cpu_cacheinfo *this_cpu_ci;
+ 	unsigned int levels = 0, split_levels = 0;
+ 	int ret;
+ 
+ 	if (acpi_disabled) {
+ 		ret = init_of_cache_level(cpu);
+ 		if (ret < 0)
+ 			return ret;
+ 	} else {
+ 		ret = acpi_get_cache_info(cpu, &levels, &split_levels);
+ 		if (ret < 0)
+ 			return ret;
+ 
+ 		this_cpu_ci = get_cpu_cacheinfo(cpu);
+ 		this_cpu_ci->num_levels = levels;
+ 		/*
+ 		 * This assumes that:
+ 		 * - there cannot be any split caches (data/instruction)
+ 		 *   above a unified cache
+ 		 * - data/instruction caches come by pair
+ 		 */
+ 		this_cpu_ci->num_leaves = levels + split_levels;
+ 	}
+ 	if (!cache_leaves(cpu))
+ 		return -ENOENT;
+ 
+ 	return allocate_cache_info(cpu);
+ }
+ 
++>>>>>>> ecaef469920f (cacheinfo: Initialize variables in fetch_cache_info())
  int detect_cache_attributes(unsigned int cpu)
  {
  	int ret;
* Unmerged path drivers/base/cacheinfo.c
