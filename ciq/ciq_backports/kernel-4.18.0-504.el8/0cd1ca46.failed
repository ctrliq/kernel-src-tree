perf tool x86: Consolidate is_amd check into single function

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-504.el8
commit-author Ravi Bangoria <ravi.bangoria@amd.com>
commit 0cd1ca4650c9cf5f318110f67d39cbebae3693b3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-504.el8/0cd1ca46.failed

There are multiple places where x86 specific code determines AMD vs
Intel arch and acts based on that. Consolidate those checks into a
single function.

	Signed-off-by: Ravi Bangoria <ravi.bangoria@amd.com>
	Acked-by: Ian Rogers <irogers@google.com>
	Cc: Adrian Hunter <adrian.hunter@intel.com>
	Cc: Ali Saidi <alisaidi@amazon.com>
	Cc: Ananth Narayan <ananth.narayan@amd.com>
	Cc: James Clark <james.clark@arm.com>
	Cc: Jiri Olsa <jolsa@kernel.org>
	Cc: Kan Liang <kan.liang@linux.intel.com>
	Cc: Leo Yan <leo.yan@linaro.org>
	Cc: Madhavan Srinivasan <maddy@linux.ibm.com>
	Cc: Mark Rutland <mark.rutland@arm.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Sandipan Das <sandipan.das@amd.com>
	Cc: Santosh Shukla <santosh.shukla@amd.com>
Link: https://lore.kernel.org/r/20230613095506.547-3-ravi.bangoria@amd.com
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 0cd1ca4650c9cf5f318110f67d39cbebae3693b3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/arch/x86/util/evsel.c
diff --cc tools/perf/arch/x86/util/evsel.c
index 2f733cdc8dbb,512c2d885d24..000000000000
--- a/tools/perf/arch/x86/util/evsel.c
+++ b/tools/perf/arch/x86/util/evsel.c
@@@ -1,8 -1,104 +1,109 @@@
  // SPDX-License-Identifier: GPL-2.0
  #include <stdio.h>
 -#include <stdlib.h>
  #include "util/evsel.h"
++<<<<<<< HEAD
++=======
+ #include "util/env.h"
+ #include "util/pmu.h"
+ #include "util/pmus.h"
+ #include "linux/string.h"
+ #include "evsel.h"
+ #include "util/debug.h"
+ #include "env.h"
+ 
+ #define IBS_FETCH_L3MISSONLY   (1ULL << 59)
+ #define IBS_OP_L3MISSONLY      (1ULL << 16)
++>>>>>>> 0cd1ca4650c9 (perf tool x86: Consolidate is_amd check into single function)
  
  void arch_evsel__set_sample_weight(struct evsel *evsel)
  {
  	evsel__set_sample_bit(evsel, WEIGHT_STRUCT);
  }
++<<<<<<< HEAD
++=======
+ 
+ /* Check whether the evsel's PMU supports the perf metrics */
+ bool evsel__sys_has_perf_metrics(const struct evsel *evsel)
+ {
+ 	const char *pmu_name = evsel->pmu_name ? evsel->pmu_name : "cpu";
+ 
+ 	/*
+ 	 * The PERF_TYPE_RAW type is the core PMU type, e.g., "cpu" PMU
+ 	 * on a non-hybrid machine, "cpu_core" PMU on a hybrid machine.
+ 	 * The slots event is only available for the core PMU, which
+ 	 * supports the perf metrics feature.
+ 	 * Checking both the PERF_TYPE_RAW type and the slots event
+ 	 * should be good enough to detect the perf metrics feature.
+ 	 */
+ 	if ((evsel->core.attr.type == PERF_TYPE_RAW) &&
+ 	    perf_pmus__have_event(pmu_name, "slots"))
+ 		return true;
+ 
+ 	return false;
+ }
+ 
+ bool arch_evsel__must_be_in_group(const struct evsel *evsel)
+ {
+ 	if (!evsel__sys_has_perf_metrics(evsel))
+ 		return false;
+ 
+ 	return evsel->name &&
+ 		(strcasestr(evsel->name, "slots") ||
+ 		 strcasestr(evsel->name, "topdown"));
+ }
+ 
+ int arch_evsel__hw_name(struct evsel *evsel, char *bf, size_t size)
+ {
+ 	u64 event = evsel->core.attr.config & PERF_HW_EVENT_MASK;
+ 	u64 pmu = evsel->core.attr.config >> PERF_PMU_TYPE_SHIFT;
+ 	const char *event_name;
+ 
+ 	if (event < PERF_COUNT_HW_MAX && evsel__hw_names[event])
+ 		event_name = evsel__hw_names[event];
+ 	else
+ 		event_name = "unknown-hardware";
+ 
+ 	/* The PMU type is not required for the non-hybrid platform. */
+ 	if (!pmu)
+ 		return  scnprintf(bf, size, "%s", event_name);
+ 
+ 	return scnprintf(bf, size, "%s/%s/",
+ 			 evsel->pmu_name ? evsel->pmu_name : "cpu",
+ 			 event_name);
+ }
+ 
+ static void ibs_l3miss_warn(void)
+ {
+ 	pr_warning(
+ "WARNING: Hw internally resets sampling period when L3 Miss Filtering is enabled\n"
+ "and tagged operation does not cause L3 Miss. This causes sampling period skew.\n");
+ }
+ 
+ void arch__post_evsel_config(struct evsel *evsel, struct perf_event_attr *attr)
+ {
+ 	struct perf_pmu *evsel_pmu, *ibs_fetch_pmu, *ibs_op_pmu;
+ 	static int warned_once;
+ 
+ 	if (warned_once || !x86__is_amd_cpu())
+ 		return;
+ 
+ 	evsel_pmu = evsel__find_pmu(evsel);
+ 	if (!evsel_pmu)
+ 		return;
+ 
+ 	ibs_fetch_pmu = perf_pmus__find("ibs_fetch");
+ 	ibs_op_pmu = perf_pmus__find("ibs_op");
+ 
+ 	if (ibs_fetch_pmu && ibs_fetch_pmu->type == evsel_pmu->type) {
+ 		if (attr->config & IBS_FETCH_L3MISSONLY) {
+ 			ibs_l3miss_warn();
+ 			warned_once = 1;
+ 		}
+ 	} else if (ibs_op_pmu && ibs_op_pmu->type == evsel_pmu->type) {
+ 		if (attr->config & IBS_OP_L3MISSONLY) {
+ 			ibs_l3miss_warn();
+ 			warned_once = 1;
+ 		}
+ 	}
+ }
++>>>>>>> 0cd1ca4650c9 (perf tool x86: Consolidate is_amd check into single function)
diff --git a/tools/perf/arch/x86/util/Build b/tools/perf/arch/x86/util/Build
index dbeb04cb336e..93c3ee5f9543 100644
--- a/tools/perf/arch/x86/util/Build
+++ b/tools/perf/arch/x86/util/Build
@@ -10,6 +10,7 @@ perf-y += evlist.o
 perf-y += mem-events.o
 perf-y += evsel.o
 perf-y += iostat.o
+perf-y += env.o
 
 perf-$(CONFIG_DWARF) += dwarf-regs.o
 perf-$(CONFIG_BPF_PROLOGUE) += dwarf-regs.o
diff --git a/tools/perf/arch/x86/util/env.c b/tools/perf/arch/x86/util/env.c
new file mode 100644
index 000000000000..33b87f8ac1cc
--- /dev/null
+++ b/tools/perf/arch/x86/util/env.c
@@ -0,0 +1,19 @@
+// SPDX-License-Identifier: GPL-2.0
+#include "linux/string.h"
+#include "util/env.h"
+#include "env.h"
+
+bool x86__is_amd_cpu(void)
+{
+	struct perf_env env = { .total_mem = 0, };
+	static int is_amd; /* 0: Uninitialized, 1: Yes, -1: No */
+
+	if (is_amd)
+		goto ret;
+
+	perf_env__cpuid(&env);
+	is_amd = env.cpuid && strstarts(env.cpuid, "AuthenticAMD") ? 1 : -1;
+
+ret:
+	return is_amd >= 1 ? true : false;
+}
diff --git a/tools/perf/arch/x86/util/env.h b/tools/perf/arch/x86/util/env.h
new file mode 100644
index 000000000000..d78f080b6b3f
--- /dev/null
+++ b/tools/perf/arch/x86/util/env.h
@@ -0,0 +1,7 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+#ifndef _X86_ENV_H
+#define _X86_ENV_H
+
+bool x86__is_amd_cpu(void);
+
+#endif /* _X86_ENV_H */
* Unmerged path tools/perf/arch/x86/util/evsel.c
diff --git a/tools/perf/arch/x86/util/mem-events.c b/tools/perf/arch/x86/util/mem-events.c
index f683ac702247..efc0fae9ed0a 100644
--- a/tools/perf/arch/x86/util/mem-events.c
+++ b/tools/perf/arch/x86/util/mem-events.c
@@ -4,6 +4,7 @@
 #include "map_symbol.h"
 #include "mem-events.h"
 #include "linux/string.h"
+#include "env.h"
 
 static char mem_loads_name[100];
 static bool mem_loads_name__init;
@@ -26,28 +27,12 @@ static struct perf_mem_event perf_mem_events_amd[PERF_MEM_EVENTS__MAX] = {
 	E("mem-ldst",	"ibs_op//",	"ibs_op"),
 };
 
-static int perf_mem_is_amd_cpu(void)
-{
-	struct perf_env env = { .total_mem = 0, };
-
-	perf_env__cpuid(&env);
-	if (env.cpuid && strstarts(env.cpuid, "AuthenticAMD"))
-		return 1;
-	return -1;
-}
-
 struct perf_mem_event *perf_mem_events__ptr(int i)
 {
-	/* 0: Uninitialized, 1: Yes, -1: No */
-	static int is_amd;
-
 	if (i >= PERF_MEM_EVENTS__MAX)
 		return NULL;
 
-	if (!is_amd)
-		is_amd = perf_mem_is_amd_cpu();
-
-	if (is_amd == 1)
+	if (x86__is_amd_cpu())
 		return &perf_mem_events_amd[i];
 
 	return &perf_mem_events_intel[i];
