fork: Duplicate task_struct before stack allocation

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-504.el8
commit-author Sebastian Andrzej Siewior <bigeasy@linutronix.de>
commit 546c42b2c5c161619736dd730d3df709181999d0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-504.el8/546c42b2.failed

alloc_thread_stack_node() already populates the task_struct::stack
member except on IA64. The stack pointer is saved and populated again
because IA64 needs it and arch_dup_task_struct() overwrites it.

Allocate thread's stack after task_struct has been duplicated as a
preparation for further changes.

	Signed-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
	Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
	Acked-by: Andy Lutomirski <luto@kernel.org>
Link: https://lore.kernel.org/r/20220217102406.3697941-3-bigeasy@linutronix.de

(cherry picked from commit 546c42b2c5c161619736dd730d3df709181999d0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/fork.c
diff --cc kernel/fork.c
index bbdc0604ce6c,30c01ce2ae57..000000000000
--- a/kernel/fork.c
+++ b/kernel/fork.c
@@@ -874,12 -888,9 +874,18 @@@ static struct task_struct *dup_task_str
  	if (!tsk)
  		return NULL;
  
++<<<<<<< HEAD
 +	/*
 +	 * RHEL: before proceeding, we need to make tsk->task_struct_rh = NULL,
 +	 * otherwise the error paths below, if taken, might end up causing
 +	 * a double-free for RHEL-only task_struct_rh extention object.
 +	 */
 +	WRITE_ONCE(tsk->task_struct_rh, NULL);
++=======
+ 	err = arch_dup_task_struct(tsk, orig);
+ 	if (err)
+ 		goto free_tsk;
++>>>>>>> 546c42b2c5c1 (fork: Duplicate task_struct before stack allocation)
  
  	stack = alloc_thread_stack_node(tsk, node);
  	if (!stack)
@@@ -905,9 -914,6 +909,12 @@@
  	refcount_set(&tsk->stack_refcount, 1);
  #endif
  
++<<<<<<< HEAD
 +	if (err || !dup_rh_task_struct(tsk, orig, node))
 +		goto free_stack;
 +
++=======
++>>>>>>> 546c42b2c5c1 (fork: Duplicate task_struct before stack allocation)
  	err = scs_prepare(tsk, node);
  	if (err)
  		goto free_stack;
* Unmerged path kernel/fork.c
