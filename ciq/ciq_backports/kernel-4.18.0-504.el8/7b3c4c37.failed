regmap: Rework regmap_mdio_c45_{read|write} for new C45 API.

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-504.el8
commit-author Andrew Lunn <andrew@lunn.ch>
commit 7b3c4c370c09313e22b555e79167e73d233611d1
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-504.el8/7b3c4c37.failed

The MDIO subsystem is getting rid of MII_ADDR_C45 and thus also
encoding associated encoding of the C45 device address and register
address into one value. regmap-mdio also uses this encoding for the
C45 bus.

Move to the new C45 helpers for MDIO access and provide regmap-mdio
helper macros.

	Signed-off-by: Andrew Lunn <andrew@lunn.ch>
	Signed-off-by: Michael Walle <michael@walle.cc>
Link: https://lore.kernel.org/r/20230116111509.4086236-1-michael@walle.cc
	Signed-off-by: Mark Brown <broonie@kernel.org>
(cherry picked from commit 7b3c4c370c09313e22b555e79167e73d233611d1)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/base/regmap/regmap-mdio.c
diff --cc drivers/base/regmap/regmap-mdio.c
index 6a20201299f5,6aa6a2409478..000000000000
--- a/drivers/base/regmap/regmap-mdio.c
+++ b/drivers/base/regmap/regmap-mdio.c
@@@ -10,11 -10,15 +10,19 @@@
  /* Clause-45 mask includes the device type (5 bit) and actual register number (16 bit) */
  #define REGNUM_C45_MASK		GENMASK(20, 0)
  
- static int regmap_mdio_read(struct mdio_device *mdio_dev, u32 reg, unsigned int *val)
+ static int regmap_mdio_c22_read(void *context, unsigned int reg, unsigned int *val)
  {
+ 	struct mdio_device *mdio_dev = context;
  	int ret;
  
++<<<<<<< HEAD
 +	ret = mdiobus_read(mdio_dev->bus, mdio_dev->addr, reg);
++=======
+ 	if (unlikely(reg & ~REGNUM_C22_MASK))
+ 		return -ENXIO;
+ 
+ 	ret = mdiodev_read(mdio_dev, reg);
++>>>>>>> 7b3c4c370c09 (regmap: Rework regmap_mdio_c45_{read|write} for new C45 API.)
  	if (ret < 0)
  		return ret;
  
@@@ -22,21 -27,6 +31,24 @@@
  	return 0;
  }
  
++<<<<<<< HEAD
 +static int regmap_mdio_write(struct mdio_device *mdio_dev, u32 reg, unsigned int val)
 +{
 +	return mdiobus_write(mdio_dev->bus, mdio_dev->addr, reg, val);
 +}
 +
 +static int regmap_mdio_c22_read(void *context, unsigned int reg, unsigned int *val)
 +{
 +	struct mdio_device *mdio_dev = context;
 +
 +	if (unlikely(reg & ~REGNUM_C22_MASK))
 +		return -ENXIO;
 +
 +	return regmap_mdio_read(mdio_dev, reg, val);
 +}
 +
++=======
++>>>>>>> 7b3c4c370c09 (regmap: Rework regmap_mdio_c45_{read|write} for new C45 API.)
  static int regmap_mdio_c22_write(void *context, unsigned int reg, unsigned int val)
  {
  	struct mdio_device *mdio_dev = context;
* Unmerged path drivers/base/regmap/regmap-mdio.c
diff --git a/include/linux/regmap.h b/include/linux/regmap.h
index c7b0fb463f09..95a3e47357f3 100644
--- a/include/linux/regmap.h
+++ b/include/linux/regmap.h
@@ -37,6 +37,14 @@ struct regmap_field;
 struct snd_ac97;
 struct sdw_slave;
 
+/*
+ * regmap_mdio address encoding. IEEE 802.3ae clause 45 addresses consist of a
+ * device address and a register address.
+ */
+#define REGMAP_MDIO_C45_DEVAD_SHIFT	16
+#define REGMAP_MDIO_C45_DEVAD_MASK	GENMASK(20, 16)
+#define REGMAP_MDIO_C45_REGNUM_MASK	GENMASK(15, 0)
+
 /* An enum of all the supported cache types */
 enum regcache_type {
 	REGCACHE_NONE,
