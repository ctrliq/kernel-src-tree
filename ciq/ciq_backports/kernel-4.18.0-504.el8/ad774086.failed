kbuild: change filechk to surround the given command with { }

jira LE-1907
cve {CVE-2023-1637
cve [2181906]
cve Recklinghausen)
cve von
cve (Chris
cve 
cve 
Rebuild_History Non-Buildable kernel-4.18.0-504.el8
commit-author Masahiro Yamada <yamada.masahiro@socionext.com>
commit ad774086356da92a477a87916613d96f4b36005c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-504.el8/ad774086.failed

filechk_* rules often consist of multiple 'echo' lines. They must be
surrounded with { } or ( ) to work correctly. Otherwise, only the
string from the last 'echo' would be written into the target.

Let's take care of that in the 'filechk' in scripts/Kbuild.include
to clean up filechk_* rules.

	Signed-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>
(cherry picked from commit ad774086356da92a477a87916613d96f4b36005c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	Makefile
#	kernel/Makefile
#	scripts/Kbuild.include
diff --cc Makefile
index f19c4414e04c,437d6033598c..000000000000
--- a/Makefile
+++ b/Makefile
@@@ -1207,21 -1131,12 +1207,25 @@@ define filechk_utsrelease.
  endef
  
  define filechk_version.h
- 	(echo \#define LINUX_VERSION_CODE $(shell                         \
+ 	echo \#define LINUX_VERSION_CODE $(shell                         \
  	expr $(VERSION) \* 65536 + 0$(PATCHLEVEL) \* 256 + 0$(SUBLEVEL)); \
++<<<<<<< HEAD
 +	echo '#define KERNEL_VERSION(a,b,c) (((a) << 16) + ((b) << 8) + (c))'; \
 +	echo '#define RHEL_MAJOR $(RHEL_MAJOR)'; \
 +	echo '#define RHEL_MINOR $(RHEL_MINOR)'; \
 +	echo '#define RHEL_RELEASE_VERSION(a,b) (((a) << 8) + (b))'; \
 +	echo '#define RHEL_RELEASE_CODE \
 +		$(shell expr $(RHEL_MAJOR) \* 256 + $(RHEL_MINOR))'; \
 +	echo '#define RHEL_RELEASE "$(RHEL_RELEASE)"';                 \
 +	echo \#define LINUX_VERSION_MAJOR $(VERSION);                    \
 +	echo \#define LINUX_VERSION_PATCHLEVEL $(PATCHLEVEL);            \
 +	echo \#define LINUX_VERSION_SUBLEVEL $(SUBLEVEL);)
++=======
+ 	echo '#define KERNEL_VERSION(a,b,c) (((a) << 16) + ((b) << 8) + (c))'
++>>>>>>> ad774086356d (kbuild: change filechk to surround the given command with { })
  endef
  
 -$(version_h): FORCE
 +$(version_h): $(srctree)/Makefile $(srctree)/Makefile.rhelver FORCE
  	$(call filechk,version.h)
  	$(Q)rm -f $(old_version_h)
  
diff --cc kernel/Makefile
index 74eec1255a60,6aa7543bcdb2..000000000000
--- a/kernel/Makefile
+++ b/kernel/Makefile
@@@ -133,7 -122,11 +133,15 @@@ targets += config_data.g
  $(obj)/config_data.gz: $(KCONFIG_CONFIG) FORCE
  	$(call if_changed,gzip)
  
++<<<<<<< HEAD
 +      filechk_ikconfiggz = (echo "static const char kernel_config_data[] __used = MAGIC_START"; cat $< | scripts/basic/bin2c; echo "MAGIC_END;")
++=======
+ filechk_ikconfiggz = \
+ 	echo "static const char kernel_config_data[] __used = MAGIC_START"; \
+ 	cat $< | scripts/bin2c; \
+ 	echo "MAGIC_END;"
+ 
++>>>>>>> ad774086356d (kbuild: change filechk to surround the given command with { })
  targets += config_data.h
  $(obj)/config_data.h: $(obj)/config_data.gz FORCE
  	$(call filechk,ikconfiggz)
diff --cc scripts/Kbuild.include
index 02bb3163cd8d,74a3fe7ddc01..000000000000
--- a/scripts/Kbuild.include
+++ b/scripts/Kbuild.include
@@@ -56,7 -56,7 +56,11 @@@ kecho := $($(quiet)kecho
  define filechk
  	$(Q)set -e;				\
  	mkdir -p $(dir $@);			\
++<<<<<<< HEAD
 +	$(filechk_$(1)) < $< > $@.tmp;		\
++=======
+ 	{ $(filechk_$(1)); } > $@.tmp;		\
++>>>>>>> ad774086356d (kbuild: change filechk to surround the given command with { })
  	if [ -r $@ ] && cmp -s $@ $@.tmp; then	\
  		rm -f $@.tmp;			\
  	else					\
diff --git a/Kbuild b/Kbuild
index 005304205482..bb3c374f94bd 100644
--- a/Kbuild
+++ b/Kbuild
@@ -35,7 +35,7 @@ define cmd_gentimeconst
 	(echo $(CONFIG_HZ) | bc -q $< ) > $@
 endef
 define filechk_gentimeconst
-	(echo $(CONFIG_HZ) | bc -q $< )
+	echo $(CONFIG_HZ) | bc -q $<
 endef
 
 $(obj)/$(timeconst-file): kernel/time/timeconst.bc FORCE
* Unmerged path Makefile
diff --git a/arch/s390/tools/Makefile b/arch/s390/tools/Makefile
index 48cdac1143a9..cf4846a7ee8d 100644
--- a/arch/s390/tools/Makefile
+++ b/arch/s390/tools/Makefile
@@ -25,7 +25,7 @@ define filechk_facility-defs.h
 endef
 
 define filechk_dis-defs.h
-	( $(obj)/gen_opcode_table < $(srctree)/arch/$(ARCH)/tools/opcodes.txt )
+	$(obj)/gen_opcode_table < $(srctree)/arch/$(ARCH)/tools/opcodes.txt
 endef
 
 $(kapi)/facility-defs.h: $(obj)/gen_facilities FORCE
diff --git a/firmware/Makefile b/firmware/Makefile
index e2f7dd2f30e0..37e5ae387400 100644
--- a/firmware/Makefile
+++ b/firmware/Makefile
@@ -13,7 +13,7 @@ ASM_WORD  = $(if $(CONFIG_64BIT),.quad,.long)
 ASM_ALIGN = $(if $(CONFIG_64BIT),3,2)
 PROGBITS  = $(if $(CONFIG_ARM),%,@)progbits
 
-filechk_fwbin = { \
+filechk_fwbin = \
 	echo "/* Generated by $(src)/Makefile */"		;\
 	echo "    .section .rodata"				;\
 	echo "    .p2align $(ASM_ALIGN)"			;\
@@ -28,8 +28,7 @@ filechk_fwbin = { \
 	echo "    .p2align $(ASM_ALIGN)"			;\
 	echo "    $(ASM_WORD) _fw_$(FWSTR)_name"		;\
 	echo "    $(ASM_WORD) _fw_$(FWSTR)_bin"			;\
-	echo "    $(ASM_WORD) _fw_end - _fw_$(FWSTR)_bin"	;\
-}
+	echo "    $(ASM_WORD) _fw_end - _fw_$(FWSTR)_bin"
 
 $(obj)/%.gen.S: FORCE
 	$(call filechk,fwbin)
* Unmerged path kernel/Makefile
* Unmerged path scripts/Kbuild.include
diff --git a/scripts/Makefile.lib b/scripts/Makefile.lib
index 11659d918764..cc81a1a966ea 100644
--- a/scripts/Makefile.lib
+++ b/scripts/Makefile.lib
@@ -425,7 +425,6 @@ endef
 # Use filechk to avoid rebuilds when a header changes, but the resulting file
 # does not
 define filechk_offsets
-	( \
 	 echo "#ifndef $2"; \
 	 echo "#define $2"; \
 	 echo "/*"; \
@@ -436,5 +435,5 @@ define filechk_offsets
 	 echo ""; \
 	 sed -ne $(sed-offsets); \
 	 echo ""; \
-	 echo "#endif" )
+	 echo "#endif"
 endef
