usb: typec: ucsi: Register USB Power Delivery Capabilities

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-504.el8
commit-author Saranya Gopal <saranya.gopal@intel.com>
commit b04e1747fbcc6bf4a93a95b5c2505bf2a6467ee8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-504.el8/b04e1747.failed

UCSI allows the USB PD capabilities to be read with the GET_PDO
command. This will register those capabilities and make them
visible to user space.

	Reviewed-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
Co-developed-by: Rajaram Regupathy <rajaram.regupathy@intel.com>
	Signed-off-by: Rajaram Regupathy <rajaram.regupathy@intel.com>
	Signed-off-by: Saranya Gopal <saranya.gopal@intel.com>
Link: https://lore.kernel.org/r/20230102062108.838423-1-saranya.gopal@intel.com
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit b04e1747fbcc6bf4a93a95b5c2505bf2a6467ee8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/usb/typec/ucsi/ucsi.c
diff --cc drivers/usb/typec/ucsi/ucsi.c
index 74fff4cebb21,d04809476f71..000000000000
--- a/drivers/usb/typec/ucsi/ucsi.c
+++ b/drivers/usb/typec/ucsi/ucsi.c
@@@ -1421,20 -1551,14 +1552,29 @@@ void ucsi_unregister(struct ucsi *ucsi
  		ucsi_unregister_altmodes(&ucsi->connector[i],
  					 UCSI_RECIPIENT_CON);
  		ucsi_unregister_port_psy(&ucsi->connector[i]);
 -		if (ucsi->connector[i].wq)
 +
 +		if (ucsi->connector[i].wq) {
 +			struct ucsi_work *uwork;
 +
 +			mutex_lock(&ucsi->connector[i].lock);
 +			/*
 +			 * queue delayed items immediately so they can execute
 +			 * and free themselves before the wq is destroyed
 +			 */
 +			list_for_each_entry(uwork, &ucsi->connector[i].partner_tasks, node)
 +				mod_delayed_work(ucsi->connector[i].wq, &uwork->work, 0);
 +			mutex_unlock(&ucsi->connector[i].lock);
  			destroy_workqueue(ucsi->connector[i].wq);
++<<<<<<< HEAD
 +		}
++=======
+ 		usb_power_delivery_unregister_capabilities(ucsi->connector[i].port_sink_caps);
+ 		ucsi->connector[i].port_sink_caps = NULL;
+ 		usb_power_delivery_unregister_capabilities(ucsi->connector[i].port_source_caps);
+ 		ucsi->connector[i].port_source_caps = NULL;
+ 		usb_power_delivery_unregister(ucsi->connector[i].pd);
+ 		ucsi->connector[i].pd = NULL;
++>>>>>>> b04e1747fbcc (usb: typec: ucsi: Register USB Power Delivery Capabilities)
  		typec_unregister_port(ucsi->connector[i].port);
  	}
  
* Unmerged path drivers/usb/typec/ucsi/ucsi.c
diff --git a/drivers/usb/typec/ucsi/ucsi.h b/drivers/usb/typec/ucsi/ucsi.h
index 60ce9fb6e745..c09af859f573 100644
--- a/drivers/usb/typec/ucsi/ucsi.h
+++ b/drivers/usb/typec/ucsi/ucsi.h
@@ -340,6 +340,14 @@ struct ucsi_connector {
 	u32 src_pdos[PDO_MAX_OBJECTS];
 	int num_pdos;
 
+	/* USB PD objects */
+	struct usb_power_delivery *pd;
+	struct usb_power_delivery_capabilities *port_source_caps;
+	struct usb_power_delivery_capabilities *port_sink_caps;
+	struct usb_power_delivery *partner_pd;
+	struct usb_power_delivery_capabilities *partner_source_caps;
+	struct usb_power_delivery_capabilities *partner_sink_caps;
+
 	struct usb_role_switch *usb_role_sw;
 };
 
