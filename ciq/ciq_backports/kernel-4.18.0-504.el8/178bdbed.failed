drivers/base/memory: rename base_memory_block_id to memory_block_id

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-504.el8
commit-author Wei Yang <richard.weiyang@linux.alibaba.com>
commit 178bdbed3e0cebb7c04e37695dfa638aa8dafed3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-504.el8/178bdbed.failed

memory_block may have a larger granularity than section, this is why we
have base_section_nr. But base_memory_block_id seems a little
misleading, since there is no larger granularity concept which groups
several memory_block.

What we need here is the exact memory_block_id to a section_nr. Let's
rename it to make it more precise.

	Signed-off-by: Wei Yang <richard.weiyang@linux.alibaba.com>
Link: https://lore.kernel.org/r/20200623025701.2016-2-richard.weiyang@linux.alibaba.com
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit 178bdbed3e0cebb7c04e37695dfa638aa8dafed3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/base/memory.c
diff --cc drivers/base/memory.c
index 5a9c680d8341,4db3c660de83..000000000000
--- a/drivers/base/memory.c
+++ b/drivers/base/memory.c
@@@ -537,9 -515,9 +537,13 @@@ static struct memory_block *find_memory
  /*
   * Called under device_hotplug_lock.
   */
 -struct memory_block *find_memory_block(struct mem_section *section)
 +struct memory_block *find_memory_block(unsigned long section_nr)
  {
++<<<<<<< HEAD
 +	unsigned long block_id = base_memory_block_id(section_nr);
++=======
+ 	unsigned long block_id = memory_block_id(__section_nr(section));
++>>>>>>> 178bdbed3e0c (drivers/base/memory: rename base_memory_block_id to memory_block_id)
  
  	return find_memory_block_by_id(block_id);
  }
@@@ -716,7 -608,7 +720,11 @@@ static int add_memory_block(unsigned lo
  
  	if (section_count == 0)
  		return 0;
++<<<<<<< HEAD
 +	return init_memory_block(&mem, base_memory_block_id(base_section_nr),
++=======
+ 	return init_memory_block(memory_block_id(base_section_nr),
++>>>>>>> 178bdbed3e0c (drivers/base/memory: rename base_memory_block_id to memory_block_id)
  				 MEM_ONLINE);
  }
  
* Unmerged path drivers/base/memory.c
