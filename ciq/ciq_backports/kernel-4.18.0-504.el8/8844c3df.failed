cacheinfo: Return error code in init_of_cache_level()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-504.el8
commit-author Pierre Gondois <pierre.gondois@arm.com>
commit 8844c3df001bc1d8397fddea341308da63855d53
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-504.el8/8844c3df.failed

Make init_of_cache_level() return an error code when the cache
information parsing fails to help detecting missing information.

init_of_cache_level() is only called for riscv. Returning an error
code instead of 0 will prevent detect_cache_attributes() to allocate
memory if an incomplete DT is parsed.

	Signed-off-by: Pierre Gondois <pierre.gondois@arm.com>
	Acked-by: Palmer Dabbelt <palmer@rivosinc.com>
Link: https://lore.kernel.org/r/20230104183033.755668-3-pierre.gondois@arm.com
	Signed-off-by: Sudeep Holla <sudeep.holla@arm.com>
(cherry picked from commit 8844c3df001bc1d8397fddea341308da63855d53)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/base/cacheinfo.c
diff --cc drivers/base/cacheinfo.c
index af78a16b124e,0a96d0b9338a..000000000000
--- a/drivers/base/cacheinfo.c
+++ b/drivers/base/cacheinfo.c
@@@ -235,8 -229,56 +235,58 @@@ static int cache_setup_of_node(unsigne
  
  	return 0;
  }
++<<<<<<< HEAD
++=======
+ 
+ int init_of_cache_level(unsigned int cpu)
+ {
+ 	struct cpu_cacheinfo *this_cpu_ci = get_cpu_cacheinfo(cpu);
+ 	struct device_node *np = of_cpu_device_node_get(cpu);
+ 	struct device_node *prev = NULL;
+ 	unsigned int levels = 0, leaves = 0, level;
+ 
+ 	if (of_property_read_bool(np, "cache-size"))
+ 		++leaves;
+ 	if (of_property_read_bool(np, "i-cache-size"))
+ 		++leaves;
+ 	if (of_property_read_bool(np, "d-cache-size"))
+ 		++leaves;
+ 	if (leaves > 0)
+ 		levels = 1;
+ 
+ 	prev = np;
+ 	while ((np = of_find_next_cache_node(np))) {
+ 		of_node_put(prev);
+ 		prev = np;
+ 		if (!of_device_is_compatible(np, "cache"))
+ 			goto err_out;
+ 		if (of_property_read_u32(np, "cache-level", &level))
+ 			goto err_out;
+ 		if (level <= levels)
+ 			goto err_out;
+ 		if (of_property_read_bool(np, "cache-size"))
+ 			++leaves;
+ 		if (of_property_read_bool(np, "i-cache-size"))
+ 			++leaves;
+ 		if (of_property_read_bool(np, "d-cache-size"))
+ 			++leaves;
+ 		levels = level;
+ 	}
+ 
+ 	of_node_put(np);
+ 	this_cpu_ci->num_levels = levels;
+ 	this_cpu_ci->num_leaves = leaves;
+ 
+ 	return 0;
+ 
+ err_out:
+ 	of_node_put(np);
+ 	return -EINVAL;
+ }
+ 
++>>>>>>> 8844c3df001b (cacheinfo: Return error code in init_of_cache_level())
  #else
  static inline int cache_setup_of_node(unsigned int cpu) { return 0; }
 -int init_of_cache_level(unsigned int cpu) { return 0; }
  #endif
  
  int __weak cache_setup_acpi(unsigned int cpu)
* Unmerged path drivers/base/cacheinfo.c
