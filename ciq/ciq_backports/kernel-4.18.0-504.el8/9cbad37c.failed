of: Add of_property_present() helper

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-504.el8
commit-author Rob Herring <robh@kernel.org>
commit 9cbad37ce8122de32a1529e394b468bc101c9e7f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-504.el8/9cbad37c.failed

Add an of_property_present() function similar to
fwnode_property_present(). of_property_read_bool() could be used
directly, but it is cleaner to not use it on non-boolean properties.

	Reviewed-by: Frank Rowand <frowand.list@gmail.com>
	Tested-by: Frank Rowand <frowand.list@gmail.com>
Link: https://lore.kernel.org/all/20230215215547.691573-1-robh@kernel.org/
	Signed-off-by: Rob Herring <robh@kernel.org>
(cherry picked from commit 9cbad37ce8122de32a1529e394b468bc101c9e7f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/of.h
diff --cc include/linux/of.h
index a27ec715e139,37afd04f36eb..000000000000
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@@ -1164,8 -1155,10 +1164,15 @@@ static inline int of_property_read_stri
   * @np:		device node from which the property value is to be read.
   * @propname:	name of the property to be searched.
   *
++<<<<<<< HEAD
 + * Search for a property in a device node.
 + * Returns true if the property exists false otherwise.
++=======
+  * Search for a boolean property in a device node. Usage on non-boolean
+  * property types is deprecated.
+  *
+  * Return: true if the property exists false otherwise.
++>>>>>>> 9cbad37ce812 (of: Add of_property_present() helper)
   */
  static inline bool of_property_read_bool(const struct device_node *np,
  					 const char *propname)
@@@ -1175,6 -1168,144 +1182,147 @@@
  	return prop ? true : false;
  }
  
++<<<<<<< HEAD
++=======
+ /**
+  * of_property_present - Test if a property is present in a node
+  * @np:		device node to search for the property.
+  * @propname:	name of the property to be searched.
+  *
+  * Test for a property present in a device node.
+  *
+  * Return: true if the property exists false otherwise.
+  */
+ static inline bool of_property_present(const struct device_node *np, const char *propname)
+ {
+ 	return of_property_read_bool(np, propname);
+ }
+ 
+ /**
+  * of_property_read_u8_array - Find and read an array of u8 from a property.
+  *
+  * @np:		device node from which the property value is to be read.
+  * @propname:	name of the property to be searched.
+  * @out_values:	pointer to return value, modified only if return value is 0.
+  * @sz:		number of array elements to read
+  *
+  * Search for a property in a device node and read 8-bit value(s) from
+  * it.
+  *
+  * dts entry of array should be like:
+  *  ``property = /bits/ 8 <0x50 0x60 0x70>;``
+  *
+  * Return: 0 on success, -EINVAL if the property does not exist,
+  * -ENODATA if property does not have a value, and -EOVERFLOW if the
+  * property data isn't large enough.
+  *
+  * The out_values is modified only if a valid u8 value can be decoded.
+  */
+ static inline int of_property_read_u8_array(const struct device_node *np,
+ 					    const char *propname,
+ 					    u8 *out_values, size_t sz)
+ {
+ 	int ret = of_property_read_variable_u8_array(np, propname, out_values,
+ 						     sz, 0);
+ 	if (ret >= 0)
+ 		return 0;
+ 	else
+ 		return ret;
+ }
+ 
+ /**
+  * of_property_read_u16_array - Find and read an array of u16 from a property.
+  *
+  * @np:		device node from which the property value is to be read.
+  * @propname:	name of the property to be searched.
+  * @out_values:	pointer to return value, modified only if return value is 0.
+  * @sz:		number of array elements to read
+  *
+  * Search for a property in a device node and read 16-bit value(s) from
+  * it.
+  *
+  * dts entry of array should be like:
+  *  ``property = /bits/ 16 <0x5000 0x6000 0x7000>;``
+  *
+  * Return: 0 on success, -EINVAL if the property does not exist,
+  * -ENODATA if property does not have a value, and -EOVERFLOW if the
+  * property data isn't large enough.
+  *
+  * The out_values is modified only if a valid u16 value can be decoded.
+  */
+ static inline int of_property_read_u16_array(const struct device_node *np,
+ 					     const char *propname,
+ 					     u16 *out_values, size_t sz)
+ {
+ 	int ret = of_property_read_variable_u16_array(np, propname, out_values,
+ 						      sz, 0);
+ 	if (ret >= 0)
+ 		return 0;
+ 	else
+ 		return ret;
+ }
+ 
+ /**
+  * of_property_read_u32_array - Find and read an array of 32 bit integers
+  * from a property.
+  *
+  * @np:		device node from which the property value is to be read.
+  * @propname:	name of the property to be searched.
+  * @out_values:	pointer to return value, modified only if return value is 0.
+  * @sz:		number of array elements to read
+  *
+  * Search for a property in a device node and read 32-bit value(s) from
+  * it.
+  *
+  * Return: 0 on success, -EINVAL if the property does not exist,
+  * -ENODATA if property does not have a value, and -EOVERFLOW if the
+  * property data isn't large enough.
+  *
+  * The out_values is modified only if a valid u32 value can be decoded.
+  */
+ static inline int of_property_read_u32_array(const struct device_node *np,
+ 					     const char *propname,
+ 					     u32 *out_values, size_t sz)
+ {
+ 	int ret = of_property_read_variable_u32_array(np, propname, out_values,
+ 						      sz, 0);
+ 	if (ret >= 0)
+ 		return 0;
+ 	else
+ 		return ret;
+ }
+ 
+ /**
+  * of_property_read_u64_array - Find and read an array of 64 bit integers
+  * from a property.
+  *
+  * @np:		device node from which the property value is to be read.
+  * @propname:	name of the property to be searched.
+  * @out_values:	pointer to return value, modified only if return value is 0.
+  * @sz:		number of array elements to read
+  *
+  * Search for a property in a device node and read 64-bit value(s) from
+  * it.
+  *
+  * Return: 0 on success, -EINVAL if the property does not exist,
+  * -ENODATA if property does not have a value, and -EOVERFLOW if the
+  * property data isn't large enough.
+  *
+  * The out_values is modified only if a valid u64 value can be decoded.
+  */
+ static inline int of_property_read_u64_array(const struct device_node *np,
+ 					     const char *propname,
+ 					     u64 *out_values, size_t sz)
+ {
+ 	int ret = of_property_read_variable_u64_array(np, propname, out_values,
+ 						      sz, 0);
+ 	if (ret >= 0)
+ 		return 0;
+ 	else
+ 		return ret;
+ }
+ 
++>>>>>>> 9cbad37ce812 (of: Add of_property_present() helper)
  static inline int of_property_read_u8(const struct device_node *np,
  				       const char *propname,
  				       u8 *out_value)
* Unmerged path include/linux/of.h
