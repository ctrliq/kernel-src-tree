crypto: ccp - Return doorbell status code as an argument

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-504.el8
commit-author Mario Limonciello <mario.limonciello@amd.com>
commit a19c61b06585f71c4dc1303fe6a3af79dfe33678
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-504.el8/a19c61b0.failed

If the doorbell failed to ring we return -EIO, but the caller can't
determine why it failed.  Pass the reason for the failure in an
argument for caller to investigate.

	Suggested-by: Mark Hasemeyer <markhas@chromium.org>
	Signed-off-by: Mario Limonciello <mario.limonciello@amd.com>
	Reviewed-by: Mark Hasemeyer <markhas@chromium.org>
	Tested-by: Mark Hasemeyer <markhas@chromium.org>
	Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
(cherry picked from commit a19c61b06585f71c4dc1303fe6a3af79dfe33678)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/crypto/ccp/platform-access.c
#	include/linux/psp-platform-access.h
diff --cc drivers/crypto/ccp/platform-access.c
index 9cc0c60bbf7b,48f59ae91692..000000000000
--- a/drivers/crypto/ccp/platform-access.c
+++ b/drivers/crypto/ccp/platform-access.c
@@@ -132,6 -132,52 +132,55 @@@ unlock
  }
  EXPORT_SYMBOL_GPL(psp_send_platform_access_msg);
  
++<<<<<<< HEAD
++=======
+ int psp_ring_platform_doorbell(int msg, u32 *result)
+ {
+ 	struct psp_device *psp = psp_get_master_device();
+ 	struct psp_platform_access_device *pa_dev;
+ 	u32 __iomem *button, *cmd;
+ 	int ret, val;
+ 
+ 	if (!psp || !psp->platform_access_data)
+ 		return -ENODEV;
+ 
+ 	pa_dev = psp->platform_access_data;
+ 	button = psp->io_regs + pa_dev->vdata->doorbell_button_reg;
+ 	cmd = psp->io_regs + pa_dev->vdata->doorbell_cmd_reg;
+ 
+ 	mutex_lock(&pa_dev->doorbell_mutex);
+ 
+ 	if (wait_cmd(cmd)) {
+ 		dev_err(psp->dev, "doorbell command not done processing\n");
+ 		ret = -EBUSY;
+ 		goto unlock;
+ 	}
+ 
+ 	iowrite32(FIELD_PREP(PSP_DRBL_MSG, msg), cmd);
+ 	iowrite32(PSP_DRBL_RING, button);
+ 
+ 	if (wait_cmd(cmd)) {
+ 		ret = -ETIMEDOUT;
+ 		goto unlock;
+ 	}
+ 
+ 	val = FIELD_GET(PSP_CMDRESP_STS, ioread32(cmd));
+ 	if (val) {
+ 		if (result)
+ 			*result = val;
+ 		ret = -EIO;
+ 		goto unlock;
+ 	}
+ 
+ 	ret = 0;
+ unlock:
+ 	mutex_unlock(&pa_dev->doorbell_mutex);
+ 
+ 	return ret;
+ }
+ EXPORT_SYMBOL_GPL(psp_ring_platform_doorbell);
+ 
++>>>>>>> a19c61b06585 (crypto: ccp - Return doorbell status code as an argument)
  void platform_access_dev_destroy(struct psp_device *psp)
  {
  	struct psp_platform_access_device *pa_dev = psp->platform_access_data;
diff --cc include/linux/psp-platform-access.h
index 977df5cfd494,1b661341d8f3..000000000000
--- a/include/linux/psp-platform-access.h
+++ b/include/linux/psp-platform-access.h
@@@ -35,6 -35,21 +35,24 @@@ struct psp_request 
  int psp_send_platform_access_msg(enum psp_platform_access_msg, struct psp_request *req);
  
  /**
++<<<<<<< HEAD
++=======
+  * psp_ring_platform_doorbell() - Ring platform doorbell
+  *
+  * This function is intended to be used by drivers outside of ccp to ring the
+  * platform doorbell with a message.
+  *
+  * Returns:
+  *  0:           success
+  *  -%EBUSY:     mailbox in recovery or in use
+  *  -%ENODEV:    driver not bound with PSP device
+  *  -%ETIMEDOUT: request timed out
+  *  -%EIO:       error will be stored in result argument
+  */
+ int psp_ring_platform_doorbell(int msg, u32 *result);
+ 
+ /**
++>>>>>>> a19c61b06585 (crypto: ccp - Return doorbell status code as an argument)
   * psp_check_platform_access_status() - Checks whether platform features is ready
   *
   * This function is intended to be used by drivers outside of ccp to determine
* Unmerged path drivers/crypto/ccp/platform-access.c
* Unmerged path include/linux/psp-platform-access.h
