idpf: trigger SW interrupt when exiting wb_on_itr mode

jira LE-3064
Rebuild_History Non-Buildable kernel-4.18.0-553.52.1.el8_10
commit-author Joshua Hay <joshua.a.hay@intel.com>
commit 0c1683c681681c14f4389e3bfa8de10baf242ba8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-553.52.1.el8_10/0c1683c6.failed

There is a race condition between exiting wb_on_itr and completion write
backs. For example, we are in wb_on_itr mode and a Tx completion is
generated by HW, ready to be written back, as we are re-enabling
interrupts:

	HW                      SW
	|                       |
	|			| idpf_tx_splitq_clean_all
	|                       | napi_complete_done
	|			|
	| tx_completion_wb 	| idpf_vport_intr_update_itr_ena_irq

That tx_completion_wb happens before the vector is fully re-enabled.
Continuing with this example, it is a UDP stream and the
tx_completion_wb is the last one in the flow (there are no rx packets).
Because the HW generated the completion before the interrupt is fully
enabled, the HW will not fire the interrupt once the timer expires and
the write back will not happen. NAPI poll won't be called.  We have
indicated we're back in interrupt mode but nothing else will trigger the
interrupt. Therefore, the completion goes unprocessed, triggering a Tx
timeout.

To mitigate this, fire a SW triggered interrupt upon exiting wb_on_itr.
This interrupt will catch the rogue completion and avoid the timeout.
Add logic to set the appropriate bits in the vector's dyn_ctl register.

Fixes: 9c4a27da0ecc ("idpf: enable WB_ON_ITR")
	Reviewed-by: Madhu Chittim <madhu.chittim@intel.com>
	Signed-off-by: Joshua Hay <joshua.a.hay@intel.com>
	Tested-by: Krishneil Singh <krishneil.k.singh@intel.com>
	Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
(cherry picked from commit 0c1683c681681c14f4389e3bfa8de10baf242ba8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/intel/idpf/idpf_txrx.c
diff --cc drivers/net/ethernet/intel/idpf/idpf_txrx.c
index 35677fdf6d7a,2fa9c36e33c9..000000000000
--- a/drivers/net/ethernet/intel/idpf/idpf_txrx.c
+++ b/drivers/net/ethernet/intel/idpf/idpf_txrx.c
@@@ -3631,8 -3726,8 +3641,13 @@@ void idpf_vport_intr_update_itr_ena_irq
  	/* net_dim() updates ITR out-of-band using a work item */
  	idpf_net_dim(q_vector);
  
++<<<<<<< HEAD
 +	intval = idpf_vport_intr_buildreg_itr(q_vector,
 +					      IDPF_NO_ITR_UPDATE_IDX, 0);
++=======
+ 	intval = idpf_vport_intr_buildreg_itr(q_vector);
+ 	q_vector->wb_on_itr = false;
++>>>>>>> 0c1683c68168 (idpf: trigger SW interrupt when exiting wb_on_itr mode)
  
  	writel(intval, q_vector->intr_reg.dyn_ctl);
  }
* Unmerged path drivers/net/ethernet/intel/idpf/idpf_txrx.c
