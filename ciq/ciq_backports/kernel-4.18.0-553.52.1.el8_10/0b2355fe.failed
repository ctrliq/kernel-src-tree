gfs2: No longer use 'extern' in function declarations

jira LE-3064
Rebuild_History Non-Buildable kernel-4.18.0-553.52.1.el8_10
commit-author Andreas Gruenbacher <agruenba@redhat.com>
commit 0b2355fe91ac3756a9e29c8b833ba33f9affb520
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-553.52.1.el8_10/0b2355fe.failed

For non-static function declarations, external linkage is implied and
the 'extern' keyword isn't needed.  Some static checkers complain about
the overuse of 'extern', so clean up all the function declarations.

In addition, remove 'extern' from the definition of
free_local_statfs_inodes(); it isn't needed there, either.

	Signed-off-by: Andreas Gruenbacher <agruenba@redhat.com>
(cherry picked from commit 0b2355fe91ac3756a9e29c8b833ba33f9affb520)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/gfs2/acl.h
#	fs/gfs2/aops.h
#	fs/gfs2/bmap.h
#	fs/gfs2/glock.h
#	fs/gfs2/inode.h
#	fs/gfs2/log.h
#	fs/gfs2/lops.h
#	fs/gfs2/rgrp.h
#	fs/gfs2/super.c
#	fs/gfs2/super.h
diff --cc fs/gfs2/acl.h
index f674fdd22337,82f5b09c04e6..000000000000
--- a/fs/gfs2/acl.h
+++ b/fs/gfs2/acl.h
@@@ -14,8 -11,9 +14,15 @@@
  
  #define GFS2_ACL_MAX_ENTRIES(sdp) ((300 << (sdp)->sd_sb.sb_bsize_shift) >> 12)
  
++<<<<<<< HEAD
 +extern struct posix_acl *gfs2_get_acl(struct inode *inode, int type);
 +extern int __gfs2_set_acl(struct inode *inode, struct posix_acl *acl, int type);
 +extern int gfs2_set_acl(struct inode *inode, struct posix_acl *acl, int type);
++=======
+ struct posix_acl *gfs2_get_acl(struct inode *inode, int type, bool rcu);
+ int __gfs2_set_acl(struct inode *inode, struct posix_acl *acl, int type);
+ int gfs2_set_acl(struct mnt_idmap *idmap, struct dentry *dentry,
+ 		 struct posix_acl *acl, int type);
++>>>>>>> 0b2355fe91ac (gfs2: No longer use 'extern' in function declarations)
  
  #endif /* __ACL_DOT_H__ */
diff --cc fs/gfs2/aops.h
index ff9877a68780,a10c4334d248..000000000000
--- a/fs/gfs2/aops.h
+++ b/fs/gfs2/aops.h
@@@ -8,8 -8,8 +8,14 @@@
  
  #include "incore.h"
  
++<<<<<<< HEAD
 +extern void adjust_fs_space(struct inode *inode);
 +extern void gfs2_page_add_databufs(struct gfs2_inode *ip, struct page *page,
 +				   unsigned int from, unsigned int len);
++=======
+ void adjust_fs_space(struct inode *inode);
+ void gfs2_trans_add_databufs(struct gfs2_inode *ip, struct folio *folio,
+ 			     size_t from, size_t len);
++>>>>>>> 0b2355fe91ac (gfs2: No longer use 'extern' in function declarations)
  
  #endif /* __AOPS_DOT_H__ */
diff --cc fs/gfs2/bmap.h
index 301b19a70e4f,4e8b1e8ebdf3..000000000000
--- a/fs/gfs2/bmap.h
+++ b/fs/gfs2/bmap.h
@@@ -49,25 -46,24 +49,47 @@@ static inline void gfs2_write_calc_rese
  extern const struct iomap_ops gfs2_iomap_ops;
  extern const struct iomap_writeback_ops gfs2_writeback_ops;
  
++<<<<<<< HEAD
 +extern int gfs2_unstuff_dinode(struct gfs2_inode *ip);
 +extern int gfs2_block_map(struct inode *inode, sector_t lblock,
 +			  struct buffer_head *bh, int create);
 +extern int gfs2_iomap_get(struct inode *inode, loff_t pos, loff_t length,
 +			  struct iomap *iomap);
 +extern int gfs2_iomap_alloc(struct inode *inode, loff_t pos, loff_t length,
 +			    struct iomap *iomap);
 +extern int gfs2_get_extent(struct inode *inode, u64 lblock, u64 *dblock,
 +			   unsigned int *extlen);
 +extern int gfs2_alloc_extent(struct inode *inode, u64 lblock, u64 *dblock,
 +			     unsigned *extlen, bool *new);
 +extern int gfs2_setattr_size(struct inode *inode, u64 size);
 +extern void gfs2_trim_blocks(struct inode *inode);
 +extern int gfs2_truncatei_resume(struct gfs2_inode *ip);
 +extern int gfs2_file_dealloc(struct gfs2_inode *ip);
 +extern int gfs2_write_alloc_required(struct gfs2_inode *ip, u64 offset,
 +				     unsigned int len);
 +extern int gfs2_map_journal_extents(struct gfs2_sbd *sdp, struct gfs2_jdesc *jd);
 +extern void gfs2_free_journal_extents(struct gfs2_jdesc *jd);
 +extern int __gfs2_punch_hole(struct file *file, loff_t offset, loff_t length);
++=======
+ int gfs2_unstuff_dinode(struct gfs2_inode *ip);
+ int gfs2_block_map(struct inode *inode, sector_t lblock,
+ 		   struct buffer_head *bh, int create);
+ int gfs2_iomap_get(struct inode *inode, loff_t pos, loff_t length,
+ 		   struct iomap *iomap);
+ int gfs2_iomap_alloc(struct inode *inode, loff_t pos, loff_t length,
+ 		     struct iomap *iomap);
+ int gfs2_get_extent(struct inode *inode, u64 lblock, u64 *dblock,
+ 		    unsigned int *extlen);
+ int gfs2_alloc_extent(struct inode *inode, u64 lblock, u64 *dblock,
+ 		      unsigned *extlen, bool *new);
+ int gfs2_setattr_size(struct inode *inode, u64 size);
+ int gfs2_truncatei_resume(struct gfs2_inode *ip);
+ int gfs2_file_dealloc(struct gfs2_inode *ip);
+ int gfs2_write_alloc_required(struct gfs2_inode *ip, u64 offset,
+ 			      unsigned int len);
+ int gfs2_map_journal_extents(struct gfs2_sbd *sdp, struct gfs2_jdesc *jd);
+ void gfs2_free_journal_extents(struct gfs2_jdesc *jd);
+ int __gfs2_punch_hole(struct file *file, loff_t offset, loff_t length);
++>>>>>>> 0b2355fe91ac (gfs2: No longer use 'extern' in function declarations)
  
  #endif /* __BMAP_DOT_H__ */
diff --cc fs/gfs2/glock.h
index e446fe07e75d,61197598abfd..000000000000
--- a/fs/gfs2/glock.h
+++ b/fs/gfs2/glock.h
@@@ -184,38 -166,54 +184,88 @@@ static inline struct address_space *gfs
  	return NULL;
  }
  
++<<<<<<< HEAD
 +extern int gfs2_glock_get(struct gfs2_sbd *sdp, u64 number,
 +			  const struct gfs2_glock_operations *glops,
 +			  int create, struct gfs2_glock **glp);
 +extern void gfs2_glock_hold(struct gfs2_glock *gl);
 +extern void gfs2_glock_put(struct gfs2_glock *gl);
 +extern void gfs2_glock_put_async(struct gfs2_glock *gl);
 +extern void gfs2_holder_init(struct gfs2_glock *gl, unsigned int state,
 +			     u16 flags, struct gfs2_holder *gh);
 +extern void gfs2_holder_reinit(unsigned int state, u16 flags,
 +			       struct gfs2_holder *gh);
 +extern void gfs2_holder_uninit(struct gfs2_holder *gh);
 +extern int gfs2_glock_nq(struct gfs2_holder *gh);
 +extern int gfs2_glock_poll(struct gfs2_holder *gh);
 +extern int gfs2_instantiate(struct gfs2_holder *gh);
 +extern int gfs2_glock_holder_ready(struct gfs2_holder *gh);
 +extern int gfs2_glock_wait(struct gfs2_holder *gh);
 +extern int gfs2_glock_async_wait(unsigned int num_gh, struct gfs2_holder *ghs);
 +extern void gfs2_glock_dq(struct gfs2_holder *gh);
 +extern void gfs2_glock_dq_wait(struct gfs2_holder *gh);
 +extern void gfs2_glock_dq_uninit(struct gfs2_holder *gh);
 +extern int gfs2_glock_nq_num(struct gfs2_sbd *sdp, u64 number,
 +			     const struct gfs2_glock_operations *glops,
 +			     unsigned int state, u16 flags,
 +			     struct gfs2_holder *gh);
 +extern int gfs2_glock_nq_m(unsigned int num_gh, struct gfs2_holder *ghs);
 +extern void gfs2_glock_dq_m(unsigned int num_gh, struct gfs2_holder *ghs);
 +extern void gfs2_dump_glock(struct seq_file *seq, struct gfs2_glock *gl,
++=======
+ int gfs2_glock_get(struct gfs2_sbd *sdp, u64 number,
+ 		   const struct gfs2_glock_operations *glops,
+ 		   int create, struct gfs2_glock **glp);
+ struct gfs2_glock *gfs2_glock_hold(struct gfs2_glock *gl);
+ void gfs2_glock_put(struct gfs2_glock *gl);
+ void gfs2_glock_queue_put(struct gfs2_glock *gl);
+ 
+ void __gfs2_holder_init(struct gfs2_glock *gl, unsigned int state,
+ 		        u16 flags, struct gfs2_holder *gh,
+ 		        unsigned long ip);
+ static inline void gfs2_holder_init(struct gfs2_glock *gl, unsigned int state,
+ 				    u16 flags, struct gfs2_holder *gh) {
+ 	__gfs2_holder_init(gl, state, flags, gh, _RET_IP_);
+ }
+ 
+ void gfs2_holder_reinit(unsigned int state, u16 flags,
+ 		        struct gfs2_holder *gh);
+ void gfs2_holder_uninit(struct gfs2_holder *gh);
+ int gfs2_glock_nq(struct gfs2_holder *gh);
+ int gfs2_glock_poll(struct gfs2_holder *gh);
+ int gfs2_instantiate(struct gfs2_holder *gh);
+ int gfs2_glock_holder_ready(struct gfs2_holder *gh);
+ int gfs2_glock_wait(struct gfs2_holder *gh);
+ int gfs2_glock_async_wait(unsigned int num_gh, struct gfs2_holder *ghs);
+ void gfs2_glock_dq(struct gfs2_holder *gh);
+ void gfs2_glock_dq_wait(struct gfs2_holder *gh);
+ void gfs2_glock_dq_uninit(struct gfs2_holder *gh);
+ int gfs2_glock_nq_num(struct gfs2_sbd *sdp, u64 number,
+ 		      const struct gfs2_glock_operations *glops,
+ 		      unsigned int state, u16 flags,
+ 		      struct gfs2_holder *gh);
+ int gfs2_glock_nq_m(unsigned int num_gh, struct gfs2_holder *ghs);
+ void gfs2_glock_dq_m(unsigned int num_gh, struct gfs2_holder *ghs);
+ void gfs2_dump_glock(struct seq_file *seq, struct gfs2_glock *gl,
++>>>>>>> 0b2355fe91ac (gfs2: No longer use 'extern' in function declarations)
  			    bool fsid);
  #define GLOCK_BUG_ON(gl,x) do { if (unlikely(x)) {		\
  			gfs2_dump_glock(NULL, gl, true);	\
  			BUG(); } } while(0)
++<<<<<<< HEAD
 +extern __printf(2, 3)
++=======
+ #define gfs2_glock_assert_warn(gl, x) do { if (unlikely(!(x))) {	\
+ 			gfs2_dump_glock(NULL, gl, true);		\
+ 			gfs2_assert_warn((gl)->gl_name.ln_sbd, (x)); } } \
+ 	while (0)
+ #define gfs2_glock_assert_withdraw(gl, x) do { if (unlikely(!(x))) {	\
+ 			gfs2_dump_glock(NULL, gl, true);		\
+ 			gfs2_assert_withdraw((gl)->gl_name.ln_sbd, (x)); } } \
+ 	while (0)
+ 
+ __printf(2, 3)
++>>>>>>> 0b2355fe91ac (gfs2: No longer use 'extern' in function declarations)
  void gfs2_print_dbg(struct seq_file *seq, const char *fmt, ...);
  
  /**
@@@ -243,28 -241,27 +293,41 @@@ static inline int gfs2_glock_nq_init(st
  	return error;
  }
  
++<<<<<<< HEAD
 +extern void gfs2_glock_cb(struct gfs2_glock *gl, unsigned int state);
 +extern void gfs2_glock_complete(struct gfs2_glock *gl, int ret);
 +extern bool gfs2_queue_try_to_evict(struct gfs2_glock *gl);
 +extern bool gfs2_queue_verify_delete(struct gfs2_glock *gl);
 +extern void gfs2_cancel_delete_work(struct gfs2_glock *gl);
 +extern void gfs2_flush_delete_work(struct gfs2_sbd *sdp);
 +extern void gfs2_gl_hash_clear(struct gfs2_sbd *sdp);
 +extern void gfs2_gl_dq_holders(struct gfs2_sbd *sdp);
 +extern void gfs2_glock_thaw(struct gfs2_sbd *sdp);
 +extern void gfs2_glock_free(struct gfs2_glock *gl);
 +extern void gfs2_glock_free_later(struct gfs2_glock *gl);
- 
- extern int __init gfs2_glock_init(void);
- extern void gfs2_glock_exit(void);
- 
- extern void gfs2_create_debugfs_file(struct gfs2_sbd *sdp);
- extern void gfs2_delete_debugfs_file(struct gfs2_sbd *sdp);
- extern void gfs2_register_debugfs(void);
- extern void gfs2_unregister_debugfs(void);
- 
- extern void glock_set_object(struct gfs2_glock *gl, void *object);
- extern void glock_clear_object(struct gfs2_glock *gl, void *object);
++=======
+ void gfs2_glock_cb(struct gfs2_glock *gl, unsigned int state);
+ void gfs2_glock_complete(struct gfs2_glock *gl, int ret);
+ bool gfs2_queue_try_to_evict(struct gfs2_glock *gl);
+ void gfs2_cancel_delete_work(struct gfs2_glock *gl);
+ void gfs2_flush_delete_work(struct gfs2_sbd *sdp);
+ void gfs2_gl_hash_clear(struct gfs2_sbd *sdp);
+ void gfs2_gl_dq_holders(struct gfs2_sbd *sdp);
+ void gfs2_glock_thaw(struct gfs2_sbd *sdp);
+ void gfs2_glock_add_to_lru(struct gfs2_glock *gl);
+ void gfs2_glock_free(struct gfs2_glock *gl);
++>>>>>>> 0b2355fe91ac (gfs2: No longer use 'extern' in function declarations)
+ 
+ int __init gfs2_glock_init(void);
+ void gfs2_glock_exit(void);
+ 
+ void gfs2_create_debugfs_file(struct gfs2_sbd *sdp);
+ void gfs2_delete_debugfs_file(struct gfs2_sbd *sdp);
+ void gfs2_register_debugfs(void);
+ void gfs2_unregister_debugfs(void);
+ 
+ void glock_set_object(struct gfs2_glock *gl, void *object);
+ void glock_clear_object(struct gfs2_glock *gl, void *object);
  
  extern const struct lm_lockops gfs2_dlm_ops;
  
@@@ -283,13 -280,7 +346,13 @@@ static inline bool gfs2_holder_queued(s
  	return !list_empty(&gh->gh_list);
  }
  
- extern void gfs2_inode_remember_delete(struct gfs2_glock *gl, u64 generation);
- extern bool gfs2_inode_already_deleted(struct gfs2_glock *gl, u64 generation);
+ void gfs2_inode_remember_delete(struct gfs2_glock *gl, u64 generation);
+ bool gfs2_inode_already_deleted(struct gfs2_glock *gl, u64 generation);
  
 +static inline bool glock_needs_demote(struct gfs2_glock *gl)
 +{
 +	return (test_bit(GLF_DEMOTE, &gl->gl_flags) ||
 +		test_bit(GLF_PENDING_DEMOTE, &gl->gl_flags));
 +}
 +
  #endif /* __GLOCK_DOT_H__ */
diff --cc fs/gfs2/inode.h
index a2ef89fbb593,fd15d1c6b6fb..000000000000
--- a/fs/gfs2/inode.h
+++ b/fs/gfs2/inode.h
@@@ -15,10 -12,10 +15,17 @@@
  #include <linux/mm.h>
  #include "util.h"
  
++<<<<<<< HEAD
 +extern int gfs2_releasepage(struct page *page, gfp_t gfp_mask);
 +extern int gfs2_internal_read(struct gfs2_inode *ip,
 +			      char *buf, loff_t *pos, unsigned size);
 +extern void gfs2_set_aops(struct inode *inode);
++=======
+ bool gfs2_release_folio(struct folio *folio, gfp_t gfp_mask);
+ ssize_t gfs2_internal_read(struct gfs2_inode *ip,
+ 			   char *buf, loff_t *pos, size_t size);
+ void gfs2_set_aops(struct inode *inode);
++>>>>>>> 0b2355fe91ac (gfs2: No longer use 'extern' in function declarations)
  
  static inline int gfs2_is_stuffed(const struct gfs2_inode *ip)
  {
@@@ -91,29 -86,33 +98,49 @@@ err
  	return -EIO;
  }
  
- extern struct inode *gfs2_inode_lookup(struct super_block *sb, unsigned type, 
- 				       u64 no_addr, u64 no_formal_ino,
- 				       unsigned int blktype);
- extern struct inode *gfs2_lookup_by_inum(struct gfs2_sbd *sdp, u64 no_addr,
- 					 u64 no_formal_ino,
- 					 unsigned int blktype);
+ struct inode *gfs2_inode_lookup(struct super_block *sb, unsigned type,
+ 			        u64 no_addr, u64 no_formal_ino,
+ 			        unsigned int blktype);
+ struct inode *gfs2_lookup_by_inum(struct gfs2_sbd *sdp, u64 no_addr,
+ 				  u64 no_formal_ino,
+ 				  unsigned int blktype);
  
- extern int gfs2_inode_refresh(struct gfs2_inode *ip);
+ int gfs2_inode_refresh(struct gfs2_inode *ip);
  
++<<<<<<< HEAD
 +extern struct inode *gfs2_lookupi(struct inode *dir, const struct qstr *name,
 +				  int is_root);
 +extern int gfs2_permission(struct inode *inode, int mask);
 +extern struct inode *gfs2_lookup_simple(struct inode *dip, const char *name);
 +extern void gfs2_dinode_out(const struct gfs2_inode *ip, void *buf);
 +extern int gfs2_open_common(struct inode *inode, struct file *file);
 +extern loff_t gfs2_seek_data(struct file *file, loff_t offset);
 +extern loff_t gfs2_seek_hole(struct file *file, loff_t offset);
++=======
+ struct inode *gfs2_lookupi(struct inode *dir, const struct qstr *name,
+ 			   int is_root);
+ int gfs2_permission(struct mnt_idmap *idmap,
+ 		    struct inode *inode, int mask);
+ struct inode *gfs2_lookup_meta(struct inode *dip, const char *name);
+ void gfs2_dinode_out(const struct gfs2_inode *ip, void *buf);
+ int gfs2_open_common(struct inode *inode, struct file *file);
+ loff_t gfs2_seek_data(struct file *file, loff_t offset);
+ loff_t gfs2_seek_hole(struct file *file, loff_t offset);
++>>>>>>> 0b2355fe91ac (gfs2: No longer use 'extern' in function declarations)
  
  extern const struct file_operations gfs2_file_fops_nolock;
  extern const struct file_operations gfs2_dir_fops_nolock;
  
++<<<<<<< HEAD
 +extern void gfs2_set_inode_flags(struct inode *inode);
 + 
++=======
+ int gfs2_fileattr_get(struct dentry *dentry, struct fileattr *fa);
+ int gfs2_fileattr_set(struct mnt_idmap *idmap,
+ 		      struct dentry *dentry, struct fileattr *fa);
+ void gfs2_set_inode_flags(struct inode *inode);
+ 
++>>>>>>> 0b2355fe91ac (gfs2: No longer use 'extern' in function declarations)
  #ifdef CONFIG_GFS2_FS_LOCKING_DLM
  extern const struct file_operations gfs2_file_fops;
  extern const struct file_operations gfs2_dir_fops;
diff --cc fs/gfs2/log.h
index c1bdb8a9a8e3,c27b05099c1e..000000000000
--- a/fs/gfs2/log.h
+++ b/fs/gfs2/log.h
@@@ -73,28 -70,29 +73,55 @@@ static inline void gfs2_ordered_add_ino
  	}
  }
  
++<<<<<<< HEAD
 +extern void gfs2_ordered_del_inode(struct gfs2_inode *ip);
 +extern unsigned int gfs2_struct2blk(struct gfs2_sbd *sdp, unsigned int nstruct);
 +extern void gfs2_remove_from_ail(struct gfs2_bufdata *bd);
 +extern bool gfs2_log_is_empty(struct gfs2_sbd *sdp);
 +extern void gfs2_log_release_revokes(struct gfs2_sbd *sdp, unsigned int revokes);
 +extern void gfs2_log_release(struct gfs2_sbd *sdp, unsigned int blks);
 +extern bool gfs2_log_try_reserve(struct gfs2_sbd *sdp, struct gfs2_trans *tr,
 +				 unsigned int *extra_revokes);
 +extern void gfs2_log_reserve(struct gfs2_sbd *sdp, struct gfs2_trans *tr,
 +			     unsigned int *extra_revokes);
 +extern void gfs2_write_log_header(struct gfs2_sbd *sdp, struct gfs2_jdesc *jd,
 +				  u64 seq, u32 tail, u32 lblock, u32 flags,
 +				  int op_flags);
 +extern void gfs2_log_flush(struct gfs2_sbd *sdp, struct gfs2_glock *gl,
 +			   u32 type);
 +extern void gfs2_log_commit(struct gfs2_sbd *sdp, struct gfs2_trans *trans);
 +extern void gfs2_ail1_flush(struct gfs2_sbd *sdp, struct writeback_control *wbc);
 +extern void log_flush_wait(struct gfs2_sbd *sdp);
 +
 +extern int gfs2_logd(void *data);
 +extern void gfs2_add_revoke(struct gfs2_sbd *sdp, struct gfs2_bufdata *bd);
 +extern void gfs2_glock_remove_revoke(struct gfs2_glock *gl);
 +extern void gfs2_flush_revokes(struct gfs2_sbd *sdp);
++=======
+ void gfs2_ordered_del_inode(struct gfs2_inode *ip);
+ unsigned int gfs2_struct2blk(struct gfs2_sbd *sdp, unsigned int nstruct);
+ void gfs2_remove_from_ail(struct gfs2_bufdata *bd);
+ bool gfs2_log_is_empty(struct gfs2_sbd *sdp);
+ void gfs2_log_release_revokes(struct gfs2_sbd *sdp, unsigned int revokes);
+ void gfs2_log_release(struct gfs2_sbd *sdp, unsigned int blks);
+ bool gfs2_log_try_reserve(struct gfs2_sbd *sdp, struct gfs2_trans *tr,
+ 			  unsigned int *extra_revokes);
+ void gfs2_log_reserve(struct gfs2_sbd *sdp, struct gfs2_trans *tr,
+ 		      unsigned int *extra_revokes);
+ void gfs2_write_log_header(struct gfs2_sbd *sdp, struct gfs2_jdesc *jd,
+ 			   u64 seq, u32 tail, u32 lblock, u32 flags,
+ 			   blk_opf_t op_flags);
+ void gfs2_log_flush(struct gfs2_sbd *sdp, struct gfs2_glock *gl,
+ 		    u32 type);
+ void gfs2_log_commit(struct gfs2_sbd *sdp, struct gfs2_trans *trans);
+ void gfs2_ail1_flush(struct gfs2_sbd *sdp, struct writeback_control *wbc);
+ void log_flush_wait(struct gfs2_sbd *sdp);
+ 
+ int gfs2_logd(void *data);
+ void gfs2_add_revoke(struct gfs2_sbd *sdp, struct gfs2_bufdata *bd);
+ void gfs2_glock_remove_revoke(struct gfs2_glock *gl);
+ void gfs2_flush_revokes(struct gfs2_sbd *sdp);
+ void gfs2_ail_drain(struct gfs2_sbd *sdp);
++>>>>>>> 0b2355fe91ac (gfs2: No longer use 'extern' in function declarations)
  
  #endif /* __LOG_DOT_H__ */
diff --cc fs/gfs2/lops.h
index b03ee09e0a6a,07890c7b145d..000000000000
--- a/fs/gfs2/lops.h
+++ b/fs/gfs2/lops.h
@@@ -14,15 -11,18 +14,30 @@@
  #include "incore.h"
  
  extern const struct gfs2_log_operations *gfs2_log_ops[];
++<<<<<<< HEAD
 +extern void gfs2_log_incr_head(struct gfs2_sbd *sdp);
 +extern u64 gfs2_log_bmap(struct gfs2_jdesc *jd, unsigned int lbn);
 +extern void gfs2_log_write(struct gfs2_sbd *sdp, struct gfs2_jdesc *jd,
 +			   struct page *page, unsigned size, unsigned offset,
 +			   u64 blkno);
 +extern void gfs2_log_submit_bio(struct bio **biop, int opf);
 +extern void gfs2_pin(struct gfs2_sbd *sdp, struct buffer_head *bh);
 +extern int gfs2_find_jhead(struct gfs2_jdesc *jd,
 +			   struct gfs2_log_header_host *head, bool keep_cache);
++=======
+ 
+ void gfs2_log_incr_head(struct gfs2_sbd *sdp);
+ u64 gfs2_log_bmap(struct gfs2_jdesc *jd, unsigned int lbn);
+ void gfs2_log_write(struct gfs2_sbd *sdp, struct gfs2_jdesc *jd,
+ 		    struct page *page, unsigned size, unsigned offset,
+ 		    u64 blkno);
+ void gfs2_log_submit_bio(struct bio **biop, blk_opf_t opf);
+ void gfs2_pin(struct gfs2_sbd *sdp, struct buffer_head *bh);
+ int gfs2_find_jhead(struct gfs2_jdesc *jd,
+ 		    struct gfs2_log_header_host *head, bool keep_cache);
+ void gfs2_drain_revokes(struct gfs2_sbd *sdp);
+ 
++>>>>>>> 0b2355fe91ac (gfs2: No longer use 'extern' in function declarations)
  static inline unsigned int buf_limit(struct gfs2_sbd *sdp)
  {
  	return sdp->sd_ldptrs;
diff --cc fs/gfs2/rgrp.h
index bee9102cff0c,8d20e99385db..000000000000
--- a/fs/gfs2/rgrp.h
+++ b/fs/gfs2/rgrp.h
@@@ -25,38 -22,38 +25,43 @@@ struct gfs2_rgrpd
  struct gfs2_sbd;
  struct gfs2_holder;
  
- extern void gfs2_rgrp_verify(struct gfs2_rgrpd *rgd);
+ void gfs2_rgrp_verify(struct gfs2_rgrpd *rgd);
  
- extern struct gfs2_rgrpd *gfs2_blk2rgrpd(struct gfs2_sbd *sdp, u64 blk, bool exact);
- extern struct gfs2_rgrpd *gfs2_rgrpd_get_first(struct gfs2_sbd *sdp);
- extern struct gfs2_rgrpd *gfs2_rgrpd_get_next(struct gfs2_rgrpd *rgd);
+ struct gfs2_rgrpd *gfs2_blk2rgrpd(struct gfs2_sbd *sdp, u64 blk, bool exact);
+ struct gfs2_rgrpd *gfs2_rgrpd_get_first(struct gfs2_sbd *sdp);
+ struct gfs2_rgrpd *gfs2_rgrpd_get_next(struct gfs2_rgrpd *rgd);
  
- extern void gfs2_clear_rgrpd(struct gfs2_sbd *sdp);
- extern int gfs2_rindex_update(struct gfs2_sbd *sdp);
- extern void gfs2_free_clones(struct gfs2_rgrpd *rgd);
- extern int gfs2_rgrp_go_instantiate(struct gfs2_glock *gl);
- extern void gfs2_rgrp_brelse(struct gfs2_rgrpd *rgd);
+ void gfs2_clear_rgrpd(struct gfs2_sbd *sdp);
+ int gfs2_rindex_update(struct gfs2_sbd *sdp);
+ void gfs2_free_clones(struct gfs2_rgrpd *rgd);
+ int gfs2_rgrp_go_instantiate(struct gfs2_glock *gl);
+ void gfs2_rgrp_brelse(struct gfs2_rgrpd *rgd);
  
- extern struct gfs2_alloc *gfs2_alloc_get(struct gfs2_inode *ip);
+ struct gfs2_alloc *gfs2_alloc_get(struct gfs2_inode *ip);
  
  #define GFS2_AF_ORLOV 1
- extern int gfs2_inplace_reserve(struct gfs2_inode *ip,
- 				struct gfs2_alloc_parms *ap);
- extern void gfs2_inplace_release(struct gfs2_inode *ip);
+ int gfs2_inplace_reserve(struct gfs2_inode *ip,
+ 			 struct gfs2_alloc_parms *ap);
+ void gfs2_inplace_release(struct gfs2_inode *ip);
  
++<<<<<<< HEAD
 +extern int gfs2_alloc_blocks(struct gfs2_inode *ip, u64 *bn, unsigned int *n,
 +			     bool dinode, u64 *generation);
- 
- extern void gfs2_rs_deltree(struct gfs2_blkreserv *rs);
- extern void gfs2_rs_delete(struct gfs2_inode *ip);
- extern void __gfs2_free_blocks(struct gfs2_inode *ip, struct gfs2_rgrpd *rgd,
- 			       u64 bstart, u32 blen, int meta);
- extern void gfs2_free_meta(struct gfs2_inode *ip, struct gfs2_rgrpd *rgd,
- 			   u64 bstart, u32 blen);
- extern void gfs2_free_di(struct gfs2_rgrpd *rgd, struct gfs2_inode *ip);
- extern void gfs2_unlink_di(struct inode *inode);
- extern int gfs2_check_blk_type(struct gfs2_sbd *sdp, u64 no_addr,
- 			       unsigned int type);
++=======
+ int gfs2_alloc_blocks(struct gfs2_inode *ip, u64 *bn, unsigned int *n,
+ 		      bool dinode);
++>>>>>>> 0b2355fe91ac (gfs2: No longer use 'extern' in function declarations)
+ 
+ void gfs2_rs_deltree(struct gfs2_blkreserv *rs);
+ void gfs2_rs_delete(struct gfs2_inode *ip);
+ void __gfs2_free_blocks(struct gfs2_inode *ip, struct gfs2_rgrpd *rgd,
+ 		        u64 bstart, u32 blen, int meta);
+ void gfs2_free_meta(struct gfs2_inode *ip, struct gfs2_rgrpd *rgd,
+ 		    u64 bstart, u32 blen);
+ void gfs2_free_di(struct gfs2_rgrpd *rgd, struct gfs2_inode *ip);
+ void gfs2_unlink_di(struct inode *inode);
+ int gfs2_check_blk_type(struct gfs2_sbd *sdp, u64 no_addr,
+ 		        unsigned int type);
  
  struct gfs2_rgrp_list {
  	unsigned int rl_rgrps;
@@@ -65,17 -62,19 +70,33 @@@
  	struct gfs2_holder *rl_ghs;
  };
  
++<<<<<<< HEAD
 +extern void gfs2_rlist_add(struct gfs2_inode *ip, struct gfs2_rgrp_list *rlist,
 +			   u64 block);
 +extern void gfs2_rlist_alloc(struct gfs2_rgrp_list *rlist);
 +extern void gfs2_rlist_free(struct gfs2_rgrp_list *rlist);
 +extern u64 gfs2_ri_total(struct gfs2_sbd *sdp);
 +extern void gfs2_rgrp_dump(struct seq_file *seq, struct gfs2_rgrpd *rgd,
 +			   const char *fs_id_buf);
 +extern int gfs2_rgrp_send_discards(struct gfs2_sbd *sdp, u64 offset,
 +				   struct buffer_head *bh,
 +				   const struct gfs2_bitmap *bi, unsigned minlen, u64 *ptrimmed);
 +extern int gfs2_fitrim(struct file *filp, void __user *argp);
++=======
+ void gfs2_rlist_add(struct gfs2_inode *ip, struct gfs2_rgrp_list *rlist,
+ 		    u64 block);
+ void gfs2_rlist_alloc(struct gfs2_rgrp_list *rlist,
+ 		      unsigned int state, u16 flags);
+ void gfs2_rlist_free(struct gfs2_rgrp_list *rlist);
+ u64 gfs2_ri_total(struct gfs2_sbd *sdp);
+ void gfs2_rgrp_dump(struct seq_file *seq, struct gfs2_rgrpd *rgd,
+ 		    const char *fs_id_buf);
+ int gfs2_rgrp_send_discards(struct gfs2_sbd *sdp, u64 offset,
+ 			    struct buffer_head *bh,
+ 			    const struct gfs2_bitmap *bi, unsigned minlen,
+ 			    u64 *ptrimmed);
+ int gfs2_fitrim(struct file *filp, void __user *argp);
++>>>>>>> 0b2355fe91ac (gfs2: No longer use 'extern' in function declarations)
  
  /* This is how to tell if a reservation is in the rgrp tree: */
  static inline bool gfs2_rs_active(const struct gfs2_blkreserv *rs)
diff --cc fs/gfs2/super.c
index 4d42661040b6,4dad30dd72fc..000000000000
--- a/fs/gfs2/super.c
+++ b/fs/gfs2/super.c
@@@ -1588,20 -1561,14 +1588,24 @@@ static struct inode *gfs2_alloc_inode(s
  	return &ip->i_inode;
  }
  
 -static void gfs2_free_inode(struct inode *inode)
 +static void gfs2_i_callback(struct rcu_head *head)
  {
 -	kmem_cache_free(gfs2_inode_cachep, GFS2_I(inode));
 +	struct inode *inode = container_of(head, struct inode, i_rcu);
 +	kmem_cache_free(gfs2_inode_cachep, inode);
  }
  
++<<<<<<< HEAD
 +static void gfs2_destroy_inode(struct inode *inode)
++=======
+ void free_local_statfs_inodes(struct gfs2_sbd *sdp)
++>>>>>>> 0b2355fe91ac (gfs2: No longer use 'extern' in function declarations)
 +{
 +	call_rcu(&inode->i_rcu, gfs2_i_callback);
 +}
 +
 +extern void free_lcl_statfs_inodes(struct gfs2_sbd *sdp)
  {
 -	struct local_statfs_inode *lsi, *safe;
 +	struct lcl_statfs_inode *lsi, *safe;
  
  	/* Run through the statfs inodes list to iput and free memory */
  	list_for_each_entry_safe(lsi, safe, &sdp->sd_sc_inodes_list, si_list) {
@@@ -1614,10 -1581,10 +1618,15 @@@
  	}
  }
  
++<<<<<<< HEAD
 +extern struct inode *find_lcl_statfs_inode(struct gfs2_sbd *sdp,
 +                                           unsigned int index)
++=======
+ struct inode *find_local_statfs_inode(struct gfs2_sbd *sdp,
+ 				      unsigned int index)
++>>>>>>> 0b2355fe91ac (gfs2: No longer use 'extern' in function declarations)
  {
 -	struct local_statfs_inode *lsi;
 +	struct lcl_statfs_inode *lsi;
  
  	/* Return the local (per node) statfs inode in the
  	 * sdp->sd_sc_inodes_list corresponding to the 'index'. */
diff --cc fs/gfs2/super.h
index 22618fbfe007,e1f7ef926446..000000000000
--- a/fs/gfs2/super.h
+++ b/fs/gfs2/super.h
@@@ -14,7 -11,11 +14,15 @@@
  #include <linux/dcache.h>
  #include "incore.h"
  
++<<<<<<< HEAD
 +extern void gfs2_lm_unmount(struct gfs2_sbd *sdp);
++=======
+ /* Supported fs format version range */
+ #define GFS2_FS_FORMAT_MIN (1801)
+ #define GFS2_FS_FORMAT_MAX (1802)
+ 
+ void gfs2_lm_unmount(struct gfs2_sbd *sdp);
++>>>>>>> 0b2355fe91ac (gfs2: No longer use 'extern' in function declarations)
  
  static inline unsigned int gfs2_jindex_size(struct gfs2_sbd *sdp)
  {
@@@ -25,33 -26,33 +33,56 @@@
  	return x;
  }
  
- extern void gfs2_jindex_free(struct gfs2_sbd *sdp);
+ void gfs2_jindex_free(struct gfs2_sbd *sdp);
  
- extern struct gfs2_jdesc *gfs2_jdesc_find(struct gfs2_sbd *sdp, unsigned int jid);
- extern int gfs2_jdesc_check(struct gfs2_jdesc *jd);
- extern int gfs2_lookup_in_master_dir(struct gfs2_sbd *sdp, char *filename,
- 				     struct gfs2_inode **ipp);
+ struct gfs2_jdesc *gfs2_jdesc_find(struct gfs2_sbd *sdp, unsigned int jid);
+ int gfs2_jdesc_check(struct gfs2_jdesc *jd);
+ int gfs2_lookup_in_master_dir(struct gfs2_sbd *sdp, char *filename,
+ 			      struct gfs2_inode **ipp);
  
++<<<<<<< HEAD
 +extern int gfs2_make_fs_rw(struct gfs2_sbd *sdp);
 +extern void gfs2_make_fs_ro(struct gfs2_sbd *sdp);
 +extern void gfs2_online_uevent(struct gfs2_sbd *sdp);
 +extern int gfs2_statfs_init(struct gfs2_sbd *sdp);
 +extern void gfs2_statfs_change(struct gfs2_sbd *sdp, s64 total, s64 free,
 +			       s64 dinodes);
 +extern void gfs2_statfs_change_in(struct gfs2_statfs_change_host *sc,
 +				  const void *buf);
 +extern void gfs2_statfs_change_out(const struct gfs2_statfs_change_host *sc,
 +				   void *buf);
 +extern void update_statfs(struct gfs2_sbd *sdp, struct buffer_head *m_bh,
 +			  struct buffer_head *l_bh);
 +extern int gfs2_statfs_sync(struct super_block *sb, int type);
 +extern void gfs2_freeze_func(struct work_struct *work);
 +extern void gfs2_thaw_freeze_initiator(struct super_block *sb);
 +
 +extern void free_lcl_statfs_inodes(struct gfs2_sbd *sdp);
 +extern struct inode *find_lcl_statfs_inode(struct gfs2_sbd *sdp,
 +                                           unsigned int index);
 +extern void free_sbd(struct gfs2_sbd *sdp);
++=======
+ int gfs2_make_fs_rw(struct gfs2_sbd *sdp);
+ void gfs2_make_fs_ro(struct gfs2_sbd *sdp);
+ void gfs2_online_uevent(struct gfs2_sbd *sdp);
+ void gfs2_destroy_threads(struct gfs2_sbd *sdp);
+ int gfs2_statfs_init(struct gfs2_sbd *sdp);
+ void gfs2_statfs_change(struct gfs2_sbd *sdp, s64 total, s64 free,
+ 		        s64 dinodes);
+ void gfs2_statfs_change_in(struct gfs2_statfs_change_host *sc,
+ 			   const void *buf);
+ void gfs2_statfs_change_out(const struct gfs2_statfs_change_host *sc,
+ 			    void *buf);
+ void update_statfs(struct gfs2_sbd *sdp, struct buffer_head *m_bh);
+ int gfs2_statfs_sync(struct super_block *sb, int type);
+ void gfs2_freeze_func(struct work_struct *work);
+ void gfs2_thaw_freeze_initiator(struct super_block *sb);
+ 
+ void free_local_statfs_inodes(struct gfs2_sbd *sdp);
+ struct inode *find_local_statfs_inode(struct gfs2_sbd *sdp,
+ 				      unsigned int index);
+ void free_sbd(struct gfs2_sbd *sdp);
++>>>>>>> 0b2355fe91ac (gfs2: No longer use 'extern' in function declarations)
  
  extern struct file_system_type gfs2_fs_type;
  extern struct file_system_type gfs2meta_fs_type;
* Unmerged path fs/gfs2/acl.h
* Unmerged path fs/gfs2/aops.h
* Unmerged path fs/gfs2/bmap.h
diff --git a/fs/gfs2/dir.h b/fs/gfs2/dir.h
index e1b309c24dab..70bdd3d55a06 100644
--- a/fs/gfs2/dir.h
+++ b/fs/gfs2/dir.h
@@ -26,33 +26,33 @@ struct gfs2_diradd {
 	int save_loc;
 };
 
-extern struct inode *gfs2_dir_search(struct inode *dir,
-				     const struct qstr *filename,
-				     bool fail_on_exist);
-extern int gfs2_dir_check(struct inode *dir, const struct qstr *filename,
-			  const struct gfs2_inode *ip);
-extern int gfs2_dir_add(struct inode *inode, const struct qstr *filename,
-			const struct gfs2_inode *ip, struct gfs2_diradd *da);
+struct inode *gfs2_dir_search(struct inode *dir,
+			      const struct qstr *filename,
+			      bool fail_on_exist);
+int gfs2_dir_check(struct inode *dir, const struct qstr *filename,
+		   const struct gfs2_inode *ip);
+int gfs2_dir_add(struct inode *inode, const struct qstr *filename,
+		 const struct gfs2_inode *ip, struct gfs2_diradd *da);
 static inline void gfs2_dir_no_add(struct gfs2_diradd *da)
 {
 	if (da->bh)
 		brelse(da->bh);
 	da->bh = NULL;
 }
-extern int gfs2_dir_del(struct gfs2_inode *dip, const struct dentry *dentry);
-extern int gfs2_dir_read(struct inode *inode, struct dir_context *ctx,
-			 struct file_ra_state *f_ra);
-extern int gfs2_dir_mvino(struct gfs2_inode *dip, const struct qstr *filename,
-			  const struct gfs2_inode *nip, unsigned int new_type);
+int gfs2_dir_del(struct gfs2_inode *dip, const struct dentry *dentry);
+int gfs2_dir_read(struct inode *inode, struct dir_context *ctx,
+		  struct file_ra_state *f_ra);
+int gfs2_dir_mvino(struct gfs2_inode *dip, const struct qstr *filename,
+		   const struct gfs2_inode *nip, unsigned int new_type);
 
-extern int gfs2_dir_exhash_dealloc(struct gfs2_inode *dip);
+int gfs2_dir_exhash_dealloc(struct gfs2_inode *dip);
 
-extern int gfs2_diradd_alloc_required(struct inode *dir,
-				      const struct qstr *filename,
-				      struct gfs2_diradd *da);
-extern int gfs2_dir_get_new_buffer(struct gfs2_inode *ip, u64 block,
-				   struct buffer_head **bhp);
-extern void gfs2_dir_hash_inval(struct gfs2_inode *ip);
+int gfs2_diradd_alloc_required(struct inode *dir,
+			       const struct qstr *filename,
+			       struct gfs2_diradd *da);
+int gfs2_dir_get_new_buffer(struct gfs2_inode *ip, u64 block,
+			    struct buffer_head **bhp);
+void gfs2_dir_hash_inval(struct gfs2_inode *ip);
 
 static inline u32 gfs2_disk_hash(const char *data, int len)
 {
* Unmerged path fs/gfs2/glock.h
diff --git a/fs/gfs2/glops.h b/fs/gfs2/glops.h
index 5ae86b3e7b86..4b38a9b869ed 100644
--- a/fs/gfs2/glops.h
+++ b/fs/gfs2/glops.h
@@ -25,7 +25,7 @@ extern const struct gfs2_glock_operations gfs2_quota_glops;
 extern const struct gfs2_glock_operations gfs2_journal_glops;
 extern const struct gfs2_glock_operations *gfs2_glops_list[];
 
-extern int gfs2_inode_metasync(struct gfs2_glock *gl);
-extern void gfs2_ail_flush(struct gfs2_glock *gl, bool fsync);
+int gfs2_inode_metasync(struct gfs2_glock *gl);
+void gfs2_ail_flush(struct gfs2_glock *gl, bool fsync);
 
 #endif /* __GLOPS_DOT_H__ */
diff --git a/fs/gfs2/incore.h b/fs/gfs2/incore.h
index 009d129fc882..e4434b496578 100644
--- a/fs/gfs2/incore.h
+++ b/fs/gfs2/incore.h
@@ -869,7 +869,7 @@ static inline void gfs2_sbstats_inc(const struct gfs2_glock *gl, int which)
 	preempt_enable();
 }
 
-extern struct gfs2_rgrpd *gfs2_glock2rgrp(struct gfs2_glock *gl);
+struct gfs2_rgrpd *gfs2_glock2rgrp(struct gfs2_glock *gl);
 
 static inline unsigned gfs2_max_stuffed_size(const struct gfs2_inode *ip)
 {
* Unmerged path fs/gfs2/inode.h
* Unmerged path fs/gfs2/log.h
* Unmerged path fs/gfs2/lops.h
diff --git a/fs/gfs2/meta_io.h b/fs/gfs2/meta_io.h
index d10004c20503..2feef0568ae8 100644
--- a/fs/gfs2/meta_io.h
+++ b/fs/gfs2/meta_io.h
@@ -53,21 +53,21 @@ static inline struct gfs2_sbd *gfs2_mapping2sbd(struct address_space *mapping)
 		return inode->i_sb->s_fs_info;
 }
 
-extern struct buffer_head *gfs2_meta_new(struct gfs2_glock *gl, u64 blkno);
-extern int gfs2_meta_read(struct gfs2_glock *gl, u64 blkno, int flags,
-			  int rahead, struct buffer_head **bhp);
-extern int gfs2_meta_wait(struct gfs2_sbd *sdp, struct buffer_head *bh);
-extern struct buffer_head *gfs2_getbuf(struct gfs2_glock *gl, u64 blkno,
-				       int create);
+struct buffer_head *gfs2_meta_new(struct gfs2_glock *gl, u64 blkno);
+int gfs2_meta_read(struct gfs2_glock *gl, u64 blkno, int flags,
+		   int rahead, struct buffer_head **bhp);
+int gfs2_meta_wait(struct gfs2_sbd *sdp, struct buffer_head *bh);
+struct buffer_head *gfs2_getbuf(struct gfs2_glock *gl, u64 blkno,
+			        int create);
 enum {
 	REMOVE_JDATA = 0,
 	REMOVE_META = 1,
 };
 
-extern void gfs2_remove_from_journal(struct buffer_head *bh, int meta);
-extern void gfs2_journal_wipe(struct gfs2_inode *ip, u64 bstart, u32 blen);
-extern int gfs2_meta_buffer(struct gfs2_inode *ip, u32 mtype, u64 num,
-			    struct buffer_head **bhp);
+void gfs2_remove_from_journal(struct buffer_head *bh, int meta);
+void gfs2_journal_wipe(struct gfs2_inode *ip, u64 bstart, u32 blen);
+int gfs2_meta_buffer(struct gfs2_inode *ip, u32 mtype, u64 num,
+		     struct buffer_head **bhp);
 
 static inline int gfs2_meta_inode_buffer(struct gfs2_inode *ip,
 					 struct buffer_head **bhp)
diff --git a/fs/gfs2/quota.h b/fs/gfs2/quota.h
index 18b95400a23a..9331d76ac9f0 100644
--- a/fs/gfs2/quota.h
+++ b/fs/gfs2/quota.h
@@ -18,27 +18,27 @@ struct gfs2_sbd;
 #define NO_UID_QUOTA_CHANGE INVALID_UID
 #define NO_GID_QUOTA_CHANGE INVALID_GID
 
-extern int gfs2_qa_get(struct gfs2_inode *ip);
-extern void gfs2_qa_put(struct gfs2_inode *ip);
-extern int gfs2_quota_hold(struct gfs2_inode *ip, kuid_t uid, kgid_t gid);
-extern void gfs2_quota_unhold(struct gfs2_inode *ip);
+int gfs2_qa_get(struct gfs2_inode *ip);
+void gfs2_qa_put(struct gfs2_inode *ip);
+int gfs2_quota_hold(struct gfs2_inode *ip, kuid_t uid, kgid_t gid);
+void gfs2_quota_unhold(struct gfs2_inode *ip);
 
-extern int gfs2_quota_lock(struct gfs2_inode *ip, kuid_t uid, kgid_t gid);
-extern void gfs2_quota_unlock(struct gfs2_inode *ip);
+int gfs2_quota_lock(struct gfs2_inode *ip, kuid_t uid, kgid_t gid);
+void gfs2_quota_unlock(struct gfs2_inode *ip);
 
-extern int gfs2_quota_check(struct gfs2_inode *ip, kuid_t uid, kgid_t gid,
-			    struct gfs2_alloc_parms *ap);
-extern void gfs2_quota_change(struct gfs2_inode *ip, s64 change,
-			      kuid_t uid, kgid_t gid);
+int gfs2_quota_check(struct gfs2_inode *ip, kuid_t uid, kgid_t gid,
+		     struct gfs2_alloc_parms *ap);
+void gfs2_quota_change(struct gfs2_inode *ip, s64 change,
+		       kuid_t uid, kgid_t gid);
 
-extern int gfs2_quota_sync(struct super_block *sb, int type);
-extern int gfs2_quota_refresh(struct gfs2_sbd *sdp, struct kqid qid);
+int gfs2_quota_sync(struct super_block *sb, int type);
+int gfs2_quota_refresh(struct gfs2_sbd *sdp, struct kqid qid);
 
-extern int gfs2_quota_init(struct gfs2_sbd *sdp);
-extern void gfs2_quota_cleanup(struct gfs2_sbd *sdp);
-extern int gfs2_quotad(void *data);
+int gfs2_quota_init(struct gfs2_sbd *sdp);
+void gfs2_quota_cleanup(struct gfs2_sbd *sdp);
+int gfs2_quotad(void *data);
 
-extern void gfs2_wake_up_statfs(struct gfs2_sbd *sdp);
+void gfs2_wake_up_statfs(struct gfs2_sbd *sdp);
 
 static inline int gfs2_quota_lock_check(struct gfs2_inode *ip,
 					struct gfs2_alloc_parms *ap)
@@ -64,6 +64,7 @@ static inline int gfs2_quota_lock_check(struct gfs2_inode *ip,
 extern const struct quotactl_ops gfs2_quotactl_ops;
 extern struct shrinker gfs2_qd_shrinker;
 extern struct list_lru gfs2_qd_lru;
-extern void __init gfs2_quota_hash_init(void);
+
+void __init gfs2_quota_hash_init(void);
 
 #endif /* __QUOTA_DOT_H__ */
diff --git a/fs/gfs2/recovery.h b/fs/gfs2/recovery.h
index 1831a1974c8c..458ff3979c67 100644
--- a/fs/gfs2/recovery.h
+++ b/fs/gfs2/recovery.h
@@ -20,18 +20,18 @@ static inline void gfs2_replay_incr_blk(struct gfs2_jdesc *jd, u32 *blk)
 	        *blk = 0;
 }
 
-extern int gfs2_replay_read_block(struct gfs2_jdesc *jd, unsigned int blk,
+int gfs2_replay_read_block(struct gfs2_jdesc *jd, unsigned int blk,
 			   struct buffer_head **bh);
 
-extern int gfs2_revoke_add(struct gfs2_jdesc *jd, u64 blkno, unsigned int where);
-extern int gfs2_revoke_check(struct gfs2_jdesc *jd, u64 blkno, unsigned int where);
-extern void gfs2_revoke_clean(struct gfs2_jdesc *jd);
+int gfs2_revoke_add(struct gfs2_jdesc *jd, u64 blkno, unsigned int where);
+int gfs2_revoke_check(struct gfs2_jdesc *jd, u64 blkno, unsigned int where);
+void gfs2_revoke_clean(struct gfs2_jdesc *jd);
 
-extern int gfs2_recover_journal(struct gfs2_jdesc *gfs2_jd, bool wait);
-extern void gfs2_recover_func(struct work_struct *work);
-extern int __get_log_header(struct gfs2_sbd *sdp,
-			    const struct gfs2_log_header *lh, unsigned int blkno,
-			    struct gfs2_log_header_host *head);
+int gfs2_recover_journal(struct gfs2_jdesc *gfs2_jd, bool wait);
+void gfs2_recover_func(struct work_struct *work);
+int __get_log_header(struct gfs2_sbd *sdp,
+		     const struct gfs2_log_header *lh, unsigned int blkno,
+		     struct gfs2_log_header_host *head);
 
 #endif /* __RECOVERY_DOT_H__ */
 
* Unmerged path fs/gfs2/rgrp.h
* Unmerged path fs/gfs2/super.c
* Unmerged path fs/gfs2/super.h
diff --git a/fs/gfs2/trans.h b/fs/gfs2/trans.h
index 360e0010de2c..17072a5329bb 100644
--- a/fs/gfs2/trans.h
+++ b/fs/gfs2/trans.h
@@ -37,17 +37,17 @@ static inline unsigned int gfs2_rg_blocks(const struct gfs2_inode *ip, unsigned
 	return rgd->rd_length;
 }
 
-extern int __gfs2_trans_begin(struct gfs2_trans *tr, struct gfs2_sbd *sdp,
-			      unsigned int blocks, unsigned int revokes,
-			      unsigned long ip);
-extern int gfs2_trans_begin(struct gfs2_sbd *sdp, unsigned int blocks,
-			    unsigned int revokes);
-
-extern void gfs2_trans_end(struct gfs2_sbd *sdp);
-extern void gfs2_trans_add_data(struct gfs2_glock *gl, struct buffer_head *bh);
-extern void gfs2_trans_add_meta(struct gfs2_glock *gl, struct buffer_head *bh);
-extern void gfs2_trans_add_revoke(struct gfs2_sbd *sdp, struct gfs2_bufdata *bd);
-extern void gfs2_trans_remove_revoke(struct gfs2_sbd *sdp, u64 blkno, unsigned int len);
-extern void gfs2_trans_free(struct gfs2_sbd *sdp, struct gfs2_trans *tr);
+int __gfs2_trans_begin(struct gfs2_trans *tr, struct gfs2_sbd *sdp,
+		       unsigned int blocks, unsigned int revokes,
+		       unsigned long ip);
+int gfs2_trans_begin(struct gfs2_sbd *sdp, unsigned int blocks,
+		     unsigned int revokes);
+
+void gfs2_trans_end(struct gfs2_sbd *sdp);
+void gfs2_trans_add_data(struct gfs2_glock *gl, struct buffer_head *bh);
+void gfs2_trans_add_meta(struct gfs2_glock *gl, struct buffer_head *bh);
+void gfs2_trans_add_revoke(struct gfs2_sbd *sdp, struct gfs2_bufdata *bd);
+void gfs2_trans_remove_revoke(struct gfs2_sbd *sdp, u64 blkno, unsigned int len);
+void gfs2_trans_free(struct gfs2_sbd *sdp, struct gfs2_trans *tr);
 
 #endif /* __TRANS_DOT_H__ */
diff --git a/fs/gfs2/util.h b/fs/gfs2/util.h
index 4d64fe579248..19dc20d94f10 100644
--- a/fs/gfs2/util.h
+++ b/fs/gfs2/util.h
@@ -150,10 +150,10 @@ static inline void gfs2_metatype_set(struct buffer_head *bh, u16 type,
 int gfs2_io_error_i(struct gfs2_sbd *sdp, const char *function,
 		    char *file, unsigned int line);
 
-extern int check_journal_clean(struct gfs2_sbd *sdp, struct gfs2_jdesc *jd,
-			       bool verbose);
-extern int gfs2_freeze_lock_shared(struct gfs2_sbd *sdp);
-extern void gfs2_freeze_unlock(struct gfs2_holder *freeze_gh);
+int check_journal_clean(struct gfs2_sbd *sdp, struct gfs2_jdesc *jd,
+		        bool verbose);
+int gfs2_freeze_lock_shared(struct gfs2_sbd *sdp);
+void gfs2_freeze_unlock(struct gfs2_holder *freeze_gh);
 
 #define gfs2_io_error(sdp) \
 gfs2_io_error_i((sdp), __func__, __FILE__, __LINE__);
diff --git a/fs/gfs2/xattr.h b/fs/gfs2/xattr.h
index 2d887c88eb49..9744a67db282 100644
--- a/fs/gfs2/xattr.h
+++ b/fs/gfs2/xattr.h
@@ -53,14 +53,14 @@ struct gfs2_ea_location {
 	struct gfs2_ea_header *el_prev;
 };
 
-extern int __gfs2_xattr_set(struct inode *inode, const char *name,
-			    const void *value, size_t size,
-			    int flags, int type);
-extern ssize_t gfs2_listxattr(struct dentry *dentry, char *buffer, size_t size);
-extern int gfs2_ea_dealloc(struct gfs2_inode *ip);
+int __gfs2_xattr_set(struct inode *inode, const char *name,
+		     const void *value, size_t size,
+		     int flags, int type);
+ssize_t gfs2_listxattr(struct dentry *dentry, char *buffer, size_t size);
+int gfs2_ea_dealloc(struct gfs2_inode *ip);
 
 /* Exported to acl.c */
 
-extern int gfs2_xattr_acl_get(struct gfs2_inode *ip, const char *name, char **data);
+int gfs2_xattr_acl_get(struct gfs2_inode *ip, const char *name, char **data);
 
 #endif /* __EATTR_DOT_H__ */
