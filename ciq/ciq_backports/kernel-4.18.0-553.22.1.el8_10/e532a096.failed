net: usb: asix: ax88772: add phylib support

jira LE-1907
cve CVE-2021-47101
Rebuild_History Non-Buildable kernel-4.18.0-553.22.1.el8_10
commit-author Oleksij Rempel <o.rempel@pengutronix.de>
commit e532a096be0e5e570b383e71d4560e7f04384e0f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-553.22.1.el8_10/e532a096.failed

To be able to use ax88772 with external PHYs and use advantage of
existing PHY drivers, we need to port at least ax88772 part of asix
driver to the phylib framework.

	Signed-off-by: Oleksij Rempel <o.rempel@pengutronix.de>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit e532a096be0e5e570b383e71d4560e7f04384e0f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/usb/asix_devices.c
#	drivers/net/usb/ax88172a.c
diff --cc drivers/net/usb/asix_devices.c
index 47f9233efb5d,e4cd85e38edd..000000000000
--- a/drivers/net/usb/asix_devices.c
+++ b/drivers/net/usb/asix_devices.c
@@@ -305,34 -293,11 +305,17 @@@ static const struct ethtool_ops ax88772
  	.get_eeprom_len		= asix_get_eeprom_len,
  	.get_eeprom		= asix_get_eeprom,
  	.set_eeprom		= asix_set_eeprom,
++<<<<<<< HEAD
 +	.nway_reset		= usbnet_nway_reset,
 +	.get_link_ksettings	= usbnet_get_link_ksettings,
 +	.set_link_ksettings	= usbnet_set_link_ksettings,
++=======
+ 	.nway_reset		= phy_ethtool_nway_reset,
+ 	.get_link_ksettings	= phy_ethtool_get_link_ksettings,
+ 	.set_link_ksettings	= phy_ethtool_set_link_ksettings,
++>>>>>>> e532a096be0e (net: usb: asix: ax88772: add phylib support)
  };
  
- static int ax88772_link_reset(struct usbnet *dev)
- {
- 	u16 mode;
- 	struct ethtool_cmd ecmd = { .cmd = ETHTOOL_GSET };
- 
- 	mii_check_media(&dev->mii, 1, 1);
- 	mii_ethtool_gset(&dev->mii, &ecmd);
- 	mode = AX88772_MEDIUM_DEFAULT;
- 
- 	if (ethtool_cmd_speed(&ecmd) != SPEED_100)
- 		mode &= ~AX_MEDIUM_PS;
- 
- 	if (ecmd.duplex != DUPLEX_FULL)
- 		mode &= ~AX_MEDIUM_FD;
- 
- 	netdev_dbg(dev->net, "ax88772_link_reset() speed: %u duplex: %d setting mode to 0x%04x\n",
- 		   ethtool_cmd_speed(&ecmd), ecmd.duplex, mode);
- 
- 	asix_write_medium_mode(dev, mode, 0);
- 
- 	return 0;
- }
- 
  static int ax88772_reset(struct usbnet *dev)
  {
  	struct asix_data *data = (struct asix_data *)&dev->data;
@@@ -595,10 -563,10 +581,10 @@@ static const struct net_device_ops ax88
  	.ndo_start_xmit		= usbnet_start_xmit,
  	.ndo_tx_timeout		= usbnet_tx_timeout,
  	.ndo_change_mtu		= usbnet_change_mtu,
 -	.ndo_get_stats64	= dev_get_tstats64,
 +	.ndo_get_stats64	= usbnet_get_stats64,
  	.ndo_set_mac_address 	= asix_set_mac_address,
  	.ndo_validate_addr	= eth_validate_addr,
- 	.ndo_do_ioctl		= asix_ioctl,
+ 	.ndo_do_ioctl		= phy_do_ioctl_running,
  	.ndo_set_rx_mode        = asix_set_multicast,
  };
  
@@@ -785,8 -804,10 +822,11 @@@ static int ax88772_stop(struct usbnet *
  
  static void ax88772_unbind(struct usbnet *dev, struct usb_interface *intf)
  {
+ 	struct asix_common_private *priv = dev->driver_priv;
+ 
+ 	phy_disconnect(priv->phydev);
  	asix_rx_fixup_common_free(dev->driver_priv);
 +	kfree(dev->driver_priv);
  }
  
  static const struct ethtool_ops ax88178_ethtool_ops = {
diff --cc drivers/net/usb/ax88172a.c
index 77f30a89968c,2e2081346740..000000000000
--- a/drivers/net/usb/ax88172a.c
+++ b/drivers/net/usb/ax88172a.c
@@@ -37,31 -25,6 +37,34 @@@ struct ax88172a_private 
  	struct asix_rx_fixup_info rx_fixup_info;
  };
  
++<<<<<<< HEAD
 +/* MDIO read and write wrappers for phylib */
 +static int asix_mdio_bus_read(struct mii_bus *bus, int phy_id, int regnum)
 +{
 +	return asix_mdio_read(((struct usbnet *)bus->priv)->net, phy_id,
 +			      regnum);
 +}
 +
 +static int asix_mdio_bus_write(struct mii_bus *bus, int phy_id, int regnum,
 +			       u16 val)
 +{
 +	asix_mdio_write(((struct usbnet *)bus->priv)->net, phy_id, regnum, val);
 +	return 0;
 +}
 +
 +static int ax88172a_ioctl(struct net_device *net, struct ifreq *rq, int cmd)
 +{
 +	if (!netif_running(net))
 +		return -EINVAL;
 +
 +	if (!net->phydev)
 +		return -ENODEV;
 +
 +	return phy_mii_ioctl(net->phydev, rq, cmd);
 +}
 +
++=======
++>>>>>>> e532a096be0e (net: usb: asix: ax88772: add phylib support)
  /* set MAC link settings according to information from phylib */
  static void ax88172a_adjust_link(struct net_device *netdev)
  {
diff --git a/drivers/net/usb/asix.h b/drivers/net/usb/asix.h
index a337c5c1945f..8a991ebbf022 100644
--- a/drivers/net/usb/asix.h
+++ b/drivers/net/usb/asix.h
@@ -37,6 +37,7 @@
 #include <linux/usb/usbnet.h>
 #include <linux/slab.h>
 #include <linux/if_vlan.h>
+#include <linux/phy.h>
 
 #define DRIVER_VERSION "22-Dec-2011"
 #define DRIVER_NAME "asix"
@@ -190,6 +191,10 @@ struct asix_common_private {
 	u16 presvd_phy_advertise;
 	u16 presvd_phy_bmcr;
 	struct asix_rx_fixup_info rx_fixup_info;
+	struct mii_bus *mdio;
+	struct phy_device *phydev;
+	u16 phy_addr;
+	char phy_name[20];
 };
 
 extern const struct driver_info ax88172a_info;
@@ -226,6 +231,7 @@ int asix_write_rx_ctl(struct usbnet *dev, u16 mode, int in_pm);
 
 u16 asix_read_medium_status(struct usbnet *dev, int in_pm);
 int asix_write_medium_mode(struct usbnet *dev, u16 mode, int in_pm);
+void asix_adjust_link(struct net_device *netdev);
 
 int asix_write_gpio(struct usbnet *dev, u16 value, int sleep, int in_pm);
 
@@ -234,6 +240,9 @@ void asix_set_multicast(struct net_device *net);
 int asix_mdio_read(struct net_device *netdev, int phy_id, int loc);
 void asix_mdio_write(struct net_device *netdev, int phy_id, int loc, int val);
 
+int asix_mdio_bus_read(struct mii_bus *bus, int phy_id, int regnum);
+int asix_mdio_bus_write(struct mii_bus *bus, int phy_id, int regnum, u16 val);
+
 int asix_mdio_read_nopm(struct net_device *netdev, int phy_id, int loc);
 void asix_mdio_write_nopm(struct net_device *netdev, int phy_id, int loc,
 			  int val);
diff --git a/drivers/net/usb/asix_common.c b/drivers/net/usb/asix_common.c
index 113993e61ac8..e70d73b4ce49 100644
--- a/drivers/net/usb/asix_common.c
+++ b/drivers/net/usb/asix_common.c
@@ -396,6 +396,27 @@ int asix_write_medium_mode(struct usbnet *dev, u16 mode, int in_pm)
 	return ret;
 }
 
+/* set MAC link settings according to information from phylib */
+void asix_adjust_link(struct net_device *netdev)
+{
+	struct phy_device *phydev = netdev->phydev;
+	struct usbnet *dev = netdev_priv(netdev);
+	u16 mode = 0;
+
+	if (phydev->link) {
+		mode = AX88772_MEDIUM_DEFAULT;
+
+		if (phydev->duplex == DUPLEX_HALF)
+			mode &= ~AX_MEDIUM_FD;
+
+		if (phydev->speed != SPEED_100)
+			mode &= ~AX_MEDIUM_PS;
+	}
+
+	asix_write_medium_mode(dev, mode, 0);
+	phy_print_status(phydev);
+}
+
 int asix_write_gpio(struct usbnet *dev, u16 value, int sleep, int in_pm)
 {
 	int ret;
@@ -518,6 +539,22 @@ void asix_mdio_write(struct net_device *netdev, int phy_id, int loc, int val)
 	mutex_unlock(&dev->phy_mutex);
 }
 
+/* MDIO read and write wrappers for phylib */
+int asix_mdio_bus_read(struct mii_bus *bus, int phy_id, int regnum)
+{
+	struct usbnet *priv = bus->priv;
+
+	return asix_mdio_read(priv->net, phy_id, regnum);
+}
+
+int asix_mdio_bus_write(struct mii_bus *bus, int phy_id, int regnum, u16 val)
+{
+	struct usbnet *priv = bus->priv;
+
+	asix_mdio_write(priv->net, phy_id, regnum, val);
+	return 0;
+}
+
 int asix_mdio_read_nopm(struct net_device *netdev, int phy_id, int loc)
 {
 	struct usbnet *dev = netdev_priv(netdev);
* Unmerged path drivers/net/usb/asix_devices.c
* Unmerged path drivers/net/usb/ax88172a.c
