media: cec: core: disable adapter in cec_devnode_unregister

jira LE-1907
cve CVE-2024-23848
Rebuild_History Non-Buildable kernel-4.18.0-553.22.1.el8_10
commit-author Hans Verkuil <hverkuil-cisco@xs4all.nl>
commit fe4526d99e2e06b08bb80316c3a596ea6a807b75
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-553.22.1.el8_10/fe4526d9.failed

Explicitly disable the CEC adapter in cec_devnode_unregister()

Usually this does not really do anything important, but for drivers
that use the CEC pin framework this is needed to properly stop the
hrtimer. Without this a crash would happen when such a driver is
unloaded with rmmod.

	Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
	Signed-off-by: Mauro Carvalho Chehab <mchehab@kernel.org>
(cherry picked from commit fe4526d99e2e06b08bb80316c3a596ea6a807b75)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/media/cec/core/cec-adap.c
diff --cc drivers/media/cec/core/cec-adap.c
index 3df3142eba9f,be0c38969479..000000000000
--- a/drivers/media/cec/core/cec-adap.c
+++ b/drivers/media/cec/core/cec-adap.c
@@@ -1580,6 -1580,63 +1580,66 @@@ static void cec_claim_log_addrs(struct 
  	}
  }
  
++<<<<<<< HEAD
++=======
+ /*
+  * Helper function to enable/disable the CEC adapter.
+  *
+  * This function is called with adap->lock held.
+  */
+ int cec_adap_enable(struct cec_adapter *adap)
+ {
+ 	bool enable;
+ 	int ret = 0;
+ 
+ 	enable = adap->monitor_all_cnt || adap->monitor_pin_cnt ||
+ 		 adap->log_addrs.num_log_addrs;
+ 	if (adap->needs_hpd)
+ 		enable = enable && adap->phys_addr != CEC_PHYS_ADDR_INVALID;
+ 
+ 	if (adap->devnode.unregistered)
+ 		enable = false;
+ 
+ 	if (enable == adap->is_enabled)
+ 		return 0;
+ 
+ 	/* serialize adap_enable */
+ 	mutex_lock(&adap->devnode.lock);
+ 	if (enable) {
+ 		adap->last_initiator = 0xff;
+ 		adap->transmit_in_progress = false;
+ 		ret = adap->ops->adap_enable(adap, true);
+ 		if (!ret) {
+ 			/*
+ 			 * Enable monitor-all/pin modes if needed. We warn, but
+ 			 * continue if this fails as this is not a critical error.
+ 			 */
+ 			if (adap->monitor_all_cnt)
+ 				WARN_ON(call_op(adap, adap_monitor_all_enable, true));
+ 			if (adap->monitor_pin_cnt)
+ 				WARN_ON(call_op(adap, adap_monitor_pin_enable, true));
+ 		}
+ 	} else {
+ 		/* Disable monitor-all/pin modes if needed (needs_hpd == 1) */
+ 		if (adap->monitor_all_cnt)
+ 			WARN_ON(call_op(adap, adap_monitor_all_enable, false));
+ 		if (adap->monitor_pin_cnt)
+ 			WARN_ON(call_op(adap, adap_monitor_pin_enable, false));
+ 		WARN_ON(adap->ops->adap_enable(adap, false));
+ 		adap->last_initiator = 0xff;
+ 		adap->transmit_in_progress = false;
+ 		adap->transmit_in_progress_aborted = false;
+ 		if (adap->transmitting)
+ 			cec_data_cancel(adap->transmitting, CEC_TX_STATUS_ABORTED, 0);
+ 	}
+ 	if (!ret)
+ 		adap->is_enabled = enable;
+ 	wake_up_interruptible(&adap->kthread_waitq);
+ 	mutex_unlock(&adap->devnode.lock);
+ 	return ret;
+ }
+ 
++>>>>>>> fe4526d99e2e (media: cec: core: disable adapter in cec_devnode_unregister)
  /* Set a new physical address and send an event notifying userspace of this.
   *
   * This function is called with adap->lock held.
* Unmerged path drivers/media/cec/core/cec-adap.c
diff --git a/drivers/media/cec/core/cec-core.c b/drivers/media/cec/core/cec-core.c
index e24aacf6b54d..63d6a0414ab4 100644
--- a/drivers/media/cec/core/cec-core.c
+++ b/drivers/media/cec/core/cec-core.c
@@ -177,6 +177,8 @@ static void cec_devnode_unregister(struct cec_adapter *adap)
 	mutex_lock(&adap->lock);
 	__cec_s_phys_addr(adap, CEC_PHYS_ADDR_INVALID, false);
 	__cec_s_log_addrs(adap, NULL, false);
+	// Disable the adapter (since adap->devnode.unregistered is true)
+	cec_adap_enable(adap);
 	mutex_unlock(&adap->lock);
 
 	cdev_device_del(&devnode->cdev, &devnode->dev);
diff --git a/drivers/media/cec/core/cec-priv.h b/drivers/media/cec/core/cec-priv.h
index 7bdf855aaecd..c9a48880dc71 100644
--- a/drivers/media/cec/core/cec-priv.h
+++ b/drivers/media/cec/core/cec-priv.h
@@ -37,6 +37,7 @@ int cec_monitor_pin_cnt_inc(struct cec_adapter *adap);
 void cec_monitor_pin_cnt_dec(struct cec_adapter *adap);
 int cec_adap_status(struct seq_file *file, void *priv);
 int cec_thread_func(void *_adap);
+int cec_adap_enable(struct cec_adapter *adap);
 void __cec_s_phys_addr(struct cec_adapter *adap, u16 phys_addr, bool block);
 int __cec_s_log_addrs(struct cec_adapter *adap,
 		      struct cec_log_addrs *log_addrs, bool block);
