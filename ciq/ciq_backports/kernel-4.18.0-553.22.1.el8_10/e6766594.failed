net: usb: asix: Fix less than zero comparison of a u16

jira LE-1907
cve CVE-2021-47101
Rebuild_History Non-Buildable kernel-4.18.0-553.22.1.el8_10
commit-author Colin Ian King <colin.king@canonical.com>
commit e67665946599abe0ae8d454ceb6bad4b1d1d6189
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-553.22.1.el8_10/e6766594.failed

The comparison of the u16 priv->phy_addr < 0 is always false because
phy_addr is unsigned. Fix this by assigning the return from the call
to function asix_read_phy_addr to int ret and using this for the
less than zero error check comparison.

Addresses-Coverity: ("Unsigned compared against 0")
Fixes: e532a096be0e ("net: usb: asix: ax88772: add phylib support")
	Signed-off-by: Colin Ian King <colin.king@canonical.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit e67665946599abe0ae8d454ceb6bad4b1d1d6189)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/usb/asix_devices.c
diff --cc drivers/net/usb/asix_devices.c
index 47f9233efb5d,8a477171e8f5..000000000000
--- a/drivers/net/usb/asix_devices.c
+++ b/drivers/net/usb/asix_devices.c
@@@ -689,12 -680,59 +689,62 @@@ static int asix_resume(struct usb_inter
  	return usbnet_resume(intf);
  }
  
++<<<<<<< HEAD
++=======
+ static int ax88772_init_mdio(struct usbnet *dev)
+ {
+ 	struct asix_common_private *priv = dev->driver_priv;
+ 
+ 	priv->mdio = devm_mdiobus_alloc(&dev->udev->dev);
+ 	if (!priv->mdio)
+ 		return -ENOMEM;
+ 
+ 	priv->mdio->priv = dev;
+ 	priv->mdio->read = &asix_mdio_bus_read;
+ 	priv->mdio->write = &asix_mdio_bus_write;
+ 	priv->mdio->name = "Asix MDIO Bus";
+ 	/* mii bus name is usb-<usb bus number>-<usb device number> */
+ 	snprintf(priv->mdio->id, MII_BUS_ID_SIZE, "usb-%03d:%03d",
+ 		 dev->udev->bus->busnum, dev->udev->devnum);
+ 
+ 	return devm_mdiobus_register(&dev->udev->dev, priv->mdio);
+ }
+ 
+ static int ax88772_init_phy(struct usbnet *dev)
+ {
+ 	struct asix_common_private *priv = dev->driver_priv;
+ 	int ret;
+ 
+ 	ret = asix_read_phy_addr(dev, true);
+ 	if (ret < 0)
+ 		return ret;
+ 
+ 	priv->phy_addr = ret;
+ 
+ 	snprintf(priv->phy_name, sizeof(priv->phy_name), PHY_ID_FMT,
+ 		 priv->mdio->id, priv->phy_addr);
+ 
+ 	priv->phydev = phy_connect(dev->net, priv->phy_name, &asix_adjust_link,
+ 				   PHY_INTERFACE_MODE_INTERNAL);
+ 	if (IS_ERR(priv->phydev)) {
+ 		netdev_err(dev->net, "Could not connect to PHY device %s\n",
+ 			   priv->phy_name);
+ 		ret = PTR_ERR(priv->phydev);
+ 		return ret;
+ 	}
+ 
+ 	phy_attached_info(priv->phydev);
+ 
+ 	return 0;
+ }
+ 
++>>>>>>> e67665946599 (net: usb: asix: Fix less than zero comparison of a u16)
  static int ax88772_bind(struct usbnet *dev, struct usb_interface *intf)
  {
 -	u8 buf[ETH_ALEN] = {0}, chipcode = 0;
 -	struct asix_common_private *priv;
  	int ret, i;
 +	u8 buf[ETH_ALEN] = {0}, chipcode = 0;
  	u32 phyid;
 +	struct asix_common_private *priv;
  
  	usbnet_get_endpoints(dev, intf);
  
* Unmerged path drivers/net/usb/asix_devices.c
