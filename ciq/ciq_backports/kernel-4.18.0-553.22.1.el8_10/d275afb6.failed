net: usb: asix: add error handling for asix_mdio_* functions

jira LE-1907
cve CVE-2021-47101
Rebuild_History Non-Buildable kernel-4.18.0-553.22.1.el8_10
commit-author Oleksij Rempel <o.rempel@pengutronix.de>
commit d275afb663717db99c4749f0ec5e11463642fee6
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-553.22.1.el8_10/d275afb6.failed

This usb devices can be removed at any time, so we need to forward
correct error value if device was detached.

	Signed-off-by: Oleksij Rempel <o.rempel@pengutronix.de>
	Reviewed-by: Andrew Lunn <andrew@lunn.ch>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit d275afb663717db99c4749f0ec5e11463642fee6)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/usb/asix_common.c
diff --cc drivers/net/usb/asix_common.c
index 113993e61ac8,ac92bc52a85e..000000000000
--- a/drivers/net/usb/asix_common.c
+++ b/drivers/net/usb/asix_common.c
@@@ -507,17 -521,42 +512,45 @@@ static int __asix_mdio_write(struct net
  		ret = asix_read_cmd(dev, AX_CMD_STATMNGSTS_REG,
  				    0, 0, 1, &smsr, 0);
  	} while (!(smsr & AX_HOST_EN) && (i++ < 30) && (ret != -ENODEV));
- 	if (ret == -ENODEV) {
- 		mutex_unlock(&dev->phy_mutex);
- 		return;
- 	}
  
- 	asix_write_cmd(dev, AX_CMD_WRITE_MII_REG, phy_id,
- 		       (__u16)loc, 2, &res, 0);
- 	asix_set_hw_mii(dev, 0);
+ 	if (ret == -ENODEV)
+ 		goto out;
+ 
+ 	ret = asix_write_cmd(dev, AX_CMD_WRITE_MII_REG, phy_id, (__u16)loc, 2,
+ 			     &res, 0);
+ 	if (ret < 0)
+ 		goto out;
+ 
+ 	ret = asix_set_hw_mii(dev, 0);
+ out:
  	mutex_unlock(&dev->phy_mutex);
+ 
+ 	return ret < 0 ? ret : 0;
+ }
+ 
+ void asix_mdio_write(struct net_device *netdev, int phy_id, int loc, int val)
+ {
+ 	__asix_mdio_write(netdev, phy_id, loc, val);
+ }
+ 
++<<<<<<< HEAD
++=======
+ /* MDIO read and write wrappers for phylib */
+ int asix_mdio_bus_read(struct mii_bus *bus, int phy_id, int regnum)
+ {
+ 	struct usbnet *priv = bus->priv;
+ 
+ 	return asix_mdio_read(priv->net, phy_id, regnum);
+ }
+ 
+ int asix_mdio_bus_write(struct mii_bus *bus, int phy_id, int regnum, u16 val)
+ {
+ 	struct usbnet *priv = bus->priv;
+ 
+ 	return __asix_mdio_write(priv->net, phy_id, regnum, val);
  }
  
++>>>>>>> d275afb66371 (net: usb: asix: add error handling for asix_mdio_* functions)
  int asix_mdio_read_nopm(struct net_device *netdev, int phy_id, int loc)
  {
  	struct usbnet *dev = netdev_priv(netdev);
* Unmerged path drivers/net/usb/asix_common.c
