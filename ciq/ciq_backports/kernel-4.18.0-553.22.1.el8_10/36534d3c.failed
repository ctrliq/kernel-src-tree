tcp: use signed arithmetic in tcp_rtx_probe0_timed_out()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-553.22.1.el8_10
commit-author Eric Dumazet <edumazet@google.com>
commit 36534d3c54537bf098224a32dc31397793d4594d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-553.22.1.el8_10/36534d3c.failed

Due to timer wheel implementation, a timer will usually fire
after its schedule.

For instance, for HZ=1000, a timeout between 512ms and 4s
has a granularity of 64ms.
For this range of values, the extra delay could be up to 63ms.

For TCP, this means that tp->rcv_tstamp may be after
inet_csk(sk)->icsk_timeout whenever the timer interrupt
finally triggers, if one packet came during the extra delay.

We need to make sure tcp_rtx_probe0_timed_out() handles this case.

Fixes: e89688e3e978 ("net: tcp: fix unexcepted socket die when snd_wnd is 0")
	Signed-off-by: Eric Dumazet <edumazet@google.com>
	Cc: Menglong Dong <imagedong@tencent.com>
	Acked-by: Neal Cardwell <ncardwell@google.com>
	Reviewed-by: Jason Xing <kerneljasonxing@gmail.com>
Link: https://lore.kernel.org/r/20240607125652.1472540-1-edumazet@google.com
	Signed-off-by: Jakub Kicinski <kuba@kernel.org>
(cherry picked from commit 36534d3c54537bf098224a32dc31397793d4594d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/ipv4/tcp_timer.c
diff --cc net/ipv4/tcp_timer.c
index c8ceb32ca8de,5bfd76a31af6..000000000000
--- a/net/ipv4/tcp_timer.c
+++ b/net/ipv4/tcp_timer.c
@@@ -424,8 -485,12 +424,16 @@@ static bool tcp_rtx_probe0_timed_out(co
  {
  	const struct tcp_sock *tp = tcp_sk(sk);
  	const int timeout = TCP_RTO_MAX * 2;
++<<<<<<< HEAD
 +	u32 rcv_delta, rtx_delta;
++=======
+ 	s32 rcv_delta;
++>>>>>>> 36534d3c5453 (tcp: use signed arithmetic in tcp_rtx_probe0_timed_out())
  
+ 	/* Note: timer interrupt might have been delayed by at least one jiffy,
+ 	 * and tp->rcv_tstamp might very well have been written recently.
+ 	 * rcv_delta can thus be negative.
+ 	 */
  	rcv_delta = inet_csk(sk)->icsk_timeout - tp->rcv_tstamp;
  	if (rcv_delta <= timeout)
  		return false;
* Unmerged path net/ipv4/tcp_timer.c
