media: cec: add optional adap_configured callback

jira LE-1907
cve CVE-2024-23848
Rebuild_History Non-Buildable kernel-4.18.0-553.22.1.el8_10
commit-author Hans Verkuil <hverkuil-cisco@xs4all.nl>
commit f1b57164305d6342b9f77a4f4482cde492b56983
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-553.22.1.el8_10/f1b57164.failed

This new optional callback is called when the adapter is fully configured
or fully unconfigured. Some drivers may have to take action when this
happens.

	Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
	Signed-off-by: Mauro Carvalho Chehab <mchehab@kernel.org>
(cherry picked from commit f1b57164305d6342b9f77a4f4482cde492b56983)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	Documentation/media/kapi/cec-core.rst
diff --cc Documentation/media/kapi/cec-core.rst
index 1d989c544370,ae0d20798edc..000000000000
--- a/Documentation/media/kapi/cec-core.rst
+++ b/Documentation/media/kapi/cec-core.rst
@@@ -175,9 -179,18 +176,23 @@@ can receive directed messages to that a
  Note that adap_log_addr must return 0 if logical_addr is CEC_LOG_ADDR_INVALID.
  
  
++<<<<<<< HEAD:Documentation/media/kapi/cec-core.rst
 +To transmit a new message:
++=======
+ Called when the adapter is fully configured or unconfigured::
+ 
+ 	void (*adap_configured)(struct cec_adapter *adap, bool configured);
+ 
+ If configured == true, then the adapter is fully configured, i.e. all logical
+ addresses have been successfully claimed. If configured == false, then the
+ adapter is unconfigured. If the driver has to take specific actions after
+ (un)configuration, then that can be done through this optional callback.
+ 
+ 
+ To transmit a new message::
++>>>>>>> f1b57164305d (media: cec: add optional adap_configured callback):Documentation/driver-api/media/cec-core.rst
  
 +.. c:function::
  	int (*adap_transmit)(struct cec_adapter *adap, u8 attempts,
  			     u32 signal_free_time, struct cec_msg *msg);
  
* Unmerged path Documentation/media/kapi/cec-core.rst
diff --git a/drivers/media/cec/core/cec-adap.c b/drivers/media/cec/core/cec-adap.c
index e0e9d4808c3d..b8d579329c9e 100644
--- a/drivers/media/cec/core/cec-adap.c
+++ b/drivers/media/cec/core/cec-adap.c
@@ -1339,6 +1339,7 @@ static void cec_adap_unconfigure(struct cec_adapter *adap)
 	cec_flush(adap);
 	wake_up_interruptible(&adap->kthread_waitq);
 	cec_post_state_event(adap);
+	call_void_op(adap, adap_configured, false);
 }
 
 /*
@@ -1520,6 +1521,7 @@ static int cec_config_thread_func(void *arg)
 	adap->kthread_config = NULL;
 	complete(&adap->config_completion);
 	mutex_unlock(&adap->lock);
+	call_void_op(adap, adap_configured, true);
 	return 0;
 
 unconfigure:
diff --git a/include/media/cec.h b/include/media/cec.h
index 03e01c17f6ec..631bffa1261a 100644
--- a/include/media/cec.h
+++ b/include/media/cec.h
@@ -111,6 +111,7 @@ struct cec_adap_ops {
 	int (*adap_monitor_all_enable)(struct cec_adapter *adap, bool enable);
 	int (*adap_monitor_pin_enable)(struct cec_adapter *adap, bool enable);
 	int (*adap_log_addr)(struct cec_adapter *adap, u8 logical_addr);
+	void (*adap_configured)(struct cec_adapter *adap, bool configured);
 	int (*adap_transmit)(struct cec_adapter *adap, u8 attempts,
 			     u32 signal_free_time, struct cec_msg *msg);
 	void (*adap_status)(struct cec_adapter *adap, struct seq_file *file);
