netfilter: flowtable: remove nf_ct_l4proto_find() call

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-553.22.1.el8_10
commit-author Pablo Neira Ayuso <pablo@netfilter.org>
commit 92fb15513edc6ae1eb51f717e70d4d3d538c2d09
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-553.22.1.el8_10/92fb1551.failed

TCP and UDP are built-in conntrack protocol trackers and the flowtable
only supports for TCP and UDP, remove this call.

	Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
(cherry picked from commit 92fb15513edc6ae1eb51f717e70d4d3d538c2d09)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/netfilter/nf_flow_table_core.c
diff --cc net/netfilter/nf_flow_table_core.c
index e6627c149f7c,ec3dd1c9c8f4..000000000000
--- a/net/netfilter/nf_flow_table_core.c
+++ b/net/netfilter/nf_flow_table_core.c
@@@ -129,17 -178,12 +129,19 @@@ static void flow_offload_fixup_tcp(stru
  	tcp->seen[1].td_maxwin = 0;
  }
  
 -static void flow_offload_fixup_ct_timeout(struct nf_conn *ct)
 +static void flow_offload_fixup_ct(struct nf_conn *ct)
  {
- 	const struct nf_conntrack_l4proto *l4proto;
  	struct net *net = nf_ct_net(ct);
  	int l4num = nf_ct_protonum(ct);
 -	unsigned int timeout;
 +	s32 timeout;
 +
++<<<<<<< HEAD
 +	l4proto = __nf_ct_l4proto_find(l4num);
 +	if (!l4proto)
 +		return;
  
++=======
++>>>>>>> 92fb15513edc (netfilter: flowtable: remove nf_ct_l4proto_find() call)
  	if (l4num == IPPROTO_TCP) {
  		struct nf_tcp_net *tn = nf_tcp_pernet(net);
  
@@@ -227,14 -272,14 +228,17 @@@ unsigned long flow_offload_get_timeout(
  	struct net *net = nf_ct_net(flow->ct);
  	int l4num = nf_ct_protonum(flow->ct);
  
 -	if (l4num == IPPROTO_TCP) {
 -		struct nf_tcp_net *tn = nf_tcp_pernet(net);
++<<<<<<< HEAD
 +	l4proto = __nf_ct_l4proto_find(l4num);
 +	if (!l4proto)
 +		return timeout;
  
 -		timeout = tn->offload_timeout;
++=======
++>>>>>>> 92fb15513edc (netfilter: flowtable: remove nf_ct_l4proto_find() call)
 +	if (l4num == IPPROTO_TCP) {
 +		timeout = net->nf_tcp_net_offload_timeout;
  	} else if (l4num == IPPROTO_UDP) {
 -		struct nf_udp_net *tn = nf_udp_pernet(net);
 -
 -		timeout = tn->offload_timeout;
 +		timeout = net->nf_udp_net_offload_timeout;
  	}
  
  	return timeout;
* Unmerged path net/netfilter/nf_flow_table_core.c
