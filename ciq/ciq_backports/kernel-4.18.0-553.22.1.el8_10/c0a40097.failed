drivers: core: synchronize really_probe() and dev_uevent()

jira LE-1907
cve CVE-2024-39501
Rebuild_History Non-Buildable kernel-4.18.0-553.22.1.el8_10
commit-author Dirk Behme <dirk.behme@de.bosch.com>
commit c0a40097f0bc81deafc15f9195d1fb54595cd6d0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-553.22.1.el8_10/c0a40097.failed

Synchronize the dev->driver usage in really_probe() and dev_uevent().
These can run in different threads, what can result in the following
race condition for dev->driver uninitialization:

Thread #1:
==========

really_probe() {
...
probe_failed:
...
device_unbind_cleanup(dev) {
    ...
    dev->driver = NULL;   // <= Failed probe sets dev->driver to NULL
    ...
    }
...
}

Thread #2:
==========

dev_uevent() {
...
if (dev->driver)
      // If dev->driver is NULLed from really_probe() from here on,
      // after above check, the system crashes
      add_uevent_var(env, "DRIVER=%s", dev->driver->name);
...
}

really_probe() holds the lock, already. So nothing needs to be done
there. dev_uevent() is called with lock held, often, too. But not
always. What implies that we can't add any locking in dev_uevent()
itself. So fix this race by adding the lock to the non-protected
path. This is the path where above race is observed:

 dev_uevent+0x235/0x380
 uevent_show+0x10c/0x1f0  <= Add lock here
 dev_attr_show+0x3a/0xa0
 sysfs_kf_seq_show+0x17c/0x250
 kernfs_seq_show+0x7c/0x90
 seq_read_iter+0x2d7/0x940
 kernfs_fop_read_iter+0xc6/0x310
 vfs_read+0x5bc/0x6b0
 ksys_read+0xeb/0x1b0
 __x64_sys_read+0x42/0x50
 x64_sys_call+0x27ad/0x2d30
 do_syscall_64+0xcd/0x1d0
 entry_SYSCALL_64_after_hwframe+0x77/0x7f

Similar cases are reported by syzkaller in

https://syzkaller.appspot.com/bug?extid=ffa8143439596313a85a

But these are regarding the *initialization* of dev->driver

dev->driver = drv;

As this switches dev->driver to non-NULL these reports can be considered
to be false-positives (which should be "fixed" by this commit, as well,
though).

The same issue was reported and tried to be fixed back in 2015 in

https://lore.kernel.org/lkml/1421259054-2574-1-git-send-email-a.sangwan@samsung.com/

already.

Fixes: 239378f16aa1 ("Driver core: add uevent vars for devices of a class")
	Cc: stable <stable@kernel.org>
	Cc: syzbot+ffa8143439596313a85a@syzkaller.appspotmail.com
	Cc: Ashish Sangwan <a.sangwan@samsung.com>
	Cc: Namjae Jeon <namjae.jeon@samsung.com>
	Signed-off-by: Dirk Behme <dirk.behme@de.bosch.com>
Link: https://lore.kernel.org/r/20240513050634.3964461-1-dirk.behme@de.bosch.com
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit c0a40097f0bc81deafc15f9195d1fb54595cd6d0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/base/core.c
diff --cc drivers/base/core.c
index 8e38bafd0ef1,2b4c0624b704..000000000000
--- a/drivers/base/core.c
+++ b/drivers/base/core.c
@@@ -2572,8 -2739,11 +2572,15 @@@ static ssize_t uevent_show(struct devic
  	if (!env)
  		return -ENOMEM;
  
+ 	/* Synchronize with really_probe() */
+ 	device_lock(dev);
  	/* let the kset specific function add its keys */
++<<<<<<< HEAD
 +	retval = kset->uevent_ops->uevent(kset, &dev->kobj, env);
++=======
+ 	retval = kset->uevent_ops->uevent(&dev->kobj, env);
+ 	device_unlock(dev);
++>>>>>>> c0a40097f0bc (drivers: core: synchronize really_probe() and dev_uevent())
  	if (retval)
  		goto out;
  
* Unmerged path drivers/base/core.c
