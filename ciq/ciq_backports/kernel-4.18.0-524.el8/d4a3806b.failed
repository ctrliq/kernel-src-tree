dm integrity: fix double free on memory allocation failure

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-524.el8
commit-author Mikulas Patocka <mpatocka@redhat.com>
commit d4a3806bea61c8ef6e0103d0f39786e00586522e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-524.el8/d4a3806b.failed

If the statement "recalc_tags = kvmalloc(recalc_tags_size, GFP_NOIO);"
fails, we call "vfree(recalc_buffer)" and we jump to the label "oom".

If the condition "recalc_sectors >= 1U << ic->sb->log2_sectors_per_block"
is false, we jump to the label "free_ret" and call "vfree(recalc_buffer)"
again, on an already released memory block.

Fix the bug by setting "recalc_buffer = NULL" after freeing it.

Fixes: da8b4fc1f63a ("dm integrity: only allocate recalculate buffer when needed")
	Signed-off-by: Mikulas Patocka <mpatocka@redhat.com>
	Signed-off-by: Mike Snitzer <snitzer@kernel.org>
(cherry picked from commit d4a3806bea61c8ef6e0103d0f39786e00586522e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/md/dm-integrity.c
diff --cc drivers/md/dm-integrity.c
index e5a0e84241c9,97a8d5fc9ebb..000000000000
--- a/drivers/md/dm-integrity.c
+++ b/drivers/md/dm-integrity.c
@@@ -2622,12 -2652,33 +2622,37 @@@ static void integrity_recalc(struct wor
  	struct dm_io_region io_loc;
  	sector_t area, offset;
  	sector_t metadata_block;
 -	unsigned int metadata_offset;
 +	unsigned metadata_offset;
  	sector_t logical_sector, n_sectors;
  	__u8 *t;
 -	unsigned int i;
 +	unsigned i;
  	int r;
++<<<<<<< HEAD
 +	unsigned super_counter = 0;
++=======
+ 	unsigned int super_counter = 0;
+ 	unsigned recalc_sectors = RECALC_SECTORS;
+ 
+ retry:
+ 	recalc_buffer = __vmalloc(recalc_sectors << SECTOR_SHIFT, GFP_NOIO);
+ 	if (!recalc_buffer) {
+ oom:
+ 		recalc_sectors >>= 1;
+ 		if (recalc_sectors >= 1U << ic->sb->log2_sectors_per_block)
+ 			goto retry;
+ 		DMCRIT("out of memory for recalculate buffer - recalculation disabled");
+ 		goto free_ret;
+ 	}
+ 	recalc_tags_size = (recalc_sectors >> ic->sb->log2_sectors_per_block) * ic->tag_size;
+ 	if (crypto_shash_digestsize(ic->internal_hash) > ic->tag_size)
+ 		recalc_tags_size += crypto_shash_digestsize(ic->internal_hash) - ic->tag_size;
+ 	recalc_tags = kvmalloc(recalc_tags_size, GFP_NOIO);
+ 	if (!recalc_tags) {
+ 		vfree(recalc_buffer);
+ 		recalc_buffer = NULL;
+ 		goto oom;
+ 	}
++>>>>>>> d4a3806bea61 (dm integrity: fix double free on memory allocation failure)
  
  	DEBUG_print("start recalculation... (position %llx)\n", le64_to_cpu(ic->sb->recalc_sector));
  
* Unmerged path drivers/md/dm-integrity.c
