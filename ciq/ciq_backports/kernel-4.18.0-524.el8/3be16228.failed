dm integrity: scale down the recalculate buffer if memory allocation fails

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-524.el8
commit-author Mikulas Patocka <mpatocka@redhat.com>
commit 3be1622895af25101f7046ed0b2286bead2219d4
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-524.el8/3be16228.failed

If memory allocation fails, try to reduce the size of the recalculate
buffer and continue with that smaller buffer.

	Signed-off-by: Mikulas Patocka <mpatocka@redhat.com>
	Signed-off-by: Mike Snitzer <snitzer@kernel.org>
(cherry picked from commit 3be1622895af25101f7046ed0b2286bead2219d4)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/md/dm-integrity.c
diff --cc drivers/md/dm-integrity.c
index e5a0e84241c9,5ca3fc62e8f3..000000000000
--- a/drivers/md/dm-integrity.c
+++ b/drivers/md/dm-integrity.c
@@@ -2622,12 -2652,32 +2622,36 @@@ static void integrity_recalc(struct wor
  	struct dm_io_region io_loc;
  	sector_t area, offset;
  	sector_t metadata_block;
 -	unsigned int metadata_offset;
 +	unsigned metadata_offset;
  	sector_t logical_sector, n_sectors;
  	__u8 *t;
 -	unsigned int i;
 +	unsigned i;
  	int r;
++<<<<<<< HEAD
 +	unsigned super_counter = 0;
++=======
+ 	unsigned int super_counter = 0;
+ 	unsigned recalc_sectors = RECALC_SECTORS;
+ 
+ retry:
+ 	recalc_buffer = __vmalloc(recalc_sectors << SECTOR_SHIFT, GFP_NOIO);
+ 	if (!recalc_buffer) {
+ oom:
+ 		recalc_sectors >>= 1;
+ 		if (recalc_sectors >= 1U << ic->sb->log2_sectors_per_block)
+ 			goto retry;
+ 		DMCRIT("out of memory for recalculate buffer - recalculation disabled");
+ 		goto free_ret;
+ 	}
+ 	recalc_tags_size = (recalc_sectors >> ic->sb->log2_sectors_per_block) * ic->tag_size;
+ 	if (crypto_shash_digestsize(ic->internal_hash) > ic->tag_size)
+ 		recalc_tags_size += crypto_shash_digestsize(ic->internal_hash) - ic->tag_size;
+ 	recalc_tags = kvmalloc(recalc_tags_size, GFP_NOIO);
+ 	if (!recalc_tags) {
+ 		vfree(recalc_buffer);
+ 		goto oom;
+ 	}
++>>>>>>> 3be1622895af (dm integrity: scale down the recalculate buffer if memory allocation fails)
  
  	DEBUG_print("start recalculation... (position %llx)\n", le64_to_cpu(ic->sb->recalc_sector));
  
@@@ -2649,9 -2699,9 +2673,9 @@@ next_chunk
  	}
  
  	get_area_and_offset(ic, range.logical_sector, &area, &offset);
- 	range.n_sectors = min((sector_t)RECALC_SECTORS, ic->provided_data_sectors - range.logical_sector);
+ 	range.n_sectors = min((sector_t)recalc_sectors, ic->provided_data_sectors - range.logical_sector);
  	if (!ic->meta_dev)
 -		range.n_sectors = min(range.n_sectors, ((sector_t)1U << ic->sb->log2_interleave_sectors) - (unsigned int)offset);
 +		range.n_sectors = min(range.n_sectors, ((sector_t)1U << ic->sb->log2_interleave_sectors) - (unsigned)offset);
  
  	add_new_range_and_wait(ic, &range);
  	spin_unlock_irq(&ic->endio_wait.lock);
* Unmerged path drivers/md/dm-integrity.c
