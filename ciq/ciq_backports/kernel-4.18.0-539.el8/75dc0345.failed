xfs: fix xfs_btree_query_range callers to initialize btree rec fully

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-539.el8
commit-author Darrick J. Wong <djwong@kernel.org>
commit 75dc0345312221971903b2e28279b7e24b7dbb1b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-539.el8/75dc0345.failed

Use struct initializers to ensure that the xfs_btree_irecs passed into
the query_range function are completely initialized.  No functional
changes, just closing some sloppy hygiene.

	Signed-off-by: Darrick J. Wong <djwong@kernel.org>
	Reviewed-by: Dave Chinner <dchinner@redhat.com>
(cherry picked from commit 75dc0345312221971903b2e28279b7e24b7dbb1b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/xfs/libxfs/xfs_refcount.c
diff --cc fs/xfs/libxfs/xfs_refcount.c
index e13109e87225,646b3fa362ad..000000000000
--- a/fs/xfs/libxfs/xfs_refcount.c
+++ b/fs/xfs/libxfs/xfs_refcount.c
@@@ -1796,13 -1921,19 +1796,18 @@@ xfs_refcount_recover_cow_leftovers
  	struct xfs_buf			*agbp;
  	struct xfs_refcount_recovery	*rr, *n;
  	struct list_head		debris;
- 	union xfs_btree_irec		low;
- 	union xfs_btree_irec		high;
+ 	union xfs_btree_irec		low = {
+ 		.rc.rc_domain		= XFS_REFC_DOMAIN_COW,
+ 	};
+ 	union xfs_btree_irec		high = {
+ 		.rc.rc_domain		= XFS_REFC_DOMAIN_COW,
+ 		.rc.rc_startblock	= -1U,
+ 	};
  	xfs_fsblock_t			fsb;
 +	xfs_agblock_t			agbno;
  	int				error;
  
 -	/* reflink filesystems mustn't have AGs larger than 2^31-1 blocks */
 -	BUILD_BUG_ON(XFS_MAX_CRC_AG_BLOCKS >= XFS_REFC_COWFLAG);
 -	if (mp->m_sb.sb_agblocks > XFS_MAX_CRC_AG_BLOCKS)
 +	if (mp->m_sb.sb_agblocks >= XFS_REFC_COW_START)
  		return -EOPNOTSUPP;
  
  	INIT_LIST_HEAD(&debris);
@@@ -1827,10 -1958,6 +1832,13 @@@
  	cur = xfs_refcountbt_init_cursor(mp, tp, agbp, pag);
  
  	/* Find all the leftover CoW staging extents. */
++<<<<<<< HEAD
 +	memset(&low, 0, sizeof(low));
 +	memset(&high, 0, sizeof(high));
 +	low.rc.rc_startblock = XFS_REFC_COW_START;
 +	high.rc.rc_startblock = -1U;
++=======
++>>>>>>> 75dc03453122 (xfs: fix xfs_btree_query_range callers to initialize btree rec fully)
  	error = xfs_btree_query_range(cur, &low, &high,
  			xfs_refcount_recover_extent, &debris);
  	xfs_btree_del_cursor(cur, error);
diff --git a/fs/xfs/libxfs/xfs_alloc.c b/fs/xfs/libxfs/xfs_alloc.c
index b934df0ec264..70ac66f3747f 100644
--- a/fs/xfs/libxfs/xfs_alloc.c
+++ b/fs/xfs/libxfs/xfs_alloc.c
@@ -3475,15 +3475,11 @@ xfs_alloc_query_range(
 	xfs_alloc_query_range_fn		fn,
 	void					*priv)
 {
-	union xfs_btree_irec			low_brec;
-	union xfs_btree_irec			high_brec;
-	struct xfs_alloc_query_range_info	query;
+	union xfs_btree_irec			low_brec = { .a = *low_rec };
+	union xfs_btree_irec			high_brec = { .a = *high_rec };
+	struct xfs_alloc_query_range_info	query = { .priv = priv, .fn = fn };
 
 	ASSERT(cur->bc_btnum == XFS_BTNUM_BNO);
-	low_brec.a = *low_rec;
-	high_brec.a = *high_rec;
-	query.priv = priv;
-	query.fn = fn;
 	return xfs_btree_query_range(cur, &low_brec, &high_brec,
 			xfs_alloc_query_range_helper, &query);
 }
* Unmerged path fs/xfs/libxfs/xfs_refcount.c
diff --git a/fs/xfs/libxfs/xfs_rmap.c b/fs/xfs/libxfs/xfs_rmap.c
index d1dfad0204e3..1e8eb270783f 100644
--- a/fs/xfs/libxfs/xfs_rmap.c
+++ b/fs/xfs/libxfs/xfs_rmap.c
@@ -2301,14 +2301,10 @@ xfs_rmap_query_range(
 	xfs_rmap_query_range_fn			fn,
 	void					*priv)
 {
-	union xfs_btree_irec			low_brec;
-	union xfs_btree_irec			high_brec;
-	struct xfs_rmap_query_range_info	query;
+	union xfs_btree_irec			low_brec = { .r = *low_rec };
+	union xfs_btree_irec			high_brec = { .r = *high_rec };
+	struct xfs_rmap_query_range_info	query = { .priv = priv, .fn = fn };
 
-	low_brec.r = *low_rec;
-	high_brec.r = *high_rec;
-	query.priv = priv;
-	query.fn = fn;
 	return xfs_btree_query_range(cur, &low_brec, &high_brec,
 			xfs_rmap_query_range_helper, &query);
 }
