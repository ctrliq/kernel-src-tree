mm: Add kvrealloc()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-539.el8
commit-author Dave Chinner <dchinner@redhat.com>
commit de2860f4636256836450c6543be744a50118fc66
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-539.el8/de2860f4.failed

During log recovery of an XFS filesystem with 64kB directory
buffers, rebuilding a buffer split across two log records results
in a memory allocation warning from krealloc like this:

xfs filesystem being mounted at /mnt/scratch supports timestamps until 2038 (0x7fffffff)
XFS (dm-0): Unmounting Filesystem
XFS (dm-0): Mounting V5 Filesystem
XFS (dm-0): Starting recovery (logdev: internal)
------------[ cut here ]------------
WARNING: CPU: 5 PID: 3435170 at mm/page_alloc.c:3539 get_page_from_freelist+0xdee/0xe40
.....
RIP: 0010:get_page_from_freelist+0xdee/0xe40
Call Trace:
 ? complete+0x3f/0x50
 __alloc_pages+0x16f/0x300
 alloc_pages+0x87/0x110
 kmalloc_order+0x2c/0x90
 kmalloc_order_trace+0x1d/0x90
 __kmalloc_track_caller+0x215/0x270
 ? xlog_recover_add_to_cont_trans+0x63/0x1f0
 krealloc+0x54/0xb0
 xlog_recover_add_to_cont_trans+0x63/0x1f0
 xlog_recovery_process_trans+0xc1/0xd0
 xlog_recover_process_ophdr+0x86/0x130
 xlog_recover_process_data+0x9f/0x160
 xlog_recover_process+0xa2/0x120
 xlog_do_recovery_pass+0x40b/0x7d0
 ? __irq_work_queue_local+0x4f/0x60
 ? irq_work_queue+0x3a/0x50
 xlog_do_log_recovery+0x70/0x150
 xlog_do_recover+0x38/0x1d0
 xlog_recover+0xd8/0x170
 xfs_log_mount+0x181/0x300
 xfs_mountfs+0x4a1/0x9b0
 xfs_fs_fill_super+0x3c0/0x7b0
 get_tree_bdev+0x171/0x270
 ? suffix_kstrtoint.constprop.0+0xf0/0xf0
 xfs_fs_get_tree+0x15/0x20
 vfs_get_tree+0x24/0xc0
 path_mount+0x2f5/0xaf0
 __x64_sys_mount+0x108/0x140
 do_syscall_64+0x3a/0x70
 entry_SYSCALL_64_after_hwframe+0x44/0xae

Essentially, we are taking a multi-order allocation from kmem_alloc()
(which has an open coded no fail, no warn loop) and then
reallocating it out to 64kB using krealloc(__GFP_NOFAIL) and that is
then triggering the above warning.

This is a regression caused by converting this code from an open
coded no fail/no warn reallocation loop to using __GFP_NOFAIL.

What we actually need here is kvrealloc(), so that if contiguous
page allocation fails we fall back to vmalloc() and we don't
get nasty warnings happening in XFS.

Fixes: 771915c4f688 ("xfs: remove kmem_realloc()")
	Signed-off-by: Dave Chinner <dchinner@redhat.com>
	Acked-by: Mel Gorman <mgorman@techsingularity.net>
	Reviewed-by: Darrick J. Wong <djwong@kernel.org>
	Signed-off-by: Darrick J. Wong <djwong@kernel.org>
(cherry picked from commit de2860f4636256836450c6543be744a50118fc66)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/xfs/xfs_log_recover.c
#	include/linux/mm.h
diff --cc fs/xfs/xfs_log_recover.c
index 85a05f3f9842,cc3c2329c4e5..000000000000
--- a/fs/xfs/xfs_log_recover.c
+++ b/fs/xfs/xfs_log_recover.c
@@@ -2062,7 -2062,9 +2062,13 @@@ xlog_recover_add_to_cont_trans
  	old_ptr = item->ri_buf[item->ri_cnt-1].i_addr;
  	old_len = item->ri_buf[item->ri_cnt-1].i_len;
  
++<<<<<<< HEAD
 +	ptr = kmem_realloc(old_ptr, len + old_len, 0);
++=======
+ 	ptr = kvrealloc(old_ptr, old_len, len + old_len, GFP_KERNEL);
+ 	if (!ptr)
+ 		return -ENOMEM;
++>>>>>>> de2860f46362 (mm: Add kvrealloc())
  	memcpy(&ptr[old_len], dp, len);
  	item->ri_buf[item->ri_cnt-1].i_len += len;
  	item->ri_buf[item->ri_cnt-1].i_addr = ptr;
diff --cc include/linux/mm.h
index 5da57ff049b1,e59646a5d44d..000000000000
--- a/include/linux/mm.h
+++ b/include/linux/mm.h
@@@ -727,6 -800,50 +727,53 @@@ static inline int is_vmalloc_or_module_
  }
  #endif
  
++<<<<<<< HEAD
++=======
+ extern void *kvmalloc_node(size_t size, gfp_t flags, int node);
+ static inline void *kvmalloc(size_t size, gfp_t flags)
+ {
+ 	return kvmalloc_node(size, flags, NUMA_NO_NODE);
+ }
+ static inline void *kvzalloc_node(size_t size, gfp_t flags, int node)
+ {
+ 	return kvmalloc_node(size, flags | __GFP_ZERO, node);
+ }
+ static inline void *kvzalloc(size_t size, gfp_t flags)
+ {
+ 	return kvmalloc(size, flags | __GFP_ZERO);
+ }
+ 
+ static inline void *kvmalloc_array(size_t n, size_t size, gfp_t flags)
+ {
+ 	size_t bytes;
+ 
+ 	if (unlikely(check_mul_overflow(n, size, &bytes)))
+ 		return NULL;
+ 
+ 	return kvmalloc(bytes, flags);
+ }
+ 
+ static inline void *kvcalloc(size_t n, size_t size, gfp_t flags)
+ {
+ 	return kvmalloc_array(n, size, flags | __GFP_ZERO);
+ }
+ 
+ extern void *kvrealloc(const void *p, size_t oldsize, size_t newsize,
+ 		gfp_t flags);
+ extern void kvfree(const void *addr);
+ extern void kvfree_sensitive(const void *addr, size_t len);
+ 
+ static inline int head_compound_mapcount(struct page *head)
+ {
+ 	return atomic_read(compound_mapcount_ptr(head)) + 1;
+ }
+ 
+ /*
+  * Mapcount of compound page as a whole, does not include mapped sub-pages.
+  *
+  * Must be called only for compound pages or any their tail sub-pages.
+  */
++>>>>>>> de2860f46362 (mm: Add kvrealloc())
  static inline int compound_mapcount(struct page *page)
  {
  	VM_BUG_ON_PAGE(!PageCompound(page), page);
* Unmerged path fs/xfs/xfs_log_recover.c
* Unmerged path include/linux/mm.h
diff --git a/mm/util.c b/mm/util.c
index 25a73d6985a6..ef07408e50cf 100644
--- a/mm/util.c
+++ b/mm/util.c
@@ -518,6 +518,21 @@ void kvfree_sensitive(const void *addr, size_t len)
 }
 EXPORT_SYMBOL(kvfree_sensitive);
 
+void *kvrealloc(const void *p, size_t oldsize, size_t newsize, gfp_t flags)
+{
+	void *newp;
+
+	if (oldsize >= newsize)
+		return (void *)p;
+	newp = kvmalloc(newsize, flags);
+	if (!newp)
+		return NULL;
+	memcpy(newp, p, oldsize);
+	kvfree(p);
+	return newp;
+}
+EXPORT_SYMBOL(kvrealloc);
+
 static inline void *__page_rmapping(struct page *page)
 {
 	unsigned long mapping;
