EDAC/amd64: Add support for AMD family 1Ah models 00h-1Fh and 40h-4Fh

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-539.el8
commit-author Avadhut Naik <Avadhut.Naik@amd.com>
commit c4d07c371283cb0453c8ce187551e4d064cc407e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-539.el8/c4d07c37.failed

Add support for family 1Ah-based models 00h-1Fh and 40h-4Fh.

  [ bp: Simplify. ]

	Signed-off-by: Avadhut Naik <Avadhut.Naik@amd.com>
	Signed-off-by: Borislav Petkov (AMD) <bp@alien8.de>
Link: https://lore.kernel.org/r/20230809035244.2722455-4-avadhut.naik@amd.com
(cherry picked from commit c4d07c371283cb0453c8ce187551e4d064cc407e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/edac/amd64_edac.c
diff --cc drivers/edac/amd64_edac.c
index 1b0d86d03cb5,9b6642d00871..000000000000
--- a/drivers/edac/amd64_edac.c
+++ b/drivers/edac/amd64_edac.c
@@@ -3558,6 -3982,204 +3558,207 @@@ static void hw_info_put(struct amd64_pv
  	kfree(pvt->umc);
  }
  
++<<<<<<< HEAD
++=======
+ static struct low_ops umc_ops = {
+ 	.hw_info_get			= umc_hw_info_get,
+ 	.ecc_enabled			= umc_ecc_enabled,
+ 	.setup_mci_misc_attrs		= umc_setup_mci_misc_attrs,
+ 	.dump_misc_regs			= umc_dump_misc_regs,
+ 	.get_err_info			= umc_get_err_info,
+ };
+ 
+ static struct low_ops gpu_ops = {
+ 	.hw_info_get			= gpu_hw_info_get,
+ 	.ecc_enabled			= gpu_ecc_enabled,
+ 	.setup_mci_misc_attrs		= gpu_setup_mci_misc_attrs,
+ 	.dump_misc_regs			= gpu_dump_misc_regs,
+ 	.get_err_info			= gpu_get_err_info,
+ };
+ 
+ /* Use Family 16h versions for defaults and adjust as needed below. */
+ static struct low_ops dct_ops = {
+ 	.map_sysaddr_to_csrow		= f1x_map_sysaddr_to_csrow,
+ 	.dbam_to_cs			= f16_dbam_to_chip_select,
+ 	.hw_info_get			= dct_hw_info_get,
+ 	.ecc_enabled			= dct_ecc_enabled,
+ 	.setup_mci_misc_attrs		= dct_setup_mci_misc_attrs,
+ 	.dump_misc_regs			= dct_dump_misc_regs,
+ };
+ 
+ static int per_family_init(struct amd64_pvt *pvt)
+ {
+ 	pvt->ext_model  = boot_cpu_data.x86_model >> 4;
+ 	pvt->stepping	= boot_cpu_data.x86_stepping;
+ 	pvt->model	= boot_cpu_data.x86_model;
+ 	pvt->fam	= boot_cpu_data.x86;
+ 	pvt->max_mcs	= 2;
+ 
+ 	/*
+ 	 * Decide on which ops group to use here and do any family/model
+ 	 * overrides below.
+ 	 */
+ 	if (pvt->fam >= 0x17)
+ 		pvt->ops = &umc_ops;
+ 	else
+ 		pvt->ops = &dct_ops;
+ 
+ 	switch (pvt->fam) {
+ 	case 0xf:
+ 		pvt->ctl_name				= (pvt->ext_model >= K8_REV_F) ?
+ 							  "K8 revF or later" : "K8 revE or earlier";
+ 		pvt->f1_id				= PCI_DEVICE_ID_AMD_K8_NB_ADDRMAP;
+ 		pvt->f2_id				= PCI_DEVICE_ID_AMD_K8_NB_MEMCTL;
+ 		pvt->ops->map_sysaddr_to_csrow		= k8_map_sysaddr_to_csrow;
+ 		pvt->ops->dbam_to_cs			= k8_dbam_to_chip_select;
+ 		break;
+ 
+ 	case 0x10:
+ 		pvt->ctl_name				= "F10h";
+ 		pvt->f1_id				= PCI_DEVICE_ID_AMD_10H_NB_MAP;
+ 		pvt->f2_id				= PCI_DEVICE_ID_AMD_10H_NB_DRAM;
+ 		pvt->ops->dbam_to_cs			= f10_dbam_to_chip_select;
+ 		break;
+ 
+ 	case 0x15:
+ 		switch (pvt->model) {
+ 		case 0x30:
+ 			pvt->ctl_name			= "F15h_M30h";
+ 			pvt->f1_id			= PCI_DEVICE_ID_AMD_15H_M30H_NB_F1;
+ 			pvt->f2_id			= PCI_DEVICE_ID_AMD_15H_M30H_NB_F2;
+ 			break;
+ 		case 0x60:
+ 			pvt->ctl_name			= "F15h_M60h";
+ 			pvt->f1_id			= PCI_DEVICE_ID_AMD_15H_M60H_NB_F1;
+ 			pvt->f2_id			= PCI_DEVICE_ID_AMD_15H_M60H_NB_F2;
+ 			pvt->ops->dbam_to_cs		= f15_m60h_dbam_to_chip_select;
+ 			break;
+ 		case 0x13:
+ 			/* Richland is only client */
+ 			return -ENODEV;
+ 		default:
+ 			pvt->ctl_name			= "F15h";
+ 			pvt->f1_id			= PCI_DEVICE_ID_AMD_15H_NB_F1;
+ 			pvt->f2_id			= PCI_DEVICE_ID_AMD_15H_NB_F2;
+ 			pvt->ops->dbam_to_cs		= f15_dbam_to_chip_select;
+ 			break;
+ 		}
+ 		break;
+ 
+ 	case 0x16:
+ 		switch (pvt->model) {
+ 		case 0x30:
+ 			pvt->ctl_name			= "F16h_M30h";
+ 			pvt->f1_id			= PCI_DEVICE_ID_AMD_16H_M30H_NB_F1;
+ 			pvt->f2_id			= PCI_DEVICE_ID_AMD_16H_M30H_NB_F2;
+ 			break;
+ 		default:
+ 			pvt->ctl_name			= "F16h";
+ 			pvt->f1_id			= PCI_DEVICE_ID_AMD_16H_NB_F1;
+ 			pvt->f2_id			= PCI_DEVICE_ID_AMD_16H_NB_F2;
+ 			break;
+ 		}
+ 		break;
+ 
+ 	case 0x17:
+ 		switch (pvt->model) {
+ 		case 0x10 ... 0x2f:
+ 			pvt->ctl_name			= "F17h_M10h";
+ 			break;
+ 		case 0x30 ... 0x3f:
+ 			pvt->ctl_name			= "F17h_M30h";
+ 			pvt->max_mcs			= 8;
+ 			break;
+ 		case 0x60 ... 0x6f:
+ 			pvt->ctl_name			= "F17h_M60h";
+ 			break;
+ 		case 0x70 ... 0x7f:
+ 			pvt->ctl_name			= "F17h_M70h";
+ 			break;
+ 		default:
+ 			pvt->ctl_name			= "F17h";
+ 			break;
+ 		}
+ 		break;
+ 
+ 	case 0x18:
+ 		pvt->ctl_name				= "F18h";
+ 		break;
+ 
+ 	case 0x19:
+ 		switch (pvt->model) {
+ 		case 0x00 ... 0x0f:
+ 			pvt->ctl_name			= "F19h";
+ 			pvt->max_mcs			= 8;
+ 			break;
+ 		case 0x10 ... 0x1f:
+ 			pvt->ctl_name			= "F19h_M10h";
+ 			pvt->max_mcs			= 12;
+ 			pvt->flags.zn_regs_v2		= 1;
+ 			break;
+ 		case 0x20 ... 0x2f:
+ 			pvt->ctl_name			= "F19h_M20h";
+ 			break;
+ 		case 0x30 ... 0x3f:
+ 			if (pvt->F3->device == PCI_DEVICE_ID_AMD_MI200_DF_F3) {
+ 				pvt->ctl_name		= "MI200";
+ 				pvt->max_mcs		= 4;
+ 				pvt->ops		= &gpu_ops;
+ 			} else {
+ 				pvt->ctl_name		= "F19h_M30h";
+ 				pvt->max_mcs		= 8;
+ 			}
+ 			break;
+ 		case 0x50 ... 0x5f:
+ 			pvt->ctl_name			= "F19h_M50h";
+ 			break;
+ 		case 0x60 ... 0x6f:
+ 			pvt->ctl_name			= "F19h_M60h";
+ 			pvt->flags.zn_regs_v2		= 1;
+ 			break;
+ 		case 0x70 ... 0x7f:
+ 			pvt->ctl_name			= "F19h_M70h";
+ 			pvt->flags.zn_regs_v2		= 1;
+ 			break;
+ 		case 0xa0 ... 0xaf:
+ 			pvt->ctl_name			= "F19h_MA0h";
+ 			pvt->max_mcs			= 12;
+ 			pvt->flags.zn_regs_v2		= 1;
+ 			break;
+ 		}
+ 		break;
+ 
+ 	case 0x1A:
+ 		switch (pvt->model) {
+ 		case 0x00 ... 0x1f:
+ 			pvt->ctl_name           = "F1Ah";
+ 			pvt->max_mcs            = 12;
+ 			pvt->flags.zn_regs_v2   = 1;
+ 			break;
+ 		case 0x40 ... 0x4f:
+ 			pvt->ctl_name           = "F1Ah_M40h";
+ 			pvt->flags.zn_regs_v2   = 1;
+ 			break;
+ 		}
+ 		break;
+ 
+ 	default:
+ 		amd64_err("Unsupported family!\n");
+ 		return -ENODEV;
+ 	}
+ 
+ 	return 0;
+ }
+ 
+ static const struct attribute_group *amd64_edac_attr_groups[] = {
+ #ifdef CONFIG_EDAC_DEBUG
+ 	&dbg_group,
+ 	&inj_group,
+ #endif
+ 	NULL
+ };
+ 
++>>>>>>> c4d07c371283 (EDAC/amd64: Add support for AMD family 1Ah models 00h-1Fh and 40h-4Fh)
  static int init_one_instance(struct amd64_pvt *pvt)
  {
  	struct mem_ctl_info *mci = NULL;
@@@ -3747,7 -4356,9 +3948,8 @@@ static const struct x86_cpu_id amd64_cp
  	X86_MATCH_VENDOR_FAM(AMD,	0x15, NULL),
  	X86_MATCH_VENDOR_FAM(AMD,	0x16, NULL),
  	X86_MATCH_VENDOR_FAM(AMD,	0x17, NULL),
 -	X86_MATCH_VENDOR_FAM(HYGON,	0x18, NULL),
  	X86_MATCH_VENDOR_FAM(AMD,	0x19, NULL),
+ 	X86_MATCH_VENDOR_FAM(AMD,	0x1A, NULL),
  	{ }
  };
  MODULE_DEVICE_TABLE(x86cpu, amd64_cpuids);
* Unmerged path drivers/edac/amd64_edac.c
