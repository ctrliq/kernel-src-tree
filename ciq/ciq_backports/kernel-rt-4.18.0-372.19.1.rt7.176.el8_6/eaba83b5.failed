scsi: core: Fix sbitmap depth in scsi_realloc_sdev_budget_map()

jira LE-1907
Rebuild_History Non-Buildable kernel-rt-4.18.0-372.19.1.rt7.176.el8_6
commit-author John Garry <john.garry@huawei.com>
commit eaba83b5b8506bbc9ee7ca2f10aeab3fff3719e7
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-rt-4.18.0-372.19.1.rt7.176.el8_6/eaba83b5.failed

In commit edb854a3680b ("scsi: core: Reallocate device's budget map on
queue depth change"), the sbitmap for the device budget map may be
reallocated after the slave device depth is configured.

When the sbitmap is reallocated we use the result from
scsi_device_max_queue_depth() for the sbitmap size, but don't resize to
match the actual device queue depth.

Fix by resizing the sbitmap after reallocating the budget sbitmap. We do
this instead of init'ing the sbitmap to the device queue depth as the user
may want to change the queue depth later via sysfs or other.

Link: https://lore.kernel.org/r/1647423870-143867-1-git-send-email-john.garry@huawei.com
Fixes: edb854a3680b ("scsi: core: Reallocate device's budget map on queue depth change")
	Tested-by: Damien Le Moal <damien.lemoal@opensource.wdc.com>
	Reviewed-by: Ming Lei <ming.lei@redhat.com>
	Reviewed-by: Bart Van Assche <bvanassche@acm.org>
	Signed-off-by: John Garry <john.garry@huawei.com>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit eaba83b5b8506bbc9ee7ca2f10aeab3fff3719e7)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/scsi_scan.c
diff --cc drivers/scsi/scsi_scan.c
index ea61a7307034,2ef78083f1ef..000000000000
--- a/drivers/scsi/scsi_scan.c
+++ b/drivers/scsi/scsi_scan.c
@@@ -198,6 -214,53 +198,56 @@@ static void scsi_unlock_floptical(struc
  			 SCSI_TIMEOUT, 3, NULL);
  }
  
++<<<<<<< HEAD
++=======
+ static int scsi_realloc_sdev_budget_map(struct scsi_device *sdev,
+ 					unsigned int depth)
+ {
+ 	int new_shift = sbitmap_calculate_shift(depth);
+ 	bool need_alloc = !sdev->budget_map.map;
+ 	bool need_free = false;
+ 	int ret;
+ 	struct sbitmap sb_backup;
+ 
+ 	depth = min_t(unsigned int, depth, scsi_device_max_queue_depth(sdev));
+ 
+ 	/*
+ 	 * realloc if new shift is calculated, which is caused by setting
+ 	 * up one new default queue depth after calling ->slave_configure
+ 	 */
+ 	if (!need_alloc && new_shift != sdev->budget_map.shift)
+ 		need_alloc = need_free = true;
+ 
+ 	if (!need_alloc)
+ 		return 0;
+ 
+ 	/*
+ 	 * Request queue has to be frozen for reallocating budget map,
+ 	 * and here disk isn't added yet, so freezing is pretty fast
+ 	 */
+ 	if (need_free) {
+ 		blk_mq_freeze_queue(sdev->request_queue);
+ 		sb_backup = sdev->budget_map;
+ 	}
+ 	ret = sbitmap_init_node(&sdev->budget_map,
+ 				scsi_device_max_queue_depth(sdev),
+ 				new_shift, GFP_KERNEL,
+ 				sdev->request_queue->node, false, true);
+ 	if (!ret)
+ 		sbitmap_resize(&sdev->budget_map, depth);
+ 
+ 	if (need_free) {
+ 		if (ret)
+ 			sdev->budget_map = sb_backup;
+ 		else
+ 			sbitmap_free(&sb_backup);
+ 		ret = 0;
+ 		blk_mq_unfreeze_queue(sdev->request_queue);
+ 	}
+ 	return ret;
+ }
+ 
++>>>>>>> eaba83b5b850 (scsi: core: Fix sbitmap depth in scsi_realloc_sdev_budget_map())
  /**
   * scsi_alloc_sdev - allocate and setup a scsi_Device
   * @starget: which target to allocate a &scsi_device for
* Unmerged path drivers/scsi/scsi_scan.c
