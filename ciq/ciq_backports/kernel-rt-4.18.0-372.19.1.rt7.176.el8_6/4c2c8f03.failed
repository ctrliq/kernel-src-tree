tcp: increase source port perturb table to 2^16

jira LE-1907
cve CVE-2022-1012
Rebuild_History Non-Buildable kernel-rt-4.18.0-372.19.1.rt7.176.el8_6
commit-author Willy Tarreau <w@1wt.eu>
commit 4c2c8f03a5ab7cb04ec64724d7d176d00bcc91e5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-rt-4.18.0-372.19.1.rt7.176.el8_6/4c2c8f03.failed

Moshe Kol, Amit Klein, and Yossi Gilad reported being able to accurately
identify a client by forcing it to emit only 40 times more connections
than there are entries in the table_perturb[] table. The previous two
improvements consisting in resalting the secret every 10s and adding
randomness to each port selection only slightly improved the situation,
and the current value of 2^8 was too small as it's not very difficult
to make a client emit 10k connections in less than 10 seconds.

Thus we're increasing the perturb table from 2^8 to 2^16 so that the
same precision now requires 2.6M connections, which is more difficult in
this time frame and harder to hide as a background activity. The impact
is that the table now uses 256 kB instead of 1 kB, which could mostly
affect devices making frequent outgoing connections. However such
components usually target a small set of destinations (load balancers,
database clients, perf assessment tools), and in practice only a few
entries will be visited, like before.

A live test at 1 million connections per second showed no performance
difference from the previous value.

	Reported-by: Moshe Kol <moshe.kol@mail.huji.ac.il>
	Reported-by: Yossi Gilad <yossi.gilad@mail.huji.ac.il>
	Reported-by: Amit Klein <aksecurity@gmail.com>
	Reviewed-by: Eric Dumazet <edumazet@google.com>
	Signed-off-by: Willy Tarreau <w@1wt.eu>
	Signed-off-by: Jakub Kicinski <kuba@kernel.org>
(cherry picked from commit 4c2c8f03a5ab7cb04ec64724d7d176d00bcc91e5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/ipv4/inet_hashtables.c
diff --cc net/ipv4/inet_hashtables.c
index 392bd467440e,cc5f66328b47..000000000000
--- a/net/ipv4/inet_hashtables.c
+++ b/net/ipv4/inet_hashtables.c
@@@ -766,12 -726,14 +766,19 @@@ EXPORT_SYMBOL_GPL(inet_unhash)
   * Note that we use 32bit integers (vs RFC 'short integers')
   * because 2^16 is not a multiple of num_ephemeral and this
   * property might be used by clever attacker.
-  * RFC claims using TABLE_LENGTH=10 buckets gives an improvement,
-  * we use 256 instead to really give more isolation and
-  * privacy, this only consumes 1 KB of kernel memory.
+  * RFC claims using TABLE_LENGTH=10 buckets gives an improvement, though
+  * attacks were since demonstrated, thus we use 65536 instead to really
+  * give more isolation and privacy, at the expense of 256kB of kernel
+  * memory.
   */
++<<<<<<< HEAD
 +#define INET_TABLE_PERTURB_SHIFT 8
 +static u32 table_perturb[1 << INET_TABLE_PERTURB_SHIFT];
++=======
+ #define INET_TABLE_PERTURB_SHIFT 16
+ #define INET_TABLE_PERTURB_SIZE (1 << INET_TABLE_PERTURB_SHIFT)
+ static u32 *table_perturb;
++>>>>>>> 4c2c8f03a5ab (tcp: increase source port perturb table to 2^16)
  
  int __inet_hash_connect(struct inet_timewait_death_row *death_row,
  		struct sock *sk, u64 port_offset,
* Unmerged path net/ipv4/inet_hashtables.c
