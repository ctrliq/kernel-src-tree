s390/pci: Ignore RID for isolated VFs

jira LE-3201
Rebuild_History Non-Buildable kernel-rt-4.18.0-553.40.1.rt7.381.el8_10
commit-author Niklas Schnelle <schnelle@linux.ibm.com>
commit 25f39d3dcb48bbc824a77d16b3d977f0f3713cfe
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-rt-4.18.0-553.40.1.rt7.381.el8_10/25f39d3d.failed

Ensure that VFs used in isolation, that is with their parent PF not
visible to the configuration but with their RID exposed, are treated
compatibly with existing isolated VF use cases without exposed RID
including RoCE Express VFs. This allows creating configurations where
one LPAR manages PFs while their child VFs are used by other LPARs. This
gives the LPAR managing the PFs a role analogous to that of the
hypervisor in a typical use case of passing child VFs to guests.

Instead of creating a multifunction struct zpci_bus whenever a PCI
function with RID exposed is discovered only create such a bus for
configured physical functions and only consider multifunction busses
when searching for an existing bus. Additionally only set zdev->devfn to
the devfn part of the RID once the function is added to a multifunction
bus.

This also fixes probing of more than 7 such isolated VFs from the same
physical bus. This is because common PCI code in pci_scan_slot() only
looks for more functions when pdev->multifunction is set which somewhat
counter intutively is not the case for VFs.

Note that PFs are looked at before their child VFs is guaranteed because
we sort the zpci_list by RID ascending.

	Reviewed-by: Gerd Bayer <gbayer@linux.ibm.com>
	Signed-off-by: Niklas Schnelle <schnelle@linux.ibm.com>
	Signed-off-by: Heiko Carstens <hca@linux.ibm.com>
(cherry picked from commit 25f39d3dcb48bbc824a77d16b3d977f0f3713cfe)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/s390/pci/pci_bus.c
#	arch/s390/pci/pci_clp.c
diff --cc arch/s390/pci/pci_bus.c
index 32245b970a0c,1b74a000ff64..000000000000
--- a/arch/s390/pci/pci_bus.c
+++ b/arch/s390/pci/pci_bus.c
@@@ -243,7 -245,9 +250,13 @@@ static struct zpci_bus *zpci_bus_get(in
  
  	mutex_lock(&zbus_list_lock);
  	list_for_each_entry(zbus, &zbus_list, bus_next) {
++<<<<<<< HEAD
 +		if (pchid == zbus->pchid) {
++=======
+ 		if (!zbus->multifunction)
+ 			continue;
+ 		if (topo_is_tid == zbus->topo_is_tid && topo == zbus->topo) {
++>>>>>>> 25f39d3dcb48 (s390/pci: Ignore RID for isolated VFs)
  			kref_get(&zbus->kref);
  			goto out_unlock;
  		}
@@@ -335,14 -344,10 +351,19 @@@ int zpci_bus_device_register(struct zpc
  		return -ENOSPC;
  	}
  
++<<<<<<< HEAD
 +	if (zdev->devfn >= ZPCI_FUNCTIONS_PER_BUS)
 +		return -EINVAL;
 +
 +	if (!s390_pci_no_rid && zdev->rid_available)
 +		zbus = zpci_bus_get(zdev->pchid);
 +
++=======
+ 	topo = topo_is_tid ? zdev->tid : zdev->pchid;
+ 	zbus = zpci_bus_get(topo, topo_is_tid);
++>>>>>>> 25f39d3dcb48 (s390/pci: Ignore RID for isolated VFs)
  	if (!zbus) {
 -		zbus = zpci_bus_alloc(topo, topo_is_tid);
 +		zbus = zpci_bus_alloc(zdev->pchid);
  		if (!zbus)
  			return -ENOMEM;
  	}
diff --cc arch/s390/pci/pci_clp.c
index 34759316747b,74dac6da03d5..000000000000
--- a/arch/s390/pci/pci_clp.c
+++ b/arch/s390/pci/pci_clp.c
@@@ -163,10 -164,13 +163,18 @@@ static int clp_store_query_pci_fn(struc
  	zdev->port = response->port;
  	zdev->uid = response->uid;
  	zdev->fmb_length = sizeof(u32) * response->fmb_len;
 -	zdev->is_physfn = response->is_physfn;
  	zdev->rid_available = response->rid_avail;
++<<<<<<< HEAD
 +	zdev->is_physfn = response->is_physfn;
 +	if (!s390_pci_no_rid && zdev->rid_available)
 +		zdev->devfn = response->rid & ZPCI_RID_MASK_DEVFN;
++=======
+ 	if (zdev->rid_available)
+ 		zdev->rid = response->rid;
+ 	zdev->tid_avail = response->tid_avail;
+ 	if (zdev->tid_avail)
+ 		zdev->tid = response->tid;
++>>>>>>> 25f39d3dcb48 (s390/pci: Ignore RID for isolated VFs)
  
  	memcpy(zdev->pfip, response->pfip, sizeof(zdev->pfip));
  	if (response->util_str_avail) {
* Unmerged path arch/s390/pci/pci_bus.c
* Unmerged path arch/s390/pci/pci_clp.c
