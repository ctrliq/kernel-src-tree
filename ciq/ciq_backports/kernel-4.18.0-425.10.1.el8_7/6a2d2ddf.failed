drm: Move nomodeset kernel parameter to the DRM subsystem

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-425.10.1.el8_7
commit-author Javier Martinez Canillas <javierm@redhat.com>
commit 6a2d2ddf2c345e0149bfbffdddc4768a9ab0a741
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-425.10.1.el8_7/6a2d2ddf.failed

The "nomodeset" kernel cmdline parameter is handled by the vgacon driver
but the exported vgacon_text_force() symbol is only used by DRM drivers.

It makes much more sense for the parameter logic to be in the subsystem
of the drivers that are making use of it.

Let's move the vgacon_text_force() function and related logic to the DRM
subsystem. While doing that, rename it to drm_firmware_drivers_only() and
make it return true if "nomodeset" was used and false otherwise. This is
a better description of the condition that the drivers are testing for.

	Suggested-by: Daniel Vetter <daniel.vetter@ffwll.ch>
	Signed-off-by: Javier Martinez Canillas <javierm@redhat.com>
	Acked-by: Thomas Zimmermann <tzimmermann@suse.de>
	Acked-by: Jani Nikula <jani.nikula@intel.com>
	Acked-by: Pekka Paalanen <pekka.paalanen@collabora.com>
	Acked-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Link: https://patchwork.freedesktop.org/patch/msgid/20211112133230.1595307-4-javierm@redhat.com
(cherry picked from commit 6a2d2ddf2c345e0149bfbffdddc4768a9ab0a741)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/ast/ast_drv.c
#	drivers/gpu/drm/mgag200/mgag200_drv.c
#	drivers/gpu/drm/qxl/qxl_drv.c
#	drivers/gpu/drm/tiny/bochs.c
#	drivers/gpu/drm/tiny/cirrus.c
#	drivers/gpu/drm/vboxvideo/vbox_drv.c
#	drivers/gpu/drm/vmwgfx/vmwgfx_drv.c
#	include/drm/drm_drv.h
diff --cc drivers/gpu/drm/ast/ast_drv.c
index 7465c4f0156a,6d8613f6fe1c..000000000000
--- a/drivers/gpu/drm/ast/ast_drv.c
+++ b/drivers/gpu/drm/ast/ast_drv.c
@@@ -231,7 -230,22 +231,26 @@@ static struct pci_driver ast_pci_drive
  	.driver.pm = &ast_pm_ops,
  };
  
++<<<<<<< HEAD
 +drm_module_pci_driver_if_modeset(ast_pci_driver, ast_modeset);
++=======
+ static int __init ast_init(void)
+ {
+ 	if (drm_firmware_drivers_only() && ast_modeset == -1)
+ 		return -EINVAL;
+ 
+ 	if (ast_modeset == 0)
+ 		return -EINVAL;
+ 	return pci_register_driver(&ast_pci_driver);
+ }
+ static void __exit ast_exit(void)
+ {
+ 	pci_unregister_driver(&ast_pci_driver);
+ }
+ 
+ module_init(ast_init);
+ module_exit(ast_exit);
++>>>>>>> 6a2d2ddf2c34 (drm: Move nomodeset kernel parameter to the DRM subsystem)
  
  MODULE_AUTHOR(DRIVER_AUTHOR);
  MODULE_DESCRIPTION(DRIVER_DESC);
diff --cc drivers/gpu/drm/mgag200/mgag200_drv.c
index 217844d71ab5,740108a006ba..000000000000
--- a/drivers/gpu/drm/mgag200/mgag200_drv.c
+++ b/drivers/gpu/drm/mgag200/mgag200_drv.c
@@@ -376,7 -375,24 +376,28 @@@ static struct pci_driver mgag200_pci_dr
  	.remove = mgag200_pci_remove,
  };
  
++<<<<<<< HEAD
 +drm_module_pci_driver_if_modeset(mgag200_pci_driver, mgag200_modeset);
++=======
+ static int __init mgag200_init(void)
+ {
+ 	if (drm_firmware_drivers_only() && mgag200_modeset == -1)
+ 		return -EINVAL;
+ 
+ 	if (mgag200_modeset == 0)
+ 		return -EINVAL;
+ 
+ 	return pci_register_driver(&mgag200_pci_driver);
+ }
+ 
+ static void __exit mgag200_exit(void)
+ {
+ 	pci_unregister_driver(&mgag200_pci_driver);
+ }
+ 
+ module_init(mgag200_init);
+ module_exit(mgag200_exit);
++>>>>>>> 6a2d2ddf2c34 (drm: Move nomodeset kernel parameter to the DRM subsystem)
  
  MODULE_AUTHOR(DRIVER_AUTHOR);
  MODULE_DESCRIPTION(DRIVER_DESC);
diff --cc drivers/gpu/drm/qxl/qxl_drv.c
index 1cb6f0c224bb,e4b16421500b..000000000000
--- a/drivers/gpu/drm/qxl/qxl_drv.c
+++ b/drivers/gpu/drm/qxl/qxl_drv.c
@@@ -304,7 -292,24 +304,28 @@@ static struct drm_driver qxl_driver = 
  	.release = qxl_drm_release,
  };
  
++<<<<<<< HEAD
 +drm_module_pci_driver_if_modeset(qxl_pci_driver, qxl_modeset);
++=======
+ static int __init qxl_init(void)
+ {
+ 	if (drm_firmware_drivers_only() && qxl_modeset == -1)
+ 		return -EINVAL;
+ 
+ 	if (qxl_modeset == 0)
+ 		return -EINVAL;
+ 	qxl_driver.num_ioctls = qxl_max_ioctls;
+ 	return pci_register_driver(&qxl_pci_driver);
+ }
+ 
+ static void __exit qxl_exit(void)
+ {
+ 	pci_unregister_driver(&qxl_pci_driver);
+ }
+ 
+ module_init(qxl_init);
+ module_exit(qxl_exit);
++>>>>>>> 6a2d2ddf2c34 (drm: Move nomodeset kernel parameter to the DRM subsystem)
  
  MODULE_AUTHOR(DRIVER_AUTHOR);
  MODULE_DESCRIPTION(DRIVER_DESC);
diff --cc drivers/gpu/drm/tiny/bochs.c
index 4f8bf86633df,fc26a1ce11ee..000000000000
--- a/drivers/gpu/drm/tiny/bochs.c
+++ b/drivers/gpu/drm/tiny/bochs.c
@@@ -1,6 -1,5 +1,9 @@@
  // SPDX-License-Identifier: GPL-2.0-or-later
  
++<<<<<<< HEAD
 +#include <linux/module.h>
++=======
++>>>>>>> 6a2d2ddf2c34 (drm: Move nomodeset kernel parameter to the DRM subsystem)
  #include <linux/pci.h>
  
  #include <drm/drm_aperture.h>
@@@ -718,7 -716,24 +721,28 @@@ static struct pci_driver bochs_pci_driv
  /* ---------------------------------------------------------------------- */
  /* module init/exit                                                       */
  
++<<<<<<< HEAD
 +drm_module_pci_driver_if_modeset(bochs_pci_driver, bochs_modeset);
++=======
+ static int __init bochs_init(void)
+ {
+ 	if (drm_firmware_drivers_only() && bochs_modeset == -1)
+ 		return -EINVAL;
+ 
+ 	if (bochs_modeset == 0)
+ 		return -EINVAL;
+ 
+ 	return pci_register_driver(&bochs_pci_driver);
+ }
+ 
+ static void __exit bochs_exit(void)
+ {
+ 	pci_unregister_driver(&bochs_pci_driver);
+ }
+ 
+ module_init(bochs_init);
+ module_exit(bochs_exit);
++>>>>>>> 6a2d2ddf2c34 (drm: Move nomodeset kernel parameter to the DRM subsystem)
  
  MODULE_DEVICE_TABLE(pci, bochs_pci_tbl);
  MODULE_AUTHOR("Gerd Hoffmann <kraxel@redhat.com>");
diff --cc drivers/gpu/drm/tiny/cirrus.c
index c8e791840862,c95d9ff7d600..000000000000
--- a/drivers/gpu/drm/tiny/cirrus.c
+++ b/drivers/gpu/drm/tiny/cirrus.c
@@@ -16,7 -16,7 +16,11 @@@
   * Copyright 1999-2001 Jeff Garzik <jgarzik@pobox.com>
   */
  
++<<<<<<< HEAD
 +#include <linux/iosys-map.h>
++=======
+ #include <linux/dma-buf-map.h>
++>>>>>>> 6a2d2ddf2c34 (drm: Move nomodeset kernel parameter to the DRM subsystem)
  #include <linux/module.h>
  #include <linux/pci.h>
  
@@@ -636,7 -633,21 +640,25 @@@ static struct pci_driver cirrus_pci_dri
  	.remove = cirrus_pci_remove,
  };
  
++<<<<<<< HEAD
 +drm_module_pci_driver(cirrus_pci_driver)
++=======
+ static int __init cirrus_init(void)
+ {
+ 	if (drm_firmware_drivers_only())
+ 		return -EINVAL;
+ 
+ 	return pci_register_driver(&cirrus_pci_driver);
+ }
+ 
+ static void __exit cirrus_exit(void)
+ {
+ 	pci_unregister_driver(&cirrus_pci_driver);
+ }
+ 
+ module_init(cirrus_init);
+ module_exit(cirrus_exit);
++>>>>>>> 6a2d2ddf2c34 (drm: Move nomodeset kernel parameter to the DRM subsystem)
  
  MODULE_DEVICE_TABLE(pci, pciidlist);
  MODULE_LICENSE("GPL");
diff --cc drivers/gpu/drm/vboxvideo/vbox_drv.c
index f4f2bd79a7cb,f35d9e44c6b7..000000000000
--- a/drivers/gpu/drm/vboxvideo/vbox_drv.c
+++ b/drivers/gpu/drm/vboxvideo/vbox_drv.c
@@@ -191,7 -190,24 +191,28 @@@ static const struct drm_driver driver 
  	DRM_GEM_VRAM_DRIVER,
  };
  
++<<<<<<< HEAD
 +drm_module_pci_driver_if_modeset(vbox_pci_driver, vbox_modeset);
++=======
+ static int __init vbox_init(void)
+ {
+ 	if (drm_firmware_drivers_only() && vbox_modeset == -1)
+ 		return -EINVAL;
+ 
+ 	if (vbox_modeset == 0)
+ 		return -EINVAL;
+ 
+ 	return pci_register_driver(&vbox_pci_driver);
+ }
+ 
+ static void __exit vbox_exit(void)
+ {
+ 	pci_unregister_driver(&vbox_pci_driver);
+ }
+ 
+ module_init(vbox_init);
+ module_exit(vbox_exit);
++>>>>>>> 6a2d2ddf2c34 (drm: Move nomodeset kernel parameter to the DRM subsystem)
  
  MODULE_AUTHOR("Oracle Corporation");
  MODULE_AUTHOR("Hans de Goede <hdegoede@redhat.com>");
diff --cc drivers/gpu/drm/vmwgfx/vmwgfx_drv.c
index 5c98d096f7f0,75d1e032cf16..000000000000
--- a/drivers/gpu/drm/vmwgfx/vmwgfx_drv.c
+++ b/drivers/gpu/drm/vmwgfx/vmwgfx_drv.c
@@@ -1623,20 -1629,33 +1623,35 @@@ static int vmw_probe(struct pci_dev *pd
  
  	pci_set_drvdata(pdev, &vmw->drm);
  
 -	ret = ttm_mem_global_init(&ttm_mem_glob, &pdev->dev);
 -	if (ret)
 -		return ret;
 -
  	ret = vmw_driver_load(vmw, ent->device);
  	if (ret)
 -		return ret;
 +		goto out_error;
  
  	ret = drm_dev_register(&vmw->drm, 0);
 -	if (ret) {
 -		vmw_driver_unload(&vmw->drm);
 -		return ret;
 -	}
 +	if (ret)
 +		goto out_unload;
 +
 +	vmw_debugfs_gem_init(vmw);
  
  	return 0;
++<<<<<<< HEAD
 +out_unload:
 +	vmw_driver_unload(&vmw->drm);
 +out_error:
++=======
+ }
+ 
+ static int __init vmwgfx_init(void)
+ {
+ 	int ret;
+ 
+ 	if (drm_firmware_drivers_only())
+ 		return -EINVAL;
+ 
+ 	ret = pci_register_driver(&vmw_pci_driver);
+ 	if (ret)
+ 		DRM_ERROR("Failed initializing DRM.\n");
++>>>>>>> 6a2d2ddf2c34 (drm: Move nomodeset kernel parameter to the DRM subsystem)
  	return ret;
  }
  
diff --cc include/drm/drm_drv.h
index f6159acb8856,89e26a732175..000000000000
--- a/include/drm/drm_drv.h
+++ b/include/drm/drm_drv.h
@@@ -602,6 -601,10 +602,14 @@@ static inline bool drm_drv_uses_atomic_
  
  int drm_dev_set_unique(struct drm_device *dev, const char *name);
  
++<<<<<<< HEAD
 +extern bool drm_firmware_drivers_only(void);
++=======
+ #ifdef CONFIG_VGA_CONSOLE
+ extern bool drm_firmware_drivers_only(void);
+ #else
+ static inline bool drm_firmware_drivers_only(void) { return false; }
+ #endif
++>>>>>>> 6a2d2ddf2c34 (drm: Move nomodeset kernel parameter to the DRM subsystem)
  
  #endif
diff --git a/drivers/gpu/drm/Makefile b/drivers/gpu/drm/Makefile
index 1c06b693d00f..4aac5b10c8ea 100644
--- a/drivers/gpu/drm/Makefile
+++ b/drivers/gpu/drm/Makefile
@@ -33,6 +33,8 @@ drm-$(CONFIG_DRM_PRIVACY_SCREEN) += drm_privacy_screen.o drm_privacy_screen_x86.
 
 obj-$(CONFIG_DRM_NOMODESET) += drm_nomodeset.o
 
+obj-$(CONFIG_VGA_CONSOLE) += drm_nomodeset.o
+
 drm_cma_helper-y := drm_gem_cma_helper.o
 drm_cma_helper-$(CONFIG_DRM_KMS_HELPER) += drm_fb_cma_helper.o
 obj-$(CONFIG_DRM_GEM_CMA_HELPER) += drm_cma_helper.o
* Unmerged path drivers/gpu/drm/ast/ast_drv.c
* Unmerged path drivers/gpu/drm/mgag200/mgag200_drv.c
* Unmerged path drivers/gpu/drm/qxl/qxl_drv.c
* Unmerged path drivers/gpu/drm/tiny/bochs.c
* Unmerged path drivers/gpu/drm/tiny/cirrus.c
* Unmerged path drivers/gpu/drm/vboxvideo/vbox_drv.c
* Unmerged path drivers/gpu/drm/vmwgfx/vmwgfx_drv.c
diff --git a/drivers/video/console/vgacon.c b/drivers/video/console/vgacon.c
index 6d0418e88ad7..1eff8a841bfb 100644
--- a/drivers/video/console/vgacon.c
+++ b/drivers/video/console/vgacon.c
@@ -99,30 +99,9 @@ static int 		vga_video_font_height;
 static int 		vga_scan_lines		__read_mostly;
 static unsigned int 	vga_rolled_over;
 
-static bool vgacon_text_mode_force;
 static bool vga_hardscroll_enabled;
 static bool vga_hardscroll_user_enable = true;
 
-bool vgacon_text_force(void)
-{
-	return vgacon_text_mode_force;
-}
-EXPORT_SYMBOL(vgacon_text_force);
-
-static int __init text_mode(char *str)
-{
-	vgacon_text_mode_force = true;
-
-	pr_warn("You have booted with nomodeset. This means your GPU drivers are DISABLED\n");
-	pr_warn("Any video related functionality will be severely degraded, and you may not even be able to suspend the system properly\n");
-	pr_warn("Unless you actually understand what nomodeset does, you should reboot without enabling it\n");
-
-	return 1;
-}
-
-/* force text mode - used by kernel modesetting */
-__setup("nomodeset", text_mode);
-
 static int __init no_scroll(char *str)
 {
 	/*
diff --git a/gpu/drm/drm_nomodeset.c b/gpu/drm/drm_nomodeset.c
new file mode 100644
index 000000000000..287edfb18b5d
--- /dev/null
+++ b/gpu/drm/drm_nomodeset.c
@@ -0,0 +1,26 @@
+// SPDX-License-Identifier: GPL-2.0
+
+#include <linux/module.h>
+#include <linux/types.h>
+
+static bool drm_nomodeset;
+
+bool drm_firmware_drivers_only(void)
+{
+	return drm_nomodeset;
+}
+EXPORT_SYMBOL(drm_firmware_drivers_only);
+
+static int __init disable_modeset(char *str)
+{
+	drm_nomodeset = true;
+
+	pr_warn("You have booted with nomodeset. This means your GPU drivers are DISABLED\n");
+	pr_warn("Any video related functionality will be severely degraded, and you may not even be able to suspend the system properly\n");
+	pr_warn("Unless you actually understand what nomodeset does, you should reboot without enabling it\n");
+
+	return 1;
+}
+
+/* Disable kernel modesetting */
+__setup("nomodeset", disable_modeset);
* Unmerged path include/drm/drm_drv.h
diff --git a/include/linux/console.h b/include/linux/console.h
index 613323cae094..4d44a1cf5f67 100644
--- a/include/linux/console.h
+++ b/include/linux/console.h
@@ -223,12 +223,6 @@ extern atomic_t ignore_console_lock_warning;
 #define VESA_HSYNC_SUSPEND      2
 #define VESA_POWERDOWN          3
 
-#ifdef CONFIG_VGA_CONSOLE
-extern bool vgacon_text_force(void);
-#else
-static inline bool vgacon_text_force(void) { return false; }
-#endif
-
 extern void console_init(void);
 
 /* For deferred console takeover */
