fortify: Detect struct member overflows in memmove() at compile-time

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-487.el8
commit-author Kees Cook <keescook@chromium.org>
commit 938a000e3f9bead24ea753286b3e4d2423275c9e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-487.el8/938a000e.failed

As done for memcpy(), also update memmove() to use the same tightened
compile-time checks under CONFIG_FORTIFY_SOURCE.

	Signed-off-by: Kees Cook <keescook@chromium.org>
(cherry picked from commit 938a000e3f9bead24ea753286b3e4d2423275c9e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/fortify-string.h
diff --cc include/linux/fortify-string.h
index 4d86485f5be8,098d8a322a7a..000000000000
--- a/include/linux/fortify-string.h
+++ b/include/linux/fortify-string.h
@@@ -202,37 -211,108 +202,60 @@@ __FORTIFY_INLINE void *memset(void *p, 
  	return __underlying_memset(p, c, size);
  }
  
 -/*
 - * To make sure the compiler can enforce protection against buffer overflows,
 - * memcpy(), memmove(), and memset() must not be used beyond individual
 - * struct members. If you need to copy across multiple members, please use
 - * struct_group() to create a named mirror of an anonymous struct union.
 - * (e.g. see struct sk_buff.) Read overflow checking is currently only
 - * done when a write overflow is also present, or when building with W=1.
 - *
 - * Mitigation coverage matrix
 - *					Bounds checking at:
 - *					+-------+-------+-------+-------+
 - *					| Compile time  |   Run time    |
 - * memcpy() argument sizes:		| write | read  | write | read  |
 - *        dest     source   length      +-------+-------+-------+-------+
 - * memcpy(known,   known,   constant)	|   y   |   y   |  n/a  |  n/a  |
 - * memcpy(known,   unknown, constant)	|   y   |   n   |  n/a  |   V   |
 - * memcpy(known,   known,   dynamic)	|   n   |   n   |   B   |   B   |
 - * memcpy(known,   unknown, dynamic)	|   n   |   n   |   B   |   V   |
 - * memcpy(unknown, known,   constant)	|   n   |   y   |   V   |  n/a  |
 - * memcpy(unknown, unknown, constant)	|   n   |   n   |   V   |   V   |
 - * memcpy(unknown, known,   dynamic)	|   n   |   n   |   V   |   B   |
 - * memcpy(unknown, unknown, dynamic)	|   n   |   n   |   V   |   V   |
 - *					+-------+-------+-------+-------+
 - *
 - * y = perform deterministic compile-time bounds checking
 - * n = cannot perform deterministic compile-time bounds checking
 - * n/a = no run-time bounds checking needed since compile-time deterministic
 - * B = can perform run-time bounds checking (currently unimplemented)
 - * V = vulnerable to run-time overflow (will need refactoring to solve)
 - *
 - */
 -__FORTIFY_INLINE void fortify_memcpy_chk(__kernel_size_t size,
 -					 const size_t p_size,
 -					 const size_t q_size,
 -					 const size_t p_size_field,
 -					 const size_t q_size_field,
 -					 const char *func)
 +__FORTIFY_INLINE void *memcpy(void *p, const void *q, __kernel_size_t size)
  {
 +	size_t p_size = __builtin_object_size(p, 0);
 +	size_t q_size = __builtin_object_size(q, 0);
 +
  	if (__builtin_constant_p(size)) {
 -		/*
 -		 * Length argument is a constant expression, so we
 -		 * can perform compile-time bounds checking where
 -		 * buffer sizes are known.
 -		 */
 -
 -		/* Error when size is larger than enclosing struct. */
 -		if (p_size > p_size_field && p_size < size)
 +		if (p_size < size)
  			__write_overflow();
 -		if (q_size > q_size_field && q_size < size)
 +		if (q_size < size)
  			__read_overflow2();
 -
 -		/* Warn when write size argument larger than dest field. */
 -		if (p_size_field < size)
 -			__write_overflow_field(p_size_field, size);
 -		/*
 -		 * Warn for source field over-read when building with W=1
 -		 * or when an over-write happened, so both can be fixed at
 -		 * the same time.
 -		 */
 -		if ((IS_ENABLED(KBUILD_EXTRA_WARN1) || p_size_field < size) &&
 -		    q_size_field < size)
 -			__read_overflow2_field(q_size_field, size);
  	}
 -	/*
 -	 * At this point, length argument may not be a constant expression,
 -	 * so run-time bounds checking can be done where buffer sizes are
 -	 * known. (This is not an "else" because the above checks may only
 -	 * be compile-time warnings, and we want to still warn for run-time
 -	 * overflows.)
 -	 */
 -
 -	/*
 -	 * Always stop accesses beyond the struct that contains the
 -	 * field, when the buffer's remaining size is known.
 -	 * (The -1 test is to optimize away checks where the buffer
 -	 * lengths are unknown.)
 -	 */
 -	if ((p_size != (size_t)(-1) && p_size < size) ||
 -	    (q_size != (size_t)(-1) && q_size < size))
 -		fortify_panic(func);
 +	if (p_size < size || q_size < size)
 +		fortify_panic(__func__);
 +	return __underlying_memcpy(p, q, size);
  }
  
++<<<<<<< HEAD
 +__FORTIFY_INLINE void *memmove(void *p, const void *q, __kernel_size_t size)
 +{
 +	size_t p_size = __builtin_object_size(p, 0);
 +	size_t q_size = __builtin_object_size(q, 0);
 +
 +	if (__builtin_constant_p(size)) {
 +		if (p_size < size)
 +			__write_overflow();
 +		if (q_size < size)
 +			__read_overflow2();
 +	}
 +	if (p_size < size || q_size < size)
 +		fortify_panic(__func__);
 +	return __underlying_memmove(p, q, size);
 +}
++=======
+ #define __fortify_memcpy_chk(p, q, size, p_size, q_size,		\
+ 			     p_size_field, q_size_field, op) ({		\
+ 	size_t __fortify_size = (size_t)(size);				\
+ 	fortify_memcpy_chk(__fortify_size, p_size, q_size,		\
+ 			   p_size_field, q_size_field, #op);		\
+ 	__underlying_##op(p, q, __fortify_size);			\
+ })
+ 
+ /*
+  * __builtin_object_size() must be captured here to avoid evaluating argument
+  * side-effects further into the macro layers.
+  */
+ #define memcpy(p, q, s)  __fortify_memcpy_chk(p, q, s,			\
+ 		__builtin_object_size(p, 0), __builtin_object_size(q, 0), \
+ 		__builtin_object_size(p, 1), __builtin_object_size(q, 1), \
+ 		memcpy)
+ #define memmove(p, q, s)  __fortify_memcpy_chk(p, q, s,			\
+ 		__builtin_object_size(p, 0), __builtin_object_size(q, 0), \
+ 		__builtin_object_size(p, 1), __builtin_object_size(q, 1), \
+ 		memmove)
++>>>>>>> 938a000e3f9b (fortify: Detect struct member overflows in memmove() at compile-time)
  
  extern void *__real_memscan(void *, int, __kernel_size_t) __RENAME(memscan);
  __FORTIFY_INLINE void *memscan(void *p, int c, __kernel_size_t size)
@@@ -320,8 -401,6 +343,11 @@@ __FORTIFY_INLINE char *strcpy(char *p, 
  /* Don't use these outside the FORITFY_SOURCE implementation */
  #undef __underlying_memchr
  #undef __underlying_memcmp
++<<<<<<< HEAD
 +#undef __underlying_memcpy
 +#undef __underlying_memmove
++=======
++>>>>>>> 938a000e3f9b (fortify: Detect struct member overflows in memmove() at compile-time)
  #undef __underlying_memset
  #undef __underlying_strcat
  #undef __underlying_strcpy
diff --git a/arch/x86/boot/compressed/misc.c b/arch/x86/boot/compressed/misc.c
index 97f4eb8a6256..013afaeba37d 100644
--- a/arch/x86/boot/compressed/misc.c
+++ b/arch/x86/boot/compressed/misc.c
@@ -36,10 +36,11 @@
 #undef memcpy
 #undef memset
 #define memzero(s, n)	memset((s), 0, (n))
+#ifndef memmove
 #define memmove		memmove
-
 /* Functions used by the included decompressor code below. */
 void *memmove(void *dest, const void *src, size_t n);
+#endif
 
 /*
  * This is set up by the setup-routine at boot-time
diff --git a/arch/x86/lib/memcpy_32.c b/arch/x86/lib/memcpy_32.c
index e565d1c9019e..f19b7fd07f04 100644
--- a/arch/x86/lib/memcpy_32.c
+++ b/arch/x86/lib/memcpy_32.c
@@ -4,6 +4,7 @@
 
 #undef memcpy
 #undef memset
+#undef memmove
 
 __visible void *memcpy(void *to, const void *from, size_t n)
 {
* Unmerged path include/linux/fortify-string.h
diff --git a/lib/test_fortify/read_overflow2_field-memmove.c b/lib/test_fortify/read_overflow2_field-memmove.c
new file mode 100644
index 000000000000..6cc2724c8f62
--- /dev/null
+++ b/lib/test_fortify/read_overflow2_field-memmove.c
@@ -0,0 +1,5 @@
+// SPDX-License-Identifier: GPL-2.0-only
+#define TEST	\
+	memmove(large, instance.buf, sizeof(instance.buf) + 1)
+
+#include "test_fortify.h"
diff --git a/lib/test_fortify/write_overflow_field-memmove.c b/lib/test_fortify/write_overflow_field-memmove.c
new file mode 100644
index 000000000000..377fcf9bb2fd
--- /dev/null
+++ b/lib/test_fortify/write_overflow_field-memmove.c
@@ -0,0 +1,5 @@
+// SPDX-License-Identifier: GPL-2.0-only
+#define TEST	\
+	memmove(instance.buf, large, sizeof(instance.buf) + 1)
+
+#include "test_fortify.h"
