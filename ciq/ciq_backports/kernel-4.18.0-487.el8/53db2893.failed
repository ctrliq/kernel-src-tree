fuse: extend init flags

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-487.el8
commit-author Miklos Szeredi <mszeredi@redhat.com>
commit 53db28933e952a8536b002ba8b8c9443ccc0e939
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-487.el8/53db2893.failed

FUSE_INIT flags are close to running out, so add another 32bits worth of
space.

Add FUSE_INIT_EXT flag to the old flags field in fuse_init_in.  If this
flag is set, then fuse_init_in is extended by 48bytes, in which a flags_hi
field is allocated to contain the high 32bits of the flags.

A flags_hi field is also added to fuse_init_out, allocated out of the
remaining unused fields.

Known userspace implementations of the fuse protocol have been checked to
accept the extended FUSE_INIT request, but this might cause problems with
other implementations.  If that happens to be the case, the protocol
negotiation will have to be extended with an extra initialization request
roundtrip.

	Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
(cherry picked from commit 53db28933e952a8536b002ba8b8c9443ccc0e939)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/fuse/inode.c
#	include/uapi/linux/fuse.h
diff --cc fs/fuse/inode.c
index 7d5d93170684,5a1dad8c1f92..000000000000
--- a/fs/fuse/inode.c
+++ b/fs/fuse/inode.c
@@@ -1038,13 -1158,13 +1040,13 @@@ static void process_init_reply(struct f
  				fc->posix_acl = 1;
  				fm->sb->s_xattr = fuse_acl_xattr_handlers;
  			}
- 			if (arg->flags & FUSE_CACHE_SYMLINKS)
+ 			if (flags & FUSE_CACHE_SYMLINKS)
  				fc->cache_symlinks = 1;
- 			if (arg->flags & FUSE_ABORT_ERROR)
+ 			if (flags & FUSE_ABORT_ERROR)
  				fc->abort_err = 1;
- 			if (arg->flags & FUSE_MAX_PAGES) {
+ 			if (flags & FUSE_MAX_PAGES) {
  				fc->max_pages =
 -					min_t(unsigned int, fc->max_pages_limit,
 +					min_t(unsigned int, FUSE_MAX_MAX_PAGES,
  					max_t(unsigned int, arg->max_pages, 1));
  			}
  			if (IS_ENABLED(CONFIG_FUSE_DAX) &&
@@@ -1056,6 -1176,8 +1058,11 @@@
  				fc->handle_killpriv_v2 = 1;
  				fm->sb->s_flags |= SB_NOSEC;
  			}
++<<<<<<< HEAD
++=======
+ 			if (flags & FUSE_SETXATTR_EXT)
+ 				fc->setxattr_ext = 1;
++>>>>>>> 53db28933e95 (fuse: extend init flags)
  		} else {
  			ra_pages = fc->max_read / PAGE_SIZE;
  			fc->no_lock = 1;
@@@ -1099,13 -1222,16 +1107,20 @@@ void fuse_send_init(struct fuse_mount *
  		FUSE_PARALLEL_DIROPS | FUSE_HANDLE_KILLPRIV | FUSE_POSIX_ACL |
  		FUSE_ABORT_ERROR | FUSE_MAX_PAGES | FUSE_CACHE_SYMLINKS |
  		FUSE_NO_OPENDIR_SUPPORT | FUSE_EXPLICIT_INVAL_DATA |
++<<<<<<< HEAD
 +		FUSE_HANDLE_KILLPRIV_V2;
++=======
+ 		FUSE_HANDLE_KILLPRIV_V2 | FUSE_SETXATTR_EXT | FUSE_INIT_EXT;
++>>>>>>> 53db28933e95 (fuse: extend init flags)
  #ifdef CONFIG_FUSE_DAX
  	if (fm->fc->dax)
- 		ia->in.flags |= FUSE_MAP_ALIGNMENT;
+ 		flags |= FUSE_MAP_ALIGNMENT;
  #endif
  	if (fm->fc->auto_submounts)
- 		ia->in.flags |= FUSE_SUBMOUNTS;
+ 		flags |= FUSE_SUBMOUNTS;
+ 
+ 	ia->in.flags = flags;
+ 	ia->in.flags2 = flags >> 32;
  
  	ia->args.opcode = FUSE_INIT;
  	ia->args.in_numargs = 1;
diff --cc include/uapi/linux/fuse.h
index 0365282961e0,980f3998c11b..000000000000
--- a/include/uapi/linux/fuse.h
+++ b/include/uapi/linux/fuse.h
@@@ -179,6 -179,18 +179,21 @@@
   *  7.33
   *  - add FUSE_HANDLE_KILLPRIV_V2, FUSE_WRITE_KILL_SUIDGID, FATTR_KILL_SUIDGID
   *  - add FUSE_OPEN_KILL_SUIDGID
++<<<<<<< HEAD
++=======
+  *  - extend fuse_setxattr_in, add FUSE_SETXATTR_EXT
+  *  - add FUSE_SETXATTR_ACL_KILL_SGID
+  *
+  *  7.34
+  *  - add FUSE_SYNCFS
+  *
+  *  7.35
+  *  - add FOPEN_NOFLUSH
+  *
+  *  7.36
+  *  - extend fuse_init_in with reserved fields, add FUSE_INIT_EXT init flag
+  *  - add flags2 to fuse_init_in and fuse_init_out
++>>>>>>> 53db28933e95 (fuse: extend init flags)
   */
  
  #ifndef _LINUX_FUSE_H
@@@ -214,7 -226,7 +229,11 @@@
  #define FUSE_KERNEL_VERSION 7
  
  /** Minor version number of this interface */
++<<<<<<< HEAD
 +#define FUSE_KERNEL_MINOR_VERSION 33
++=======
+ #define FUSE_KERNEL_MINOR_VERSION 36
++>>>>>>> 53db28933e95 (fuse: extend init flags)
  
  /** The node ID of the root inode */
  #define FUSE_ROOT_ID 1
@@@ -328,6 -344,9 +347,12 @@@ struct fuse_file_lock 
   *			does not have CAP_FSETID. Additionally upon
   *			write/truncate sgid is killed only if file has group
   *			execute permission. (Same as Linux VFS behavior).
++<<<<<<< HEAD
++=======
+  * FUSE_SETXATTR_EXT:	Server supports extended struct fuse_setxattr_in
+  * FUSE_INIT_EXT: extended fuse_init_in request
+  * FUSE_INIT_RESERVED: reserved, do not use
++>>>>>>> 53db28933e95 (fuse: extend init flags)
   */
  #define FUSE_ASYNC_READ		(1 << 0)
  #define FUSE_POSIX_LOCKS	(1 << 1)
@@@ -358,6 -377,10 +383,13 @@@
  #define FUSE_MAP_ALIGNMENT	(1 << 26)
  #define FUSE_SUBMOUNTS		(1 << 27)
  #define FUSE_HANDLE_KILLPRIV_V2	(1 << 28)
++<<<<<<< HEAD
++=======
+ #define FUSE_SETXATTR_EXT	(1 << 29)
+ #define FUSE_INIT_EXT		(1 << 30)
+ #define FUSE_INIT_RESERVED	(1 << 31)
+ /* bits 32..63 get shifted down 32 bits into the flags2 field */
++>>>>>>> 53db28933e95 (fuse: extend init flags)
  
  /**
   * CUSE INIT request/reply flags
* Unmerged path fs/fuse/inode.c
* Unmerged path include/uapi/linux/fuse.h
