fuse: add feature flag for expire-only

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-487.el8
commit-author Miklos Szeredi <mszeredi@redhat.com>
commit 5cadfbd5a11e5495cac217534c5f788168b1afd7
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-487.el8/5cadfbd5.failed

Add an init flag idicating whether the FUSE_EXPIRE_ONLY flag of
FUSE_NOTIFY_INVAL_ENTRY is effective.

This is needed for backports of this feature, otherwise the server could
just check the protocol version.

Fixes: 4f8d37020e1f ("fuse: add "expire only" mode to FUSE_NOTIFY_INVAL_ENTRY")
	Cc: <stable@vger.kernel.org> # v6.2
	Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
(cherry picked from commit 5cadfbd5a11e5495cac217534c5f788168b1afd7)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/fuse/inode.c
#	include/uapi/linux/fuse.h
diff --cc fs/fuse/inode.c
index 7d5d93170684,660be31aaabc..000000000000
--- a/fs/fuse/inode.c
+++ b/fs/fuse/inode.c
@@@ -1099,13 -1253,20 +1099,19 @@@ void fuse_send_init(struct fuse_mount *
  		FUSE_PARALLEL_DIROPS | FUSE_HANDLE_KILLPRIV | FUSE_POSIX_ACL |
  		FUSE_ABORT_ERROR | FUSE_MAX_PAGES | FUSE_CACHE_SYMLINKS |
  		FUSE_NO_OPENDIR_SUPPORT | FUSE_EXPLICIT_INVAL_DATA |
++<<<<<<< HEAD
 +		FUSE_HANDLE_KILLPRIV_V2;
++=======
+ 		FUSE_HANDLE_KILLPRIV_V2 | FUSE_SETXATTR_EXT | FUSE_INIT_EXT |
+ 		FUSE_SECURITY_CTX | FUSE_CREATE_SUPP_GROUP |
+ 		FUSE_HAS_EXPIRE_ONLY;
++>>>>>>> 5cadfbd5a11e (fuse: add feature flag for expire-only)
  #ifdef CONFIG_FUSE_DAX
  	if (fm->fc->dax)
 -		flags |= FUSE_MAP_ALIGNMENT;
 -	if (fuse_is_inode_dax_mode(fm->fc->dax_mode))
 -		flags |= FUSE_HAS_INODE_DAX;
 +		ia->in.flags |= FUSE_MAP_ALIGNMENT;
  #endif
  	if (fm->fc->auto_submounts)
 -		flags |= FUSE_SUBMOUNTS;
 -
 -	ia->in.flags = flags;
 -	ia->in.flags2 = flags >> 32;
 +		ia->in.flags |= FUSE_SUBMOUNTS;
  
  	ia->args.opcode = FUSE_INIT;
  	ia->args.in_numargs = 1;
diff --cc include/uapi/linux/fuse.h
index 0365282961e0,b3fcab13fcd3..000000000000
--- a/include/uapi/linux/fuse.h
+++ b/include/uapi/linux/fuse.h
@@@ -179,6 -179,34 +179,37 @@@
   *  7.33
   *  - add FUSE_HANDLE_KILLPRIV_V2, FUSE_WRITE_KILL_SUIDGID, FATTR_KILL_SUIDGID
   *  - add FUSE_OPEN_KILL_SUIDGID
++<<<<<<< HEAD
++=======
+  *  - extend fuse_setxattr_in, add FUSE_SETXATTR_EXT
+  *  - add FUSE_SETXATTR_ACL_KILL_SGID
+  *
+  *  7.34
+  *  - add FUSE_SYNCFS
+  *
+  *  7.35
+  *  - add FOPEN_NOFLUSH
+  *
+  *  7.36
+  *  - extend fuse_init_in with reserved fields, add FUSE_INIT_EXT init flag
+  *  - add flags2 to fuse_init_in and fuse_init_out
+  *  - add FUSE_SECURITY_CTX init flag
+  *  - add security context to create, mkdir, symlink, and mknod requests
+  *  - add FUSE_HAS_INODE_DAX, FUSE_ATTR_DAX
+  *
+  *  7.37
+  *  - add FUSE_TMPFILE
+  *
+  *  7.38
+  *  - add FUSE_EXPIRE_ONLY flag to fuse_notify_inval_entry
+  *  - add FOPEN_PARALLEL_DIRECT_WRITES
+  *  - add total_extlen to fuse_in_header
+  *  - add FUSE_MAX_NR_SECCTX
+  *  - add extension header
+  *  - add FUSE_EXT_GROUPS
+  *  - add FUSE_CREATE_SUPP_GROUP
+  *  - add FUSE_HAS_EXPIRE_ONLY
++>>>>>>> 5cadfbd5a11e (fuse: add feature flag for expire-only)
   */
  
  #ifndef _LINUX_FUSE_H
@@@ -328,6 -362,15 +359,18 @@@ struct fuse_file_lock 
   *			does not have CAP_FSETID. Additionally upon
   *			write/truncate sgid is killed only if file has group
   *			execute permission. (Same as Linux VFS behavior).
++<<<<<<< HEAD
++=======
+  * FUSE_SETXATTR_EXT:	Server supports extended struct fuse_setxattr_in
+  * FUSE_INIT_EXT: extended fuse_init_in request
+  * FUSE_INIT_RESERVED: reserved, do not use
+  * FUSE_SECURITY_CTX:	add security context to create, mkdir, symlink, and
+  *			mknod
+  * FUSE_HAS_INODE_DAX:  use per inode DAX
+  * FUSE_CREATE_SUPP_GROUP: add supplementary group info to create, mkdir,
+  *			symlink and mknod (single group that matches parent)
+  * FUSE_HAS_EXPIRE_ONLY: kernel supports expiry-only entry invalidation
++>>>>>>> 5cadfbd5a11e (fuse: add feature flag for expire-only)
   */
  #define FUSE_ASYNC_READ		(1 << 0)
  #define FUSE_POSIX_LOCKS	(1 << 1)
@@@ -358,6 -401,14 +401,17 @@@
  #define FUSE_MAP_ALIGNMENT	(1 << 26)
  #define FUSE_SUBMOUNTS		(1 << 27)
  #define FUSE_HANDLE_KILLPRIV_V2	(1 << 28)
++<<<<<<< HEAD
++=======
+ #define FUSE_SETXATTR_EXT	(1 << 29)
+ #define FUSE_INIT_EXT		(1 << 30)
+ #define FUSE_INIT_RESERVED	(1 << 31)
+ /* bits 32..63 get shifted down 32 bits into the flags2 field */
+ #define FUSE_SECURITY_CTX	(1ULL << 32)
+ #define FUSE_HAS_INODE_DAX	(1ULL << 33)
+ #define FUSE_CREATE_SUPP_GROUP	(1ULL << 34)
+ #define FUSE_HAS_EXPIRE_ONLY	(1ULL << 35)
++>>>>>>> 5cadfbd5a11e (fuse: add feature flag for expire-only)
  
  /**
   * CUSE INIT request/reply flags
* Unmerged path fs/fuse/inode.c
* Unmerged path include/uapi/linux/fuse.h
