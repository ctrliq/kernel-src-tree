fortify: Use SIZE_MAX instead of (size_t)-1

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-487.el8
commit-author Kees Cook <keescook@chromium.org>
commit 311fb40aa0569abacc430b0d66ee41470803111f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-487.el8/311fb40a.failed

Clean up uses of "(size_t)-1" in favor of SIZE_MAX.

	Cc: linux-hardening@vger.kernel.org
	Suggested-by: Nick Desaulniers <ndesaulniers@google.com>
	Signed-off-by: Kees Cook <keescook@chromium.org>
(cherry picked from commit 311fb40aa0569abacc430b0d66ee41470803111f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/fortify-string.h
diff --cc include/linux/fortify-string.h
index 04fead270553,e46af17d23d0..000000000000
--- a/include/linux/fortify-string.h
+++ b/include/linux/fortify-string.h
@@@ -2,6 -2,18 +2,21 @@@
  #ifndef _LINUX_FORTIFY_STRING_H_
  #define _LINUX_FORTIFY_STRING_H_
  
++<<<<<<< HEAD
++=======
+ #include <linux/const.h>
+ #include <linux/limits.h>
+ 
+ #define __FORTIFY_INLINE extern __always_inline __gnu_inline __overloadable
+ #define __RENAME(x) __asm__(#x)
+ 
+ void fortify_panic(const char *name) __noreturn __cold;
+ void __read_overflow(void) __compiletime_error("detected read beyond size of object (1st parameter)");
+ void __read_overflow2(void) __compiletime_error("detected read beyond size of object (2nd parameter)");
+ void __read_overflow2_field(size_t avail, size_t wanted) __compiletime_warning("detected read beyond size of field (2nd parameter); maybe use struct_group()?");
+ void __write_overflow(void) __compiletime_error("detected write beyond size of object (1st parameter)");
+ void __write_overflow_field(size_t avail, size_t wanted) __compiletime_warning("detected write beyond size of field (1st parameter); maybe use struct_group()?");
++>>>>>>> 311fb40aa056 (fortify: Use SIZE_MAX instead of (size_t)-1)
  
  #define __compiletime_strlen(p)					\
  ({								\
@@@ -192,51 -272,161 +207,98 @@@ __FORTIFY_INLINE char *strncat(char *p
  	return p;
  }
  
 -__FORTIFY_INLINE void fortify_memset_chk(__kernel_size_t size,
 -					 const size_t p_size,
 -					 const size_t p_size_field)
 +__FORTIFY_INLINE void *memset(void *p, int c, __kernel_size_t size)
  {
 -	if (__builtin_constant_p(size)) {
 -		/*
 -		 * Length argument is a constant expression, so we
 -		 * can perform compile-time bounds checking where
 -		 * buffer sizes are known.
 -		 */
 +	size_t p_size = __builtin_object_size(p, 0);
  
++<<<<<<< HEAD
 +	if (__builtin_constant_p(size) && p_size < size)
 +		__write_overflow();
 +	if (p_size < size)
 +		fortify_panic(__func__);
 +	return __underlying_memset(p, c, size);
++=======
+ 		/* Error when size is larger than enclosing struct. */
+ 		if (p_size > p_size_field && p_size < size)
+ 			__write_overflow();
+ 
+ 		/* Warn when write size is larger than dest field. */
+ 		if (p_size_field < size)
+ 			__write_overflow_field(p_size_field, size);
+ 	}
+ 	/*
+ 	 * At this point, length argument may not be a constant expression,
+ 	 * so run-time bounds checking can be done where buffer sizes are
+ 	 * known. (This is not an "else" because the above checks may only
+ 	 * be compile-time warnings, and we want to still warn for run-time
+ 	 * overflows.)
+ 	 */
+ 
+ 	/*
+ 	 * Always stop accesses beyond the struct that contains the
+ 	 * field, when the buffer's remaining size is known.
+ 	 * (The SIZE_MAX test is to optimize away checks where the buffer
+ 	 * lengths are unknown.)
+ 	 */
+ 	if (p_size != SIZE_MAX && p_size < size)
+ 		fortify_panic("memset");
++>>>>>>> 311fb40aa056 (fortify: Use SIZE_MAX instead of (size_t)-1)
  }
  
 -#define __fortify_memset_chk(p, c, size, p_size, p_size_field) ({	\
 -	size_t __fortify_size = (size_t)(size);				\
 -	fortify_memset_chk(__fortify_size, p_size, p_size_field),	\
 -	__underlying_memset(p, c, __fortify_size);			\
 -})
 -
 -/*
 - * __builtin_object_size() must be captured here to avoid evaluating argument
 - * side-effects further into the macro layers.
 - */
 -#define memset(p, c, s) __fortify_memset_chk(p, c, s,			\
 -		__builtin_object_size(p, 0), __builtin_object_size(p, 1))
 -
 -/*
 - * To make sure the compiler can enforce protection against buffer overflows,
 - * memcpy(), memmove(), and memset() must not be used beyond individual
 - * struct members. If you need to copy across multiple members, please use
 - * struct_group() to create a named mirror of an anonymous struct union.
 - * (e.g. see struct sk_buff.) Read overflow checking is currently only
 - * done when a write overflow is also present, or when building with W=1.
 - *
 - * Mitigation coverage matrix
 - *					Bounds checking at:
 - *					+-------+-------+-------+-------+
 - *					| Compile time  |   Run time    |
 - * memcpy() argument sizes:		| write | read  | write | read  |
 - *        dest     source   length      +-------+-------+-------+-------+
 - * memcpy(known,   known,   constant)	|   y   |   y   |  n/a  |  n/a  |
 - * memcpy(known,   unknown, constant)	|   y   |   n   |  n/a  |   V   |
 - * memcpy(known,   known,   dynamic)	|   n   |   n   |   B   |   B   |
 - * memcpy(known,   unknown, dynamic)	|   n   |   n   |   B   |   V   |
 - * memcpy(unknown, known,   constant)	|   n   |   y   |   V   |  n/a  |
 - * memcpy(unknown, unknown, constant)	|   n   |   n   |   V   |   V   |
 - * memcpy(unknown, known,   dynamic)	|   n   |   n   |   V   |   B   |
 - * memcpy(unknown, unknown, dynamic)	|   n   |   n   |   V   |   V   |
 - *					+-------+-------+-------+-------+
 - *
 - * y = perform deterministic compile-time bounds checking
 - * n = cannot perform deterministic compile-time bounds checking
 - * n/a = no run-time bounds checking needed since compile-time deterministic
 - * B = can perform run-time bounds checking (currently unimplemented)
 - * V = vulnerable to run-time overflow (will need refactoring to solve)
 - *
 - */
 -__FORTIFY_INLINE void fortify_memcpy_chk(__kernel_size_t size,
 -					 const size_t p_size,
 -					 const size_t q_size,
 -					 const size_t p_size_field,
 -					 const size_t q_size_field,
 -					 const char *func)
 +__FORTIFY_INLINE void *memcpy(void *p, const void *q, __kernel_size_t size)
  {
 -	if (__builtin_constant_p(size)) {
 -		/*
 -		 * Length argument is a constant expression, so we
 -		 * can perform compile-time bounds checking where
 -		 * buffer sizes are known.
 -		 */
 +	size_t p_size = __builtin_object_size(p, 0);
 +	size_t q_size = __builtin_object_size(q, 0);
  
 -		/* Error when size is larger than enclosing struct. */
 -		if (p_size > p_size_field && p_size < size)
 +	if (__builtin_constant_p(size)) {
 +		if (p_size < size)
  			__write_overflow();
 -		if (q_size > q_size_field && q_size < size)
 +		if (q_size < size)
  			__read_overflow2();
 -
 -		/* Warn when write size argument larger than dest field. */
 -		if (p_size_field < size)
 -			__write_overflow_field(p_size_field, size);
 -		/*
 -		 * Warn for source field over-read when building with W=1
 -		 * or when an over-write happened, so both can be fixed at
 -		 * the same time.
 -		 */
 -		if ((IS_ENABLED(KBUILD_EXTRA_WARN1) || p_size_field < size) &&
 -		    q_size_field < size)
 -			__read_overflow2_field(q_size_field, size);
  	}
++<<<<<<< HEAD
 +	if (p_size < size || q_size < size)
 +		fortify_panic(__func__);
 +	return __underlying_memcpy(p, q, size);
++=======
+ 	/*
+ 	 * At this point, length argument may not be a constant expression,
+ 	 * so run-time bounds checking can be done where buffer sizes are
+ 	 * known. (This is not an "else" because the above checks may only
+ 	 * be compile-time warnings, and we want to still warn for run-time
+ 	 * overflows.)
+ 	 */
+ 
+ 	/*
+ 	 * Always stop accesses beyond the struct that contains the
+ 	 * field, when the buffer's remaining size is known.
+ 	 * (The SIZE_MAX test is to optimize away checks where the buffer
+ 	 * lengths are unknown.)
+ 	 */
+ 	if ((p_size != SIZE_MAX && p_size < size) ||
+ 	    (q_size != SIZE_MAX && q_size < size))
+ 		fortify_panic(func);
++>>>>>>> 311fb40aa056 (fortify: Use SIZE_MAX instead of (size_t)-1)
  }
  
 -#define __fortify_memcpy_chk(p, q, size, p_size, q_size,		\
 -			     p_size_field, q_size_field, op) ({		\
 -	size_t __fortify_size = (size_t)(size);				\
 -	fortify_memcpy_chk(__fortify_size, p_size, q_size,		\
 -			   p_size_field, q_size_field, #op);		\
 -	__underlying_##op(p, q, __fortify_size);			\
 -})
 +__FORTIFY_INLINE void *memmove(void *p, const void *q, __kernel_size_t size)
 +{
 +	size_t p_size = __builtin_object_size(p, 0);
 +	size_t q_size = __builtin_object_size(q, 0);
  
 -/*
 - * __builtin_object_size() must be captured here to avoid evaluating argument
 - * side-effects further into the macro layers.
 - */
 -#define memcpy(p, q, s)  __fortify_memcpy_chk(p, q, s,			\
 -		__builtin_object_size(p, 0), __builtin_object_size(q, 0), \
 -		__builtin_object_size(p, 1), __builtin_object_size(q, 1), \
 -		memcpy)
 -#define memmove(p, q, s)  __fortify_memcpy_chk(p, q, s,			\
 -		__builtin_object_size(p, 0), __builtin_object_size(q, 0), \
 -		__builtin_object_size(p, 1), __builtin_object_size(q, 1), \
 -		memmove)
 +	if (__builtin_constant_p(size)) {
 +		if (p_size < size)
 +			__write_overflow();
 +		if (q_size < size)
 +			__read_overflow2();
 +	}
 +	if (p_size < size || q_size < size)
 +		fortify_panic(__func__);
 +	return __underlying_memmove(p, q, size);
 +}
  
  extern void *__real_memscan(void *, int, __kernel_size_t) __RENAME(memscan);
 -__FORTIFY_INLINE void *memscan(void * const POS0 p, int c, __kernel_size_t size)
 +__FORTIFY_INLINE void *memscan(void *p, int c, __kernel_size_t size)
  {
  	size_t p_size = __builtin_object_size(p, 0);
  
@@@ -305,7 -498,8 +367,12 @@@ __FORTIFY_INLINE char *strcpy(char *p, 
  	size_t q_size = __builtin_object_size(q, 1);
  	size_t size;
  
++<<<<<<< HEAD
 +	if (p_size == (size_t)-1 && q_size == (size_t)-1)
++=======
+ 	/* If neither buffer size is known, immediately give up. */
+ 	if (p_size == SIZE_MAX && q_size == SIZE_MAX)
++>>>>>>> 311fb40aa056 (fortify: Use SIZE_MAX instead of (size_t)-1)
  		return __underlying_strcpy(p, q);
  	size = strlen(q) + 1;
  	/* Compile-time check for const size overflow. */
* Unmerged path include/linux/fortify-string.h
