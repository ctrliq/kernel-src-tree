lib: string_helpers: provide kfree_strarray()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-487.el8
commit-author Bartosz Golaszewski <bgolaszewski@baylibre.com>
commit 0fd16012adc0a994a7ce980a78e22e4de6220778
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-487.el8/0fd16012.failed

There's a common pattern of dynamically allocating an array of char
pointers and then also dynamically allocating each string in this
array. Provide a helper for freeing such a string array with one call.

	Signed-off-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>
	Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
(cherry picked from commit 0fd16012adc0a994a7ce980a78e22e4de6220778)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/string_helpers.h
diff --cc include/linux/string_helpers.h
index b823da78b421,fa06dcdc481e..000000000000
--- a/include/linux/string_helpers.h
+++ b/include/linux/string_helpers.h
@@@ -95,24 -94,6 +95,28 @@@ char *kstrdup_quotable(const char *src
  char *kstrdup_quotable_cmdline(struct task_struct *task, gfp_t gfp);
  char *kstrdup_quotable_file(struct file *file, gfp_t gfp);
  
++<<<<<<< HEAD
 +static inline const char *str_yes_no(bool v)
 +{
 +	return v ? "yes" : "no";
 +}
 +
 +static inline const char *str_on_off(bool v)
 +{
 +	return v ? "on" : "off";
 +}
 +
 +static inline const char *str_enable_disable(bool v)
 +{
 +	return v ? "enable" : "disable";
 +}
 +
 +static inline const char *str_enabled_disabled(bool v)
 +{
 +	return v ? "enabled" : "disabled";
 +}
++=======
+ void kfree_strarray(char **array, size_t n);
++>>>>>>> 0fd16012adc0 (lib: string_helpers: provide kfree_strarray())
  
  #endif
* Unmerged path include/linux/string_helpers.h
diff --git a/lib/string_helpers.c b/lib/string_helpers.c
index 9ca19918ca26..3eb77036b3b2 100644
--- a/lib/string_helpers.c
+++ b/lib/string_helpers.c
@@ -645,3 +645,26 @@ char *kstrdup_quotable_file(struct file *file, gfp_t gfp)
 	return pathname;
 }
 EXPORT_SYMBOL_GPL(kstrdup_quotable_file);
+
+/**
+ * kfree_strarray - free a number of dynamically allocated strings contained
+ *                  in an array and the array itself
+ *
+ * @array: Dynamically allocated array of strings to free.
+ * @n: Number of strings (starting from the beginning of the array) to free.
+ *
+ * Passing a non-NULL @array and @n == 0 as well as NULL @array are valid
+ * use-cases. If @array is NULL, the function does nothing.
+ */
+void kfree_strarray(char **array, size_t n)
+{
+	unsigned int i;
+
+	if (!array)
+		return;
+
+	for (i = 0; i < n; i++)
+		kfree(array[i]);
+	kfree(array);
+}
+EXPORT_SYMBOL_GPL(kfree_strarray);
