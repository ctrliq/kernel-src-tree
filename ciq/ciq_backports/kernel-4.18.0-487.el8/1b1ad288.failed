kallsyms: remove arch specific text and data check

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-487.el8
commit-author Kefeng Wang <wangkefeng.wang@huawei.com>
commit 1b1ad288b8f1b11f83396e537003722897ecc12b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-487.el8/1b1ad288.failed

Patch series "sections: Unify kernel sections range check and use", v4.

There are three head files(kallsyms.h, kernel.h and sections.h) which
include the kernel sections range check, let's make some cleanup and unify
them.

1. cleanup arch specific text/data check and fix address boundary check
   in kallsyms.h

2. make all the basic/core kernel range check function into sections.h

3. update all the callers, and use the helper in sections.h to simplify
   the code

After this series, we have 5 APIs about kernel sections range check in
sections.h

 * is_kernel_rodata()		--- already in sections.h
 * is_kernel_core_data()	--- come from core_kernel_data() in kernel.h
 * is_kernel_inittext()		--- come from kernel.h and kallsyms.h
 * __is_kernel_text()		--- add new internal helper
 * __is_kernel()		--- add new internal helper

Note: For the last two helpers, people should not use directly, consider to
      use corresponding function in kallsyms.h.

This patch (of 11):

Remove arch specific text and data check after commit 4ba66a976072 ("arch:
remove blackfin port"), no need arch-specific text/data check.

Link: https://lkml.kernel.org/r/20210930071143.63410-1-wangkefeng.wang@huawei.com
Link: https://lkml.kernel.org/r/20210930071143.63410-2-wangkefeng.wang@huawei.com
	Signed-off-by: Kefeng Wang <wangkefeng.wang@huawei.com>
	Reviewed-by: Sergey Senozhatsky <senozhatsky@chromium.org>
	Cc: Arnd Bergmann <arnd@arndb.de>
	Cc: Steven Rostedt <rostedt@goodmis.org>
	Cc: Ingo Molnar <mingo@redhat.com>
	Cc: David S. Miller <davem@davemloft.net>
	Cc: Alexei Starovoitov <ast@kernel.org>
	Cc: Andrey Ryabinin <ryabinin.a.a@gmail.com>
	Cc: Michael Ellerman <mpe@ellerman.id.au>
	Cc: Benjamin Herrenschmidt <benh@kernel.crashing.org>
	Cc: Paul Mackerras <paulus@samba.org>
	Cc: Christophe Leroy <christophe.leroy@csgroup.eu>
	Cc: Kefeng Wang <wangkefeng.wang@huawei.com>
	Cc: Alexander Potapenko <glider@google.com>
	Cc: Andrey Konovalov <andreyknvl@gmail.com>
	Cc: Borislav Petkov <bp@alien8.de>
	Cc: Dmitry Vyukov <dvyukov@google.com>
	Cc: Ivan Kokshaysky <ink@jurassic.park.msu.ru>
	Cc: Matt Turner <mattst88@gmail.com>
	Cc: Michal Simek <monstr@monstr.eu>
	Cc: Petr Mladek <pmladek@suse.com>
	Cc: Richard Henderson <rth@twiddle.net>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 1b1ad288b8f1b11f83396e537003722897ecc12b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/asm-generic/sections.h
diff --cc include/asm-generic/sections.h
index 69ab5942bd14,614fc809de34..000000000000
--- a/include/asm-generic/sections.h
+++ b/include/asm-generic/sections.h
@@@ -60,40 -60,10 +60,43 @@@ extern __visible const void __nosave_be
  
  /* Function descriptor handling (if any).  Override in asm/sections.h */
  #ifndef dereference_function_descriptor
 -#define dereference_function_descriptor(p) ((void *)(p))
 -#define dereference_kernel_function_descriptor(p) ((void *)(p))
 +#define dereference_function_descriptor(p) (p)
 +#define dereference_kernel_function_descriptor(p) (p)
  #endif
  
++<<<<<<< HEAD
 +/* random extra sections (if any).  Override
 + * in asm/sections.h */
 +#ifndef arch_is_kernel_text
 +static inline int arch_is_kernel_text(unsigned long addr)
 +{
 +	return 0;
 +}
 +#endif
 +
 +#ifndef arch_is_kernel_data
 +static inline int arch_is_kernel_data(unsigned long addr)
 +{
 +	return 0;
 +}
 +#endif
 +
 +/*
 + * Check if an address is part of freed initmem. This is needed on architectures
 + * with virt == phys kernel mapping, for code that wants to check if an address
 + * is part of a static object within [_stext, _end]. After initmem is freed,
 + * memory can be allocated from it, and such allocations would then have
 + * addresses within the range [_stext, _end].
 + */
 +#ifndef arch_is_kernel_initmem_freed
 +static inline int arch_is_kernel_initmem_freed(unsigned long addr)
 +{
 +	return 0;
 +}
 +#endif
 +
++=======
++>>>>>>> 1b1ad288b8f1 (kallsyms: remove arch specific text and data check)
  /**
   * memory_contains - checks if an object is contained within a memory region
   * @begin: virtual address of the beginning of the memory region
* Unmerged path include/asm-generic/sections.h
diff --git a/include/linux/kallsyms.h b/include/linux/kallsyms.h
index 1f96ce2b47df..3d817e1333cb 100644
--- a/include/linux/kallsyms.h
+++ b/include/linux/kallsyms.h
@@ -31,8 +31,7 @@ static inline int is_kernel_inittext(unsigned long addr)
 
 static inline int is_kernel_text(unsigned long addr)
 {
-	if ((addr >= (unsigned long)_stext && addr <= (unsigned long)_etext) ||
-	    arch_is_kernel_text(addr))
+	if ((addr >= (unsigned long)_stext && addr <= (unsigned long)_etext))
 		return 1;
 	return in_gate_area_no_mm(addr);
 }
diff --git a/kernel/locking/lockdep.c b/kernel/locking/lockdep.c
index 363949d63428..55fba6c55942 100644
--- a/kernel/locking/lockdep.c
+++ b/kernel/locking/lockdep.c
@@ -802,9 +802,6 @@ static int static_obj(const void *obj)
 	if ((addr >= start) && (addr < end))
 		return 1;
 
-	if (arch_is_kernel_data(addr))
-		return 1;
-
 	/*
 	 * in-kernel percpu var?
 	 */
