kernfs: dont take i_lock on inode attr read

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-487.el8
commit-author Ian Kent <raven@themaw.net>
commit aa1d058d48f292aa138e33ad12b7b4d18b5407cd
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-487.el8/aa1d058d.failed

The kernfs write lock is held when the kernfs node inode attributes
are updated. Therefore, when either kernfs_iop_getattr() or
kernfs_iop_permission() are called the kernfs node inode attributes
won't change.

Consequently concurrent kernfs_refresh_inode() calls always copy the
same values from the kernfs node.

So there's no need to take the inode i_lock to get consistent values
for generic_fillattr() and generic_permission(), the kernfs read lock
is sufficient.

	Cc: Tejun Heo <tj@kernel.org>
	Signed-off-by: Ian Kent <raven@themaw.net>
Link: https://lore.kernel.org/r/166606036215.13363.1288735296954908554.stgit@donald.themaw.net
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit aa1d058d48f292aa138e33ad12b7b4d18b5407cd)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/kernfs/inode.c
diff --cc fs/kernfs/inode.c
index cf25ff8c88c2,74f3453f4639..000000000000
--- a/fs/kernfs/inode.c
+++ b/fs/kernfs/inode.c
@@@ -187,13 -187,12 +187,20 @@@ int kernfs_iop_getattr(const struct pat
  {
  	struct inode *inode = d_inode(path->dentry);
  	struct kernfs_node *kn = inode->i_private;
 -	struct kernfs_root *root = kernfs_root(kn);
  
++<<<<<<< HEAD
 +	down_read(&kernfs_rwsem);
 +	spin_lock(&inode->i_lock);
 +	kernfs_refresh_inode(kn, inode);
 +	generic_fillattr(inode, stat);
 +	spin_unlock(&inode->i_lock);
 +	up_read(&kernfs_rwsem);
++=======
+ 	down_read(&root->kernfs_rwsem);
+ 	kernfs_refresh_inode(kn, inode);
+ 	generic_fillattr(&init_user_ns, inode, stat);
+ 	up_read(&root->kernfs_rwsem);
++>>>>>>> aa1d058d48f2 (kernfs: dont take i_lock on inode attr read)
  
  	return 0;
  }
@@@ -282,13 -283,12 +289,20 @@@ int kernfs_iop_permission(struct inode 
  		return -ECHILD;
  
  	kn = inode->i_private;
 -	root = kernfs_root(kn);
  
++<<<<<<< HEAD
 +	down_read(&kernfs_rwsem);
 +	spin_lock(&inode->i_lock);
 +	kernfs_refresh_inode(kn, inode);
 +	ret = generic_permission(inode, mask);
 +	spin_unlock(&inode->i_lock);
 +	up_read(&kernfs_rwsem);
++=======
+ 	down_read(&root->kernfs_rwsem);
+ 	kernfs_refresh_inode(kn, inode);
+ 	ret = generic_permission(&init_user_ns, inode, mask);
+ 	up_read(&root->kernfs_rwsem);
++>>>>>>> aa1d058d48f2 (kernfs: dont take i_lock on inode attr read)
  
  	return ret;
  }
* Unmerged path fs/kernfs/inode.c
