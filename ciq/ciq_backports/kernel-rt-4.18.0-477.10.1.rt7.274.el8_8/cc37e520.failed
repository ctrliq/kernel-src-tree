perf/x86/amd: Make Zen3 branch sampling opt-in

jira LE-1907
Rebuild_History Non-Buildable kernel-rt-4.18.0-477.10.1.rt7.274.el8_8
commit-author Stephane Eranian <eranian@google.com>
commit cc37e520a236069c0de0e7ea455082fa11c73b12
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-rt-4.18.0-477.10.1.rt7.274.el8_8/cc37e520.failed

Add a kernel config option CONFIG_PERF_EVENTS_AMD_BRS
to make the support for AMD Zen3 Branch Sampling (BRS) an opt-in
compile time option.

	Signed-off-by: Stephane Eranian <eranian@google.com>
	Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
Link: https://lore.kernel.org/r/20220322221517.2510440-8-eranian@google.com
(cherry picked from commit cc37e520a236069c0de0e7ea455082fa11c73b12)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/events/amd/Makefile
#	arch/x86/events/perf_event.h
diff --cc arch/x86/events/amd/Makefile
index 6cbe38d5fd9d,b9f5d4610256..000000000000
--- a/arch/x86/events/amd/Makefile
+++ b/arch/x86/events/amd/Makefile
@@@ -1,5 -1,6 +1,9 @@@
  # SPDX-License-Identifier: GPL-2.0
  obj-$(CONFIG_CPU_SUP_AMD)		+= core.o
++<<<<<<< HEAD
++=======
+ obj-$(CONFIG_PERF_EVENTS_AMD_BRS)	+= brs.o
++>>>>>>> cc37e520a236 (perf/x86/amd: Make Zen3 branch sampling opt-in)
  obj-$(CONFIG_PERF_EVENTS_AMD_POWER)	+= power.o
  obj-$(CONFIG_X86_LOCAL_APIC)		+= ibs.o
  obj-$(CONFIG_PERF_EVENTS_AMD_UNCORE)	+= amd-uncore.o
diff --cc arch/x86/events/perf_event.h
index 139832e590d3,ef27aee04b13..000000000000
--- a/arch/x86/events/perf_event.h
+++ b/arch/x86/events/perf_event.h
@@@ -1222,6 -1218,87 +1222,90 @@@ static inline bool fixed_counter_disabl
  #ifdef CONFIG_CPU_SUP_AMD
  
  int amd_pmu_init(void);
++<<<<<<< HEAD
++=======
+ 
+ #ifdef CONFIG_PERF_EVENTS_AMD_BRS
+ int amd_brs_init(void);
+ void amd_brs_disable(void);
+ void amd_brs_enable(void);
+ void amd_brs_enable_all(void);
+ void amd_brs_disable_all(void);
+ void amd_brs_drain(void);
+ void amd_brs_disable_all(void);
+ int amd_brs_setup_filter(struct perf_event *event);
+ void amd_brs_reset(void);
+ 
+ static inline void amd_pmu_brs_add(struct perf_event *event)
+ {
+ 	struct cpu_hw_events *cpuc = this_cpu_ptr(&cpu_hw_events);
+ 
+ 	perf_sched_cb_inc(event->ctx->pmu);
+ 	cpuc->lbr_users++;
+ 	/*
+ 	 * No need to reset BRS because it is reset
+ 	 * on brs_enable() and it is saturating
+ 	 */
+ }
+ 
+ static inline void amd_pmu_brs_del(struct perf_event *event)
+ {
+ 	struct cpu_hw_events *cpuc = this_cpu_ptr(&cpu_hw_events);
+ 
+ 	cpuc->lbr_users--;
+ 	WARN_ON_ONCE(cpuc->lbr_users < 0);
+ 
+ 	perf_sched_cb_dec(event->ctx->pmu);
+ }
+ 
+ void amd_pmu_brs_sched_task(struct perf_event_context *ctx, bool sched_in);
+ 
+ static inline s64 amd_brs_adjust_period(s64 period)
+ {
+ 	if (period > x86_pmu.lbr_nr)
+ 		return period - x86_pmu.lbr_nr;
+ 
+ 	return period;
+ }
+ #else
+ static inline int amd_brs_init(void)
+ {
+ 	return 0;
+ }
+ static inline void amd_brs_disable(void) {}
+ static inline void amd_brs_enable(void) {}
+ static inline void amd_brs_drain(void) {}
+ static inline void amd_brs_lopwr_init(void) {}
+ static inline void amd_brs_disable_all(void) {}
+ static inline int amd_brs_setup_filter(struct perf_event *event)
+ {
+ 	return 0;
+ }
+ static inline void amd_brs_reset(void) {}
+ 
+ static inline void amd_pmu_brs_add(struct perf_event *event)
+ {
+ }
+ 
+ static inline void amd_pmu_brs_del(struct perf_event *event)
+ {
+ }
+ 
+ static inline void amd_pmu_brs_sched_task(struct perf_event_context *ctx, bool sched_in)
+ {
+ }
+ 
+ static inline s64 amd_brs_adjust_period(s64 period)
+ {
+ 	return period;
+ }
+ 
+ static inline void amd_brs_enable_all(void)
+ {
+ }
+ 
+ #endif
++>>>>>>> cc37e520a236 (perf/x86/amd: Make Zen3 branch sampling opt-in)
  
  #else /* CONFIG_CPU_SUP_AMD */
  
diff --git a/arch/x86/events/Kconfig b/arch/x86/events/Kconfig
index 03b8674b192c..e765804caa15 100644
--- a/arch/x86/events/Kconfig
+++ b/arch/x86/events/Kconfig
@@ -44,4 +44,12 @@ config PERF_EVENTS_AMD_UNCORE
 
 	  To compile this driver as a module, choose M here: the
 	  module will be called 'amd-uncore'.
+
+config PERF_EVENTS_AMD_BRS
+	depends on PERF_EVENTS && CPU_SUP_AMD
+	bool "AMD Zen3 Branch Sampling support"
+	help
+	  Enable AMD Zen3 branch sampling support (BRS) which samples up to
+	  16 consecutive taken branches in registers.
+
 endmenu
* Unmerged path arch/x86/events/amd/Makefile
* Unmerged path arch/x86/events/perf_event.h
