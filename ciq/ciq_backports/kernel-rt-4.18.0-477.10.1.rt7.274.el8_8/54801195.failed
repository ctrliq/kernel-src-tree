usb: xhci-mtk: relax TT periodic bandwidth allocation

jira LE-1907
Rebuild_History Non-Buildable kernel-rt-4.18.0-477.10.1.rt7.274.el8_8
commit-author Ikjoon Jang <ikjn@chromium.org>
commit 548011957d1d72e0b662300c8b32b81d593b796e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-rt-4.18.0-477.10.1.rt7.274.el8_8/54801195.failed

Currently xhci-mtk needs software-managed bandwidth allocation for
periodic endpoints, it allocates the microframe index for the first
start-split packet for each endpoint. As this index allocation logic
should avoid the conflicts with other full/low-speed periodic endpoints,
it uses the worst case byte budgets on high-speed bus bandwidth
For example, for an isochronos IN endpoint with 192 bytes budget,
it will consume the whole 4 u-frames(188 * 4) while the actual
full-speed bus budget should be just 192bytes.

This patch changes the low/full-speed bandwidth allocation logic
to use "approximate" best case budget for lower speed bandwidth
management. For the same endpoint from the above example, the
approximate best case budget is now reduced to (188 * 2) bytes.

Without this patch, many usb audio headsets with 3 interfaces
(audio input, audio output, and HID) cannot be configured
on xhci-mtk.

	Signed-off-by: Ikjoon Jang <ikjn@chromium.org>
Link: https://lore.kernel.org/r/20210805133937.1.Ia8174b875bc926c12ce427a5a1415dea31cc35ae@changeid
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit 548011957d1d72e0b662300c8b32b81d593b796e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/usb/host/xhci-mtk-sch.c
diff --cc drivers/usb/host/xhci-mtk-sch.c
index 06a6b19acaae,46cbf5d54f4f..000000000000
--- a/drivers/usb/host/xhci-mtk-sch.c
+++ b/drivers/usb/host/xhci-mtk-sch.c
@@@ -401,20 -456,21 +401,36 @@@ static void update_bus_bw(struct mu3h_s
  static int check_fs_bus_bw(struct mu3h_sch_ep_info *sch_ep, int offset)
  {
  	struct mu3h_sch_tt *tt = sch_ep->sch_tt;
 -	u32 num_esit, tmp;
 +	u32 tmp;
  	int base;
++<<<<<<< HEAD
 +	int i, j, k;
 +
 +	for (i = 0; i < sch_ep->num_esit; i++) {
 +		base = offset + i * sch_ep->esit;
 +
 +		/*
 +		 * Compared with hs bus, no matter what ep type,
 +		 * the hub will always delay one uframe to send data
 +		 */
 +		for (j = 0; j < sch_ep->num_budget_microframes; j++) {
 +			k = XHCI_MTK_BW_INDEX(base + j);
 +			tmp = tt->fs_bus_bw[k] + sch_ep->bw_cost_per_microframe;
++=======
+ 	int i, j;
+ 	u8 uframes = DIV_ROUND_UP(sch_ep->maxpkt, FS_PAYLOAD_MAX);
+ 
+ 	num_esit = XHCI_MTK_MAX_ESIT / sch_ep->esit;
+ 
+ 	if (sch_ep->ep_type == INT_IN_EP || sch_ep->ep_type == ISOC_IN_EP)
+ 		offset++;
+ 
+ 	for (i = 0; i < num_esit; i++) {
+ 		base = offset + i * sch_ep->esit;
+ 
+ 		for (j = 0; j < uframes; j++) {
+ 			tmp = tt->fs_bus_bw[base + j] + sch_ep->bw_cost_per_microframe;
++>>>>>>> 548011957d1d (usb: xhci-mtk: relax TT periodic bandwidth allocation)
  			if (tmp > FS_PAYLOAD_MAX)
  				return -ESCH_BW_OVERFLOW;
  		}
@@@ -488,17 -544,27 +504,35 @@@ static int check_sch_tt(struct mu3h_sch
  static void update_sch_tt(struct mu3h_sch_ep_info *sch_ep, bool used)
  {
  	struct mu3h_sch_tt *tt = sch_ep->sch_tt;
 -	u32 base, num_esit;
  	int bw_updated;
 +	u32 base;
  	int i, j;
+ 	int offset = sch_ep->offset;
+ 	u8 uframes = DIV_ROUND_UP(sch_ep->maxpkt, FS_PAYLOAD_MAX);
  
 -	num_esit = XHCI_MTK_MAX_ESIT / sch_ep->esit;
 +	bw_updated = sch_ep->bw_cost_per_microframe * (used ? 1 : -1);
  
++<<<<<<< HEAD
 +	for (i = 0; i < sch_ep->num_esit; i++) {
 +		base = sch_ep->offset + i * sch_ep->esit;
 +
 +		for (j = 0; j < sch_ep->num_budget_microframes; j++)
 +			tt->fs_bus_bw[XHCI_MTK_BW_INDEX(base + j)] += bw_updated;
++=======
+ 	if (used)
+ 		bw_updated = sch_ep->bw_cost_per_microframe;
+ 	else
+ 		bw_updated = -sch_ep->bw_cost_per_microframe;
+ 
+ 	if (sch_ep->ep_type == INT_IN_EP || sch_ep->ep_type == ISOC_IN_EP)
+ 		offset++;
+ 
+ 	for (i = 0; i < num_esit; i++) {
+ 		base = offset + i * sch_ep->esit;
+ 
+ 		for (j = 0; j < uframes; j++)
+ 			tt->fs_bus_bw[base + j] += bw_updated;
++>>>>>>> 548011957d1d (usb: xhci-mtk: relax TT periodic bandwidth allocation)
  	}
  
  	if (used)
* Unmerged path drivers/usb/host/xhci-mtk-sch.c
