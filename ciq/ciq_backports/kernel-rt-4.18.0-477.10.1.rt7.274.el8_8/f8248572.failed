devres: provide devm_krealloc()

jira LE-1907
Rebuild_History Non-Buildable kernel-rt-4.18.0-477.10.1.rt7.274.el8_8
commit-author Bartosz Golaszewski <bgolaszewski@baylibre.com>
commit f82485722e5de5ebb08d3a1dd7302203346dbff9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-rt-4.18.0-477.10.1.rt7.274.el8_8/f8248572.failed

Implement the managed variant of krealloc(). This function works with
all memory allocated by devm_kmalloc() (or devres functions using it
implicitly like devm_kmemdup(), devm_kstrdup() etc.).

Managed realloc'ed chunks can be manually released with devm_kfree().

	Signed-off-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>
	Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Link: https://lore.kernel.org/r/20200824173859.4910-2-brgl@bgdev.pl
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit f82485722e5de5ebb08d3a1dd7302203346dbff9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/base/devres.c
#	include/linux/device.h
diff --cc drivers/base/devres.c
index ab504d4e5692,586e9a75c840..000000000000
--- a/drivers/base/devres.c
+++ b/drivers/base/devres.c
@@@ -131,8 -126,30 +131,9 @@@ static void add_dr(struct device *dev, 
  	list_add_tail(&node->entry, &dev->devres_head);
  }
  
 -static void replace_dr(struct device *dev,
 -		       struct devres_node *old, struct devres_node *new)
 -{
 -	devres_log(dev, old, "REPLACE");
 -	BUG_ON(!list_empty(&new->entry));
 -	list_replace(&old->entry, &new->entry);
 -}
 -
 -#ifdef CONFIG_DEBUG_DEVRES
 -void * __devres_alloc_node(dr_release_t release, size_t size, gfp_t gfp, int nid,
 -		      const char *name)
 -{
 -	struct devres *dr;
 -
 -	dr = alloc_dr(release, size, gfp | __GFP_ZERO, nid);
 -	if (unlikely(!dr))
 -		return NULL;
 -	set_node_dbginfo(&dr->node, name, size);
 -	return dr->data;
 -}
 -EXPORT_SYMBOL_GPL(__devres_alloc_node);
 -#else
++<<<<<<< HEAD
  /**
 - * devres_alloc - Allocate device resource data
 + * __devres_alloc_node - Allocate device resource data
   * @release: Release function devres will be associated with
   * @size: Allocation size
   * @gfp: Allocation flags
@@@ -146,8 -162,7 +147,21 @@@
   * RETURNS:
   * Pointer to allocated devres on success, NULL on failure.
   */
 -void * devres_alloc_node(dr_release_t release, size_t size, gfp_t gfp, int nid)
 +void *__devres_alloc_node(dr_release_t release, size_t size, gfp_t gfp, int nid,
 +			  const char *name)
++=======
++static void replace_dr(struct device *dev,
++		       struct devres_node *old, struct devres_node *new)
++{
++	devres_log(dev, old, "REPLACE");
++	BUG_ON(!list_empty(&new->entry));
++	list_replace(&old->entry, &new->entry);
++}
++
++#ifdef CONFIG_DEBUG_DEVRES
++void * __devres_alloc_node(dr_release_t release, size_t size, gfp_t gfp, int nid,
++		      const char *name)
++>>>>>>> f82485722e5d (devres: provide devm_krealloc())
  {
  	struct devres *dr;
  
diff --cc include/linux/device.h
index 7afc61dfd13a,85d5c28bed93..000000000000
--- a/include/linux/device.h
+++ b/include/linux/device.h
@@@ -898,38 -172,46 +898,48 @@@ extern void *__devres_alloc_node(dr_rel
  	__devres_alloc_node(release, size, gfp, NUMA_NO_NODE, #release)
  #define devres_alloc_node(release, size, gfp, nid) \
  	__devres_alloc_node(release, size, gfp, nid, #release)
 -#else
 -void *devres_alloc_node(dr_release_t release, size_t size,
 -			gfp_t gfp, int nid) __malloc;
 -static inline void *devres_alloc(dr_release_t release, size_t size, gfp_t gfp)
 -{
 -	return devres_alloc_node(release, size, gfp, NUMA_NO_NODE);
 -}
 -#endif
  
 -void devres_for_each_res(struct device *dev, dr_release_t release,
 -			 dr_match_t match, void *match_data,
 -			 void (*fn)(struct device *, void *, void *),
 -			 void *data);
 -void devres_free(void *res);
 -void devres_add(struct device *dev, void *res);
 -void *devres_find(struct device *dev, dr_release_t release,
 -		  dr_match_t match, void *match_data);
 -void *devres_get(struct device *dev, void *new_res,
 -		 dr_match_t match, void *match_data);
 -void *devres_remove(struct device *dev, dr_release_t release,
 -		    dr_match_t match, void *match_data);
 -int devres_destroy(struct device *dev, dr_release_t release,
 -		   dr_match_t match, void *match_data);
 -int devres_release(struct device *dev, dr_release_t release,
 -		   dr_match_t match, void *match_data);
 +extern void devres_for_each_res(struct device *dev, dr_release_t release,
 +				dr_match_t match, void *match_data,
 +				void (*fn)(struct device *, void *, void *),
 +				void *data);
 +extern void devres_free(void *res);
 +extern void devres_add(struct device *dev, void *res);
 +extern void *devres_find(struct device *dev, dr_release_t release,
 +			 dr_match_t match, void *match_data);
 +extern void *devres_get(struct device *dev, void *new_res,
 +			dr_match_t match, void *match_data);
 +extern void *devres_remove(struct device *dev, dr_release_t release,
 +			   dr_match_t match, void *match_data);
 +extern int devres_destroy(struct device *dev, dr_release_t release,
 +			  dr_match_t match, void *match_data);
 +extern int devres_release(struct device *dev, dr_release_t release,
 +			  dr_match_t match, void *match_data);
  
  /* devres group */
 -void * __must_check devres_open_group(struct device *dev, void *id, gfp_t gfp);
 -void devres_close_group(struct device *dev, void *id);
 -void devres_remove_group(struct device *dev, void *id);
 -int devres_release_group(struct device *dev, void *id);
 +extern void * __must_check devres_open_group(struct device *dev, void *id,
 +					     gfp_t gfp);
 +extern void devres_close_group(struct device *dev, void *id);
 +extern void devres_remove_group(struct device *dev, void *id);
 +extern int devres_release_group(struct device *dev, void *id);
  
  /* managed devm_k.alloc/kfree for device drivers */
++<<<<<<< HEAD
 +extern void *devm_kmalloc(struct device *dev, size_t size, gfp_t gfp) __malloc;
 +extern __printf(3, 0)
 +char *devm_kvasprintf(struct device *dev, gfp_t gfp, const char *fmt,
 +		      va_list ap) __malloc;
 +extern __printf(3, 4)
 +char *devm_kasprintf(struct device *dev, gfp_t gfp, const char *fmt, ...) __malloc;
++=======
+ void *devm_kmalloc(struct device *dev, size_t size, gfp_t gfp) __malloc;
+ void *devm_krealloc(struct device *dev, void *ptr, size_t size,
+ 		    gfp_t gfp) __must_check;
+ __printf(3, 0) char *devm_kvasprintf(struct device *dev, gfp_t gfp,
+ 				     const char *fmt, va_list ap) __malloc;
+ __printf(3, 4) char *devm_kasprintf(struct device *dev, gfp_t gfp,
+ 				    const char *fmt, ...) __malloc;
++>>>>>>> f82485722e5d (devres: provide devm_krealloc())
  static inline void *devm_kzalloc(struct device *dev, size_t size, gfp_t gfp)
  {
  	return devm_kmalloc(dev, size, gfp | __GFP_ZERO);
diff --git a/Documentation/driver-model/devres.txt b/Documentation/driver-model/devres.txt
index 0d49220b6377..eaeced93593f 100644
--- a/Documentation/driver-model/devres.txt
+++ b/Documentation/driver-model/devres.txt
@@ -338,6 +338,7 @@ MEM
   devm_kmalloc()
   devm_kmalloc_array()
   devm_kmemdup()
+  devm_krealloc()
   devm_kstrdup()
   devm_kvasprintf()
   devm_kzalloc()
* Unmerged path drivers/base/devres.c
* Unmerged path include/linux/device.h
