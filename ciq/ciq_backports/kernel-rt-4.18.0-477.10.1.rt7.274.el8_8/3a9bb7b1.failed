mm/page_io: count submission time as thrashing delay for delayacct

jira LE-1907
Rebuild_History Non-Buildable kernel-rt-4.18.0-477.10.1.rt7.274.el8_8
commit-author Yang Yang <yang.yang29@zte.com.cn>
commit 3a9bb7b1879bef057a5dbff1dac1fa1411638064
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-rt-4.18.0-477.10.1.rt7.274.el8_8/3a9bb7b1.failed

Once upon a time, we only support accounting thrashing of page cache. 
Then Joonsoo introduced workingset detection for anonymous pages and we
gained the ability to account thrashing of them[1].

Likes PSI, we count submission time as thrashing delay because when the
device is congested, or the submitting cgroup IO-throttled, submission can
be a significant part of overall IO time.

Without this patch, swap thrashing through frontswap or some block
device supporting rw_page operation isn't measured correctly.

This patch is based on "delayacct: support re-entrance detection of
thrashing accounting".

[1] commit aae466b0052e ("mm/swap: implement workingset detection for anonymous LRU")

Link: https://lkml.kernel.org/r/20220815072835.74876-1-yang.yang29@zte.com.cn
	Signed-off-by: Yang Yang <yang.yang29@zte.com.cn>
	Signed-off-by: CGEL ZTE <cgel.zte@gmail.com>
	Reviewed-by: Ran Xiaokai <ran.xiaokai@zte.com.cn>
	Reviewed-by: wangyong <wang.yong12@zte.com.cn>
	Cc: Joonsoo Kim <iamjoonsoo.kim@lge.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
(cherry picked from commit 3a9bb7b1879bef057a5dbff1dac1fa1411638064)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	mm/page_io.c
diff --cc mm/page_io.c
index 8e76aa4bcfc9,fc6b3fb1f7c5..000000000000
--- a/mm/page_io.c
+++ b/mm/page_io.c
@@@ -373,22 -450,24 +373,29 @@@ int swap_readpage(struct page *page, bo
  	struct bio *bio;
  	int ret = 0;
  	struct swap_info_struct *sis = page_swap_info(page);
 +	blk_qc_t qc;
 +	struct gendisk *disk;
  	bool workingset = PageWorkingset(page);
  	unsigned long pflags;
+ 	bool in_thrashing;
  
  	VM_BUG_ON_PAGE(!PageSwapCache(page) && !synchronous, page);
  	VM_BUG_ON_PAGE(!PageLocked(page), page);
  	VM_BUG_ON_PAGE(PageUptodate(page), page);
  
  	/*
- 	 * Count submission time as memory stall. When the device is congested,
- 	 * or the submitting cgroup IO-throttled, submission can be a
- 	 * significant part of overall IO time.
+ 	 * Count submission time as memory stall and delay. When the device
+ 	 * is congested, or the submitting cgroup IO-throttled, submission
+ 	 * can be a significant part of overall IO time.
  	 */
- 	if (workingset)
+ 	if (workingset) {
+ 		delayacct_thrashing_start(&in_thrashing);
  		psi_memstall_enter(&pflags);
++<<<<<<< HEAD
++=======
+ 	}
+ 	delayacct_swapin_start();
++>>>>>>> 3a9bb7b1879b (mm/page_io: count submission time as thrashing delay for delayacct)
  
  	if (frontswap_load(page) == 0) {
  		SetPageUptodate(page);
@@@ -452,8 -515,11 +459,14 @@@
  	bio_put(bio);
  
  out:
- 	if (workingset)
+ 	if (workingset) {
+ 		delayacct_thrashing_end(&in_thrashing);
  		psi_memstall_leave(&pflags);
++<<<<<<< HEAD
++=======
+ 	}
+ 	delayacct_swapin_end();
++>>>>>>> 3a9bb7b1879b (mm/page_io: count submission time as thrashing delay for delayacct)
  	return ret;
  }
  
* Unmerged path mm/page_io.c
