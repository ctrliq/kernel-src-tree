x86/tdx: Extend the confidential computing API to support TDX guests

jira LE-1907
Rebuild_History Non-Buildable kernel-rt-4.18.0-477.10.1.rt7.274.el8_8
commit-author Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
commit 41394e33f3a0ce791caf0e086e1fca850832ddec
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-rt-4.18.0-477.10.1.rt7.274.el8_8/41394e33.failed

Confidential Computing (CC) features (like string I/O unroll support,
memory encryption/decryption support, etc) are conditionally enabled
in the kernel using cc_platform_has() API. Since TDX guests also need
to use these CC features, extend cc_platform_has() API and add TDX
guest-specific CC attributes support.

CC API also provides an interface to deal with encryption mask. Extend
it to cover TDX.

Details about which bit in the page table entry to be used to indicate
shared/private state is determined by using the TDINFO TDCALL.

	Signed-off-by: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
	Signed-off-by: Dave Hansen <dave.hansen@linux.intel.com>
	Reviewed-by: Dave Hansen <dave.hansen@linux.intel.com>
	Reviewed-by: Borislav Petkov <bp@suse.de>
Link: https://lkml.kernel.org/r/20220405232939.73860-5-kirill.shutemov@linux.intel.com
(cherry picked from commit 41394e33f3a0ce791caf0e086e1fca850832ddec)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/Kconfig
#	arch/x86/coco/tdx/tdx.c
diff --cc arch/x86/Kconfig
index 970d47f5992e,984315ca0275..000000000000
--- a/arch/x86/Kconfig
+++ b/arch/x86/Kconfig
@@@ -847,6 -867,30 +847,33 @@@ config JAILHOUSE_GUES
  	  cell. You can leave this option disabled if you only want to start
  	  Jailhouse and run Linux afterwards in the root cell.
  
++<<<<<<< HEAD
++=======
+ config ACRN_GUEST
+ 	bool "ACRN Guest support"
+ 	depends on X86_64
+ 	select X86_HV_CALLBACK_VECTOR
+ 	help
+ 	  This option allows to run Linux as guest in the ACRN hypervisor. ACRN is
+ 	  a flexible, lightweight reference open-source hypervisor, built with
+ 	  real-time and safety-criticality in mind. It is built for embedded
+ 	  IOT with small footprint and real-time features. More details can be
+ 	  found in https://projectacrn.org/.
+ 
+ config INTEL_TDX_GUEST
+ 	bool "Intel TDX (Trust Domain Extensions) - Guest Support"
+ 	depends on X86_64 && CPU_SUP_INTEL
+ 	depends on X86_X2APIC
+ 	select ARCH_HAS_CC_PLATFORM
+ 	help
+ 	  Support running as a guest under Intel TDX.  Without this support,
+ 	  the guest kernel can not boot or run under TDX.
+ 	  TDX includes memory encryption and integrity capabilities
+ 	  which protect the confidentiality and integrity of guest
+ 	  memory contents and CPU state. TDX guests are protected from
+ 	  some attacks from the VMM.
+ 
++>>>>>>> 41394e33f3a0 (x86/tdx: Extend the confidential computing API to support TDX guests)
  endif #HYPERVISOR_GUEST
  
  source "arch/x86/Kconfig.cpu"
* Unmerged path arch/x86/coco/tdx/tdx.c
* Unmerged path arch/x86/Kconfig
* Unmerged path arch/x86/coco/tdx/tdx.c
diff --git a/arch/x86/kernel/cc_platform.c b/arch/x86/kernel/cc_platform.c
index fc1365dd927e..3f3008783e05 100644
--- a/arch/x86/kernel/cc_platform.c
+++ b/arch/x86/kernel/cc_platform.c
@@ -87,9 +87,18 @@ EXPORT_SYMBOL_GPL(cc_platform_has);
 
 u64 cc_mkenc(u64 val)
 {
+	/*
+	 * Both AMD and Intel use a bit in the page table to indicate
+	 * encryption status of the page.
+	 *
+	 * - for AMD, bit *set* means the page is encrypted
+	 * - for Intel *clear* means encrypted.
+	 */
 	switch (vendor) {
 	case CC_VENDOR_AMD:
 		return val | cc_mask;
+	case CC_VENDOR_INTEL:
+		return val & ~cc_mask;
 	default:
 		return val;
 	}
@@ -97,9 +106,12 @@ u64 cc_mkenc(u64 val)
 
 u64 cc_mkdec(u64 val)
 {
+	/* See comment in cc_mkenc() */
 	switch (vendor) {
 	case CC_VENDOR_AMD:
 		return val & ~cc_mask;
+	case CC_VENDOR_INTEL:
+		return val | cc_mask;
 	default:
 		return val;
 	}
