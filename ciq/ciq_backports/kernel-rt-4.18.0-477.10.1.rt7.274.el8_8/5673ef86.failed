net: pcs: xpcs: rename mdio_xpcs_args to dw_xpcs

jira LE-1907
Rebuild_History Non-Buildable kernel-rt-4.18.0-477.10.1.rt7.274.el8_8
commit-author Vladimir Oltean <vladimir.oltean@nxp.com>
commit 5673ef86380414be1702ba2f1ef92526a14dd1e0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-rt-4.18.0-477.10.1.rt7.274.el8_8/5673ef86.failed

The struct mdio_xpcs_args is reminiscent of when a similarly named
struct mdio_xpcs_ops existed. Now that that is removed, we can shorten
the name to dw_xpcs (dw for DesignWare).

	Signed-off-by: Vladimir Oltean <vladimir.oltean@nxp.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 5673ef86380414be1702ba2f1ef92526a14dd1e0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/stmicro/stmmac/common.h
#	drivers/net/ethernet/stmicro/stmmac/stmmac_mdio.c
#	drivers/net/pcs/pcs-xpcs.c
#	include/linux/pcs/pcs-xpcs.h
diff --cc drivers/net/ethernet/stmicro/stmmac/common.h
index 2f8e5961a08a,5fecc83f175b..000000000000
--- a/drivers/net/ethernet/stmicro/stmmac/common.h
+++ b/drivers/net/ethernet/stmicro/stmmac/common.h
@@@ -508,8 -503,7 +508,12 @@@ struct mac_device_info 
  	const struct stmmac_hwtimestamp *ptp;
  	const struct stmmac_tc_ops *tc;
  	const struct stmmac_mmc_ops *mmc;
++<<<<<<< HEAD
 +	const struct mdio_xpcs_ops *xpcs;
 +	struct mdio_xpcs_args *xpcs_args;
++=======
+ 	struct dw_xpcs *xpcs;
++>>>>>>> 5673ef863804 (net: pcs: xpcs: rename mdio_xpcs_args to dw_xpcs)
  	struct mii_regs mii;	/* MII register Addresses */
  	struct mac_link link;
  	void __iomem *pcsr;     /* vpointer to device CSRs */
diff --cc drivers/net/ethernet/stmicro/stmmac/stmmac_mdio.c
index 9fdcebcacd72,3b3033b20b1d..000000000000
--- a/drivers/net/ethernet/stmicro/stmmac/stmmac_mdio.c
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac_mdio.c
@@@ -407,6 -397,41 +407,44 @@@ int stmmac_mdio_reset(struct mii_bus *b
  	return 0;
  }
  
++<<<<<<< HEAD
++=======
+ int stmmac_xpcs_setup(struct mii_bus *bus)
+ {
+ 	int mode, addr;
+ 	struct net_device *ndev = bus->priv;
+ 	struct dw_xpcs *xpcs;
+ 	struct stmmac_priv *priv;
+ 	struct mdio_device *mdiodev;
+ 
+ 	priv = netdev_priv(ndev);
+ 	mode = priv->plat->phy_interface;
+ 
+ 	/* Try to probe the XPCS by scanning all addresses. */
+ 	for (addr = 0; addr < PHY_MAX_ADDR; addr++) {
+ 		mdiodev = mdio_device_create(bus, addr);
+ 		if (IS_ERR(mdiodev))
+ 			continue;
+ 
+ 		xpcs = xpcs_create(mdiodev, mode);
+ 		if (IS_ERR_OR_NULL(xpcs)) {
+ 			mdio_device_free(mdiodev);
+ 			continue;
+ 		}
+ 
+ 		priv->hw->xpcs = xpcs;
+ 		break;
+ 	}
+ 
+ 	if (!priv->hw->xpcs) {
+ 		dev_warn(priv->device, "No xPCS found\n");
+ 		return -ENODEV;
+ 	}
+ 
+ 	return 0;
+ }
+ 
++>>>>>>> 5673ef863804 (net: pcs: xpcs: rename mdio_xpcs_args to dw_xpcs)
  /**
   * stmmac_mdio_register
   * @ndev: net device structure
diff --cc drivers/net/pcs/pcs-xpcs.c
index e17e72175ebb,a2cbb2d926b7..000000000000
--- a/drivers/net/pcs/pcs-xpcs.c
+++ b/drivers/net/pcs/pcs-xpcs.c
@@@ -100,6 -108,9 +100,12 @@@
  /* VR MII EEE Control 1 defines */
  #define DW_VR_MII_EEE_TRN_LPI		BIT(0)	/* Transparent Mode Enable */
  
++<<<<<<< HEAD
++=======
+ #define phylink_pcs_to_xpcs(pl_pcs) \
+ 	container_of((pl_pcs), struct dw_xpcs, pcs)
+ 
++>>>>>>> 5673ef863804 (net: pcs: xpcs: rename mdio_xpcs_args to dw_xpcs)
  static const int xpcs_usxgmii_features[] = {
  	ETHTOOL_LINK_MODE_Pause_BIT,
  	ETHTOOL_LINK_MODE_Asym_Pause_BIT,
@@@ -413,7 -439,7 +419,11 @@@ static int xpcs_get_max_usxgmii_speed(c
  	return max;
  }
  
++<<<<<<< HEAD
 +static int xpcs_config_usxgmii(struct mdio_xpcs_args *xpcs, int speed)
++=======
+ static void xpcs_config_usxgmii(struct dw_xpcs *xpcs, int speed)
++>>>>>>> 5673ef863804 (net: pcs: xpcs: rename mdio_xpcs_args to dw_xpcs)
  {
  	int ret, speed_sel;
  
@@@ -462,12 -488,19 +472,12 @@@
  
  	ret = xpcs_read_vpcs(xpcs, MDIO_CTRL1);
  	if (ret < 0)
 -		goto out;
 -
 -	ret = xpcs_write_vpcs(xpcs, MDIO_CTRL1, ret | DW_USXGMII_RST);
 -	if (ret < 0)
 -		goto out;
 -
 -	return;
 +		return ret;
  
 -out:
 -	pr_err("%s: XPCS access returned %pe\n", __func__, ERR_PTR(ret));
 +	return xpcs_write_vpcs(xpcs, MDIO_CTRL1, ret | DW_USXGMII_RST);
  }
  
- static int _xpcs_config_aneg_c73(struct mdio_xpcs_args *xpcs,
+ static int _xpcs_config_aneg_c73(struct dw_xpcs *xpcs,
  				 const struct xpcs_compat *compat)
  {
  	int ret, adv;
@@@ -794,8 -826,30 +803,35 @@@ static int xpcs_config_aneg_c37_sgmii(s
  	return xpcs_write(xpcs, MDIO_MMD_VEND2, DW_VR_MII_DIG_CTRL1, ret);
  }
  
++<<<<<<< HEAD
 +static int xpcs_config(struct mdio_xpcs_args *xpcs,
 +		       const struct phylink_link_state *state)
++=======
+ static int xpcs_config_2500basex(struct dw_xpcs *xpcs)
+ {
+ 	int ret;
+ 
+ 	ret = xpcs_read(xpcs, MDIO_MMD_VEND2, DW_VR_MII_DIG_CTRL1);
+ 	if (ret < 0)
+ 		return ret;
+ 	ret |= DW_VR_MII_DIG_CTRL1_2G5_EN;
+ 	ret &= ~DW_VR_MII_DIG_CTRL1_MAC_AUTO_SW;
+ 	ret = xpcs_write(xpcs, MDIO_MMD_VEND2, DW_VR_MII_DIG_CTRL1, ret);
+ 	if (ret < 0)
+ 		return ret;
+ 
+ 	ret = xpcs_read(xpcs, MDIO_MMD_VEND2, DW_VR_MII_MMD_CTRL);
+ 	if (ret < 0)
+ 		return ret;
+ 	ret &= ~AN_CL37_EN;
+ 	ret |= SGMII_SPEED_SS6;
+ 	ret &= ~SGMII_SPEED_SS13;
+ 	return xpcs_write(xpcs, MDIO_MMD_VEND2, DW_VR_MII_MMD_CTRL, ret);
+ }
+ 
+ static int xpcs_do_config(struct dw_xpcs *xpcs, phy_interface_t interface,
+ 			  unsigned int mode)
++>>>>>>> 5673ef863804 (net: pcs: xpcs: rename mdio_xpcs_args to dw_xpcs)
  {
  	const struct xpcs_compat *compat;
  	int ret;
@@@ -824,7 -883,17 +860,21 @@@
  	return 0;
  }
  
++<<<<<<< HEAD
 +static int xpcs_get_state_c73(struct mdio_xpcs_args *xpcs,
++=======
+ static int xpcs_config(struct phylink_pcs *pcs, unsigned int mode,
+ 		       phy_interface_t interface,
+ 		       const unsigned long *advertising,
+ 		       bool permit_pause_to_mac)
+ {
+ 	struct dw_xpcs *xpcs = phylink_pcs_to_xpcs(pcs);
+ 
+ 	return xpcs_do_config(xpcs, interface, mode);
+ }
+ 
+ static int xpcs_get_state_c73(struct dw_xpcs *xpcs,
++>>>>>>> 5673ef863804 (net: pcs: xpcs: rename mdio_xpcs_args to dw_xpcs)
  			      struct phylink_link_state *state,
  			      const struct xpcs_compat *compat)
  {
@@@ -899,9 -968,10 +949,13 @@@ static int xpcs_get_state_c37_sgmii(str
  	return 0;
  }
  
 -static void xpcs_get_state(struct phylink_pcs *pcs,
 -			   struct phylink_link_state *state)
 +static int xpcs_get_state(struct mdio_xpcs_args *xpcs,
 +			  struct phylink_link_state *state)
  {
++<<<<<<< HEAD
++=======
+ 	struct dw_xpcs *xpcs = phylink_pcs_to_xpcs(pcs);
++>>>>>>> 5673ef863804 (net: pcs: xpcs: rename mdio_xpcs_args to dw_xpcs)
  	const struct xpcs_compat *compat;
  	int ret;
  
@@@ -917,26 -990,26 +971,31 @@@
  		break;
  	case DW_AN_C37_SGMII:
  		ret = xpcs_get_state_c37_sgmii(xpcs, state);
 -		if (ret) {
 -			pr_err("xpcs_get_state_c37_sgmii returned %pe\n",
 -			       ERR_PTR(ret));
 -		}
 +		if (ret)
 +			return ret;
  		break;
  	default:
 -		return;
 +		return -1;
  	}
 +
 +	return 0;
  }
  
 -static void xpcs_link_up(struct phylink_pcs *pcs, unsigned int mode,
 -			 phy_interface_t interface, int speed, int duplex)
 +static int xpcs_link_up(struct mdio_xpcs_args *xpcs, int speed,
 +			phy_interface_t interface)
  {
++<<<<<<< HEAD
++=======
+ 	struct dw_xpcs *xpcs = phylink_pcs_to_xpcs(pcs);
+ 
++>>>>>>> 5673ef863804 (net: pcs: xpcs: rename mdio_xpcs_args to dw_xpcs)
  	if (interface == PHY_INTERFACE_MODE_USXGMII)
  		return xpcs_config_usxgmii(xpcs, speed);
 +
 +	return 0;
  }
  
- static u32 xpcs_get_id(struct mdio_xpcs_args *xpcs)
+ static u32 xpcs_get_id(struct dw_xpcs *xpcs)
  {
  	int ret;
  	u32 id;
@@@ -1009,10 -1088,16 +1068,21 @@@ static const struct xpcs_id xpcs_id_lis
  	},
  };
  
++<<<<<<< HEAD
 +struct mdio_xpcs_args *xpcs_create(struct mdio_device *mdiodev,
 +				   phy_interface_t interface)
++=======
+ static const struct phylink_pcs_ops xpcs_phylink_ops = {
+ 	.pcs_config = xpcs_config,
+ 	.pcs_get_state = xpcs_get_state,
+ 	.pcs_link_up = xpcs_link_up,
+ };
+ 
+ struct dw_xpcs *xpcs_create(struct mdio_device *mdiodev,
+ 			    phy_interface_t interface)
++>>>>>>> 5673ef863804 (net: pcs: xpcs: rename mdio_xpcs_args to dw_xpcs)
  {
- 	struct mdio_xpcs_args *xpcs;
+ 	struct dw_xpcs *xpcs;
  	u32 xpcs_id;
  	int i, ret;
  
diff --cc include/linux/pcs/pcs-xpcs.h
index 57a199393d63,4f1cdf6f3d4c..000000000000
--- a/include/linux/pcs/pcs-xpcs.h
+++ b/include/linux/pcs/pcs-xpcs.h
@@@ -16,28 -16,20 +16,33 @@@
  
  struct xpcs_id;
  
- struct mdio_xpcs_args {
+ struct dw_xpcs {
  	struct mdio_device *mdiodev;
  	const struct xpcs_id *id;
 -	struct phylink_pcs pcs;
  };
  
 +struct mdio_xpcs_ops {
 +	int (*config)(struct mdio_xpcs_args *xpcs,
 +		      const struct phylink_link_state *state);
 +	int (*get_state)(struct mdio_xpcs_args *xpcs,
 +			 struct phylink_link_state *state);
 +	int (*link_up)(struct mdio_xpcs_args *xpcs, int speed,
 +		       phy_interface_t interface);
 +};
 +
++<<<<<<< HEAD
 +int xpcs_get_an_mode(struct mdio_xpcs_args *xpcs, phy_interface_t interface);
 +struct mdio_xpcs_ops *mdio_xpcs_get_ops(void);
 +void xpcs_validate(struct mdio_xpcs_args *xpcs, unsigned long *supported,
++=======
+ int xpcs_get_an_mode(struct dw_xpcs *xpcs, phy_interface_t interface);
+ void xpcs_validate(struct dw_xpcs *xpcs, unsigned long *supported,
++>>>>>>> 5673ef863804 (net: pcs: xpcs: rename mdio_xpcs_args to dw_xpcs)
  		   struct phylink_link_state *state);
- int xpcs_config_eee(struct mdio_xpcs_args *xpcs, int mult_fact_100ns,
+ int xpcs_config_eee(struct dw_xpcs *xpcs, int mult_fact_100ns,
  		    int enable);
- struct mdio_xpcs_args *xpcs_create(struct mdio_device *mdiodev,
- 				   phy_interface_t interface);
- void xpcs_destroy(struct mdio_xpcs_args *xpcs);
+ struct dw_xpcs *xpcs_create(struct mdio_device *mdiodev,
+ 			    phy_interface_t interface);
+ void xpcs_destroy(struct dw_xpcs *xpcs);
  
  #endif /* __LINUX_PCS_XPCS_H */
* Unmerged path drivers/net/ethernet/stmicro/stmmac/common.h
* Unmerged path drivers/net/ethernet/stmicro/stmmac/stmmac_mdio.c
* Unmerged path drivers/net/pcs/pcs-xpcs.c
* Unmerged path include/linux/pcs/pcs-xpcs.h
