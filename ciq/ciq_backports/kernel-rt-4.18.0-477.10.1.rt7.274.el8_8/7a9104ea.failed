net/mlx5: Cleanup kTLS function names and their exposure

jira LE-1907
Rebuild_History Non-Buildable kernel-rt-4.18.0-477.10.1.rt7.274.el8_8
commit-author Leon Romanovsky <leonro@nvidia.com>
commit 7a9104ea9011c0e15176c2951a97bda43c4beabf
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-rt-4.18.0-477.10.1.rt7.274.el8_8/7a9104ea.failed

The _accel_ part of the function is not relevant anymore, so rename kTLS
functions to be without it, together with header cleanup to do not have
declarations that are not used.

Link: https://lore.kernel.org/r/72319e6020fb2553d02b3bbc7476bda363f6d60c.1649073691.git.leonro@nvidia.com
	Reviewed-by: Tariq Toukan <tariqt@nvidia.com>
	Reviewed-by: Saeed Mahameed <saeedm@nvidia.com>
	Signed-off-by: Leon Romanovsky <leonro@nvidia.com>
(cherry picked from commit 7a9104ea9011c0e15176c2951a97bda43c4beabf)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en_accel/ktls.c
#	drivers/net/ethernet/mellanox/mlx5/core/en_accel/ktls.h
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_accel/ktls.c
index d93aadbf10da,814f2a56f633..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_accel/ktls.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_accel/ktls.c
@@@ -120,3 -158,24 +120,27 @@@ void mlx5e_ktls_cleanup_rx(struct mlx5e
  
  	destroy_workqueue(priv->tls->rx_wq);
  }
++<<<<<<< HEAD
++=======
+ 
+ int mlx5e_ktls_init(struct mlx5e_priv *priv)
+ {
+ 	struct mlx5e_tls *tls;
+ 
+ 	if (!mlx5e_is_ktls_device(priv->mdev))
+ 		return 0;
+ 
+ 	tls = kzalloc(sizeof(*tls), GFP_KERNEL);
+ 	if (!tls)
+ 		return -ENOMEM;
+ 
+ 	priv->tls = tls;
+ 	return 0;
+ }
+ 
+ void mlx5e_ktls_cleanup(struct mlx5e_priv *priv)
+ {
+ 	kfree(priv->tls);
+ 	priv->tls = NULL;
+ }
++>>>>>>> 7a9104ea9011 (net/mlx5: Cleanup kTLS function names and their exposure)
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_accel/ktls.h
index 5833deb2354c,d016624fbc9d..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_accel/ktls.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_accel/ktls.h
@@@ -7,6 -7,39 +7,40 @@@
  #include "en.h"
  
  #ifdef CONFIG_MLX5_EN_TLS
++<<<<<<< HEAD
++=======
+ int mlx5_ktls_create_key(struct mlx5_core_dev *mdev,
+ 			 struct tls_crypto_info *crypto_info,
+ 			 u32 *p_key_id);
+ void mlx5_ktls_destroy_key(struct mlx5_core_dev *mdev, u32 key_id);
+ 
+ static inline bool mlx5e_is_ktls_device(struct mlx5_core_dev *mdev)
+ {
+ 	if (is_kdump_kernel())
+ 		return false;
+ 
+ 	if (!MLX5_CAP_GEN(mdev, tls_tx) && !MLX5_CAP_GEN(mdev, tls_rx))
+ 		return false;
+ 
+ 	if (!MLX5_CAP_GEN(mdev, log_max_dek))
+ 		return false;
+ 
+ 	return MLX5_CAP_TLS(mdev, tls_1_2_aes_gcm_128);
+ }
+ 
+ static inline bool mlx5e_ktls_type_check(struct mlx5_core_dev *mdev,
+ 					 struct tls_crypto_info *crypto_info)
+ {
+ 	switch (crypto_info->cipher_type) {
+ 	case TLS_CIPHER_AES_GCM_128:
+ 		if (crypto_info->version == TLS_1_2_VERSION)
+ 			return MLX5_CAP_TLS(mdev,  tls_1_2_aes_gcm_128);
+ 		break;
+ 	}
+ 
+ 	return false;
+ }
++>>>>>>> 7a9104ea9011 (net/mlx5: Cleanup kTLS function names and their exposure)
  
  void mlx5e_ktls_build_netdev(struct mlx5e_priv *priv);
  int mlx5e_ktls_init_rx(struct mlx5e_priv *priv);
@@@ -16,26 -49,36 +50,49 @@@ struct mlx5e_ktls_resync_resp 
  mlx5e_ktls_rx_resync_create_resp_list(void);
  void mlx5e_ktls_rx_resync_destroy_resp_list(struct mlx5e_ktls_resync_resp *resp_list);
  
- static inline bool mlx5e_accel_is_ktls_tx(struct mlx5_core_dev *mdev)
+ static inline bool mlx5e_is_ktls_tx(struct mlx5_core_dev *mdev)
  {
 -	return !is_kdump_kernel() && MLX5_CAP_GEN(mdev, tls_tx);
 +	return !is_kdump_kernel() &&
 +		mlx5_accel_is_ktls_tx(mdev);
  }
  
- static inline bool mlx5e_accel_is_ktls_rx(struct mlx5_core_dev *mdev)
+ static inline bool mlx5e_is_ktls_rx(struct mlx5_core_dev *mdev)
  {
 -	return !is_kdump_kernel() && MLX5_CAP_GEN(mdev, tls_rx);
 +	return !is_kdump_kernel() &&
 +		mlx5_accel_is_ktls_rx(mdev);
  }
  
++<<<<<<< HEAD
 +static inline bool mlx5e_accel_is_ktls_device(struct mlx5_core_dev *mdev)
 +{
 +	return !is_kdump_kernel() &&
 +		mlx5_accel_is_ktls_device(mdev);
 +}
 +
 +#else
 +
++=======
+ struct mlx5e_tls_sw_stats {
+ 	atomic64_t tx_tls_ctx;
+ 	atomic64_t tx_tls_del;
+ 	atomic64_t rx_tls_ctx;
+ 	atomic64_t rx_tls_del;
+ };
+ 
+ struct mlx5e_tls {
+ 	struct mlx5e_tls_sw_stats sw_stats;
+ 	struct workqueue_struct *rx_wq;
+ };
+ 
+ int mlx5e_ktls_init(struct mlx5e_priv *priv);
+ void mlx5e_ktls_cleanup(struct mlx5e_priv *priv);
+ 
+ int mlx5e_ktls_get_count(struct mlx5e_priv *priv);
+ int mlx5e_ktls_get_strings(struct mlx5e_priv *priv, uint8_t *data);
+ int mlx5e_ktls_get_stats(struct mlx5e_priv *priv, u64 *data);
+ 
+ #else
++>>>>>>> 7a9104ea9011 (net/mlx5: Cleanup kTLS function names and their exposure)
  static inline void mlx5e_ktls_build_netdev(struct mlx5e_priv *priv)
  {
  }
@@@ -64,10 -107,23 +121,11 @@@ mlx5e_ktls_rx_resync_create_resp_list(v
  static inline void
  mlx5e_ktls_rx_resync_destroy_resp_list(struct mlx5e_ktls_resync_resp *resp_list) {}
  
- static inline bool mlx5e_accel_is_ktls_tx(struct mlx5_core_dev *mdev) { return false; }
- static inline bool mlx5e_accel_is_ktls_rx(struct mlx5_core_dev *mdev) { return false; }
- static inline bool mlx5e_accel_is_ktls_device(struct mlx5_core_dev *mdev) { return false; }
+ static inline bool mlx5e_is_ktls_rx(struct mlx5_core_dev *mdev)
+ {
+ 	return false;
+ }
  
 -static inline int mlx5e_ktls_init(struct mlx5e_priv *priv) { return 0; }
 -static inline void mlx5e_ktls_cleanup(struct mlx5e_priv *priv) { }
 -static inline int mlx5e_ktls_get_count(struct mlx5e_priv *priv) { return 0; }
 -static inline int mlx5e_ktls_get_strings(struct mlx5e_priv *priv, uint8_t *data)
 -{
 -	return 0;
 -}
 -
 -static inline int mlx5e_ktls_get_stats(struct mlx5e_priv *priv, u64 *data)
 -{
 -	return 0;
 -}
  #endif
  
  #endif /* __MLX5E_TLS_H__ */
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en/params.c b/drivers/net/ethernet/mellanox/mlx5/core/en/params.c
index 5c4711be6fae..d12e3c357869 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en/params.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en/params.c
@@ -794,7 +794,7 @@ static u8 mlx5e_build_icosq_log_wq_sz(struct mlx5_core_dev *mdev,
 
 static u8 mlx5e_build_async_icosq_log_wq_sz(struct mlx5_core_dev *mdev)
 {
-	if (mlx5e_accel_is_ktls_rx(mdev))
+	if (mlx5e_is_ktls_rx(mdev))
 		return MLX5E_PARAMS_DEFAULT_LOG_SQ_SIZE;
 
 	return MLX5E_PARAMS_MINIMUM_LOG_SQ_SIZE;
@@ -823,7 +823,7 @@ static void mlx5e_build_async_icosq_param(struct mlx5_core_dev *mdev,
 
 	mlx5e_build_sq_param_common(mdev, param);
 	param->stop_room = mlx5e_stop_room_for_wqe(mdev, 1); /* for XSK NOP */
-	param->is_tls = mlx5e_accel_is_ktls_rx(mdev);
+	param->is_tls = mlx5e_is_ktls_rx(mdev);
 	if (param->is_tls)
 		param->stop_room += mlx5e_stop_room_for_wqe(mdev, 1); /* for TLS RX resync NOP */
 	MLX5_SET(sqc, sqc, reg_umr, MLX5_CAP_ETH(mdev, reg_umr_sq));
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_accel/ktls.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_accel/ktls.h
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en_accel/ktls_tx.c b/drivers/net/ethernet/mellanox/mlx5/core/en_accel/ktls_tx.c
index aaf11c66bf4c..3cd8bd936da6 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_accel/ktls_tx.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_accel/ktls_tx.c
@@ -27,7 +27,7 @@ u16 mlx5e_ktls_get_stop_room(struct mlx5_core_dev *mdev, struct mlx5e_params *pa
 {
 	u16 num_dumps, stop_room = 0;
 
-	if (!mlx5e_accel_is_ktls_tx(mdev))
+	if (!mlx5e_is_ktls_tx(mdev))
 		return 0;
 
 	num_dumps = mlx5e_ktls_dumps_num_wqes(params, MAX_SKB_FRAGS, TLS_MAX_PAYLOAD_SIZE);
