net/mlx5e: Report flow steering errors with mdev err report API

jira LE-1907
Rebuild_History Non-Buildable kernel-rt-4.18.0-477.10.1.rt7.274.el8_8
commit-author Lama Kayal <lkayal@nvidia.com>
commit 6a7bc5d0e1c34444eb82ab325fb9dd9ddefc6b73
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-rt-4.18.0-477.10.1.rt7.274.el8_8/6a7bc5d0.failed

Let en_fs report errors via mdev error report API, aka mlx5_core_*
macros, thus replace the netdev API reports.
This to minimize netdev coupling to the flow steering struct.

	Signed-off-by: Lama Kayal <lkayal@nvidia.com>
	Reviewed-by: Tariq Toukan <tariqt@nvidia.com>
	Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
(cherry picked from commit 6a7bc5d0e1c34444eb82ab325fb9dd9ddefc6b73)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en_fs.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_fs.c
index 3f8245301b0a,c4994220c7d2..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_fs.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_fs.c
@@@ -362,12 -361,12 +361,18 @@@ int mlx5e_add_vlan_trap(struct mlx5e_pr
  	rule = mlx5e_add_trap_rule(ft, trap_id, tir_num);
  	if (IS_ERR(rule)) {
  		err = PTR_ERR(rule);
++<<<<<<< HEAD
 +		priv->fs.vlan->trap_rule = NULL;
 +		netdev_err(priv->netdev, "%s: add VLAN trap rule failed, err %d\n",
 +			   __func__, err);
++=======
+ 		priv->fs->vlan->trap_rule = NULL;
+ 		mlx5_core_err(priv->mdev, "%s: add VLAN trap rule failed, err %d\n",
+ 			      __func__, err);
++>>>>>>> 6a7bc5d0e1c3 (net/mlx5e: Report flow steering errors with mdev err report API)
  		return err;
  	}
 -	priv->fs->vlan->trap_rule = rule;
 +	priv->fs.vlan->trap_rule = rule;
  	return 0;
  }
  
@@@ -388,12 -387,12 +393,18 @@@ int mlx5e_add_mac_trap(struct mlx5e_pri
  	rule = mlx5e_add_trap_rule(ft, trap_id, tir_num);
  	if (IS_ERR(rule)) {
  		err = PTR_ERR(rule);
++<<<<<<< HEAD
 +		priv->fs.l2.trap_rule = NULL;
 +		netdev_err(priv->netdev, "%s: add MAC trap rule failed, err %d\n",
 +			   __func__, err);
++=======
+ 		priv->fs->l2.trap_rule = NULL;
+ 		mlx5_core_err(priv->mdev, "%s: add MAC trap rule failed, err %d\n",
+ 			      __func__, err);
++>>>>>>> 6a7bc5d0e1c3 (net/mlx5e: Report flow steering errors with mdev err report API)
  		return err;
  	}
 -	priv->fs->l2.trap_rule = rule;
 +	priv->fs.l2.trap_rule = rule;
  	return 0;
  }
  
@@@ -743,10 -742,10 +754,10 @@@ static int mlx5e_create_promisc_table(s
  	ft_attr.level = MLX5E_PROMISC_FT_LEVEL;
  	ft_attr.prio = MLX5E_NIC_PRIO;
  
 -	ft->t = mlx5_create_auto_grouped_flow_table(priv->fs->ns, &ft_attr);
 +	ft->t = mlx5_create_auto_grouped_flow_table(priv->fs.ns, &ft_attr);
  	if (IS_ERR(ft->t)) {
  		err = PTR_ERR(ft->t);
- 		netdev_err(priv->netdev, "fail to create promisc table err=%d\n", err);
+ 		mlx5_core_err(priv->mdev, "fail to create promisc table err=%d\n", err);
  		return err;
  	}
  
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_fs.c
