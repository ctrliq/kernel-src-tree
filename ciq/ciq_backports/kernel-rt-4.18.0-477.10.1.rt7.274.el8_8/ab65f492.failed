x86/sev: Fix address space sparse warning

jira LE-1907
Rebuild_History Non-Buildable kernel-rt-4.18.0-477.10.1.rt7.274.el8_8
commit-author Borislav Petkov <bp@suse.de>
commit ab65f49253ff706723ecbf87af74e9383b5e4582
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-rt-4.18.0-477.10.1.rt7.274.el8_8/ab65f492.failed

Fix:

  arch/x86/kernel/sev.c:605:16: warning: incorrect type in assignment (different address spaces)
  arch/x86/kernel/sev.c:605:16:    expected struct snp_secrets_page_layout *layout
  arch/x86/kernel/sev.c:605:16:    got void [noderef] __iomem *[assigned] mem

	Reported-by: kernel test robot <lkp@intel.com>
	Signed-off-by: Borislav Petkov <bp@suse.de>
Link: https://lore.kernel.org/r/202205022233.XgNDR7WR-lkp@intel.com
(cherry picked from commit ab65f49253ff706723ecbf87af74e9383b5e4582)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kernel/sev.c
diff --cc arch/x86/kernel/sev.c
index 57edd1e021cf,c05f0124c410..000000000000
--- a/arch/x86/kernel/sev.c
+++ b/arch/x86/kernel/sev.c
@@@ -506,10 -555,62 +506,66 @@@ void noinstr __sev_es_nmi_complete(void
  	sev_es_wr_ghcb_msr(__pa_nodebug(ghcb));
  	VMGEXIT();
  
 -	__sev_put_ghcb(&state);
 +	sev_es_put_ghcb(&state);
  }
  
++<<<<<<< HEAD
 +static u64 get_jump_table_addr(void)
++=======
+ static u64 __init get_secrets_page(void)
+ {
+ 	u64 pa_data = boot_params.cc_blob_address;
+ 	struct cc_blob_sev_info info;
+ 	void *map;
+ 
+ 	/*
+ 	 * The CC blob contains the address of the secrets page, check if the
+ 	 * blob is present.
+ 	 */
+ 	if (!pa_data)
+ 		return 0;
+ 
+ 	map = early_memremap(pa_data, sizeof(info));
+ 	if (!map) {
+ 		pr_err("Unable to locate SNP secrets page: failed to map the Confidential Computing blob.\n");
+ 		return 0;
+ 	}
+ 	memcpy(&info, map, sizeof(info));
+ 	early_memunmap(map, sizeof(info));
+ 
+ 	/* smoke-test the secrets page passed */
+ 	if (!info.secrets_phys || info.secrets_len != PAGE_SIZE)
+ 		return 0;
+ 
+ 	return info.secrets_phys;
+ }
+ 
+ static u64 __init get_snp_jump_table_addr(void)
+ {
+ 	struct snp_secrets_page_layout *layout;
+ 	void __iomem *mem;
+ 	u64 pa, addr;
+ 
+ 	pa = get_secrets_page();
+ 	if (!pa)
+ 		return 0;
+ 
+ 	mem = ioremap_encrypted(pa, PAGE_SIZE);
+ 	if (!mem) {
+ 		pr_err("Unable to locate AP jump table address: failed to map the SNP secrets page.\n");
+ 		return 0;
+ 	}
+ 
+ 	layout = (__force struct snp_secrets_page_layout *)mem;
+ 
+ 	addr = layout->os_area.ap_jump_table_pa;
+ 	iounmap(mem);
+ 
+ 	return addr;
+ }
+ 
+ static u64 __init get_jump_table_addr(void)
++>>>>>>> ab65f49253ff (x86/sev: Fix address space sparse warning)
  {
  	struct ghcb_state state;
  	unsigned long flags;
* Unmerged path arch/x86/kernel/sev.c
