powerpc/lib: Add helper to check if offset is within conditional branch range

jira LE-1907
Rebuild_History Non-Buildable kernel-rt-4.18.0-477.10.1.rt7.274.el8_8
commit-author Naveen N. Rao <naveen.n.rao@linux.vnet.ibm.com>
commit 4549c3ea3160fa8b3f37dfe2f957657bb265eda9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-rt-4.18.0-477.10.1.rt7.274.el8_8/4549c3ea.failed

Add a helper to check if a given offset is within the branch range for a
powerpc conditional branch instruction, and update some sites to use the
new helper.

	Signed-off-by: Naveen N. Rao <naveen.n.rao@linux.vnet.ibm.com>
	Reviewed-by: Christophe Leroy <christophe.leroy@csgroup.eu>
	Acked-by: Song Liu <songliubraving@fb.com>
	Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
Link: https://lore.kernel.org/r/442b69a34ced32ca346a0d9a855f3f6cfdbbbd41.1633464148.git.naveen.n.rao@linux.vnet.ibm.com

(cherry picked from commit 4549c3ea3160fa8b3f37dfe2f957657bb265eda9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/powerpc/include/asm/code-patching.h
diff --cc arch/powerpc/include/asm/code-patching.h
index d7eba088bc99,4ba834599c4d..000000000000
--- a/arch/powerpc/include/asm/code-patching.h
+++ b/arch/powerpc/include/asm/code-patching.h
@@@ -26,13 -23,14 +26,18 @@@
  #define BRANCH_ABSOLUTE	0x2
  
  bool is_offset_in_branch_range(long offset);
++<<<<<<< HEAD
 +int create_branch(struct ppc_inst *instr, const struct ppc_inst *addr,
++=======
+ bool is_offset_in_cond_branch_range(long offset);
+ int create_branch(struct ppc_inst *instr, const u32 *addr,
++>>>>>>> 4549c3ea3160 (powerpc/lib: Add helper to check if offset is within conditional branch range)
  		  unsigned long target, int flags);
 -int create_cond_branch(struct ppc_inst *instr, const u32 *addr,
 +int create_cond_branch(struct ppc_inst *instr, const struct ppc_inst *addr,
  		       unsigned long target, int flags);
 -int patch_branch(u32 *addr, unsigned long target, int flags);
 -int patch_instruction(u32 *addr, struct ppc_inst instr);
 -int raw_patch_instruction(u32 *addr, struct ppc_inst instr);
 +int patch_branch(struct ppc_inst *addr, unsigned long target, int flags);
 +int patch_instruction(struct ppc_inst *addr, struct ppc_inst instr);
 +int raw_patch_instruction(struct ppc_inst *addr, struct ppc_inst instr);
  
  static inline unsigned long patch_site_addr(s32 *site)
  {
* Unmerged path arch/powerpc/include/asm/code-patching.h
diff --git a/arch/powerpc/lib/code-patching.c b/arch/powerpc/lib/code-patching.c
index 9900d5466973..db5e41c1ff32 100644
--- a/arch/powerpc/lib/code-patching.c
+++ b/arch/powerpc/lib/code-patching.c
@@ -234,6 +234,11 @@ bool is_offset_in_branch_range(long offset)
 	return (offset >= -0x2000000 && offset <= 0x1fffffc && !(offset & 0x3));
 }
 
+bool is_offset_in_cond_branch_range(long offset)
+{
+	return offset >= -0x8000 && offset <= 0x7fff && !(offset & 0x3);
+}
+
 /*
  * Helper to check if a given instruction is a conditional branch
  * Derived from the conditional checks in analyse_instr()
@@ -287,7 +292,7 @@ int create_cond_branch(struct ppc_inst *instr, const struct ppc_inst *addr,
 		offset = offset - (unsigned long)addr;
 
 	/* Check we can represent the target in the instruction format */
-	if (offset < -0x8000 || offset > 0x7FFF || offset & 0x3)
+	if (!is_offset_in_cond_branch_range(offset))
 		return 1;
 
 	/* Mask out the flags and target, so they don't step on each other. */
diff --git a/arch/powerpc/net/bpf_jit.h b/arch/powerpc/net/bpf_jit.h
index 6d58eaa7a69d..dc0c70577f10 100644
--- a/arch/powerpc/net/bpf_jit.h
+++ b/arch/powerpc/net/bpf_jit.h
@@ -78,11 +78,6 @@
 #define PPC_FUNC_ADDR(d,i) do { PPC_LI32(d, i); } while(0)
 #endif
 
-static inline bool is_nearbranch(int offset)
-{
-	return (offset < 32768) && (offset >= -32768);
-}
-
 /*
  * The fly in the ointment of code size changing from pass to pass is
  * avoided by padding the short branch case with a NOP.	 If code size differs
@@ -91,7 +86,7 @@ static inline bool is_nearbranch(int offset)
  * state.
  */
 #define PPC_BCC(cond, dest)	do {					      \
-		if (is_nearbranch((dest) - (ctx->idx * 4))) {		      \
+		if (is_offset_in_cond_branch_range((long)(dest) - (ctx->idx * 4))) {	\
 			PPC_BCC_SHORT(cond, dest);			      \
 			EMIT(PPC_RAW_NOP());				      \
 		} else {						      \
