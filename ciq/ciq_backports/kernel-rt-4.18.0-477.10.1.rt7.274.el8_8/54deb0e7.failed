net/mlx5: Remove not-needed IPsec config

jira LE-1907
Rebuild_History Non-Buildable kernel-rt-4.18.0-477.10.1.rt7.274.el8_8
commit-author Leon Romanovsky <leonro@nvidia.com>
commit 54deb0e77561973f4ca4515e18ab972c281eea1d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-rt-4.18.0-477.10.1.rt7.274.el8_8/54deb0e7.failed

In current code, the CONFIG_MLX5_IPSEC and CONFIG_MLX5_EN_IPSEC are
the same. So remove useless indirection.

Link: https://lore.kernel.org/r/fd14492cbc01a0d51a5bfedde02bcd2154123fde.1649232994.git.leonro@nvidia.com
	Reviewed-by: Raed Salem <raeds@nvidia.com>
	Signed-off-by: Leon Romanovsky <leonro@nvidia.com>
(cherry picked from commit 54deb0e77561973f4ca4515e18ab972c281eea1d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/Kconfig
#	drivers/net/ethernet/mellanox/mlx5/core/Makefile
#	drivers/net/ethernet/mellanox/mlx5/core/accel/ipsec_offload.h
diff --cc drivers/net/ethernet/mellanox/mlx5/core/Kconfig
index ebe13db50593,176883cf2827..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/Kconfig
+++ b/drivers/net/ethernet/mellanox/mlx5/core/Kconfig
@@@ -139,58 -139,19 +139,63 @@@ config MLX5_CORE_EN_DC
  config MLX5_CORE_IPOIB
  	bool "Mellanox 5th generation network adapters (connectX series) IPoIB offloads support"
  	depends on MLX5_CORE_EN
 -	help
 +	---help---
  	  MLX5 IPoIB offloads & acceleration support.
  
++<<<<<<< HEAD
 +config MLX5_FPGA_IPSEC
 +	bool "Mellanox Technologies IPsec Innova support"
 +	depends on MLX5_CORE
 +	depends on MLX5_FPGA
 +	help
 +	Build IPsec support for the Innova family of network cards by Mellanox
 +	Technologies. Innova network cards are comprised of a ConnectX chip
 +	and an FPGA chip on one board. If you select this option, the
 +	mlx5_core driver will include the Innova FPGA core and allow building
 +	sandbox-specific client drivers.
 +
 +config MLX5_IPSEC
++=======
+ config MLX5_EN_IPSEC
++>>>>>>> 54deb0e77561 (net/mlx5: Remove not-needed IPsec config)
  	bool "Mellanox Technologies IPsec Connect-X support"
  	depends on MLX5_CORE_EN
  	depends on XFRM_OFFLOAD
  	depends on INET_ESP_OFFLOAD || INET6_ESP_OFFLOAD
  	select MLX5_ACCEL
  	help
++<<<<<<< HEAD
 +	Build IPsec support for the Connect-X family of network cards by Mellanox
 +	Technologies.
 +	Note: If you select this option, the mlx5_core driver will include
 +	IPsec support for the Connect-X family.
 +
 +config MLX5_EN_IPSEC
 +	bool "IPSec XFRM cryptography-offload acceleration"
 +	depends on MLX5_CORE_EN
 +	depends on XFRM_OFFLOAD
 +	depends on INET_ESP_OFFLOAD || INET6_ESP_OFFLOAD
 +	depends on MLX5_FPGA_IPSEC || MLX5_IPSEC
 +	help
++=======
++>>>>>>> 54deb0e77561 (net/mlx5: Remove not-needed IPsec config)
  	  Build support for IPsec cryptography-offload acceleration in the NIC.
- 	  Note: Support for hardware with this capability needs to be selected
- 	  for this option to become available.
  
 -config MLX5_EN_TLS
 +config MLX5_FPGA_TLS
 +	bool "Mellanox Technologies TLS Innova support"
 +	depends on TLS_DEVICE
 +	depends on TLS=y || MLX5_CORE=m
 +	depends on MLX5_CORE_EN
 +	depends on MLX5_FPGA
 +	select MLX5_EN_TLS
 +	help
 +	Build TLS support for the Innova family of network cards by Mellanox
 +	Technologies. Innova network cards are comprised of a ConnectX chip
 +	and an FPGA chip on one board. If you select this option, the
 +	mlx5_core driver will include the Innova FPGA core and allow building
 +	sandbox-specific client drivers.
 +
 +config MLX5_TLS
  	bool "Mellanox Technologies TLS Connect-X support"
  	depends on TLS_DEVICE
  	depends on TLS=y || MLX5_CORE=m
diff --cc drivers/net/ethernet/mellanox/mlx5/core/Makefile
index 4bc666714a35,9e715a1056f8..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/Makefile
+++ b/drivers/net/ethernet/mellanox/mlx5/core/Makefile
@@@ -88,17 -88,15 +88,22 @@@ mlx5_core-$(CONFIG_MLX5_CORE_IPOIB) += 
  #
  # Accelerations & FPGA
  #
++<<<<<<< HEAD
 +mlx5_core-$(CONFIG_MLX5_IPSEC) += accel/ipsec_offload.o
 +mlx5_core-$(CONFIG_MLX5_FPGA_IPSEC) += fpga/ipsec.o
 +mlx5_core-$(CONFIG_MLX5_FPGA_TLS)   += fpga/tls.o
 +mlx5_core-$(CONFIG_MLX5_ACCEL)      += lib/crypto.o accel/tls.o accel/ipsec.o
++=======
+ mlx5_core-$(CONFIG_MLX5_ACCEL) += lib/crypto.o
++>>>>>>> 54deb0e77561 (net/mlx5: Remove not-needed IPsec config)
  
  mlx5_core-$(CONFIG_MLX5_FPGA) += fpga/cmd.o fpga/core.o fpga/conn.o fpga/sdk.o
  
  mlx5_core-$(CONFIG_MLX5_EN_IPSEC) += en_accel/ipsec.o en_accel/ipsec_rxtx.o \
- 				     en_accel/ipsec_stats.o en_accel/ipsec_fs.o
+ 				     en_accel/ipsec_stats.o en_accel/ipsec_fs.o \
+ 				     accel/ipsec_offload.o
  
 -mlx5_core-$(CONFIG_MLX5_EN_TLS) += en_accel/ktls_stats.o \
 +mlx5_core-$(CONFIG_MLX5_EN_TLS) += en_accel/tls.o en_accel/tls_rxtx.o en_accel/tls_stats.o \
  				   en_accel/fs_tcp.o en_accel/ktls.o en_accel/ktls_txrx.o \
  				   en_accel/ktls_tx.o en_accel/ktls_rx.o
  
diff --cc drivers/net/ethernet/mellanox/mlx5/core/accel/ipsec_offload.h
index 970c66d19c1d,36e700b596d8..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/accel/ipsec_offload.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/accel/ipsec_offload.h
@@@ -5,34 -5,45 +5,41 @@@
  #define __MLX5_IPSEC_OFFLOAD_H__
  
  #include <linux/mlx5/driver.h>
 -#include <linux/mlx5/accel.h>
 +#include "accel/ipsec.h"
  
- #ifdef CONFIG_MLX5_IPSEC
+ #ifdef CONFIG_MLX5_EN_IPSEC
  
 -unsigned int mlx5_accel_ipsec_counters_count(struct mlx5_core_dev *mdev);
 -int mlx5_accel_ipsec_counters_read(struct mlx5_core_dev *mdev, u64 *counters,
 -				   unsigned int count);
 -
 -void *mlx5_accel_esp_create_hw_context(struct mlx5_core_dev *mdev,
 -				       struct mlx5_accel_esp_xfrm *xfrm,
 -				       u32 *sa_handle);
 -void mlx5_accel_esp_free_hw_context(struct mlx5_core_dev *mdev, void *context);
 -
 -void mlx5_accel_ipsec_init(struct mlx5_core_dev *mdev);
 -void mlx5_accel_ipsec_cleanup(struct mlx5_core_dev *mdev);
 -
 -struct mlx5_accel_ipsec_ops {
 -	unsigned int (*counters_count)(struct mlx5_core_dev *mdev);
 -	int (*counters_read)(struct mlx5_core_dev *mdev, u64 *counters,
 -			     unsigned int count);
 -	void *(*create_hw_context)(struct mlx5_core_dev *mdev,
 -				   struct mlx5_accel_esp_xfrm *xfrm,
 -				   const __be32 saddr[4], const __be32 daddr[4],
 -				   const __be32 spi, bool is_ipv6,
 -				   u32 *sa_handle);
 -	void (*free_hw_context)(void *context);
 -	int (*init)(struct mlx5_core_dev *mdev);
 -	void (*cleanup)(struct mlx5_core_dev *mdev);
 -	struct mlx5_accel_esp_xfrm *(*esp_create_xfrm)(
 -		struct mlx5_core_dev *mdev,
 -		const struct mlx5_accel_esp_xfrm_attrs *attrs, u32 flags);
 -	int (*esp_modify_xfrm)(struct mlx5_accel_esp_xfrm *xfrm,
 -			       const struct mlx5_accel_esp_xfrm_attrs *attrs);
 -	void (*esp_destroy_xfrm)(struct mlx5_accel_esp_xfrm *xfrm);
 -};
 +const struct mlx5_accel_ipsec_ops *mlx5_ipsec_offload_ops(struct mlx5_core_dev *mdev);
 +static inline bool mlx5_is_ipsec_device(struct mlx5_core_dev *mdev)
 +{
 +	if (!MLX5_CAP_GEN(mdev, ipsec_offload))
 +		return false;
 +
 +	if (!MLX5_CAP_GEN(mdev, log_max_dek))
 +		return false;
 +
 +	if (!(MLX5_CAP_GEN_64(mdev, general_obj_types) &
 +	    MLX5_HCA_CAP_GENERAL_OBJECT_TYPES_IPSEC))
 +		return false;
 +
 +	return MLX5_CAP_IPSEC(mdev, ipsec_crypto_offload) &&
 +		MLX5_CAP_ETH(mdev, insert_trailer);
 +}
  
  #else
++<<<<<<< HEAD
 +static inline const struct mlx5_accel_ipsec_ops *
 +mlx5_ipsec_offload_ops(struct mlx5_core_dev *mdev) { return NULL; }
 +static inline bool mlx5_is_ipsec_device(struct mlx5_core_dev *mdev)
 +{
 +	return false;
 +}
 +
 +#endif /* CONFIG_MLX5_IPSEC */
++=======
+ static inline void mlx5_accel_ipsec_init(struct mlx5_core_dev *mdev) {}
+ 
+ static inline void mlx5_accel_ipsec_cleanup(struct mlx5_core_dev *mdev) {}
+ #endif /* CONFIG_MLX5_EN_IPSEC */
++>>>>>>> 54deb0e77561 (net/mlx5: Remove not-needed IPsec config)
  #endif /* __MLX5_IPSEC_OFFLOAD_H__ */
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/Kconfig
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/Makefile
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/accel/ipsec_offload.h
diff --git a/include/linux/mlx5/accel.h b/include/linux/mlx5/accel.h
index af67d51308cf..537567f7a835 100644
--- a/include/linux/mlx5/accel.h
+++ b/include/linux/mlx5/accel.h
@@ -122,7 +122,7 @@ enum mlx5_accel_ipsec_cap {
 	MLX5_ACCEL_IPSEC_CAP_TX_IV_IS_ESN	= 1 << 7,
 };
 
-#ifdef CONFIG_MLX5_ACCEL
+#ifdef CONFIG_MLX5_EN_IPSEC
 
 u32 mlx5_accel_ipsec_device_caps(struct mlx5_core_dev *mdev);
 
@@ -149,5 +149,5 @@ static inline int
 mlx5_accel_esp_modify_xfrm(struct mlx5_accel_esp_xfrm *xfrm,
 			   const struct mlx5_accel_esp_xfrm_attrs *attrs) { return -EOPNOTSUPP; }
 
-#endif /* CONFIG_MLX5_ACCEL */
+#endif /* CONFIG_MLX5_EN_IPSEC */
 #endif /* __MLX5_ACCEL_H__ */
diff --git a/include/linux/mlx5/driver.h b/include/linux/mlx5/driver.h
index 9424503eb8d3..5af53c035949 100644
--- a/include/linux/mlx5/driver.h
+++ b/include/linux/mlx5/driver.h
@@ -778,7 +778,7 @@ struct mlx5_core_dev {
 #ifdef CONFIG_MLX5_FPGA
 	struct mlx5_fpga_device *fpga;
 #endif
-#ifdef CONFIG_MLX5_ACCEL
+#ifdef CONFIG_MLX5_EN_IPSEC
 	const struct mlx5_accel_ipsec_ops *ipsec_ops;
 #endif
 	struct mlx5_clock        clock;
