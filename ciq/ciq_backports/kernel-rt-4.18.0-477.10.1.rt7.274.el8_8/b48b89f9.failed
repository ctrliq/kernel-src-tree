net: drop the weight argument from netif_napi_add

jira LE-1907
Rebuild_History Non-Buildable kernel-rt-4.18.0-477.10.1.rt7.274.el8_8
commit-author Jakub Kicinski <kuba@kernel.org>
commit b48b89f9c189d24eb5e2b4a0ac067da5a24ee86d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-rt-4.18.0-477.10.1.rt7.274.el8_8/b48b89f9.failed

We tell driver developers to always pass NAPI_POLL_WEIGHT
as the weight to netif_napi_add(). This may be confusing
to newcomers, drop the weight argument, those who really
need to tweak the weight can use netif_napi_add_weight().

	Acked-by: Marc Kleine-Budde <mkl@pengutronix.de> # for CAN
Link: https://lore.kernel.org/r/20220927132753.750069-1-kuba@kernel.org
	Signed-off-by: Jakub Kicinski <kuba@kernel.org>
(cherry picked from commit b48b89f9c189d24eb5e2b4a0ac067da5a24ee86d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/can/ctucanfd/ctucanfd_base.c
#	drivers/net/can/m_can/m_can.c
#	drivers/net/ethernet/actions/owl-emac.c
#	drivers/net/ethernet/alacritech/slicoss.c
#	drivers/net/ethernet/atheros/atl1c/atl1c_main.c
#	drivers/net/ethernet/broadcom/bcm4908_enet.c
#	drivers/net/ethernet/broadcom/bgmac.c
#	drivers/net/ethernet/cadence/macb_main.c
#	drivers/net/ethernet/cortina/gemini.c
#	drivers/net/ethernet/engleder/tsnep_main.c
#	drivers/net/ethernet/freescale/dpaa2/dpaa2-eth.c
#	drivers/net/ethernet/freescale/dpaa2/dpaa2-switch.c
#	drivers/net/ethernet/freescale/enetc/enetc.c
#	drivers/net/ethernet/freescale/gianfar.c
#	drivers/net/ethernet/fungible/funeth/funeth_main.c
#	drivers/net/ethernet/jme.c
#	drivers/net/ethernet/lantiq_xrx200.c
#	drivers/net/ethernet/marvell/octeon_ep/octep_main.c
#	drivers/net/ethernet/marvell/octeontx2/nic/otx2_pf.c
#	drivers/net/ethernet/marvell/prestera/prestera_rxtx.c
#	drivers/net/ethernet/marvell/skge.c
#	drivers/net/ethernet/marvell/sky2.c
#	drivers/net/ethernet/mediatek/mtk_eth_soc.c
#	drivers/net/ethernet/mediatek/mtk_star_emac.c
#	drivers/net/ethernet/microchip/lan743x_main.c
#	drivers/net/ethernet/microchip/lan966x/lan966x_fdma.c
#	drivers/net/ethernet/netronome/nfp/nfp_net_common.c
#	drivers/net/ethernet/ni/nixge.c
#	drivers/net/ethernet/oki-semi/pch_gbe/pch_gbe_main.c
#	drivers/net/ethernet/qlogic/qlge/qlge_main.c
#	drivers/net/ethernet/renesas/ravb_main.c
#	drivers/net/ethernet/rocker/rocker_main.c
#	drivers/net/ethernet/sfc/falcon/efx.c
#	drivers/net/ethernet/socionext/netsec.c
#	drivers/net/ethernet/socionext/sni_ave.c
#	drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
#	drivers/net/ethernet/sunplus/spl2sw_driver.c
#	drivers/net/ethernet/ti/am65-cpsw-nuss.c
#	drivers/net/ethernet/ti/cpsw.c
#	drivers/net/ethernet/ti/cpsw_new.c
#	drivers/net/ethernet/ti/davinci_emac.c
#	drivers/net/ethernet/ti/netcp_core.c
#	drivers/net/ethernet/toshiba/spider_net.c
#	drivers/net/ethernet/via/via-velocity.c
#	drivers/net/ethernet/xilinx/xilinx_axienet_main.c
#	drivers/net/ipa/gsi.c
#	drivers/net/usb/lan78xx.c
#	drivers/net/wireguard/peer.c
#	drivers/net/wireless/ath/wil6210/netdev.c
#	drivers/net/xen-netback/interface.c
#	drivers/net/xen-netfront.c
#	drivers/s390/net/qeth_l2_main.c
diff --cc drivers/net/can/m_can/m_can.c
index 9b449400376b,dcb582563d5e..000000000000
--- a/drivers/net/can/m_can/m_can.c
+++ b/drivers/net/can/m_can/m_can.c
@@@ -1256,30 -1466,30 +1256,35 @@@ static int m_can_dev_setup(struct platf
  		return -EINVAL;
  	}
  
++<<<<<<< HEAD
 +	priv = netdev_priv(dev);
 +	netif_napi_add(dev, &priv->napi, m_can_poll, M_CAN_NAPI_WEIGHT);
++=======
+ 	if (!cdev->is_peripheral)
+ 		netif_napi_add(dev, &cdev->napi, m_can_poll);
++>>>>>>> b48b89f9c189 (net: drop the weight argument from netif_napi_add)
  
  	/* Shared properties of all M_CAN versions */
 -	cdev->version = m_can_version;
 -	cdev->can.do_set_mode = m_can_set_mode;
 -	cdev->can.do_get_berr_counter = m_can_get_berr_counter;
 +	priv->version = m_can_version;
 +	priv->dev = dev;
 +	priv->base = addr;
 +	priv->can.do_set_mode = m_can_set_mode;
 +	priv->can.do_get_berr_counter = m_can_get_berr_counter;
  
  	/* Set M_CAN supported operations */
 -	cdev->can.ctrlmode_supported = CAN_CTRLMODE_LOOPBACK |
 -		CAN_CTRLMODE_LISTENONLY |
 -		CAN_CTRLMODE_BERR_REPORTING |
 -		CAN_CTRLMODE_FD |
 -		CAN_CTRLMODE_ONE_SHOT;
 +	priv->can.ctrlmode_supported = CAN_CTRLMODE_LOOPBACK |
 +					CAN_CTRLMODE_LISTENONLY |
 +					CAN_CTRLMODE_BERR_REPORTING |
 +					CAN_CTRLMODE_FD;
  
  	/* Set properties depending on M_CAN version */
 -	switch (cdev->version) {
 +	switch (priv->version) {
  	case 30:
  		/* CAN_CTRLMODE_FD_NON_ISO is fixed with M_CAN IP v3.0.x */
 -		err = can_set_static_ctrlmode(dev, CAN_CTRLMODE_FD_NON_ISO);
 -		if (err)
 -			return err;
 -		cdev->can.bittiming_const = &m_can_bittiming_const_30X;
 -		cdev->can.data_bittiming_const = &m_can_data_bittiming_const_30X;
 +		can_set_static_ctrlmode(dev, CAN_CTRLMODE_FD_NON_ISO);
 +		priv->can.bittiming_const = &m_can_bittiming_const_30X;
 +		priv->can.data_bittiming_const =
 +				&m_can_data_bittiming_const_30X;
  		break;
  	case 31:
  		/* CAN_CTRLMODE_FD_NON_ISO is fixed with M_CAN IP v3.1.x */
diff --cc drivers/net/ethernet/alacritech/slicoss.c
index bae468be5d7d,a30d0f172986..000000000000
--- a/drivers/net/ethernet/alacritech/slicoss.c
+++ b/drivers/net/ethernet/alacritech/slicoss.c
@@@ -1814,7 -1803,7 +1814,11 @@@ static int slic_probe(struct pci_dev *p
  		goto unmap;
  	}
  
++<<<<<<< HEAD
 +	netif_napi_add(dev, &sdev->napi, slic_poll, SLIC_NAPI_WEIGHT);
++=======
+ 	netif_napi_add(dev, &sdev->napi, slic_poll);
++>>>>>>> b48b89f9c189 (net: drop the weight argument from netif_napi_add)
  	netif_carrier_off(dev);
  
  	err = register_netdev(dev);
diff --cc drivers/net/ethernet/atheros/atl1c/atl1c_main.c
index a01ce7e0b8f4,40c781695d58..000000000000
--- a/drivers/net/ethernet/atheros/atl1c/atl1c_main.c
+++ b/drivers/net/ethernet/atheros/atl1c/atl1c_main.c
@@@ -2615,7 -2729,13 +2615,17 @@@ static int atl1c_probe(struct pci_dev *
  	adapter->mii.mdio_write = atl1c_mdio_write;
  	adapter->mii.phy_id_mask = 0x1f;
  	adapter->mii.reg_num_mask = MDIO_CTRL_REG_MASK;
++<<<<<<< HEAD
 +	netif_napi_add(netdev, &adapter->napi, atl1c_clean, 64);
++=======
+ 	dev_set_threaded(netdev, true);
+ 	for (i = 0; i < adapter->rx_queue_count; ++i)
+ 		netif_napi_add(netdev, &adapter->rrd_ring[i].napi,
+ 			       atl1c_clean_rx);
+ 	for (i = 0; i < adapter->tx_queue_count; ++i)
+ 		netif_napi_add_tx(netdev, &adapter->tpd_ring[i].napi,
+ 				  atl1c_clean_tx);
++>>>>>>> b48b89f9c189 (net: drop the weight argument from netif_napi_add)
  	timer_setup(&adapter->phy_config_timer, atl1c_phy_config, 0);
  	/* setup the private structure */
  	err = atl1c_sw_init(adapter);
diff --cc drivers/net/ethernet/broadcom/bgmac.c
index 01e81d0708cb,5fb3af5670ec..000000000000
--- a/drivers/net/ethernet/broadcom/bgmac.c
+++ b/drivers/net/ethernet/broadcom/bgmac.c
@@@ -1530,7 -1527,7 +1530,11 @@@ int bgmac_enet_probe(struct bgmac *bgma
  	if (bcm47xx_nvram_getenv("et0_no_txint", NULL, 0) == 0)
  		bgmac->int_mask &= ~BGMAC_IS_TX_MASK;
  
++<<<<<<< HEAD
 +	netif_napi_add(net_dev, &bgmac->napi, bgmac_poll, BGMAC_WEIGHT);
++=======
+ 	netif_napi_add(net_dev, &bgmac->napi, bgmac_poll);
++>>>>>>> b48b89f9c189 (net: drop the weight argument from netif_napi_add)
  
  	err = bgmac_phy_connect(bgmac);
  	if (err) {
diff --cc drivers/net/ethernet/cadence/macb_main.c
index 04c996c5df2b,c39697bed2fa..000000000000
--- a/drivers/net/ethernet/cadence/macb_main.c
+++ b/drivers/net/ethernet/cadence/macb_main.c
@@@ -3298,7 -3977,9 +3298,13 @@@ static int macb_init(struct platform_de
  
  		queue = &bp->queues[q];
  		queue->bp = bp;
++<<<<<<< HEAD
 +		netif_napi_add(dev, &queue->napi, macb_poll, 64);
++=======
+ 		spin_lock_init(&queue->tx_ptr_lock);
+ 		netif_napi_add(dev, &queue->napi_rx, macb_rx_poll);
+ 		netif_napi_add(dev, &queue->napi_tx, macb_tx_poll);
++>>>>>>> b48b89f9c189 (net: drop the weight argument from netif_napi_add)
  		if (hw_q) {
  			queue->ISR  = GEM_ISR(hw_q - 1);
  			queue->IER  = GEM_IER(hw_q - 1);
diff --cc drivers/net/ethernet/cortina/gemini.c
index b9a20b0fbf4a,fdf10318758b..000000000000
--- a/drivers/net/ethernet/cortina/gemini.c
+++ b/drivers/net/ethernet/cortina/gemini.c
@@@ -2430,13 -2464,23 +2430,23 @@@ static int gemini_ethernet_port_probe(s
  
  	netdev->hw_features = GMAC_OFFLOAD_FEATURES;
  	netdev->features |= GMAC_OFFLOAD_FEATURES | NETIF_F_GRO;
 -	/* We can handle jumbo frames up to 10236 bytes so, let's accept
 -	 * payloads of 10236 bytes minus VLAN and ethernet header
 -	 */
 -	netdev->min_mtu = ETH_MIN_MTU;
 -	netdev->max_mtu = 10236 - VLAN_ETH_HLEN;
  
  	port->freeq_refill = 0;
++<<<<<<< HEAD
 +	netif_napi_add(netdev, &port->napi, gmac_napi_poll,
 +		       DEFAULT_NAPI_WEIGHT);
++=======
+ 	netif_napi_add(netdev, &port->napi, gmac_napi_poll);
+ 
+ 	ret = of_get_mac_address(np, mac);
+ 	if (!ret) {
+ 		dev_info(dev, "Setting macaddr from DT %pM\n", mac);
+ 		memcpy(port->mac_addr, mac, ETH_ALEN);
+ 	}
++>>>>>>> b48b89f9c189 (net: drop the weight argument from netif_napi_add)
  
  	if (is_valid_ether_addr((void *)port->mac_addr)) {
 -		eth_hw_addr_set(netdev, (u8 *)port->mac_addr);
 +		memcpy(netdev->dev_addr, port->mac_addr, ETH_ALEN);
  	} else {
  		dev_dbg(dev, "ethernet address 0x%08x%08x%08x invalid\n",
  			port->mac_addr[0], port->mac_addr[1],
diff --cc drivers/net/ethernet/freescale/gianfar.c
index 64db01f0bdf9,b2def295523a..000000000000
--- a/drivers/net/ethernet/freescale/gianfar.c
+++ b/drivers/net/ethernet/freescale/gianfar.c
@@@ -1299,278 -984,194 +1299,285 @@@ static void gfar_init_addr_hash_table(s
  	}
  }
  
 -static int __gfar_is_rx_idle(struct gfar_private *priv)
 +/* Set up the ethernet device structure, private data,
 + * and anything else we need before we start
 + */
 +static int gfar_probe(struct platform_device *ofdev)
  {
 -	u32 res;
 +	struct device_node *np = ofdev->dev.of_node;
 +	struct net_device *dev = NULL;
 +	struct gfar_private *priv = NULL;
 +	int err = 0, i;
  
 -	/* Normaly TSEC should not hang on GRS commands, so we should
 -	 * actually wait for IEVENT_GRSC flag.
 -	 */
 -	if (!gfar_has_errata(priv, GFAR_ERRATA_A002))
 -		return 0;
 +	err = gfar_of_init(ofdev, &dev);
  
 -	/* Read the eTSEC register at offset 0xD1C. If bits 7-14 are
 -	 * the same as bits 23-30, the eTSEC Rx is assumed to be idle
 -	 * and the Rx can be safely reset.
 -	 */
 -	res = gfar_read((void __iomem *)priv->gfargrp[0].regs + 0xd1c);
 -	res &= 0x7f807f80;
 -	if ((res & 0xffff) == (res >> 16))
 -		return 1;
 +	if (err)
 +		return err;
  
 -	return 0;
 -}
 +	priv = netdev_priv(dev);
 +	priv->ndev = dev;
 +	priv->ofdev = ofdev;
 +	priv->dev = &ofdev->dev;
 +	SET_NETDEV_DEV(dev, &ofdev->dev);
  
 -/* Halt the receive and transmit queues */
 -static void gfar_halt_nodisable(struct gfar_private *priv)
 -{
 -	struct gfar __iomem *regs = priv->gfargrp[0].regs;
 -	u32 tempval;
 -	unsigned int timeout;
 -	int stopped;
 +	INIT_WORK(&priv->reset_task, gfar_reset_task);
  
 -	gfar_ints_disable(priv);
 +	platform_set_drvdata(ofdev, priv);
  
 -	if (gfar_is_dma_stopped(priv))
 -		return;
 +	gfar_detect_errata(priv);
  
 -	/* Stop the DMA, and wait for it to stop */
 -	tempval = gfar_read(&regs->dmactrl);
 -	tempval |= (DMACTRL_GRS | DMACTRL_GTS);
 -	gfar_write(&regs->dmactrl, tempval);
 +	/* Set the dev->base_addr to the gfar reg region */
 +	dev->base_addr = (unsigned long) priv->gfargrp[0].regs;
  
 -retry:
 -	timeout = 1000;
 -	while (!(stopped = gfar_is_dma_stopped(priv)) && timeout) {
 -		cpu_relax();
 -		timeout--;
 +	/* Fill in the dev structure */
 +	dev->watchdog_timeo = TX_TIMEOUT;
 +	/* MTU range: 50 - 9586 */
 +	dev->mtu = 1500;
 +	dev->min_mtu = 50;
 +	dev->max_mtu = GFAR_JUMBO_FRAME_SIZE - ETH_HLEN;
 +	dev->netdev_ops = &gfar_netdev_ops;
 +	dev->ethtool_ops = &gfar_ethtool_ops;
 +
 +	/* Register for napi ...We are registering NAPI for each grp */
 +	for (i = 0; i < priv->num_grps; i++) {
++<<<<<<< HEAD
 +		if (priv->poll_mode == GFAR_SQ_POLLING) {
 +			netif_napi_add(dev, &priv->gfargrp[i].napi_rx,
 +				       gfar_poll_rx_sq, GFAR_DEV_WEIGHT);
 +			netif_tx_napi_add(dev, &priv->gfargrp[i].napi_tx,
 +				       gfar_poll_tx_sq, 2);
 +		} else {
 +			netif_napi_add(dev, &priv->gfargrp[i].napi_rx,
 +				       gfar_poll_rx, GFAR_DEV_WEIGHT);
 +			netif_tx_napi_add(dev, &priv->gfargrp[i].napi_tx,
 +				       gfar_poll_tx, 2);
 +		}
++=======
++		netif_napi_add(dev, &priv->gfargrp[i].napi_rx,
++			       gfar_poll_rx_sq);
++		netif_napi_add_tx_weight(dev, &priv->gfargrp[i].napi_tx,
++					 gfar_poll_tx_sq, 2);
++>>>>>>> b48b89f9c189 (net: drop the weight argument from netif_napi_add)
  	}
  
 -	if (!timeout)
 -		stopped = gfar_is_dma_stopped(priv);
 +	if (priv->device_flags & FSL_GIANFAR_DEV_HAS_CSUM) {
 +		dev->hw_features = NETIF_F_IP_CSUM | NETIF_F_SG |
 +				   NETIF_F_RXCSUM;
 +		dev->features |= NETIF_F_IP_CSUM | NETIF_F_SG |
 +				 NETIF_F_RXCSUM | NETIF_F_HIGHDMA;
 +	}
  
 -	if (!stopped && !gfar_is_rx_dma_stopped(priv) &&
 -	    !__gfar_is_rx_idle(priv))
 -		goto retry;
 -}
 +	if (priv->device_flags & FSL_GIANFAR_DEV_HAS_VLAN) {
 +		dev->hw_features |= NETIF_F_HW_VLAN_CTAG_TX |
 +				    NETIF_F_HW_VLAN_CTAG_RX;
 +		dev->features |= NETIF_F_HW_VLAN_CTAG_RX;
 +	}
  
 -/* Halt the receive and transmit queues */
 -static void gfar_halt(struct gfar_private *priv)
 -{
 -	struct gfar __iomem *regs = priv->gfargrp[0].regs;
 -	u32 tempval;
 +	dev->priv_flags |= IFF_LIVE_ADDR_CHANGE;
  
 -	/* Dissable the Rx/Tx hw queues */
 -	gfar_write(&regs->rqueue, 0);
 -	gfar_write(&regs->tqueue, 0);
 +	gfar_init_addr_hash_table(priv);
  
 -	mdelay(10);
 +	/* Insert receive time stamps into padding alignment bytes, and
 +	 * plus 2 bytes padding to ensure the cpu alignment.
 +	 */
 +	if (priv->device_flags & FSL_GIANFAR_DEV_HAS_TIMER)
 +		priv->padding = 8 + DEFAULT_PADDING;
  
 -	gfar_halt_nodisable(priv);
 +	if (dev->features & NETIF_F_IP_CSUM ||
 +	    priv->device_flags & FSL_GIANFAR_DEV_HAS_TIMER)
 +		dev->needed_headroom = GMAC_FCB_LEN;
  
 -	/* Disable Rx/Tx DMA */
 -	tempval = gfar_read(&regs->maccfg1);
 -	tempval &= ~(MACCFG1_RX_EN | MACCFG1_TX_EN);
 -	gfar_write(&regs->maccfg1, tempval);
 -}
 +	/* Initializing some of the rx/tx queue level parameters */
 +	for (i = 0; i < priv->num_tx_queues; i++) {
 +		priv->tx_queue[i]->tx_ring_size = DEFAULT_TX_RING_SIZE;
 +		priv->tx_queue[i]->num_txbdfree = DEFAULT_TX_RING_SIZE;
 +		priv->tx_queue[i]->txcoalescing = DEFAULT_TX_COALESCE;
 +		priv->tx_queue[i]->txic = DEFAULT_TXIC;
 +	}
  
 -static void free_skb_tx_queue(struct gfar_priv_tx_q *tx_queue)
 -{
 -	struct txbd8 *txbdp;
 -	struct gfar_private *priv = netdev_priv(tx_queue->dev);
 -	int i, j;
 +	for (i = 0; i < priv->num_rx_queues; i++) {
 +		priv->rx_queue[i]->rx_ring_size = DEFAULT_RX_RING_SIZE;
 +		priv->rx_queue[i]->rxcoalescing = DEFAULT_RX_COALESCE;
 +		priv->rx_queue[i]->rxic = DEFAULT_RXIC;
 +	}
  
 -	txbdp = tx_queue->tx_bd_base;
 +	/* Always enable rx filer if available */
 +	priv->rx_filer_enable =
 +	    (priv->device_flags & FSL_GIANFAR_DEV_HAS_RX_FILER) ? 1 : 0;
 +	/* Enable most messages by default */
 +	priv->msg_enable = (NETIF_MSG_IFUP << 1 ) - 1;
 +	/* use pritority h/w tx queue scheduling for single queue devices */
 +	if (priv->num_tx_queues == 1)
 +		priv->prio_sched_en = 1;
  
 -	for (i = 0; i < tx_queue->tx_ring_size; i++) {
 -		if (!tx_queue->tx_skbuff[i])
 -			continue;
 +	set_bit(GFAR_DOWN, &priv->state);
  
 -		dma_unmap_single(priv->dev, be32_to_cpu(txbdp->bufPtr),
 -				 be16_to_cpu(txbdp->length), DMA_TO_DEVICE);
 -		txbdp->lstatus = 0;
 -		for (j = 0; j < skb_shinfo(tx_queue->tx_skbuff[i])->nr_frags;
 -		     j++) {
 -			txbdp++;
 -			dma_unmap_page(priv->dev, be32_to_cpu(txbdp->bufPtr),
 -				       be16_to_cpu(txbdp->length),
 -				       DMA_TO_DEVICE);
 -		}
 -		txbdp++;
 -		dev_kfree_skb_any(tx_queue->tx_skbuff[i]);
 -		tx_queue->tx_skbuff[i] = NULL;
 +	gfar_hw_init(priv);
 +
 +	/* Carrier starts down, phylib will bring it up */
 +	netif_carrier_off(dev);
 +
 +	err = register_netdev(dev);
 +
 +	if (err) {
 +		pr_err("%s: Cannot register net device, aborting\n", dev->name);
 +		goto register_fail;
  	}
 -	kfree(tx_queue->tx_skbuff);
 -	tx_queue->tx_skbuff = NULL;
 -}
  
 -static void free_skb_rx_queue(struct gfar_priv_rx_q *rx_queue)
 -{
 -	int i;
 +	if (priv->device_flags & FSL_GIANFAR_DEV_HAS_MAGIC_PACKET)
 +		priv->wol_supported |= GFAR_WOL_MAGIC;
  
 -	struct rxbd8 *rxbdp = rx_queue->rx_bd_base;
 +	if ((priv->device_flags & FSL_GIANFAR_DEV_HAS_WAKE_ON_FILER) &&
 +	    priv->rx_filer_enable)
 +		priv->wol_supported |= GFAR_WOL_FILER_UCAST;
  
 -	dev_kfree_skb(rx_queue->skb);
 +	device_set_wakeup_capable(&ofdev->dev, priv->wol_supported);
  
 -	for (i = 0; i < rx_queue->rx_ring_size; i++) {
 -		struct	gfar_rx_buff *rxb = &rx_queue->rx_buff[i];
 +	/* fill out IRQ number and name fields */
 +	for (i = 0; i < priv->num_grps; i++) {
 +		struct gfar_priv_grp *grp = &priv->gfargrp[i];
 +		if (priv->device_flags & FSL_GIANFAR_DEV_HAS_MULTI_INTR) {
 +			sprintf(gfar_irq(grp, TX)->name, "%s%s%c%s",
 +				dev->name, "_g", '0' + i, "_tx");
 +			sprintf(gfar_irq(grp, RX)->name, "%s%s%c%s",
 +				dev->name, "_g", '0' + i, "_rx");
 +			sprintf(gfar_irq(grp, ER)->name, "%s%s%c%s",
 +				dev->name, "_g", '0' + i, "_er");
 +		} else
 +			strcpy(gfar_irq(grp, TX)->name, dev->name);
 +	}
  
 -		rxbdp->lstatus = 0;
 -		rxbdp->bufPtr = 0;
 -		rxbdp++;
 +	/* Initialize the filer table */
 +	gfar_init_filer_table(priv);
  
 -		if (!rxb->page)
 -			continue;
 +	/* Print out the device info */
 +	netdev_info(dev, "mac: %pM\n", dev->dev_addr);
  
 -		dma_unmap_page(rx_queue->dev, rxb->dma,
 -			       PAGE_SIZE, DMA_FROM_DEVICE);
 -		__free_page(rxb->page);
 +	/* Even more device info helps when determining which kernel
 +	 * provided which set of benchmarks.
 +	 */
 +	netdev_info(dev, "Running with NAPI enabled\n");
 +	for (i = 0; i < priv->num_rx_queues; i++)
 +		netdev_info(dev, "RX BD ring size for Q[%d]: %d\n",
 +			    i, priv->rx_queue[i]->rx_ring_size);
 +	for (i = 0; i < priv->num_tx_queues; i++)
 +		netdev_info(dev, "TX BD ring size for Q[%d]: %d\n",
 +			    i, priv->tx_queue[i]->tx_ring_size);
  
 -		rxb->page = NULL;
 -	}
 +	return 0;
  
 -	kfree(rx_queue->rx_buff);
 -	rx_queue->rx_buff = NULL;
 +register_fail:
 +	if (of_phy_is_fixed_link(np))
 +		of_phy_deregister_fixed_link(np);
 +	unmap_group_regs(priv);
 +	gfar_free_rx_queues(priv);
 +	gfar_free_tx_queues(priv);
 +	of_node_put(priv->phy_node);
 +	of_node_put(priv->tbi_node);
 +	free_gfar_dev(priv);
 +	return err;
  }
  
 -/* If there are any tx skbs or rx skbs still around, free them.
 - * Then free tx_skbuff and rx_skbuff
 - */
 -static void free_skb_resources(struct gfar_private *priv)
 +static int gfar_remove(struct platform_device *ofdev)
  {
 -	struct gfar_priv_tx_q *tx_queue = NULL;
 -	struct gfar_priv_rx_q *rx_queue = NULL;
 -	int i;
 +	struct gfar_private *priv = platform_get_drvdata(ofdev);
 +	struct device_node *np = ofdev->dev.of_node;
  
 -	/* Go through all the buffer descriptors and free their data buffers */
 -	for (i = 0; i < priv->num_tx_queues; i++) {
 -		struct netdev_queue *txq;
 +	of_node_put(priv->phy_node);
 +	of_node_put(priv->tbi_node);
  
 -		tx_queue = priv->tx_queue[i];
 -		txq = netdev_get_tx_queue(tx_queue->dev, tx_queue->qindex);
 -		if (tx_queue->tx_skbuff)
 -			free_skb_tx_queue(tx_queue);
 -		netdev_tx_reset_queue(txq);
 -	}
 +	unregister_netdev(priv->ndev);
  
 -	for (i = 0; i < priv->num_rx_queues; i++) {
 -		rx_queue = priv->rx_queue[i];
 -		if (rx_queue->rx_buff)
 -			free_skb_rx_queue(rx_queue);
 -	}
 +	if (of_phy_is_fixed_link(np))
 +		of_phy_deregister_fixed_link(np);
  
 -	dma_free_coherent(priv->dev,
 -			  sizeof(struct txbd8) * priv->total_tx_ring_size +
 -			  sizeof(struct rxbd8) * priv->total_rx_ring_size,
 -			  priv->tx_queue[0]->tx_bd_base,
 -			  priv->tx_queue[0]->tx_bd_dma_base);
 +	unmap_group_regs(priv);
 +	gfar_free_rx_queues(priv);
 +	gfar_free_tx_queues(priv);
 +	free_gfar_dev(priv);
 +
 +	return 0;
  }
  
 -void stop_gfar(struct net_device *dev)
 +#ifdef CONFIG_PM
 +
 +static void __gfar_filer_disable(struct gfar_private *priv)
  {
 -	struct gfar_private *priv = netdev_priv(dev);
 +	struct gfar __iomem *regs = priv->gfargrp[0].regs;
 +	u32 temp;
  
 -	netif_tx_stop_all_queues(dev);
 +	temp = gfar_read(&regs->rctrl);
 +	temp &= ~(RCTRL_FILREN | RCTRL_PRSDEP_INIT);
 +	gfar_write(&regs->rctrl, temp);
 +}
  
 -	smp_mb__before_atomic();
 -	set_bit(GFAR_DOWN, &priv->state);
 -	smp_mb__after_atomic();
 +static void __gfar_filer_enable(struct gfar_private *priv)
 +{
 +	struct gfar __iomem *regs = priv->gfargrp[0].regs;
 +	u32 temp;
  
 -	disable_napi(priv);
 +	temp = gfar_read(&regs->rctrl);
 +	temp |= RCTRL_FILREN | RCTRL_PRSDEP_INIT;
 +	gfar_write(&regs->rctrl, temp);
 +}
  
 -	/* disable ints and gracefully shut down Rx/Tx DMA */
 -	gfar_halt(priv);
 +/* Filer rules implementing wol capabilities */
 +static void gfar_filer_config_wol(struct gfar_private *priv)
 +{
 +	unsigned int i;
 +	u32 rqfcr;
  
 -	phy_stop(dev->phydev);
 +	__gfar_filer_disable(priv);
  
 -	free_skb_resources(priv);
 +	/* clear the filer table, reject any packet by default */
 +	rqfcr = RQFCR_RJE | RQFCR_CMP_MATCH;
 +	for (i = 0; i <= MAX_FILER_IDX; i++)
 +		gfar_write_filer(priv, i, rqfcr, 0);
 +
 +	i = 0;
 +	if (priv->wol_opts & GFAR_WOL_FILER_UCAST) {
 +		/* unicast packet, accept it */
 +		struct net_device *ndev = priv->ndev;
 +		/* get the default rx queue index */
 +		u8 qindex = (u8)priv->gfargrp[0].rx_queue->qindex;
 +		u32 dest_mac_addr = (ndev->dev_addr[0] << 16) |
 +				    (ndev->dev_addr[1] << 8) |
 +				     ndev->dev_addr[2];
 +
 +		rqfcr = (qindex << 10) | RQFCR_AND |
 +			RQFCR_CMP_EXACT | RQFCR_PID_DAH;
 +
 +		gfar_write_filer(priv, i++, rqfcr, dest_mac_addr);
 +
 +		dest_mac_addr = (ndev->dev_addr[3] << 16) |
 +				(ndev->dev_addr[4] << 8) |
 +				 ndev->dev_addr[5];
 +		rqfcr = (qindex << 10) | RQFCR_GPI |
 +			RQFCR_CMP_EXACT | RQFCR_PID_DAL;
 +		gfar_write_filer(priv, i++, rqfcr, dest_mac_addr);
 +	}
 +
 +	__gfar_filer_enable(priv);
 +}
 +
 +static void gfar_filer_restore_table(struct gfar_private *priv)
 +{
 +	u32 rqfcr, rqfpr;
 +	unsigned int i;
 +
 +	__gfar_filer_disable(priv);
 +
 +	for (i = 0; i <= MAX_FILER_IDX; i++) {
 +		rqfcr = priv->ftp_rqfcr[i];
 +		rqfpr = priv->ftp_rqfpr[i];
 +		gfar_write_filer(priv, i, rqfcr, rqfpr);
 +	}
 +
 +	__gfar_filer_enable(priv);
  }
  
 -static void gfar_start(struct gfar_private *priv)
 +/* gfar_start() for Rx only and with the FGPI filer interrupt enabled */
 +static void gfar_start_wol_filer(struct gfar_private *priv)
  {
  	struct gfar __iomem *regs = priv->gfargrp[0].regs;
  	u32 tempval;
diff --cc drivers/net/ethernet/jme.c
index 2bed364625fe,1732ec3c3dbd..000000000000
--- a/drivers/net/ethernet/jme.c
+++ b/drivers/net/ethernet/jme.c
@@@ -3055,7 -3009,7 +3055,11 @@@ jme_init_one(struct pci_dev *pdev
  		jwrite32(jme, JME_APMC, apmc);
  	}
  
++<<<<<<< HEAD
 +	NETIF_NAPI_SET(netdev, &jme->napi, jme_poll, NAPI_POLL_WEIGHT)
++=======
+ 	netif_napi_add(netdev, &jme->napi, jme_poll);
++>>>>>>> b48b89f9c189 (net: drop the weight argument from netif_napi_add)
  
  	spin_lock_init(&jme->phy_lock);
  	spin_lock_init(&jme->macaddr_lock);
diff --cc drivers/net/ethernet/marvell/skge.c
index 4c12140b09f8,1b43704baceb..000000000000
--- a/drivers/net/ethernet/marvell/skge.c
+++ b/drivers/net/ethernet/marvell/skge.c
@@@ -3879,7 -3832,7 +3879,11 @@@ static struct net_device *skge_devinit(
  		dev->features |= NETIF_F_HIGHDMA;
  
  	skge = netdev_priv(dev);
++<<<<<<< HEAD
 +	netif_napi_add(dev, &skge->napi, skge_poll, NAPI_WEIGHT);
++=======
+ 	netif_napi_add(dev, &skge->napi, skge_poll);
++>>>>>>> b48b89f9c189 (net: drop the weight argument from netif_napi_add)
  	skge->netdev = dev;
  	skge->hw = hw;
  	skge->msg_enable = netif_msg_init(debug, default_msg);
diff --cc drivers/net/ethernet/marvell/sky2.c
index ac7f1dd7766a,ab33ba1c3023..000000000000
--- a/drivers/net/ethernet/marvell/sky2.c
+++ b/drivers/net/ethernet/marvell/sky2.c
@@@ -5051,9 -4935,9 +5051,13 @@@ static int sky2_probe(struct pci_dev *p
  			if (err != -EOPNOTSUPP)
  				goto err_out_free_netdev;
  		}
 -	}
 + 	}
  
++<<<<<<< HEAD
 +	netif_napi_add(dev, &hw->napi, sky2_poll, NAPI_WEIGHT);
++=======
+ 	netif_napi_add(dev, &hw->napi, sky2_poll);
++>>>>>>> b48b89f9c189 (net: drop the weight argument from netif_napi_add)
  
  	err = register_netdev(dev);
  	if (err) {
diff --cc drivers/net/ethernet/mediatek/mtk_eth_soc.c
index 3e2b333879e7,4fba7cb0144b..000000000000
--- a/drivers/net/ethernet/mediatek/mtk_eth_soc.c
+++ b/drivers/net/ethernet/mediatek/mtk_eth_soc.c
@@@ -2619,10 -4166,8 +2619,15 @@@ static int mtk_probe(struct platform_de
  	 * for NAPI to work
  	 */
  	init_dummy_netdev(&eth->dummy_dev);
++<<<<<<< HEAD
 +	netif_napi_add(&eth->dummy_dev, &eth->tx_napi, mtk_napi_tx,
 +		       MTK_NAPI_WEIGHT);
 +	netif_napi_add(&eth->dummy_dev, &eth->rx_napi, mtk_napi_rx,
 +		       MTK_NAPI_WEIGHT);
++=======
+ 	netif_napi_add(&eth->dummy_dev, &eth->tx_napi, mtk_napi_tx);
+ 	netif_napi_add(&eth->dummy_dev, &eth->rx_napi, mtk_napi_rx);
++>>>>>>> b48b89f9c189 (net: drop the weight argument from netif_napi_add)
  
  	platform_set_drvdata(pdev, eth);
  
diff --cc drivers/net/ethernet/microchip/lan743x_main.c
index ccc1e25df20b,50eeecba1f18..000000000000
--- a/drivers/net/ethernet/microchip/lan743x_main.c
+++ b/drivers/net/ethernet/microchip/lan743x_main.c
@@@ -2266,9 -2875,7 +2266,13 @@@ static int lan743x_rx_open(struct lan74
  	if (ret)
  		goto return_error;
  
++<<<<<<< HEAD
 +	netif_napi_add(adapter->netdev,
 +		       &rx->napi, lan743x_rx_napi_poll,
 +		       rx->ring_size - 1);
++=======
+ 	netif_napi_add(adapter->netdev, &rx->napi, lan743x_rx_napi_poll);
++>>>>>>> b48b89f9c189 (net: drop the weight argument from netif_napi_add)
  
  	lan743x_csr_write(adapter, DMAC_CMD,
  			  DMAC_CMD_RX_SWR_(rx->channel_number));
diff --cc drivers/net/ethernet/netronome/nfp/nfp_net_common.c
index 60f3968354dc,27f4786ace4f..000000000000
--- a/drivers/net/ethernet/netronome/nfp/nfp_net_common.c
+++ b/drivers/net/ethernet/netronome/nfp/nfp_net_common.c
@@@ -2342,267 -762,27 +2342,275 @@@ static void nfp_net_vecs_init(struct nf
  			tasklet_disable(&r_vec->tasklet);
  		}
  
 -		cpumask_set_cpu(r, &r_vec->affinity_mask);
 +		cpumask_set_cpu(r, &r_vec->affinity_mask);
 +	}
 +}
 +
 +/**
 + * nfp_net_tx_ring_free() - Free resources allocated to a TX ring
 + * @tx_ring:   TX ring to free
 + */
 +static void nfp_net_tx_ring_free(struct nfp_net_tx_ring *tx_ring)
 +{
++<<<<<<< HEAD
 +	struct nfp_net_r_vector *r_vec = tx_ring->r_vec;
 +	struct nfp_net_dp *dp = &r_vec->nfp_net->dp;
 +
 +	kvfree(tx_ring->txbufs);
 +
 +	if (tx_ring->txds)
 +		dma_free_coherent(dp->dev, tx_ring->size,
 +				  tx_ring->txds, tx_ring->dma);
 +
 +	tx_ring->cnt = 0;
 +	tx_ring->txbufs = NULL;
 +	tx_ring->txds = NULL;
 +	tx_ring->dma = 0;
 +	tx_ring->size = 0;
 +}
 +
 +/**
 + * nfp_net_tx_ring_alloc() - Allocate resource for a TX ring
 + * @dp:        NFP Net data path struct
 + * @tx_ring:   TX Ring structure to allocate
 + *
 + * Return: 0 on success, negative errno otherwise.
 + */
 +static int
 +nfp_net_tx_ring_alloc(struct nfp_net_dp *dp, struct nfp_net_tx_ring *tx_ring)
 +{
 +	struct nfp_net_r_vector *r_vec = tx_ring->r_vec;
 +
 +	tx_ring->cnt = dp->txd_cnt;
 +
 +	tx_ring->size = array_size(tx_ring->cnt, sizeof(*tx_ring->txds));
 +	tx_ring->txds = dma_alloc_coherent(dp->dev, tx_ring->size,
 +					   &tx_ring->dma,
 +					   GFP_KERNEL | __GFP_NOWARN);
 +	if (!tx_ring->txds) {
 +		netdev_warn(dp->netdev, "failed to allocate TX descriptor ring memory, requested descriptor count: %d, consider lowering descriptor count\n",
 +			    tx_ring->cnt);
 +		goto err_alloc;
 +	}
 +
 +	tx_ring->txbufs = kvcalloc(tx_ring->cnt, sizeof(*tx_ring->txbufs),
 +				   GFP_KERNEL);
 +	if (!tx_ring->txbufs)
 +		goto err_alloc;
 +
 +	if (!tx_ring->is_xdp && dp->netdev)
 +		netif_set_xps_queue(dp->netdev, &r_vec->affinity_mask,
 +				    tx_ring->idx);
 +
 +	return 0;
 +
 +err_alloc:
 +	nfp_net_tx_ring_free(tx_ring);
 +	return -ENOMEM;
++=======
++	if (dp->netdev)
++		netif_napi_add(dp->netdev, &r_vec->napi,
++			       nfp_net_has_xsk_pool_slow(dp, idx) ? dp->ops->xsk_poll : dp->ops->poll);
++	else
++		tasklet_enable(&r_vec->tasklet);
++>>>>>>> b48b89f9c189 (net: drop the weight argument from netif_napi_add)
 +}
 +
 +static void
 +nfp_net_tx_ring_bufs_free(struct nfp_net_dp *dp,
 +			  struct nfp_net_tx_ring *tx_ring)
 +{
 +	unsigned int i;
 +
 +	if (!tx_ring->is_xdp)
 +		return;
 +
 +	for (i = 0; i < tx_ring->cnt; i++) {
 +		if (!tx_ring->txbufs[i].frag)
 +			return;
 +
 +		nfp_net_dma_unmap_rx(dp, tx_ring->txbufs[i].dma_addr);
 +		__free_page(virt_to_page(tx_ring->txbufs[i].frag));
 +	}
 +}
 +
 +static int
 +nfp_net_tx_ring_bufs_alloc(struct nfp_net_dp *dp,
 +			   struct nfp_net_tx_ring *tx_ring)
 +{
 +	struct nfp_net_tx_buf *txbufs = tx_ring->txbufs;
 +	unsigned int i;
 +
 +	if (!tx_ring->is_xdp)
 +		return 0;
 +
 +	for (i = 0; i < tx_ring->cnt; i++) {
 +		txbufs[i].frag = nfp_net_rx_alloc_one(dp, &txbufs[i].dma_addr);
 +		if (!txbufs[i].frag) {
 +			nfp_net_tx_ring_bufs_free(dp, tx_ring);
 +			return -ENOMEM;
 +		}
 +	}
 +
 +	return 0;
 +}
 +
 +static int nfp_net_tx_rings_prepare(struct nfp_net *nn, struct nfp_net_dp *dp)
 +{
 +	unsigned int r;
 +
 +	dp->tx_rings = kcalloc(dp->num_tx_rings, sizeof(*dp->tx_rings),
 +			       GFP_KERNEL);
 +	if (!dp->tx_rings)
 +		return -ENOMEM;
 +
 +	for (r = 0; r < dp->num_tx_rings; r++) {
 +		int bias = 0;
 +
 +		if (r >= dp->num_stack_tx_rings)
 +			bias = dp->num_stack_tx_rings;
 +
 +		nfp_net_tx_ring_init(&dp->tx_rings[r], &nn->r_vecs[r - bias],
 +				     r, bias);
 +
 +		if (nfp_net_tx_ring_alloc(dp, &dp->tx_rings[r]))
 +			goto err_free_prev;
 +
 +		if (nfp_net_tx_ring_bufs_alloc(dp, &dp->tx_rings[r]))
 +			goto err_free_ring;
 +	}
 +
 +	return 0;
 +
 +err_free_prev:
 +	while (r--) {
 +		nfp_net_tx_ring_bufs_free(dp, &dp->tx_rings[r]);
 +err_free_ring:
 +		nfp_net_tx_ring_free(&dp->tx_rings[r]);
 +	}
 +	kfree(dp->tx_rings);
 +	return -ENOMEM;
 +}
 +
 +static void nfp_net_tx_rings_free(struct nfp_net_dp *dp)
 +{
 +	unsigned int r;
 +
 +	for (r = 0; r < dp->num_tx_rings; r++) {
 +		nfp_net_tx_ring_bufs_free(dp, &dp->tx_rings[r]);
 +		nfp_net_tx_ring_free(&dp->tx_rings[r]);
 +	}
 +
 +	kfree(dp->tx_rings);
 +}
 +
 +/**
 + * nfp_net_rx_ring_free() - Free resources allocated to a RX ring
 + * @rx_ring:  RX ring to free
 + */
 +static void nfp_net_rx_ring_free(struct nfp_net_rx_ring *rx_ring)
 +{
 +	struct nfp_net_r_vector *r_vec = rx_ring->r_vec;
 +	struct nfp_net_dp *dp = &r_vec->nfp_net->dp;
 +
 +	if (dp->netdev)
 +		xdp_rxq_info_unreg(&rx_ring->xdp_rxq);
 +	kvfree(rx_ring->rxbufs);
 +
 +	if (rx_ring->rxds)
 +		dma_free_coherent(dp->dev, rx_ring->size,
 +				  rx_ring->rxds, rx_ring->dma);
 +
 +	rx_ring->cnt = 0;
 +	rx_ring->rxbufs = NULL;
 +	rx_ring->rxds = NULL;
 +	rx_ring->dma = 0;
 +	rx_ring->size = 0;
 +}
 +
 +/**
 + * nfp_net_rx_ring_alloc() - Allocate resource for a RX ring
 + * @dp:	      NFP Net data path struct
 + * @rx_ring:  RX ring to allocate
 + *
 + * Return: 0 on success, negative errno otherwise.
 + */
 +static int
 +nfp_net_rx_ring_alloc(struct nfp_net_dp *dp, struct nfp_net_rx_ring *rx_ring)
 +{
 +	int err;
 +
 +	if (dp->netdev) {
 +		err = xdp_rxq_info_reg(&rx_ring->xdp_rxq, dp->netdev,
 +				       rx_ring->idx, rx_ring->r_vec->napi.napi_id);
 +		if (err < 0)
 +			return err;
 +	}
 +
 +	rx_ring->cnt = dp->rxd_cnt;
 +	rx_ring->size = array_size(rx_ring->cnt, sizeof(*rx_ring->rxds));
 +	rx_ring->rxds = dma_alloc_coherent(dp->dev, rx_ring->size,
 +					   &rx_ring->dma,
 +					   GFP_KERNEL | __GFP_NOWARN);
 +	if (!rx_ring->rxds) {
 +		netdev_warn(dp->netdev, "failed to allocate RX descriptor ring memory, requested descriptor count: %d, consider lowering descriptor count\n",
 +			    rx_ring->cnt);
 +		goto err_alloc;
 +	}
 +
 +	rx_ring->rxbufs = kvcalloc(rx_ring->cnt, sizeof(*rx_ring->rxbufs),
 +				   GFP_KERNEL);
 +	if (!rx_ring->rxbufs)
 +		goto err_alloc;
 +
 +	return 0;
 +
 +err_alloc:
 +	nfp_net_rx_ring_free(rx_ring);
 +	return -ENOMEM;
 +}
 +
 +static int nfp_net_rx_rings_prepare(struct nfp_net *nn, struct nfp_net_dp *dp)
 +{
 +	unsigned int r;
 +
 +	dp->rx_rings = kcalloc(dp->num_rx_rings, sizeof(*dp->rx_rings),
 +			       GFP_KERNEL);
 +	if (!dp->rx_rings)
 +		return -ENOMEM;
 +
 +	for (r = 0; r < dp->num_rx_rings; r++) {
 +		nfp_net_rx_ring_init(&dp->rx_rings[r], &nn->r_vecs[r], r);
 +
 +		if (nfp_net_rx_ring_alloc(dp, &dp->rx_rings[r]))
 +			goto err_free_prev;
 +
 +		if (nfp_net_rx_ring_bufs_alloc(dp, &dp->rx_rings[r]))
 +			goto err_free_ring;
 +	}
 +
 +	return 0;
 +
 +err_free_prev:
 +	while (r--) {
 +		nfp_net_rx_ring_bufs_free(dp, &dp->rx_rings[r]);
 +err_free_ring:
 +		nfp_net_rx_ring_free(&dp->rx_rings[r]);
  	}
 +	kfree(dp->rx_rings);
 +	return -ENOMEM;
  }
  
 -static void
 -nfp_net_napi_add(struct nfp_net_dp *dp, struct nfp_net_r_vector *r_vec, int idx)
 +static void nfp_net_rx_rings_free(struct nfp_net_dp *dp)
  {
 -	if (dp->netdev)
 -		netif_napi_add(dp->netdev, &r_vec->napi,
 -			       nfp_net_has_xsk_pool_slow(dp, idx) ? dp->ops->xsk_poll : dp->ops->poll);
 -	else
 -		tasklet_enable(&r_vec->tasklet);
 -}
 +	unsigned int r;
  
 -static void
 -nfp_net_napi_del(struct nfp_net_dp *dp, struct nfp_net_r_vector *r_vec)
 -{
 -	if (dp->netdev)
 -		netif_napi_del(&r_vec->napi);
 -	else
 -		tasklet_disable(&r_vec->tasklet);
 +	for (r = 0; r < dp->num_rx_rings; r++) {
 +		nfp_net_rx_ring_bufs_free(dp, &dp->rx_rings[r]);
 +		nfp_net_rx_ring_free(&dp->rx_rings[r]);
 +	}
 +
 +	kfree(dp->rx_rings);
  }
  
  static void
diff --cc drivers/net/ethernet/ni/nixge.c
index 33b099a7c4f8,3db4a2431741..000000000000
--- a/drivers/net/ethernet/ni/nixge.c
+++ b/drivers/net/ethernet/ni/nixge.c
@@@ -1218,15 -1294,10 +1218,22 @@@ static int nixge_probe(struct platform_
  	priv->ndev = ndev;
  	priv->dev = &pdev->dev;
  
++<<<<<<< HEAD
 +	netif_napi_add(ndev, &priv->napi, nixge_poll, NAPI_POLL_WEIGHT);
 +
 +	dmares = platform_get_resource(pdev, IORESOURCE_MEM, 0);
 +	priv->dma_regs = devm_ioremap_resource(&pdev->dev, dmares);
 +	if (IS_ERR(priv->dma_regs)) {
 +		netdev_err(ndev, "failed to map dma regs\n");
 +		return PTR_ERR(priv->dma_regs);
 +	}
 +	priv->ctrl_regs = priv->dma_regs + NIXGE_REG_CTRL_OFFSET;
++=======
+ 	netif_napi_add(ndev, &priv->napi, nixge_poll);
+ 	err = nixge_of_get_resources(pdev);
+ 	if (err)
+ 		goto free_netdev;
++>>>>>>> b48b89f9c189 (net: drop the weight argument from netif_napi_add)
  	__nixge_hw_set_mac_address(ndev);
  
  	priv->tx_irq = platform_get_irq_byname(pdev, "tx");
diff --cc drivers/net/ethernet/oki-semi/pch_gbe/pch_gbe_main.c
index 357812c5cf4b,3f2c30184752..000000000000
--- a/drivers/net/ethernet/oki-semi/pch_gbe/pch_gbe_main.c
+++ b/drivers/net/ethernet/oki-semi/pch_gbe/pch_gbe_main.c
@@@ -2595,8 -2516,7 +2595,12 @@@ static int pch_gbe_probe(struct pci_de
  
  	netdev->netdev_ops = &pch_gbe_netdev_ops;
  	netdev->watchdog_timeo = PCH_GBE_WATCHDOG_PERIOD;
++<<<<<<< HEAD
 +	netif_napi_add(netdev, &adapter->napi,
 +		       pch_gbe_napi_poll, PCH_GBE_RX_WEIGHT);
++=======
+ 	netif_napi_add(netdev, &adapter->napi, pch_gbe_napi_poll);
++>>>>>>> b48b89f9c189 (net: drop the weight argument from netif_napi_add)
  	netdev->hw_features = NETIF_F_RXCSUM |
  		NETIF_F_IP_CSUM | NETIF_F_IPV6_CSUM;
  	netdev->features = netdev->hw_features;
diff --cc drivers/net/ethernet/qlogic/qlge/qlge_main.c
index 17eb73980c98,1ead7793062a..000000000000
--- a/drivers/net/ethernet/qlogic/qlge/qlge_main.c
+++ b/drivers/net/ethernet/qlogic/qlge/qlge_main.c
@@@ -3243,17 -3041,16 +3243,22 @@@ static int ql_start_rx_ring(struct ql_a
  		/* Inbound completion handling rx_rings run in
  		 * separate NAPI contexts.
  		 */
++<<<<<<< HEAD:drivers/net/ethernet/qlogic/qlge/qlge_main.c
 +		netif_napi_add(qdev->ndev, &rx_ring->napi, ql_napi_poll_msix,
 +			       64);
++=======
+ 		netif_napi_add(qdev->ndev, &rx_ring->napi,
+ 			       qlge_napi_poll_msix);
++>>>>>>> b48b89f9c189 (net: drop the weight argument from netif_napi_add):drivers/staging/qlge/qlge_main.c
  		cqicb->irq_delay = cpu_to_le16(qdev->rx_coalesce_usecs);
  		cqicb->pkt_delay = cpu_to_le16(qdev->rx_max_coalesced_frames);
 -	} else {
 -		cqicb->irq_delay = cpu_to_le16(qdev->tx_coalesce_usecs);
 -		cqicb->pkt_delay = cpu_to_le16(qdev->tx_max_coalesced_frames);
 +		break;
 +	default:
 +		netif_printk(qdev, ifup, KERN_DEBUG, qdev->ndev,
 +			     "Invalid rx_ring->type = %d.\n", rx_ring->type);
  	}
 -	err = qlge_write_cfg(qdev, cqicb, sizeof(struct cqicb),
 -			     CFG_LCQ, rx_ring->cq_id);
 +	err = ql_write_cfg(qdev, cqicb, sizeof(struct cqicb),
 +			   CFG_LCQ, rx_ring->cq_id);
  	if (err) {
  		netif_err(qdev, ifup, qdev->ndev, "Failed to load CQICB.\n");
  		return err;
diff --cc drivers/net/ethernet/renesas/ravb_main.c
index 119567cadc0e,36324126db6d..000000000000
--- a/drivers/net/ethernet/renesas/ravb_main.c
+++ b/drivers/net/ethernet/renesas/ravb_main.c
@@@ -2132,8 -2841,9 +2132,14 @@@ static int ravb_probe(struct platform_d
  		goto out_dma_free;
  	}
  
++<<<<<<< HEAD
 +	netif_napi_add(ndev, &priv->napi[RAVB_BE], ravb_poll, 64);
 +	netif_napi_add(ndev, &priv->napi[RAVB_NC], ravb_poll, 64);
++=======
+ 	netif_napi_add(ndev, &priv->napi[RAVB_BE], ravb_poll);
+ 	if (info->nc_queues)
+ 		netif_napi_add(ndev, &priv->napi[RAVB_NC], ravb_poll);
++>>>>>>> b48b89f9c189 (net: drop the weight argument from netif_napi_add)
  
  	/* Network device register */
  	error = register_netdev(ndev);
diff --cc drivers/net/ethernet/rocker/rocker_main.c
index fbd127ea6ae3,023682cd2768..000000000000
--- a/drivers/net/ethernet/rocker/rocker_main.c
+++ b/drivers/net/ethernet/rocker/rocker_main.c
@@@ -2569,10 -2573,8 +2569,15 @@@ static int rocker_probe_port(struct roc
  	rocker_port_dev_addr_init(rocker_port);
  	dev->netdev_ops = &rocker_port_netdev_ops;
  	dev->ethtool_ops = &rocker_port_ethtool_ops;
++<<<<<<< HEAD
 +	netif_tx_napi_add(dev, &rocker_port->napi_tx, rocker_port_poll_tx,
 +			  NAPI_POLL_WEIGHT);
 +	netif_napi_add(dev, &rocker_port->napi_rx, rocker_port_poll_rx,
 +		       NAPI_POLL_WEIGHT);
++=======
+ 	netif_napi_add_tx(dev, &rocker_port->napi_tx, rocker_port_poll_tx);
+ 	netif_napi_add(dev, &rocker_port->napi_rx, rocker_port_poll_rx);
++>>>>>>> b48b89f9c189 (net: drop the weight argument from netif_napi_add)
  	rocker_carrier_init(rocker_port);
  
  	dev->features |= NETIF_F_NETNS_LOCAL | NETIF_F_SG;
diff --cc drivers/net/ethernet/sfc/falcon/efx.c
index 24822d21fe03,e151b0957751..000000000000
--- a/drivers/net/ethernet/sfc/falcon/efx.c
+++ b/drivers/net/ethernet/sfc/falcon/efx.c
@@@ -2021,8 -2012,7 +2021,12 @@@ static void ef4_init_napi_channel(struc
  	struct ef4_nic *efx = channel->efx;
  
  	channel->napi_dev = efx->net_dev;
++<<<<<<< HEAD
 +	netif_napi_add(channel->napi_dev, &channel->napi_str,
 +		       ef4_poll, napi_weight);
++=======
+ 	netif_napi_add(channel->napi_dev, &channel->napi_str, ef4_poll);
++>>>>>>> b48b89f9c189 (net: drop the weight argument from netif_napi_add)
  }
  
  static void ef4_init_napi(struct ef4_nic *efx)
diff --cc drivers/net/ethernet/socionext/netsec.c
index 63c23f878c12,2240f6d0b89b..000000000000
--- a/drivers/net/ethernet/socionext/netsec.c
+++ b/drivers/net/ethernet/socionext/netsec.c
@@@ -1670,7 -2093,7 +1670,11 @@@ static int netsec_probe(struct platform
  	dev_info(&pdev->dev, "hardware revision %d.%d\n",
  		 hw_ver >> 16, hw_ver & 0xffff);
  
++<<<<<<< HEAD
 +	netif_napi_add(ndev, &priv->napi, netsec_napi_poll, NAPI_BUDGET);
++=======
+ 	netif_napi_add(ndev, &priv->napi, netsec_napi_poll);
++>>>>>>> b48b89f9c189 (net: drop the weight argument from netif_napi_add)
  
  	ndev->netdev_ops = &netsec_netdev_ops;
  	ndev->ethtool_ops = &netsec_ethtool_ops;
diff --cc drivers/net/ethernet/socionext/sni_ave.c
index 4d0244d7b05b,1fa09b49ba7f..000000000000
--- a/drivers/net/ethernet/socionext/sni_ave.c
+++ b/drivers/net/ethernet/socionext/sni_ave.c
@@@ -1685,9 -1687,8 +1685,14 @@@ static int ave_probe(struct platform_de
  		 pdev->name, pdev->id);
  
  	/* Register as a NAPI supported driver */
++<<<<<<< HEAD
 +	netif_napi_add(ndev, &priv->napi_rx, ave_napi_poll_rx, priv->rx.ndesc);
 +	netif_tx_napi_add(ndev, &priv->napi_tx, ave_napi_poll_tx,
 +			  priv->tx.ndesc);
++=======
+ 	netif_napi_add(ndev, &priv->napi_rx, ave_napi_poll_rx);
+ 	netif_napi_add_tx(ndev, &priv->napi_tx, ave_napi_poll_tx);
++>>>>>>> b48b89f9c189 (net: drop the weight argument from netif_napi_add)
  
  	platform_set_drvdata(pdev, ndev);
  
diff --cc drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
index 196dcbbca40c,5ec3d4537bae..000000000000
--- a/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
@@@ -5403,13 -6874,16 +5403,22 @@@ static void stmmac_napi_add(struct net_
  		spin_lock_init(&ch->lock);
  
  		if (queue < priv->plat->rx_queues_to_use) {
- 			netif_napi_add(dev, &ch->rx_napi, stmmac_napi_poll_rx,
- 				       NAPI_POLL_WEIGHT);
+ 			netif_napi_add(dev, &ch->rx_napi, stmmac_napi_poll_rx);
  		}
  		if (queue < priv->plat->tx_queues_to_use) {
++<<<<<<< HEAD
 +			netif_tx_napi_add(dev, &ch->tx_napi,
 +					  stmmac_napi_poll_tx,
 +					  NAPI_POLL_WEIGHT);
++=======
+ 			netif_napi_add_tx(dev, &ch->tx_napi,
+ 					  stmmac_napi_poll_tx);
+ 		}
+ 		if (queue < priv->plat->rx_queues_to_use &&
+ 		    queue < priv->plat->tx_queues_to_use) {
+ 			netif_napi_add(dev, &ch->rxtx_napi,
+ 				       stmmac_napi_poll_rxtx);
++>>>>>>> b48b89f9c189 (net: drop the weight argument from netif_napi_add)
  		}
  	}
  }
diff --cc drivers/net/ethernet/ti/cpsw.c
index d42bdcd3bf1c,709ca6dd6ecb..000000000000
--- a/drivers/net/ethernet/ti/cpsw.c
+++ b/drivers/net/ethernet/ti/cpsw.c
@@@ -3194,20 -1637,18 +3194,26 @@@ static int cpsw_probe(struct platform_d
  	ndev->netdev_ops = &cpsw_netdev_ops;
  	ndev->ethtool_ops = &cpsw_ethtool_ops;
  	netif_napi_add(ndev, &cpsw->napi_rx,
++<<<<<<< HEAD
 +		       cpsw->quirk_irq ? cpsw_rx_poll : cpsw_rx_mq_poll,
 +		       CPSW_POLL_WEIGHT);
 +	netif_tx_napi_add(ndev, &cpsw->napi_tx,
 +			  cpsw->quirk_irq ? cpsw_tx_poll : cpsw_tx_mq_poll,
 +			  CPSW_POLL_WEIGHT);
 +	cpsw_split_res(ndev);
++=======
+ 		       cpsw->quirk_irq ? cpsw_rx_poll : cpsw_rx_mq_poll);
+ 	netif_napi_add_tx(ndev, &cpsw->napi_tx,
+ 			  cpsw->quirk_irq ? cpsw_tx_poll : cpsw_tx_mq_poll);
++>>>>>>> b48b89f9c189 (net: drop the weight argument from netif_napi_add)
  
  	/* register the network device */
 -	SET_NETDEV_DEV(ndev, dev);
 -	ndev->dev.of_node = cpsw->slaves[0].data->slave_node;
 +	SET_NETDEV_DEV(ndev, &pdev->dev);
  	ret = register_netdev(ndev);
  	if (ret) {
 -		dev_err(dev, "error registering net device\n");
 +		dev_err(priv->dev, "error registering net device\n");
  		ret = -ENODEV;
 -		goto clean_cpts;
 +		goto clean_dma_ret;
  	}
  
  	if (cpsw->data.dual_emac) {
diff --cc drivers/net/ethernet/ti/davinci_emac.c
index 1bb4c0f9c255,2eb9d5a32588..000000000000
--- a/drivers/net/ethernet/ti/davinci_emac.c
+++ b/drivers/net/ethernet/ti/davinci_emac.c
@@@ -1925,12 -1948,11 +1925,16 @@@ static int davinci_emac_probe(struct pl
  
  	ndev->netdev_ops = &emac_netdev_ops;
  	ndev->ethtool_ops = &ethtool_ops;
++<<<<<<< HEAD
 +	netif_napi_add(ndev, &priv->napi, emac_poll, EMAC_POLL_WEIGHT);
++=======
+ 	netif_napi_add(ndev, &priv->napi, emac_poll);
++>>>>>>> b48b89f9c189 (net: drop the weight argument from netif_napi_add)
  
  	pm_runtime_enable(&pdev->dev);
 -	rc = pm_runtime_resume_and_get(&pdev->dev);
 +	rc = pm_runtime_get_sync(&pdev->dev);
  	if (rc < 0) {
 +		pm_runtime_put_noidle(&pdev->dev);
  		dev_err(&pdev->dev, "%s: failed to get_sync(%d)\n",
  			__func__, rc);
  		goto err_napi_del;
diff --cc drivers/net/ethernet/ti/netcp_core.c
index e784f05c40fc,aba70bef4894..000000000000
--- a/drivers/net/ethernet/ti/netcp_core.c
+++ b/drivers/net/ethernet/ti/netcp_core.c
@@@ -2110,8 -2095,8 +2110,13 @@@ static int netcp_create_interface(struc
  	}
  
  	/* NAPI register */
++<<<<<<< HEAD
 +	netif_napi_add(ndev, &netcp->rx_napi, netcp_rx_poll, NETCP_NAPI_WEIGHT);
 +	netif_tx_napi_add(ndev, &netcp->tx_napi, netcp_tx_poll, NETCP_NAPI_WEIGHT);
++=======
+ 	netif_napi_add(ndev, &netcp->rx_napi, netcp_rx_poll);
+ 	netif_napi_add_tx(ndev, &netcp->tx_napi, netcp_tx_poll);
++>>>>>>> b48b89f9c189 (net: drop the weight argument from netif_napi_add)
  
  	/* Register the network device */
  	ndev->dev_id		= 0;
diff --cc drivers/net/ethernet/toshiba/spider_net.c
index 36649bea232e,50d7eacfec58..000000000000
--- a/drivers/net/ethernet/toshiba/spider_net.c
+++ b/drivers/net/ethernet/toshiba/spider_net.c
@@@ -2263,8 -2270,7 +2263,12 @@@ spider_net_setup_netdev(struct spider_n
  	card->aneg_count = 0;
  	timer_setup(&card->aneg_timer, spider_net_link_phy, 0);
  
++<<<<<<< HEAD
 +	netif_napi_add(netdev, &card->napi,
 +		       spider_net_poll, SPIDER_NET_NAPI_WEIGHT);
++=======
+ 	netif_napi_add(netdev, &card->napi, spider_net_poll);
++>>>>>>> b48b89f9c189 (net: drop the weight argument from netif_napi_add)
  
  	spider_net_setup_netdev_ops(netdev);
  
diff --cc drivers/net/ethernet/via/via-velocity.c
index ce3805c0ea37,a502812ac418..000000000000
--- a/drivers/net/ethernet/via/via-velocity.c
+++ b/drivers/net/ethernet/via/via-velocity.c
@@@ -2848,8 -2846,7 +2848,12 @@@ static int velocity_probe(struct devic
  
  	netdev->netdev_ops = &velocity_netdev_ops;
  	netdev->ethtool_ops = &velocity_ethtool_ops;
++<<<<<<< HEAD
 +	netif_napi_add(netdev, &vptr->napi, velocity_poll,
 +							VELOCITY_NAPI_WEIGHT);
++=======
+ 	netif_napi_add(netdev, &vptr->napi, velocity_poll);
++>>>>>>> b48b89f9c189 (net: drop the weight argument from netif_napi_add)
  
  	netdev->hw_features = NETIF_F_IP_CSUM | NETIF_F_SG |
  			   NETIF_F_HW_VLAN_CTAG_TX;
diff --cc drivers/net/ethernet/xilinx/xilinx_axienet_main.c
index 01416fbdb4f0,d1d772580da9..000000000000
--- a/drivers/net/ethernet/xilinx/xilinx_axienet_main.c
+++ b/drivers/net/ethernet/xilinx/xilinx_axienet_main.c
@@@ -1484,14 -1873,51 +1484,55 @@@ static int axienet_probe(struct platfor
  	lp->ndev = ndev;
  	lp->dev = &pdev->dev;
  	lp->options = XAE_OPTION_DEFAULTS;
++<<<<<<< HEAD
++=======
+ 	lp->rx_bd_num = RX_BD_NUM_DEFAULT;
+ 	lp->tx_bd_num = TX_BD_NUM_DEFAULT;
+ 
+ 	u64_stats_init(&lp->rx_stat_sync);
+ 	u64_stats_init(&lp->tx_stat_sync);
+ 
+ 	netif_napi_add(ndev, &lp->napi_rx, axienet_rx_poll);
+ 	netif_napi_add(ndev, &lp->napi_tx, axienet_tx_poll);
+ 
+ 	lp->axi_clk = devm_clk_get_optional(&pdev->dev, "s_axi_lite_clk");
+ 	if (!lp->axi_clk) {
+ 		/* For backward compatibility, if named AXI clock is not present,
+ 		 * treat the first clock specified as the AXI clock.
+ 		 */
+ 		lp->axi_clk = devm_clk_get_optional(&pdev->dev, NULL);
+ 	}
+ 	if (IS_ERR(lp->axi_clk)) {
+ 		ret = PTR_ERR(lp->axi_clk);
+ 		goto free_netdev;
+ 	}
+ 	ret = clk_prepare_enable(lp->axi_clk);
+ 	if (ret) {
+ 		dev_err(&pdev->dev, "Unable to enable AXI clock: %d\n", ret);
+ 		goto free_netdev;
+ 	}
+ 
+ 	lp->misc_clks[0].id = "axis_clk";
+ 	lp->misc_clks[1].id = "ref_clk";
+ 	lp->misc_clks[2].id = "mgt_clk";
+ 
+ 	ret = devm_clk_bulk_get_optional(&pdev->dev, XAE_NUM_MISC_CLOCKS, lp->misc_clks);
+ 	if (ret)
+ 		goto cleanup_clk;
+ 
+ 	ret = clk_bulk_prepare_enable(XAE_NUM_MISC_CLOCKS, lp->misc_clks);
+ 	if (ret)
+ 		goto cleanup_clk;
+ 
++>>>>>>> b48b89f9c189 (net: drop the weight argument from netif_napi_add)
  	/* Map device registers */
 -	lp->regs = devm_platform_get_and_ioremap_resource(pdev, 0, &ethres);
 +	ethres = platform_get_resource(pdev, IORESOURCE_MEM, 0);
 +	lp->regs = devm_ioremap_resource(&pdev->dev, ethres);
  	if (IS_ERR(lp->regs)) {
 +		dev_err(&pdev->dev, "could not map Axi Ethernet regs.\n");
  		ret = PTR_ERR(lp->regs);
 -		goto cleanup_clk;
 +		goto free_netdev;
  	}
 -	lp->regs_start = ethres->start;
  
  	/* Setup checksum offload, but default to off if not specified */
  	lp->features = 0;
diff --cc drivers/net/usb/lan78xx.c
index 89b8d338f287,f18ab8e220db..000000000000
--- a/drivers/net/usb/lan78xx.c
+++ b/drivers/net/usb/lan78xx.c
@@@ -3658,12 -4351,31 +3658,35 @@@ static int lan78xx_probe(struct usb_int
  
  	skb_queue_head_init(&dev->rxq);
  	skb_queue_head_init(&dev->txq);
 -	skb_queue_head_init(&dev->rxq_done);
 +	skb_queue_head_init(&dev->done);
 +	skb_queue_head_init(&dev->rxq_pause);
  	skb_queue_head_init(&dev->txq_pend);
 -	skb_queue_head_init(&dev->rxq_overflow);
  	mutex_init(&dev->phy_mutex);
++<<<<<<< HEAD
++=======
+ 	mutex_init(&dev->dev_mutex);
+ 
+ 	ret = lan78xx_urb_config_init(dev);
+ 	if (ret < 0)
+ 		goto out2;
+ 
+ 	ret = lan78xx_alloc_tx_resources(dev);
+ 	if (ret < 0)
+ 		goto out2;
+ 
+ 	ret = lan78xx_alloc_rx_resources(dev);
+ 	if (ret < 0)
+ 		goto out3;
+ 
+ 	/* MTU range: 68 - 9000 */
+ 	netdev->max_mtu = MAX_SINGLE_PACKET_SIZE;
+ 
+ 	netif_set_tso_max_size(netdev, LAN78XX_TSO_SIZE(dev));
+ 
+ 	netif_napi_add(netdev, &dev->napi, lan78xx_poll);
++>>>>>>> b48b89f9c189 (net: drop the weight argument from netif_napi_add)
  
 +	tasklet_init(&dev->bh, lan78xx_bh, (unsigned long)dev);
  	INIT_DELAYED_WORK(&dev->wq, lan78xx_delayedwork);
  	init_usb_anchor(&dev->deferred);
  
diff --cc drivers/net/wireless/ath/wil6210/netdev.c
index eb6c14ed65a4,ee7d7e9c2718..000000000000
--- a/drivers/net/wireless/ath/wil6210/netdev.c
+++ b/drivers/net/wireless/ath/wil6210/netdev.c
@@@ -418,11 -454,17 +418,25 @@@ int wil_if_add(struct wil6210_priv *wil
  	}
  
  	init_dummy_netdev(&wil->napi_ndev);
++<<<<<<< HEAD
 +	netif_napi_add(&wil->napi_ndev, &wil->napi_rx, wil6210_netdev_poll_rx,
 +		       WIL6210_NAPI_BUDGET);
 +	netif_tx_napi_add(&wil->napi_ndev,
 +			  &wil->napi_tx, wil6210_netdev_poll_tx,
 +			  WIL6210_NAPI_BUDGET);
++=======
+ 	if (wil->use_enhanced_dma_hw) {
+ 		netif_napi_add(&wil->napi_ndev, &wil->napi_rx,
+ 			       wil6210_netdev_poll_rx_edma);
+ 		netif_napi_add_tx(&wil->napi_ndev,
+ 				  &wil->napi_tx, wil6210_netdev_poll_tx_edma);
+ 	} else {
+ 		netif_napi_add(&wil->napi_ndev, &wil->napi_rx,
+ 			       wil6210_netdev_poll_rx);
+ 		netif_napi_add_tx(&wil->napi_ndev,
+ 				  &wil->napi_tx, wil6210_netdev_poll_tx);
+ 	}
++>>>>>>> b48b89f9c189 (net: drop the weight argument from netif_napi_add)
  
  	wil_update_net_queues_bh(wil, vif, NULL, true);
  
diff --cc drivers/net/xen-netback/interface.c
index 92274c237200,650fa180220f..000000000000
--- a/drivers/net/xen-netback/interface.c
+++ b/drivers/net/xen-netback/interface.c
@@@ -639,8 -723,26 +639,31 @@@ int xenvif_connect_data(struct xenvif_q
  	init_waitqueue_head(&queue->dealloc_wq);
  	atomic_set(&queue->inflight_packets, 0);
  
++<<<<<<< HEAD
 +	netif_napi_add(queue->vif->dev, &queue->napi, xenvif_poll,
 +			XENVIF_NAPI_WEIGHT);
++=======
+ 	netif_napi_add(queue->vif->dev, &queue->napi, xenvif_poll);
+ 
+ 	queue->stalled = true;
+ 
+ 	task = kthread_run(xenvif_kthread_guest_rx, queue,
+ 			   "%s-guest-rx", queue->name);
+ 	if (IS_ERR(task))
+ 		goto kthread_err;
+ 	queue->task = task;
+ 	/*
+ 	 * Take a reference to the task in order to prevent it from being freed
+ 	 * if the thread function returns before kthread_stop is called.
+ 	 */
+ 	get_task_struct(task);
+ 
+ 	task = kthread_run(xenvif_dealloc_kthread, queue,
+ 			   "%s-dealloc", queue->name);
+ 	if (IS_ERR(task))
+ 		goto kthread_err;
+ 	queue->dealloc_task = task;
++>>>>>>> b48b89f9c189 (net: drop the weight argument from netif_napi_add)
  
  	if (tx_evtchn == rx_evtchn) {
  		/* feature-split-event-channels == 0 */
diff --cc drivers/net/xen-netfront.c
index c9ad8431e87a,9af2b027c19c..000000000000
--- a/drivers/net/xen-netfront.c
+++ b/drivers/net/xen-netfront.c
@@@ -1775,8 -2216,15 +1775,20 @@@ static int xennet_create_queues(struct 
  			break;
  		}
  
++<<<<<<< HEAD
 +		netif_napi_add(queue->info->netdev, &queue->napi,
 +			       xennet_poll, 64);
++=======
+ 		/* use page pool recycling instead of buddy allocator */
+ 		ret = xennet_create_page_pool(queue);
+ 		if (ret < 0) {
+ 			dev_err(&info->xbdev->dev, "can't allocate page pool\n");
+ 			*num_queues = i;
+ 			return ret;
+ 		}
+ 
+ 		netif_napi_add(queue->info->netdev, &queue->napi, xennet_poll);
++>>>>>>> b48b89f9c189 (net: drop the weight argument from netif_napi_add)
  		if (netif_running(info->netdev))
  			napi_enable(&queue->napi);
  	}
diff --cc drivers/s390/net/qeth_l2_main.c
index 3995c81dcbb7,9dc935886e9f..000000000000
--- a/drivers/s390/net/qeth_l2_main.c
+++ b/drivers/s390/net/qeth_l2_main.c
@@@ -1190,8 -1133,7 +1190,12 @@@ static int qeth_l2_setup_netdev(struct 
  				       PAGE_SIZE * (QDIO_MAX_ELEMENTS_PER_BUFFER - 1));
  	}
  
++<<<<<<< HEAD
 +add_napi:
 +	netif_napi_add(card->dev, &card->napi, qeth_poll, NAPI_POLL_WEIGHT);
++=======
+ 	netif_napi_add(card->dev, &card->napi, qeth_poll);
++>>>>>>> b48b89f9c189 (net: drop the weight argument from netif_napi_add)
  	return register_netdev(card->dev);
  }
  
* Unmerged path drivers/net/can/ctucanfd/ctucanfd_base.c
* Unmerged path drivers/net/ethernet/actions/owl-emac.c
* Unmerged path drivers/net/ethernet/broadcom/bcm4908_enet.c
* Unmerged path drivers/net/ethernet/engleder/tsnep_main.c
* Unmerged path drivers/net/ethernet/freescale/dpaa2/dpaa2-eth.c
* Unmerged path drivers/net/ethernet/freescale/dpaa2/dpaa2-switch.c
* Unmerged path drivers/net/ethernet/freescale/enetc/enetc.c
* Unmerged path drivers/net/ethernet/fungible/funeth/funeth_main.c
* Unmerged path drivers/net/ethernet/lantiq_xrx200.c
* Unmerged path drivers/net/ethernet/marvell/octeon_ep/octep_main.c
* Unmerged path drivers/net/ethernet/marvell/octeontx2/nic/otx2_pf.c
* Unmerged path drivers/net/ethernet/marvell/prestera/prestera_rxtx.c
* Unmerged path drivers/net/ethernet/mediatek/mtk_star_emac.c
* Unmerged path drivers/net/ethernet/microchip/lan966x/lan966x_fdma.c
* Unmerged path drivers/net/ethernet/sunplus/spl2sw_driver.c
* Unmerged path drivers/net/ethernet/ti/am65-cpsw-nuss.c
* Unmerged path drivers/net/ethernet/ti/cpsw_new.c
* Unmerged path drivers/net/ipa/gsi.c
* Unmerged path drivers/net/wireguard/peer.c
* Unmerged path drivers/net/can/ctucanfd/ctucanfd_base.c
diff --git a/drivers/net/can/ifi_canfd/ifi_canfd.c b/drivers/net/can/ifi_canfd/ifi_canfd.c
index fedd927ba6ed..bd6c0aaeaa36 100644
--- a/drivers/net/can/ifi_canfd/ifi_canfd.c
+++ b/drivers/net/can/ifi_canfd/ifi_canfd.c
@@ -978,7 +978,7 @@ static int ifi_canfd_plat_probe(struct platform_device *pdev)
 	priv->ndev = ndev;
 	priv->base = addr;
 
-	netif_napi_add(ndev, &priv->napi, ifi_canfd_poll, 64);
+	netif_napi_add(ndev, &priv->napi, ifi_canfd_poll);
 
 	priv->can.state = CAN_STATE_STOPPED;
 
* Unmerged path drivers/net/can/m_can/m_can.c
* Unmerged path drivers/net/ethernet/actions/owl-emac.c
diff --git a/drivers/net/ethernet/aeroflex/greth.c b/drivers/net/ethernet/aeroflex/greth.c
index 916c5903ac79..61f550b8651f 100644
--- a/drivers/net/ethernet/aeroflex/greth.c
+++ b/drivers/net/ethernet/aeroflex/greth.c
@@ -1513,7 +1513,7 @@ static int greth_of_probe(struct platform_device *ofdev)
 	}
 
 	/* setup NAPI */
-	netif_napi_add(dev, &greth->napi, greth_poll, 64);
+	netif_napi_add(dev, &greth->napi, greth_poll);
 
 	return 0;
 
diff --git a/drivers/net/ethernet/agere/et131x.c b/drivers/net/ethernet/agere/et131x.c
index 5dd5d1e3449f..72519f701a6b 100644
--- a/drivers/net/ethernet/agere/et131x.c
+++ b/drivers/net/ethernet/agere/et131x.c
@@ -3981,7 +3981,7 @@ static int et131x_pci_setup(struct pci_dev *pdev,
 
 	et131x_init_send(adapter);
 
-	netif_napi_add(netdev, &adapter->napi, et131x_poll, 64);
+	netif_napi_add(netdev, &adapter->napi, et131x_poll);
 
 	ether_addr_copy(netdev->dev_addr, adapter->addr);
 
* Unmerged path drivers/net/ethernet/alacritech/slicoss.c
diff --git a/drivers/net/ethernet/altera/altera_tse_main.c b/drivers/net/ethernet/altera/altera_tse_main.c
index 18e8c32f1a7e..324fa3e0ba14 100644
--- a/drivers/net/ethernet/altera/altera_tse_main.c
+++ b/drivers/net/ethernet/altera/altera_tse_main.c
@@ -1568,7 +1568,7 @@ static int altera_tse_probe(struct platform_device *pdev)
 	ndev->features |= NETIF_F_HW_VLAN_CTAG_RX;
 
 	/* setup NAPI interface */
-	netif_napi_add(ndev, &priv->napi, tse_poll, NAPI_POLL_WEIGHT);
+	netif_napi_add(ndev, &priv->napi, tse_poll);
 
 	spin_lock_init(&priv->mac_cfg_lock);
 	spin_lock_init(&priv->tx_lock);
diff --git a/drivers/net/ethernet/amazon/ena/ena_netdev.c b/drivers/net/ethernet/amazon/ena/ena_netdev.c
index d3ca02d66c1e..c2fd2878c6e8 100644
--- a/drivers/net/ethernet/amazon/ena/ena_netdev.c
+++ b/drivers/net/ethernet/amazon/ena/ena_netdev.c
@@ -2267,10 +2267,8 @@ static void ena_init_napi_in_range(struct ena_adapter *adapter,
 	for (i = first_index; i < first_index + count; i++) {
 		struct ena_napi *napi = &adapter->ena_napi[i];
 
-		netif_napi_add(adapter->netdev,
-			       &napi->napi,
-			       ENA_IS_XDP_INDEX(adapter, i) ? ena_xdp_io_poll : ena_io_poll,
-			       NAPI_POLL_WEIGHT);
+		netif_napi_add(adapter->netdev, &napi->napi,
+			       ENA_IS_XDP_INDEX(adapter, i) ? ena_xdp_io_poll : ena_io_poll);
 
 		if (!ENA_IS_XDP_INDEX(adapter, i)) {
 			napi->rx_ring = &adapter->rx_ring[i];
diff --git a/drivers/net/ethernet/amd/xgbe/xgbe-drv.c b/drivers/net/ethernet/amd/xgbe/xgbe-drv.c
index 5f0244f2c8ed..65e80d7f143b 100644
--- a/drivers/net/ethernet/amd/xgbe/xgbe-drv.c
+++ b/drivers/net/ethernet/amd/xgbe/xgbe-drv.c
@@ -1025,14 +1025,14 @@ static void xgbe_napi_enable(struct xgbe_prv_data *pdata, unsigned int add)
 			channel = pdata->channel[i];
 			if (add)
 				netif_napi_add(pdata->netdev, &channel->napi,
-					       xgbe_one_poll, NAPI_POLL_WEIGHT);
+					       xgbe_one_poll);
 
 			napi_enable(&channel->napi);
 		}
 	} else {
 		if (add)
 			netif_napi_add(pdata->netdev, &pdata->napi,
-				       xgbe_all_poll, NAPI_POLL_WEIGHT);
+				       xgbe_all_poll);
 
 		napi_enable(&pdata->napi);
 	}
diff --git a/drivers/net/ethernet/apm/xgene-v2/main.c b/drivers/net/ethernet/apm/xgene-v2/main.c
index 34072e24d292..14e64fdfa2f3 100644
--- a/drivers/net/ethernet/apm/xgene-v2/main.c
+++ b/drivers/net/ethernet/apm/xgene-v2/main.c
@@ -686,7 +686,7 @@ static int xge_probe(struct platform_device *pdev)
 	if (ret)
 		goto err;
 
-	netif_napi_add(ndev, &pdata->napi, xge_napi, NAPI_POLL_WEIGHT);
+	netif_napi_add(ndev, &pdata->napi, xge_napi);
 
 	ret = register_netdev(ndev);
 	if (ret) {
diff --git a/drivers/net/ethernet/apm/xgene/xgene_enet_main.c b/drivers/net/ethernet/apm/xgene/xgene_enet_main.c
index 47be80d186aa..20e38f90892b 100644
--- a/drivers/net/ethernet/apm/xgene/xgene_enet_main.c
+++ b/drivers/net/ethernet/apm/xgene/xgene_enet_main.c
@@ -1992,14 +1992,12 @@ static void xgene_enet_napi_add(struct xgene_enet_pdata *pdata)
 
 	for (i = 0; i < pdata->rxq_cnt; i++) {
 		napi = &pdata->rx_ring[i]->napi;
-		netif_napi_add(pdata->ndev, napi, xgene_enet_napi,
-			       NAPI_POLL_WEIGHT);
+		netif_napi_add(pdata->ndev, napi, xgene_enet_napi);
 	}
 
 	for (i = 0; i < pdata->cq_cnt; i++) {
 		napi = &pdata->tx_ring[i]->cp_ring->napi;
-		netif_napi_add(pdata->ndev, napi, xgene_enet_napi,
-			       NAPI_POLL_WEIGHT);
+		netif_napi_add(pdata->ndev, napi, xgene_enet_napi);
 	}
 }
 
diff --git a/drivers/net/ethernet/aquantia/atlantic/aq_ptp.c b/drivers/net/ethernet/aquantia/atlantic/aq_ptp.c
index 275324c9e51e..80b44043e6c5 100644
--- a/drivers/net/ethernet/aquantia/atlantic/aq_ptp.c
+++ b/drivers/net/ethernet/aquantia/atlantic/aq_ptp.c
@@ -1217,8 +1217,7 @@ int aq_ptp_init(struct aq_nic_s *aq_nic, unsigned int idx_vec)
 	atomic_set(&aq_ptp->offset_egress, 0);
 	atomic_set(&aq_ptp->offset_ingress, 0);
 
-	netif_napi_add(aq_nic_get_ndev(aq_nic), &aq_ptp->napi,
-		       aq_ptp_poll, NAPI_POLL_WEIGHT);
+	netif_napi_add(aq_nic_get_ndev(aq_nic), &aq_ptp->napi, aq_ptp_poll);
 
 	aq_ptp->idx_vector = idx_vec;
 
diff --git a/drivers/net/ethernet/aquantia/atlantic/aq_vec.c b/drivers/net/ethernet/aquantia/atlantic/aq_vec.c
index 6e45a0be9e76..6e00e25153db 100644
--- a/drivers/net/ethernet/aquantia/atlantic/aq_vec.c
+++ b/drivers/net/ethernet/aquantia/atlantic/aq_vec.c
@@ -124,8 +124,7 @@ struct aq_vec_s *aq_vec_alloc(struct aq_nic_s *aq_nic, unsigned int idx,
 	self->tx_rings = 0;
 	self->rx_rings = 0;
 
-	netif_napi_add(aq_nic_get_ndev(aq_nic), &self->napi,
-		       aq_vec_poll, NAPI_POLL_WEIGHT);
+	netif_napi_add(aq_nic_get_ndev(aq_nic), &self->napi, aq_vec_poll);
 
 err_exit:
 	return self;
diff --git a/drivers/net/ethernet/atheros/alx/main.c b/drivers/net/ethernet/atheros/alx/main.c
index eb662d1742d5..7e045cd25e46 100644
--- a/drivers/net/ethernet/atheros/alx/main.c
+++ b/drivers/net/ethernet/atheros/alx/main.c
@@ -753,7 +753,7 @@ static int alx_alloc_napis(struct alx_priv *alx)
 			goto err_out;
 
 		np->alx = alx;
-		netif_napi_add(alx->dev, &np->napi, alx_poll, 64);
+		netif_napi_add(alx->dev, &np->napi, alx_poll);
 		alx->qnapi[i] = np;
 	}
 
* Unmerged path drivers/net/ethernet/atheros/atl1c/atl1c_main.c
diff --git a/drivers/net/ethernet/atheros/atl1e/atl1e_main.c b/drivers/net/ethernet/atheros/atl1e/atl1e_main.c
index 9d579f1766c2..67650943bb90 100644
--- a/drivers/net/ethernet/atheros/atl1e/atl1e_main.c
+++ b/drivers/net/ethernet/atheros/atl1e/atl1e_main.c
@@ -2360,7 +2360,7 @@ static int atl1e_probe(struct pci_dev *pdev, const struct pci_device_id *ent)
 	adapter->mii.phy_id_mask = 0x1f;
 	adapter->mii.reg_num_mask = MDIO_REG_ADDR_MASK;
 
-	netif_napi_add(netdev, &adapter->napi, atl1e_clean, 64);
+	netif_napi_add(netdev, &adapter->napi, atl1e_clean);
 
 	timer_setup(&adapter->phy_config_timer, atl1e_phy_config, 0);
 
diff --git a/drivers/net/ethernet/atheros/atlx/atl1.c b/drivers/net/ethernet/atheros/atlx/atl1.c
index e7927df3db12..7663df58947f 100644
--- a/drivers/net/ethernet/atheros/atlx/atl1.c
+++ b/drivers/net/ethernet/atheros/atlx/atl1.c
@@ -3001,7 +3001,7 @@ static int atl1_probe(struct pci_dev *pdev, const struct pci_device_id *ent)
 
 	netdev->netdev_ops = &atl1_netdev_ops;
 	netdev->watchdog_timeo = 5 * HZ;
-	netif_napi_add(netdev, &adapter->napi, atl1_rings_clean, 64);
+	netif_napi_add(netdev, &adapter->napi, atl1_rings_clean);
 
 	netdev->ethtool_ops = &atl1_ethtool_ops;
 	adapter->bd_number = cards_found;
diff --git a/drivers/net/ethernet/broadcom/b44.c b/drivers/net/ethernet/broadcom/b44.c
index 1764ef799fcb..bf6e89323b0e 100644
--- a/drivers/net/ethernet/broadcom/b44.c
+++ b/drivers/net/ethernet/broadcom/b44.c
@@ -2378,7 +2378,7 @@ static int b44_init_one(struct ssb_device *sdev,
 	bp->tx_pending = B44_DEF_TX_RING_PENDING;
 
 	dev->netdev_ops = &b44_netdev_ops;
-	netif_napi_add(dev, &bp->napi, b44_poll, 64);
+	netif_napi_add(dev, &bp->napi, b44_poll);
 	dev->watchdog_timeo = B44_TX_TIMEOUT;
 	dev->min_mtu = B44_MIN_MTU;
 	dev->max_mtu = B44_MAX_MTU;
* Unmerged path drivers/net/ethernet/broadcom/bcm4908_enet.c
diff --git a/drivers/net/ethernet/broadcom/bcmsysport.c b/drivers/net/ethernet/broadcom/bcmsysport.c
index 558f39fe3bac..6aa3bbd8a5be 100644
--- a/drivers/net/ethernet/broadcom/bcmsysport.c
+++ b/drivers/net/ethernet/broadcom/bcmsysport.c
@@ -2347,7 +2347,7 @@ static int bcm_sysport_probe(struct platform_device *pdev)
 	dev_set_drvdata(&pdev->dev, dev);
 	dev->ethtool_ops = &bcm_sysport_ethtool_ops;
 	dev->netdev_ops = &bcm_sysport_netdev_ops;
-	netif_napi_add(dev, &priv->napi, bcm_sysport_poll, 64);
+	netif_napi_add(dev, &priv->napi, bcm_sysport_poll);
 
 	/* HW supported features, none enabled by default */
 	dev->hw_features |= NETIF_F_RXCSUM | NETIF_F_HIGHDMA |
* Unmerged path drivers/net/ethernet/broadcom/bgmac.c
diff --git a/drivers/net/ethernet/broadcom/bnx2.c b/drivers/net/ethernet/broadcom/bnx2.c
index 2c5d91341284..53b4109f5c32 100644
--- a/drivers/net/ethernet/broadcom/bnx2.c
+++ b/drivers/net/ethernet/broadcom/bnx2.c
@@ -8518,7 +8518,7 @@ bnx2_init_napi(struct bnx2 *bp)
 		else
 			poll = bnx2_poll_msix;
 
-		netif_napi_add(bp->dev, &bp->bnx2_napi[i].napi, poll, 64);
+		netif_napi_add(bp->dev, &bp->bnx2_napi[i].napi, poll);
 		bnapi->bp = bp;
 	}
 }
diff --git a/drivers/net/ethernet/broadcom/bnx2x/bnx2x_cmn.c b/drivers/net/ethernet/broadcom/bnx2x/bnx2x_cmn.c
index 832c5a5b754f..32ef7142c996 100644
--- a/drivers/net/ethernet/broadcom/bnx2x/bnx2x_cmn.c
+++ b/drivers/net/ethernet/broadcom/bnx2x/bnx2x_cmn.c
@@ -43,8 +43,7 @@ static void bnx2x_add_all_napi_cnic(struct bnx2x *bp)
 
 	/* Add NAPI objects */
 	for_each_rx_queue_cnic(bp, i) {
-		netif_napi_add(bp->dev, &bnx2x_fp(bp, i, napi),
-			       bnx2x_poll, NAPI_POLL_WEIGHT);
+		netif_napi_add(bp->dev, &bnx2x_fp(bp, i, napi), bnx2x_poll);
 	}
 }
 
@@ -54,8 +53,7 @@ static void bnx2x_add_all_napi(struct bnx2x *bp)
 
 	/* Add NAPI objects */
 	for_each_eth_queue(bp, i) {
-		netif_napi_add(bp->dev, &bnx2x_fp(bp, i, napi),
-			       bnx2x_poll, NAPI_POLL_WEIGHT);
+		netif_napi_add(bp->dev, &bnx2x_fp(bp, i, napi), bnx2x_poll);
 	}
 }
 
diff --git a/drivers/net/ethernet/broadcom/bnxt/bnxt.c b/drivers/net/ethernet/broadcom/bnxt/bnxt.c
index 69281186cd0c..c715f95fc087 100644
--- a/drivers/net/ethernet/broadcom/bnxt/bnxt.c
+++ b/drivers/net/ethernet/broadcom/bnxt/bnxt.c
@@ -9222,16 +9222,16 @@ static void bnxt_init_napi(struct bnxt *bp)
 			cp_nr_rings--;
 		for (i = 0; i < cp_nr_rings; i++) {
 			bnapi = bp->bnapi[i];
-			netif_napi_add(bp->dev, &bnapi->napi, poll_fn, 64);
+			netif_napi_add(bp->dev, &bnapi->napi, poll_fn);
 		}
 		if (BNXT_CHIP_TYPE_NITRO_A0(bp)) {
 			bnapi = bp->bnapi[cp_nr_rings];
 			netif_napi_add(bp->dev, &bnapi->napi,
-				       bnxt_poll_nitroa0, 64);
+				       bnxt_poll_nitroa0);
 		}
 	} else {
 		bnapi = bp->bnapi[0];
-		netif_napi_add(bp->dev, &bnapi->napi, bnxt_poll, 64);
+		netif_napi_add(bp->dev, &bnapi->napi, bnxt_poll);
 	}
 }
 
diff --git a/drivers/net/ethernet/broadcom/genet/bcmgenet.c b/drivers/net/ethernet/broadcom/genet/bcmgenet.c
index 116c5aeea2f7..67f992e24b22 100644
--- a/drivers/net/ethernet/broadcom/genet/bcmgenet.c
+++ b/drivers/net/ethernet/broadcom/genet/bcmgenet.c
@@ -2206,8 +2206,7 @@ static int bcmgenet_init_rx_ring(struct bcmgenet_priv *priv,
 	bcmgenet_init_rx_coalesce(ring);
 
 	/* Initialize Rx NAPI */
-	netif_napi_add(priv->dev, &ring->napi, bcmgenet_rx_poll,
-		       NAPI_POLL_WEIGHT);
+	netif_napi_add(priv->dev, &ring->napi, bcmgenet_rx_poll);
 
 	bcmgenet_rdma_ring_writel(priv, index, 0, RDMA_PROD_INDEX);
 	bcmgenet_rdma_ring_writel(priv, index, 0, RDMA_CONS_INDEX);
diff --git a/drivers/net/ethernet/broadcom/tg3.c b/drivers/net/ethernet/broadcom/tg3.c
index 6e272c1bb399..bddf0953b8fa 100644
--- a/drivers/net/ethernet/broadcom/tg3.c
+++ b/drivers/net/ethernet/broadcom/tg3.c
@@ -7383,9 +7383,9 @@ static void tg3_napi_init(struct tg3 *tp)
 {
 	int i;
 
-	netif_napi_add(tp->dev, &tp->napi[0].napi, tg3_poll, 64);
+	netif_napi_add(tp->dev, &tp->napi[0].napi, tg3_poll);
 	for (i = 1; i < tp->irq_cnt; i++)
-		netif_napi_add(tp->dev, &tp->napi[i].napi, tg3_poll_msix, 64);
+		netif_napi_add(tp->dev, &tp->napi[i].napi, tg3_poll_msix);
 }
 
 static void tg3_napi_fini(struct tg3 *tp)
diff --git a/drivers/net/ethernet/brocade/bna/bnad.c b/drivers/net/ethernet/brocade/bna/bnad.c
index e35a1a3d6748..7da1305e1b73 100644
--- a/drivers/net/ethernet/brocade/bna/bnad.c
+++ b/drivers/net/ethernet/brocade/bna/bnad.c
@@ -1899,7 +1899,7 @@ bnad_napi_add(struct bnad *bnad, u32 rx_id)
 	for (i = 0; i <	bnad->num_rxp_per_rx; i++) {
 		rx_ctrl = &bnad->rx_info[rx_id].rx_ctrl[i];
 		netif_napi_add(bnad->netdev, &rx_ctrl->napi,
-			       bnad_napi_poll_rx, NAPI_POLL_WEIGHT);
+			       bnad_napi_poll_rx);
 	}
 }
 
* Unmerged path drivers/net/ethernet/cadence/macb_main.c
diff --git a/drivers/net/ethernet/calxeda/xgmac.c b/drivers/net/ethernet/calxeda/xgmac.c
index 5de07bb4f248..ae55eefc0c8c 100644
--- a/drivers/net/ethernet/calxeda/xgmac.c
+++ b/drivers/net/ethernet/calxeda/xgmac.c
@@ -1798,7 +1798,7 @@ static int xgmac_probe(struct platform_device *pdev)
 		netdev_warn(ndev, "MAC address %pM not valid",
 			 ndev->dev_addr);
 
-	netif_napi_add(ndev, &priv->napi, xgmac_poll, 64);
+	netif_napi_add(ndev, &priv->napi, xgmac_poll);
 	ret = register_netdev(ndev);
 	if (ret)
 		goto err_reg;
diff --git a/drivers/net/ethernet/cavium/liquidio/lio_core.c b/drivers/net/ethernet/cavium/liquidio/lio_core.c
index 8093c5eafea2..8d99c62e1c70 100644
--- a/drivers/net/ethernet/cavium/liquidio/lio_core.c
+++ b/drivers/net/ethernet/cavium/liquidio/lio_core.c
@@ -874,7 +874,7 @@ int liquidio_setup_io_queues(struct octeon_device *octeon_dev, int ifidx,
 		napi = &droq->napi;
 		dev_dbg(&octeon_dev->pci_dev->dev, "netif_napi_add netdev:%llx oct:%llx\n",
 			(u64)netdev, (u64)octeon_dev);
-		netif_napi_add(netdev, napi, liquidio_napi_poll, 64);
+		netif_napi_add(netdev, napi, liquidio_napi_poll);
 
 		/* designate a CPU for this droq */
 		droq->cpu_id = cpu_id;
diff --git a/drivers/net/ethernet/cavium/thunder/nicvf_main.c b/drivers/net/ethernet/cavium/thunder/nicvf_main.c
index 892d1f8e995d..0accce6bb11f 100644
--- a/drivers/net/ethernet/cavium/thunder/nicvf_main.c
+++ b/drivers/net/ethernet/cavium/thunder/nicvf_main.c
@@ -1472,8 +1472,7 @@ int nicvf_open(struct net_device *netdev)
 		}
 		cq_poll->cq_idx = qidx;
 		cq_poll->nicvf = nic;
-		netif_napi_add(netdev, &cq_poll->napi, nicvf_poll,
-			       NAPI_POLL_WEIGHT);
+		netif_napi_add(netdev, &cq_poll->napi, nicvf_poll);
 		napi_enable(&cq_poll->napi);
 		nic->napi[qidx] = cq_poll;
 	}
diff --git a/drivers/net/ethernet/chelsio/cxgb/cxgb2.c b/drivers/net/ethernet/chelsio/cxgb/cxgb2.c
index 4f0a54ee7063..b5d1e6075614 100644
--- a/drivers/net/ethernet/chelsio/cxgb/cxgb2.c
+++ b/drivers/net/ethernet/chelsio/cxgb/cxgb2.c
@@ -1111,7 +1111,7 @@ static int init_one(struct pci_dev *pdev, const struct pci_device_id *ent)
 		netdev->hard_header_len += (netdev->hw_features & NETIF_F_TSO) ?
 			sizeof(struct cpl_tx_pkt_lso) : sizeof(struct cpl_tx_pkt);
 
-		netif_napi_add(netdev, &adapter->napi, t1_poll, 64);
+		netif_napi_add(netdev, &adapter->napi, t1_poll);
 
 		netdev->ethtool_ops = &t1_ethtool_ops;
 
diff --git a/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c b/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c
index 4b69c43654cb..3e78a4c01f83 100644
--- a/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c
+++ b/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c
@@ -610,8 +610,7 @@ static void init_napi(struct adapter *adap)
 		struct sge_qset *qs = &adap->sge.qs[i];
 
 		if (qs->adap)
-			netif_napi_add(qs->netdev, &qs->napi, qs->napi.poll,
-				       64);
+			netif_napi_add(qs->netdev, &qs->napi, qs->napi.poll);
 	}
 
 	/*
diff --git a/drivers/net/ethernet/chelsio/cxgb4/sge.c b/drivers/net/ethernet/chelsio/cxgb4/sge.c
index 1fa1b043568e..ad2bde6b0c71 100644
--- a/drivers/net/ethernet/chelsio/cxgb4/sge.c
+++ b/drivers/net/ethernet/chelsio/cxgb4/sge.c
@@ -4466,7 +4466,7 @@ int t4_sge_alloc_rxq(struct adapter *adap, struct sge_rspq *iq, bool fwevtq,
 	if (ret)
 		goto err;
 
-	netif_napi_add(dev, &iq->napi, napi_rx_handler, 64);
+	netif_napi_add(dev, &iq->napi, napi_rx_handler);
 	iq->cur_desc = iq->desc;
 	iq->cidx = 0;
 	iq->gen = 1;
diff --git a/drivers/net/ethernet/chelsio/cxgb4vf/sge.c b/drivers/net/ethernet/chelsio/cxgb4vf/sge.c
index 43b2ceb6aa32..2d0cf76fb3c5 100644
--- a/drivers/net/ethernet/chelsio/cxgb4vf/sge.c
+++ b/drivers/net/ethernet/chelsio/cxgb4vf/sge.c
@@ -2336,7 +2336,7 @@ int t4vf_sge_alloc_rxq(struct adapter *adapter, struct sge_rspq *rspq,
 	if (ret)
 		goto err;
 
-	netif_napi_add(dev, &rspq->napi, napi_rx_handler, 64);
+	netif_napi_add(dev, &rspq->napi, napi_rx_handler);
 	rspq->cur_desc = rspq->desc;
 	rspq->cidx = 0;
 	rspq->gen = 1;
diff --git a/drivers/net/ethernet/cirrus/ep93xx_eth.c b/drivers/net/ethernet/cirrus/ep93xx_eth.c
index e2a702996db4..bf4c915b628f 100644
--- a/drivers/net/ethernet/cirrus/ep93xx_eth.c
+++ b/drivers/net/ethernet/cirrus/ep93xx_eth.c
@@ -817,7 +817,7 @@ static int ep93xx_eth_probe(struct platform_device *pdev)
 	ep = netdev_priv(dev);
 	ep->dev = dev;
 	SET_NETDEV_DEV(dev, &pdev->dev);
-	netif_napi_add(dev, &ep->napi, ep93xx_poll, 64);
+	netif_napi_add(dev, &ep->napi, ep93xx_poll);
 
 	platform_set_drvdata(pdev, dev);
 
diff --git a/drivers/net/ethernet/cisco/enic/enic_main.c b/drivers/net/ethernet/cisco/enic/enic_main.c
index ad0e65e54d71..368cc7288d13 100644
--- a/drivers/net/ethernet/cisco/enic/enic_main.c
+++ b/drivers/net/ethernet/cisco/enic/enic_main.c
@@ -2652,16 +2652,17 @@ static int enic_dev_init(struct enic *enic)
 
 	switch (vnic_dev_get_intr_mode(enic->vdev)) {
 	default:
-		netif_napi_add(netdev, &enic->napi[0], enic_poll, 64);
+		netif_napi_add(netdev, &enic->napi[0], enic_poll);
 		break;
 	case VNIC_DEV_INTR_MODE_MSIX:
 		for (i = 0; i < enic->rq_count; i++) {
 			netif_napi_add(netdev, &enic->napi[i],
-				enic_poll_msix_rq, NAPI_POLL_WEIGHT);
+				       enic_poll_msix_rq);
 		}
 		for (i = 0; i < enic->wq_count; i++)
-			netif_napi_add(netdev, &enic->napi[enic_cq_wq(enic, i)],
-				       enic_poll_msix_wq, NAPI_POLL_WEIGHT);
+			netif_napi_add(netdev,
+				       &enic->napi[enic_cq_wq(enic, i)],
+				       enic_poll_msix_wq);
 		break;
 	}
 
* Unmerged path drivers/net/ethernet/cortina/gemini.c
diff --git a/drivers/net/ethernet/dnet.c b/drivers/net/ethernet/dnet.c
index 50e971b213e2..07d0b1bed83d 100644
--- a/drivers/net/ethernet/dnet.c
+++ b/drivers/net/ethernet/dnet.c
@@ -811,7 +811,7 @@ static int dnet_probe(struct platform_device *pdev)
 	}
 
 	dev->netdev_ops = &dnet_netdev_ops;
-	netif_napi_add(dev, &bp->napi, dnet_poll, 64);
+	netif_napi_add(dev, &bp->napi, dnet_poll);
 	dev->ethtool_ops = &dnet_ethtool_ops;
 
 	dev->base_addr = (unsigned long)bp->regs;
diff --git a/drivers/net/ethernet/emulex/benet/be_main.c b/drivers/net/ethernet/emulex/benet/be_main.c
index 46c29df41659..958ed883ac50 100644
--- a/drivers/net/ethernet/emulex/benet/be_main.c
+++ b/drivers/net/ethernet/emulex/benet/be_main.c
@@ -2990,8 +2990,7 @@ static int be_evt_queues_create(struct be_adapter *adapter)
 			return -ENOMEM;
 		cpumask_set_cpu(cpumask_local_spread(i, numa_node),
 				eqo->affinity_mask);
-		netif_napi_add(adapter->netdev, &eqo->napi, be_poll,
-			       NAPI_POLL_WEIGHT);
+		netif_napi_add(adapter->netdev, &eqo->napi, be_poll);
 	}
 	return 0;
 }
* Unmerged path drivers/net/ethernet/engleder/tsnep_main.c
diff --git a/drivers/net/ethernet/ethoc.c b/drivers/net/ethernet/ethoc.c
index e9677222a9d8..2a8913162fee 100644
--- a/drivers/net/ethernet/ethoc.c
+++ b/drivers/net/ethernet/ethoc.c
@@ -1228,7 +1228,7 @@ static int ethoc_probe(struct platform_device *pdev)
 	netdev->ethtool_ops = &ethoc_ethtool_ops;
 
 	/* setup NAPI */
-	netif_napi_add(netdev, &priv->napi, ethoc_poll, 64);
+	netif_napi_add(netdev, &priv->napi, ethoc_poll);
 
 	spin_lock_init(&priv->lock);
 
diff --git a/drivers/net/ethernet/faraday/ftgmac100.c b/drivers/net/ethernet/faraday/ftgmac100.c
index 975ff2ac3daf..fc774ff8599b 100644
--- a/drivers/net/ethernet/faraday/ftgmac100.c
+++ b/drivers/net/ethernet/faraday/ftgmac100.c
@@ -1478,7 +1478,7 @@ static int ftgmac100_open(struct net_device *netdev)
 		goto err_hw;
 
 	/* Initialize NAPI */
-	netif_napi_add(netdev, &priv->napi, ftgmac100_poll, 64);
+	netif_napi_add(netdev, &priv->napi, ftgmac100_poll);
 
 	/* Grab our interrupt */
 	err = request_irq(netdev->irq, ftgmac100_interrupt, 0, netdev->name, netdev);
diff --git a/drivers/net/ethernet/faraday/ftmac100.c b/drivers/net/ethernet/faraday/ftmac100.c
index aecc76504b69..bbc3bf12b8e6 100644
--- a/drivers/net/ethernet/faraday/ftmac100.c
+++ b/drivers/net/ethernet/faraday/ftmac100.c
@@ -1104,7 +1104,7 @@ static int ftmac100_probe(struct platform_device *pdev)
 	spin_lock_init(&priv->tx_lock);
 
 	/* initialize NAPI */
-	netif_napi_add(netdev, &priv->napi, ftmac100_poll, 64);
+	netif_napi_add(netdev, &priv->napi, ftmac100_poll);
 
 	/* map io memory */
 	priv->res = request_mem_region(res->start, resource_size(res),
diff --git a/drivers/net/ethernet/freescale/dpaa/dpaa_eth.c b/drivers/net/ethernet/freescale/dpaa/dpaa_eth.c
index 15fe3d780457..8ec630e1343e 100644
--- a/drivers/net/ethernet/freescale/dpaa/dpaa_eth.c
+++ b/drivers/net/ethernet/freescale/dpaa/dpaa_eth.c
@@ -2555,8 +2555,7 @@ static int dpaa_napi_add(struct net_device *net_dev)
 	for_each_possible_cpu(cpu) {
 		percpu_priv = per_cpu_ptr(priv->percpu_priv, cpu);
 
-		netif_napi_add(net_dev, &percpu_priv->np.napi,
-			       dpaa_eth_poll, NAPI_POLL_WEIGHT);
+		netif_napi_add(net_dev, &percpu_priv->np.napi, dpaa_eth_poll);
 	}
 
 	return 0;
* Unmerged path drivers/net/ethernet/freescale/dpaa2/dpaa2-eth.c
* Unmerged path drivers/net/ethernet/freescale/dpaa2/dpaa2-switch.c
* Unmerged path drivers/net/ethernet/freescale/enetc/enetc.c
diff --git a/drivers/net/ethernet/freescale/fec_main.c b/drivers/net/ethernet/freescale/fec_main.c
index 0d5d9a8d6790..d80d62d368af 100644
--- a/drivers/net/ethernet/freescale/fec_main.c
+++ b/drivers/net/ethernet/freescale/fec_main.c
@@ -3205,7 +3205,7 @@ static int fec_enet_init(struct net_device *ndev)
 	ndev->ethtool_ops = &fec_enet_ethtool_ops;
 
 	writel(FEC_RX_DISABLED_IMASK, fep->hwp + FEC_IMASK);
-	netif_napi_add(ndev, &fep->napi, fec_enet_rx_napi, NAPI_POLL_WEIGHT);
+	netif_napi_add(ndev, &fep->napi, fec_enet_rx_napi);
 
 	if (fep->quirks & FEC_QUIRK_HAS_VLAN)
 		/* enable hw VLAN support */
* Unmerged path drivers/net/ethernet/freescale/gianfar.c
diff --git a/drivers/net/ethernet/freescale/ucc_geth.c b/drivers/net/ethernet/freescale/ucc_geth.c
index bb1072b01e88..843a3f05e1e0 100644
--- a/drivers/net/ethernet/freescale/ucc_geth.c
+++ b/drivers/net/ethernet/freescale/ucc_geth.c
@@ -3878,7 +3878,7 @@ static int ucc_geth_probe(struct platform_device* ofdev)
 	dev->netdev_ops = &ucc_geth_netdev_ops;
 	dev->watchdog_timeo = TX_TIMEOUT;
 	INIT_WORK(&ugeth->timeout_work, ucc_geth_timeout_work);
-	netif_napi_add(dev, &ugeth->napi, ucc_geth_poll, 64);
+	netif_napi_add(dev, &ugeth->napi, ucc_geth_poll);
 	dev->mtu = 1500;
 
 	ugeth->msg_enable = netif_msg_init(debug.msg_enable, UGETH_MSG_DEFAULT);
* Unmerged path drivers/net/ethernet/fungible/funeth/funeth_main.c
diff --git a/drivers/net/ethernet/google/gve/gve_main.c b/drivers/net/ethernet/google/gve/gve_main.c
index 54e51c8221b8..96d8426c3f95 100644
--- a/drivers/net/ethernet/google/gve/gve_main.c
+++ b/drivers/net/ethernet/google/gve/gve_main.c
@@ -526,8 +526,7 @@ static void gve_add_napi(struct gve_priv *priv, int ntfy_idx,
 {
 	struct gve_notify_block *block = &priv->ntfy_blocks[ntfy_idx];
 
-	netif_napi_add(priv->dev, &block->napi, gve_poll,
-		       NAPI_POLL_WEIGHT);
+	netif_napi_add(priv->dev, &block->napi, gve_poll);
 }
 
 static void gve_remove_napi(struct gve_priv *priv, int ntfy_idx)
diff --git a/drivers/net/ethernet/hisilicon/hip04_eth.c b/drivers/net/ethernet/hisilicon/hip04_eth.c
index 2ee9c4ee26ad..ac49fa6ebc52 100644
--- a/drivers/net/ethernet/hisilicon/hip04_eth.c
+++ b/drivers/net/ethernet/hisilicon/hip04_eth.c
@@ -901,7 +901,7 @@ static int hip04_mac_probe(struct platform_device *pdev)
 	ndev->watchdog_timeo = TX_TIMEOUT;
 	ndev->priv_flags |= IFF_UNICAST_FLT;
 	ndev->irq = irq;
-	netif_napi_add(ndev, &priv->napi, hip04_rx_poll, NAPI_POLL_WEIGHT);
+	netif_napi_add(ndev, &priv->napi, hip04_rx_poll);
 
 	hip04_reset_ppe(priv);
 	if (priv->phy_mode == PHY_INTERFACE_MODE_MII)
diff --git a/drivers/net/ethernet/hisilicon/hix5hd2_gmac.c b/drivers/net/ethernet/hisilicon/hix5hd2_gmac.c
index 1c3895d5e7c5..e5c418b0c151 100644
--- a/drivers/net/ethernet/hisilicon/hix5hd2_gmac.c
+++ b/drivers/net/ethernet/hisilicon/hix5hd2_gmac.c
@@ -1252,7 +1252,7 @@ static int hix5hd2_dev_probe(struct platform_device *pdev)
 	if (ret)
 		goto out_phy_node;
 
-	netif_napi_add(ndev, &priv->napi, hix5hd2_poll, NAPI_POLL_WEIGHT);
+	netif_napi_add(ndev, &priv->napi, hix5hd2_poll);
 
 	if (HAS_CAP_TSO(priv->hw_cap)) {
 		ret = hix5hd2_init_sg_desc_queue(priv);
diff --git a/drivers/net/ethernet/hisilicon/hns/hns_enet.c b/drivers/net/ethernet/hisilicon/hns/hns_enet.c
index 862712453193..c306e5c00fb4 100644
--- a/drivers/net/ethernet/hisilicon/hns/hns_enet.c
+++ b/drivers/net/ethernet/hisilicon/hns/hns_enet.c
@@ -2151,8 +2151,7 @@ static int hns_nic_init_ring_data(struct hns_nic_priv *priv)
 		rd->fini_process = is_ver1 ? hns_nic_tx_fini_pro :
 			hns_nic_tx_fini_pro_v2;
 
-		netif_napi_add(priv->netdev, &rd->napi,
-			       hns_nic_common_poll, NAPI_POLL_WEIGHT);
+		netif_napi_add(priv->netdev, &rd->napi, hns_nic_common_poll);
 		rd->ring->irq_init_flag = RCB_IRQ_NOT_INITED;
 	}
 	for (i = h->q_num; i < h->q_num * 2; i++) {
@@ -2164,8 +2163,7 @@ static int hns_nic_init_ring_data(struct hns_nic_priv *priv)
 		rd->fini_process = is_ver1 ? hns_nic_rx_fini_pro :
 			hns_nic_rx_fini_pro_v2;
 
-		netif_napi_add(priv->netdev, &rd->napi,
-			       hns_nic_common_poll, NAPI_POLL_WEIGHT);
+		netif_napi_add(priv->netdev, &rd->napi, hns_nic_common_poll);
 		rd->ring->irq_init_flag = RCB_IRQ_NOT_INITED;
 	}
 
diff --git a/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c b/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c
index bacc04a8bb9a..1bcb15016986 100644
--- a/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c
+++ b/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c
@@ -2745,7 +2745,7 @@ static int hns3_nic_init_vector_data(struct hns3_nic_priv *priv)
 			return ret;
 
 		netif_napi_add(priv->netdev, &tqp_vector->napi,
-			       hns3_nic_common_poll, NAPI_POLL_WEIGHT);
+			       hns3_nic_common_poll);
 	}
 
 	return 0;
diff --git a/drivers/net/ethernet/ibm/ehea/ehea_main.c b/drivers/net/ethernet/ibm/ehea/ehea_main.c
index bdfd54baaafb..516b5ad78ccf 100644
--- a/drivers/net/ethernet/ibm/ehea/ehea_main.c
+++ b/drivers/net/ethernet/ibm/ehea/ehea_main.c
@@ -1569,7 +1569,7 @@ static int ehea_init_port_res(struct ehea_port *port, struct ehea_port_res *pr,
 
 	kfree(init_attr);
 
-	netif_napi_add(pr->port->netdev, &pr->napi, ehea_poll, 64);
+	netif_napi_add(pr->port->netdev, &pr->napi, ehea_poll);
 
 	ret = 0;
 	goto out;
diff --git a/drivers/net/ethernet/ibm/ibmvnic.c b/drivers/net/ethernet/ibm/ibmvnic.c
index 93d03f8ebe23..bcea952e3b28 100644
--- a/drivers/net/ethernet/ibm/ibmvnic.c
+++ b/drivers/net/ethernet/ibm/ibmvnic.c
@@ -1068,7 +1068,7 @@ static int init_napi(struct ibmvnic_adapter *adapter)
 	for (i = 0; i < adapter->req_rx_queues; i++) {
 		netdev_dbg(adapter->netdev, "Adding napi[%d]\n", i);
 		netif_napi_add(adapter->netdev, &adapter->napi[i],
-			       ibmvnic_poll, NAPI_POLL_WEIGHT);
+			       ibmvnic_poll);
 	}
 
 	adapter->num_active_rx_napi = adapter->req_rx_queues;
diff --git a/drivers/net/ethernet/intel/e1000/e1000_main.c b/drivers/net/ethernet/intel/e1000/e1000_main.c
index 0796fa796b00..01ddc4e78395 100644
--- a/drivers/net/ethernet/intel/e1000/e1000_main.c
+++ b/drivers/net/ethernet/intel/e1000/e1000_main.c
@@ -1013,7 +1013,7 @@ static int e1000_probe(struct pci_dev *pdev, const struct pci_device_id *ent)
 	netdev->netdev_ops = &e1000_netdev_ops;
 	e1000_set_ethtool_ops(netdev);
 	netdev->watchdog_timeo = 5 * HZ;
-	netif_napi_add(netdev, &adapter->napi, e1000_clean, 64);
+	netif_napi_add(netdev, &adapter->napi, e1000_clean);
 
 	strncpy(netdev->name, pci_name(pdev), sizeof(netdev->name) - 1);
 
diff --git a/drivers/net/ethernet/intel/e1000e/netdev.c b/drivers/net/ethernet/intel/e1000e/netdev.c
index cbc427f79fe7..c2efb90643bc 100644
--- a/drivers/net/ethernet/intel/e1000e/netdev.c
+++ b/drivers/net/ethernet/intel/e1000e/netdev.c
@@ -7480,7 +7480,7 @@ static int e1000_probe(struct pci_dev *pdev, const struct pci_device_id *ent)
 	netdev->netdev_ops = &e1000e_netdev_ops;
 	e1000e_set_ethtool_ops(netdev);
 	netdev->watchdog_timeo = 5 * HZ;
-	netif_napi_add(netdev, &adapter->napi, e1000e_poll, 64);
+	netif_napi_add(netdev, &adapter->napi, e1000e_poll);
 	strscpy(netdev->name, pci_name(pdev), sizeof(netdev->name));
 
 	netdev->mem_start = mmio_start;
diff --git a/drivers/net/ethernet/intel/fm10k/fm10k_main.c b/drivers/net/ethernet/intel/fm10k/fm10k_main.c
index bc7884324940..c5461a7d1c0e 100644
--- a/drivers/net/ethernet/intel/fm10k/fm10k_main.c
+++ b/drivers/net/ethernet/intel/fm10k/fm10k_main.c
@@ -1597,8 +1597,7 @@ static int fm10k_alloc_q_vector(struct fm10k_intfc *interface,
 		return -ENOMEM;
 
 	/* initialize NAPI */
-	netif_napi_add(interface->netdev, &q_vector->napi,
-		       fm10k_poll, NAPI_POLL_WEIGHT);
+	netif_napi_add(interface->netdev, &q_vector->napi, fm10k_poll);
 
 	/* tie q_vector and interface together */
 	interface->q_vector[v_idx] = q_vector;
diff --git a/drivers/net/ethernet/intel/i40e/i40e_main.c b/drivers/net/ethernet/intel/i40e/i40e_main.c
index b486b64c8e38..56ee442f5300 100644
--- a/drivers/net/ethernet/intel/i40e/i40e_main.c
+++ b/drivers/net/ethernet/intel/i40e/i40e_main.c
@@ -11936,8 +11936,7 @@ static int i40e_vsi_alloc_q_vector(struct i40e_vsi *vsi, int v_idx)
 	cpumask_copy(&q_vector->affinity_mask, cpu_possible_mask);
 
 	if (vsi->netdev)
-		netif_napi_add(vsi->netdev, &q_vector->napi,
-			       i40e_napi_poll, NAPI_POLL_WEIGHT);
+		netif_napi_add(vsi->netdev, &q_vector->napi, i40e_napi_poll);
 
 	/* tie q_vector and vsi together */
 	vsi->q_vectors[v_idx] = q_vector;
diff --git a/drivers/net/ethernet/intel/iavf/iavf_main.c b/drivers/net/ethernet/intel/iavf/iavf_main.c
index 4874b4c06624..5c7725696a4c 100644
--- a/drivers/net/ethernet/intel/iavf/iavf_main.c
+++ b/drivers/net/ethernet/intel/iavf/iavf_main.c
@@ -1826,7 +1826,7 @@ static int iavf_alloc_q_vectors(struct iavf_adapter *adapter)
 		q_vector->reg_idx = q_idx;
 		cpumask_copy(&q_vector->affinity_mask, cpu_possible_mask);
 		netif_napi_add(adapter->netdev, &q_vector->napi,
-			       iavf_napi_poll, NAPI_POLL_WEIGHT);
+			       iavf_napi_poll);
 	}
 
 	return 0;
diff --git a/drivers/net/ethernet/intel/ice/ice_base.c b/drivers/net/ethernet/intel/ice/ice_base.c
index 1e3243808178..f64a5c1fe092 100644
--- a/drivers/net/ethernet/intel/ice/ice_base.c
+++ b/drivers/net/ethernet/intel/ice/ice_base.c
@@ -130,8 +130,7 @@ static int ice_vsi_alloc_q_vector(struct ice_vsi *vsi, u16 v_idx)
 	 * handler here (i.e. resume, reset/rebuild, etc.)
 	 */
 	if (vsi->netdev)
-		netif_napi_add(vsi->netdev, &q_vector->napi, ice_napi_poll,
-			       NAPI_POLL_WEIGHT);
+		netif_napi_add(vsi->netdev, &q_vector->napi, ice_napi_poll);
 
 out:
 	/* tie q_vector and VSI together */
diff --git a/drivers/net/ethernet/intel/ice/ice_eswitch.c b/drivers/net/ethernet/intel/ice/ice_eswitch.c
index e35371e61e07..f9f15acae90a 100644
--- a/drivers/net/ethernet/intel/ice/ice_eswitch.c
+++ b/drivers/net/ethernet/intel/ice/ice_eswitch.c
@@ -292,8 +292,8 @@ static int ice_eswitch_setup_reprs(struct ice_pf *pf)
 		if (max_vsi_num < vsi->vsi_num)
 			max_vsi_num = vsi->vsi_num;
 
-		netif_napi_add(vf->repr->netdev, &vf->repr->q_vector->napi, ice_napi_poll,
-			       NAPI_POLL_WEIGHT);
+		netif_napi_add(vf->repr->netdev, &vf->repr->q_vector->napi,
+			       ice_napi_poll);
 
 		netif_keep_dst(vf->repr->netdev);
 	}
diff --git a/drivers/net/ethernet/intel/ice/ice_main.c b/drivers/net/ethernet/intel/ice/ice_main.c
index a015af82e437..415b4c2f518b 100644
--- a/drivers/net/ethernet/intel/ice/ice_main.c
+++ b/drivers/net/ethernet/intel/ice/ice_main.c
@@ -3309,7 +3309,7 @@ static void ice_napi_add(struct ice_vsi *vsi)
 
 	ice_for_each_q_vector(vsi, v_idx)
 		netif_napi_add(vsi->netdev, &vsi->q_vectors[v_idx]->napi,
-			       ice_napi_poll, NAPI_POLL_WEIGHT);
+			       ice_napi_poll);
 }
 
 /**
diff --git a/drivers/net/ethernet/intel/igb/igb_main.c b/drivers/net/ethernet/intel/igb/igb_main.c
index 4e65ffe3f4e3..ec74271b265b 100644
--- a/drivers/net/ethernet/intel/igb/igb_main.c
+++ b/drivers/net/ethernet/intel/igb/igb_main.c
@@ -1213,8 +1213,7 @@ static int igb_alloc_q_vector(struct igb_adapter *adapter,
 		return -ENOMEM;
 
 	/* initialize NAPI */
-	netif_napi_add(adapter->netdev, &q_vector->napi,
-		       igb_poll, 64);
+	netif_napi_add(adapter->netdev, &q_vector->napi, igb_poll);
 
 	/* tie q_vector and adapter together */
 	adapter->q_vector[v_idx] = q_vector;
diff --git a/drivers/net/ethernet/intel/igbvf/netdev.c b/drivers/net/ethernet/intel/igbvf/netdev.c
index bf7738a04bf1..f4ecee6a003e 100644
--- a/drivers/net/ethernet/intel/igbvf/netdev.c
+++ b/drivers/net/ethernet/intel/igbvf/netdev.c
@@ -1110,7 +1110,7 @@ static int igbvf_alloc_queues(struct igbvf_adapter *adapter)
 		return -ENOMEM;
 	}
 
-	netif_napi_add(netdev, &adapter->rx_ring->napi, igbvf_poll, 64);
+	netif_napi_add(netdev, &adapter->rx_ring->napi, igbvf_poll);
 
 	return 0;
 }
diff --git a/drivers/net/ethernet/intel/igc/igc_main.c b/drivers/net/ethernet/intel/igc/igc_main.c
index 70fcf39f8c57..bcd50428b1cf 100644
--- a/drivers/net/ethernet/intel/igc/igc_main.c
+++ b/drivers/net/ethernet/intel/igc/igc_main.c
@@ -4358,8 +4358,7 @@ static int igc_alloc_q_vector(struct igc_adapter *adapter,
 		return -ENOMEM;
 
 	/* initialize NAPI */
-	netif_napi_add(adapter->netdev, &q_vector->napi,
-		       igc_poll, 64);
+	netif_napi_add(adapter->netdev, &q_vector->napi, igc_poll);
 
 	/* tie q_vector and adapter together */
 	adapter->q_vector[v_idx] = q_vector;
diff --git a/drivers/net/ethernet/intel/ixgb/ixgb_main.c b/drivers/net/ethernet/intel/ixgb/ixgb_main.c
index 51459da213bc..1bc14b4186ad 100644
--- a/drivers/net/ethernet/intel/ixgb/ixgb_main.c
+++ b/drivers/net/ethernet/intel/ixgb/ixgb_main.c
@@ -432,7 +432,7 @@ ixgb_probe(struct pci_dev *pdev, const struct pci_device_id *ent)
 	netdev->netdev_ops = &ixgb_netdev_ops;
 	ixgb_set_ethtool_ops(netdev);
 	netdev->watchdog_timeo = 5 * HZ;
-	netif_napi_add(netdev, &adapter->napi, ixgb_clean, 64);
+	netif_napi_add(netdev, &adapter->napi, ixgb_clean);
 
 	strncpy(netdev->name, pci_name(pdev), sizeof(netdev->name) - 1);
 
diff --git a/drivers/net/ethernet/intel/ixgbe/ixgbe_lib.c b/drivers/net/ethernet/intel/ixgbe/ixgbe_lib.c
index 86b11164655e..f8156fe4b1dc 100644
--- a/drivers/net/ethernet/intel/ixgbe/ixgbe_lib.c
+++ b/drivers/net/ethernet/intel/ixgbe/ixgbe_lib.c
@@ -874,8 +874,7 @@ static int ixgbe_alloc_q_vector(struct ixgbe_adapter *adapter,
 
 #endif
 	/* initialize NAPI */
-	netif_napi_add(adapter->netdev, &q_vector->napi,
-		       ixgbe_poll, 64);
+	netif_napi_add(adapter->netdev, &q_vector->napi, ixgbe_poll);
 
 	/* tie q_vector and adapter together */
 	adapter->q_vector[v_idx] = q_vector;
diff --git a/drivers/net/ethernet/intel/ixgbevf/ixgbevf_main.c b/drivers/net/ethernet/intel/ixgbevf/ixgbevf_main.c
index 91606c9d2ece..a769683e61f6 100644
--- a/drivers/net/ethernet/intel/ixgbevf/ixgbevf_main.c
+++ b/drivers/net/ethernet/intel/ixgbevf/ixgbevf_main.c
@@ -2722,7 +2722,7 @@ static int ixgbevf_alloc_q_vector(struct ixgbevf_adapter *adapter, int v_idx,
 		return -ENOMEM;
 
 	/* initialize NAPI */
-	netif_napi_add(adapter->netdev, &q_vector->napi, ixgbevf_poll, 64);
+	netif_napi_add(adapter->netdev, &q_vector->napi, ixgbevf_poll);
 
 	/* tie q_vector and adapter together */
 	adapter->q_vector[v_idx] = q_vector;
* Unmerged path drivers/net/ethernet/jme.c
diff --git a/drivers/net/ethernet/korina.c b/drivers/net/ethernet/korina.c
index f98d9d627c71..464e35ab1151 100644
--- a/drivers/net/ethernet/korina.c
+++ b/drivers/net/ethernet/korina.c
@@ -1087,7 +1087,7 @@ static int korina_probe(struct platform_device *pdev)
 	dev->netdev_ops = &korina_netdev_ops;
 	dev->ethtool_ops = &netdev_ethtool_ops;
 	dev->watchdog_timeo = TX_TIMEOUT;
-	netif_napi_add(dev, &lp->napi, korina_poll, NAPI_POLL_WEIGHT);
+	netif_napi_add(dev, &lp->napi, korina_poll);
 
 	lp->phy_addr = (((lp->rx_irq == 0x2c? 1:0) << 8) | 0x05);
 	lp->mii_if.dev = dev;
* Unmerged path drivers/net/ethernet/lantiq_xrx200.c
diff --git a/drivers/net/ethernet/marvell/mv643xx_eth.c b/drivers/net/ethernet/marvell/mv643xx_eth.c
index 2780b5165ccb..3aa5653d1199 100644
--- a/drivers/net/ethernet/marvell/mv643xx_eth.c
+++ b/drivers/net/ethernet/marvell/mv643xx_eth.c
@@ -3185,7 +3185,7 @@ static int mv643xx_eth_probe(struct platform_device *pdev)
 
 	INIT_WORK(&mp->tx_timeout_task, tx_timeout_task);
 
-	netif_napi_add(dev, &mp->napi, mv643xx_eth_poll, NAPI_POLL_WEIGHT);
+	netif_napi_add(dev, &mp->napi, mv643xx_eth_poll);
 
 	timer_setup(&mp->rx_oom, oom_timer_wrapper, 0);
 
diff --git a/drivers/net/ethernet/marvell/mvneta.c b/drivers/net/ethernet/marvell/mvneta.c
index 0adf25ced32f..5584fb3d2e1d 100644
--- a/drivers/net/ethernet/marvell/mvneta.c
+++ b/drivers/net/ethernet/marvell/mvneta.c
@@ -4500,14 +4500,13 @@ static int mvneta_probe(struct platform_device *pdev)
 	 * operation, so only single NAPI should be initialized.
 	 */
 	if (pp->neta_armada3700) {
-		netif_napi_add(dev, &pp->napi, mvneta_poll, NAPI_POLL_WEIGHT);
+		netif_napi_add(dev, &pp->napi, mvneta_poll);
 	} else {
 		for_each_present_cpu(cpu) {
 			struct mvneta_pcpu_port *port =
 				per_cpu_ptr(pp->ports, cpu);
 
-			netif_napi_add(dev, &port->napi, mvneta_poll,
-				       NAPI_POLL_WEIGHT);
+			netif_napi_add(dev, &port->napi, mvneta_poll);
 			port->pp = pp;
 		}
 	}
diff --git a/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c b/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c
index 48deaf2ffa01..9fe0729de7f0 100644
--- a/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c
+++ b/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c
@@ -3883,8 +3883,7 @@ static int mvpp2_simple_queue_vectors_init(struct mvpp2_port *port,
 	v->irq = irq_of_parse_and_map(port_node, 0);
 	if (v->irq <= 0)
 		return -EINVAL;
-	netif_napi_add(port->dev, &v->napi, mvpp2_poll,
-		       NAPI_POLL_WEIGHT);
+	netif_napi_add(port->dev, &v->napi, mvpp2_poll);
 
 	port->nqvecs = 1;
 
@@ -3933,8 +3932,7 @@ static int mvpp2_multi_queue_vectors_init(struct mvpp2_port *port,
 			goto err;
 		}
 
-		netif_napi_add(port->dev, &v->napi, mvpp2_poll,
-			       NAPI_POLL_WEIGHT);
+		netif_napi_add(port->dev, &v->napi, mvpp2_poll);
 	}
 
 	return 0;
* Unmerged path drivers/net/ethernet/marvell/octeon_ep/octep_main.c
* Unmerged path drivers/net/ethernet/marvell/octeontx2/nic/otx2_pf.c
* Unmerged path drivers/net/ethernet/marvell/prestera/prestera_rxtx.c
* Unmerged path drivers/net/ethernet/marvell/skge.c
* Unmerged path drivers/net/ethernet/marvell/sky2.c
* Unmerged path drivers/net/ethernet/mediatek/mtk_eth_soc.c
* Unmerged path drivers/net/ethernet/mediatek/mtk_star_emac.c
diff --git a/drivers/net/ethernet/mellanox/mlx4/en_cq.c b/drivers/net/ethernet/mellanox/mlx4/en_cq.c
index d5fc72b1a36f..333759921ba6 100644
--- a/drivers/net/ethernet/mellanox/mlx4/en_cq.c
+++ b/drivers/net/ethernet/mellanox/mlx4/en_cq.c
@@ -153,7 +153,7 @@ int mlx4_en_activate_cq(struct mlx4_en_priv *priv, struct mlx4_en_cq *cq,
 		break;
 	case RX:
 		cq->mcq.comp = mlx4_en_rx_irq;
-		netif_napi_add(cq->dev, &cq->napi, mlx4_en_poll_rx_cq, 64);
+		netif_napi_add(cq->dev, &cq->napi, mlx4_en_poll_rx_cq);
 		napi_enable(&cq->napi);
 		break;
 	case TX_XDP:
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en/ptp.c b/drivers/net/ethernet/mellanox/mlx5/core/en/ptp.c
index 047f88f09203..135ee1e8ac8c 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en/ptp.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en/ptp.c
@@ -690,7 +690,7 @@ int mlx5e_ptp_open(struct mlx5e_priv *priv, struct mlx5e_params *params,
 	if (err)
 		goto err_free;
 
-	netif_napi_add(netdev, &c->napi, mlx5e_ptp_napi_poll, 64);
+	netif_napi_add(netdev, &c->napi, mlx5e_ptp_napi_poll);
 
 	mlx5e_ptp_build_params(c, cparams, params);
 
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en/trap.c b/drivers/net/ethernet/mellanox/mlx5/core/en/trap.c
index 11f2a7fb72a9..5b63f3189704 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en/trap.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en/trap.c
@@ -147,7 +147,7 @@ static struct mlx5e_trap *mlx5e_open_trap(struct mlx5e_priv *priv)
 	t->mkey_be  = cpu_to_be32(priv->mdev->mlx5e_res.hw_objs.mkey);
 	t->stats    = &priv->trap_stats.ch;
 
-	netif_napi_add(netdev, &t->napi, mlx5e_trap_napi_poll, 64);
+	netif_napi_add(netdev, &t->napi, mlx5e_trap_napi_poll);
 
 	err = mlx5e_open_trap_rq(priv, t);
 	if (unlikely(err))
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en_main.c b/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
index 22f111312bee..88ccbf238db0 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
@@ -2272,7 +2272,7 @@ static int mlx5e_open_channel(struct mlx5e_priv *priv, int ix,
 	c->aff_mask = irq_get_effective_affinity_mask(irq);
 	c->lag_port = mlx5e_enumerate_lag_port(priv->mdev, ix);
 
-	netif_napi_add(netdev, &c->napi, mlx5e_napi_poll, 64);
+	netif_napi_add(netdev, &c->napi, mlx5e_napi_poll);
 
 	err = mlx5e_open_queues(c, params, cparam);
 	if (unlikely(err))
diff --git a/drivers/net/ethernet/mellanox/mlxbf_gige/mlxbf_gige_main.c b/drivers/net/ethernet/mellanox/mlxbf_gige/mlxbf_gige_main.c
index a0a059e0154f..28fbed616bf9 100644
--- a/drivers/net/ethernet/mellanox/mlxbf_gige/mlxbf_gige_main.c
+++ b/drivers/net/ethernet/mellanox/mlxbf_gige/mlxbf_gige_main.c
@@ -151,7 +151,7 @@ static int mlxbf_gige_open(struct net_device *netdev)
 
 	phy_start(phydev);
 
-	netif_napi_add(netdev, &priv->napi, mlxbf_gige_poll, NAPI_POLL_WEIGHT);
+	netif_napi_add(netdev, &priv->napi, mlxbf_gige_poll);
 	napi_enable(&priv->napi);
 	netif_start_queue(netdev);
 
* Unmerged path drivers/net/ethernet/microchip/lan743x_main.c
* Unmerged path drivers/net/ethernet/microchip/lan966x/lan966x_fdma.c
diff --git a/drivers/net/ethernet/natsemi/natsemi.c b/drivers/net/ethernet/natsemi/natsemi.c
index 04f2d7b88f15..788405fc4445 100644
--- a/drivers/net/ethernet/natsemi/natsemi.c
+++ b/drivers/net/ethernet/natsemi/natsemi.c
@@ -867,7 +867,7 @@ static int natsemi_probe1(struct pci_dev *pdev, const struct pci_device_id *ent)
 	np = netdev_priv(dev);
 	np->ioaddr = ioaddr;
 
-	netif_napi_add(dev, &np->napi, natsemi_poll, 64);
+	netif_napi_add(dev, &np->napi, natsemi_poll);
 	np->dev = dev;
 
 	np->pci_dev = pdev;
diff --git a/drivers/net/ethernet/neterion/s2io.c b/drivers/net/ethernet/neterion/s2io.c
index b4f4a86a3032..64dd4e644177 100644
--- a/drivers/net/ethernet/neterion/s2io.c
+++ b/drivers/net/ethernet/neterion/s2io.c
@@ -7918,10 +7918,10 @@ s2io_init_nic(struct pci_dev *pdev, const struct pci_device_id *pre)
 		for (i = 0; i < config->rx_ring_num ; i++) {
 			struct ring_info *ring = &mac_control->rings[i];
 
-			netif_napi_add(dev, &ring->napi, s2io_poll_msix, 64);
+			netif_napi_add(dev, &ring->napi, s2io_poll_msix);
 		}
 	} else {
-		netif_napi_add(dev, &sp->napi, s2io_poll_inta, 64);
+		netif_napi_add(dev, &sp->napi, s2io_poll_inta);
 	}
 
 	/* Not needed for Herc */
* Unmerged path drivers/net/ethernet/netronome/nfp/nfp_net_common.c
* Unmerged path drivers/net/ethernet/ni/nixge.c
diff --git a/drivers/net/ethernet/nvidia/forcedeth.c b/drivers/net/ethernet/nvidia/forcedeth.c
index 94ee0ffa8c63..6c662cd5d9e9 100644
--- a/drivers/net/ethernet/nvidia/forcedeth.c
+++ b/drivers/net/ethernet/nvidia/forcedeth.c
@@ -5807,7 +5807,7 @@ static int nv_probe(struct pci_dev *pci_dev, const struct pci_device_id *id)
 	else
 		dev->netdev_ops = &nv_netdev_ops_optimized;
 
-	netif_napi_add(dev, &np->napi, nv_napi_poll, NAPI_POLL_WEIGHT);
+	netif_napi_add(dev, &np->napi, nv_napi_poll);
 	dev->ethtool_ops = &ops;
 	dev->watchdog_timeo = NV_WATCHDOG_TIMEO;
 
* Unmerged path drivers/net/ethernet/oki-semi/pch_gbe/pch_gbe_main.c
diff --git a/drivers/net/ethernet/pasemi/pasemi_mac.c b/drivers/net/ethernet/pasemi/pasemi_mac.c
index 8a31a02c9f47..d8a062eaeaba 100644
--- a/drivers/net/ethernet/pasemi/pasemi_mac.c
+++ b/drivers/net/ethernet/pasemi/pasemi_mac.c
@@ -1705,7 +1705,7 @@ pasemi_mac_probe(struct pci_dev *pdev, const struct pci_device_id *ent)
 	mac->pdev = pdev;
 	mac->netdev = dev;
 
-	netif_napi_add(dev, &mac->napi, pasemi_mac_poll, 64);
+	netif_napi_add(dev, &mac->napi, pasemi_mac_poll);
 
 	dev->features = NETIF_F_IP_CSUM | NETIF_F_LLTX | NETIF_F_SG |
 			NETIF_F_HIGHDMA | NETIF_F_GSO;
diff --git a/drivers/net/ethernet/pensando/ionic/ionic_lif.c b/drivers/net/ethernet/pensando/ionic/ionic_lif.c
index ab27ddf10e15..6cd633855db5 100644
--- a/drivers/net/ethernet/pensando/ionic/ionic_lif.c
+++ b/drivers/net/ethernet/pensando/ionic/ionic_lif.c
@@ -774,8 +774,7 @@ static int ionic_lif_txq_init(struct ionic_lif *lif, struct ionic_qcq *qcq)
 	dev_dbg(dev, "txq->hw_index %d\n", q->hw_index);
 
 	if (test_bit(IONIC_LIF_F_SPLIT_INTR, lif->state))
-		netif_napi_add(lif->netdev, &qcq->napi, ionic_tx_napi,
-			       NAPI_POLL_WEIGHT);
+		netif_napi_add(lif->netdev, &qcq->napi, ionic_tx_napi);
 
 	qcq->flags |= IONIC_QCQ_F_INITED;
 
@@ -830,11 +829,9 @@ static int ionic_lif_rxq_init(struct ionic_lif *lif, struct ionic_qcq *qcq)
 	dev_dbg(dev, "rxq->hw_index %d\n", q->hw_index);
 
 	if (test_bit(IONIC_LIF_F_SPLIT_INTR, lif->state))
-		netif_napi_add(lif->netdev, &qcq->napi, ionic_rx_napi,
-			       NAPI_POLL_WEIGHT);
+		netif_napi_add(lif->netdev, &qcq->napi, ionic_rx_napi);
 	else
-		netif_napi_add(lif->netdev, &qcq->napi, ionic_txrx_napi,
-			       NAPI_POLL_WEIGHT);
+		netif_napi_add(lif->netdev, &qcq->napi, ionic_txrx_napi);
 
 	qcq->flags |= IONIC_QCQ_F_INITED;
 
@@ -2994,8 +2991,7 @@ static int ionic_lif_adminq_init(struct ionic_lif *lif)
 	dev_dbg(dev, "adminq->hw_type %d\n", q->hw_type);
 	dev_dbg(dev, "adminq->hw_index %d\n", q->hw_index);
 
-	netif_napi_add(lif->netdev, &qcq->napi, ionic_adminq_napi,
-		       NAPI_POLL_WEIGHT);
+	netif_napi_add(lif->netdev, &qcq->napi, ionic_adminq_napi);
 
 	napi_enable(&qcq->napi);
 
diff --git a/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c b/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c
index 8201d4138fa4..98606c8d11e1 100644
--- a/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c
+++ b/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c
@@ -192,8 +192,7 @@ netxen_napi_add(struct netxen_adapter *adapter, struct net_device *netdev)
 
 	for (ring = 0; ring < adapter->max_sds_rings; ring++) {
 		sds_ring = &recv_ctx->sds_rings[ring];
-		netif_napi_add(netdev, &sds_ring->napi,
-				netxen_nic_poll, NAPI_POLL_WEIGHT);
+		netif_napi_add(netdev, &sds_ring->napi, netxen_nic_poll);
 	}
 
 	return 0;
diff --git a/drivers/net/ethernet/qlogic/qede/qede_main.c b/drivers/net/ethernet/qlogic/qede/qede_main.c
index a294014158f2..01b17ed9c8da 100644
--- a/drivers/net/ethernet/qlogic/qede/qede_main.c
+++ b/drivers/net/ethernet/qlogic/qede/qede_main.c
@@ -1918,8 +1918,7 @@ static void qede_napi_add_enable(struct qede_dev *edev)
 
 	/* Add NAPI objects */
 	for_each_queue(i) {
-		netif_napi_add(edev->ndev, &edev->fp_array[i].napi,
-			       qede_poll, NAPI_POLL_WEIGHT);
+		netif_napi_add(edev->ndev, &edev->fp_array[i].napi, qede_poll);
 		napi_enable(&edev->fp_array[i].napi);
 	}
 }
diff --git a/drivers/net/ethernet/qlogic/qla3xxx.c b/drivers/net/ethernet/qlogic/qla3xxx.c
index 81dff2dd3d4d..4c72d00ec3b3 100644
--- a/drivers/net/ethernet/qlogic/qla3xxx.c
+++ b/drivers/net/ethernet/qlogic/qla3xxx.c
@@ -3842,7 +3842,7 @@ static int ql3xxx_probe(struct pci_dev *pdev,
 	ndev->ethtool_ops = &ql3xxx_ethtool_ops;
 	ndev->watchdog_timeo = 5 * HZ;
 
-	netif_napi_add(ndev, &qdev->napi, ql_poll, 64);
+	netif_napi_add(ndev, &qdev->napi, ql_poll);
 
 	ndev->irq = pdev->irq;
 
diff --git a/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c b/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c
index faa324a75890..81f5f690d3f0 100644
--- a/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c
+++ b/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c
@@ -1583,17 +1583,15 @@ int qlcnic_82xx_napi_add(struct qlcnic_adapter *adapter,
 		sds_ring = &recv_ctx->sds_rings[ring];
 		if (qlcnic_check_multi_tx(adapter) &&
 		    !adapter->ahw->diag_test) {
-			netif_napi_add(netdev, &sds_ring->napi, qlcnic_rx_poll,
-				       NAPI_POLL_WEIGHT);
+			netif_napi_add(netdev, &sds_ring->napi,
+				       qlcnic_rx_poll);
 		} else {
 			if (ring == (adapter->drv_sds_rings - 1))
 				netif_napi_add(netdev, &sds_ring->napi,
-					       qlcnic_poll,
-					       NAPI_POLL_WEIGHT);
+					       qlcnic_poll);
 			else
 				netif_napi_add(netdev, &sds_ring->napi,
-					       qlcnic_rx_poll,
-					       NAPI_POLL_WEIGHT);
+					       qlcnic_rx_poll);
 		}
 	}
 
@@ -2112,17 +2110,14 @@ int qlcnic_83xx_napi_add(struct qlcnic_adapter *adapter,
 		if (adapter->flags & QLCNIC_MSIX_ENABLED) {
 			if (!(adapter->flags & QLCNIC_TX_INTR_SHARED))
 				netif_napi_add(netdev, &sds_ring->napi,
-					       qlcnic_83xx_rx_poll,
-					       NAPI_POLL_WEIGHT);
+					       qlcnic_83xx_rx_poll);
 			else
 				netif_napi_add(netdev, &sds_ring->napi,
-					       qlcnic_83xx_msix_sriov_vf_poll,
-					       NAPI_POLL_WEIGHT);
+					       qlcnic_83xx_msix_sriov_vf_poll);
 
 		} else {
 			netif_napi_add(netdev, &sds_ring->napi,
-				       qlcnic_83xx_poll,
-				       NAPI_POLL_WEIGHT);
+				       qlcnic_83xx_poll);
 		}
 	}
 
* Unmerged path drivers/net/ethernet/qlogic/qlge/qlge_main.c
diff --git a/drivers/net/ethernet/qualcomm/emac/emac.c b/drivers/net/ethernet/qualcomm/emac/emac.c
index 20aca69bc42c..c8b15fb9fc9d 100644
--- a/drivers/net/ethernet/qualcomm/emac/emac.c
+++ b/drivers/net/ethernet/qualcomm/emac/emac.c
@@ -700,8 +700,7 @@ static int emac_probe(struct platform_device *pdev)
 	/* Initialize queues */
 	emac_mac_rx_tx_ring_init_all(pdev, adpt);
 
-	netif_napi_add(netdev, &adpt->rx_q.napi, emac_napi_rtx,
-		       NAPI_POLL_WEIGHT);
+	netif_napi_add(netdev, &adpt->rx_q.napi, emac_napi_rtx);
 
 	ret = register_netdev(netdev);
 	if (ret) {
diff --git a/drivers/net/ethernet/rdc/r6040.c b/drivers/net/ethernet/rdc/r6040.c
index 25b4c8152b43..dd54efa42e06 100644
--- a/drivers/net/ethernet/rdc/r6040.c
+++ b/drivers/net/ethernet/rdc/r6040.c
@@ -1137,7 +1137,7 @@ static int r6040_init_one(struct pci_dev *pdev, const struct pci_device_id *ent)
 	dev->ethtool_ops = &netdev_ethtool_ops;
 	dev->watchdog_timeo = TX_TIMEOUT;
 
-	netif_napi_add(dev, &lp->napi, r6040_poll, 64);
+	netif_napi_add(dev, &lp->napi, r6040_poll);
 
 	lp->mii_bus = mdiobus_alloc();
 	if (!lp->mii_bus) {
diff --git a/drivers/net/ethernet/realtek/8139too.c b/drivers/net/ethernet/realtek/8139too.c
index a481c12b8ce8..c5a739c142da 100644
--- a/drivers/net/ethernet/realtek/8139too.c
+++ b/drivers/net/ethernet/realtek/8139too.c
@@ -1000,7 +1000,7 @@ static int rtl8139_init_one(struct pci_dev *pdev,
 	dev->netdev_ops = &rtl8139_netdev_ops;
 	dev->ethtool_ops = &rtl8139_ethtool_ops;
 	dev->watchdog_timeo = TX_TIMEOUT;
-	netif_napi_add(dev, &tp->napi, rtl8139_poll, 64);
+	netif_napi_add(dev, &tp->napi, rtl8139_poll);
 
 	/* note: the hardware is not capable of sg/csum/highdma, however
 	 * through the use of skb_copy_and_csum_dev we enable these
diff --git a/drivers/net/ethernet/realtek/r8169_main.c b/drivers/net/ethernet/realtek/r8169_main.c
index a84850d8a7f6..d152dd56113e 100644
--- a/drivers/net/ethernet/realtek/r8169_main.c
+++ b/drivers/net/ethernet/realtek/r8169_main.c
@@ -5383,7 +5383,7 @@ static int rtl_init_one(struct pci_dev *pdev, const struct pci_device_id *ent)
 
 	dev->ethtool_ops = &rtl8169_ethtool_ops;
 
-	netif_napi_add(dev, &tp->napi, rtl8169_poll, NAPI_POLL_WEIGHT);
+	netif_napi_add(dev, &tp->napi, rtl8169_poll);
 
 	dev->hw_features = NETIF_F_IP_CSUM | NETIF_F_RXCSUM |
 			   NETIF_F_HW_VLAN_CTAG_TX | NETIF_F_HW_VLAN_CTAG_RX;
* Unmerged path drivers/net/ethernet/renesas/ravb_main.c
diff --git a/drivers/net/ethernet/renesas/sh_eth.c b/drivers/net/ethernet/renesas/sh_eth.c
index c56c7a5be6af..66a6b6ab6ef4 100644
--- a/drivers/net/ethernet/renesas/sh_eth.c
+++ b/drivers/net/ethernet/renesas/sh_eth.c
@@ -3291,7 +3291,7 @@ static int sh_eth_drv_probe(struct platform_device *pdev)
 		goto out_release;
 	}
 
-	netif_napi_add(ndev, &mdp->napi, sh_eth_poll, 64);
+	netif_napi_add(ndev, &mdp->napi, sh_eth_poll);
 
 	/* network device register */
 	ret = register_netdev(ndev);
* Unmerged path drivers/net/ethernet/rocker/rocker_main.c
diff --git a/drivers/net/ethernet/samsung/sxgbe/sxgbe_main.c b/drivers/net/ethernet/samsung/sxgbe/sxgbe_main.c
index 340a334207f5..53d27f76e122 100644
--- a/drivers/net/ethernet/samsung/sxgbe/sxgbe_main.c
+++ b/drivers/net/ethernet/samsung/sxgbe/sxgbe_main.c
@@ -2138,7 +2138,7 @@ struct sxgbe_priv_data *sxgbe_drv_probe(struct device *device,
 		pr_info("Enable RX Mitigation via HW Watchdog Timer\n");
 	}
 
-	netif_napi_add(ndev, &priv->napi, sxgbe_poll, 64);
+	netif_napi_add(ndev, &priv->napi, sxgbe_poll);
 
 	spin_lock_init(&priv->stats_lock);
 
diff --git a/drivers/net/ethernet/sfc/ef100_rep.c b/drivers/net/ethernet/sfc/ef100_rep.c
index 73ae4656a6e7..91d1a0d4bc6b 100644
--- a/drivers/net/ethernet/sfc/ef100_rep.c
+++ b/drivers/net/ethernet/sfc/ef100_rep.c
@@ -42,8 +42,7 @@ static int efx_ef100_rep_open(struct net_device *net_dev)
 {
 	struct efx_rep *efv = netdev_priv(net_dev);
 
-	netif_napi_add(net_dev, &efv->napi, efx_ef100_rep_poll,
-		       NAPI_POLL_WEIGHT);
+	netif_napi_add(net_dev, &efv->napi, efx_ef100_rep_poll);
 	napi_enable(&efv->napi);
 	return 0;
 }
diff --git a/drivers/net/ethernet/sfc/efx_channels.c b/drivers/net/ethernet/sfc/efx_channels.c
index af8241f0d491..db07f7edc045 100644
--- a/drivers/net/ethernet/sfc/efx_channels.c
+++ b/drivers/net/ethernet/sfc/efx_channels.c
@@ -1312,7 +1312,7 @@ void efx_init_napi_channel(struct efx_channel *channel)
 	struct efx_nic *efx = channel->efx;
 
 	channel->napi_dev = efx->net_dev;
-	netif_napi_add(channel->napi_dev, &channel->napi_str, efx_poll, 64);
+	netif_napi_add(channel->napi_dev, &channel->napi_str, efx_poll);
 }
 
 void efx_init_napi(struct efx_nic *efx)
* Unmerged path drivers/net/ethernet/sfc/falcon/efx.c
diff --git a/drivers/net/ethernet/sfc/siena/efx_channels.c b/drivers/net/ethernet/sfc/siena/efx_channels.c
index f54ebd007286..06ed74994e36 100644
--- a/drivers/net/ethernet/sfc/siena/efx_channels.c
+++ b/drivers/net/ethernet/sfc/siena/efx_channels.c
@@ -1317,7 +1317,7 @@ static void efx_init_napi_channel(struct efx_channel *channel)
 	struct efx_nic *efx = channel->efx;
 
 	channel->napi_dev = efx->net_dev;
-	netif_napi_add(channel->napi_dev, &channel->napi_str, efx_poll, 64);
+	netif_napi_add(channel->napi_dev, &channel->napi_str, efx_poll);
 }
 
 void efx_siena_init_napi(struct efx_nic *efx)
diff --git a/drivers/net/ethernet/smsc/epic100.c b/drivers/net/ethernet/smsc/epic100.c
index 4a570f8f2b1e..90e66a1d5260 100644
--- a/drivers/net/ethernet/smsc/epic100.c
+++ b/drivers/net/ethernet/smsc/epic100.c
@@ -479,7 +479,7 @@ static int epic_init_one(struct pci_dev *pdev, const struct pci_device_id *ent)
 	dev->netdev_ops = &epic_netdev_ops;
 	dev->ethtool_ops = &netdev_ethtool_ops;
 	dev->watchdog_timeo = TX_TIMEOUT;
-	netif_napi_add(dev, &ep->napi, epic_poll, 64);
+	netif_napi_add(dev, &ep->napi, epic_poll);
 
 	ret = register_netdev(dev);
 	if (ret < 0)
diff --git a/drivers/net/ethernet/smsc/smsc9420.c b/drivers/net/ethernet/smsc/smsc9420.c
index 2618c45b7920..7f97fc0104c6 100644
--- a/drivers/net/ethernet/smsc/smsc9420.c
+++ b/drivers/net/ethernet/smsc/smsc9420.c
@@ -1618,7 +1618,7 @@ smsc9420_probe(struct pci_dev *pdev, const struct pci_device_id *id)
 	dev->netdev_ops = &smsc9420_netdev_ops;
 	dev->ethtool_ops = &smsc9420_ethtool_ops;
 
-	netif_napi_add(dev, &pd->napi, smsc9420_rx_poll, NAPI_POLL_WEIGHT);
+	netif_napi_add(dev, &pd->napi, smsc9420_rx_poll);
 
 	result = register_netdev(dev);
 	if (result) {
* Unmerged path drivers/net/ethernet/socionext/netsec.c
* Unmerged path drivers/net/ethernet/socionext/sni_ave.c
* Unmerged path drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
diff --git a/drivers/net/ethernet/sun/cassini.c b/drivers/net/ethernet/sun/cassini.c
index ef5ea865fc96..5cfc2accea08 100644
--- a/drivers/net/ethernet/sun/cassini.c
+++ b/drivers/net/ethernet/sun/cassini.c
@@ -5105,7 +5105,7 @@ static int cas_init_one(struct pci_dev *pdev, const struct pci_device_id *ent)
 	dev->watchdog_timeo = CAS_TX_TIMEOUT;
 
 #ifdef USE_NAPI
-	netif_napi_add(dev, &cp->napi, cas_poll, 64);
+	netif_napi_add(dev, &cp->napi, cas_poll);
 #endif
 	dev->irq = pdev->irq;
 	dev->dma = 0;
diff --git a/drivers/net/ethernet/sun/ldmvsw.c b/drivers/net/ethernet/sun/ldmvsw.c
index d42f47f6c632..706ea00a9e14 100644
--- a/drivers/net/ethernet/sun/ldmvsw.c
+++ b/drivers/net/ethernet/sun/ldmvsw.c
@@ -358,8 +358,7 @@ static int vsw_port_probe(struct vio_dev *vdev, const struct vio_device_id *id)
 
 	dev_set_drvdata(&vdev->dev, port);
 
-	netif_napi_add(dev, &port->napi, sunvnet_poll_common,
-		       NAPI_POLL_WEIGHT);
+	netif_napi_add(dev, &port->napi, sunvnet_poll_common);
 
 	spin_lock_irqsave(&vp->lock, flags);
 	list_add_rcu(&port->list, &vp->port_list);
diff --git a/drivers/net/ethernet/sun/niu.c b/drivers/net/ethernet/sun/niu.c
index 120a932ae896..c24e1f18378c 100644
--- a/drivers/net/ethernet/sun/niu.c
+++ b/drivers/net/ethernet/sun/niu.c
@@ -9098,7 +9098,7 @@ static int niu_ldg_init(struct niu *np)
 	for (i = 0; i < np->num_ldg; i++) {
 		struct niu_ldg *lp = &np->ldg[i];
 
-		netif_napi_add(np->dev, &lp->napi, niu_poll, 64);
+		netif_napi_add(np->dev, &lp->napi, niu_poll);
 
 		lp->np = np;
 		lp->ldg_num = ldg_num_map[i];
diff --git a/drivers/net/ethernet/sun/sungem.c b/drivers/net/ethernet/sun/sungem.c
index be0f868a619b..788e0ff6d48b 100644
--- a/drivers/net/ethernet/sun/sungem.c
+++ b/drivers/net/ethernet/sun/sungem.c
@@ -2978,7 +2978,7 @@ static int gem_init_one(struct pci_dev *pdev, const struct pci_device_id *ent)
 		goto err_out_free_consistent;
 
 	dev->netdev_ops = &gem_netdev_ops;
-	netif_napi_add(dev, &gp->napi, gem_poll, 64);
+	netif_napi_add(dev, &gp->napi, gem_poll);
 	dev->ethtool_ops = &gem_ethtool_ops;
 	dev->watchdog_timeo = 5 * HZ;
 	dev->dma = 0;
diff --git a/drivers/net/ethernet/sun/sunvnet.c b/drivers/net/ethernet/sun/sunvnet.c
index 12539b357a78..a7d77a37dd97 100644
--- a/drivers/net/ethernet/sun/sunvnet.c
+++ b/drivers/net/ethernet/sun/sunvnet.c
@@ -466,8 +466,7 @@ static int vnet_port_probe(struct vio_dev *vdev, const struct vio_device_id *id)
 	if (err)
 		goto err_out_free_port;
 
-	netif_napi_add(port->vp->dev, &port->napi, sunvnet_poll_common,
-		       NAPI_POLL_WEIGHT);
+	netif_napi_add(port->vp->dev, &port->napi, sunvnet_poll_common);
 
 	INIT_HLIST_NODE(&port->hash);
 	INIT_LIST_HEAD(&port->list);
* Unmerged path drivers/net/ethernet/sunplus/spl2sw_driver.c
diff --git a/drivers/net/ethernet/synopsys/dwc-xlgmac-net.c b/drivers/net/ethernet/synopsys/dwc-xlgmac-net.c
index d693297d5f66..b6966ad5d25c 100644
--- a/drivers/net/ethernet/synopsys/dwc-xlgmac-net.c
+++ b/drivers/net/ethernet/synopsys/dwc-xlgmac-net.c
@@ -419,15 +419,14 @@ static void xlgmac_napi_enable(struct xlgmac_pdata *pdata, unsigned int add)
 		for (i = 0; i < pdata->channel_count; i++, channel++) {
 			if (add)
 				netif_napi_add(pdata->netdev, &channel->napi,
-					       xlgmac_one_poll,
-					       NAPI_POLL_WEIGHT);
+					       xlgmac_one_poll);
 
 			napi_enable(&channel->napi);
 		}
 	} else {
 		if (add)
 			netif_napi_add(pdata->netdev, &pdata->napi,
-				       xlgmac_all_poll, NAPI_POLL_WEIGHT);
+				       xlgmac_all_poll);
 
 		napi_enable(&pdata->napi);
 	}
diff --git a/drivers/net/ethernet/tehuti/tehuti.c b/drivers/net/ethernet/tehuti/tehuti.c
index bb73343e3881..0357ad96c207 100644
--- a/drivers/net/ethernet/tehuti/tehuti.c
+++ b/drivers/net/ethernet/tehuti/tehuti.c
@@ -2022,7 +2022,7 @@ bdx_probe(struct pci_dev *pdev, const struct pci_device_id *ent)
 		priv->nic = nic;
 		priv->msg_enable = BDX_DEF_MSG_ENABLE;
 
-		netif_napi_add(ndev, &priv->napi, bdx_poll, 64);
+		netif_napi_add(ndev, &priv->napi, bdx_poll);
 
 		if ((readl(nic->regs + FPGA_VER) & 0xFFF) == 308) {
 			DBG("HW statistics not supported\n");
* Unmerged path drivers/net/ethernet/ti/am65-cpsw-nuss.c
diff --git a/drivers/net/ethernet/ti/cpmac.c b/drivers/net/ethernet/ti/cpmac.c
index 2ea9805ff4a8..a09c2eeb2139 100644
--- a/drivers/net/ethernet/ti/cpmac.c
+++ b/drivers/net/ethernet/ti/cpmac.c
@@ -1132,7 +1132,7 @@ static int cpmac_probe(struct platform_device *pdev)
 	dev->netdev_ops = &cpmac_netdev_ops;
 	dev->ethtool_ops = &cpmac_ethtool_ops;
 
-	netif_napi_add(dev, &priv->napi, cpmac_poll, 64);
+	netif_napi_add(dev, &priv->napi, cpmac_poll);
 
 	spin_lock_init(&priv->lock);
 	spin_lock_init(&priv->rx_lock);
* Unmerged path drivers/net/ethernet/ti/cpsw.c
* Unmerged path drivers/net/ethernet/ti/cpsw_new.c
* Unmerged path drivers/net/ethernet/ti/davinci_emac.c
* Unmerged path drivers/net/ethernet/ti/netcp_core.c
diff --git a/drivers/net/ethernet/toshiba/ps3_gelic_net.c b/drivers/net/ethernet/toshiba/ps3_gelic_net.c
index 4b624357467b..184d7a310f31 100644
--- a/drivers/net/ethernet/toshiba/ps3_gelic_net.c
+++ b/drivers/net/ethernet/toshiba/ps3_gelic_net.c
@@ -1454,7 +1454,7 @@ static void gelic_ether_setup_netdev_ops(struct net_device *netdev,
 {
 	netdev->watchdog_timeo = GELIC_NET_WATCHDOG_TIMEOUT;
 	/* NAPI */
-	netif_napi_add(netdev, napi, gelic_net_poll, NAPI_POLL_WEIGHT);
+	netif_napi_add(netdev, napi, gelic_net_poll);
 	netdev->ethtool_ops = &gelic_ether_ethtool_ops;
 	netdev->netdev_ops = &gelic_netdevice_ops;
 }
* Unmerged path drivers/net/ethernet/toshiba/spider_net.c
diff --git a/drivers/net/ethernet/tundra/tsi108_eth.c b/drivers/net/ethernet/tundra/tsi108_eth.c
index edcd1e60b30d..02ab19b44465 100644
--- a/drivers/net/ethernet/tundra/tsi108_eth.c
+++ b/drivers/net/ethernet/tundra/tsi108_eth.c
@@ -1608,7 +1608,7 @@ tsi108_init_one(struct platform_device *pdev)
 	data->phy_type = einfo->phy_type;
 	data->irq_num = einfo->irq_num;
 	data->id = pdev->id;
-	netif_napi_add(dev, &data->napi, tsi108_poll, 64);
+	netif_napi_add(dev, &data->napi, tsi108_poll);
 	dev->netdev_ops = &tsi108_netdev_ops;
 	dev->ethtool_ops = &tsi108_ethtool_ops;
 
diff --git a/drivers/net/ethernet/via/via-rhine.c b/drivers/net/ethernet/via/via-rhine.c
index 7fe6d9ebf3af..69eab36da249 100644
--- a/drivers/net/ethernet/via/via-rhine.c
+++ b/drivers/net/ethernet/via/via-rhine.c
@@ -969,7 +969,7 @@ static int rhine_init_one_common(struct device *hwdev, u32 quirks,
 	dev->ethtool_ops = &netdev_ethtool_ops;
 	dev->watchdog_timeo = TX_TIMEOUT;
 
-	netif_napi_add(dev, &rp->napi, rhine_napipoll, 64);
+	netif_napi_add(dev, &rp->napi, rhine_napipoll);
 
 	if (rp->quirks & rqRhineI)
 		dev->features |= NETIF_F_SG|NETIF_F_HW_CSUM;
* Unmerged path drivers/net/ethernet/via/via-velocity.c
* Unmerged path drivers/net/ethernet/xilinx/xilinx_axienet_main.c
diff --git a/drivers/net/fjes/fjes_main.c b/drivers/net/fjes/fjes_main.c
index bcf21dfc6ce9..2c33ee5b9196 100644
--- a/drivers/net/fjes/fjes_main.c
+++ b/drivers/net/fjes/fjes_main.c
@@ -1329,7 +1329,7 @@ static int fjes_sw_init(struct fjes_adapter *adapter)
 {
 	struct net_device *netdev = adapter->netdev;
 
-	netif_napi_add(netdev, &adapter->napi, fjes_poll, 64);
+	netif_napi_add(netdev, &adapter->napi, fjes_poll);
 
 	return 0;
 }
diff --git a/drivers/net/hyperv/netvsc.c b/drivers/net/hyperv/netvsc.c
index ddf2f8837374..2252b524d7b8 100644
--- a/drivers/net/hyperv/netvsc.c
+++ b/drivers/net/hyperv/netvsc.c
@@ -1794,8 +1794,7 @@ struct netvsc_device *netvsc_device_add(struct hv_device *device,
 	}
 
 	/* Enable NAPI handler before init callbacks */
-	netif_napi_add(ndev, &net_device->chan_table[0].napi,
-		       netvsc_poll, NAPI_POLL_WEIGHT);
+	netif_napi_add(ndev, &net_device->chan_table[0].napi, netvsc_poll);
 
 	/* Open the channel */
 	device->channel->next_request_id_callback = vmbus_next_request_id;
diff --git a/drivers/net/hyperv/rndis_filter.c b/drivers/net/hyperv/rndis_filter.c
index fd8481a620d4..0a19b59eb2bb 100644
--- a/drivers/net/hyperv/rndis_filter.c
+++ b/drivers/net/hyperv/rndis_filter.c
@@ -1585,7 +1585,7 @@ struct netvsc_device *rndis_filter_device_add(struct hv_device *dev,
 
 	for (i = 1; i < net_device->num_chn; i++)
 		netif_napi_add(net, &net_device->chan_table[i].napi,
-			       netvsc_poll, NAPI_POLL_WEIGHT);
+			       netvsc_poll);
 
 	return net_device;
 
* Unmerged path drivers/net/ipa/gsi.c
diff --git a/drivers/net/thunderbolt.c b/drivers/net/thunderbolt.c
index 2c98b8e0de99..fb1ebf0156f2 100644
--- a/drivers/net/thunderbolt.c
+++ b/drivers/net/thunderbolt.c
@@ -1264,7 +1264,7 @@ static int tbnet_probe(struct tb_service *svc, const struct tb_service_id *id)
 	dev->features = dev->hw_features | NETIF_F_HIGHDMA;
 	dev->hard_header_len += sizeof(struct thunderbolt_ip_frame_header);
 
-	netif_napi_add(dev, &net->napi, tbnet_poll, NAPI_POLL_WEIGHT);
+	netif_napi_add(dev, &net->napi, tbnet_poll);
 
 	/* MTU range: 68 - 65522 */
 	dev->min_mtu = ETH_MIN_MTU;
* Unmerged path drivers/net/usb/lan78xx.c
diff --git a/drivers/net/veth.c b/drivers/net/veth.c
index f18a5116a159..5e6a63f7cf0d 100644
--- a/drivers/net/veth.c
+++ b/drivers/net/veth.c
@@ -1032,7 +1032,7 @@ static int veth_enable_xdp_range(struct net_device *dev, int start, int end,
 		struct veth_rq *rq = &priv->rq[i];
 
 		if (!napi_already_on)
-			netif_napi_add(dev, &rq->xdp_napi, veth_poll, NAPI_POLL_WEIGHT);
+			netif_napi_add(dev, &rq->xdp_napi, veth_poll);
 		err = xdp_rxq_info_reg(&rq->xdp_rxq, dev, i, rq->xdp_napi.napi_id);
 		if (err < 0)
 			goto err_rxq_reg;
@@ -1146,7 +1146,7 @@ static int veth_napi_enable_range(struct net_device *dev, int start, int end)
 	for (i = start; i < end; i++) {
 		struct veth_rq *rq = &priv->rq[i];
 
-		netif_napi_add(dev, &rq->xdp_napi, veth_poll, NAPI_POLL_WEIGHT);
+		netif_napi_add(dev, &rq->xdp_napi, veth_poll);
 	}
 
 	err = __veth_napi_enable_range(dev, start, end);
diff --git a/drivers/net/vmxnet3/vmxnet3_drv.c b/drivers/net/vmxnet3/vmxnet3_drv.c
index df3122080c9d..6aa665dcd263 100644
--- a/drivers/net/vmxnet3/vmxnet3_drv.c
+++ b/drivers/net/vmxnet3/vmxnet3_drv.c
@@ -3914,11 +3914,11 @@ vmxnet3_probe_device(struct pci_dev *pdev,
 		for (i = 0; i < adapter->num_rx_queues; i++) {
 			netif_napi_add(adapter->netdev,
 				       &adapter->rx_queue[i].napi,
-				       vmxnet3_poll_rx_only, 64);
+				       vmxnet3_poll_rx_only);
 		}
 	} else {
 		netif_napi_add(adapter->netdev, &adapter->rx_queue[0].napi,
-			       vmxnet3_poll, 64);
+			       vmxnet3_poll);
 	}
 
 	netif_set_real_num_tx_queues(adapter->netdev, adapter->num_tx_queues);
* Unmerged path drivers/net/wireguard/peer.c
diff --git a/drivers/net/wireless/ath/ath10k/pci.c b/drivers/net/wireless/ath/ath10k/pci.c
index bf1c938be7d0..a77cb79a7a54 100644
--- a/drivers/net/wireless/ath/ath10k/pci.c
+++ b/drivers/net/wireless/ath/ath10k/pci.c
@@ -3215,8 +3215,7 @@ static void ath10k_pci_free_irq(struct ath10k *ar)
 
 void ath10k_pci_init_napi(struct ath10k *ar)
 {
-	netif_napi_add(&ar->napi_dev, &ar->napi, ath10k_pci_napi_poll,
-		       NAPI_POLL_WEIGHT);
+	netif_napi_add(&ar->napi_dev, &ar->napi, ath10k_pci_napi_poll);
 }
 
 static int ath10k_pci_init_irq(struct ath10k *ar)
diff --git a/drivers/net/wireless/ath/ath10k/sdio.c b/drivers/net/wireless/ath/ath10k/sdio.c
index 9162b02b7211..2116650937ec 100644
--- a/drivers/net/wireless/ath/ath10k/sdio.c
+++ b/drivers/net/wireless/ath/ath10k/sdio.c
@@ -2531,8 +2531,7 @@ static int ath10k_sdio_probe(struct sdio_func *func,
 		return -ENOMEM;
 	}
 
-	netif_napi_add(&ar->napi_dev, &ar->napi, ath10k_sdio_napi_poll,
-		       NAPI_POLL_WEIGHT);
+	netif_napi_add(&ar->napi_dev, &ar->napi, ath10k_sdio_napi_poll);
 
 	ath10k_dbg(ar, ATH10K_DBG_BOOT,
 		   "sdio new func %d vendor 0x%x device 0x%x block 0x%x/0x%x\n",
diff --git a/drivers/net/wireless/ath/ath10k/snoc.c b/drivers/net/wireless/ath/ath10k/snoc.c
index 5576ad9fd116..cfcb759a87de 100644
--- a/drivers/net/wireless/ath/ath10k/snoc.c
+++ b/drivers/net/wireless/ath/ath10k/snoc.c
@@ -1242,8 +1242,7 @@ static int ath10k_snoc_napi_poll(struct napi_struct *ctx, int budget)
 
 static void ath10k_snoc_init_napi(struct ath10k *ar)
 {
-	netif_napi_add(&ar->napi_dev, &ar->napi, ath10k_snoc_napi_poll,
-		       NAPI_POLL_WEIGHT);
+	netif_napi_add(&ar->napi_dev, &ar->napi, ath10k_snoc_napi_poll);
 }
 
 static int ath10k_snoc_request_irq(struct ath10k *ar)
diff --git a/drivers/net/wireless/ath/ath10k/usb.c b/drivers/net/wireless/ath/ath10k/usb.c
index ad6471b21796..b0067af685b1 100644
--- a/drivers/net/wireless/ath/ath10k/usb.c
+++ b/drivers/net/wireless/ath/ath10k/usb.c
@@ -1014,8 +1014,7 @@ static int ath10k_usb_probe(struct usb_interface *interface,
 		return -ENOMEM;
 	}
 
-	netif_napi_add(&ar->napi_dev, &ar->napi, ath10k_usb_napi_poll,
-		       NAPI_POLL_WEIGHT);
+	netif_napi_add(&ar->napi_dev, &ar->napi, ath10k_usb_napi_poll);
 
 	usb_get_dev(dev);
 	vendor_id = le16_to_cpu(dev->descriptor.idVendor);
diff --git a/drivers/net/wireless/ath/ath11k/ahb.c b/drivers/net/wireless/ath/ath11k/ahb.c
index 1390a33bde17..8339577b4712 100644
--- a/drivers/net/wireless/ath/ath11k/ahb.c
+++ b/drivers/net/wireless/ath/ath11k/ahb.c
@@ -541,7 +541,7 @@ static int ath11k_ahb_config_ext_irq(struct ath11k_base *ab)
 		irq_grp->grp_id = i;
 		init_dummy_netdev(&irq_grp->napi_ndev);
 		netif_napi_add(&irq_grp->napi_ndev, &irq_grp->napi,
-			       ath11k_ahb_ext_grp_napi_poll, NAPI_POLL_WEIGHT);
+			       ath11k_ahb_ext_grp_napi_poll);
 
 		for (j = 0; j < ATH11K_EXT_IRQ_NUM_MAX; j++) {
 			if (ab->hw_params.ring_mask->tx[i] & BIT(j)) {
diff --git a/drivers/net/wireless/ath/ath11k/pcic.c b/drivers/net/wireless/ath/ath11k/pcic.c
index 87c28b30fd0d..0d0c21b4e931 100644
--- a/drivers/net/wireless/ath/ath11k/pcic.c
+++ b/drivers/net/wireless/ath/ath11k/pcic.c
@@ -517,7 +517,7 @@ static int ath11k_pcic_ext_irq_config(struct ath11k_base *ab)
 		irq_grp->grp_id = i;
 		init_dummy_netdev(&irq_grp->napi_ndev);
 		netif_napi_add(&irq_grp->napi_ndev, &irq_grp->napi,
-			       ath11k_pcic_ext_grp_napi_poll, NAPI_POLL_WEIGHT);
+			       ath11k_pcic_ext_grp_napi_poll);
 
 		if (ab->hw_params.ring_mask->tx[i] ||
 		    ab->hw_params.ring_mask->rx[i] ||
* Unmerged path drivers/net/wireless/ath/wil6210/netdev.c
diff --git a/drivers/net/wireless/intel/iwlwifi/pcie/rx.c b/drivers/net/wireless/intel/iwlwifi/pcie/rx.c
index 68a4572cee53..9c9f87fe8377 100644
--- a/drivers/net/wireless/intel/iwlwifi/pcie/rx.c
+++ b/drivers/net/wireless/intel/iwlwifi/pcie/rx.c
@@ -1110,7 +1110,7 @@ static int _iwl_pcie_rx_init(struct iwl_trans *trans)
 				poll = iwl_pcie_napi_poll_msix;
 
 			netif_napi_add(&trans_pcie->napi_dev, &rxq->napi,
-				       poll, NAPI_POLL_WEIGHT);
+				       poll);
 			napi_enable(&rxq->napi);
 		}
 
diff --git a/drivers/net/wireless/mediatek/mt76/dma.c b/drivers/net/wireless/mediatek/mt76/dma.c
index 40cb91097b2e..4901aa02b4fb 100644
--- a/drivers/net/wireless/mediatek/mt76/dma.c
+++ b/drivers/net/wireless/mediatek/mt76/dma.c
@@ -758,7 +758,7 @@ mt76_dma_init(struct mt76_dev *dev,
 	dev->napi_dev.threaded = 1;
 
 	mt76_for_each_q_rx(dev, i) {
-		netif_napi_add(&dev->napi_dev, &dev->napi[i], poll, 64);
+		netif_napi_add(&dev->napi_dev, &dev->napi[i], poll);
 		mt76_dma_rx_fill(dev, &dev->q_rx[i]);
 		napi_enable(&dev->napi[i]);
 	}
diff --git a/drivers/net/wireless/realtek/rtw88/pci.c b/drivers/net/wireless/realtek/rtw88/pci.c
index 24d5695363d3..e89a8bbf6683 100644
--- a/drivers/net/wireless/realtek/rtw88/pci.c
+++ b/drivers/net/wireless/realtek/rtw88/pci.c
@@ -1717,8 +1717,7 @@ static void rtw_pci_napi_init(struct rtw_dev *rtwdev)
 	struct rtw_pci *rtwpci = (struct rtw_pci *)rtwdev->priv;
 
 	init_dummy_netdev(&rtwpci->netdev);
-	netif_napi_add(&rtwpci->netdev, &rtwpci->napi, rtw_pci_napi_poll,
-		       NAPI_POLL_WEIGHT);
+	netif_napi_add(&rtwpci->netdev, &rtwpci->napi, rtw_pci_napi_poll);
 }
 
 static void rtw_pci_napi_deinit(struct rtw_dev *rtwdev)
diff --git a/drivers/net/wireless/realtek/rtw89/core.c b/drivers/net/wireless/realtek/rtw89/core.c
index a5880a54812e..40fc655476c0 100644
--- a/drivers/net/wireless/realtek/rtw89/core.c
+++ b/drivers/net/wireless/realtek/rtw89/core.c
@@ -1810,7 +1810,7 @@ void rtw89_core_napi_init(struct rtw89_dev *rtwdev)
 {
 	init_dummy_netdev(&rtwdev->netdev);
 	netif_napi_add(&rtwdev->netdev, &rtwdev->napi,
-		       rtwdev->hci.ops->napi_poll, NAPI_POLL_WEIGHT);
+		       rtwdev->hci.ops->napi_poll);
 }
 EXPORT_SYMBOL(rtw89_core_napi_init);
 
* Unmerged path drivers/net/xen-netback/interface.c
* Unmerged path drivers/net/xen-netfront.c
* Unmerged path drivers/s390/net/qeth_l2_main.c
diff --git a/drivers/s390/net/qeth_l3_main.c b/drivers/s390/net/qeth_l3_main.c
index 7a78f7d6e07d..e000a9681b9d 100644
--- a/drivers/s390/net/qeth_l3_main.c
+++ b/drivers/s390/net/qeth_l3_main.c
@@ -1910,7 +1910,7 @@ static int qeth_l3_setup_netdev(struct qeth_card *card)
 		netif_set_tso_max_size(card->dev,
 				       PAGE_SIZE * (QETH_MAX_BUFFER_ELEMENTS(card) - 1));
 
-	netif_napi_add(card->dev, &card->napi, qeth_poll, NAPI_POLL_WEIGHT);
+	netif_napi_add(card->dev, &card->napi, qeth_poll);
 	return register_netdev(card->dev);
 }
 
diff --git a/include/linux/netdevice.h b/include/linux/netdevice.h
index e0bd5022b792..b27732b3dcf7 100644
--- a/include/linux/netdevice.h
+++ b/include/linux/netdevice.h
@@ -2503,16 +2503,15 @@ void netif_napi_add_weight(struct net_device *dev, struct napi_struct *napi,
  * @dev:  network device
  * @napi: NAPI context
  * @poll: polling function
- * @weight: default weight
  *
  * netif_napi_add() must be used to initialize a NAPI context prior to calling
  * *any* of the other NAPI-related functions.
  */
 static inline void
 netif_napi_add(struct net_device *dev, struct napi_struct *napi,
-	       int (*poll)(struct napi_struct *, int), int weight)
+	       int (*poll)(struct napi_struct *, int))
 {
-	netif_napi_add_weight(dev, napi, poll, weight);
+	netif_napi_add_weight(dev, napi, poll, NAPI_POLL_WEIGHT);
 }
 
 static inline void
diff --git a/net/core/gro_cells.c b/net/core/gro_cells.c
index 95c8352cb283..bc00574765bb 100644
--- a/net/core/gro_cells.c
+++ b/net/core/gro_cells.c
@@ -81,8 +81,7 @@ int gro_cells_init(struct gro_cells *gcells, struct net_device *dev)
 
 		set_bit(NAPI_STATE_NO_BUSY_POLL, &cell->napi.state);
 
-		netif_napi_add(dev, &cell->napi, gro_cell_poll,
-			       NAPI_POLL_WEIGHT);
+		netif_napi_add(dev, &cell->napi, gro_cell_poll);
 		napi_enable(&cell->napi);
 	}
 	return 0;
