smb: client: fix potential OOB in smb2_dump_detail()

jira LE-1907
cve CVE-2023-6610
Rebuild_History Non-Buildable kernel-4.18.0-538.el8
commit-author Paulo Alcantara <pc@manguebit.com>
commit 567320c46a60a3c39b69aa1df802d753817a3f86
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-538.el8/567320c4.failed

Validate SMB message with ->check_message() before calling
->calc_smb_size().

This fixes CVE-2023-6610.

	Reported-by: j51569436@gmail.com
Closes: https://bugzilla.kernel.org/show_bug.cgi?id=218219
Cc; stable@vger.kernel.org
	Signed-off-by: Paulo Alcantara <pc@manguebit.com>
	Signed-off-by: Steve French <stfrench@microsoft.com>
(cherry picked from commit 567320c46a60a3c39b69aa1df802d753817a3f86)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/cifs/smb2ops.c
diff --cc fs/cifs/smb2ops.c
index d3bcd088c3ed,66b310208545..000000000000
--- a/fs/cifs/smb2ops.c
+++ b/fs/cifs/smb2ops.c
@@@ -326,9 -402,11 +326,17 @@@ smb2_dump_detail(void *buf, struct TCP_
  
  	cifs_server_dbg(VFS, "Cmd: %d Err: 0x%x Flags: 0x%x Mid: %llu Pid: %d\n",
  		 shdr->Command, shdr->Status, shdr->Flags, shdr->MessageId,
++<<<<<<< HEAD:fs/cifs/smb2ops.c
 +		 shdr->ProcessId);
 +	cifs_server_dbg(VFS, "smb buf %p len %u\n", buf,
 +		 server->ops->calc_smb_size(buf, server));
++=======
+ 		 shdr->Id.SyncId.ProcessId);
+ 	if (!server->ops->check_message(buf, server->total_read, server)) {
+ 		cifs_server_dbg(VFS, "smb buf %p len %u\n", buf,
+ 				server->ops->calc_smb_size(buf));
+ 	}
++>>>>>>> 567320c46a60 (smb: client: fix potential OOB in smb2_dump_detail()):fs/smb/client/smb2ops.c
  #endif
  }
  
diff --git a/fs/cifs/smb2misc.c b/fs/cifs/smb2misc.c
index d88e2683626e..586cfdc3cc5f 100644
--- a/fs/cifs/smb2misc.c
+++ b/fs/cifs/smb2misc.c
@@ -166,6 +166,21 @@ smb2_check_message(char *buf, unsigned int len, struct TCP_Server_Info *srvr)
 	}
 
 	mid = le64_to_cpu(shdr->MessageId);
+	if (check_smb2_hdr(shdr, mid))
+		return 1;
+
+	if (shdr->StructureSize != SMB2_HEADER_STRUCTURE_SIZE) {
+		cifs_dbg(VFS, "Invalid structure size %u\n",
+			 le16_to_cpu(shdr->StructureSize));
+		return 1;
+	}
+
+	command = le16_to_cpu(shdr->Command);
+	if (command >= NUMBER_OF_SMB2_COMMANDS) {
+		cifs_dbg(VFS, "Invalid SMB2 command %d\n", command);
+		return 1;
+	}
+
 	if (len < pdu_size) {
 		if ((len >= hdr_size)
 		    && (shdr->Status != 0)) {
@@ -186,21 +201,6 @@ smb2_check_message(char *buf, unsigned int len, struct TCP_Server_Info *srvr)
 		return 1;
 	}
 
-	if (check_smb2_hdr(shdr, mid))
-		return 1;
-
-	if (shdr->StructureSize != SMB2_HEADER_STRUCTURE_SIZE) {
-		cifs_dbg(VFS, "Invalid structure size %u\n",
-			 le16_to_cpu(shdr->StructureSize));
-		return 1;
-	}
-
-	command = le16_to_cpu(shdr->Command);
-	if (command >= NUMBER_OF_SMB2_COMMANDS) {
-		cifs_dbg(VFS, "Invalid SMB2 command %d\n", command);
-		return 1;
-	}
-
 	if (smb2_rsp_struct_sizes[command] != pdu->StructureSize2) {
 		if (command != SMB2_OPLOCK_BREAK_HE && (shdr->Status == 0 ||
 		    pdu->StructureSize2 != SMB2_ERROR_STRUCTURE_SIZE2)) {
* Unmerged path fs/cifs/smb2ops.c
