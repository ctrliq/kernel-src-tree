docs/memory-barriers.txt: Add a missed closing parenthesis

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-485.el8
commit-author SeongJae Park <sj@kernel.org>
commit 1ab8f2486b8fc8927dff63c0d9a653fe454fafb6
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-485.el8/1ab8f248.failed

The description of io_stop_wc(), which was added by commit d5624bb29f49
("asm-generic: introduce io_stop_wc() and add implementation for ARM64"),
has an unclosed parenthesis.  This commit closes it.

Fixes: d5624bb29f49 ("asm-generic: introduce io_stop_wc() and add implementation for ARM64")
	Signed-off-by: SeongJae Park <sj@kernel.org>
	Signed-off-by: Paul E. McKenney <paulmck@kernel.org>
(cherry picked from commit 1ab8f2486b8fc8927dff63c0d9a653fe454fafb6)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	Documentation/memory-barriers.txt
diff --cc Documentation/memory-barriers.txt
index bda6c2754884,cc621decd943..000000000000
--- a/Documentation/memory-barriers.txt
+++ b/Documentation/memory-barriers.txt
@@@ -1952,6 -1963,14 +1952,17 @@@ There are some more advanced barrier fu
       For load from persistent memory, existing read memory barriers are sufficient
       to ensure read ordering.
  
++<<<<<<< HEAD
++=======
+  (*) io_stop_wc();
+ 
+      For memory accesses with write-combining attributes (e.g. those returned
+      by ioremap_wc()), the CPU may wait for prior accesses to be merged with
+      subsequent ones. io_stop_wc() can be used to prevent the merging of
+      write-combining memory accesses before this macro with those after it when
+      such wait has performance implications.
+ 
++>>>>>>> 1ab8f2486b8f (docs/memory-barriers.txt: Add a missed closing parenthesis)
  ===============================
  IMPLICIT KERNEL MEMORY BARRIERS
  ===============================
* Unmerged path Documentation/memory-barriers.txt
