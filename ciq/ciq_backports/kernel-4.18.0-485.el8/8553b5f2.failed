timers: Split [try_to_]del_timer[_sync]() to prepare for shutdown mode

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-485.el8
commit-author Thomas Gleixner <tglx@linutronix.de>
commit 8553b5f2774a66b1f293b7d783934210afb8f23c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-485.el8/8553b5f2.failed

Tearing down timers which have circular dependencies to other
functionality, e.g. workqueues, where the timer can schedule work and work
can arm timers, is not trivial.

In those cases it is desired to shutdown the timer in a way which prevents
rearming of the timer. The mechanism to do so is to set timer->function to
NULL and use this as an indicator for the timer arming functions to ignore
the (re)arm request.

Split the inner workings of try_do_del_timer_sync(), del_timer_sync() and
del_timer() into helper functions to prepare for implementing the shutdown
functionality.

No functional change.

Co-developed-by: Steven Rostedt <rostedt@goodmis.org>
	Signed-off-by: Steven Rostedt <rostedt@goodmis.org>
	Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
	Tested-by: Guenter Roeck <linux@roeck-us.net>
	Reviewed-by: Jacob Keller <jacob.e.keller@intel.com>
	Reviewed-by: Anna-Maria Behnsen <anna-maria@linutronix.de>
Link: https://lore.kernel.org/all/20220407161745.7d6754b3@gandalf.local.home
Link: https://lore.kernel.org/all/20221110064101.429013735@goodmis.org
Link: https://lore.kernel.org/r/20221123201625.195147423@linutronix.de

(cherry picked from commit 8553b5f2774a66b1f293b7d783934210afb8f23c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/time/timer.c
diff --cc kernel/time/timer.c
index b0baa8d43497,e635bb5e49b9..000000000000
--- a/kernel/time/timer.c
+++ b/kernel/time/timer.c
@@@ -1244,20 -1298,14 +1244,22 @@@ out_unlock
  EXPORT_SYMBOL_GPL(add_timer_on);
  
  /**
++<<<<<<< HEAD
 + * del_timer - Deactivate a timer.
++=======
+  * __timer_delete - Internal function: Deactivate a timer
++>>>>>>> 8553b5f2774a (timers: Split [try_to_]del_timer[_sync]() to prepare for shutdown mode)
   * @timer:	The timer to be deactivated
   *
-  * The function only deactivates a pending timer, but contrary to
-  * timer_delete_sync() it does not take into account whether the timer's
-  * callback function is concurrently executed on a different CPU or not.
-  * It neither prevents rearming of the timer. If @timer can be rearmed
-  * concurrently then the return value of this function is meaningless.
-  *
   * Return:
   * * %0 - The timer was not pending
   * * %1 - The timer was pending and deactivated
   */
++<<<<<<< HEAD
 +int del_timer(struct timer_list *timer)
++=======
+ static int __timer_delete(struct timer_list *timer)
++>>>>>>> 8553b5f2774a (timers: Split [try_to_]del_timer[_sync]() to prepare for shutdown mode)
  {
  	struct timer_base *base;
  	unsigned long flags;
@@@ -1273,18 -1321,30 +1275,34 @@@
  
  	return ret;
  }
++<<<<<<< HEAD
 +EXPORT_SYMBOL(del_timer);
++=======
  
  /**
-  * try_to_del_timer_sync - Try to deactivate a timer
-  * @timer:	Timer to deactivate
+  * timer_delete - Deactivate a timer
+  * @timer:	The timer to be deactivated
   *
-  * This function tries to deactivate a timer. On success the timer is not
-  * queued and the timer callback function is not running on any CPU.
+  * The function only deactivates a pending timer, but contrary to
+  * timer_delete_sync() it does not take into account whether the timer's
+  * callback function is concurrently executed on a different CPU or not.
+  * It neither prevents rearming of the timer.  If @timer can be rearmed
+  * concurrently then the return value of this function is meaningless.
   *
-  * This function does not guarantee that the timer cannot be rearmed right
-  * after dropping the base lock. That needs to be prevented by the calling
-  * code if necessary.
+  * Return:
+  * * %0 - The timer was not pending
+  * * %1 - The timer was pending and deactivated
+  */
+ int timer_delete(struct timer_list *timer)
+ {
+ 	return __timer_delete(timer);
+ }
+ EXPORT_SYMBOL(timer_delete);
++>>>>>>> 8553b5f2774a (timers: Split [try_to_]del_timer[_sync]() to prepare for shutdown mode)
+ 
+ /**
+  * __try_to_del_timer_sync - Internal function: Try to deactivate a timer
+  * @timer:	Timer to deactivate
   *
   * Return:
   * * %0  - The timer was not pending
@@@ -1422,43 -1555,7 +1511,47 @@@ static int __timer_delete_sync(struct t
   */
  int timer_delete_sync(struct timer_list *timer)
  {
++<<<<<<< HEAD
 +	int ret;
 +
 +#ifdef CONFIG_LOCKDEP
 +	unsigned long flags;
 +
 +	/*
 +	 * If lockdep gives a backtrace here, please reference
 +	 * the synchronization rules above.
 +	 */
 +	local_irq_save(flags);
 +	lock_map_acquire(&timer->lockdep_map);
 +	lock_map_release(&timer->lockdep_map);
 +	local_irq_restore(flags);
 +#endif
 +	/*
 +	 * don't use it in hardirq context, because it
 +	 * could lead to deadlock.
 +	 */
 +	WARN_ON(in_irq() && !(timer->flags & TIMER_IRQSAFE));
 +
 +	/*
 +	 * Must be able to sleep on PREEMPT_RT because of the slowpath in
 +	 * del_timer_wait_running().
 +	 */
 +	if (IS_ENABLED(CONFIG_PREEMPT_RT) && !(timer->flags & TIMER_IRQSAFE))
 +		lockdep_assert_preemption_enabled();
 +
 +	do {
 +		ret = try_to_del_timer_sync(timer);
 +
 +		if (unlikely(ret < 0)) {
 +			del_timer_wait_running(timer);
 +			cpu_relax();
 +		}
 +	} while (ret < 0);
 +
 +	return ret;
++=======
+ 	return __timer_delete_sync(timer);
++>>>>>>> 8553b5f2774a (timers: Split [try_to_]del_timer[_sync]() to prepare for shutdown mode)
  }
  EXPORT_SYMBOL(timer_delete_sync);
  
* Unmerged path kernel/time/timer.c
