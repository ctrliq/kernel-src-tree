core_pattern: add CPU specifier

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-485.el8
commit-author Oleksandr Natalenko <oleksandr@redhat.com>
commit 8603b6f58637ce196d68f7749633ea81af196d66
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-485.el8/8603b6f5.failed

Statistically, in a large deployment regular segfaults may indicate a CPU
issue.

Currently, it is not possible to find out what CPU the segfault happened
on.  There are at least two attempts to improve segfault logging with this
regard, but they do not help in case the logs rotate.

Hence, lets make sure it is possible to permanently record a CPU the task
ran on using a new core_pattern specifier.

Link: https://lkml.kernel.org/r/20220903064330.20772-1-oleksandr@redhat.com
	Signed-off-by: Oleksandr Natalenko <oleksandr@redhat.com>
	Suggested-by: Renaud MÃ©trich <rmetrich@redhat.com>
	Reviewed-by: Oleg Nesterov <oleg@redhat.com>
	Cc: Alexander Viro <viro@zeniv.linux.org.uk>
	Cc: "Eric W . Biederman" <ebiederm@xmission.com>
	Cc: Grzegorz Halat <ghalat@redhat.com>
	Cc: "Guilherme G. Piccoli" <gpiccoli@igalia.com>
	Cc: "Huang, Ying" <ying.huang@intel.com>
	Cc: Jason A. Donenfeld <Jason@zx2c4.com>
	Cc: Joel Savitz <jsavitz@redhat.com>
	Cc: Jonathan Corbet <corbet@lwn.net>
	Cc: Kees Cook <keescook@chromium.org>
	Cc: Laurent Dufour <ldufour@linux.ibm.com>
	Cc: Luis Chamberlain <mcgrof@kernel.org>
	Cc: Rob Herring <robh@kernel.org>
	Cc: Stephen Kitt <steve@sk2.org>
	Cc: Will Deacon <will@kernel.org>
	Cc: Xiaoming Ni <nixiaoming@huawei.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
(cherry picked from commit 8603b6f58637ce196d68f7749633ea81af196d66)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	Documentation/admin-guide/sysctl/kernel.rst
#	fs/coredump.c
#	include/linux/coredump.h
diff --cc fs/coredump.c
index 1888fb3e51d0,3e8630c8d627..000000000000
--- a/fs/coredump.c
+++ b/fs/coredump.c
@@@ -561,6 -537,8 +565,11 @@@ void do_coredump(const kernel_siginfo_
  		 * by any locks.
  		 */
  		.mm_flags = mm->flags,
++<<<<<<< HEAD
++=======
+ 		.vma_meta = NULL,
+ 		.cpu = raw_smp_processor_id(),
++>>>>>>> 8603b6f58637 (core_pattern: add CPU specifier)
  	};
  
  	audit_core_dumps(siginfo->si_signo);
diff --cc include/linux/coredump.h
index abf4b4e65dbb,191dcf5af6cb..000000000000
--- a/include/linux/coredump.h
+++ b/include/linux/coredump.h
@@@ -7,6 -7,30 +7,33 @@@
  #include <linux/fs.h>
  #include <asm/siginfo.h>
  
++<<<<<<< HEAD
++=======
+ #ifdef CONFIG_COREDUMP
+ struct core_vma_metadata {
+ 	unsigned long start, end;
+ 	unsigned long flags;
+ 	unsigned long dump_size;
+ 	unsigned long pgoff;
+ 	struct file   *file;
+ };
+ 
+ struct coredump_params {
+ 	const kernel_siginfo_t *siginfo;
+ 	struct pt_regs *regs;
+ 	struct file *file;
+ 	unsigned long limit;
+ 	unsigned long mm_flags;
+ 	int cpu;
+ 	loff_t written;
+ 	loff_t pos;
+ 	loff_t to_skip;
+ 	int vma_count;
+ 	size_t vma_data_size;
+ 	struct core_vma_metadata *vma_meta;
+ };
+ 
++>>>>>>> 8603b6f58637 (core_pattern: add CPU specifier)
  /*
   * These are the only things you should do on a core-file: use only these
   * functions to write out all the necessary info.
* Unmerged path Documentation/admin-guide/sysctl/kernel.rst
* Unmerged path Documentation/admin-guide/sysctl/kernel.rst
* Unmerged path fs/coredump.c
* Unmerged path include/linux/coredump.h
