asm-generic: introduce io_stop_wc() and add implementation for ARM64

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-485.el8
commit-author Xiongfeng Wang <wangxiongfeng2@huawei.com>
commit d5624bb29f49b849ac8d1e9783dbf9c65cf33457
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-485.el8/d5624bb2.failed

For memory accesses with write-combining attributes (e.g. those returned
by ioremap_wc()), the CPU may wait for prior accesses to be merged with
subsequent ones. But in some situation, such wait is bad for the
performance.

We introduce io_stop_wc() to prevent the merging of write-combining
memory accesses before this macro with those after it.

We add implementation for ARM64 using DGH instruction and provide NOP
implementation for other architectures.

	Signed-off-by: Xiongfeng Wang <wangxiongfeng2@huawei.com>
	Suggested-by: Will Deacon <will@kernel.org>
	Suggested-by: Catalin Marinas <catalin.marinas@arm.com>
	Acked-by: Arnd Bergmann <arnd@arndb.de>
Link: https://lore.kernel.org/r/20211221035556.60346-1-wangxiongfeng2@huawei.com
	Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
(cherry picked from commit d5624bb29f49b849ac8d1e9783dbf9c65cf33457)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/arm64/include/asm/barrier.h
diff --cc arch/arm64/include/asm/barrier.h
index 02441ad0ae0a,62217be36217..000000000000
--- a/arch/arm64/include/asm/barrier.h
+++ b/arch/arm64/include/asm/barrier.h
@@@ -34,11 -23,16 +34,21 @@@
  #define dsb(opt)	asm volatile("dsb " #opt : : : "memory")
  
  #define psb_csync()	asm volatile("hint #17" : : : "memory")
 -#define __tsb_csync()	asm volatile("hint #18" : : : "memory")
  #define csdb()		asm volatile("hint #20" : : : "memory")
  
++<<<<<<< HEAD
 +#define spec_bar()	asm volatile(ALTERNATIVE("dsb nsh\nisb\n",		\
 +						 SB_BARRIER_INSN"nop\n",	\
 +						 ARM64_HAS_SB))
++=======
+ /*
+  * Data Gathering Hint:
+  * This instruction prevents merging memory accesses with Normal-NC or
+  * Device-GRE attributes before the hint instruction with any memory accesses
+  * appearing after the hint instruction.
+  */
+ #define dgh()		asm volatile("hint #6" : : : "memory")
++>>>>>>> d5624bb29f49 (asm-generic: introduce io_stop_wc() and add implementation for ARM64)
  
  #ifdef CONFIG_ARM64_PSEUDO_NMI
  #define pmr_sync()						\
@@@ -60,6 -54,21 +70,24 @@@
  #define dma_rmb()	dmb(oshld)
  #define dma_wmb()	dmb(oshst)
  
++<<<<<<< HEAD
++=======
+ #define io_stop_wc()	dgh()
+ 
+ #define tsb_csync()								\
+ 	do {									\
+ 		/*								\
+ 		 * CPUs affected by Arm Erratum 2054223 or 2067961 needs	\
+ 		 * another TSB to ensure the trace is flushed. The barriers	\
+ 		 * don't have to be strictly back to back, as long as the	\
+ 		 * CPU is in trace prohibited state.				\
+ 		 */								\
+ 		if (cpus_have_final_cap(ARM64_WORKAROUND_TSB_FLUSH_FAILURE))	\
+ 			__tsb_csync();						\
+ 		__tsb_csync();							\
+ 	} while (0)
+ 
++>>>>>>> d5624bb29f49 (asm-generic: introduce io_stop_wc() and add implementation for ARM64)
  /*
   * Generate a mask for array_index__nospec() that is ~0UL when 0 <= idx < sz
   * and 0 otherwise.
diff --git a/Documentation/memory-barriers.txt b/Documentation/memory-barriers.txt
index bda6c2754884..d4f83eee69e8 100644
--- a/Documentation/memory-barriers.txt
+++ b/Documentation/memory-barriers.txt
@@ -1952,6 +1952,14 @@ There are some more advanced barrier functions:
      For load from persistent memory, existing read memory barriers are sufficient
      to ensure read ordering.
 
+ (*) io_stop_wc();
+
+     For memory accesses with write-combining attributes (e.g. those returned
+     by ioremap_wc(), the CPU may wait for prior accesses to be merged with
+     subsequent ones. io_stop_wc() can be used to prevent the merging of
+     write-combining memory accesses before this macro with those after it when
+     such wait has performance implications.
+
 ===============================
 IMPLICIT KERNEL MEMORY BARRIERS
 ===============================
* Unmerged path arch/arm64/include/asm/barrier.h
diff --git a/include/asm-generic/barrier.h b/include/asm-generic/barrier.h
index ffc98d4117c5..2f5c502ef985 100644
--- a/include/asm-generic/barrier.h
+++ b/include/asm-generic/barrier.h
@@ -271,5 +271,16 @@ do {									\
 #define pmem_wmb()	wmb()
 #endif
 
+/*
+ * ioremap_wc() maps I/O memory as memory with write-combining attributes. For
+ * this kind of memory accesses, the CPU may wait for prior accesses to be
+ * merged with subsequent ones. In some situation, such wait is bad for the
+ * performance. io_stop_wc() can be used to prevent the merging of
+ * write-combining memory accesses before this macro with those after it.
+ */
+#ifndef io_stop_wc
+#define io_stop_wc do { } while (0)
+#endif
+
 #endif /* !__ASSEMBLY__ */
 #endif /* __ASM_GENERIC_BARRIER_H */
