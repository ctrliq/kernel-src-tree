sched: Prepare to use balance_push in ttwu()

jira NONE_AUTOMATION
Rebuild_History Non-Buildable kernel-rt-4.18.0-348.7.1.rt7.137.el8_5
commit-author Peter Zijlstra <peterz@infradead.org>
commit 975707f227b07a8212060f94447171d15d7a681b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-rt-4.18.0-348.7.1.rt7.137.el8_5/975707f2.failed

In preparation of using the balance_push state in ttwu() we need it to
provide a reliable and consistent state.

The immediate problem is that rq->balance_callback gets cleared every
schedule() and then re-set in the balance_push_callback() itself. This
is not a reliable signal, so add a variable that stays set during the
entire time.

Also move setting it before the synchronize_rcu() in
sched_cpu_deactivate(), such that we get guaranteed visibility to
ttwu(), which is a preempt-disable region.

	Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
	Reviewed-by: Valentin Schneider <valentin.schneider@arm.com>
	Tested-by: Valentin Schneider <valentin.schneider@arm.com>
Link: https://lkml.kernel.org/r/20210121103506.966069627@infradead.org
(cherry picked from commit 975707f227b07a8212060f94447171d15d7a681b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/sched/core.c
diff --cc kernel/sched/core.c
index 82971ea56d64,16946b55e8e7..000000000000
--- a/kernel/sched/core.c
+++ b/kernel/sched/core.c
@@@ -6604,7 -7501,13 +6607,17 @@@ int sched_cpu_deactivate(unsigned int c
  	 */
  	synchronize_rcu();
  
++<<<<<<< HEAD
 +	balance_push_set(cpu, true);
++=======
+ 	rq_lock_irqsave(rq, &rf);
+ 	if (rq->rd) {
+ 		update_rq_clock(rq);
+ 		BUG_ON(!cpumask_test_cpu(cpu, rq->rd->span));
+ 		set_rq_offline(rq);
+ 	}
+ 	rq_unlock_irqrestore(rq, &rf);
++>>>>>>> 975707f227b0 (sched: Prepare to use balance_push in ttwu())
  
  #ifdef CONFIG_SCHED_SMT
  	/*
* Unmerged path kernel/sched/core.c
diff --git a/kernel/sched/sched.h b/kernel/sched/sched.h
index a3c2d842c581..fd2a7602432b 100644
--- a/kernel/sched/sched.h
+++ b/kernel/sched/sched.h
@@ -937,6 +937,7 @@ struct rq {
 	unsigned long		cpu_capacity_orig;
 
 	struct callback_head	*balance_callback;
+	unsigned char		balance_push;
 
 	unsigned char		idle_balance;
 
