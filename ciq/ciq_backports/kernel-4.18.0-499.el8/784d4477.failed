ipv6: icmp6: add SKB_DROP_REASON_IPV6_NDISC_BAD_OPTIONS

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-499.el8
commit-author Eric Dumazet <edumazet@google.com>
commit 784d4477f07b930df73bc77e842e03f1dacb83aa
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-499.el8/784d4477.failed

This is a generic drop reason for any error detected
in ndisc_parse_options().

	Signed-off-by: Eric Dumazet <edumazet@google.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 784d4477f07b930df73bc77e842e03f1dacb83aa)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/net/dropreason.h
#	net/ipv6/ndisc.c
diff --cc include/net/dropreason.h
index 70539288f995,239a5c0ea83e..000000000000
--- a/include/net/dropreason.h
+++ b/include/net/dropreason.h
@@@ -71,6 -71,12 +71,15 @@@
  	FN(DUP_FRAG)			\
  	FN(FRAG_REASM_TIMEOUT)		\
  	FN(FRAG_TOO_FAR)		\
++<<<<<<< HEAD
++=======
+ 	FN(TCP_MINTTL)			\
+ 	FN(IPV6_BAD_EXTHDR)		\
+ 	FN(IPV6_NDISC_FRAG)		\
+ 	FN(IPV6_NDISC_HOP_LIMIT)	\
+ 	FN(IPV6_NDISC_BAD_CODE)		\
+ 	FN(IPV6_NDISC_BAD_OPTIONS)	\
++>>>>>>> 784d4477f07b (ipv6: icmp6: add SKB_DROP_REASON_IPV6_NDISC_BAD_OPTIONS)
  	FNe(MAX)
  
  /**
@@@ -313,6 -319,21 +322,24 @@@ enum skb_drop_reason 
  	 */
  	SKB_DROP_REASON_FRAG_TOO_FAR,
  	/**
++<<<<<<< HEAD
++=======
+ 	 * @SKB_DROP_REASON_TCP_MINTTL: ipv4 ttl or ipv6 hoplimit below
+ 	 * the threshold (IP_MINTTL or IPV6_MINHOPCOUNT).
+ 	 */
+ 	SKB_DROP_REASON_TCP_MINTTL,
+ 	/** @SKB_DROP_REASON_IPV6_BAD_EXTHDR: Bad IPv6 extension header. */
+ 	SKB_DROP_REASON_IPV6_BAD_EXTHDR,
+ 	/** @SKB_DROP_REASON_IPV6_NDISC_FRAG: invalid frag (suppress_frag_ndisc). */
+ 	SKB_DROP_REASON_IPV6_NDISC_FRAG,
+ 	/** @SKB_DROP_REASON_IPV6_NDISC_HOP_LIMIT: invalid hop limit. */
+ 	SKB_DROP_REASON_IPV6_NDISC_HOP_LIMIT,
+ 	/** @SKB_DROP_REASON_IPV6_NDISC_BAD_CODE: invalid NDISC icmp6 code. */
+ 	SKB_DROP_REASON_IPV6_NDISC_BAD_CODE,
+ 	/** @SKB_DROP_REASON_IPV6_NDISC_BAD_OPTIONS: invalid NDISC options. */
+ 	SKB_DROP_REASON_IPV6_NDISC_BAD_OPTIONS,
+ 	/**
++>>>>>>> 784d4477f07b (ipv6: icmp6: add SKB_DROP_REASON_IPV6_NDISC_BAD_OPTIONS)
  	 * @SKB_DROP_REASON_MAX: the maximum of drop reason, which shouldn't be
  	 * used as a real 'reason'
  	 */
diff --cc net/ipv6/ndisc.c
index 33b2d2fbbba7,b47e845d66eb..000000000000
--- a/net/ipv6/ndisc.c
+++ b/net/ipv6/ndisc.c
@@@ -974,12 -1021,12 +972,18 @@@ static void ndisc_recv_na(struct sk_buf
  	 */
  	if (!msg->icmph.icmp6_solicited && idev &&
  	    idev->cnf.drop_unsolicited_na)
 -		return reason;
 +		return;
  
++<<<<<<< HEAD
 +	if (!ndisc_parse_options(dev, msg->opt, ndoptlen, &ndopts)) {
 +		ND_PRINTK(2, warn, "NS: invalid ND option\n");
 +		return;
 +	}
++=======
+ 	if (!ndisc_parse_options(dev, msg->opt, ndoptlen, &ndopts))
+ 		return SKB_DROP_REASON_IPV6_NDISC_BAD_OPTIONS;
+ 
++>>>>>>> 784d4477f07b (ipv6: icmp6: add SKB_DROP_REASON_IPV6_NDISC_BAD_OPTIONS)
  	if (ndopts.nd_opts_tgt_lladdr) {
  		lladdr = ndisc_opt_addr_data(ndopts.nd_opts_tgt_lladdr, dev);
  		if (!lladdr) {
@@@ -1202,13 -1272,11 +1204,18 @@@ static void ndisc_router_discovery(stru
  	if (!in6_dev) {
  		ND_PRINTK(0, err, "RA: can't find inet6 device for %s\n",
  			  skb->dev->name);
 -		return reason;
 +		return;
  	}
  
++<<<<<<< HEAD
 +	if (!ndisc_parse_options(skb->dev, opt, optlen, &ndopts)) {
 +		ND_PRINTK(2, warn, "RA: invalid ND options\n");
 +		return;
 +	}
++=======
+ 	if (!ndisc_parse_options(skb->dev, opt, optlen, &ndopts))
+ 		return SKB_DROP_REASON_IPV6_NDISC_BAD_OPTIONS;
++>>>>>>> 784d4477f07b (ipv6: icmp6: add SKB_DROP_REASON_IPV6_NDISC_BAD_OPTIONS)
  
  	if (!ipv6_accept_ra(in6_dev)) {
  		ND_PRINTK(2, info,
@@@ -1535,7 -1620,7 +1542,11 @@@ static void ndisc_redirect_rcv(struct s
  	}
  
  	if (!ndisc_parse_options(skb->dev, msg->opt, ndoptlen, &ndopts))
++<<<<<<< HEAD
 +		return;
++=======
+ 		return SKB_DROP_REASON_IPV6_NDISC_BAD_OPTIONS;
++>>>>>>> 784d4477f07b (ipv6: icmp6: add SKB_DROP_REASON_IPV6_NDISC_BAD_OPTIONS)
  
  	if (!ndopts.nd_opts_rh) {
  		ip6_redirect_no_header(skb, dev_net(skb->dev),
* Unmerged path include/net/dropreason.h
* Unmerged path net/ipv6/ndisc.c
