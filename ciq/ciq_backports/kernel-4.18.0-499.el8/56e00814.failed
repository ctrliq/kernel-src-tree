ASoC: SOF: amd: remove unused code

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-499.el8
commit-author Vijendar Mukunda <Vijendar.Mukunda@amd.com>
commit 56e008146e5b46059c5469a8b47478ab78f5b895
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-499.el8/56e00814.failed

During initial SOF driver bring up on AMD platforms, only DMIC
support was added. As of today, we have a complete SOF solution for
I2S endpoints along with DMIC endpoint.
This code is no longer required.
Remove unused code from RMB and RN platform ACP PCI driver.

	Signed-off-by: Vijendar Mukunda <Vijendar.Mukunda@amd.com>
Link: https://lore.kernel.org/r/20230403071651.919027-1-Vijendar.Mukunda@amd.com
	Signed-off-by: Mark Brown <broonie@kernel.org>
(cherry picked from commit 56e008146e5b46059c5469a8b47478ab78f5b895)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	sound/soc/sof/amd/pci-rmb.c
* Unmerged path sound/soc/sof/amd/pci-rmb.c
* Unmerged path sound/soc/sof/amd/pci-rmb.c
diff --git a/sound/soc/sof/amd/pci-rn.c b/sound/soc/sof/amd/pci-rn.c
index 5a20c5c657da..5401f3debca2 100644
--- a/sound/soc/sof/amd/pci-rn.c
+++ b/sound/soc/sof/amd/pci-rn.c
@@ -26,22 +26,6 @@
 #define ACP3x_REG_END		0x125C000
 
 static struct platform_device *dmic_dev;
-static struct platform_device *pdev;
-
-static const struct resource renoir_res[] = {
-	{
-		.start = 0,
-		.end = ACP3x_REG_END - ACP3x_REG_START,
-		.name = "acp_mem",
-		.flags = IORESOURCE_MEM,
-	},
-	{
-		.start = 0,
-		.end = 0,
-		.name = "acp_dai_irq",
-		.flags = IORESOURCE_IRQ,
-	},
-};
 
 static const struct sof_amd_acp_desc renoir_chip_info = {
 	.host_bridge_id = HOST_BRIDGE_CZN,
@@ -72,11 +56,8 @@ static const struct sof_dev_desc renoir_desc = {
 
 static int acp_pci_rn_probe(struct pci_dev *pci, const struct pci_device_id *pci_id)
 {
-	struct platform_device_info pdevinfo;
 	struct device *dev = &pci->dev;
-	const struct resource *res_i2s;
-	struct resource *res;
-	unsigned int flag, i, addr;
+	unsigned int flag;
 	int ret;
 
 	flag = snd_amd_acp_find_config(pci);
@@ -93,53 +74,6 @@ static int acp_pci_rn_probe(struct pci_dev *pci, const struct pci_device_id *pci
 		sof_pci_remove(pci);
 		return PTR_ERR(dmic_dev);
 	}
-
-	/* Register platform device only if flag set to FLAG_AMD_SOF_ONLY_DMIC */
-	if (flag != FLAG_AMD_SOF_ONLY_DMIC)
-		return 0;
-
-	addr = pci_resource_start(pci, 0);
-	res = devm_kzalloc(&pci->dev, sizeof(struct resource) * ARRAY_SIZE(renoir_res), GFP_KERNEL);
-	if (!res) {
-		sof_pci_remove(pci);
-		platform_device_unregister(dmic_dev);
-		return -ENOMEM;
-	}
-
-	res_i2s = renoir_res;
-	for (i = 0; i < ARRAY_SIZE(renoir_res); i++, res_i2s++) {
-		res[i].name = res_i2s->name;
-		res[i].flags = res_i2s->flags;
-		res[i].start = addr + res_i2s->start;
-		res[i].end = addr + res_i2s->end;
-		if (res_i2s->flags == IORESOURCE_IRQ) {
-			res[i].start = pci->irq;
-			res[i].end = res[i].start;
-		}
-	}
-
-	memset(&pdevinfo, 0, sizeof(pdevinfo));
-
-	/*
-	 * We have common PCI driver probe for ACP device but we have to support I2S without SOF
-	 * for some distributions. Register platform device that will be used to support non dsp
-	 * ACP's audio ends points on some machines.
-	 */
-
-	pdevinfo.name = "acp_asoc_renoir";
-	pdevinfo.id = 0;
-	pdevinfo.parent = &pci->dev;
-	pdevinfo.num_res = ARRAY_SIZE(renoir_res);
-	pdevinfo.res = &res[0];
-
-	pdev = platform_device_register_full(&pdevinfo);
-	if (IS_ERR(pdev)) {
-		dev_err(&pci->dev, "cannot register %s device\n", pdevinfo.name);
-		sof_pci_remove(pci);
-		platform_device_unregister(dmic_dev);
-		ret = PTR_ERR(pdev);
-	}
-
 	return ret;
 };
 
@@ -147,8 +81,6 @@ static void acp_pci_rn_remove(struct pci_dev *pci)
 {
 	if (dmic_dev)
 		platform_device_unregister(dmic_dev);
-	if (pdev)
-		platform_device_unregister(pdev);
 
 	return sof_pci_remove(pci);
 }
