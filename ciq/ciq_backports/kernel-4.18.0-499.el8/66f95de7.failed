soundwire: cadence: further simplify low-level xfer_msg_defer() callback

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-499.el8
commit-author Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
commit 66f95de7c13be5e442d8ed4cf00e13f8dbdc1315
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-499.el8/66f95de7.failed

The message pointer is already stored in the bus->defer structure, not
need to pass it as an argument.

	Suggested-by: Ranjani Sridharan <ranjani.sridharan@linux.intel.com>
	Signed-off-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
	Reviewed-by: Ranjani Sridharan <ranjani.sridharan@linux.intel.com>
	Signed-off-by: Bard Liao <yung-chuan.liao@linux.intel.com>
Link: https://lore.kernel.org/r/20230119073211.85979-5-yung-chuan.liao@linux.intel.com
	Signed-off-by: Vinod Koul <vkoul@kernel.org>
(cherry picked from commit 66f95de7c13be5e442d8ed4cf00e13f8dbdc1315)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/soundwire/bus.c
#	drivers/soundwire/cadence_master.c
#	drivers/soundwire/cadence_master.h
#	include/linux/soundwire/sdw.h
diff --cc drivers/soundwire/bus.c
index 9eb54dcbe035,b6aca59c3130..000000000000
--- a/drivers/soundwire/bus.c
+++ b/drivers/soundwire/bus.c
@@@ -237,7 -237,7 +237,11 @@@ static inline int do_transfer_defer(str
  	init_completion(&defer->complete);
  
  	for (i = 0; i <= retry; i++) {
++<<<<<<< HEAD
 +		resp = bus->ops->xfer_msg_defer(bus, msg, defer);
++=======
+ 		resp = bus->ops->xfer_msg_defer(bus);
++>>>>>>> 66f95de7c13b (soundwire: cadence: further simplify low-level xfer_msg_defer() callback)
  		ret = find_response_code(resp);
  		/* if cmd is ok or ignored return */
  		if (ret == 0 || ret == -ENODATA)
diff --cc drivers/soundwire/cadence_master.c
index 521387322145,e835dabb516c..000000000000
--- a/drivers/soundwire/cadence_master.c
+++ b/drivers/soundwire/cadence_master.c
@@@ -749,10 -749,11 +749,16 @@@ cdns_xfer_msg(struct sdw_bus *bus, stru
  EXPORT_SYMBOL(cdns_xfer_msg);
  
  enum sdw_command_response
++<<<<<<< HEAD
 +cdns_xfer_msg_defer(struct sdw_bus *bus,
 +		    struct sdw_msg *msg, struct sdw_defer *defer)
++=======
+ cdns_xfer_msg_defer(struct sdw_bus *bus)
++>>>>>>> 66f95de7c13b (soundwire: cadence: further simplify low-level xfer_msg_defer() callback)
  {
  	struct sdw_cdns *cdns = bus_to_cdns(bus);
+ 	struct sdw_defer *defer = &bus->defer_msg;
+ 	struct sdw_msg *msg = defer->msg;
  	int cmd = 0, ret;
  
  	/* for defer only 1 message is supported */
diff --cc drivers/soundwire/cadence_master.h
index fa9dc38264a4,dec0b4f993c1..000000000000
--- a/drivers/soundwire/cadence_master.h
+++ b/drivers/soundwire/cadence_master.h
@@@ -189,8 -184,7 +189,12 @@@ enum sdw_command_respons
  cdns_xfer_msg(struct sdw_bus *bus, struct sdw_msg *msg);
  
  enum sdw_command_response
++<<<<<<< HEAD
 +cdns_xfer_msg_defer(struct sdw_bus *bus,
 +		    struct sdw_msg *msg, struct sdw_defer *defer);
++=======
+ cdns_xfer_msg_defer(struct sdw_bus *bus);
++>>>>>>> 66f95de7c13b (soundwire: cadence: further simplify low-level xfer_msg_defer() callback)
  
  u32 cdns_read_ping_status(struct sdw_bus *bus);
  
diff --cc include/linux/soundwire/sdw.h
index 3cd2a761911f,d09a9857e1de..000000000000
--- a/include/linux/soundwire/sdw.h
+++ b/include/linux/soundwire/sdw.h
@@@ -837,8 -837,8 +837,13 @@@ struct sdw_defer 
   * @read_prop: Read Master properties
   * @override_adr: Override value read from firmware (quirk for buggy firmware)
   * @xfer_msg: Transfer message callback
++<<<<<<< HEAD
 + * @xfer_msg_defer: Defer version of transfer message callback
 + * @reset_page_addr: Reset the SCP page address registers
++=======
+  * @xfer_msg_defer: Defer version of transfer message callback. The message is handled with the
+  * bus struct @sdw_defer
++>>>>>>> 66f95de7c13b (soundwire: cadence: further simplify low-level xfer_msg_defer() callback)
   * @set_bus_conf: Set the bus configuration
   * @pre_bank_switch: Callback for pre bank switch
   * @post_bank_switch: Callback for post bank switch
@@@ -852,10 -852,7 +857,14 @@@ struct sdw_master_ops 
  	enum sdw_command_response (*xfer_msg)
  			(struct sdw_bus *bus, struct sdw_msg *msg);
  	enum sdw_command_response (*xfer_msg_defer)
++<<<<<<< HEAD
 +			(struct sdw_bus *bus, struct sdw_msg *msg,
 +			struct sdw_defer *defer);
 +	enum sdw_command_response (*reset_page_addr)
 +			(struct sdw_bus *bus, unsigned int dev_num);
++=======
+ 			(struct sdw_bus *bus);
++>>>>>>> 66f95de7c13b (soundwire: cadence: further simplify low-level xfer_msg_defer() callback)
  	int (*set_bus_conf)(struct sdw_bus *bus,
  			struct sdw_bus_params *params);
  	int (*pre_bank_switch)(struct sdw_bus *bus);
* Unmerged path drivers/soundwire/bus.c
* Unmerged path drivers/soundwire/cadence_master.c
* Unmerged path drivers/soundwire/cadence_master.h
* Unmerged path include/linux/soundwire/sdw.h
