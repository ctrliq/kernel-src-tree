soundwire: intel: move common definitions to header file

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-499.el8
commit-author Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
commit 4dd50aff56469bdc3638052e96e0a67d7c07dcb2
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-499.el8/4dd50aff.failed

Prepare for reused for addition of new hardware

	Signed-off-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
	Reviewed-by: Rander Wang <rander.wang@intel.com>
	Signed-off-by: Bard Liao <yung-chuan.liao@linux.intel.com>
Link: https://lore.kernel.org/r/20230314015410.487311-2-yung-chuan.liao@linux.intel.com
	Signed-off-by: Vinod Koul <vkoul@kernel.org>
(cherry picked from commit 4dd50aff56469bdc3638052e96e0a67d7c07dcb2)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/soundwire/intel.c
#	drivers/soundwire/intel.h
diff --cc drivers/soundwire/intel.c
index 3286e4c724c6,20067f9cd128..000000000000
--- a/drivers/soundwire/intel.c
+++ b/drivers/soundwire/intel.c
@@@ -22,59 -19,6 +22,62 @@@
  #include "bus.h"
  #include "intel.h"
  
++<<<<<<< HEAD
 +/* IDA min selected to avoid conflicts with HDaudio/iDISP SDI values */
 +#define INTEL_DEV_NUM_IDA_MIN           4
 +
 +#define INTEL_MASTER_SUSPEND_DELAY_MS	3000
 +#define INTEL_MASTER_RESET_ITERATIONS	10
 +
 +/*
 + * debug/config flags for the Intel SoundWire Master.
 + *
 + * Since we may have multiple masters active, we can have up to 8
 + * flags reused in each byte, with master0 using the ls-byte, etc.
 + */
 +
 +#define SDW_INTEL_MASTER_DISABLE_PM_RUNTIME		BIT(0)
 +#define SDW_INTEL_MASTER_DISABLE_CLOCK_STOP		BIT(1)
 +#define SDW_INTEL_MASTER_DISABLE_PM_RUNTIME_IDLE	BIT(2)
 +#define SDW_INTEL_MASTER_DISABLE_MULTI_LINK		BIT(3)
 +
 +static int md_flags;
 +module_param_named(sdw_md_flags, md_flags, int, 0444);
 +MODULE_PARM_DESC(sdw_md_flags, "SoundWire Intel Master device flags (0x0 all off)");
 +
 +enum intel_pdi_type {
 +	INTEL_PDI_IN = 0,
 +	INTEL_PDI_OUT = 1,
 +	INTEL_PDI_BD = 2,
 +};
 +
 +#define cdns_to_intel(_cdns) container_of(_cdns, struct sdw_intel, cdns)
 +
 +/*
 + * Read, write helpers for HW registers
 + */
 +static inline int intel_readl(void __iomem *base, int offset)
 +{
 +	return readl(base + offset);
 +}
 +
 +static inline void intel_writel(void __iomem *base, int offset, int value)
 +{
 +	writel(value, base + offset);
 +}
 +
 +static inline u16 intel_readw(void __iomem *base, int offset)
 +{
 +	return readw(base + offset);
 +}
 +
 +static inline void intel_writew(void __iomem *base, int offset, u16 value)
 +{
 +	writew(value, base + offset);
 +}
 +
++=======
++>>>>>>> 4dd50aff5646 (soundwire: intel: move common definitions to header file)
  static int intel_wait_bit(void __iomem *base, int offset, u32 mask, u32 target)
  {
  	int timeout = 10;
diff --cc drivers/soundwire/intel.h
index cd93a44dba9a,089c41babfc1..000000000000
--- a/drivers/soundwire/intel.h
+++ b/drivers/soundwire/intel.h
@@@ -47,15 -50,121 +47,48 @@@ struct sdw_intel 
  #endif
  };
  
++<<<<<<< HEAD
 +int intel_link_startup(struct auxiliary_device *auxdev);
 +int intel_link_process_wakeen_event(struct auxiliary_device *auxdev);
++=======
+ enum intel_pdi_type {
+ 	INTEL_PDI_IN = 0,
+ 	INTEL_PDI_OUT = 1,
+ 	INTEL_PDI_BD = 2,
+ };
+ 
+ /*
+  * Read, write helpers for HW registers
+  */
+ static inline int intel_readl(void __iomem *base, int offset)
+ {
+ 	return readl(base + offset);
+ }
+ 
+ static inline void intel_writel(void __iomem *base, int offset, int value)
+ {
+ 	writel(value, base + offset);
+ }
+ 
+ static inline u16 intel_readw(void __iomem *base, int offset)
+ {
+ 	return readw(base + offset);
+ }
+ 
+ static inline void intel_writew(void __iomem *base, int offset, u16 value)
+ {
+ 	writew(value, base + offset);
+ }
+ 
+ #define cdns_to_intel(_cdns) container_of(_cdns, struct sdw_intel, cdns)
++>>>>>>> 4dd50aff5646 (soundwire: intel: move common definitions to header file)
  
 -#define INTEL_MASTER_RESET_ITERATIONS	10
 -
 -#define SDW_INTEL_CHECK_OPS(sdw, cb)	((sdw) && (sdw)->link_res && (sdw)->link_res->hw_ops && \
 -					 (sdw)->link_res->hw_ops->cb)
 -#define SDW_INTEL_OPS(sdw, cb)		((sdw)->link_res->hw_ops->cb)
 -
 -static inline void sdw_intel_debugfs_init(struct sdw_intel *sdw)
 -{
 -	if (SDW_INTEL_CHECK_OPS(sdw, debugfs_init))
 -		SDW_INTEL_OPS(sdw, debugfs_init)(sdw);
 -}
 -
 -static inline void sdw_intel_debugfs_exit(struct sdw_intel *sdw)
 -{
 -	if (SDW_INTEL_CHECK_OPS(sdw, debugfs_exit))
 -		SDW_INTEL_OPS(sdw, debugfs_exit)(sdw);
 -}
 -
 -static inline int sdw_intel_register_dai(struct sdw_intel *sdw)
 -{
 -	if (SDW_INTEL_CHECK_OPS(sdw, register_dai))
 -		return SDW_INTEL_OPS(sdw, register_dai)(sdw);
 -	return -ENOTSUPP;
 -}
 -
 -static inline void sdw_intel_check_clock_stop(struct sdw_intel *sdw)
 -{
 -	if (SDW_INTEL_CHECK_OPS(sdw, check_clock_stop))
 -		SDW_INTEL_OPS(sdw, check_clock_stop)(sdw);
 -}
 -
 -static inline int sdw_intel_start_bus(struct sdw_intel *sdw)
 -{
 -	if (SDW_INTEL_CHECK_OPS(sdw, start_bus))
 -		return SDW_INTEL_OPS(sdw, start_bus)(sdw);
 -	return -ENOTSUPP;
 -}
 -
 -static inline int sdw_intel_start_bus_after_reset(struct sdw_intel *sdw)
 -{
 -	if (SDW_INTEL_CHECK_OPS(sdw, start_bus_after_reset))
 -		return SDW_INTEL_OPS(sdw, start_bus_after_reset)(sdw);
 -	return -ENOTSUPP;
 -}
 -
 -static inline int sdw_intel_start_bus_after_clock_stop(struct sdw_intel *sdw)
 -{
 -	if (SDW_INTEL_CHECK_OPS(sdw, start_bus_after_clock_stop))
 -		return SDW_INTEL_OPS(sdw, start_bus_after_clock_stop)(sdw);
 -	return -ENOTSUPP;
 -}
 -
 -static inline int sdw_intel_stop_bus(struct sdw_intel *sdw, bool clock_stop)
 -{
 -	if (SDW_INTEL_CHECK_OPS(sdw, stop_bus))
 -		return SDW_INTEL_OPS(sdw, stop_bus)(sdw, clock_stop);
 -	return -ENOTSUPP;
 -}
 -
 -static inline int sdw_intel_link_power_up(struct sdw_intel *sdw)
 -{
 -	if (SDW_INTEL_CHECK_OPS(sdw, link_power_up))
 -		return SDW_INTEL_OPS(sdw, link_power_up)(sdw);
 -	return -ENOTSUPP;
 -}
 -
 -static inline int sdw_intel_link_power_down(struct sdw_intel *sdw)
 -{
 -	if (SDW_INTEL_CHECK_OPS(sdw, link_power_down))
 -		return SDW_INTEL_OPS(sdw, link_power_down)(sdw);
 -	return -ENOTSUPP;
 -}
 -
 -static inline int sdw_intel_shim_check_wake(struct sdw_intel *sdw)
 -{
 -	if (SDW_INTEL_CHECK_OPS(sdw, shim_check_wake))
 -		return SDW_INTEL_OPS(sdw, shim_check_wake)(sdw);
 -	return -ENOTSUPP;
 -}
 +struct sdw_intel_link_dev {
 +	struct auxiliary_device auxdev;
 +	struct sdw_intel_link_res link_res;
 +};
  
 -static inline void sdw_intel_shim_wake(struct sdw_intel *sdw, bool wake_enable)
 -{
 -	if (SDW_INTEL_CHECK_OPS(sdw, shim_wake))
 -		SDW_INTEL_OPS(sdw, shim_wake)(sdw, wake_enable);
 -}
 +#define auxiliary_dev_to_sdw_intel_link_dev(auxiliary_dev) \
 +	container_of(auxiliary_dev, struct sdw_intel_link_dev, auxdev)
  
  #endif /* __SDW_INTEL_LOCAL_H */
* Unmerged path drivers/soundwire/intel.c
* Unmerged path drivers/soundwire/intel.h
