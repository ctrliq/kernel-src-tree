ALSA: memalloc: Allocate more contiguous pages for fallback case

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-499.el8
commit-author Takashi Iwai <tiwai@suse.de>
commit cc26516374065a34e10c9a8bf3e940e42cd96e2a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-499.el8/cc265163.failed

Currently the fallback SG allocation tries to allocate each single
page, and this tends to result in the reverse order of memory
addresses when large space is available at boot, as the kernel takes a
free page from the top to the bottom in the zone.  The end result
looks as if non-contiguous (although it actually is).  What's worse is
that it leads to an overflow of BDL entries for HD-audio.

For avoiding such a problem, this patch modifies the allocation code
slightly; now it tries to allocate the larger contiguous chunks as
much as possible, then reduces to the smaller chunks only if the
allocation failed -- a similar strategy as the existing
snd_dma_alloc_pages_fallback() function.

Along with the trick, drop the unused address array from
snd_dma_sg_fallback object.  It was needed in the past when
dma_alloc_coherent() was used, but with the standard page allocator,
it became superfluous and never referred.

Fixes: a8d302a0b770 ("ALSA: memalloc: Revive x86-specific WC page allocations again")
	Reviewed-by: Kai Vehmanen <kai.vehmanen@linux.intel.com>
Link: https://lore.kernel.org/r/20221114141658.29620-1-tiwai@suse.de
	Signed-off-by: Takashi Iwai <tiwai@suse.de>
(cherry picked from commit cc26516374065a34e10c9a8bf3e940e42cd96e2a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	sound/core/memalloc.c
diff --cc sound/core/memalloc.c
index 01c95b0dffa9,7268304009ad..000000000000
--- a/sound/core/memalloc.c
+++ b/sound/core/memalloc.c
@@@ -746,9 -729,8 +745,8 @@@ static void __snd_dma_sg_fallback_free(
  	size_t i;
  
  	for (i = 0; i < sgbuf->count && sgbuf->pages[i]; i++)
 -		do_free_pages(page_address(sgbuf->pages[i]), PAGE_SIZE, wc);
 +		do_free_fallback_pages(page_address(sgbuf->pages[i]), PAGE_SIZE, wc);
  	kvfree(sgbuf->pages);
- 	kvfree(sgbuf->addrs);
  	kfree(sgbuf);
  }
  
@@@ -763,24 -746,34 +762,43 @@@ static void *snd_dma_sg_fallback_alloc(
  	sgbuf = kzalloc(sizeof(*sgbuf), GFP_KERNEL);
  	if (!sgbuf)
  		return NULL;
- 	count = PAGE_ALIGN(size) >> PAGE_SHIFT;
- 	pages = kvcalloc(count, sizeof(*pages), GFP_KERNEL);
- 	if (!pages)
- 		goto error;
- 	sgbuf->pages = pages;
- 	sgbuf->addrs = kvcalloc(count, sizeof(*sgbuf->addrs), GFP_KERNEL);
- 	if (!sgbuf->addrs)
+ 	size = PAGE_ALIGN(size);
+ 	sgbuf->count = size >> PAGE_SHIFT;
+ 	sgbuf->pages = kvcalloc(sgbuf->count, sizeof(*sgbuf->pages), GFP_KERNEL);
+ 	if (!sgbuf->pages)
  		goto error;
  
++<<<<<<< HEAD
 +	for (i = 0; i < count; sgbuf->count++, i++) {
 +		p = do_alloc_fallback_pages(dmab->dev.dev, PAGE_SIZE,
 +					    &sgbuf->addrs[i], wc);
 +		if (!p)
 +			goto error;
 +		sgbuf->pages[i] = virt_to_page(p);
++=======
+ 	pagep = sgbuf->pages;
+ 	chunk = size;
+ 	while (size > 0) {
+ 		chunk = min(size, chunk);
+ 		p = do_alloc_pages(dmab->dev.dev, chunk, &addr, wc);
+ 		if (!p) {
+ 			if (chunk <= PAGE_SIZE)
+ 				goto error;
+ 			chunk >>= 1;
+ 			chunk = PAGE_SIZE << get_order(chunk);
+ 			continue;
+ 		}
+ 
+ 		size -= chunk;
+ 		/* fill pages */
+ 		npages = chunk >> PAGE_SHIFT;
+ 		curp = virt_to_page(p);
+ 		while (npages--)
+ 			*pagep++ = curp++;
++>>>>>>> cc2651637406 (ALSA: memalloc: Allocate more contiguous pages for fallback case)
  	}
  
- 	p = vmap(pages, count, VM_MAP, PAGE_KERNEL);
+ 	p = vmap(sgbuf->pages, sgbuf->count, VM_MAP, PAGE_KERNEL);
  	if (!p)
  		goto error;
  	dmab->private_data = sgbuf;
* Unmerged path sound/core/memalloc.c
