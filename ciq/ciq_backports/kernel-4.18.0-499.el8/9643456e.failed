ASoC: SOF: Intel: hda-mlink: initialize instance_offset member

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-499.el8
commit-author Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
commit 9643456ec3c48adfe535c56f659ab705365f4572
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-499.el8/9643456e.failed

We defined the values but never initialized it for SoundWire/SSP, fix
this miss.

A Fixes: tag is not provided as instance_offset was not used so far,
so nothing was really broken. This patch is only required for the
SoundWire support in the following patch.

	Signed-off-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com
	Reviewed-by: Bard Liao <yung-chuan.liao@linux.intel.com
	Reviewed-by: Rander Wang <rander.wang@intel.com
	Reviewed-by: Ranjani Sridharan <ranjani.sridharan@linux.intel.com
Link: https://lore.kernel.org/r/20230512174611.84372-6-pierre-louis.bossart@linux.intel.com
	Signed-off-by: Mark Brown <broonie@kernel.org
(cherry picked from commit 9643456ec3c48adfe535c56f659ab705365f4572)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	sound/soc/sof/intel/hda-mlink.c
diff --cc sound/soc/sof/intel/hda-mlink.c
index 2f512ba2a874,2d0c5d5914b1..000000000000
--- a/sound/soc/sof/intel/hda-mlink.c
+++ b/sound/soc/sof/intel/hda-mlink.c
@@@ -12,26 -12,168 +12,105 @@@
  
  #include <sound/hdaudio_ext.h>
  #include <sound/hda_register.h>
 -#include <sound/hda-mlink.h>
  
 -#include <linux/bitfield.h>
 +#include <linux/acpi.h>
  #include <linux/module.h>
 -
 -#if IS_ENABLED(CONFIG_SND_SOC_SOF_HDA_MLINK)
 -
 -/* worst-case number of sublinks is used for sublink refcount array allocation only */
 -#define HDAML_MAX_SUBLINKS (AZX_ML_LCTL_CPA_SHIFT - AZX_ML_LCTL_SPA_SHIFT)
 -
 -/**
 - * struct hdac_ext2_link - HDAudio extended+alternate link
 - *
 - * @hext_link:		hdac_ext_link
 - * @alt:		flag set for alternate extended links
 - * @intc:		boolean for interrupt capable
 - * @ofls:		boolean for offload support
 - * @lss:		boolean for link synchronization capabilities
 - * @slcount:		sublink count
 - * @elid:		extended link ID (AZX_REG_ML_LEPTR_ID_ defines)
 - * @elver:		extended link version
 - * @leptr:		extended link pointer
 - * @eml_lock:		mutual exclusion to access shared registers e.g. CPA/SPA bits
 - * in LCTL register
 - * @sublink_ref_count:	array of refcounts, required to power-manage sublinks independently
 - * @base_ptr:		pointer to shim/ip/shim_vs space
 - * @instance_offset:	offset between each of @slcount instances managed by link
 - * @shim_offset:	offset to SHIM register base
 - * @ip_offset:		offset to IP register base
 - * @shim_vs_offset:	offset to vendor-specific (VS) SHIM base
 - */
 -struct hdac_ext2_link {
 -	struct hdac_ext_link hext_link;
 -
 -	/* read directly from LCAP register */
 -	bool alt;
 -	bool intc;
 -	bool ofls;
 -	bool lss;
 -	int slcount;
 -	int elid;
 -	int elver;
 -	u32 leptr;
 -
 -	struct mutex eml_lock; /* prevent concurrent access to e.g. CPA/SPA */
 -	int sublink_ref_count[HDAML_MAX_SUBLINKS];
 -
 -	/* internal values computed from LCAP contents */
 -	void __iomem *base_ptr;
 -	u32 instance_offset;
 -	u32 shim_offset;
 -	u32 ip_offset;
 -	u32 shim_vs_offset;
 -};
 -
 -#define hdac_ext_link_to_ext2(h) container_of(h, struct hdac_ext2_link, hext_link)
 -
 -#define AZX_REG_SDW_INSTANCE_OFFSET			0x8000
 -#define AZX_REG_SDW_SHIM_OFFSET				0x0
 -#define AZX_REG_SDW_IP_OFFSET				0x100
 -#define AZX_REG_SDW_VS_SHIM_OFFSET			0x6000
 -
 -/* only one instance supported */
 -#define AZX_REG_INTEL_DMIC_SHIM_OFFSET			0x0
 -#define AZX_REG_INTEL_DMIC_IP_OFFSET			0x100
 -#define AZX_REG_INTEL_DMIC_VS_SHIM_OFFSET		0x6000
 -
 -#define AZX_REG_INTEL_SSP_INSTANCE_OFFSET		0x1000
 -#define AZX_REG_INTEL_SSP_SHIM_OFFSET			0x0
 -#define AZX_REG_INTEL_SSP_IP_OFFSET			0x100
 -#define AZX_REG_INTEL_SSP_VS_SHIM_OFFSET		0xC00
 -
 -/* only one instance supported */
 -#define AZX_REG_INTEL_UAOL_SHIM_OFFSET			0x0
 -#define AZX_REG_INTEL_UAOL_IP_OFFSET			0x100
 -#define AZX_REG_INTEL_UAOL_VS_SHIM_OFFSET		0xC00
 -
 -/* HDAML section - this part follows sequences in the hardware specification,
 - * including naming conventions and the use of the hdaml_ prefix.
 - * The code is intentionally minimal with limited dependencies on frameworks or
 - * helpers. Locking and scanning lists is handled at a higher level
 - */
 -
 -static int hdaml_lnk_enum(struct device *dev, struct hdac_ext2_link *h2link,
 -			  void __iomem *remap_addr, void __iomem *ml_addr, int link_idx)
 -{
 +#include <linux/soundwire/sdw.h>
 +#include <linux/soundwire/sdw_intel.h>
 +#include <sound/intel-dsp-config.h>
 +#include <sound/intel-nhlt.h>
 +#include <sound/sof.h>
 +#include <sound/sof/xtensa.h>
 +#include "../sof-audio.h"
 +#include "../sof-pci-dev.h"
 +#include "../ops.h"
 +#include "hda.h"
 +
 +#if IS_ENABLED(CONFIG_SND_SOC_SOF_HDA)
 +
 +int hda_bus_ml_get_capabilities(struct hdac_bus *bus)
 +{
++<<<<<<< HEAD
 +	if (bus->mlcap)
 +		return snd_hdac_ext_bus_get_ml_capabilities(bus);
++=======
+ 	struct hdac_ext_link *hlink = &h2link->hext_link;
+ 	u32 base_offset;
+ 
+ 	hlink->lcaps  = readl(ml_addr + AZX_REG_ML_LCAP);
+ 
+ 	h2link->alt = FIELD_GET(AZX_ML_HDA_LCAP_ALT, hlink->lcaps);
+ 
+ 	/* handle alternate extensions */
+ 	if (!h2link->alt) {
+ 		h2link->slcount = 1;
+ 
+ 		/*
+ 		 * LSDIID is initialized by hardware for HDaudio link,
+ 		 * it needs to be setup by software for alternate links
+ 		 */
+ 		hlink->lsdiid = readw(ml_addr + AZX_REG_ML_LSDIID);
+ 
+ 		dev_dbg(dev, "Link %d: HDAudio - lsdiid=%d\n",
+ 			link_idx, hlink->lsdiid);
+ 
+ 		return 0;
+ 	}
+ 
+ 	h2link->intc = FIELD_GET(AZX_ML_HDA_LCAP_INTC, hlink->lcaps);
+ 	h2link->ofls = FIELD_GET(AZX_ML_HDA_LCAP_OFLS, hlink->lcaps);
+ 	h2link->lss = FIELD_GET(AZX_ML_HDA_LCAP_LSS, hlink->lcaps);
+ 
+ 	/* read slcount (increment due to zero-based hardware representation */
+ 	h2link->slcount = FIELD_GET(AZX_ML_HDA_LCAP_SLCOUNT, hlink->lcaps) + 1;
+ 	dev_dbg(dev, "Link %d: HDAudio extended - sublink count %d\n",
+ 		link_idx, h2link->slcount);
+ 
+ 	/* find IP ID and offsets */
+ 	h2link->leptr = readl(ml_addr + AZX_REG_ML_LEPTR);
+ 
+ 	h2link->elid = FIELD_GET(AZX_REG_ML_LEPTR_ID, h2link->leptr);
+ 
+ 	base_offset = FIELD_GET(AZX_REG_ML_LEPTR_PTR, h2link->leptr);
+ 	h2link->base_ptr = remap_addr + base_offset;
+ 
+ 	switch (h2link->elid) {
+ 	case AZX_REG_ML_LEPTR_ID_SDW:
+ 		h2link->instance_offset = AZX_REG_SDW_INSTANCE_OFFSET;
+ 		h2link->shim_offset = AZX_REG_SDW_SHIM_OFFSET;
+ 		h2link->ip_offset = AZX_REG_SDW_IP_OFFSET;
+ 		h2link->shim_vs_offset = AZX_REG_SDW_VS_SHIM_OFFSET;
+ 		dev_dbg(dev, "Link %d: HDAudio extended - SoundWire alternate link, leptr.ptr %#x\n",
+ 			link_idx, base_offset);
+ 		break;
+ 	case AZX_REG_ML_LEPTR_ID_INTEL_DMIC:
+ 		h2link->shim_offset = AZX_REG_INTEL_DMIC_SHIM_OFFSET;
+ 		h2link->ip_offset = AZX_REG_INTEL_DMIC_IP_OFFSET;
+ 		h2link->shim_vs_offset = AZX_REG_INTEL_DMIC_VS_SHIM_OFFSET;
+ 		dev_dbg(dev, "Link %d: HDAudio extended - INTEL DMIC alternate link, leptr.ptr %#x\n",
+ 			link_idx, base_offset);
+ 		break;
+ 	case AZX_REG_ML_LEPTR_ID_INTEL_SSP:
+ 		h2link->instance_offset = AZX_REG_INTEL_SSP_INSTANCE_OFFSET;
+ 		h2link->shim_offset = AZX_REG_INTEL_SSP_SHIM_OFFSET;
+ 		h2link->ip_offset = AZX_REG_INTEL_SSP_IP_OFFSET;
+ 		h2link->shim_vs_offset = AZX_REG_INTEL_SSP_VS_SHIM_OFFSET;
+ 		dev_dbg(dev, "Link %d: HDAudio extended - INTEL SSP alternate link, leptr.ptr %#x\n",
+ 			link_idx, base_offset);
+ 		break;
+ 	case AZX_REG_ML_LEPTR_ID_INTEL_UAOL:
+ 		h2link->shim_offset = AZX_REG_INTEL_UAOL_SHIM_OFFSET;
+ 		h2link->ip_offset = AZX_REG_INTEL_UAOL_IP_OFFSET;
+ 		h2link->shim_vs_offset = AZX_REG_INTEL_UAOL_VS_SHIM_OFFSET;
+ 		dev_dbg(dev, "Link %d: HDAudio extended - INTEL UAOL alternate link, leptr.ptr %#x\n",
+ 			link_idx, base_offset);
+ 		break;
+ 	default:
+ 		dev_err(dev, "Link %d: HDAudio extended - Unsupported alternate link, leptr.id=%#02x value\n",
+ 			link_idx, h2link->elid);
+ 		return -EINVAL;
+ 	}
++>>>>>>> 9643456ec3c4 (ASoC: SOF: Intel: hda-mlink: initialize instance_offset member)
  	return 0;
  }
  
* Unmerged path sound/soc/sof/intel/hda-mlink.c
