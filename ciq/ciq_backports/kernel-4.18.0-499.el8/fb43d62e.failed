soundwire: intel: move bank switch routine to common intel_bus_common.c

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-499.el8
commit-author Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
commit fb43d62ee772fac7173bfbed3ca1bccdc508f10a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-499.el8/fb43d62e.failed

No functionality change, just moving the routines to a common file so
that they can be used for new hardware.

	Signed-off-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
	Reviewed-by: Rander Wang <rander.wang@intel.com>
	Signed-off-by: Bard Liao <yung-chuan.liao@linux.intel.com>
Link: https://lore.kernel.org/r/20230314015410.487311-11-yung-chuan.liao@linux.intel.com
	Signed-off-by: Vinod Koul <vkoul@kernel.org>
(cherry picked from commit fb43d62ee772fac7173bfbed3ca1bccdc508f10a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/soundwire/intel.c
#	drivers/soundwire/intel_bus_common.c
diff --cc drivers/soundwire/intel.c
index 0f130e4b38bd,046c67a2a39b..000000000000
--- a/drivers/soundwire/intel.c
+++ b/drivers/soundwire/intel.c
@@@ -730,63 -683,6 +730,66 @@@ static int intel_free_stream(struct sdw
  }
  
  /*
++<<<<<<< HEAD
 + * bank switch routines
 + */
 +
 +static int intel_pre_bank_switch(struct sdw_bus *bus)
 +{
 +	struct sdw_cdns *cdns = bus_to_cdns(bus);
 +	struct sdw_intel *sdw = cdns_to_intel(cdns);
 +
 +	/* Write to register only for multi-link */
 +	if (!bus->multi_link)
 +		return 0;
 +
 +	intel_shim_sync_arm(sdw);
 +
 +	return 0;
 +}
 +
 +static int intel_post_bank_switch(struct sdw_bus *bus)
 +{
 +	struct sdw_cdns *cdns = bus_to_cdns(bus);
 +	struct sdw_intel *sdw = cdns_to_intel(cdns);
 +	void __iomem *shim = sdw->link_res->shim;
 +	int sync_reg, ret;
 +
 +	/* Write to register only for multi-link */
 +	if (!bus->multi_link)
 +		return 0;
 +
 +	mutex_lock(sdw->link_res->shim_lock);
 +
 +	/* Read SYNC register */
 +	sync_reg = intel_readl(shim, SDW_SHIM_SYNC);
 +
 +	/*
 +	 * post_bank_switch() ops is called from the bus in loop for
 +	 * all the Masters in the steam with the expectation that
 +	 * we trigger the bankswitch for the only first Master in the list
 +	 * and do nothing for the other Masters
 +	 *
 +	 * So, set the SYNCGO bit only if CMDSYNC bit is set for any Master.
 +	 */
 +	if (!(sync_reg & SDW_SHIM_SYNC_CMDSYNC_MASK)) {
 +		ret = 0;
 +		goto unlock;
 +	}
 +
 +	ret = intel_shim_sync_go_unlocked(sdw);
 +unlock:
 +	mutex_unlock(sdw->link_res->shim_lock);
 +
 +	if (ret < 0)
 +		dev_err(sdw->cdns.dev, "Post bank switch failed: %d\n", ret);
 +
 +	return ret;
 +}
 +
 +/*
++=======
++>>>>>>> fb43d62ee772 (soundwire: intel: move bank switch routine to common intel_bus_common.c)
   * DAI routines
   */
  
* Unmerged path drivers/soundwire/intel_bus_common.c
* Unmerged path drivers/soundwire/intel.c
diff --git a/drivers/soundwire/intel.h b/drivers/soundwire/intel.h
index cd93a44dba9a..9b95c61b65ca 100644
--- a/drivers/soundwire/intel.h
+++ b/drivers/soundwire/intel.h
@@ -58,4 +58,8 @@ struct sdw_intel_link_dev {
 #define auxiliary_dev_to_sdw_intel_link_dev(auxiliary_dev) \
 	container_of(auxiliary_dev, struct sdw_intel_link_dev, auxdev)
 
+/* common bank switch routines */
+int intel_pre_bank_switch(struct sdw_intel *sdw);
+int intel_post_bank_switch(struct sdw_intel *sdw);
+
 #endif /* __SDW_INTEL_LOCAL_H */
* Unmerged path drivers/soundwire/intel_bus_common.c
