ASoC: SOF: Intel: hda-mlink: add helper to offload link ownership

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-499.el8
commit-author Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
commit 82958c406da4fec8f818826624c33cf2e62f4147
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-499.el8/82958c40.failed

For DMIC and SSP, the DSP will be responsible for programming the
blobs and link registers.

	Signed-off-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
	Reviewed-by: Rander Wang <rander.wang@intel.com>
	Reviewed-by: PÃ©ter Ujfalusi <peter.ujfalusi@linux.intel.com>
	Reviewed-by: Ranjani Sridharan <ranjani.sridharan@linux.intel.com>
	Signed-off-by: Peter Ujfalusi <peter.ujfalusi@linux.intel.com>
	Reviewed-by: Takashi Iwai <tiwai@suse.de>
Link: https://lore.kernel.org/r/20230404104127.5629-18-peter.ujfalusi@linux.intel.com
	Signed-off-by: Mark Brown <broonie@kernel.org>
(cherry picked from commit 82958c406da4fec8f818826624c33cf2e62f4147)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/sound/hda-mlink.h
#	sound/soc/sof/intel/hda-mlink.c
diff --cc sound/soc/sof/intel/hda-mlink.c
index 2f512ba2a874,b9ce07c38bb5..000000000000
--- a/sound/soc/sof/intel/hda-mlink.c
+++ b/sound/soc/sof/intel/hda-mlink.c
@@@ -35,6 -170,244 +35,247 @@@ int hda_bus_ml_get_capabilities(struct 
  	return 0;
  }
  
++<<<<<<< HEAD
++=======
+ /*
+  * Hardware recommendations are to wait ~10us before checking any hardware transition
+  * reported by bits changing status.
+  * This value does not need to be super-precise, a slack of 5us is perfectly acceptable.
+  * The worst-case is about 1ms before reporting an issue
+  */
+ #define HDAML_POLL_DELAY_MIN_US 10
+ #define HDAML_POLL_DELAY_SLACK_US 5
+ #define HDAML_POLL_DELAY_RETRY  100
+ 
+ static int check_sublink_power(u32 __iomem *lctl, int sublink, bool enabled)
+ {
+ 	int mask = BIT(sublink) << AZX_ML_LCTL_CPA_SHIFT;
+ 	int retry = HDAML_POLL_DELAY_RETRY;
+ 	u32 val;
+ 
+ 	usleep_range(HDAML_POLL_DELAY_MIN_US,
+ 		     HDAML_POLL_DELAY_MIN_US + HDAML_POLL_DELAY_SLACK_US);
+ 	do {
+ 		val = readl(lctl);
+ 		if (enabled) {
+ 			if (val & mask)
+ 				return 0;
+ 		} else {
+ 			if (!(val & mask))
+ 				return 0;
+ 		}
+ 		usleep_range(HDAML_POLL_DELAY_MIN_US,
+ 			     HDAML_POLL_DELAY_MIN_US + HDAML_POLL_DELAY_SLACK_US);
+ 
+ 	} while (--retry);
+ 
+ 	return -EIO;
+ }
+ 
+ static int hdaml_link_init(u32 __iomem *lctl, int sublink)
+ {
+ 	u32 val;
+ 	u32 mask = BIT(sublink) << AZX_ML_LCTL_SPA_SHIFT;
+ 
+ 	val = readl(lctl);
+ 	val |= mask;
+ 
+ 	writel(val, lctl);
+ 
+ 	return check_sublink_power(lctl, sublink, true);
+ }
+ 
+ static int hdaml_link_shutdown(u32 __iomem *lctl, int sublink)
+ {
+ 	u32 val;
+ 	u32 mask;
+ 
+ 	val = readl(lctl);
+ 	mask = BIT(sublink) << AZX_ML_LCTL_SPA_SHIFT;
+ 	val &= ~mask;
+ 
+ 	writel(val, lctl);
+ 
+ 	return check_sublink_power(lctl, sublink, false);
+ }
+ 
+ static void hdaml_link_enable_interrupt(u32 __iomem *lctl, bool enable)
+ {
+ 	u32 val;
+ 
+ 	val = readl(lctl);
+ 	if (enable)
+ 		val |= AZX_ML_LCTL_INTEN;
+ 	else
+ 		val &= ~AZX_ML_LCTL_INTEN;
+ 
+ 	writel(val, lctl);
+ }
+ 
+ static bool hdaml_link_check_interrupt(u32 __iomem *lctl)
+ {
+ 	u32 val;
+ 
+ 	val = readl(lctl);
+ 
+ 	return val & AZX_ML_LCTL_INTSTS;
+ }
+ 
+ static int hdaml_wait_bit(void __iomem *base, int offset, u32 mask, u32 target)
+ {
+ 	int timeout = HDAML_POLL_DELAY_RETRY;
+ 	u32 reg_read;
+ 
+ 	do {
+ 		reg_read = readl(base + offset);
+ 		if ((reg_read & mask) == target)
+ 			return 0;
+ 
+ 		timeout--;
+ 		usleep_range(HDAML_POLL_DELAY_MIN_US,
+ 			     HDAML_POLL_DELAY_MIN_US + HDAML_POLL_DELAY_SLACK_US);
+ 	} while (timeout != 0);
+ 
+ 	return -EAGAIN;
+ }
+ 
+ static void hdaml_link_set_syncprd(u32 __iomem *lsync, u32 syncprd)
+ {
+ 	u32 val;
+ 
+ 	val = readl(lsync);
+ 	val &= ~AZX_REG_ML_LSYNC_SYNCPRD;
+ 	val |= (syncprd & AZX_REG_ML_LSYNC_SYNCPRD);
+ 
+ 	/*
+ 	 * set SYNCPU but do not wait. The bit is cleared by hardware when
+ 	 * the link becomes active.
+ 	 */
+ 	val |= AZX_REG_ML_LSYNC_SYNCPU;
+ 
+ 	writel(val, lsync);
+ }
+ 
+ static int hdaml_link_wait_syncpu(u32 __iomem *lsync)
+ {
+ 	return hdaml_wait_bit(lsync, 0, AZX_REG_ML_LSYNC_SYNCPU, 0);
+ }
+ 
+ static void hdaml_link_sync_arm(u32 __iomem *lsync, int sublink)
+ {
+ 	u32 val;
+ 
+ 	val = readl(lsync);
+ 	val |= (AZX_REG_ML_LSYNC_CMDSYNC << sublink);
+ 
+ 	writel(val, lsync);
+ }
+ 
+ static void hdaml_link_sync_go(u32 __iomem *lsync)
+ {
+ 	u32 val;
+ 
+ 	val = readl(lsync);
+ 	val |= AZX_REG_ML_LSYNC_SYNCGO;
+ 
+ 	writel(val, lsync);
+ }
+ 
+ static bool hdaml_link_check_cmdsync(u32 __iomem *lsync, u32 cmdsync_mask)
+ {
+ 	u32 val;
+ 
+ 	val = readl(lsync);
+ 
+ 	return !!(val & cmdsync_mask);
+ }
+ 
+ static void hdaml_link_set_lsdiid(u32 __iomem *lsdiid, int dev_num)
+ {
+ 	u32 val;
+ 
+ 	val = readl(lsdiid);
+ 	val |= BIT(dev_num);
+ 
+ 	writel(val, lsdiid);
+ }
+ 
+ static void hdaml_lctl_offload_enable(u32 __iomem *lctl, bool enable)
+ {
+ 	u32 val = readl(lctl);
+ 
+ 	if (enable)
+ 		val |=  AZX_ML_LCTL_OFLEN;
+ 	else
+ 		val &=  ~AZX_ML_LCTL_OFLEN;
+ 
+ 	writel(val, lctl);
+ }
+ 
+ /* END HDAML section */
+ 
+ static int hda_ml_alloc_h2link(struct hdac_bus *bus, int index)
+ {
+ 	struct hdac_ext2_link *h2link;
+ 	struct hdac_ext_link *hlink;
+ 	int ret;
+ 
+ 	h2link  = kzalloc(sizeof(*h2link), GFP_KERNEL);
+ 	if (!h2link)
+ 		return -ENOMEM;
+ 
+ 	/* basic initialization */
+ 	hlink = &h2link->hext_link;
+ 
+ 	hlink->index = index;
+ 	hlink->bus = bus;
+ 	hlink->ml_addr = bus->mlcap + AZX_ML_BASE + (AZX_ML_INTERVAL * index);
+ 
+ 	ret = hdaml_lnk_enum(bus->dev, h2link, hlink->ml_addr, index);
+ 	if (ret < 0) {
+ 		kfree(h2link);
+ 		return ret;
+ 	}
+ 
+ 	mutex_init(&h2link->eml_lock);
+ 
+ 	list_add_tail(&hlink->list, &bus->hlink_list);
+ 
+ 	/*
+ 	 * HDaudio regular links are powered-on by default, the
+ 	 * refcount needs to be initialized.
+ 	 */
+ 	if (!h2link->alt)
+ 		hlink->ref_count = 1;
+ 
+ 	return 0;
+ }
+ 
+ int hda_bus_ml_init(struct hdac_bus *bus)
+ {
+ 	u32 link_count;
+ 	int ret;
+ 	int i;
+ 
+ 	if (!bus->mlcap)
+ 		return 0;
+ 
+ 	link_count = readl(bus->mlcap + AZX_REG_ML_MLCD) + 1;
+ 
+ 	dev_dbg(bus->dev, "HDAudio Multi-Link count: %d\n", link_count);
+ 
+ 	for (i = 0; i < link_count; i++) {
+ 		ret = hda_ml_alloc_h2link(bus, i);
+ 		if (ret < 0) {
+ 			hda_bus_ml_free(bus);
+ 			return ret;
+ 		}
+ 	}
+ 	return 0;
+ }
+ EXPORT_SYMBOL_NS(hda_bus_ml_init, SND_SOC_SOF_HDA_MLINK);
+ 
++>>>>>>> 82958c406da4 (ASoC: SOF: Intel: hda-mlink: add helper to offload link ownership)
  void hda_bus_ml_free(struct hdac_bus *bus)
  {
  	struct hdac_ext_link *hlink, *_h;
@@@ -64,5 -761,93 +305,29 @@@ void hda_bus_ml_reset_losidv(struct hda
  	list_for_each_entry(hlink, &bus->hlink_list, list)
  		writel(0, hlink->ml_addr + AZX_REG_ML_LOSIDV);
  }
 -EXPORT_SYMBOL_NS(hda_bus_ml_reset_losidv, SND_SOC_SOF_HDA_MLINK);
 -
 -int hda_bus_ml_resume(struct hdac_bus *bus)
 -{
 -	struct hdac_ext_link *hlink;
 -	int ret;
 -
 -	/* power up links that were active before suspend */
 -	list_for_each_entry(hlink, &bus->hlink_list, list) {
 -		struct hdac_ext2_link *h2link = hdac_ext_link_to_ext2(hlink);
 -
 -		if (!h2link->alt && hlink->ref_count) {
 -			ret = snd_hdac_ext_bus_link_power_up(hlink);
 -			if (ret < 0)
 -				return ret;
 -		}
 -	}
 -	return 0;
 -}
 -EXPORT_SYMBOL_NS(hda_bus_ml_resume, SND_SOC_SOF_HDA_MLINK);
 -
 -int hda_bus_ml_suspend(struct hdac_bus *bus)
 -{
 -	struct hdac_ext_link *hlink;
 -	int ret;
 -
 -	list_for_each_entry(hlink, &bus->hlink_list, list) {
 -		struct hdac_ext2_link *h2link = hdac_ext_link_to_ext2(hlink);
 -
 -		if (!h2link->alt) {
 -			ret = snd_hdac_ext_bus_link_power_down(hlink);
 -			if (ret < 0)
 -				return ret;
 -		}
 -	}
 -	return 0;
 -}
 -EXPORT_SYMBOL_NS(hda_bus_ml_suspend, SND_SOC_SOF_HDA_MLINK);
 -
 -struct hdac_ext_link *hdac_bus_eml_ssp_get_hlink(struct hdac_bus *bus)
 -{
 -	struct hdac_ext2_link *h2link;
 -
 -	h2link = find_ext2_link(bus, true, AZX_REG_ML_LEPTR_ID_INTEL_SSP);
 -	if (!h2link)
 -		return NULL;
 -
 -	return &h2link->hext_link;
 -}
 -EXPORT_SYMBOL_NS(hdac_bus_eml_ssp_get_hlink, SND_SOC_SOF_HDA_MLINK);
 -
 -struct hdac_ext_link *hdac_bus_eml_dmic_get_hlink(struct hdac_bus *bus)
 -{
 -	struct hdac_ext2_link *h2link;
 -
 -	h2link = find_ext2_link(bus, true, AZX_REG_ML_LEPTR_ID_INTEL_DMIC);
 -	if (!h2link)
 -		return NULL;
 -
 -	return &h2link->hext_link;
 -}
 -EXPORT_SYMBOL_NS(hdac_bus_eml_dmic_get_hlink, SND_SOC_SOF_HDA_MLINK);
  
+ int hdac_bus_eml_enable_offload(struct hdac_bus *bus, bool alt, int elid, bool enable)
+ {
+ 	struct hdac_ext2_link *h2link;
+ 	struct hdac_ext_link *hlink;
+ 
+ 	h2link = find_ext2_link(bus, alt, elid);
+ 	if (!h2link)
+ 		return -ENODEV;
+ 
+ 	if (!h2link->ofls)
+ 		return 0;
+ 
+ 	hlink = &h2link->hext_link;
+ 
+ 	mutex_lock(&h2link->eml_lock);
+ 
+ 	hdaml_lctl_offload_enable(hlink->ml_addr + AZX_REG_ML_LCTL, enable);
+ 
+ 	mutex_unlock(&h2link->eml_lock);
+ 
+ 	return 0;
+ }
+ EXPORT_SYMBOL_NS(hdac_bus_eml_enable_offload, SND_SOC_SOF_HDA_MLINK);
+ 
  #endif
 -
 -MODULE_LICENSE("Dual BSD/GPL");
* Unmerged path include/sound/hda-mlink.h
* Unmerged path include/sound/hda-mlink.h
* Unmerged path sound/soc/sof/intel/hda-mlink.c
