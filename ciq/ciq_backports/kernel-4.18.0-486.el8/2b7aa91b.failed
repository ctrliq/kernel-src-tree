mm/huge_memory: use pfn_to_online_page() in split_huge_pages_all()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-486.el8
commit-author Naoya Horiguchi <naoya.horiguchi@nec.com>
commit 2b7aa91ba0e86b8643f5d3c83874c80599c731d7
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-486.el8/2b7aa91b.failed

NULL pointer dereference is triggered when calling thp split via debugfs
on the system with offlined memory blocks.  With debug option enabled, the
following kernel messages are printed out:

  page:00000000467f4890 refcount:1 mapcount:0 mapping:0000000000000000 index:0x0 pfn:0x121c000
  flags: 0x17fffc00000000(node=0|zone=2|lastcpupid=0x1ffff)
  raw: 0017fffc00000000 0000000000000000 dead000000000122 0000000000000000
  raw: 0000000000000000 0000000000000000 00000001ffffffff 0000000000000000
  page dumped because: unmovable page
  page:000000007d7ab72e is uninitialized and poisoned
  page dumped because: VM_BUG_ON_PAGE(PagePoisoned(p))
  ------------[ cut here ]------------
  kernel BUG at include/linux/mm.h:1248!
  invalid opcode: 0000 [#1] PREEMPT SMP PTI
  CPU: 16 PID: 20964 Comm: bash Tainted: G          I        6.0.0-rc3-foll-numa+ #41
  ...
  RIP: 0010:split_huge_pages_write+0xcf4/0xe30

This shows that page_to_nid() in page_zone() is unexpectedly called for an
offlined memmap.

Use pfn_to_online_page() to get struct page in PFN walker.

Link: https://lkml.kernel.org/r/20220908041150.3430269-1-naoya.horiguchi@linux.dev
Fixes: f1dd2cd13c4b ("mm, memory_hotplug: do not associate hotadded memory to zones until online")      [visible after d0dc12e86b319]
	Signed-off-by: Naoya Horiguchi <naoya.horiguchi@nec.com>
Co-developed-by: David Hildenbrand <david@redhat.com>
	Signed-off-by: David Hildenbrand <david@redhat.com>
	Reviewed-by: Yang Shi <shy828301@gmail.com>
	Acked-by: Michal Hocko <mhocko@suse.com>
	Reviewed-by: Miaohe Lin <linmiaohe@huawei.com>
	Reviewed-by: Oscar Salvador <osalvador@suse.de>
	Acked-by: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
	Cc: Matthew Wilcox <willy@infradead.org>
	Cc: Muchun Song <songmuchun@bytedance.com>
	Cc: <stable@vger.kernel.org>	[5.10+]
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
(cherry picked from commit 2b7aa91ba0e86b8643f5d3c83874c80599c731d7)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	mm/huge_memory.c
diff --cc mm/huge_memory.c
index 47decba79d1f,f42bb51e023a..000000000000
--- a/mm/huge_memory.c
+++ b/mm/huge_memory.c
@@@ -2964,17 -2887,16 +2964,21 @@@ static int split_huge_pages_set(void *d
  	unsigned long pfn, max_zone_pfn;
  	unsigned long total = 0, split = 0;
  
 -	pr_debug("Split all THPs\n");
 -	for_each_zone(zone) {
 -		if (!managed_zone(zone))
 -			continue;
 +	if (val != 1)
 +		return -EINVAL;
 +
 +	for_each_populated_zone(zone) {
  		max_zone_pfn = zone_end_pfn(zone);
  		for (pfn = zone->zone_start_pfn; pfn < max_zone_pfn; pfn++) {
++<<<<<<< HEAD
 +			if (!pfn_valid(pfn))
 +				continue;
++=======
+ 			int nr_pages;
++>>>>>>> 2b7aa91ba0e8 (mm/huge_memory: use pfn_to_online_page() in split_huge_pages_all())
  
- 			page = pfn_to_page(pfn);
- 			if (!get_page_unless_zero(page))
+ 			page = pfn_to_online_page(pfn);
+ 			if (!page || !get_page_unless_zero(page))
  				continue;
  
  			if (zone != page_zone(page))
* Unmerged path mm/huge_memory.c
