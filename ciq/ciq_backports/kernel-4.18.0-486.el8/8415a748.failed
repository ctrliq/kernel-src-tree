x86/cpu, kvm: Add support for CPUID_80000021_EAX

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-486.el8
commit-author Kim Phillips <kim.phillips@amd.com>
commit 8415a74852d7c24795007ee9862d25feb519007c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-486.el8/8415a748.failed

Add support for CPUID leaf 80000021, EAX. The majority of the features will be
used in the kernel and thus a separate leaf is appropriate.

Include KVM's reverse_cpuid entry because features are used by VM guests, too.

  [ bp: Massage commit message. ]

	Signed-off-by: Kim Phillips <kim.phillips@amd.com>
	Signed-off-by: Borislav Petkov (AMD) <bp@alien8.de>
	Acked-by: Sean Christopherson <seanjc@google.com>
Link: https://lore.kernel.org/r/20230124163319.2277355-2-kim.phillips@amd.com
(cherry picked from commit 8415a74852d7c24795007ee9862d25feb519007c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/include/asm/cpufeature.h
#	arch/x86/include/asm/cpufeatures.h
#	arch/x86/include/asm/disabled-features.h
#	arch/x86/include/asm/required-features.h
#	arch/x86/kvm/reverse_cpuid.h
diff --cc arch/x86/include/asm/cpufeature.h
index 925722baef7c,ce0c8f7d3218..000000000000
--- a/arch/x86/include/asm/cpufeature.h
+++ b/arch/x86/include/asm/cpufeature.h
@@@ -31,8 -32,12 +31,9 @@@ enum cpuid_leaf
  	CPUID_8000_0007_EBX,
  	CPUID_7_EDX,
  	CPUID_8000_001F_EAX,
+ 	CPUID_8000_0021_EAX,
  };
  
 -#define X86_CAP_FMT_NUM "%d:%d"
 -#define x86_cap_flag_num(flag) ((flag) >> 5), ((flag) & 31)
 -
  #ifdef CONFIG_X86_FEATURE_NAMES
  extern const char * const x86_cap_flags[NCAPINTS*32];
  extern const char * const x86_power_flags[32];
@@@ -84,17 -96,8 +85,22 @@@ extern const char * const x86_bug_flags
  	   CHECK_BIT_IN_MASK_WORD(REQUIRED_MASK, 18, feature_bit) ||	\
  	   CHECK_BIT_IN_MASK_WORD(REQUIRED_MASK, 19, feature_bit) ||	\
  	   CHECK_BIT_IN_MASK_WORD(REQUIRED_MASK, 20, feature_bit) ||	\
++<<<<<<< HEAD
 +	   CHECK_BIT_IN_MASK_WORD(REQUIRED_MASK, 21, feature_bit) ||	\
 +	   CHECK_BIT_IN_MASK_WORD(REQUIRED_MASK, 22, feature_bit) ||	\
 +	   CHECK_BIT_IN_MASK_WORD(REQUIRED_MASK, 23, feature_bit) ||	\
 +	   CHECK_BIT_IN_MASK_WORD(REQUIRED_MASK, 24, feature_bit) ||	\
 +	   CHECK_BIT_IN_MASK_WORD(REQUIRED_MASK, 25, feature_bit) ||	\
 +	   CHECK_BIT_IN_MASK_WORD(REQUIRED_MASK, 26, feature_bit) ||	\
 +	   CHECK_BIT_IN_MASK_WORD(REQUIRED_MASK, 27, feature_bit) ||	\
 +	   CHECK_BIT_IN_MASK_WORD(REQUIRED_MASK, 28, feature_bit) ||	\
 +	   CHECK_BIT_IN_MASK_WORD(REQUIRED_MASK, 29, feature_bit) ||	\
 +	   REQUIRED_MASK_CHECK					  ||	\
 +	   BUILD_BUG_ON_ZERO(NCAPINTS != 30))
++=======
+ 	   REQUIRED_MASK_CHECK					  ||	\
+ 	   BUILD_BUG_ON_ZERO(NCAPINTS != 21))
++>>>>>>> 8415a74852d7 (x86/cpu, kvm: Add support for CPUID_80000021_EAX)
  
  #define DISABLED_MASK_BIT_SET(feature_bit)				\
  	 ( CHECK_BIT_IN_MASK_WORD(DISABLED_MASK,  0, feature_bit) ||	\
@@@ -118,16 -121,8 +124,21 @@@
  	   CHECK_BIT_IN_MASK_WORD(DISABLED_MASK, 18, feature_bit) ||	\
  	   CHECK_BIT_IN_MASK_WORD(DISABLED_MASK, 19, feature_bit) ||	\
  	   CHECK_BIT_IN_MASK_WORD(DISABLED_MASK, 20, feature_bit) ||	\
++<<<<<<< HEAD
 +	   CHECK_BIT_IN_MASK_WORD(DISABLED_MASK, 21, feature_bit) ||	\
 +	   CHECK_BIT_IN_MASK_WORD(DISABLED_MASK, 22, feature_bit) ||	\
 +	   CHECK_BIT_IN_MASK_WORD(DISABLED_MASK, 24, feature_bit) ||	\
 +	   CHECK_BIT_IN_MASK_WORD(DISABLED_MASK, 25, feature_bit) ||	\
 +	   CHECK_BIT_IN_MASK_WORD(DISABLED_MASK, 26, feature_bit) ||	\
 +	   CHECK_BIT_IN_MASK_WORD(DISABLED_MASK, 27, feature_bit) ||	\
 +	   CHECK_BIT_IN_MASK_WORD(DISABLED_MASK, 28, feature_bit) ||	\
 +	   CHECK_BIT_IN_MASK_WORD(DISABLED_MASK, 29, feature_bit) ||	\
 +	   DISABLED_MASK_CHECK					  ||	\
 +	   BUILD_BUG_ON_ZERO(NCAPINTS != 30))
++=======
+ 	   DISABLED_MASK_CHECK					  ||	\
+ 	   BUILD_BUG_ON_ZERO(NCAPINTS != 21))
++>>>>>>> 8415a74852d7 (x86/cpu, kvm: Add support for CPUID_80000021_EAX)
  
  #define cpu_has(c, bit)							\
  	(__builtin_constant_p(bit) && REQUIRED_MASK_BIT_SET(bit) ? 1 :	\
diff --cc arch/x86/include/asm/cpufeatures.h
index ffc806d3a863,b89005819cd5..000000000000
--- a/arch/x86/include/asm/cpufeatures.h
+++ b/arch/x86/include/asm/cpufeatures.h
@@@ -13,8 -13,8 +13,13 @@@
  /*
   * Defines x86 CPU feature bits
   */
++<<<<<<< HEAD
 +#define NCAPINTS			30	   /* N 32-bit words worth of info */
 +#define NBUGINTS			2	   /* N 32-bit bug flags */
++=======
+ #define NCAPINTS			21	   /* N 32-bit words worth of info */
+ #define NBUGINTS			1	   /* N 32-bit bug flags */
++>>>>>>> 8415a74852d7 (x86/cpu, kvm: Add support for CPUID_80000021_EAX)
  
  /*
   * Note: If the comment begins with a quoted string, that string is used
diff --cc arch/x86/include/asm/disabled-features.h
index 3f93f53b9a52,5dfa4fb76f4b..000000000000
--- a/arch/x86/include/asm/disabled-features.h
+++ b/arch/x86/include/asm/disabled-features.h
@@@ -118,15 -125,6 +118,19 @@@
  #define DISABLED_MASK18	0
  #define DISABLED_MASK19	0
  #define DISABLED_MASK20	0
++<<<<<<< HEAD
 +#define DISABLED_MASK21	0
 +#define DISABLED_MASK22	0
 +#define DISABLED_MASK23	0
 +#define DISABLED_MASK24	0
 +#define DISABLED_MASK25	0
 +#define DISABLED_MASK26	0
 +#define DISABLED_MASK27	0
 +#define DISABLED_MASK28	0
 +#define DISABLED_MASK29	0
 +#define DISABLED_MASK_CHECK BUILD_BUG_ON_ZERO(NCAPINTS != 30)
++=======
+ #define DISABLED_MASK_CHECK BUILD_BUG_ON_ZERO(NCAPINTS != 21)
++>>>>>>> 8415a74852d7 (x86/cpu, kvm: Add support for CPUID_80000021_EAX)
  
  #endif /* _ASM_X86_DISABLED_FEATURES_H */
diff --cc arch/x86/include/asm/required-features.h
index de8ada172d03,7ba1726b71c7..000000000000
--- a/arch/x86/include/asm/required-features.h
+++ b/arch/x86/include/asm/required-features.h
@@@ -103,15 -99,6 +103,19 @@@
  #define REQUIRED_MASK18	0
  #define REQUIRED_MASK19	0
  #define REQUIRED_MASK20	0
++<<<<<<< HEAD
 +#define REQUIRED_MASK21	0
 +#define REQUIRED_MASK22	0
 +#define REQUIRED_MASK23	0
 +#define REQUIRED_MASK24	0
 +#define REQUIRED_MASK25	0
 +#define REQUIRED_MASK26	0
 +#define REQUIRED_MASK27	0
 +#define REQUIRED_MASK28	0
 +#define REQUIRED_MASK29	0
 +#define REQUIRED_MASK_CHECK BUILD_BUG_ON_ZERO(NCAPINTS != 30)
++=======
+ #define REQUIRED_MASK_CHECK BUILD_BUG_ON_ZERO(NCAPINTS != 21)
++>>>>>>> 8415a74852d7 (x86/cpu, kvm: Add support for CPUID_80000021_EAX)
  
  #endif /* _ASM_X86_REQUIRED_FEATURES_H */
diff --cc arch/x86/kvm/reverse_cpuid.h
index a19d473d0184,81f4e9ce0c77..000000000000
--- a/arch/x86/kvm/reverse_cpuid.h
+++ b/arch/x86/kvm/reverse_cpuid.h
@@@ -48,6 -67,8 +48,11 @@@ static const struct cpuid_reg reverse_c
  	[CPUID_7_1_EAX]       = {         7, 1, CPUID_EAX},
  	[CPUID_12_EAX]        = {0x00000012, 0, CPUID_EAX},
  	[CPUID_8000_001F_EAX] = {0x8000001f, 0, CPUID_EAX},
++<<<<<<< HEAD
++=======
+ 	[CPUID_7_1_EDX]       = {         7, 1, CPUID_EDX},
+ 	[CPUID_8000_0021_EAX] = {0x80000021, 0, CPUID_EAX},
++>>>>>>> 8415a74852d7 (x86/cpu, kvm: Add support for CPUID_80000021_EAX)
  };
  
  /*
* Unmerged path arch/x86/include/asm/cpufeature.h
* Unmerged path arch/x86/include/asm/cpufeatures.h
* Unmerged path arch/x86/include/asm/disabled-features.h
* Unmerged path arch/x86/include/asm/required-features.h
diff --git a/arch/x86/kernel/cpu/common.c b/arch/x86/kernel/cpu/common.c
index f59edeef14eb..0cde7c672538 100644
--- a/arch/x86/kernel/cpu/common.c
+++ b/arch/x86/kernel/cpu/common.c
@@ -962,6 +962,9 @@ void get_cpu_cap(struct cpuinfo_x86 *c)
 	if (c->extended_cpuid_level >= 0x8000001f)
 		c->x86_capability[CPUID_8000_001F_EAX] = cpuid_eax(0x8000001f);
 
+	if (c->extended_cpuid_level >= 0x80000021)
+		c->x86_capability[CPUID_8000_0021_EAX] = cpuid_eax(0x80000021);
+
 	init_scattered_cpuid_features(c);
 	init_speculation_control(c);
 
* Unmerged path arch/x86/kvm/reverse_cpuid.h
