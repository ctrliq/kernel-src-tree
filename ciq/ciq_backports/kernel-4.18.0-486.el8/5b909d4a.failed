x86/cpu, kvm: Add the Null Selector Clears Base feature

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-486.el8
commit-author Kim Phillips <kim.phillips@amd.com>
commit 5b909d4ae59aedc711b7a432da021be0e82c95a0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-486.el8/5b909d4a.failed

The Null Selector Clears Base feature was being open-coded for KVM.
Add it to its newly added native CPUID leaf 0x80000021 EAX proper.

Also drop the bit description comments now it's more self-describing.

  [ bp: Convert test in check_null_seg_clears_base() too. ]

	Signed-off-by: Kim Phillips <kim.phillips@amd.com>
	Signed-off-by: Borislav Petkov (AMD) <bp@alien8.de>
	Acked-by: Sean Christopherson <seanjc@google.com>
Link: https://lore.kernel.org/r/20230124163319.2277355-6-kim.phillips@amd.com
(cherry picked from commit 5b909d4ae59aedc711b7a432da021be0e82c95a0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/include/asm/cpufeatures.h
#	arch/x86/kvm/cpuid.c
diff --cc arch/x86/include/asm/cpufeatures.h
index ffc806d3a863,6bed80cf0dc5..000000000000
--- a/arch/x86/include/asm/cpufeatures.h
+++ b/arch/x86/include/asm/cpufeatures.h
@@@ -413,13 -424,13 +413,20 @@@
  #define X86_FEATURE_SEV			(19*32+ 1) /* AMD Secure Encrypted Virtualization */
  #define X86_FEATURE_VM_PAGE_FLUSH	(19*32+ 2) /* "" VM Page Flush MSR is supported */
  #define X86_FEATURE_SEV_ES		(19*32+ 3) /* AMD Secure Encrypted Virtualization - Encrypted State */
 -#define X86_FEATURE_V_TSC_AUX		(19*32+ 9) /* "" Virtual TSC_AUX */
  #define X86_FEATURE_SME_COHERENT	(19*32+10) /* "" AMD hardware-enforced cache coherency */
  
++<<<<<<< HEAD
 +/* Words 20-21: reserved for future extension */
 +
 +/* RHEL specific auxillary flags, word 22 */
 +#define X86_FEATURE_IBRS_EXIT_SET	(22*32+ 0) /* ""  Set IBRS on kernel exit */
 +#define X86_FEATURE_IBRS_EXIT_SKIP	(22*32+ 1) /* ""  Skip SPEC_CTRL MSR write on exit */
++=======
+ /* AMD-defined Extended Feature 2 EAX, CPUID level 0x80000021 (EAX), word 20 */
+ #define X86_FEATURE_NO_NESTED_DATA_BP	(20*32+ 0) /* "" No Nested Data Breakpoints */
+ #define X86_FEATURE_LFENCE_RDTSC	(20*32+ 2) /* "" LFENCE always serializing / synchronizes RDTSC */
+ #define X86_FEATURE_NULL_SEL_CLR_BASE	(20*32+ 6) /* "" Null Selector Clears Base */
++>>>>>>> 5b909d4ae59a (x86/cpu, kvm: Add the Null Selector Clears Base feature)
  
  /*
   * BUG word(s)
diff --cc arch/x86/kvm/cpuid.c
index 2ca5ac683c44,dde8d6bb22a0..000000000000
--- a/arch/x86/kvm/cpuid.c
+++ b/arch/x86/kvm/cpuid.c
@@@ -683,14 -742,24 +683,19 @@@ void kvm_set_cpu_caps(void
  		F(SME_COHERENT));
  
  	kvm_cpu_cap_mask(CPUID_8000_0021_EAX,
++<<<<<<< HEAD
 +		BIT(0) /* NO_NESTED_DATA_BP */ |
 +		BIT(2) /* LFENCE Always serializing */ | 0 /* SmmPgCfgLock */ |
 +		BIT(6) /* NULL_SEL_CLR_BASE */ | 0 /* PrefetchCtlMsr */
++=======
+ 		F(NO_NESTED_DATA_BP) | F(LFENCE_RDTSC) | 0 /* SmmPgCfgLock */ |
+ 		F(NULL_SEL_CLR_BASE) | 0 /* PrefetchCtlMsr */
++>>>>>>> 5b909d4ae59a (x86/cpu, kvm: Add the Null Selector Clears Base feature)
  	);
 -
 -	/*
 -	 * Synthesize "LFENCE is serializing" into the AMD-defined entry in
 -	 * KVM's supported CPUID if the feature is reported as supported by the
 -	 * kernel.  LFENCE_RDTSC was a Linux-defined synthetic feature long
 -	 * before AMD joined the bandwagon, e.g. LFENCE is serializing on most
 -	 * CPUs that support SSE2.  On CPUs that don't support AMD's leaf,
 -	 * kvm_cpu_cap_mask() will unfortunately drop the flag due to ANDing
 -	 * the mask with the raw host CPUID, and reporting support in AMD's
 -	 * leaf can make it easier for userspace to detect the feature.
 -	 */
  	if (cpu_feature_enabled(X86_FEATURE_LFENCE_RDTSC))
 -		kvm_cpu_cap_set(X86_FEATURE_LFENCE_RDTSC);
 +		kvm_cpu_caps[CPUID_8000_0021_EAX] |= BIT(2) /* LFENCE Always serializing */;
  	if (!static_cpu_has_bug(X86_BUG_NULL_SEG))
- 		kvm_cpu_caps[CPUID_8000_0021_EAX] |= BIT(6) /* NULL_SEL_CLR_BASE */;
+ 		kvm_cpu_cap_set(X86_FEATURE_NULL_SEL_CLR_BASE);
  	kvm_cpu_caps[CPUID_8000_0021_EAX] |= BIT(9) /* NO_SMM_CTL_MSR */;
  
  	kvm_cpu_cap_mask(CPUID_C000_0001_EDX,
* Unmerged path arch/x86/include/asm/cpufeatures.h
diff --git a/arch/x86/kernel/cpu/common.c b/arch/x86/kernel/cpu/common.c
index f59edeef14eb..610987432e20 100644
--- a/arch/x86/kernel/cpu/common.c
+++ b/arch/x86/kernel/cpu/common.c
@@ -1496,9 +1496,7 @@ void check_null_seg_clears_base(struct cpuinfo_x86 *c)
 	if (!IS_ENABLED(CONFIG_X86_64))
 		return;
 
-	/* Zen3 CPUs advertise Null Selector Clears Base in CPUID. */
-	if (c->extended_cpuid_level >= 0x80000021 &&
-	    cpuid_eax(0x80000021) & BIT(6))
+	if (cpu_has(c, X86_FEATURE_NULL_SEL_CLR_BASE))
 		return;
 
 	/*
* Unmerged path arch/x86/kvm/cpuid.c
