md: Free resources in __md_stop

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-486.el8
commit-author Xiao Ni <xni@redhat.com>
commit 3e453522593d74a87cf68a38e14aa36ebca1dbcd
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-486.el8/3e453522.failed

If md_run() fails after ->active_io is initialized, then percpu_ref_exit
is called in error path. However, later md_free_disk will call
percpu_ref_exit again which leads to a panic because of null pointer
dereference. It can also trigger this bug when resources are initialized
but are freed in error path, then will be freed again in md_free_disk.

BUG: kernel NULL pointer dereference, address: 0000000000000038
Oops: 0000 [#1] PREEMPT SMP
Workqueue: md_misc mddev_delayed_delete
RIP: 0010:free_percpu+0x110/0x630
Call Trace:
 <TASK>
 __percpu_ref_exit+0x44/0x70
 percpu_ref_exit+0x16/0x90
 md_free_disk+0x2f/0x80
 disk_release+0x101/0x180
 device_release+0x84/0x110
 kobject_put+0x12a/0x380
 kobject_put+0x160/0x380
 mddev_delayed_delete+0x19/0x30
 process_one_work+0x269/0x680
 worker_thread+0x266/0x640
 kthread+0x151/0x1b0
 ret_from_fork+0x1f/0x30

For creating raid device, md raid calls do_md_run->md_run, dm raid calls
md_run. We alloc those memory in md_run. For stopping raid device, md raid
calls do_md_stop->__md_stop, dm raid calls md_stop->__md_stop. So we can
free those memory resources in __md_stop.

Fixes: 72adae23a72c ("md: Change active_io to percpu")
Reported-and-tested-by: Yu Kuai <yukuai3@huawei.com>
	Signed-off-by: Xiao Ni <xni@redhat.com>
	Signed-off-by: Song Liu <song@kernel.org>
(cherry picked from commit 3e453522593d74a87cf68a38e14aa36ebca1dbcd)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/md/md.c
diff --cc drivers/md/md.c
index 78214abe6fbe,f5480778e2f7..000000000000
--- a/drivers/md/md.c
+++ b/drivers/md/md.c
@@@ -6357,8 -6270,6 +6362,11 @@@ void md_stop(struct mddev *mddev
  	 */
  	__md_stop_writes(mddev);
  	__md_stop(mddev);
++<<<<<<< HEAD
 +	bioset_exit(&mddev->bio_set);
 +	bioset_exit(&mddev->sync_set);
++=======
++>>>>>>> 3e453522593d (md: Free resources in __md_stop)
  }
  
  EXPORT_SYMBOL_GPL(md_stop);
@@@ -7939,23 -7825,28 +7947,35 @@@ static void md_release(struct gendisk *
  	mddev_put(mddev);
  }
  
 -static unsigned int md_check_events(struct gendisk *disk, unsigned int clearing)
 +static int md_media_changed(struct gendisk *disk)
 +{
 +	struct mddev *mddev = disk->private_data;
 +
 +	return mddev->changed;
 +}
 +
 +static int md_revalidate(struct gendisk *disk)
  {
  	struct mddev *mddev = disk->private_data;
 -	unsigned int ret = 0;
  
 -	if (mddev->changed)
 -		ret = DISK_EVENT_MEDIA_CHANGE;
  	mddev->changed = 0;
 -	return ret;
 +	return 0;
  }
++<<<<<<< HEAD
 +static const struct block_device_operations md_fops =
++=======
+ 
+ static void md_free_disk(struct gendisk *disk)
+ {
+ 	struct mddev *mddev = disk->private_data;
+ 
+ 	mddev_free(mddev);
+ }
+ 
+ const struct block_device_operations md_fops =
++>>>>>>> 3e453522593d (md: Free resources in __md_stop)
  {
  	.owner		= THIS_MODULE,
 -	.submit_bio	= md_submit_bio,
  	.open		= md_open,
  	.release	= md_release,
  	.ioctl		= md_ioctl,
* Unmerged path drivers/md/md.c
