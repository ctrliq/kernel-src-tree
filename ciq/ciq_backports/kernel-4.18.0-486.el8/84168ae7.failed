x86/cpu, kvm: Move X86_FEATURE_LFENCE_RDTSC to its native leaf

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-486.el8
commit-author Kim Phillips <kim.phillips@amd.com>
commit 84168ae786f8a15a7eb0f79d34f20b8d261ce2f5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-486.el8/84168ae7.failed

The LFENCE always serializing feature bit was defined as scattered
LFENCE_RDTSC and its native leaf bit position open-coded for KVM.  Add
it to its newly added CPUID leaf 0x80000021 EAX proper.  With
LFENCE_RDTSC in its proper place, the kernel's set_cpu_cap() will
effectively synthesize the feature for KVM going forward.

Also, DE_CFG[1] doesn't need to be set on such CPUs anymore.

  [ bp: Massage and merge diff from Sean. ]

	Signed-off-by: Kim Phillips <kim.phillips@amd.com>
	Signed-off-by: Borislav Petkov (AMD) <bp@alien8.de>
	Acked-by: Sean Christopherson <seanjc@google.com>
Link: https://lore.kernel.org/r/20230124163319.2277355-5-kim.phillips@amd.com
(cherry picked from commit 84168ae786f8a15a7eb0f79d34f20b8d261ce2f5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/include/asm/cpufeatures.h
#	arch/x86/kvm/cpuid.c
diff --cc arch/x86/include/asm/cpufeatures.h
index ffc806d3a863,901128ed4c7a..000000000000
--- a/arch/x86/include/asm/cpufeatures.h
+++ b/arch/x86/include/asm/cpufeatures.h
@@@ -96,8 -96,8 +96,13 @@@
  #define X86_FEATURE_SYSCALL32		( 3*32+14) /* "" syscall in IA32 userspace */
  #define X86_FEATURE_SYSENTER32		( 3*32+15) /* "" sysenter in IA32 userspace */
  #define X86_FEATURE_REP_GOOD		( 3*32+16) /* REP microcode works well */
++<<<<<<< HEAD
 +/* FREE!                                ( 3*32+17) */
 +#define X86_FEATURE_LFENCE_RDTSC	( 3*32+18) /* "" LFENCE synchronizes RDTSC */
++=======
+ #define X86_FEATURE_AMD_LBR_V2		( 3*32+17) /* AMD Last Branch Record Extension Version 2 */
+ /* FREE, was #define X86_FEATURE_LFENCE_RDTSC		( 3*32+18) "" LFENCE synchronizes RDTSC */
++>>>>>>> 84168ae786f8 (x86/cpu, kvm: Move X86_FEATURE_LFENCE_RDTSC to its native leaf)
  #define X86_FEATURE_ACC_POWER		( 3*32+19) /* AMD Accumulated Power Mechanism */
  #define X86_FEATURE_NOPL		( 3*32+20) /* The NOPL (0F 1F) instructions */
  #define X86_FEATURE_ALWAYS		( 3*32+21) /* "" Always-present feature */
@@@ -413,13 -424,12 +418,19 @@@
  #define X86_FEATURE_SEV			(19*32+ 1) /* AMD Secure Encrypted Virtualization */
  #define X86_FEATURE_VM_PAGE_FLUSH	(19*32+ 2) /* "" VM Page Flush MSR is supported */
  #define X86_FEATURE_SEV_ES		(19*32+ 3) /* AMD Secure Encrypted Virtualization - Encrypted State */
 -#define X86_FEATURE_V_TSC_AUX		(19*32+ 9) /* "" Virtual TSC_AUX */
  #define X86_FEATURE_SME_COHERENT	(19*32+10) /* "" AMD hardware-enforced cache coherency */
  
++<<<<<<< HEAD
 +/* Words 20-21: reserved for future extension */
 +
 +/* RHEL specific auxillary flags, word 22 */
 +#define X86_FEATURE_IBRS_EXIT_SET	(22*32+ 0) /* ""  Set IBRS on kernel exit */
 +#define X86_FEATURE_IBRS_EXIT_SKIP	(22*32+ 1) /* ""  Skip SPEC_CTRL MSR write on exit */
++=======
+ /* AMD-defined Extended Feature 2 EAX, CPUID level 0x80000021 (EAX), word 20 */
+ #define X86_FEATURE_NO_NESTED_DATA_BP	(20*32+ 0) /* "" No Nested Data Breakpoints */
+ #define X86_FEATURE_LFENCE_RDTSC	(20*32+ 2) /* "" LFENCE always serializing / synchronizes RDTSC */
++>>>>>>> 84168ae786f8 (x86/cpu, kvm: Move X86_FEATURE_LFENCE_RDTSC to its native leaf)
  
  /*
   * BUG word(s)
diff --cc arch/x86/kvm/cpuid.c
index 2ca5ac683c44,12455dc5afe5..000000000000
--- a/arch/x86/kvm/cpuid.c
+++ b/arch/x86/kvm/cpuid.c
@@@ -683,12 -742,22 +683,27 @@@ void kvm_set_cpu_caps(void
  		F(SME_COHERENT));
  
  	kvm_cpu_cap_mask(CPUID_8000_0021_EAX,
++<<<<<<< HEAD
 +		BIT(0) /* NO_NESTED_DATA_BP */ |
 +		BIT(2) /* LFENCE Always serializing */ | 0 /* SmmPgCfgLock */ |
++=======
+ 		F(NO_NESTED_DATA_BP) | F(LFENCE_RDTSC) | 0 /* SmmPgCfgLock */ |
++>>>>>>> 84168ae786f8 (x86/cpu, kvm: Move X86_FEATURE_LFENCE_RDTSC to its native leaf)
  		BIT(6) /* NULL_SEL_CLR_BASE */ | 0 /* PrefetchCtlMsr */
  	);
+ 
+ 	/*
+ 	 * Synthesize "LFENCE is serializing" into the AMD-defined entry in
+ 	 * KVM's supported CPUID if the feature is reported as supported by the
+ 	 * kernel.  LFENCE_RDTSC was a Linux-defined synthetic feature long
+ 	 * before AMD joined the bandwagon, e.g. LFENCE is serializing on most
+ 	 * CPUs that support SSE2.  On CPUs that don't support AMD's leaf,
+ 	 * kvm_cpu_cap_mask() will unfortunately drop the flag due to ANDing
+ 	 * the mask with the raw host CPUID, and reporting support in AMD's
+ 	 * leaf can make it easier for userspace to detect the feature.
+ 	 */
  	if (cpu_feature_enabled(X86_FEATURE_LFENCE_RDTSC))
- 		kvm_cpu_caps[CPUID_8000_0021_EAX] |= BIT(2) /* LFENCE Always serializing */;
+ 		kvm_cpu_cap_set(X86_FEATURE_LFENCE_RDTSC);
  	if (!static_cpu_has_bug(X86_BUG_NULL_SEG))
  		kvm_cpu_caps[CPUID_8000_0021_EAX] |= BIT(6) /* NULL_SEL_CLR_BASE */;
  	kvm_cpu_caps[CPUID_8000_0021_EAX] |= BIT(9) /* NO_SMM_CTL_MSR */;
* Unmerged path arch/x86/include/asm/cpufeatures.h
diff --git a/arch/x86/kernel/cpu/amd.c b/arch/x86/kernel/cpu/amd.c
index efa49b3f87b9..cd94c9a6c2d8 100644
--- a/arch/x86/kernel/cpu/amd.c
+++ b/arch/x86/kernel/cpu/amd.c
@@ -944,7 +944,7 @@ static void init_amd(struct cpuinfo_x86 *c)
 
 	init_amd_cacheinfo(c);
 
-	if (cpu_has(c, X86_FEATURE_XMM2)) {
+	if (!cpu_has(c, X86_FEATURE_LFENCE_RDTSC) && cpu_has(c, X86_FEATURE_XMM2)) {
 		/*
 		 * Use LFENCE for execution serialization.  On families which
 		 * don't have that MSR, LFENCE is already serializing.
* Unmerged path arch/x86/kvm/cpuid.c
