vsprintf: Fix %pK with kptr_restrict == 0

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-486.el8
commit-author Christophe Leroy <christophe.leroy@csgroup.eu>
commit 84842911322fc6a02a03ab9e728a48c691fe3efd
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-486.el8/84842911.failed

Although kptr_restrict is set to 0 and the kernel is booted with
no_hash_pointers parameter, the content of /proc/vmallocinfo is
lacking the real addresses.

  / # cat /proc/vmallocinfo
  0x(ptrval)-0x(ptrval)    8192 load_module+0xc0c/0x2c0c pages=1 vmalloc
  0x(ptrval)-0x(ptrval)   12288 start_kernel+0x4e0/0x690 pages=2 vmalloc
  0x(ptrval)-0x(ptrval)   12288 start_kernel+0x4e0/0x690 pages=2 vmalloc
  0x(ptrval)-0x(ptrval)    8192 _mpic_map_mmio.constprop.0+0x20/0x44 phys=0x80041000 ioremap
  0x(ptrval)-0x(ptrval)   12288 _mpic_map_mmio.constprop.0+0x20/0x44 phys=0x80041000 ioremap
    ...

According to the documentation for /proc/sys/kernel/, %pK is
equivalent to %p when kptr_restrict is set to 0.

Fixes: 5ead723a20e0 ("lib/vsprintf: no_hash_pointers prints all addresses as unhashed")
	Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>
	Reviewed-by: Petr Mladek <pmladek@suse.com>
	Signed-off-by: Petr Mladek <pmladek@suse.com>
Link: https://lore.kernel.org/r/107476128e59bff11a309b5bf7579a1753a41aca.1645087605.git.christophe.leroy@csgroup.eu
(cherry picked from commit 84842911322fc6a02a03ab9e728a48c691fe3efd)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	lib/vsprintf.c
diff --cc lib/vsprintf.c
index f79439568833,8fb4a21c0b60..000000000000
--- a/lib/vsprintf.c
+++ b/lib/vsprintf.c
@@@ -2171,11 -2250,7 +2188,15 @@@ char *fwnode_string(char *buf, char *en
  	return widen_string(buf, buf - buf_start, end, spec);
  }
  
++<<<<<<< HEAD
 +/* Disable pointer hashing if requested */
 +bool no_hash_pointers __ro_after_init;
 +EXPORT_SYMBOL_GPL(no_hash_pointers);
 +
 +static int __init no_hash_pointers_enable(char *str)
++=======
+ int __init no_hash_pointers_enable(char *str)
++>>>>>>> 84842911322f (vsprintf: Fix %pK with kptr_restrict == 0)
  {
  	if (no_hash_pointers)
  		return 0;
diff --git a/Documentation/admin-guide/kernel-parameters.txt b/Documentation/admin-guide/kernel-parameters.txt
index 25f0b3a543e9..450978edffc7 100644
--- a/Documentation/admin-guide/kernel-parameters.txt
+++ b/Documentation/admin-guide/kernel-parameters.txt
@@ -3228,8 +3228,7 @@
 			difficult since unequal pointers can no longer be
 			compared.  However, if this command-line option is
 			specified, then all normal pointers will have their true
-			value printed.  Pointers printed via %pK may still be
-			hashed.  This option should only be specified when
+			value printed. This option should only be specified when
 			debugging the kernel.  Please do not use on production
 			kernels.
 
* Unmerged path lib/vsprintf.c
