platform/x86: intel/pmc/core: Add Meteor Lake support to pmc core driver

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-486.el8
commit-author Gayatri Kammela <gayatri.kammela@linux.intel.com>
commit c5ad454a12c6a6d08dd67c971a0b12adc9953304
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-486.el8/c5ad454a.failed

Add Meteor Lake client and mobile support to pmc core driver. This patch
adds legacy support.

	Cc: David E Box <david.e.box@linux.intel.com>
	Suggested-by: David E Box <david.e.box@linux.intel.com>
	Reviewed-by: "David E. Box" <david.e.box@linux.intel.com>
	Signed-off-by: Sukumar Ghorai <sukumar.ghorai@intel.com>
	Signed-off-by: Gayatri Kammela <gayatri.kammela@linux.intel.com>
	Signed-off-by: "David E. Box" <david.e.box@linux.intel.com>
Link: https://lore.kernel.org/r/20221114183257.2067662-9-gayatri.kammela@linux.intel.com
	Reviewed-by: Hans de Goede <hdegoede@redhat.com>
	Signed-off-by: Hans de Goede <hdegoede@redhat.com>
(cherry picked from commit c5ad454a12c6a6d08dd67c971a0b12adc9953304)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/platform/x86/intel/pmc/Makefile
#	drivers/platform/x86/intel/pmc/core.c
#	drivers/platform/x86/intel/pmc/core.h
diff --cc drivers/platform/x86/intel/pmc/Makefile
index 8966fcdc0e1d,f96bc2e19503..000000000000
--- a/drivers/platform/x86/intel/pmc/Makefile
+++ b/drivers/platform/x86/intel/pmc/Makefile
@@@ -3,7 -3,8 +3,12 @@@
  # Intel x86 Platform-Specific Drivers
  #
  
++<<<<<<< HEAD
 +intel_pmc_core-y			:= core.o
++=======
+ intel_pmc_core-y			:= core.o spt.o cnp.o icl.o tgl.o \
+ 					   adl.o mtl.o
++>>>>>>> c5ad454a12c6 (platform/x86: intel/pmc/core: Add Meteor Lake support to pmc core driver)
  obj-$(CONFIG_INTEL_PMC_CORE)		+= intel_pmc_core.o
  intel_pmc_core_pltdrv-y			:= pltdrv.o
  obj-$(CONFIG_INTEL_PMC_CORE)		+= intel_pmc_core_pltdrv.o
diff --cc drivers/platform/x86/intel/pmc/core.c
index 91feda56a63c,f1d802f6ec3f..000000000000
--- a/drivers/platform/x86/intel/pmc/core.c
+++ b/drivers/platform/x86/intel/pmc/core.c
@@@ -1896,26 -1008,27 +1900,50 @@@ static void pmc_core_dbgfs_register(str
  }
  
  static const struct x86_cpu_id intel_pmc_core_ids[] = {
++<<<<<<< HEAD
 +	X86_MATCH_INTEL_FAM6_MODEL(SKYLAKE_L,		&spt_reg_map),
 +	X86_MATCH_INTEL_FAM6_MODEL(SKYLAKE,		&spt_reg_map),
 +	X86_MATCH_INTEL_FAM6_MODEL(KABYLAKE_L,		&spt_reg_map),
 +	X86_MATCH_INTEL_FAM6_MODEL(KABYLAKE,		&spt_reg_map),
 +	X86_MATCH_INTEL_FAM6_MODEL(CANNONLAKE_L,	&cnp_reg_map),
 +	X86_MATCH_INTEL_FAM6_MODEL(ICELAKE_L,		&icl_reg_map),
 +	X86_MATCH_INTEL_FAM6_MODEL(ICELAKE_NNPI,	&icl_reg_map),
 +	X86_MATCH_INTEL_FAM6_MODEL(COMETLAKE,		&cnp_reg_map),
 +	X86_MATCH_INTEL_FAM6_MODEL(COMETLAKE_L,		&cnp_reg_map),
 +	X86_MATCH_INTEL_FAM6_MODEL(TIGERLAKE_L,		&tgl_reg_map),
 +	X86_MATCH_INTEL_FAM6_MODEL(TIGERLAKE,		&tgl_reg_map),
 +	X86_MATCH_INTEL_FAM6_MODEL(ATOM_TREMONT,	&tgl_reg_map),
 +	X86_MATCH_INTEL_FAM6_MODEL(ATOM_TREMONT_L,	&icl_reg_map),
 +	X86_MATCH_INTEL_FAM6_MODEL(ROCKETLAKE,		&tgl_reg_map),
 +	X86_MATCH_INTEL_FAM6_MODEL(ALDERLAKE_L,		&tgl_reg_map),
 +	X86_MATCH_INTEL_FAM6_MODEL(ALDERLAKE_N,		&tgl_reg_map),
 +	X86_MATCH_INTEL_FAM6_MODEL(ALDERLAKE,		&adl_reg_map),
 +	X86_MATCH_INTEL_FAM6_MODEL(RAPTORLAKE_P,        &tgl_reg_map),
 +	X86_MATCH_INTEL_FAM6_MODEL(RAPTORLAKE,		&adl_reg_map),
 +	X86_MATCH_INTEL_FAM6_MODEL(RAPTORLAKE_S,	&adl_reg_map),
++=======
+ 	X86_MATCH_INTEL_FAM6_MODEL(SKYLAKE_L,		spt_core_init),
+ 	X86_MATCH_INTEL_FAM6_MODEL(SKYLAKE,		spt_core_init),
+ 	X86_MATCH_INTEL_FAM6_MODEL(KABYLAKE_L,		spt_core_init),
+ 	X86_MATCH_INTEL_FAM6_MODEL(KABYLAKE,		spt_core_init),
+ 	X86_MATCH_INTEL_FAM6_MODEL(CANNONLAKE_L,	cnp_core_init),
+ 	X86_MATCH_INTEL_FAM6_MODEL(ICELAKE_L,		icl_core_init),
+ 	X86_MATCH_INTEL_FAM6_MODEL(ICELAKE_NNPI,	icl_core_init),
+ 	X86_MATCH_INTEL_FAM6_MODEL(COMETLAKE,		cnp_core_init),
+ 	X86_MATCH_INTEL_FAM6_MODEL(COMETLAKE_L,		cnp_core_init),
+ 	X86_MATCH_INTEL_FAM6_MODEL(TIGERLAKE_L,		tgl_core_init),
+ 	X86_MATCH_INTEL_FAM6_MODEL(TIGERLAKE,		tgl_core_init),
+ 	X86_MATCH_INTEL_FAM6_MODEL(ATOM_TREMONT,	tgl_core_init),
+ 	X86_MATCH_INTEL_FAM6_MODEL(ATOM_TREMONT_L,	icl_core_init),
+ 	X86_MATCH_INTEL_FAM6_MODEL(ROCKETLAKE,		tgl_core_init),
+ 	X86_MATCH_INTEL_FAM6_MODEL(ALDERLAKE_L,		tgl_core_init),
+ 	X86_MATCH_INTEL_FAM6_MODEL(ALDERLAKE_N,		tgl_core_init),
+ 	X86_MATCH_INTEL_FAM6_MODEL(ALDERLAKE,		adl_core_init),
+ 	X86_MATCH_INTEL_FAM6_MODEL(RAPTORLAKE_P,        tgl_core_init),
+ 	X86_MATCH_INTEL_FAM6_MODEL(RAPTORLAKE,		adl_core_init),
+ 	X86_MATCH_INTEL_FAM6_MODEL(RAPTORLAKE_S,	adl_core_init),
+ 	X86_MATCH_INTEL_FAM6_MODEL(METEORLAKE,          mtl_core_init),
++>>>>>>> c5ad454a12c6 (platform/x86: intel/pmc/core: Add Meteor Lake support to pmc core driver)
  	{}
  };
  
diff --cc drivers/platform/x86/intel/pmc/core.h
index 9b74db59f43c,810204d758ab..000000000000
--- a/drivers/platform/x86/intel/pmc/core.h
+++ b/drivers/platform/x86/intel/pmc/core.h
@@@ -236,17 -238,17 +236,31 @@@ enum ppfear_regs 
  #define ADL_LPM_STATUS_LATCH_EN_OFFSET		0x1704
  #define ADL_LPM_LIVE_STATUS_OFFSET		0x1764
  
++<<<<<<< HEAD
 +const char *pmc_lpm_modes[] = {
 +	"S0i2.0",
 +	"S0i2.1",
 +	"S0i2.2",
 +	"S0i3.0",
 +	"S0i3.1",
 +	"S0i3.2",
 +	"S0i3.3",
 +	"S0i3.4",
 +	NULL
 +};
++=======
+ /* Meteor Lake Power Management Controller register offsets */
+ #define MTL_LPM_EN_OFFSET			0x1798
+ #define MTL_LPM_RESIDENCY_OFFSET		0x17A0
+ 
+ /* Meteor Lake Low Power Mode debug registers */
+ #define MTL_LPM_PRI_OFFSET			0x179C
+ #define MTL_LPM_STATUS_LATCH_EN_OFFSET		0x16F8
+ #define MTL_LPM_STATUS_OFFSET			0x1700
+ #define MTL_LPM_LIVE_STATUS_OFFSET		0x175C
+ 
+ extern const char *pmc_lpm_modes[];
++>>>>>>> c5ad454a12c6 (platform/x86: intel/pmc/core: Add Meteor Lake support to pmc core driver)
  
  struct pmc_bit_map {
  	const char *name;
@@@ -339,8 -344,70 +353,72 @@@ struct pmc_dev 
  	int num_lpm_modes;
  	int lpm_en_modes[LPM_MAX_NUM_MODES];
  	u32 *lpm_req_regs;
 -	void (*core_configure)(struct pmc_dev *pmcdev);
  };
  
++<<<<<<< HEAD
++=======
+ extern const struct pmc_bit_map msr_map[];
+ extern const struct pmc_bit_map spt_pll_map[];
+ extern const struct pmc_bit_map spt_mphy_map[];
+ extern const struct pmc_bit_map spt_pfear_map[];
+ extern const struct pmc_bit_map *ext_spt_pfear_map[];
+ extern const struct pmc_bit_map spt_ltr_show_map[];
+ extern const struct pmc_reg_map spt_reg_map;
+ extern const struct pmc_bit_map cnp_pfear_map[];
+ extern const struct pmc_bit_map *ext_cnp_pfear_map[];
+ extern const struct pmc_bit_map cnp_slps0_dbg0_map[];
+ extern const struct pmc_bit_map cnp_slps0_dbg1_map[];
+ extern const struct pmc_bit_map cnp_slps0_dbg2_map[];
+ extern const struct pmc_bit_map *cnp_slps0_dbg_maps[];
+ extern const struct pmc_bit_map cnp_ltr_show_map[];
+ extern const struct pmc_reg_map cnp_reg_map;
+ extern const struct pmc_bit_map icl_pfear_map[];
+ extern const struct pmc_bit_map *ext_icl_pfear_map[];
+ extern const struct pmc_reg_map icl_reg_map;
+ extern const struct pmc_bit_map tgl_pfear_map[];
+ extern const struct pmc_bit_map *ext_tgl_pfear_map[];
+ extern const struct pmc_bit_map tgl_clocksource_status_map[];
+ extern const struct pmc_bit_map tgl_power_gating_status_map[];
+ extern const struct pmc_bit_map tgl_d3_status_map[];
+ extern const struct pmc_bit_map tgl_vnn_req_status_map[];
+ extern const struct pmc_bit_map tgl_vnn_misc_status_map[];
+ extern const struct pmc_bit_map tgl_signal_status_map[];
+ extern const struct pmc_bit_map *tgl_lpm_maps[];
+ extern const struct pmc_reg_map tgl_reg_map;
+ extern const struct pmc_bit_map adl_pfear_map[];
+ extern const struct pmc_bit_map *ext_adl_pfear_map[];
+ extern const struct pmc_bit_map adl_ltr_show_map[];
+ extern const struct pmc_bit_map adl_clocksource_status_map[];
+ extern const struct pmc_bit_map adl_power_gating_status_0_map[];
+ extern const struct pmc_bit_map adl_power_gating_status_1_map[];
+ extern const struct pmc_bit_map adl_power_gating_status_2_map[];
+ extern const struct pmc_bit_map adl_d3_status_0_map[];
+ extern const struct pmc_bit_map adl_d3_status_1_map[];
+ extern const struct pmc_bit_map adl_d3_status_2_map[];
+ extern const struct pmc_bit_map adl_d3_status_3_map[];
+ extern const struct pmc_bit_map adl_vnn_req_status_0_map[];
+ extern const struct pmc_bit_map adl_vnn_req_status_1_map[];
+ extern const struct pmc_bit_map adl_vnn_req_status_2_map[];
+ extern const struct pmc_bit_map adl_vnn_req_status_3_map[];
+ extern const struct pmc_bit_map adl_vnn_misc_status_map[];
+ extern const struct pmc_bit_map *adl_lpm_maps[];
+ extern const struct pmc_reg_map adl_reg_map;
+ extern const struct pmc_reg_map mtl_reg_map;
+ 
+ extern void pmc_core_get_tgl_lpm_reqs(struct platform_device *pdev);
+ extern int pmc_core_send_ltr_ignore(struct pmc_dev *pmcdev, u32 value);
+ 
+ void spt_core_init(struct pmc_dev *pmcdev);
+ void cnp_core_init(struct pmc_dev *pmcdev);
+ void icl_core_init(struct pmc_dev *pmcdev);
+ void tgl_core_init(struct pmc_dev *pmcdev);
+ void adl_core_init(struct pmc_dev *pmcdev);
+ void mtl_core_init(struct pmc_dev *pmcdev);
+ void tgl_core_configure(struct pmc_dev *pmcdev);
+ void adl_core_configure(struct pmc_dev *pmcdev);
+ void mtl_core_configure(struct pmc_dev *pmcdev);
+ 
++>>>>>>> c5ad454a12c6 (platform/x86: intel/pmc/core: Add Meteor Lake support to pmc core driver)
  #define pmc_for_each_mode(i, mode, pmcdev)		\
  	for (i = 0, mode = pmcdev->lpm_en_modes[i];	\
  	     i < pmcdev->num_lpm_modes;			\
* Unmerged path drivers/platform/x86/intel/pmc/Makefile
* Unmerged path drivers/platform/x86/intel/pmc/core.c
* Unmerged path drivers/platform/x86/intel/pmc/core.h
diff --git a/drivers/platform/x86/intel/pmc/mtl.c b/drivers/platform/x86/intel/pmc/mtl.c
new file mode 100644
index 000000000000..eeb3bd8c2502
--- /dev/null
+++ b/drivers/platform/x86/intel/pmc/mtl.c
@@ -0,0 +1,52 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * This file contains platform specific structure definitions
+ * and init function used by Meteor Lake PCH.
+ *
+ * Copyright (c) 2022, Intel Corporation.
+ * All Rights Reserved.
+ *
+ */
+
+#include "core.h"
+
+const struct pmc_reg_map mtl_reg_map = {
+	.pfear_sts = ext_tgl_pfear_map,
+	.slp_s0_offset = CNP_PMC_SLP_S0_RES_COUNTER_OFFSET,
+	.slp_s0_res_counter_step = TGL_PMC_SLP_S0_RES_COUNTER_STEP,
+	.ltr_show_sts = adl_ltr_show_map,
+	.msr_sts = msr_map,
+	.ltr_ignore_offset = CNP_PMC_LTR_IGNORE_OFFSET,
+	.regmap_length = CNP_PMC_MMIO_REG_LEN,
+	.ppfear0_offset = CNP_PMC_HOST_PPFEAR0A,
+	.ppfear_buckets = ICL_PPFEAR_NUM_ENTRIES,
+	.pm_cfg_offset = CNP_PMC_PM_CFG_OFFSET,
+	.pm_read_disable_bit = CNP_PMC_READ_DISABLE_BIT,
+	.ltr_ignore_max = ADL_NUM_IP_IGN_ALLOWED,
+	.lpm_num_modes = ADL_LPM_NUM_MODES,
+	.lpm_num_maps = ADL_LPM_NUM_MAPS,
+	.lpm_res_counter_step_x2 = TGL_PMC_LPM_RES_COUNTER_STEP_X2,
+	.etr3_offset = ETR3_OFFSET,
+	.lpm_sts_latch_en_offset = MTL_LPM_STATUS_LATCH_EN_OFFSET,
+	.lpm_priority_offset = MTL_LPM_PRI_OFFSET,
+	.lpm_en_offset = MTL_LPM_EN_OFFSET,
+	.lpm_residency_offset = MTL_LPM_RESIDENCY_OFFSET,
+	.lpm_sts = adl_lpm_maps,
+	.lpm_status_offset = MTL_LPM_STATUS_OFFSET,
+	.lpm_live_status_offset = MTL_LPM_LIVE_STATUS_OFFSET,
+};
+
+void mtl_core_configure(struct pmc_dev *pmcdev)
+{
+	/* Due to a hardware limitation, the GBE LTR blocks PC10
+	 * when a cable is attached. Tell the PMC to ignore it.
+	 */
+	dev_dbg(&pmcdev->pdev->dev, "ignoring GBE LTR\n");
+	pmc_core_send_ltr_ignore(pmcdev, 3);
+}
+
+void mtl_core_init(struct pmc_dev *pmcdev)
+{
+	pmcdev->map = &mtl_reg_map;
+	pmcdev->core_configure = mtl_core_configure;
+}
