ALSA: rawmidi: Don't embed device

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-536.el8
commit-author Takashi Iwai <tiwai@suse.de>
commit ea29a02fd802d8df8202819f0a50d4ebb960bb2a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-536.el8/ea29a02f.failed

This patch detaches the struct device from the snd_rawmidi object by
allocating via snd_device_alloc(), just like done for other devices.

	Reviewed-by: Jaroslav Kysela <perex@perex.cz>
	Signed-off-by: Curtis Malainey <cujomalainey@chromium.org>
	Tested-by: Curtis Malainey <cujomalainey@chromium.org>
Link: https://lore.kernel.org/r/20230816160252.23396-6-tiwai@suse.de
	Signed-off-by: Takashi Iwai <tiwai@suse.de>
(cherry picked from commit ea29a02fd802d8df8202819f0a50d4ebb960bb2a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	sound/core/rawmidi.c
#	sound/core/ump.c
diff --cc sound/core/rawmidi.c
index 500293b0d088,ba06484ac4aa..000000000000
--- a/sound/core/rawmidi.c
+++ b/sound/core/rawmidi.c
@@@ -1792,10 -1877,56 +1792,63 @@@ static int snd_rawmidi_alloc_substreams
  	return 0;
  }
  
++<<<<<<< HEAD
 +static void release_rawmidi_device(struct device *dev)
 +{
 +	kfree(container_of(dev, struct snd_rawmidi, dev));
 +}
++=======
+ /* used for both rawmidi and ump */
+ int snd_rawmidi_init(struct snd_rawmidi *rmidi,
+ 		     struct snd_card *card, char *id, int device,
+ 		     int output_count, int input_count,
+ 		     unsigned int info_flags)
+ {
+ 	int err;
+ 	static const struct snd_device_ops ops = {
+ 		.dev_free = snd_rawmidi_dev_free,
+ 		.dev_register = snd_rawmidi_dev_register,
+ 		.dev_disconnect = snd_rawmidi_dev_disconnect,
+ 	};
+ 
+ 	rmidi->card = card;
+ 	rmidi->device = device;
+ 	mutex_init(&rmidi->open_mutex);
+ 	init_waitqueue_head(&rmidi->open_wait);
+ 	INIT_LIST_HEAD(&rmidi->streams[SNDRV_RAWMIDI_STREAM_INPUT].substreams);
+ 	INIT_LIST_HEAD(&rmidi->streams[SNDRV_RAWMIDI_STREAM_OUTPUT].substreams);
+ 	rmidi->info_flags = info_flags;
+ 
+ 	if (id != NULL)
+ 		strscpy(rmidi->id, id, sizeof(rmidi->id));
+ 
+ 	err = snd_device_alloc(&rmidi->dev, card);
+ 	if (err < 0)
+ 		return err;
+ 	if (rawmidi_is_ump(rmidi))
+ 		dev_set_name(rmidi->dev, "umpC%iD%i", card->number, device);
+ 	else
+ 		dev_set_name(rmidi->dev, "midiC%iD%i", card->number, device);
+ 
+ 	err = snd_rawmidi_alloc_substreams(rmidi,
+ 					   &rmidi->streams[SNDRV_RAWMIDI_STREAM_INPUT],
+ 					   SNDRV_RAWMIDI_STREAM_INPUT,
+ 					   input_count);
+ 	if (err < 0)
+ 		return err;
+ 	err = snd_rawmidi_alloc_substreams(rmidi,
+ 					   &rmidi->streams[SNDRV_RAWMIDI_STREAM_OUTPUT],
+ 					   SNDRV_RAWMIDI_STREAM_OUTPUT,
+ 					   output_count);
+ 	if (err < 0)
+ 		return err;
+ 	err = snd_device_new(card, SNDRV_DEV_RAWMIDI, rmidi, &ops);
+ 	if (err < 0)
+ 		return err;
+ 	return 0;
+ }
+ EXPORT_SYMBOL_GPL(snd_rawmidi_init);
++>>>>>>> ea29a02fd802 (ALSA: rawmidi: Don't embed device)
  
  /**
   * snd_rawmidi_new - create a rawmidi instance
@@@ -1895,9 -1992,11 +1948,10 @@@ static int snd_rawmidi_free(struct snd_
  	snd_rawmidi_free_substreams(&rmidi->streams[SNDRV_RAWMIDI_STREAM_OUTPUT]);
  	if (rmidi->private_free)
  		rmidi->private_free(rmidi);
- 	put_device(&rmidi->dev);
+ 	put_device(rmidi->dev);
+ 	kfree(rmidi);
  	return 0;
  }
 -EXPORT_SYMBOL_GPL(snd_rawmidi_free);
  
  static int snd_rawmidi_dev_free(struct snd_device *device)
  {
* Unmerged path sound/core/ump.c
diff --git a/include/sound/rawmidi.h b/include/sound/rawmidi.h
index 52b1cbfb2526..3eee0259711c 100644
--- a/include/sound/rawmidi.h
+++ b/include/sound/rawmidi.h
@@ -129,7 +129,7 @@ struct snd_rawmidi {
 	struct mutex open_mutex;
 	wait_queue_head_t open_wait;
 
-	struct device dev;
+	struct device *dev;
 
 	struct snd_info_entry *proc_entry;
 
* Unmerged path sound/core/rawmidi.c
* Unmerged path sound/core/ump.c
