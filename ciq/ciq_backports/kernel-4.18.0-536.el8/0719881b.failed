x86/hyperv: Fix serial console interrupts for fully enlightened TDX guests

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-536.el8
commit-author Dexuan Cui <decui@microsoft.com>
commit 0719881bf891cc72bf4375a9f4849d52772c80c6
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-536.el8/0719881b.failed

When a fully enlightened TDX guest runs on Hyper-V, the UEFI firmware sets
the HW_REDUCED flag and consequently ttyS0 interrupts can't work. Fix the
issue by overriding x86_init.acpi.reduced_hw_early_init().

	Reviewed-by: Michael Kelley <mikelley@microsoft.com>
	Reviewed-by: Tianyu Lan <tiala@microsoft.com>
	Signed-off-by: Dexuan Cui <decui@microsoft.com>
	Signed-off-by: Wei Liu <wei.liu@kernel.org>
Link: https://lore.kernel.org/r/20230824080712.30327-5-decui@microsoft.com
(cherry picked from commit 0719881bf891cc72bf4375a9f4849d52772c80c6)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kernel/cpu/mshyperv.c
diff --cc arch/x86/kernel/cpu/mshyperv.c
index 1189865ffc68,fe5393d759d3..000000000000
--- a/arch/x86/kernel/cpu/mshyperv.c
+++ b/arch/x86/kernel/cpu/mshyperv.c
@@@ -300,8 -286,63 +300,28 @@@ static void __init hv_smp_prepare_boot_
  	hv_init_spinlocks();
  #endif
  }
 -
 -static void __init hv_smp_prepare_cpus(unsigned int max_cpus)
 -{
 -#ifdef CONFIG_X86_64
 -	int i;
 -	int ret;
 -#endif
 -
 -	native_smp_prepare_cpus(max_cpus);
 -
 -	/*
 -	 *  Override wakeup_secondary_cpu_64 callback for SEV-SNP
 -	 *  enlightened guest.
 -	 */
 -	if (hv_isolation_type_en_snp()) {
 -		apic->wakeup_secondary_cpu_64 = hv_snp_boot_ap;
 -		return;
 -	}
 -
 -#ifdef CONFIG_X86_64
 -	for_each_present_cpu(i) {
 -		if (i == 0)
 -			continue;
 -		ret = hv_call_add_logical_proc(numa_cpu_node(i), i, cpu_physical_id(i));
 -		BUG_ON(ret);
 -	}
 -
 -	for_each_present_cpu(i) {
 -		if (i == 0)
 -			continue;
 -		ret = hv_call_create_vp(numa_cpu_node(i), hv_current_partition_id, i, i);
 -		BUG_ON(ret);
 -	}
 -#endif
 -}
  #endif
  
+ /*
+  * When a fully enlightened TDX VM runs on Hyper-V, the firmware sets the
+  * HW_REDUCED flag: refer to acpi_tb_create_local_fadt(). Consequently ttyS0
+  * interrupts can't work because request_irq() -> ... -> irq_to_desc() returns
+  * NULL for ttyS0. This happens because mp_config_acpi_legacy_irqs() sees a
+  * nr_legacy_irqs() of 0, so it doesn't initialize the array 'mp_irqs[]', and
+  * later setup_IO_APIC_irqs() -> find_irq_entry() fails to find the legacy irqs
+  * from the array and hence doesn't create the necessary irq description info.
+  *
+  * Clone arch/x86/kernel/acpi/boot.c: acpi_generic_reduced_hw_init() here,
+  * except don't change 'legacy_pic', which keeps its default value
+  * 'default_legacy_pic'. This way, mp_config_acpi_legacy_irqs() sees a non-zero
+  * nr_legacy_irqs() and eventually serial console interrupts works properly.
+  */
+ static void __init reduced_hw_init(void)
+ {
+ 	x86_init.timers.timer_init	= x86_init_noop;
+ 	x86_init.irqs.pre_vector_init	= x86_init_noop;
+ }
+ 
  static void __init ms_hyperv_init_platform(void)
  {
  	int hv_max_functions_eax;
@@@ -385,16 -432,30 +405,41 @@@
  		pr_info("Hyper-V: Isolation Config: Group A 0x%x, Group B 0x%x\n",
  			ms_hyperv.isolation_config_a, ms_hyperv.isolation_config_b);
  
 -
  		if (hv_get_isolation_type() == HV_ISOLATION_TYPE_SNP) {
++<<<<<<< HEAD
 +			static_branch_enable(&isolation_type_snp);
 +#ifdef CONFIG_SWIOTLB
 +			swiotlb_unencrypted_base = ms_hyperv.shared_gpa_boundary;
 +#endif
 +		}
 +		/* Isolation VMs are unenlightened SEV-based VMs, thus this check: */
 +		if (IS_ENABLED(CONFIG_AMD_MEM_ENCRYPT)) {
 +			if (hv_get_isolation_type() != HV_ISOLATION_TYPE_NONE)
 +				cc_set_vendor(CC_VENDOR_HYPERV);
++=======
+ 			if (ms_hyperv.paravisor_present)
+ 				static_branch_enable(&isolation_type_snp);
+ 			else
+ 				static_branch_enable(&isolation_type_en_snp);
+ 		} else if (hv_get_isolation_type() == HV_ISOLATION_TYPE_TDX) {
+ 			static_branch_enable(&isolation_type_tdx);
+ 
+ 			/* A TDX VM must use x2APIC and doesn't use lazy EOI. */
+ 			ms_hyperv.hints &= ~HV_X64_APIC_ACCESS_RECOMMENDED;
+ 
+ 			if (!ms_hyperv.paravisor_present) {
+ 				/* To be supported: more work is required.  */
+ 				ms_hyperv.features &= ~HV_MSR_REFERENCE_TSC_AVAILABLE;
+ 
+ 				/* HV_REGISTER_CRASH_CTL is unsupported. */
+ 				ms_hyperv.misc_features &= ~HV_FEATURE_GUEST_CRASH_MSR_AVAILABLE;
+ 
+ 				/* Don't trust Hyper-V's TLB-flushing hypercalls. */
+ 				ms_hyperv.hints &= ~HV_X64_REMOTE_TLB_FLUSH_RECOMMENDED;
+ 
+ 				x86_init.acpi.reduced_hw_early_init = reduced_hw_init;
+ 			}
++>>>>>>> 0719881bf891 (x86/hyperv: Fix serial console interrupts for fully enlightened TDX guests)
  		}
  	}
  
* Unmerged path arch/x86/kernel/cpu/mshyperv.c
