md/raid1-10: factor out a helper to add bio to plug

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-536.el8
commit-author Yu Kuai <yukuai3@huawei.com>
commit 5ec6ca140a034682e421e2e808ef5ddfdfd65242
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-536.el8/5ec6ca14.failed

The code in raid1 and raid10 is identical, prepare to limit the number
of plugged bios.

	Signed-off-by: Yu Kuai <yukuai3@huawei.com>
	Signed-off-by: Song Liu <song@kernel.org>
Link: https://lore.kernel.org/r/20230529131106.2123367-3-yukuai1@huaweicloud.com
(cherry picked from commit 5ec6ca140a034682e421e2e808ef5ddfdfd65242)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/md/raid1.c
#	drivers/md/raid10.c
diff --cc drivers/md/raid1.c
index f1e614f61aa9,92180f3a9f28..000000000000
--- a/drivers/md/raid1.c
+++ b/drivers/md/raid1.c
@@@ -1621,24 -1570,13 +1619,29 @@@ static void raid1_write_request(struct 
  		atomic_inc(&r1_bio->remaining);
  
  		if (mddev->gendisk)
 -			trace_block_bio_remap(mbio, disk_devt(mddev->gendisk),
 +			trace_block_bio_remap(mbio->bi_disk->queue,
 +					      mbio, disk_devt(mddev->gendisk),
  					      r1_bio->sector);
  		/* flush_pending_writes() needs access to the rdev so...*/
++<<<<<<< HEAD
 +		mbio->bi_disk = (void *)rdev;
 +
 +		cb = blk_check_plugged(raid1_unplug, mddev, sizeof(*plug));
 +		if (cb)
 +			plug = container_of(cb, struct raid1_plug_cb, cb);
 +		else
 +			plug = NULL;
 +		if (plug) {
 +			bio_list_add(&plug->pending, mbio);
 +			plug->pending_cnt++;
 +		} else {
++=======
+ 		mbio->bi_bdev = (void *)rdev;
+ 		if (!raid1_add_bio_to_plug(mddev, mbio, raid1_unplug)) {
++>>>>>>> 5ec6ca140a03 (md/raid1-10: factor out a helper to add bio to plug)
  			spin_lock_irqsave(&conf->device_lock, flags);
  			bio_list_add(&conf->pending_bio_list, mbio);
 +			conf->pending_count++;
  			spin_unlock_irqrestore(&conf->device_lock, flags);
  			md_wakeup_thread(mddev->thread);
  		}
diff --cc drivers/md/raid10.c
index adefeb0e43ad,b8223da15ca9..000000000000
--- a/drivers/md/raid10.c
+++ b/drivers/md/raid10.c
@@@ -1326,12 -1291,10 +1326,15 @@@ static void raid10_write_one_disk(struc
  				  struct bio *bio, bool replacement,
  				  int n_copy)
  {
 -	const enum req_op op = bio_op(bio);
 -	const blk_opf_t do_sync = bio->bi_opf & REQ_SYNC;
 -	const blk_opf_t do_fua = bio->bi_opf & REQ_FUA;
 +	const int op = bio_op(bio);
 +	const unsigned long do_sync = (bio->bi_opf & REQ_SYNC);
 +	const unsigned long do_fua = (bio->bi_opf & REQ_FUA);
  	unsigned long flags;
++<<<<<<< HEAD
 +	struct blk_plug_cb *cb;
 +	struct raid10_plug_cb *plug = NULL;
++=======
++>>>>>>> 5ec6ca140a03 (md/raid1-10: factor out a helper to add bio to plug)
  	struct r10conf *conf = mddev->private;
  	struct md_rdev *rdev;
  	int devnum = r10_bio->devs[n_copy].devnum;
@@@ -1373,18 -1334,9 +1376,22 @@@
  
  	atomic_inc(&r10_bio->remaining);
  
++<<<<<<< HEAD
 +	cb = blk_check_plugged(raid10_unplug, mddev, sizeof(*plug));
 +	if (cb)
 +		plug = container_of(cb, struct raid10_plug_cb, cb);
 +	else
 +		plug = NULL;
 +	if (plug) {
 +		bio_list_add(&plug->pending, mbio);
 +		plug->pending_cnt++;
 +	} else {
++=======
+ 	if (!raid1_add_bio_to_plug(mddev, mbio, raid10_unplug)) {
++>>>>>>> 5ec6ca140a03 (md/raid1-10: factor out a helper to add bio to plug)
  		spin_lock_irqsave(&conf->device_lock, flags);
  		bio_list_add(&conf->pending_bio_list, mbio);
 +		conf->pending_count++;
  		spin_unlock_irqrestore(&conf->device_lock, flags);
  		md_wakeup_thread(mddev->thread);
  	}
diff --git a/drivers/md/raid1-10.c b/drivers/md/raid1-10.c
index b2d6a269dec4..868a3aeb9875 100644
--- a/drivers/md/raid1-10.c
+++ b/drivers/md/raid1-10.c
@@ -111,3 +111,19 @@ static void md_bio_reset_resync_pages(struct bio *bio, struct resync_pages *rp,
 		size -= len;
 	} while (idx++ < RESYNC_PAGES && size > 0);
 }
+
+static inline bool raid1_add_bio_to_plug(struct mddev *mddev, struct bio *bio,
+				      blk_plug_cb_fn unplug)
+{
+	struct raid1_plug_cb *plug = NULL;
+	struct blk_plug_cb *cb = blk_check_plugged(unplug, mddev,
+						   sizeof(*plug));
+
+	if (!cb)
+		return false;
+
+	plug = container_of(cb, struct raid1_plug_cb, cb);
+	bio_list_add(&plug->pending, bio);
+
+	return true;
+}
* Unmerged path drivers/md/raid1.c
* Unmerged path drivers/md/raid10.c
