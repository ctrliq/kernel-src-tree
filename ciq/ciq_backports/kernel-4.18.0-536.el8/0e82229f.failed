ASoC: intel: sof_sdw: Update DLC index each time one is added

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-536.el8
commit-author Charles Keepax <ckeepax@opensource.cirrus.com>
commit 0e82229fb74a26cfaf6ae3772cbdefdb643f98a5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-536.el8/0e82229f.failed

In create_sdw_dailink, rather than bulk updating the index into the
DAI link components array, at the end of processing a link, do so each
time the code adds a new component. This simplifies things slightly,
as an intermediate variable is no longer needed to track the current
place in the DAI link components array.

	Reviewed-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
	Reviewed-by: Bard Liao <yung-chuan.liao@linux.intel.com>
	Signed-off-by: Charles Keepax <ckeepax@opensource.cirrus.com>
Link: https://lore.kernel.org/r/20230808132013.889419-7-ckeepax@opensource.cirrus.com
	Signed-off-by: Mark Brown <broonie@kernel.org>
(cherry picked from commit 0e82229fb74a26cfaf6ae3772cbdefdb643f98a5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	sound/soc/intel/boards/sof_sdw.c
diff --cc sound/soc/intel/boards/sof_sdw.c
index 5f6ef7f8be22,b381fb261994..000000000000
--- a/sound/soc/intel/boards/sof_sdw.c
+++ b/sound/soc/intel/boards/sof_sdw.c
@@@ -1382,18 -1377,44 +1382,56 @@@ static int create_sdw_dailink(struct sn
  			continue;
  
  		/* skip the link excluded by this processed group */
 -		if (cpu_dai_id[i] != ffs(adr_link_next->mask) - 1)
 +		if (cpu_dai_id[i] != ffs(link_next->mask) - 1)
  			continue;
  
++<<<<<<< HEAD
 +		ret = create_codec_dai_name(dev, link_next, codecs, codec_idx,
 +					    codec_conf, codec_count, codec_conf_index,
 +					    adr_index, dai_index);
 +		if (ret < 0)
 +			return ret;
 +
 +		/* check next link to create codec dai in the processed group */
 +		i++;
 +		codec_idx += link_next->num_adr;
++=======
+ 		/* sanity check */
+ 		if (*codec_conf_index + adr_link_next->num_adr - adr_index > codec_count) {
+ 			dev_err(dev, "codec_conf: out-of-bounds access requested\n");
+ 			return -EINVAL;
+ 		}
+ 
+ 		for (j = adr_index; j < adr_link_next->num_adr; j++) {
+ 			int codec_index;
+ 			u64 adr = adr_link_next->adr_d[j].adr;
+ 
+ 			codec_index = find_codec_info_part(adr);
+ 			if (codec_index < 0)
+ 				return codec_index;
+ 			if (_codec_index != -1 && codec_index != _codec_index) {
+ 				dev_dbg(dev, "Different devices on the same sdw link\n");
+ 				break;
+ 			}
+ 			_codec_index = codec_index;
+ 
+ 			ret = fill_sdw_codec_dlc(dev, adr_link_next,
+ 						 &codecs[codec_dlc_index],
+ 						 codec_index, j, dai_index);
+ 			if (ret)
+ 				return ret;
+ 
+ 			codec_conf[*codec_conf_index].dlc = codecs[codec_dlc_index];
+ 			codec_conf[*codec_conf_index].name_prefix =
+ 					adr_link_next->adr_d[j].name_prefix;
+ 
+ 			codec_dlc_index++;
+ 			(*codec_conf_index)++;
+ 		}
+ 
+ 		/* check next link to create codec dai in the processed group */
+ 		i++;
++>>>>>>> 0e82229fb74a (ASoC: intel: sof_sdw: Update DLC index each time one is added)
  	}
  
  	/* find codec info to create BE DAI */
* Unmerged path sound/soc/intel/boards/sof_sdw.c
