md/raid1-10: factor out a helper to submit normal write

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-536.el8
commit-author Yu Kuai <yukuai3@huawei.com>
commit 8295efbe68c080047e98d9c0eb5cb933b238a8cb
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-536.el8/8295efbe.failed

There are multiple places to do the same thing, factor out a helper to
prevent redundant code, and the helper will be used in following patch
as well.

	Signed-off-by: Yu Kuai <yukuai3@huawei.com>
	Signed-off-by: Song Liu <song@kernel.org>
Link: https://lore.kernel.org/r/20230529131106.2123367-4-yukuai1@huaweicloud.com
(cherry picked from commit 8295efbe68c080047e98d9c0eb5cb933b238a8cb)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/md/raid1-10.c
#	drivers/md/raid1.c
#	drivers/md/raid10.c
diff --cc drivers/md/raid1-10.c
index b2d6a269dec4,21b0ff3ca4f0..000000000000
--- a/drivers/md/raid1-10.c
+++ b/drivers/md/raid1-10.c
@@@ -111,3 -110,36 +111,39 @@@ static void md_bio_reset_resync_pages(s
  		size -= len;
  	} while (idx++ < RESYNC_PAGES && size > 0);
  }
++<<<<<<< HEAD
++=======
+ 
+ 
+ static inline void raid1_submit_write(struct bio *bio)
+ {
+ 	struct md_rdev *rdev = (struct md_rdev *)bio->bi_bdev;
+ 
+ 	bio->bi_next = NULL;
+ 	bio_set_dev(bio, rdev->bdev);
+ 	if (test_bit(Faulty, &rdev->flags))
+ 		bio_io_error(bio);
+ 	else if (unlikely(bio_op(bio) ==  REQ_OP_DISCARD &&
+ 			  !bdev_max_discard_sectors(bio->bi_bdev)))
+ 		/* Just ignore it */
+ 		bio_endio(bio);
+ 	else
+ 		submit_bio_noacct(bio);
+ }
+ 
+ static inline bool raid1_add_bio_to_plug(struct mddev *mddev, struct bio *bio,
+ 				      blk_plug_cb_fn unplug)
+ {
+ 	struct raid1_plug_cb *plug = NULL;
+ 	struct blk_plug_cb *cb = blk_check_plugged(unplug, mddev,
+ 						   sizeof(*plug));
+ 
+ 	if (!cb)
+ 		return false;
+ 
+ 	plug = container_of(cb, struct raid1_plug_cb, cb);
+ 	bio_list_add(&plug->pending, bio);
+ 
+ 	return true;
+ }
++>>>>>>> 8295efbe68c0 (md/raid1-10: factor out a helper to submit normal write)
diff --cc drivers/md/raid1.c
index f1e614f61aa9,c6b2abb7d185..000000000000
--- a/drivers/md/raid1.c
+++ b/drivers/md/raid1.c
@@@ -835,17 -799,8 +835,22 @@@ static void flush_bio_list(struct r1con
  
  	while (bio) { /* submit pending writes */
  		struct bio *next = bio->bi_next;
++<<<<<<< HEAD
 +		struct md_rdev *rdev = (void *)bio->bi_disk;
 +		bio->bi_next = NULL;
 +		bio_set_dev(bio, rdev->bdev);
 +		if (test_bit(Faulty, &rdev->flags)) {
 +			bio_io_error(bio);
 +		} else if (unlikely((bio_op(bio) == REQ_OP_DISCARD) &&
 +				    !blk_queue_discard(bio->bi_disk->queue)))
 +			/* Just ignore it */
 +			bio_endio(bio);
 +		else
 +			generic_make_request(bio);
++=======
+ 
+ 		raid1_submit_write(bio);
++>>>>>>> 8295efbe68c0 (md/raid1-10: factor out a helper to submit normal write)
  		bio = next;
  		cond_resched();
  	}
diff --cc drivers/md/raid10.c
index adefeb0e43ad,21cdb85baba4..000000000000
--- a/drivers/md/raid10.c
+++ b/drivers/md/raid10.c
@@@ -946,17 -917,8 +946,22 @@@ static void flush_pending_writes(struc
  
  		while (bio) { /* submit pending writes */
  			struct bio *next = bio->bi_next;
++<<<<<<< HEAD
 +			struct md_rdev *rdev = (void*)bio->bi_disk;
 +			bio->bi_next = NULL;
 +			bio_set_dev(bio, rdev->bdev);
 +			if (test_bit(Faulty, &rdev->flags)) {
 +				bio_io_error(bio);
 +			} else if (unlikely((bio_op(bio) ==  REQ_OP_DISCARD) &&
 +					    !blk_queue_discard(bio->bi_disk->queue)))
 +				/* Just ignore it */
 +				bio_endio(bio);
 +			else
 +				generic_make_request(bio);
++=======
+ 
+ 			raid1_submit_write(bio);
++>>>>>>> 8295efbe68c0 (md/raid1-10: factor out a helper to submit normal write)
  			bio = next;
  			cond_resched();
  		}
@@@ -1176,17 -1133,8 +1181,22 @@@ static void raid10_unplug(struct blk_pl
  
  	while (bio) { /* submit pending writes */
  		struct bio *next = bio->bi_next;
++<<<<<<< HEAD
 +		struct md_rdev *rdev = (void*)bio->bi_disk;
 +		bio->bi_next = NULL;
 +		bio_set_dev(bio, rdev->bdev);
 +		if (test_bit(Faulty, &rdev->flags)) {
 +			bio_io_error(bio);
 +		} else if (unlikely((bio_op(bio) ==  REQ_OP_DISCARD) &&
 +				    !blk_queue_discard(bio->bi_disk->queue)))
 +			/* Just ignore it */
 +			bio_endio(bio);
 +		else
 +			generic_make_request(bio);
++=======
+ 
+ 		raid1_submit_write(bio);
++>>>>>>> 8295efbe68c0 (md/raid1-10: factor out a helper to submit normal write)
  		bio = next;
  		cond_resched();
  	}
* Unmerged path drivers/md/raid1-10.c
* Unmerged path drivers/md/raid1.c
* Unmerged path drivers/md/raid10.c
