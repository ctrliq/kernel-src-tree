ASoC: intel: sof_sdw: Stop processing CODECs when enough are found

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-536.el8
commit-author Charles Keepax <ckeepax@opensource.cirrus.com>
commit 28809aaeabdf2c01ffe597553146527d1fba3589
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-536.el8/28809aae.failed

When adding CODECs to a DAI link, the code should stop processing more
CODECs when the expected number of CODECs are discovered. This fixes a
small corner case issue introduced when support for different devices
on the same SoundWire link was added. In the case of aggregated
devices everything is fine, as all devices intended for the DAI link
will be marked with the same group and any not intended for that DAI
are skipped by the group check. However for non-aggregated devices the
group check is bypassed and the current code does not stop after it
has found the first device. Meaning if additional non-aggregated devices
are present on the same SoundWire link they will be erroneously added
into the DAI link.

Fix this issue, and provide a small optimisation by ceasing to process
devices once we have reached the required number of devices for the
current DAI link.

Fixes: 317dcdecaf7a ("ASoC: intel: sof_sdw: Allow different devices on the same link")
	Signed-off-by: Charles Keepax <ckeepax@opensource.cirrus.com>
	Reviewed-by: Bard Liao <yung-chuan.liao@linux.intel.com>
	Signed-off-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
Link: https://lore.kernel.org/r/20231019173411.166759-2-pierre-louis.bossart@linux.intel.com
	Signed-off-by: Mark Brown <broonie@kernel.org>
(cherry picked from commit 28809aaeabdf2c01ffe597553146527d1fba3589)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	sound/soc/intel/boards/sof_sdw.c
diff --cc sound/soc/intel/boards/sof_sdw.c
index b94e85011b64,ad1d01ebbcd9..000000000000
--- a/sound/soc/intel/boards/sof_sdw.c
+++ b/sound/soc/intel/boards/sof_sdw.c
@@@ -1382,24 -1401,43 +1382,30 @@@ static int create_sdw_dailink(struct sn
  		return -ENOMEM;
  
  	/* generate codec name on different links in the same group */
 -	j = adr_index;
 -	for (adr_link_next = adr_link; adr_link_next && adr_link_next->num_adr &&
 -	     i < cpu_dai_num; adr_link_next++) {
 -		/* skip the link excluded by this processed group */
 -		if (cpu_dai_id[i] != ffs(adr_link_next->mask) - 1)
 +	for (link_next = link; link_next && link_next->num_adr &&
 +	     i < cpu_dai_num; link_next++) {
 +		const struct snd_soc_acpi_endpoint *endpoints;
 +
 +		endpoints = link_next->adr_d->endpoints;
 +		if (group_id && (!endpoints->aggregated ||
 +				 endpoints->group_id != group_id))
  			continue;
  
++<<<<<<< HEAD
 +		/* skip the link excluded by this processed group */
 +		if (cpu_dai_id[i] != ffs(link_next->mask) - 1)
 +			continue;
++=======
+ 		/* j reset after loop, adr_index only applies to first link */
+ 		for (; j < adr_link_next->num_adr && codec_dlc_index < codec_num; j++) {
+ 			const struct snd_soc_acpi_endpoint *endpoints;
++>>>>>>> 28809aaeabdf (ASoC: intel: sof_sdw: Stop processing CODECs when enough are found)
  
 -			endpoints = adr_link_next->adr_d[j].endpoints;
 -
 -			if (group_id && (!endpoints->aggregated ||
 -					 endpoints->group_id != group_id))
 -				continue;
 -
 -			/* sanity check */
 -			if (*codec_conf_index >= codec_count) {
 -				dev_err(dev, "codec_conf array overflowed\n");
 -				return -EINVAL;
 -			}
 -
 -			ret = fill_sdw_codec_dlc(dev, adr_link_next,
 -						 &codecs[codec_dlc_index],
 -						 j, dai_index);
 -			if (ret)
 -				return ret;
 -
 -			codec_conf[*codec_conf_index].dlc = codecs[codec_dlc_index];
 -			codec_conf[*codec_conf_index].name_prefix =
 -					adr_link_next->adr_d[j].name_prefix;
 -
 -			codec_dlc_index++;
 -			(*codec_conf_index)++;
 -		}
 -		j = 0;
 +		ret = create_codec_dai_name(dev, link_next, codecs, codec_idx,
 +					    codec_conf, codec_count, codec_conf_index,
 +					    adr_index, dai_index);
 +		if (ret < 0)
 +			return ret;
  
  		/* check next link to create codec dai in the processed group */
  		i++;
* Unmerged path sound/soc/intel/boards/sof_sdw.c
