ASoC: intel: sof_sdw: Merge codec_conf_alloc into dailink_info

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-536.el8
commit-author Charles Keepax <ckeepax@opensource.cirrus.com>
commit a386162e7dc2c8bc1be2777b1c6d41156f69b210
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-536.el8/a386162e.failed

Rename get_sdw_dailink_info to simply get_dailink_info and have it also
return the number of codecs present. Then hoist the allocation of the
codec conf structure up into sof_card_dai_links_create. This saves an
extra loop through the adr_link array, allows us to get rid of
sof_card_codec_conf_alloc and makes the allocation more explicit.

	Reviewed-by: Ranjani Sridharan <ranjani.sridharan@linux.intel.com>
	Reviewed-by: Bard Liao <yung-chuan.liao@linux.intel.com>
	Signed-off-by: Charles Keepax <ckeepax@opensource.cirrus.com>
	Signed-off-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
Link: https://lore.kernel.org/r/20230731214257.444605-23-pierre-louis.bossart@linux.intel.com
	Signed-off-by: Mark Brown <broonie@kernel.org>
(cherry picked from commit a386162e7dc2c8bc1be2777b1c6d41156f69b210)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	sound/soc/intel/boards/sof_sdw.c
diff --cc sound/soc/intel/boards/sof_sdw.c
index 1d39756d780e,25644eff5251..000000000000
--- a/sound/soc/intel/boards/sof_sdw.c
+++ b/sound/soc/intel/boards/sof_sdw.c
@@@ -998,10 -1027,10 +998,16 @@@ static inline int find_codec_info_acpi(
   * Since some sdw slaves may be aggregated, the CPU DAI number
   * may be larger than the number of BE dailinks.
   */
++<<<<<<< HEAD
 +static int get_sdw_dailink_info(struct device *dev, const struct snd_soc_acpi_link_adr *links,
 +				int *sdw_be_num, int *sdw_cpu_dai_num)
++=======
+ static int get_dailink_info(struct device *dev,
+ 			    const struct snd_soc_acpi_link_adr *adr_link,
+ 			    int *sdw_be_num, int *sdw_cpu_dai_num, int *codecs_num)
++>>>>>>> a386162e7dc2 (ASoC: intel: sof_sdw: Merge codec_conf_alloc into dailink_info)
  {
 +	const struct snd_soc_acpi_link_adr *link;
  	bool group_visited[SDW_MAX_GROUPS];
  	bool no_aggregation;
  	int i;
@@@ -1029,9 -1058,18 +1035,22 @@@
  			codec_index = find_codec_info_part(adr);
  			if (codec_index < 0)
  				return codec_index;
+ 
  			codec_info = &codec_info_list[codec_index];
  
++<<<<<<< HEAD
 +			endpoint = link->adr_d[i].endpoints;
++=======
+ 			*codecs_num += codec_info->dai_num;
+ 
+ 			if (!adr_link->adr_d[i].name_prefix) {
+ 				dev_err(dev, "codec 0x%llx does not have a name prefix\n",
+ 					adr_link->adr_d[i].adr);
+ 				return -EINVAL;
+ 			}
+ 
+ 			endpoint = adr_link->adr_d[i].endpoints;
++>>>>>>> a386162e7dc2 (ASoC: intel: sof_sdw: Merge codec_conf_alloc into dailink_info)
  
  			for (j = 0; j < codec_info->dai_num; j++) {
  				/* count DAI number for playback and capture */
@@@ -1508,51 -1549,11 +1527,55 @@@ static int create_sdw_dailink(struct sn
  
  #define IDISP_CODEC_MASK	0x4
  
++<<<<<<< HEAD
 +static int sof_card_codec_conf_alloc(struct device *dev,
 +				     struct snd_soc_acpi_mach_params *mach_params,
 +				     struct snd_soc_codec_conf **codec_conf,
 +				     int *codec_conf_count)
 +{
 +	const struct snd_soc_acpi_link_adr *adr_link;
 +	struct snd_soc_codec_conf *c_conf;
 +	int num_codecs = 0;
 +	int codec_index;
 +	int i;
 +
 +	adr_link = mach_params->links;
 +	if (!adr_link)
 +		return -EINVAL;
 +
 +	/* generate DAI links by each sdw link */
 +	for (; adr_link->num_adr; adr_link++) {
 +		for (i = 0; i < adr_link->num_adr; i++) {
 +			if (!adr_link->adr_d[i].name_prefix) {
 +				dev_err(dev, "codec 0x%llx does not have a name prefix\n",
 +					adr_link->adr_d[i].adr);
 +				return -EINVAL;
 +			}
 +			codec_index = find_codec_info_part(adr_link->adr_d[i].adr);
 +			if (codec_index < 0)
 +				return codec_index;
 +			num_codecs += codec_info_list[codec_index].dai_num;
 +		}
 +	}
 +
 +	c_conf = devm_kzalloc(dev, num_codecs * sizeof(*c_conf), GFP_KERNEL);
 +	if (!c_conf)
 +		return -ENOMEM;
 +
 +	*codec_conf = c_conf;
 +	*codec_conf_count = num_codecs;
 +
 +	return 0;
 +}
 +
 +static int sof_card_dai_links_create(struct device *dev,
 +				     struct snd_soc_acpi_mach *mach,
 +				     struct snd_soc_card *card)
++=======
+ static int sof_card_dai_links_create(struct snd_soc_card *card)
++>>>>>>> a386162e7dc2 (ASoC: intel: sof_sdw: Merge codec_conf_alloc into dailink_info)
  {
 -	struct device *dev = card->dev;
 -	struct snd_soc_acpi_mach *mach = dev_get_platdata(card->dev);
 -	int sdw_be_num = 0, ssp_num = 0, dmic_num = 0, hdmi_num = 0, bt_num = 0;
 +	int ssp_num, sdw_be_num = 0, hdmi_num = 0, dmic_num;
  	struct mc_private *ctx = snd_soc_card_get_drvdata(card);
  	struct snd_soc_dai_link_component *idisp_components;
  	struct snd_soc_dai_link_component *ssp_components;
@@@ -1574,19 -1575,26 +1597,40 @@@
  	int i, j, be_id = 0;
  	int codec_index;
  	int cpu_id = 0;
 +	int comp_num;
  	int ret;
  
++<<<<<<< HEAD
 +	mach_params = &mach->mach_params;
 +
 +	/* allocate codec conf, will be populated when dailinks are created */
 +	ret = sof_card_codec_conf_alloc(dev, mach_params, &codec_conf, &codec_conf_count);
 +	if (ret < 0)
 +		return ret;
 +
 +	/* reset amp_num to ensure amp_num++ starts from 0 in each probe */
 +	for (i = 0; i < ARRAY_SIZE(codec_info_list); i++)
 +		codec_info_list[i].amp_num = 0;
++=======
+ 	ret = get_dailink_info(dev, adr_link, &sdw_be_num, &sdw_cpu_dai_num,
+ 			       &codec_conf_num);
+ 	if (ret < 0) {
+ 		dev_err(dev, "failed to get sdw link info %d\n", ret);
+ 		return ret;
+ 	}
+ 
+ 	/*
+ 	 * on generic tgl platform, I2S or sdw mode is supported
+ 	 * based on board rework. A ACPI device is registered in
+ 	 * system only when I2S mode is supported, not sdw mode.
+ 	 * Here check ACPI ID to confirm I2S is supported.
+ 	 */
+ 	ssp_codec_index = find_codec_info_acpi(mach->id);
+ 	if (ssp_codec_index >= 0) {
+ 		ssp_mask = SOF_SSP_GET_PORT(sof_sdw_quirk);
+ 		ssp_num = hweight_long(ssp_mask);
+ 	}
++>>>>>>> a386162e7dc2 (ASoC: intel: sof_sdw: Merge codec_conf_alloc into dailink_info)
  
  	if (mach_params->codec_mask & IDISP_CODEC_MASK) {
  		ctx->idisp_codec = true;
@@@ -1597,46 -1605,34 +1641,52 @@@
  			hdmi_num = SOF_PRE_TGL_HDMI_COUNT;
  	}
  
 +	ssp_mask = SOF_SSP_GET_PORT(sof_sdw_quirk);
 +	/*
 +	 * on generic tgl platform, I2S or sdw mode is supported
 +	 * based on board rework. A ACPI device is registered in
 +	 * system only when I2S mode is supported, not sdw mode.
 +	 * Here check ACPI ID to confirm I2S is supported.
 +	 */
 +	ssp_codec_index = find_codec_info_acpi(mach->id);
 +	ssp_num = ssp_codec_index >= 0 ? hweight_long(ssp_mask) : 0;
 +	comp_num = hdmi_num + ssp_num;
 +
 +	ret = get_sdw_dailink_info(dev, mach_params->links,
 +				   &sdw_be_num, &sdw_cpu_dai_num);
 +	if (ret < 0) {
 +		dev_err(dev, "failed to get sdw link info %d", ret);
 +		return ret;
 +	}
 +
  	/* enable dmic01 & dmic16k */
 -	if (sof_sdw_quirk & SOF_SDW_PCH_DMIC || mach_params->dmic_num)
 -		dmic_num = 2;
 +	dmic_num = (sof_sdw_quirk & SOF_SDW_PCH_DMIC || mach_params->dmic_num) ? 2 : 0;
 +	comp_num += dmic_num;
  
  	if (sof_sdw_quirk & SOF_SSP_BT_OFFLOAD_PRESENT)
 -		bt_num = 1;
 +		comp_num++;
  
 -	dev_dbg(dev, "sdw %d, ssp %d, dmic %d, hdmi %d, bt: %d\n",
 -		sdw_be_num, ssp_num, dmic_num, hdmi_num, bt_num);
 +	dev_dbg(dev, "sdw %d, ssp %d, dmic %d, hdmi %d", sdw_be_num, ssp_num,
 +		dmic_num, ctx->idisp_codec ? hdmi_num : 0);
  
  	/* allocate BE dailinks */
 -	num_links = sdw_be_num + ssp_num + dmic_num + hdmi_num + bt_num;
 -	dai_links = devm_kcalloc(dev, num_links, sizeof(*dai_links), GFP_KERNEL);
 -	if (!dai_links)
 -		return -ENOMEM;
 +	num_links = comp_num + sdw_be_num;
 +	links = devm_kcalloc(dev, num_links, sizeof(*links), GFP_KERNEL);
  
  	/* allocated CPU DAIs */
 -	total_cpu_dai_num = sdw_cpu_dai_num + ssp_num + dmic_num + hdmi_num + bt_num;
 -	cpus = devm_kcalloc(dev, total_cpu_dai_num, sizeof(*cpus), GFP_KERNEL);
 -	if (!cpus)
 +	total_cpu_dai_num = comp_num + sdw_cpu_dai_num;
 +	cpus = devm_kcalloc(dev, total_cpu_dai_num, sizeof(*cpus),
 +			    GFP_KERNEL);
 +
 +	if (!links || !cpus)
  		return -ENOMEM;
  
+ 	/* allocate codec conf, will be populated when dailinks are created */
+ 	codec_conf = devm_kcalloc(dev, codec_conf_num, sizeof(*codec_conf),
+ 				  GFP_KERNEL);
+ 	if (!codec_conf)
+ 		return -ENOMEM;
+ 
  	/* SDW */
  	if (!sdw_be_num)
  		goto SSP;
@@@ -1708,10 -1704,10 +1758,17 @@@ out
  				return codec_index;
  
  			for (j = 0; j < codec_info_list[codec_index].dai_num ; j++) {
++<<<<<<< HEAD
 +				ret = create_sdw_dailink(card, dev, &link_index, links, sdw_be_num,
 +							 sdw_cpu_dai_num, cpus, adr_link,
 +							 &cpu_id, group_generated,
 +							 codec_conf, codec_conf_count,
++=======
+ 				ret = create_sdw_dailink(card, &link_index, dai_links,
+ 							 sdw_be_num, sdw_cpu_dai_num, cpus,
+ 							 adr_link, &cpu_id, group_generated,
+ 							 codec_conf, codec_conf_num,
++>>>>>>> a386162e7dc2 (ASoC: intel: sof_sdw: Merge codec_conf_alloc into dailink_info)
  							 &be_id, &codec_conf_index,
  							 &ignore_pch_dmic, append_dai_type, i, j);
  				if (ret < 0) {
* Unmerged path sound/soc/intel/boards/sof_sdw.c
