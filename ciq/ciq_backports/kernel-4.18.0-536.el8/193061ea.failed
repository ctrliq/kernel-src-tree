drivers: hv: Mark percpu hvcall input arg page unencrypted in SEV-SNP enlightened guest

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-536.el8
commit-author Tianyu Lan <tiala@microsoft.com>
commit 193061ea0a50c13f72b907e6fa7befa6e15a4302
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-536.el8/193061ea.failed

Hypervisor needs to access input arg, VMBus synic event and
message pages. Mark these pages unencrypted in the SEV-SNP
guest and free them only if they have been marked encrypted
successfully.

	Reviewed-by: Dexuan Cui <decui@microsoft.com>
	Reviewed-by: Michael Kelley <mikelley@microsoft.com>
	Signed-off-by: Tianyu Lan <tiala@microsoft.com>
	Signed-off-by: Wei Liu <wei.liu@kernel.org>
Link: https://lore.kernel.org/r/20230818102919.1318039-5-ltykernel@gmail.com
(cherry picked from commit 193061ea0a50c13f72b907e6fa7befa6e15a4302)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/hv/hv_common.c
diff --cc drivers/hv/hv_common.c
index c00e1e18c2ea,2d43ba2bc925..000000000000
--- a/drivers/hv/hv_common.c
+++ b/drivers/hv/hv_common.c
@@@ -17,9 -17,14 +17,10 @@@
  #include <linux/export.h>
  #include <linux/bitfield.h>
  #include <linux/cpumask.h>
 -#include <linux/sched/task_stack.h>
 -#include <linux/panic_notifier.h>
  #include <linux/ptrace.h>
 -#include <linux/kdebug.h>
 -#include <linux/kmsg_dump.h>
  #include <linux/slab.h>
  #include <linux/dma-map-ops.h>
+ #include <linux/set_memory.h>
  #include <asm/hyperv-tlfs.h>
  #include <asm/mshyperv.h>
  
@@@ -132,13 -366,31 +134,40 @@@ int hv_common_cpu_init(unsigned int cpu
  	flags = irqs_disabled() ? GFP_ATOMIC : GFP_KERNEL;
  
  	inputarg = (void **)this_cpu_ptr(hyperv_pcpu_input_arg);
 +	*inputarg = kmalloc(pgcount * HV_HYP_PAGE_SIZE, flags);
 +	if (!(*inputarg))
 +		return -ENOMEM;
  
++<<<<<<< HEAD
 +	if (hv_root_partition) {
 +		outputarg = (void **)this_cpu_ptr(hyperv_pcpu_output_arg);
 +		*outputarg = (char *)(*inputarg) + HV_HYP_PAGE_SIZE;
++=======
+ 	/*
+ 	 * hyperv_pcpu_input_arg and hyperv_pcpu_output_arg memory is already
+ 	 * allocated if this CPU was previously online and then taken offline
+ 	 */
+ 	if (!*inputarg) {
+ 		*inputarg = kmalloc(pgcount * HV_HYP_PAGE_SIZE, flags);
+ 		if (!(*inputarg))
+ 			return -ENOMEM;
+ 
+ 		if (hv_root_partition) {
+ 			outputarg = (void **)this_cpu_ptr(hyperv_pcpu_output_arg);
+ 			*outputarg = (char *)(*inputarg) + HV_HYP_PAGE_SIZE;
+ 		}
+ 
+ 		if (hv_isolation_type_en_snp()) {
+ 			ret = set_memory_decrypted((unsigned long)*inputarg, pgcount);
+ 			if (ret) {
+ 				kfree(*inputarg);
+ 				*inputarg = NULL;
+ 				return ret;
+ 			}
+ 
+ 			memset(*inputarg, 0x00, pgcount * PAGE_SIZE);
+ 		}
++>>>>>>> 193061ea0a50 (drivers: hv: Mark percpu hvcall input arg page unencrypted in SEV-SNP enlightened guest)
  	}
  
  	msr_vp_index = hv_get_register(HV_REGISTER_VP_INDEX);
diff --git a/drivers/hv/hv.c b/drivers/hv/hv.c
index 54db91ae3c0d..e8065edcaf13 100644
--- a/drivers/hv/hv.c
+++ b/drivers/hv/hv.c
@@ -33,6 +33,7 @@
 #include <linux/interrupt.h>
 #include <clocksource/hyperv_timer.h>
 #include <asm/mshyperv.h>
+#include <linux/set_memory.h>
 #include "hyperv_vmbus.h"
 
 /* The one and only */
@@ -127,7 +128,7 @@ int hv_post_message(union hv_connection_id connection_id,
 
 int hv_synic_alloc(void)
 {
-	int cpu;
+	int cpu, ret = -ENOMEM;
 	struct hv_per_cpu_context *hv_cpu;
 
 	/*
@@ -172,26 +173,76 @@ int hv_synic_alloc(void)
 				goto err;
 			}
 		}
+
+		if (hv_isolation_type_en_snp()) {
+			ret = set_memory_decrypted((unsigned long)
+				hv_cpu->synic_message_page, 1);
+			if (ret) {
+				pr_err("Failed to decrypt SYNIC msg page: %d\n", ret);
+				hv_cpu->synic_message_page = NULL;
+
+				/*
+				 * Free the event page here so that hv_synic_free()
+				 * won't later try to re-encrypt it.
+				 */
+				free_page((unsigned long)hv_cpu->synic_event_page);
+				hv_cpu->synic_event_page = NULL;
+				goto err;
+			}
+
+			ret = set_memory_decrypted((unsigned long)
+				hv_cpu->synic_event_page, 1);
+			if (ret) {
+				pr_err("Failed to decrypt SYNIC event page: %d\n", ret);
+				hv_cpu->synic_event_page = NULL;
+				goto err;
+			}
+
+			memset(hv_cpu->synic_message_page, 0, PAGE_SIZE);
+			memset(hv_cpu->synic_event_page, 0, PAGE_SIZE);
+		}
 	}
 
 	return 0;
+
 err:
 	/*
 	 * Any memory allocations that succeeded will be freed when
 	 * the caller cleans up by calling hv_synic_free()
 	 */
-	return -ENOMEM;
+	return ret;
 }
 
 
 void hv_synic_free(void)
 {
-	int cpu;
+	int cpu, ret;
 
 	for_each_present_cpu(cpu) {
 		struct hv_per_cpu_context *hv_cpu
 			= per_cpu_ptr(hv_context.cpu_context, cpu);
 
+		/* It's better to leak the page if the encryption fails. */
+		if (hv_isolation_type_en_snp()) {
+			if (hv_cpu->synic_message_page) {
+				ret = set_memory_encrypted((unsigned long)
+					hv_cpu->synic_message_page, 1);
+				if (ret) {
+					pr_err("Failed to encrypt SYNIC msg page: %d\n", ret);
+					hv_cpu->synic_message_page = NULL;
+				}
+			}
+
+			if (hv_cpu->synic_event_page) {
+				ret = set_memory_encrypted((unsigned long)
+					hv_cpu->synic_event_page, 1);
+				if (ret) {
+					pr_err("Failed to encrypt SYNIC event page: %d\n", ret);
+					hv_cpu->synic_event_page = NULL;
+				}
+			}
+		}
+
 		free_page((unsigned long)hv_cpu->synic_event_page);
 		free_page((unsigned long)hv_cpu->synic_message_page);
 	}
* Unmerged path drivers/hv/hv_common.c
