x86/hyperv: Mark Hyper-V vp assist page unencrypted in SEV-SNP enlightened guest

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-536.el8
commit-author Tianyu Lan <tiala@microsoft.com>
commit b13103559dddbc64330c2e63ebf7342e70fbab4e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-536.el8/b1310355.failed

hv vp assist page needs to be shared between SEV-SNP guest and Hyper-V.
So mark the page unencrypted in the SEV-SNP guest.

	Reviewed-by: Dexuan Cui <decui@microsoft.com>
	Reviewed-by: Michael Kelley <mikelley@microsoft.com>
	Signed-off-by: Tianyu Lan <tiala@microsoft.com>
	Signed-off-by: Wei Liu <wei.liu@kernel.org>
Link: https://lore.kernel.org/r/20230818102919.1318039-4-ltykernel@gmail.com
(cherry picked from commit b13103559dddbc64330c2e63ebf7342e70fbab4e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/hyperv/hv_init.c
diff --cc arch/x86/hyperv/hv_init.c
index 1d0a26104d0f,bcfbcda8b050..000000000000
--- a/arch/x86/hyperv/hv_init.c
+++ b/arch/x86/hyperv/hv_init.c
@@@ -27,6 -17,8 +27,11 @@@
  #include <asm/hypervisor.h>
  #include <asm/hyperv-tlfs.h>
  #include <asm/mshyperv.h>
++<<<<<<< HEAD
++=======
+ #include <asm/idtentry.h>
+ #include <asm/set_memory.h>
++>>>>>>> b13103559ddd (x86/hyperv: Mark Hyper-V vp assist page unencrypted in SEV-SNP enlightened guest)
  #include <linux/kexec.h>
  #include <linux/version.h>
  #include <linux/vmalloc.h>
@@@ -116,8 -107,21 +121,26 @@@ static int hv_cpu_init(unsigned int cpu
  		 * in hv_cpu_die(), otherwise a CPU may not be stopped in the
  		 * case of CPU offlining and the VM will hang.
  		 */
++<<<<<<< HEAD
 +		if (!*hvp)
 +			*hvp = __vmalloc(PAGE_SIZE, GFP_KERNEL | __GFP_ZERO, PAGE_KERNEL);
++=======
+ 		if (!*hvp) {
+ 			*hvp = __vmalloc(PAGE_SIZE, GFP_KERNEL | __GFP_ZERO);
+ 
+ 			/*
+ 			 * Hyper-V should never specify a VM that is a Confidential
+ 			 * VM and also running in the root partition. Root partition
+ 			 * is blocked to run in Confidential VM. So only decrypt assist
+ 			 * page in non-root partition here.
+ 			 */
+ 			if (*hvp && hv_isolation_type_en_snp()) {
+ 				WARN_ON_ONCE(set_memory_decrypted((unsigned long)(*hvp), 1));
+ 				memset(*hvp, 0, PAGE_SIZE);
+ 			}
+ 		}
+ 
++>>>>>>> b13103559ddd (x86/hyperv: Mark Hyper-V vp assist page unencrypted in SEV-SNP enlightened guest)
  		if (*hvp)
  			msr.pfn = vmalloc_to_pfn(*hvp);
  
* Unmerged path arch/x86/hyperv/hv_init.c
