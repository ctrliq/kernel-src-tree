x86/hyperv: Add hv_isolation_type_tdx() to detect TDX guests

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-536.el8
commit-author Dexuan Cui <decui@microsoft.com>
commit 08e9d12077fcc7c4c4579d7dcd8093b59b01369e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-536.el8/08e9d120.failed

No logic change to SNP/VBS guests.

hv_isolation_type_tdx() will be used to instruct a TDX guest on Hyper-V to
do some TDX-specific operations, e.g. for a fully enlightened TDX guest
(i.e. without the paravisor), hv_do_hypercall() should use
__tdx_hypercall() and such a guest on Hyper-V should handle the Hyper-V
Event/Message/Monitor pages specially.

	Reviewed-by: Michael Kelley <mikelley@microsoft.com>
	Reviewed-by: Tianyu Lan <tiala@microsoft.com>
	Signed-off-by: Dexuan Cui <decui@microsoft.com>
	Signed-off-by: Wei Liu <wei.liu@kernel.org>
Link: https://lore.kernel.org/r/20230824080712.30327-2-decui@microsoft.com
(cherry picked from commit 08e9d12077fcc7c4c4579d7dcd8093b59b01369e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/hyperv/ivm.c
#	arch/x86/include/asm/mshyperv.h
#	arch/x86/kernel/cpu/mshyperv.c
#	drivers/hv/hv_common.c
#	include/asm-generic/mshyperv.h
diff --cc arch/x86/hyperv/ivm.c
index 5648efb6c73e,afdae1a8a117..000000000000
--- a/arch/x86/hyperv/ivm.c
+++ b/arch/x86/hyperv/ivm.c
@@@ -387,3 -551,23 +387,26 @@@ bool hv_isolation_type_snp(void
  {
  	return static_branch_unlikely(&isolation_type_snp);
  }
++<<<<<<< HEAD
++=======
+ 
+ DEFINE_STATIC_KEY_FALSE(isolation_type_en_snp);
+ /*
+  * hv_isolation_type_en_snp - Check system runs in the AMD SEV-SNP based
+  * isolation enlightened VM.
+  */
+ bool hv_isolation_type_en_snp(void)
+ {
+ 	return static_branch_unlikely(&isolation_type_en_snp);
+ }
+ 
+ DEFINE_STATIC_KEY_FALSE(isolation_type_tdx);
+ /*
+  * hv_isolation_type_tdx - Check if the system runs in an Intel TDX based
+  * isolated VM.
+  */
+ bool hv_isolation_type_tdx(void)
+ {
+ 	return static_branch_unlikely(&isolation_type_tdx);
+ }
++>>>>>>> 08e9d12077fc (x86/hyperv: Add hv_isolation_type_tdx() to detect TDX guests)
diff --cc arch/x86/include/asm/mshyperv.h
index a56488c7d1a0,3feb4e36851e..000000000000
--- a/arch/x86/include/asm/mshyperv.h
+++ b/arch/x86/include/asm/mshyperv.h
@@@ -14,6 -14,20 +14,11 @@@
  union hv_ghcb;
  
  DECLARE_STATIC_KEY_FALSE(isolation_type_snp);
++<<<<<<< HEAD
++=======
+ DECLARE_STATIC_KEY_FALSE(isolation_type_en_snp);
+ DECLARE_STATIC_KEY_FALSE(isolation_type_tdx);
++>>>>>>> 08e9d12077fc (x86/hyperv: Add hv_isolation_type_tdx() to detect TDX guests)
  
  typedef int (*hyperv_fill_flush_list_func)(
  		struct hv_guest_mapping_flush_list *flush,
@@@ -46,6 -50,14 +51,17 @@@ extern u64 hv_current_partition_id
  extern union hv_ghcb * __percpu *hv_ghcb_pg;
  
  extern bool hv_isolation_type_en_snp(void);
++<<<<<<< HEAD
++=======
+ bool hv_isolation_type_tdx(void);
+ 
+ /*
+  * DEFAULT INIT GPAT and SEGMENT LIMIT value in struct VMSA
+  * to start AP in enlightened SEV guest.
+  */
+ #define HV_AP_INIT_GPAT_DEFAULT		0x0007040600070406ULL
+ #define HV_AP_SEGMENT_LIMIT		0xffffffff
++>>>>>>> 08e9d12077fc (x86/hyperv: Add hv_isolation_type_tdx() to detect TDX guests)
  
  int hv_call_deposit_pages(int node, u64 partition_id, u32 num_pages);
  int hv_call_add_logical_proc(int node, u32 lp_index, u32 acpi_id);
diff --cc arch/x86/kernel/cpu/mshyperv.c
index 1189865ffc68,63093870ec33..000000000000
--- a/arch/x86/kernel/cpu/mshyperv.c
+++ b/arch/x86/kernel/cpu/mshyperv.c
@@@ -385,16 -412,14 +385,25 @@@ static void __init ms_hyperv_init_platf
  		pr_info("Hyper-V: Isolation Config: Group A 0x%x, Group B 0x%x\n",
  			ms_hyperv.isolation_config_a, ms_hyperv.isolation_config_b);
  
 -
  		if (hv_get_isolation_type() == HV_ISOLATION_TYPE_SNP) {
++<<<<<<< HEAD
 +			static_branch_enable(&isolation_type_snp);
 +#ifdef CONFIG_SWIOTLB
 +			swiotlb_unencrypted_base = ms_hyperv.shared_gpa_boundary;
 +#endif
 +		}
 +		/* Isolation VMs are unenlightened SEV-based VMs, thus this check: */
 +		if (IS_ENABLED(CONFIG_AMD_MEM_ENCRYPT)) {
 +			if (hv_get_isolation_type() != HV_ISOLATION_TYPE_NONE)
 +				cc_set_vendor(CC_VENDOR_HYPERV);
++=======
+ 			if (ms_hyperv.paravisor_present)
+ 				static_branch_enable(&isolation_type_snp);
+ 			else
+ 				static_branch_enable(&isolation_type_en_snp);
+ 		} else if (hv_get_isolation_type() == HV_ISOLATION_TYPE_TDX) {
+ 			static_branch_enable(&isolation_type_tdx);
++>>>>>>> 08e9d12077fc (x86/hyperv: Add hv_isolation_type_tdx() to detect TDX guests)
  		}
  	}
  
diff --cc drivers/hv/hv_common.c
index c00e1e18c2ea,da3307533f4d..000000000000
--- a/drivers/hv/hv_common.c
+++ b/drivers/hv/hv_common.c
@@@ -270,6 -515,18 +270,21 @@@ bool __weak hv_isolation_type_snp(void
  }
  EXPORT_SYMBOL_GPL(hv_isolation_type_snp);
  
++<<<<<<< HEAD
++=======
+ bool __weak hv_isolation_type_en_snp(void)
+ {
+ 	return false;
+ }
+ EXPORT_SYMBOL_GPL(hv_isolation_type_en_snp);
+ 
+ bool __weak hv_isolation_type_tdx(void)
+ {
+ 	return false;
+ }
+ EXPORT_SYMBOL_GPL(hv_isolation_type_tdx);
+ 
++>>>>>>> 08e9d12077fc (x86/hyperv: Add hv_isolation_type_tdx() to detect TDX guests)
  void __weak hv_setup_vmbus_handler(void (*handler)(void))
  {
  }
diff --cc include/asm-generic/mshyperv.h
index 8845a2eca339,82eba2d5fc4c..000000000000
--- a/include/asm-generic/mshyperv.h
+++ b/include/asm-generic/mshyperv.h
@@@ -56,6 -65,8 +56,11 @@@ extern void * __percpu *hyperv_pcpu_out
  extern u64 hv_do_hypercall(u64 control, void *inputaddr, void *outputaddr);
  extern u64 hv_do_fast_hypercall8(u16 control, u64 input8);
  extern bool hv_isolation_type_snp(void);
++<<<<<<< HEAD
++=======
+ extern bool hv_isolation_type_en_snp(void);
+ bool hv_isolation_type_tdx(void);
++>>>>>>> 08e9d12077fc (x86/hyperv: Add hv_isolation_type_tdx() to detect TDX guests)
  
  /* Helper functions that provide a consistent pattern for checking Hyper-V hypercall status. */
  static inline int hv_result(u64 status)
* Unmerged path arch/x86/hyperv/ivm.c
diff --git a/arch/x86/include/asm/hyperv-tlfs.h b/arch/x86/include/asm/hyperv-tlfs.h
index 7f3b7ebe441e..33c9898e85e7 100644
--- a/arch/x86/include/asm/hyperv-tlfs.h
+++ b/arch/x86/include/asm/hyperv-tlfs.h
@@ -169,7 +169,8 @@
 enum hv_isolation_type {
 	HV_ISOLATION_TYPE_NONE	= 0,
 	HV_ISOLATION_TYPE_VBS	= 1,
-	HV_ISOLATION_TYPE_SNP	= 2
+	HV_ISOLATION_TYPE_SNP	= 2,
+	HV_ISOLATION_TYPE_TDX	= 3
 };
 
 /* Hyper-V specific model specific registers (MSRs) */
* Unmerged path arch/x86/include/asm/mshyperv.h
* Unmerged path arch/x86/kernel/cpu/mshyperv.c
* Unmerged path drivers/hv/hv_common.c
* Unmerged path include/asm-generic/mshyperv.h
