ASoC: intel: sof_sdw: Device loop should not always start at adr_index

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-536.el8
commit-author Charles Keepax <ckeepax@opensource.cirrus.com>
commit f3eb3d45fdfd693dc004e664544f978ae8d38f48
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-536.el8/f3eb3d45.failed

The current loops at the top of create_sdw_dailink process the devices
on each link starting from device index adr_index. But adr_index is only
meaningful on the first on these SoundWire links, as it is the index of
the current device on that link. This means devices will be skipped on
later links.

Say for example the system looks like this:

SDW0 - Codec (Not Aggregated), Amp 1 (Aggregated, Group 1)
SDW1 - Amp 2 (Aggregated, Group 1), Amp 3 (Aggregated, Group 1)

The code should create 2 DAI links, one for the CODEC and one for the
aggregated amps. It will create the DAI link for the codec no problem.
When it creates the DAI link for Group 1 however, create_sdw_dailink
will be called with an adr_index of 1, since that is the index of Amp
1 on SDW0.  However, as the loop in create_sdw_dailink moves onto SDW1
it will again start from adr_index, skipping Amp 2. Resulting in the amp
DAI link only have amps 1 and 3 in it.

It is reasonable to start at adr_index on the first link, since
earlier devices have by definition already been processed. However,
update the code when processing later links to handle all devices.

	Reviewed-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
	Reviewed-by: Bard Liao <yung-chuan.liao@linux.intel.com>
	Signed-off-by: Charles Keepax <ckeepax@opensource.cirrus.com>
Link: https://lore.kernel.org/r/20230808132013.889419-9-ckeepax@opensource.cirrus.com
	Signed-off-by: Mark Brown <broonie@kernel.org>
(cherry picked from commit f3eb3d45fdfd693dc004e664544f978ae8d38f48)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	sound/soc/intel/boards/sof_sdw.c
diff --cc sound/soc/intel/boards/sof_sdw.c
index 5f6ef7f8be22,767c49022eae..000000000000
--- a/sound/soc/intel/boards/sof_sdw.c
+++ b/sound/soc/intel/boards/sof_sdw.c
@@@ -1372,24 -1366,55 +1372,67 @@@ static int create_sdw_dailink(struct sn
  		return -ENOMEM;
  
  	/* generate codec name on different links in the same group */
++<<<<<<< HEAD
 +	for (link_next = link; link_next && link_next->num_adr &&
 +	     i < cpu_dai_num; link_next++) {
++=======
+ 	j = adr_index;
+ 	for (adr_link_next = adr_link; adr_link_next && adr_link_next->num_adr &&
+ 	     i < cpu_dai_num; adr_link_next++) {
++>>>>>>> f3eb3d45fdfd (ASoC: intel: sof_sdw: Device loop should not always start at adr_index)
  		const struct snd_soc_acpi_endpoint *endpoints;
 -		int _codec_index = -1;
  
 -		endpoints = adr_link_next->adr_d->endpoints;
 +		endpoints = link_next->adr_d->endpoints;
  		if (group_id && (!endpoints->aggregated ||
  				 endpoints->group_id != group_id))
  			continue;
  
  		/* skip the link excluded by this processed group */
 -		if (cpu_dai_id[i] != ffs(adr_link_next->mask) - 1)
 +		if (cpu_dai_id[i] != ffs(link_next->mask) - 1)
  			continue;
  
++<<<<<<< HEAD
 +		ret = create_codec_dai_name(dev, link_next, codecs, codec_idx,
 +					    codec_conf, codec_count, codec_conf_index,
 +					    adr_index, dai_index);
 +		if (ret < 0)
 +			return ret;
++=======
+ 		/* j reset after loop, adr_index only applies to first link */
+ 		for (; j < adr_link_next->num_adr; j++) {
+ 			int codec_index;
+ 			u64 adr = adr_link_next->adr_d[j].adr;
+ 
+ 			codec_index = find_codec_info_part(adr);
+ 			if (codec_index < 0)
+ 				return codec_index;
+ 			if (_codec_index != -1 && codec_index != _codec_index) {
+ 				dev_dbg(dev, "Different devices on the same sdw link\n");
+ 				break;
+ 			}
+ 			_codec_index = codec_index;
+ 
+ 			/* sanity check */
+ 			if (*codec_conf_index >= codec_count) {
+ 				dev_err(dev, "codec_conf array overflowed\n");
+ 				return -EINVAL;
+ 			}
+ 
+ 			ret = fill_sdw_codec_dlc(dev, adr_link_next,
+ 						 &codecs[codec_dlc_index],
+ 						 codec_index, j, dai_index);
+ 			if (ret)
+ 				return ret;
+ 
+ 			codec_conf[*codec_conf_index].dlc = codecs[codec_dlc_index];
+ 			codec_conf[*codec_conf_index].name_prefix =
+ 					adr_link_next->adr_d[j].name_prefix;
+ 
+ 			codec_dlc_index++;
+ 			(*codec_conf_index)++;
+ 		}
+ 		j = 0;
++>>>>>>> f3eb3d45fdfd (ASoC: intel: sof_sdw: Device loop should not always start at adr_index)
  
  		/* check next link to create codec dai in the processed group */
  		i++;
* Unmerged path sound/soc/intel/boards/sof_sdw.c
