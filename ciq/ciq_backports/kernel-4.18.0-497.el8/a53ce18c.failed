sched/fair: Sanitize vruntime of entity being migrated

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-497.el8
commit-author Vincent Guittot <vincent.guittot@linaro.org>
commit a53ce18cacb477dd0513c607f187d16f0fa96f71
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-497.el8/a53ce18c.failed

Commit 829c1651e9c4 ("sched/fair: sanitize vruntime of entity being placed")
fixes an overflowing bug, but ignore a case that se->exec_start is reset
after a migration.

For fixing this case, we delay the reset of se->exec_start after
placing the entity which se->exec_start to detect long sleeping task.

In order to take into account a possible divergence between the clock_task
of 2 rqs, we increase the threshold to around 104 days.

Fixes: 829c1651e9c4 ("sched/fair: sanitize vruntime of entity being placed")
Originally-by: Zhang Qiao <zhangqiao22@huawei.com>
	Signed-off-by: Vincent Guittot <vincent.guittot@linaro.org>
	Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
	Tested-by: Zhang Qiao <zhangqiao22@huawei.com>
Link: https://lore.kernel.org/r/20230317160810.107988-1-vincent.guittot@linaro.org
(cherry picked from commit a53ce18cacb477dd0513c607f187d16f0fa96f71)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/sched/fair.c
diff --cc kernel/sched/fair.c
index e7c527ba2a9c,6986ea31c984..000000000000
--- a/kernel/sched/fair.c
+++ b/kernel/sched/fair.c
@@@ -4390,9 -4803,12 +4423,12 @@@ enqueue_entity(struct cfs_rq *cfs_rq, s
  
  	if (flags & ENQUEUE_WAKEUP)
  		place_entity(cfs_rq, se, 0);
+ 	/* Entity has migrated, no longer consider this task hot */
+ 	if (flags & ENQUEUE_MIGRATED)
+ 		se->exec_start = 0;
  
  	check_schedstat_required();
 -	update_stats_enqueue_fair(cfs_rq, se, flags);
 +	update_stats_enqueue(cfs_rq, se, flags);
  	check_spread(cfs_rq, se);
  	if (!curr)
  		__enqueue_entity(cfs_rq, se);
@@@ -6943,11 -7691,8 +6979,14 @@@ static void migrate_task_rq_fair(struc
  	}
  
  	/* Tell new CPU we are migrated */
 -	se->avg.last_update_time = 0;
 +	p->se.avg.last_update_time = 0;
 +
++<<<<<<< HEAD
 +	/* We have migrated, no longer consider this task hot */
 +	p->se.exec_start = 0;
  
++=======
++>>>>>>> a53ce18cacb4 (sched/fair: Sanitize vruntime of entity being migrated)
  	update_scan_period(p, new_cpu);
  }
  
diff --git a/kernel/sched/core.c b/kernel/sched/core.c
index 4d4fdb30072f..94b543092f90 100644
--- a/kernel/sched/core.c
+++ b/kernel/sched/core.c
@@ -917,6 +917,9 @@ static inline void dequeue_task(struct rq *rq, struct task_struct *p, int flags)
 
 void activate_task(struct rq *rq, struct task_struct *p, int flags)
 {
+	if (task_on_rq_migrating(p))
+		flags |= ENQUEUE_MIGRATED;
+
 	enqueue_task(rq, p, flags);
 
 	p->on_rq = TASK_ON_RQ_QUEUED;
* Unmerged path kernel/sched/fair.c
