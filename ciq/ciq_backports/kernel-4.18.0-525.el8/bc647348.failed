regmap: Drop initial version of maximum transfer length fixes

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-525.el8
commit-author Mark Brown <broonie@kernel.org>
commit bc64734825c59e18a27ac266b07e14944c111fd8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-525.el8/bc647348.failed

When problems were noticed with the register address not being taken
into account when limiting raw transfers with I2C devices we fixed this
in the core.  Unfortunately it has subsequently been realised that a lot
of buses were relying on the prior behaviour, partly due to unclear
documentation not making it obvious what was intended in the core.  This
is all more involved to fix than is sensible for a fix commit so let's
just drop the original fixes, a separate commit will fix the originally
observed problem in an I2C specific way

Fixes: 3981514180c9 ("regmap: Account for register length when chunking")
Fixes: c8e796895e23 ("regmap: spi-avmm: Fix regmap_bus max_raw_write")
	Signed-off-by: Mark Brown <broonie@kernel.org>
	Reviewed-by: Xu Yilun <yilun.xu@intel.com>
	Cc: stable@kernel.org
Link: https://lore.kernel.org/r/20230712-regmap-max-transfer-v1-1-80e2aed22e83@kernel.org
	Signed-off-by: Mark Brown <broonie@kernel.org>
(cherry picked from commit bc64734825c59e18a27ac266b07e14944c111fd8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/base/regmap/regmap-spi-avmm.c
* Unmerged path drivers/base/regmap/regmap-spi-avmm.c
* Unmerged path drivers/base/regmap/regmap-spi-avmm.c
diff --git a/drivers/base/regmap/regmap.c b/drivers/base/regmap/regmap.c
index dab022d4977a..e514cbf30966 100644
--- a/drivers/base/regmap/regmap.c
+++ b/drivers/base/regmap/regmap.c
@@ -1900,8 +1900,6 @@ int _regmap_raw_write(struct regmap *map, unsigned int reg,
 	size_t val_count = val_len / val_bytes;
 	size_t chunk_count, chunk_bytes;
 	size_t chunk_regs = val_count;
-	size_t max_data = map->max_raw_write - map->format.reg_bytes -
-			map->format.pad_bytes;
 	int ret, i;
 
 	if (!val_count)
@@ -1909,8 +1907,8 @@ int _regmap_raw_write(struct regmap *map, unsigned int reg,
 
 	if (map->use_single_write)
 		chunk_regs = 1;
-	else if (map->max_raw_write && val_len > max_data)
-		chunk_regs = max_data / val_bytes;
+	else if (map->max_raw_write && val_len > map->max_raw_write)
+		chunk_regs = map->max_raw_write / val_bytes;
 
 	chunk_count = val_count / chunk_regs;
 	chunk_bytes = chunk_regs * val_bytes;
