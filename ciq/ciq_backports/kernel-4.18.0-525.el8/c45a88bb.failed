kobject: kset_uevent_ops: make filter() callback take a const *

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-525.el8
commit-author Greg Kroah-Hartman <gregkh@linuxfoundation.org>
commit c45a88bb3f6cdaeb29d8ee98463610ad815721ab
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-525.el8/c45a88bb.failed

The filter() callback in struct kset_uevent_ops does not modify the
kobject passed into it, so make the pointer const to enforce this
restriction.  When doing so, fix up all existing filter() callbacks to
have the correct signature to preserve the build.

	Cc: Sumit Semwal <sumit.semwal@linaro.org>
	Cc: linux-media@vger.kernel.org
	Cc: dri-devel@lists.freedesktop.org
	Cc: linaro-mm-sig@lists.linaro.org
	Acked-by: Rafael J. Wysocki <rafael@kernel.org>
	Acked-by: Christian KÃ¶nig <christian.koenig@amd.com> for the changes to
Link: https://lore.kernel.org/r/20221121094649.1556002-3-gregkh@linuxfoundation.org
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit c45a88bb3f6cdaeb29d8ee98463610ad815721ab)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/base/bus.c
#	drivers/base/core.c
#	include/linux/kobject.h
#	kernel/params.c
diff --cc drivers/base/bus.c
index c240b428aeeb,4ec6dbab73be..000000000000
--- a/drivers/base/bus.c
+++ b/drivers/base/bus.c
@@@ -217,7 -163,7 +217,11 @@@ static struct kobj_type bus_ktype = 
  	.release	= bus_release,
  };
  
++<<<<<<< HEAD
 +static int bus_uevent_filter(struct kset *kset, struct kobject *kobj)
++=======
+ static int bus_uevent_filter(const struct kobject *kobj)
++>>>>>>> c45a88bb3f6c (kobject: kset_uevent_ops: make filter() callback take a const *)
  {
  	const struct kobj_type *ktype = get_ktype(kobj);
  
diff --cc drivers/base/core.c
index ba30c074559f,005a2b092f3e..000000000000
--- a/drivers/base/core.c
+++ b/drivers/base/core.c
@@@ -2447,7 -2362,7 +2447,11 @@@ static struct kobj_type device_ktype = 
  };
  
  
++<<<<<<< HEAD
 +static int dev_uevent_filter(struct kset *kset, struct kobject *kobj)
++=======
+ static int dev_uevent_filter(const struct kobject *kobj)
++>>>>>>> c45a88bb3f6c (kobject: kset_uevent_ops: make filter() callback take a const *)
  {
  	const struct kobj_type *ktype = get_ktype(kobj);
  
diff --cc include/linux/kobject.h
index 1a8c794143ff,640f59d4b3de..000000000000
--- a/include/linux/kobject.h
+++ b/include/linux/kobject.h
@@@ -145,10 -135,9 +145,16 @@@ struct kobj_uevent_env 
  };
  
  struct kset_uevent_ops {
++<<<<<<< HEAD
 +	int (* const filter)(struct kset *kset, struct kobject *kobj);
 +	const char *(* const name)(struct kset *kset, struct kobject *kobj);
 +	int (* const uevent)(struct kset *kset, struct kobject *kobj,
 +		      struct kobj_uevent_env *env);
++=======
+ 	int (* const filter)(const struct kobject *kobj);
+ 	const char *(* const name)(struct kobject *kobj);
+ 	int (* const uevent)(struct kobject *kobj, struct kobj_uevent_env *env);
++>>>>>>> c45a88bb3f6c (kobject: kset_uevent_ops: make filter() callback take a const *)
  };
  
  struct kobj_attribute {
diff --cc kernel/params.c
index 186bc540444c,d2237209ceda..000000000000
--- a/kernel/params.c
+++ b/kernel/params.c
@@@ -945,7 -926,7 +945,11 @@@ static const struct sysfs_ops module_sy
  	.store = module_attr_store,
  };
  
++<<<<<<< HEAD
 +static int uevent_filter(struct kset *kset, struct kobject *kobj)
++=======
+ static int uevent_filter(const struct kobject *kobj)
++>>>>>>> c45a88bb3f6c (kobject: kset_uevent_ops: make filter() callback take a const *)
  {
  	const struct kobj_type *ktype = get_ktype(kobj);
  
* Unmerged path drivers/base/bus.c
* Unmerged path drivers/base/core.c
* Unmerged path include/linux/kobject.h
* Unmerged path kernel/params.c
