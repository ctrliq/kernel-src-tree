arm64: topology: move store_cpu_topology() to shared code

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-525.el8
commit-author Conor Dooley <conor.dooley@microchip.com>
commit 456797da792fa7cbf6698febf275fe9b36691f78
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-525.el8/456797da.failed

arm64's method of defining a default cpu topology requires only minimal
changes to apply to RISC-V also. The current arm64 implementation exits
early in a uniprocessor configuration by reading MPIDR & claiming that
uniprocessor can rely on the default values.

This is appears to be a hangover from prior to '3102bc0e6ac7 ("arm64:
topology: Stop using MPIDR for topology information")', because the
current code just assigns default values for multiprocessor systems.

With the MPIDR references removed, store_cpu_topolgy() can be moved to
the common arch_topology code.

	Reviewed-by: Sudeep Holla <sudeep.holla@arm.com>
	Acked-by: Catalin Marinas <catalin.marinas@arm.com>
	Reviewed-by: Atish Patra <atishp@rivosinc.com>
	Signed-off-by: Conor Dooley <conor.dooley@microchip.com>
(cherry picked from commit 456797da792fa7cbf6698febf275fe9b36691f78)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/arm64/kernel/topology.c
diff --cc arch/arm64/kernel/topology.c
index 7db8d9fd4e44,7889a00f5487..000000000000
--- a/arch/arm64/kernel/topology.c
+++ b/arch/arm64/kernel/topology.c
@@@ -21,44 -22,6 +21,47 @@@
  #include <asm/cputype.h>
  #include <asm/topology.h>
  
++<<<<<<< HEAD
 +void store_cpu_topology(unsigned int cpuid)
 +{
 +	struct cpu_topology *cpuid_topo = &cpu_topology[cpuid];
 +	u64 mpidr;
 +
 +	if (cpuid_topo->package_id != -1)
 +		goto topology_populated;
 +
 +	mpidr = read_cpuid_mpidr();
 +
 +	/* Uniprocessor systems can rely on default topology values */
 +	if (mpidr & MPIDR_UP_BITMASK)
 +		return;
 +
 +	/* Create cpu topology mapping based on MPIDR. */
 +	if (mpidr & MPIDR_MT_BITMASK) {
 +		/* Multiprocessor system : Multi-threads per core */
 +		cpuid_topo->thread_id  = MPIDR_AFFINITY_LEVEL(mpidr, 0);
 +		cpuid_topo->core_id    = MPIDR_AFFINITY_LEVEL(mpidr, 1);
 +		cpuid_topo->package_id = MPIDR_AFFINITY_LEVEL(mpidr, 2) |
 +					 MPIDR_AFFINITY_LEVEL(mpidr, 3) << 8;
 +	} else {
 +		/* Multiprocessor system : Single-thread per core */
 +		cpuid_topo->thread_id  = -1;
 +		cpuid_topo->core_id    = MPIDR_AFFINITY_LEVEL(mpidr, 0);
 +		cpuid_topo->package_id = MPIDR_AFFINITY_LEVEL(mpidr, 1) |
 +					 MPIDR_AFFINITY_LEVEL(mpidr, 2) << 8 |
 +					 MPIDR_AFFINITY_LEVEL(mpidr, 3) << 16;
 +	}
 +
 +	pr_debug("CPU%u: cluster %d core %d thread %d mpidr %#016llx\n",
 +		 cpuid, cpuid_topo->package_id, cpuid_topo->core_id,
 +		 cpuid_topo->thread_id, mpidr);
 +
 +topology_populated:
 +	update_siblings_masks(cpuid);
 +}
 +
++=======
++>>>>>>> 456797da792f (arm64: topology: move store_cpu_topology() to shared code)
  #ifdef CONFIG_ACPI
  static bool __init acpi_cpu_is_threaded(int cpu)
  {
* Unmerged path arch/arm64/kernel/topology.c
diff --git a/drivers/base/arch_topology.c b/drivers/base/arch_topology.c
index b29809111ee5..4a964430fcda 100644
--- a/drivers/base/arch_topology.c
+++ b/drivers/base/arch_topology.c
@@ -661,4 +661,23 @@ void __init init_cpu_topology(void)
 		}
 	}
 }
+
+void store_cpu_topology(unsigned int cpuid)
+{
+	struct cpu_topology *cpuid_topo = &cpu_topology[cpuid];
+
+	if (cpuid_topo->package_id != -1)
+		goto topology_populated;
+
+	cpuid_topo->thread_id = -1;
+	cpuid_topo->core_id = cpuid;
+	cpuid_topo->package_id = cpu_to_node(cpuid);
+
+	pr_debug("CPU%u: package %d core %d thread %d\n",
+		 cpuid, cpuid_topo->package_id, cpuid_topo->core_id,
+		 cpuid_topo->thread_id);
+
+topology_populated:
+	update_siblings_masks(cpuid);
+}
 #endif
