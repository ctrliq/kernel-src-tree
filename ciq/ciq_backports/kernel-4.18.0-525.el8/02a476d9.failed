kobject: make kobject_get_ownership() take a constant kobject *

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-525.el8
commit-author Greg Kroah-Hartman <gregkh@linuxfoundation.org>
commit 02a476d932287cf3096f78962ccb70d94d6203c6
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-525.el8/02a476d9.failed

The call, kobject_get_ownership(), does not modify the kobject passed
into it, so make it const.  This propagates down into the kobj_type
function callbacks so make the kobject passed into them also const,
ensuring that nothing in the kobject is being changed here.

This helps make it more obvious what calls and callbacks do, and do not,
modify structures passed to them.

	Cc: Trond Myklebust <trond.myklebust@hammerspace.com>
	Cc: Anna Schumaker <anna@kernel.org>
	Cc: Roopa Prabhu <roopa@nvidia.com>
	Cc: "David S. Miller" <davem@davemloft.net>
	Cc: Eric Dumazet <edumazet@google.com>
	Cc: Paolo Abeni <pabeni@redhat.com>
	Cc: Chuck Lever <chuck.lever@oracle.com>
	Cc: Jeff Layton <jlayton@kernel.org>
	Cc: linux-nfs@vger.kernel.org
	Cc: bridge@lists.linux-foundation.org
	Cc: netdev@vger.kernel.org
	Acked-by: Jakub Kicinski <kuba@kernel.org>
	Acked-by: Rafael J. Wysocki <rafael@kernel.org>
	Acked-by: Nikolay Aleksandrov <razor@blackwall.org>
Link: https://lore.kernel.org/r/20221121094649.1556002-1-gregkh@linuxfoundation.org
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit 02a476d932287cf3096f78962ccb70d94d6203c6)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/kobject.h
#	lib/kobject.c
diff --cc include/linux/kobject.h
index 456e567d158f,d978dbceb50d..000000000000
--- a/include/linux/kobject.h
+++ b/include/linux/kobject.h
@@@ -120,20 -113,17 +120,27 @@@ extern struct kobject * __must_check ko
  extern void kobject_put(struct kobject *kobj);
  
  extern const void *kobject_namespace(struct kobject *kobj);
- extern void kobject_get_ownership(struct kobject *kobj,
+ extern void kobject_get_ownership(const struct kobject *kobj,
  				  kuid_t *uid, kgid_t *gid);
 -extern char *kobject_get_path(const struct kobject *kobj, gfp_t flag);
 +extern char *kobject_get_path(struct kobject *kobj, gfp_t flag);
  
  struct kobj_type {
  	void (*release)(struct kobject *kobj);
  	const struct sysfs_ops *sysfs_ops;
++<<<<<<< HEAD
 +	struct attribute **default_attrs;	/* use default_groups instead */
 +	const struct kobj_ns_type_operations *(*child_ns_type)(struct kobject *kobj);
 +	const void *(*namespace)(struct kobject *kobj);
 +	RH_KABI_USE(1, const struct attribute_group **default_groups)
 +	RH_KABI_USE(2, void (*get_ownership)(struct kobject *kobj, kuid_t *uid, kgid_t *gid))
 +	RH_KABI_RESERVE(3)
 +	RH_KABI_RESERVE(4)
++=======
+ 	const struct attribute_group **default_groups;
+ 	const struct kobj_ns_type_operations *(*child_ns_type)(const struct kobject *kobj);
+ 	const void *(*namespace)(const struct kobject *kobj);
+ 	void (*get_ownership)(const struct kobject *kobj, kuid_t *uid, kgid_t *gid);
++>>>>>>> 02a476d93228 (kobject: make kobject_get_ownership() take a constant kobject *)
  };
  
  struct kobj_uevent_env {
diff --cc lib/kobject.c
index 6234cebafdfb,26e744a46d24..000000000000
--- a/lib/kobject.c
+++ b/lib/kobject.c
@@@ -902,7 -907,7 +902,11 @@@ static void kset_release(struct kobjec
  	kfree(kset);
  }
  
++<<<<<<< HEAD
 +void kset_get_ownership(struct kobject *kobj, kuid_t *uid, kgid_t *gid)
++=======
+ static void kset_get_ownership(const struct kobject *kobj, kuid_t *uid, kgid_t *gid)
++>>>>>>> 02a476d93228 (kobject: make kobject_get_ownership() take a constant kobject *)
  {
  	if (kobj->parent)
  		kobject_get_ownership(kobj->parent, uid, gid);
diff --git a/drivers/base/class.c b/drivers/base/class.c
index 09d5b23f48f0..484201e55766 100644
--- a/drivers/base/class.c
+++ b/drivers/base/class.c
@@ -63,7 +63,7 @@ static void class_release(struct kobject *kobj)
 	kfree(cp);
 }
 
-static const struct kobj_ns_type_operations *class_child_ns_type(struct kobject *kobj)
+static const struct kobj_ns_type_operations *class_child_ns_type(const struct kobject *kobj)
 {
 	const struct subsys_private *cp = to_subsys_private(kobj);
 	struct class *class = cp->class;
diff --git a/drivers/base/core.c b/drivers/base/core.c
index ba30c074559f..95cfbf74f33e 100644
--- a/drivers/base/core.c
+++ b/drivers/base/core.c
@@ -2420,7 +2420,7 @@ static void device_release(struct kobject *kobj)
 	kfree(p);
 }
 
-static const void *device_namespace(struct kobject *kobj)
+static const void *device_namespace(const struct kobject *kobj)
 {
 	const struct device *dev = kobj_to_dev(kobj);
 	const void *ns = NULL;
@@ -2431,7 +2431,7 @@ static const void *device_namespace(struct kobject *kobj)
 	return ns;
 }
 
-static void device_get_ownership(struct kobject *kobj, kuid_t *uid, kgid_t *gid)
+static void device_get_ownership(const struct kobject *kobj, kuid_t *uid, kgid_t *gid)
 {
 	const struct device *dev = kobj_to_dev(kobj);
 
@@ -3076,9 +3076,9 @@ static void class_dir_release(struct kobject *kobj)
 }
 
 static const
-struct kobj_ns_type_operations *class_dir_child_ns_type(struct kobject *kobj)
+struct kobj_ns_type_operations *class_dir_child_ns_type(const struct kobject *kobj)
 {
-	struct class_dir *dir = to_class_dir(kobj);
+	const struct class_dir *dir = to_class_dir(kobj);
 	return dir->class->ns_type;
 }
 
diff --git a/fs/nfs/sysfs.c b/fs/nfs/sysfs.c
index 8cb70755e3c9..b8fb6e37eab8 100644
--- a/fs/nfs/sysfs.c
+++ b/fs/nfs/sysfs.c
@@ -26,7 +26,7 @@ static void nfs_netns_object_release(struct kobject *kobj)
 }
 
 static const struct kobj_ns_type_operations *nfs_netns_object_child_ns_type(
-		struct kobject *kobj)
+		const struct kobject *kobj)
 {
 	return &net_ns_type_operations;
 }
@@ -130,7 +130,7 @@ static void nfs_netns_client_release(struct kobject *kobj)
 	kfree(c);
 }
 
-static const void *nfs_netns_client_namespace(struct kobject *kobj)
+static const void *nfs_netns_client_namespace(const struct kobject *kobj)
 {
 	return container_of(kobj, struct nfs_netns_client, kobject)->net;
 }
* Unmerged path include/linux/kobject.h
* Unmerged path lib/kobject.c
diff --git a/net/bridge/br_if.c b/net/bridge/br_if.c
index e0ea24ce4bfc..e48ed09b1751 100644
--- a/net/bridge/br_if.c
+++ b/net/bridge/br_if.c
@@ -253,7 +253,7 @@ static void release_nbp(struct kobject *kobj)
 	kfree(p);
 }
 
-static void brport_get_ownership(struct kobject *kobj, kuid_t *uid, kgid_t *gid)
+static void brport_get_ownership(const struct kobject *kobj, kuid_t *uid, kgid_t *gid)
 {
 	struct net_bridge_port *p = kobj_to_brport(kobj);
 
diff --git a/net/core/net-sysfs.c b/net/core/net-sysfs.c
index ba6588d89883..fc2400efbd78 100644
--- a/net/core/net-sysfs.c
+++ b/net/core/net-sysfs.c
@@ -1037,7 +1037,7 @@ static void rx_queue_release(struct kobject *kobj)
 	dev_put(queue->dev);
 }
 
-static const void *rx_queue_namespace(struct kobject *kobj)
+static const void *rx_queue_namespace(const struct kobject *kobj)
 {
 	struct netdev_rx_queue *queue = to_rx_queue(kobj);
 	struct device *dev = &queue->dev->dev;
@@ -1049,7 +1049,7 @@ static const void *rx_queue_namespace(struct kobject *kobj)
 	return ns;
 }
 
-static void rx_queue_get_ownership(struct kobject *kobj,
+static void rx_queue_get_ownership(const struct kobject *kobj,
 				   kuid_t *uid, kgid_t *gid)
 {
 	const struct net *net = rx_queue_namespace(kobj);
@@ -1685,7 +1685,7 @@ static void netdev_queue_release(struct kobject *kobj)
 	dev_put(queue->dev);
 }
 
-static const void *netdev_queue_namespace(struct kobject *kobj)
+static const void *netdev_queue_namespace(const struct kobject *kobj)
 {
 	struct netdev_queue *queue = to_netdev_queue(kobj);
 	struct device *dev = &queue->dev->dev;
@@ -1697,7 +1697,7 @@ static const void *netdev_queue_namespace(struct kobject *kobj)
 	return ns;
 }
 
-static void netdev_queue_get_ownership(struct kobject *kobj,
+static void netdev_queue_get_ownership(const struct kobject *kobj,
 				       kuid_t *uid, kgid_t *gid)
 {
 	const struct net *net = netdev_queue_namespace(kobj);
diff --git a/net/sunrpc/sysfs.c b/net/sunrpc/sysfs.c
index b2073f0fb766..4a6f0abd21c9 100644
--- a/net/sunrpc/sysfs.c
+++ b/net/sunrpc/sysfs.c
@@ -31,7 +31,7 @@ static void rpc_sysfs_object_release(struct kobject *kobj)
 }
 
 static const struct kobj_ns_type_operations *
-rpc_sysfs_object_child_ns_type(struct kobject *kobj)
+rpc_sysfs_object_child_ns_type(const struct kobject *kobj)
 {
 	return &net_ns_type_operations;
 }
@@ -391,17 +391,17 @@ static void rpc_sysfs_xprt_release(struct kobject *kobj)
 	kfree(xprt);
 }
 
-static const void *rpc_sysfs_client_namespace(struct kobject *kobj)
+static const void *rpc_sysfs_client_namespace(const struct kobject *kobj)
 {
 	return container_of(kobj, struct rpc_sysfs_client, kobject)->net;
 }
 
-static const void *rpc_sysfs_xprt_switch_namespace(struct kobject *kobj)
+static const void *rpc_sysfs_xprt_switch_namespace(const struct kobject *kobj)
 {
 	return container_of(kobj, struct rpc_sysfs_xprt_switch, kobject)->net;
 }
 
-static const void *rpc_sysfs_xprt_namespace(struct kobject *kobj)
+static const void *rpc_sysfs_xprt_namespace(const struct kobject *kobj)
 {
 	return container_of(kobj, struct rpc_sysfs_xprt,
 			    kobject)->xprt->xprt_net;
