crypto: qat - add rate limiting feature to qat_4xxx

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-530.el8
commit-author Damian Muszynski <damian.muszynski@intel.com>
commit d9fb8408376e70a903d06ac86e42e0d0f44a5785
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-530.el8/d9fb8408.failed

The Rate Limiting (RL) feature allows to control the rate of requests
that can be submitted on a ring pair (RP). This allows sharing a QAT
device among multiple users while ensuring a guaranteed throughput.

The driver provides a mechanism that allows users to set policies, that
are programmed to the device. The device is then enforcing those policies.

Configuration of RL is accomplished through entities called SLAs
(Service Level Agreement). Each SLA object gets a unique identifier
and defines the limitations for a single service across up to four
ring pairs (RPs count allocated to a single VF).

The rate is determined using two fields:
  * CIR (Committed Information Rate), i.e., the guaranteed rate.
  * PIR (Peak Information Rate), i.e., the maximum rate achievable
    when the device has available resources.
The rate values are expressed in permille scale i.e. 0-1000.
Ring pair selection is achieved by providing a 64-bit mask, where
each bit corresponds to one of the ring pairs.

This adds an interface and logic that allow to add, update, retrieve
and remove an SLA.

	Signed-off-by: Damian Muszynski <damian.muszynski@intel.com>
	Reviewed-by: Giovanni Cabiddu <giovanni.cabiddu@intel.com>
	Reviewed-by: Tero Kristo <tero.kristo@linux.intel.com>
	Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
(cherry picked from commit d9fb8408376e70a903d06ac86e42e0d0f44a5785)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/crypto/intel/qat/qat_common/adf_admin.h
#	drivers/crypto/qat/qat_4xxx/adf_4xxx_hw_data.c
#	drivers/crypto/qat/qat_4xxx/adf_4xxx_hw_data.h
#	drivers/crypto/qat/qat_common/adf_accel_devices.h
#	drivers/crypto/qat/qat_common/adf_admin.c
#	drivers/crypto/qat/qat_common/adf_gen4_hw_data.h
#	drivers/crypto/qat/qat_common/adf_init.c
#	drivers/crypto/qat/qat_common/adf_rl.c
#	drivers/crypto/qat/qat_common/adf_rl.h
#	drivers/crypto/qat/qat_common/adf_rl_admin.c
#	drivers/crypto/qat/qat_common/adf_rl_admin.h
#	drivers/crypto/qat/qat_common/icp_qat_fw_init_admin.h
diff --cc drivers/crypto/qat/qat_4xxx/adf_4xxx_hw_data.c
index 3eda91aa7c11,2bba58a2c76f..000000000000
--- a/drivers/crypto/qat/qat_4xxx/adf_4xxx_hw_data.c
+++ b/drivers/crypto/qat/qat_4xxx/adf_4xxx_hw_data.c
@@@ -326,6 -335,32 +326,35 @@@ static void get_admin_info(struct admin
  	admin_csrs_info->admin_msg_lr = ADF_4XXX_ADMINMSGLR_OFFSET;
  }
  
++<<<<<<< HEAD:drivers/crypto/qat/qat_4xxx/adf_4xxx_hw_data.c
++=======
+ static u32 get_heartbeat_clock(struct adf_hw_device_data *self)
+ {
+ 	/*
+ 	 * 4XXX uses KPT counter for HB
+ 	 */
+ 	return ADF_4XXX_KPT_COUNTER_FREQ;
+ }
+ 
+ static void adf_init_rl_data(struct adf_rl_hw_data *rl_data)
+ {
+ 	rl_data->pciout_tb_offset = ADF_GEN4_RL_TOKEN_PCIEOUT_BUCKET_OFFSET;
+ 	rl_data->pciin_tb_offset = ADF_GEN4_RL_TOKEN_PCIEIN_BUCKET_OFFSET;
+ 	rl_data->r2l_offset = ADF_GEN4_RL_R2L_OFFSET;
+ 	rl_data->l2c_offset = ADF_GEN4_RL_L2C_OFFSET;
+ 	rl_data->c2s_offset = ADF_GEN4_RL_C2S_OFFSET;
+ 
+ 	rl_data->pcie_scale_div = ADF_4XXX_RL_PCIE_SCALE_FACTOR_DIV;
+ 	rl_data->pcie_scale_mul = ADF_4XXX_RL_PCIE_SCALE_FACTOR_MUL;
+ 	rl_data->dcpr_correction = ADF_4XXX_RL_DCPR_CORRECTION;
+ 	rl_data->max_tp[ADF_SVC_ASYM] = ADF_4XXX_RL_MAX_TP_ASYM;
+ 	rl_data->max_tp[ADF_SVC_SYM] = ADF_4XXX_RL_MAX_TP_SYM;
+ 	rl_data->max_tp[ADF_SVC_DC] = ADF_4XXX_RL_MAX_TP_DC;
+ 	rl_data->scan_interval = ADF_4XXX_RL_SCANS_PER_SEC;
+ 	rl_data->scale_ref = ADF_4XXX_RL_SLICE_REF;
+ }
+ 
++>>>>>>> d9fb8408376e (crypto: qat - add rate limiting feature to qat_4xxx):drivers/crypto/intel/qat/qat_4xxx/adf_4xxx_hw_data.c
  static void adf_enable_error_correction(struct adf_accel_dev *accel_dev)
  {
  	struct adf_bar *misc_bar = &GET_BARS(accel_dev)[ADF_4XXX_PMISC_BAR];
@@@ -517,10 -608,18 +546,23 @@@ void adf_init_hw_data_4xxx(struct adf_h
  	hw_data->enable_pm = adf_gen4_enable_pm;
  	hw_data->handle_pm_interrupt = adf_gen4_handle_pm_interrupt;
  	hw_data->dev_config = adf_gen4_dev_config;
++<<<<<<< HEAD:drivers/crypto/qat/qat_4xxx/adf_4xxx_hw_data.c
++=======
+ 	hw_data->start_timer = adf_gen4_timer_start;
+ 	hw_data->stop_timer = adf_gen4_timer_stop;
+ 	hw_data->get_hb_clock = get_heartbeat_clock;
+ 	hw_data->num_hb_ctrs = ADF_NUM_HB_CNT_PER_AE;
+ 	hw_data->clock_frequency = ADF_4XXX_AE_FREQ;
++>>>>>>> d9fb8408376e (crypto: qat - add rate limiting feature to qat_4xxx):drivers/crypto/intel/qat/qat_4xxx/adf_4xxx_hw_data.c
  
 -	adf_gen4_set_err_mask(&hw_data->dev_err_mask);
  	adf_gen4_init_hw_csr_ops(&hw_data->csr_ops);
  	adf_gen4_init_pf_pfvf_ops(&hw_data->pfvf_ops);
  	adf_gen4_init_dc_ops(&hw_data->dc_ops);
++<<<<<<< HEAD:drivers/crypto/qat/qat_4xxx/adf_4xxx_hw_data.c
++=======
+ 	adf_gen4_init_ras_ops(&hw_data->ras_ops);
+ 	adf_init_rl_data(&hw_data->rl_data);
++>>>>>>> d9fb8408376e (crypto: qat - add rate limiting feature to qat_4xxx):drivers/crypto/intel/qat/qat_4xxx/adf_4xxx_hw_data.c
  }
  
  void adf_clean_hw_data_4xxx(struct adf_hw_device_data *hw_data)
diff --cc drivers/crypto/qat/qat_4xxx/adf_4xxx_hw_data.h
index e5b314d2b60e,33423295e90f..000000000000
--- a/drivers/crypto/qat/qat_4xxx/adf_4xxx_hw_data.h
+++ b/drivers/crypto/qat/qat_4xxx/adf_4xxx_hw_data.h
@@@ -64,6 -82,20 +64,23 @@@
  #define ADF_402XX_ASYM_OBJ	"qat_402xx_asym.bin"
  #define ADF_402XX_ADMIN_OBJ	"qat_402xx_admin.bin"
  
++<<<<<<< HEAD:drivers/crypto/qat/qat_4xxx/adf_4xxx_hw_data.h
++=======
+ /* RL constants */
+ #define ADF_4XXX_RL_PCIE_SCALE_FACTOR_DIV	100
+ #define ADF_4XXX_RL_PCIE_SCALE_FACTOR_MUL	102
+ #define ADF_4XXX_RL_DCPR_CORRECTION		1
+ #define ADF_4XXX_RL_SCANS_PER_SEC		954
+ #define ADF_4XXX_RL_MAX_TP_ASYM			173750UL
+ #define ADF_4XXX_RL_MAX_TP_SYM			95000UL
+ #define ADF_4XXX_RL_MAX_TP_DC			45000UL
+ #define ADF_4XXX_RL_SLICE_REF			1000UL
+ 
+ /* Clocks frequency */
+ #define ADF_4XXX_KPT_COUNTER_FREQ	(100 * HZ_PER_MHZ)
+ #define ADF_4XXX_AE_FREQ		(1000 * HZ_PER_MHZ)
+ 
++>>>>>>> d9fb8408376e (crypto: qat - add rate limiting feature to qat_4xxx):drivers/crypto/intel/qat/qat_4xxx/adf_4xxx_hw_data.h
  /* qat_4xxx fuse bits are different from old GENs, redefine them */
  enum icp_qat_4xxx_slice_mask {
  	ICP_ACCEL_4XXX_MASK_CIPHER_SLICE = BIT(0),
diff --cc drivers/crypto/qat/qat_common/adf_accel_devices.h
index c43e39c34d9b,30c2b15ff801..000000000000
--- a/drivers/crypto/qat/qat_common/adf_accel_devices.h
+++ b/drivers/crypto/qat/qat_common/adf_accel_devices.h
@@@ -7,7 -7,9 +7,8 @@@
  #include <linux/list.h>
  #include <linux/io.h>
  #include <linux/ratelimit.h>
 -#include <linux/types.h>
  #include "adf_cfg_common.h"
+ #include "adf_rl.h"
  #include "adf_pfvf_msg.h"
  
  #define ADF_DH895XCC_DEVICE_NAME "dh895xcc"
@@@ -209,6 -246,9 +210,12 @@@ struct adf_hw_device_data 
  	struct adf_pfvf_ops pfvf_ops;
  	struct adf_hw_csr_ops csr_ops;
  	struct adf_dc_ops dc_ops;
++<<<<<<< HEAD:drivers/crypto/qat/qat_common/adf_accel_devices.h
++=======
+ 	struct adf_ras_ops ras_ops;
+ 	struct adf_dev_err_mask dev_err_mask;
+ 	struct adf_rl_hw_data rl_data;
++>>>>>>> d9fb8408376e (crypto: qat - add rate limiting feature to qat_4xxx):drivers/crypto/intel/qat/qat_common/adf_accel_devices.h
  	const char *fw_name;
  	const char *fw_mmp_name;
  	u32 fuses;
@@@ -295,6 -356,11 +302,12 @@@ struct adf_accel_dev 
  	struct list_head list;
  	struct module *owner;
  	struct adf_accel_pci accel_pci_dev;
++<<<<<<< HEAD:drivers/crypto/qat/qat_common/adf_accel_devices.h
++=======
+ 	struct adf_timer *timer;
+ 	struct adf_heartbeat *heartbeat;
+ 	struct adf_rl *rate_limiting;
++>>>>>>> d9fb8408376e (crypto: qat - add rate limiting feature to qat_4xxx):drivers/crypto/intel/qat/qat_common/adf_accel_devices.h
  	union {
  		struct {
  			/* protects VF2PF interrupts access */
diff --cc drivers/crypto/qat/qat_common/adf_admin.c
index 118775ee02f2,54b673ec2362..000000000000
--- a/drivers/crypto/qat/qat_common/adf_admin.c
+++ b/drivers/crypto/qat/qat_common/adf_admin.c
@@@ -223,6 -254,129 +223,132 @@@ static int adf_get_dc_capabilities(stru
  	return 0;
  }
  
++<<<<<<< HEAD:drivers/crypto/qat/qat_common/adf_admin.c
++=======
+ int adf_get_ae_fw_counters(struct adf_accel_dev *accel_dev, u16 ae, u64 *reqs, u64 *resps)
+ {
+ 	struct icp_qat_fw_init_admin_resp resp = { };
+ 	struct icp_qat_fw_init_admin_req req = { };
+ 	int ret;
+ 
+ 	req.cmd_id = ICP_QAT_FW_COUNTERS_GET;
+ 
+ 	ret = adf_put_admin_msg_sync(accel_dev, ae, &req, &resp);
+ 	if (ret || resp.status)
+ 		return -EFAULT;
+ 
+ 	*reqs = resp.req_rec_count;
+ 	*resps = resp.resp_sent_count;
+ 
+ 	return 0;
+ }
+ 
+ int adf_send_admin_tim_sync(struct adf_accel_dev *accel_dev, u32 cnt)
+ {
+ 	u32 ae_mask = accel_dev->hw_device->ae_mask;
+ 	struct icp_qat_fw_init_admin_req req = { };
+ 	struct icp_qat_fw_init_admin_resp resp = { };
+ 
+ 	req.cmd_id = ICP_QAT_FW_SYNC;
+ 	req.int_timer_ticks = cnt;
+ 
+ 	return adf_send_admin(accel_dev, &req, &resp, ae_mask);
+ }
+ 
+ int adf_send_admin_hb_timer(struct adf_accel_dev *accel_dev, uint32_t ticks)
+ {
+ 	u32 ae_mask = accel_dev->hw_device->ae_mask;
+ 	struct icp_qat_fw_init_admin_req req = { };
+ 	struct icp_qat_fw_init_admin_resp resp;
+ 
+ 	req.cmd_id = ICP_QAT_FW_HEARTBEAT_TIMER_SET;
+ 	req.init_cfg_ptr = accel_dev->heartbeat->dma.phy_addr;
+ 	req.heartbeat_ticks = ticks;
+ 
+ 	return adf_send_admin(accel_dev, &req, &resp, ae_mask);
+ }
+ 
+ static bool is_dcc_enabled(struct adf_accel_dev *accel_dev)
+ {
+ 	char services[ADF_CFG_MAX_VAL_LEN_IN_BYTES] = {0};
+ 	int ret;
+ 
+ 	ret = adf_cfg_get_param_value(accel_dev, ADF_GENERAL_SEC,
+ 				      ADF_SERVICES_ENABLED, services);
+ 	if (ret)
+ 		return false;
+ 
+ 	return !strcmp(services, "dcc");
+ }
+ 
+ static int adf_get_fw_capabilities(struct adf_accel_dev *accel_dev, u16 *caps)
+ {
+ 	u32 ae_mask = accel_dev->hw_device->admin_ae_mask;
+ 	struct icp_qat_fw_init_admin_resp resp = { };
+ 	struct icp_qat_fw_init_admin_req req = { };
+ 	int ret;
+ 
+ 	if (!ae_mask)
+ 		return 0;
+ 
+ 	req.cmd_id = ICP_QAT_FW_CAPABILITIES_GET;
+ 	ret = adf_send_admin(accel_dev, &req, &resp, ae_mask);
+ 	if (ret)
+ 		return ret;
+ 
+ 	*caps = resp.fw_capabilities;
+ 
+ 	return 0;
+ }
+ 
+ int adf_send_admin_rl_init(struct adf_accel_dev *accel_dev,
+ 			   struct icp_qat_fw_init_admin_slice_cnt *slices)
+ {
+ 	u32 ae_mask = accel_dev->hw_device->admin_ae_mask;
+ 	struct icp_qat_fw_init_admin_resp resp = { };
+ 	struct icp_qat_fw_init_admin_req req = { };
+ 	int ret;
+ 
+ 	req.cmd_id = ICP_QAT_FW_RL_INIT;
+ 
+ 	ret = adf_send_admin(accel_dev, &req, &resp, ae_mask);
+ 	if (ret)
+ 		return ret;
+ 
+ 	memcpy(slices, &resp.slices, sizeof(*slices));
+ 
+ 	return 0;
+ }
+ 
+ int adf_send_admin_rl_add_update(struct adf_accel_dev *accel_dev,
+ 				 struct icp_qat_fw_init_admin_req *req)
+ {
+ 	u32 ae_mask = accel_dev->hw_device->admin_ae_mask;
+ 	struct icp_qat_fw_init_admin_resp resp = { };
+ 
+ 	/*
+ 	 * req struct filled in rl implementation. Used commands
+ 	 * ICP_QAT_FW_RL_ADD for a new SLA
+ 	 * ICP_QAT_FW_RL_UPDATE for update SLA
+ 	 */
+ 	return adf_send_admin(accel_dev, req, &resp, ae_mask);
+ }
+ 
+ int adf_send_admin_rl_delete(struct adf_accel_dev *accel_dev, u16 node_id,
+ 			     u8 node_type)
+ {
+ 	u32 ae_mask = accel_dev->hw_device->admin_ae_mask;
+ 	struct icp_qat_fw_init_admin_resp resp = { };
+ 	struct icp_qat_fw_init_admin_req req = { };
+ 
+ 	req.cmd_id = ICP_QAT_FW_RL_REMOVE;
+ 	req.node_id = node_id;
+ 	req.node_type = node_type;
+ 
+ 	return adf_send_admin(accel_dev, &req, &resp, ae_mask);
+ }
+ 
++>>>>>>> d9fb8408376e (crypto: qat - add rate limiting feature to qat_4xxx):drivers/crypto/intel/qat/qat_common/adf_admin.c
  /**
   * adf_send_admin_init() - Function sends init message to FW
   * @accel_dev: Pointer to acceleration device.
diff --cc drivers/crypto/qat/qat_common/adf_gen4_hw_data.h
index 4fb4b3df5a18,1813fe1d5a06..000000000000
--- a/drivers/crypto/qat/qat_common/adf_gen4_hw_data.h
+++ b/drivers/crypto/qat/qat_common/adf_gen4_hw_data.h
@@@ -136,6 -136,16 +136,19 @@@ do { 
  
  #define ADF_GEN4_VFLNOTIFY	BIT(7)
  
++<<<<<<< HEAD:drivers/crypto/qat/qat_common/adf_gen4_hw_data.h
++=======
+ /* Number of heartbeat counter pairs */
+ #define ADF_NUM_HB_CNT_PER_AE ADF_NUM_THREADS_PER_AE
+ 
+ /* Rate Limiting */
+ #define ADF_GEN4_RL_R2L_OFFSET			0x508000
+ #define ADF_GEN4_RL_L2C_OFFSET			0x509000
+ #define ADF_GEN4_RL_C2S_OFFSET			0x508818
+ #define ADF_GEN4_RL_TOKEN_PCIEIN_BUCKET_OFFSET	0x508800
+ #define ADF_GEN4_RL_TOKEN_PCIEOUT_BUCKET_OFFSET	0x508804
+ 
++>>>>>>> d9fb8408376e (crypto: qat - add rate limiting feature to qat_4xxx):drivers/crypto/intel/qat/qat_common/adf_gen4_hw_data.h
  void adf_gen4_set_ssm_wdtimer(struct adf_accel_dev *accel_dev);
  void adf_gen4_init_hw_csr_ops(struct adf_hw_csr_ops *csr_ops);
  int adf_gen4_ring_pair_reset(struct adf_accel_dev *accel_dev, u32 bank_number);
diff --cc drivers/crypto/qat/qat_common/adf_init.c
index 55c4bf1a3b16,81c39f3d07e1..000000000000
--- a/drivers/crypto/qat/qat_common/adf_init.c
+++ b/drivers/crypto/qat/qat_common/adf_init.c
@@@ -7,6 -7,10 +7,13 @@@
  #include "adf_accel_devices.h"
  #include "adf_cfg.h"
  #include "adf_common_drv.h"
++<<<<<<< HEAD:drivers/crypto/qat/qat_common/adf_init.c
++=======
+ #include "adf_dbgfs.h"
+ #include "adf_heartbeat.h"
+ #include "adf_rl.h"
+ #include "adf_sysfs_ras_counters.h"
++>>>>>>> d9fb8408376e (crypto: qat - add rate limiting feature to qat_4xxx):drivers/crypto/intel/qat/qat_common/adf_init.c
  
  static LIST_HEAD(service_table);
  static DEFINE_MUTEX(service_lock);
@@@ -128,6 -137,11 +135,14 @@@ static int adf_dev_init(struct adf_acce
  			return -EFAULT;
  	}
  
++<<<<<<< HEAD:drivers/crypto/qat/qat_common/adf_init.c
++=======
+ 	adf_heartbeat_init(accel_dev);
+ 	ret = adf_rl_init(accel_dev);
+ 	if (ret && ret != -EOPNOTSUPP)
+ 		return ret;
+ 
++>>>>>>> d9fb8408376e (crypto: qat - add rate limiting feature to qat_4xxx):drivers/crypto/intel/qat/qat_common/adf_init.c
  	/*
  	 * Subservice initialisation is divided into two stages: init and start.
  	 * This is to facilitate any ordering dependencies between services
@@@ -186,8 -207,20 +201,25 @@@ static int adf_dev_start(struct adf_acc
  		return -EFAULT;
  	}
  
++<<<<<<< HEAD:drivers/crypto/qat/qat_common/adf_init.c
 +	list_for_each(list_itr, &service_table) {
 +		service = list_entry(list_itr, struct service_hndl, list);
++=======
+ 	if (hw_data->start_timer) {
+ 		ret = hw_data->start_timer(accel_dev);
+ 		if (ret) {
+ 			dev_err(&GET_DEV(accel_dev), "Failed to start internal sync timer\n");
+ 			return ret;
+ 		}
+ 	}
+ 
+ 	adf_heartbeat_start(accel_dev);
+ 	ret = adf_rl_start(accel_dev);
+ 	if (ret && ret != -EOPNOTSUPP)
+ 		return ret;
+ 
+ 	list_for_each_entry(service, &service_table, list) {
++>>>>>>> d9fb8408376e (crypto: qat - add rate limiting feature to qat_4xxx):drivers/crypto/intel/qat/qat_common/adf_init.c
  		if (service->event_hld(accel_dev, ADF_EVENT_START)) {
  			dev_err(&GET_DEV(accel_dev),
  				"Failed to start service %s\n",
@@@ -241,6 -279,10 +273,13 @@@ static void adf_dev_stop(struct adf_acc
  	    !test_bit(ADF_STATUS_STARTING, &accel_dev->status))
  		return;
  
++<<<<<<< HEAD:drivers/crypto/qat/qat_common/adf_init.c
++=======
+ 	adf_rl_stop(accel_dev);
+ 	adf_dbgfs_rm(accel_dev);
+ 	adf_sysfs_stop_ras(accel_dev);
+ 
++>>>>>>> d9fb8408376e (crypto: qat - add rate limiting feature to qat_4xxx):drivers/crypto/intel/qat/qat_common/adf_init.c
  	clear_bit(ADF_STATUS_STARTING, &accel_dev->status);
  	clear_bit(ADF_STATUS_STARTED, &accel_dev->status);
  
@@@ -323,6 -367,13 +362,16 @@@ static void adf_dev_shutdown(struct adf
  			clear_bit(accel_dev->accel_id, service->init_status);
  	}
  
++<<<<<<< HEAD:drivers/crypto/qat/qat_common/adf_init.c
++=======
+ 	adf_rl_exit(accel_dev);
+ 
+ 	if (hw_data->ras_ops.disable_ras_errors)
+ 		hw_data->ras_ops.disable_ras_errors(accel_dev);
+ 
+ 	adf_heartbeat_shutdown(accel_dev);
+ 
++>>>>>>> d9fb8408376e (crypto: qat - add rate limiting feature to qat_4xxx):drivers/crypto/intel/qat/qat_common/adf_init.c
  	hw_data->disable_iov(accel_dev);
  
  	if (test_bit(ADF_STATUS_IRQ_ALLOCATED, &accel_dev->status)) {
diff --cc drivers/crypto/qat/qat_common/icp_qat_fw_init_admin.h
index 56cb827f93ea,cd418b51d9f3..000000000000
--- a/drivers/crypto/qat/qat_common/icp_qat_fw_init_admin.h
+++ b/drivers/crypto/qat/qat_common/icp_qat_fw_init_admin.h
@@@ -16,7 -18,17 +18,21 @@@ enum icp_qat_fw_init_admin_cmd_id 
  	ICP_QAT_FW_HEARTBEAT_SYNC = 7,
  	ICP_QAT_FW_HEARTBEAT_GET = 8,
  	ICP_QAT_FW_COMP_CAPABILITY_GET = 9,
++<<<<<<< HEAD:drivers/crypto/qat/qat_common/icp_qat_fw_init_admin.h
++	ICP_QAT_FW_PM_STATE_CONFIG = 128,
++=======
+ 	ICP_QAT_FW_CRYPTO_CAPABILITY_GET = 10,
+ 	ICP_QAT_FW_DC_CHAIN_INIT = 11,
+ 	ICP_QAT_FW_HEARTBEAT_TIMER_SET = 13,
+ 	ICP_QAT_FW_RL_INIT = 15,
+ 	ICP_QAT_FW_TIMER_GET = 19,
+ 	ICP_QAT_FW_CNV_STATS_GET = 20,
  	ICP_QAT_FW_PM_STATE_CONFIG = 128,
+ 	ICP_QAT_FW_PM_INFO = 129,
+ 	ICP_QAT_FW_RL_ADD = 134,
+ 	ICP_QAT_FW_RL_UPDATE = 135,
+ 	ICP_QAT_FW_RL_REMOVE = 136,
++>>>>>>> d9fb8408376e (crypto: qat - add rate limiting feature to qat_4xxx):drivers/crypto/intel/qat/qat_common/icp_qat_fw_init_admin.h
  };
  
  enum icp_qat_fw_init_admin_resp_status {
@@@ -37,6 -73,19 +77,22 @@@ struct icp_qat_fw_init_admin_req 
  			__u16 ibuf_size_in_kb;
  			__u16 resrvd3;
  		};
++<<<<<<< HEAD:drivers/crypto/qat/qat_common/icp_qat_fw_init_admin.h
++=======
+ 		struct {
+ 			__u32 int_timer_ticks;
+ 		};
+ 		struct {
+ 			__u32 heartbeat_ticks;
+ 		};
+ 		struct {
+ 			__u16 node_id;
+ 			__u8 node_type;
+ 			__u8 svc_type;
+ 			__u8 resrvd5[3];
+ 			__u8 rp_count;
+ 		};
++>>>>>>> d9fb8408376e (crypto: qat - add rate limiting feature to qat_4xxx):drivers/crypto/intel/qat/qat_common/icp_qat_fw_init_admin.h
  		__u32 idle_filter;
  	};
  
@@@ -94,6 -147,8 +150,11 @@@ struct icp_qat_fw_init_admin_resp 
  			__u32 unsuccessful_count;
  			__u64 resrvd8;
  		};
++<<<<<<< HEAD:drivers/crypto/qat/qat_common/icp_qat_fw_init_admin.h
++=======
+ 		struct icp_qat_fw_init_admin_slice_cnt slices;
+ 		__u16 fw_capabilities;
++>>>>>>> d9fb8408376e (crypto: qat - add rate limiting feature to qat_4xxx):drivers/crypto/intel/qat/qat_common/icp_qat_fw_init_admin.h
  	};
  } __packed;
  
* Unmerged path drivers/crypto/intel/qat/qat_common/adf_admin.h
* Unmerged path drivers/crypto/qat/qat_common/adf_rl.c
* Unmerged path drivers/crypto/qat/qat_common/adf_rl.h
* Unmerged path drivers/crypto/qat/qat_common/adf_rl_admin.c
* Unmerged path drivers/crypto/qat/qat_common/adf_rl_admin.h
* Unmerged path drivers/crypto/intel/qat/qat_common/adf_admin.h
* Unmerged path drivers/crypto/qat/qat_4xxx/adf_4xxx_hw_data.c
* Unmerged path drivers/crypto/qat/qat_4xxx/adf_4xxx_hw_data.h
diff --git a/drivers/crypto/qat/qat_common/Makefile b/drivers/crypto/qat/qat_common/Makefile
index 1fb8d50f509f..d265780a515a 100644
--- a/drivers/crypto/qat/qat_common/Makefile
+++ b/drivers/crypto/qat/qat_common/Makefile
@@ -23,6 +23,8 @@ intel_qat-objs := adf_cfg.o \
 	qat_algs.o \
 	qat_asym_algs.o \
 	qat_algs_send.o \
+	adf_rl.o \
+	adf_rl_admin.o \
 	qat_uclo.o \
 	qat_hal.o \
 	qat_bl.o
* Unmerged path drivers/crypto/qat/qat_common/adf_accel_devices.h
* Unmerged path drivers/crypto/qat/qat_common/adf_admin.c
* Unmerged path drivers/crypto/qat/qat_common/adf_gen4_hw_data.h
* Unmerged path drivers/crypto/qat/qat_common/adf_init.c
* Unmerged path drivers/crypto/qat/qat_common/adf_rl.c
* Unmerged path drivers/crypto/qat/qat_common/adf_rl.h
* Unmerged path drivers/crypto/qat/qat_common/adf_rl_admin.c
* Unmerged path drivers/crypto/qat/qat_common/adf_rl_admin.h
* Unmerged path drivers/crypto/qat/qat_common/icp_qat_fw_init_admin.h
