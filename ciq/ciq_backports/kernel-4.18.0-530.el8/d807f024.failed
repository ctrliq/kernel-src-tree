crypto: qat - add cnv_errors debugfs file

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-530.el8
commit-author Lucas Segarra Fernandez <lucas.segarra.fernandez@intel.com>
commit d807f0240c713bdd7c81a7e212f2feb0b5cd6725
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-530.el8/d807f024.failed

The Compress and Verify (CnV) feature check and ensures data integrity
in the compression operation. The implementation of CnV keeps a record
of the CnV errors that have occurred since the driver was loaded.

Expose CnV error stats by providing the "cnv_errors" file under
debugfs. This includes the number of errors detected up to now and
the type of the last error. The error count is provided on a per
Acceleration Engine basis and it is reset every time the driver is loaded.

	Signed-off-by: Lucas Segarra Fernandez <lucas.segarra.fernandez@intel.com>
	Reviewed-by: Giovanni Cabiddu <giovanni.cabiddu@intel.com>
	Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
(cherry picked from commit d807f0240c713bdd7c81a7e212f2feb0b5cd6725)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	Documentation/ABI/testing/debugfs-driver-qat
#	drivers/crypto/intel/qat/qat_common/adf_dbgfs.c
#	drivers/crypto/qat/qat_common/Makefile
#	drivers/crypto/qat/qat_common/adf_accel_devices.h
#	drivers/crypto/qat/qat_common/adf_admin.c
#	drivers/crypto/qat/qat_common/adf_cnv_dbgfs.c
#	drivers/crypto/qat/qat_common/adf_cnv_dbgfs.h
#	drivers/crypto/qat/qat_common/adf_common_drv.h
#	drivers/crypto/qat/qat_common/icp_qat_fw_init_admin.h
diff --cc drivers/crypto/qat/qat_common/Makefile
index 1fb8d50f509f,204c7d0aa31e..000000000000
--- a/drivers/crypto/qat/qat_common/Makefile
+++ b/drivers/crypto/qat/qat_common/Makefile
@@@ -27,7 -30,15 +27,19 @@@ intel_qat-objs := adf_cfg.o 
  	qat_hal.o \
  	qat_bl.o
  
++<<<<<<< HEAD:drivers/crypto/qat/qat_common/Makefile
 +intel_qat-$(CONFIG_DEBUG_FS) += adf_transport_debug.o
++=======
+ intel_qat-$(CONFIG_DEBUG_FS) += adf_transport_debug.o \
+ 				adf_fw_counters.o \
+ 				adf_cnv_dbgfs.o \
+ 				adf_gen4_pm_debugfs.o \
+ 				adf_heartbeat.o \
+ 				adf_heartbeat_dbgfs.o \
+ 				adf_pm_dbgfs.o \
+ 				adf_dbgfs.o
+ 
++>>>>>>> d807f0240c71 (crypto: qat - add cnv_errors debugfs file):drivers/crypto/intel/qat/qat_common/Makefile
  intel_qat-$(CONFIG_PCI_IOV) += adf_sriov.o adf_vf_isr.o adf_pfvf_utils.o \
  			       adf_pfvf_pf_msg.o adf_pfvf_pf_proto.o \
  			       adf_pfvf_vf_msg.o adf_pfvf_vf_proto.o \
diff --cc drivers/crypto/qat/qat_common/adf_accel_devices.h
index c43e39c34d9b,9677c8e0f180..000000000000
--- a/drivers/crypto/qat/qat_common/adf_accel_devices.h
+++ b/drivers/crypto/qat/qat_common/adf_accel_devices.h
@@@ -292,6 -316,8 +292,11 @@@ struct adf_accel_dev 
  	unsigned long status;
  	atomic_t ref_count;
  	struct dentry *debugfs_dir;
++<<<<<<< HEAD:drivers/crypto/qat/qat_common/adf_accel_devices.h
++=======
+ 	struct dentry *fw_cntr_dbgfile;
+ 	struct dentry *cnv_dbgfile;
++>>>>>>> d807f0240c71 (crypto: qat - add cnv_errors debugfs file):drivers/crypto/intel/qat/qat_common/adf_accel_devices.h
  	struct list_head list;
  	struct module *owner;
  	struct adf_accel_pci accel_pci_dev;
diff --cc drivers/crypto/qat/qat_common/adf_admin.c
index 118775ee02f2,3a04e743497f..000000000000
--- a/drivers/crypto/qat/qat_common/adf_admin.c
+++ b/drivers/crypto/qat/qat_common/adf_admin.c
@@@ -287,6 -379,54 +287,57 @@@ int adf_init_admin_pm(struct adf_accel_
  	return adf_send_admin(accel_dev, &req, &resp, ae_mask);
  }
  
++<<<<<<< HEAD:drivers/crypto/qat/qat_common/adf_admin.c
++=======
+ int adf_get_pm_info(struct adf_accel_dev *accel_dev, dma_addr_t p_state_addr,
+ 		    size_t buff_size)
+ {
+ 	struct adf_hw_device_data *hw_data = accel_dev->hw_device;
+ 	struct icp_qat_fw_init_admin_req req = { };
+ 	struct icp_qat_fw_init_admin_resp resp;
+ 	u32 ae_mask = hw_data->admin_ae_mask;
+ 	int ret;
+ 
+ 	/* Query pm info via init/admin cmd */
+ 	if (!accel_dev->admin) {
+ 		dev_err(&GET_DEV(accel_dev), "adf_admin is not available\n");
+ 		return -EFAULT;
+ 	}
+ 
+ 	req.cmd_id = ICP_QAT_FW_PM_INFO;
+ 	req.init_cfg_sz = buff_size;
+ 	req.init_cfg_ptr = p_state_addr;
+ 
+ 	ret = adf_send_admin(accel_dev, &req, &resp, ae_mask);
+ 	if (ret)
+ 		dev_err(&GET_DEV(accel_dev),
+ 			"Failed to query power-management info\n");
+ 
+ 	return ret;
+ }
+ 
+ int adf_get_cnv_stats(struct adf_accel_dev *accel_dev, u16 ae, u16 *err_cnt,
+ 		      u16 *latest_err)
+ {
+ 	struct icp_qat_fw_init_admin_req req = { };
+ 	struct icp_qat_fw_init_admin_resp resp;
+ 	int ret;
+ 
+ 	req.cmd_id = ICP_QAT_FW_CNV_STATS_GET;
+ 
+ 	ret = adf_put_admin_msg_sync(accel_dev, ae, &req, &resp);
+ 	if (ret)
+ 		return ret;
+ 	if (resp.status)
+ 		return -EPROTONOSUPPORT;
+ 
+ 	*err_cnt = resp.error_count;
+ 	*latest_err = resp.latest_error;
+ 
+ 	return ret;
+ }
+ 
++>>>>>>> d807f0240c71 (crypto: qat - add cnv_errors debugfs file):drivers/crypto/intel/qat/qat_common/adf_admin.c
  int adf_init_admin_comms(struct adf_accel_dev *accel_dev)
  {
  	struct adf_admin_comms *admin;
diff --cc drivers/crypto/qat/qat_common/adf_common_drv.h
index ca85fbecaebb,18a382508542..000000000000
--- a/drivers/crypto/qat/qat_common/adf_common_drv.h
+++ b/drivers/crypto/qat/qat_common/adf_common_drv.h
@@@ -89,7 -90,13 +89,15 @@@ void adf_exit_aer(void)
  int adf_init_admin_comms(struct adf_accel_dev *accel_dev);
  void adf_exit_admin_comms(struct adf_accel_dev *accel_dev);
  int adf_send_admin_init(struct adf_accel_dev *accel_dev);
 -int adf_get_ae_fw_counters(struct adf_accel_dev *accel_dev, u16 ae, u64 *reqs, u64 *resps);
  int adf_init_admin_pm(struct adf_accel_dev *accel_dev, u32 idle_delay);
++<<<<<<< HEAD:drivers/crypto/qat/qat_common/adf_common_drv.h
++=======
+ int adf_send_admin_tim_sync(struct adf_accel_dev *accel_dev, u32 cnt);
+ int adf_send_admin_hb_timer(struct adf_accel_dev *accel_dev, uint32_t ticks);
+ int adf_get_fw_timestamp(struct adf_accel_dev *accel_dev, u64 *timestamp);
+ int adf_get_pm_info(struct adf_accel_dev *accel_dev, dma_addr_t p_state_addr, size_t buff_size);
+ int adf_get_cnv_stats(struct adf_accel_dev *accel_dev, u16 ae, u16 *err_cnt, u16 *latest_err);
++>>>>>>> d807f0240c71 (crypto: qat - add cnv_errors debugfs file):drivers/crypto/intel/qat/qat_common/adf_common_drv.h
  int adf_init_arb(struct adf_accel_dev *accel_dev);
  void adf_exit_arb(struct adf_accel_dev *accel_dev);
  void adf_update_ring_arb(struct adf_etr_ring_data *ring);
diff --cc drivers/crypto/qat/qat_common/icp_qat_fw_init_admin.h
index 56cb827f93ea,9e5ce419d875..000000000000
--- a/drivers/crypto/qat/qat_common/icp_qat_fw_init_admin.h
+++ b/drivers/crypto/qat/qat_common/icp_qat_fw_init_admin.h
@@@ -16,7 -16,12 +16,14 @@@ enum icp_qat_fw_init_admin_cmd_id 
  	ICP_QAT_FW_HEARTBEAT_SYNC = 7,
  	ICP_QAT_FW_HEARTBEAT_GET = 8,
  	ICP_QAT_FW_COMP_CAPABILITY_GET = 9,
++<<<<<<< HEAD:drivers/crypto/qat/qat_common/icp_qat_fw_init_admin.h
++=======
+ 	ICP_QAT_FW_DC_CHAIN_INIT = 11,
+ 	ICP_QAT_FW_HEARTBEAT_TIMER_SET = 13,
+ 	ICP_QAT_FW_TIMER_GET = 19,
+ 	ICP_QAT_FW_CNV_STATS_GET = 20,
++>>>>>>> d807f0240c71 (crypto: qat - add cnv_errors debugfs file):drivers/crypto/intel/qat/qat_common/icp_qat_fw_init_admin.h
  	ICP_QAT_FW_PM_STATE_CONFIG = 128,
 -	ICP_QAT_FW_PM_INFO = 129,
  };
  
  enum icp_qat_fw_init_admin_resp_status {
* Unmerged path Documentation/ABI/testing/debugfs-driver-qat
* Unmerged path drivers/crypto/intel/qat/qat_common/adf_dbgfs.c
* Unmerged path drivers/crypto/qat/qat_common/adf_cnv_dbgfs.c
* Unmerged path drivers/crypto/qat/qat_common/adf_cnv_dbgfs.h
* Unmerged path Documentation/ABI/testing/debugfs-driver-qat
* Unmerged path drivers/crypto/intel/qat/qat_common/adf_dbgfs.c
* Unmerged path drivers/crypto/qat/qat_common/Makefile
* Unmerged path drivers/crypto/qat/qat_common/adf_accel_devices.h
* Unmerged path drivers/crypto/qat/qat_common/adf_admin.c
* Unmerged path drivers/crypto/qat/qat_common/adf_cnv_dbgfs.c
* Unmerged path drivers/crypto/qat/qat_common/adf_cnv_dbgfs.h
* Unmerged path drivers/crypto/qat/qat_common/adf_common_drv.h
* Unmerged path drivers/crypto/qat/qat_common/icp_qat_fw_init_admin.h
