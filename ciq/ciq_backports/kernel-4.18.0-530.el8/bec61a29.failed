crypto: qat - add heartbeat counters check

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-530.el8
commit-author Damian Muszynski <damian.muszynski@intel.com>
commit bec61a294dbec1c5929aa6f138cddcab68a62311
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-530.el8/bec61a29.failed

A firmware update for QAT GEN2 changed the format of a data
structure used to report the heartbeat counters.

To support all firmware versions, extend the heartbeat logic
with an algorithm that detects the number of counters returned
by firmware. The algorithm detects the number of counters to
be used (and size of the corresponding data structure) by the
comparison the expected size of the data in memory, with the data
which was written by the firmware.

Firmware detection is done one time during the first read of heartbeat
debugfs file to avoid increasing the time needed to load the module.

	Signed-off-by: Damian Muszynski <damian.muszynski@intel.com>
	Reviewed-by: Giovanni Cabiddu <giovanni.cabiddu@intel.com>
	Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
	Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
(cherry picked from commit bec61a294dbec1c5929aa6f138cddcab68a62311)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/crypto/intel/qat/qat_common/adf_heartbeat.c
#	drivers/crypto/intel/qat/qat_common/adf_heartbeat.h
#	drivers/crypto/qat/qat_c3xxx/adf_c3xxx_hw_data.c
#	drivers/crypto/qat/qat_c62x/adf_c62x_hw_data.c
#	drivers/crypto/qat/qat_common/adf_accel_devices.h
#	drivers/crypto/qat/qat_dh895xcc/adf_dh895xcc_hw_data.c
diff --cc drivers/crypto/qat/qat_c3xxx/adf_c3xxx_hw_data.c
index 475643654e64,9c00c441b602..000000000000
--- a/drivers/crypto/qat/qat_c3xxx/adf_c3xxx_hw_data.c
+++ b/drivers/crypto/qat/qat_c3xxx/adf_c3xxx_hw_data.c
@@@ -127,6 -151,10 +128,13 @@@ void adf_init_hw_data_c3xxx(struct adf_
  	hw_data->set_ssm_wdtimer = adf_gen2_set_ssm_wdtimer;
  	hw_data->disable_iov = adf_disable_sriov;
  	hw_data->dev_config = adf_gen2_dev_config;
++<<<<<<< HEAD:drivers/crypto/qat/qat_c3xxx/adf_c3xxx_hw_data.c
++=======
+ 	hw_data->measure_clock = measure_clock;
+ 	hw_data->get_hb_clock = get_ts_clock;
+ 	hw_data->num_hb_ctrs = ADF_NUM_HB_CNT_PER_AE;
+ 	hw_data->check_hb_ctrs = adf_heartbeat_check_ctrs;
++>>>>>>> bec61a294dbe (crypto: qat - add heartbeat counters check):drivers/crypto/intel/qat/qat_c3xxx/adf_c3xxx_hw_data.c
  
  	adf_gen2_init_pf_pfvf_ops(&hw_data->pfvf_ops);
  	adf_gen2_init_hw_csr_ops(&hw_data->csr_ops);
diff --cc drivers/crypto/qat/qat_c62x/adf_c62x_hw_data.c
index e14270703670,355a781693eb..000000000000
--- a/drivers/crypto/qat/qat_c62x/adf_c62x_hw_data.c
+++ b/drivers/crypto/qat/qat_c62x/adf_c62x_hw_data.c
@@@ -129,6 -153,10 +130,13 @@@ void adf_init_hw_data_c62x(struct adf_h
  	hw_data->set_ssm_wdtimer = adf_gen2_set_ssm_wdtimer;
  	hw_data->disable_iov = adf_disable_sriov;
  	hw_data->dev_config = adf_gen2_dev_config;
++<<<<<<< HEAD:drivers/crypto/qat/qat_c62x/adf_c62x_hw_data.c
++=======
+ 	hw_data->measure_clock = measure_clock;
+ 	hw_data->get_hb_clock = get_ts_clock;
+ 	hw_data->num_hb_ctrs = ADF_NUM_HB_CNT_PER_AE;
+ 	hw_data->check_hb_ctrs = adf_heartbeat_check_ctrs;
++>>>>>>> bec61a294dbe (crypto: qat - add heartbeat counters check):drivers/crypto/intel/qat/qat_c62x/adf_c62x_hw_data.c
  
  	adf_gen2_init_pf_pfvf_ops(&hw_data->pfvf_ops);
  	adf_gen2_init_hw_csr_ops(&hw_data->csr_ops);
diff --cc drivers/crypto/qat/qat_common/adf_accel_devices.h
index 0399417b91fc,e57abde66f4f..000000000000
--- a/drivers/crypto/qat/qat_common/adf_accel_devices.h
+++ b/drivers/crypto/qat/qat_common/adf_accel_devices.h
@@@ -188,6 -188,11 +188,14 @@@ struct adf_hw_device_data 
  	int (*init_admin_comms)(struct adf_accel_dev *accel_dev);
  	void (*exit_admin_comms)(struct adf_accel_dev *accel_dev);
  	int (*send_admin_init)(struct adf_accel_dev *accel_dev);
++<<<<<<< HEAD:drivers/crypto/qat/qat_common/adf_accel_devices.h
++=======
+ 	int (*start_timer)(struct adf_accel_dev *accel_dev);
+ 	void (*stop_timer)(struct adf_accel_dev *accel_dev);
+ 	void (*check_hb_ctrs)(struct adf_accel_dev *accel_dev);
+ 	uint32_t (*get_hb_clock)(struct adf_hw_device_data *self);
+ 	int (*measure_clock)(struct adf_accel_dev *accel_dev);
++>>>>>>> bec61a294dbe (crypto: qat - add heartbeat counters check):drivers/crypto/intel/qat/qat_common/adf_accel_devices.h
  	int (*init_arb)(struct adf_accel_dev *accel_dev);
  	void (*exit_arb)(struct adf_accel_dev *accel_dev);
  	const u32 *(*get_arb_mapping)(struct adf_accel_dev *accel_dev);
diff --cc drivers/crypto/qat/qat_dh895xcc/adf_dh895xcc_hw_data.c
index 1ebe0b351fae,09551f949126..000000000000
--- a/drivers/crypto/qat/qat_dh895xcc/adf_dh895xcc_hw_data.c
+++ b/drivers/crypto/qat/qat_dh895xcc/adf_dh895xcc_hw_data.c
@@@ -237,6 -246,10 +238,13 @@@ void adf_init_hw_data_dh895xcc(struct a
  	hw_data->reset_device = adf_reset_sbr;
  	hw_data->disable_iov = adf_disable_sriov;
  	hw_data->dev_config = adf_gen2_dev_config;
++<<<<<<< HEAD:drivers/crypto/qat/qat_dh895xcc/adf_dh895xcc_hw_data.c
++=======
+ 	hw_data->clock_frequency = ADF_DH895X_AE_FREQ;
+ 	hw_data->get_hb_clock = get_ts_clock;
+ 	hw_data->num_hb_ctrs = ADF_NUM_HB_CNT_PER_AE;
+ 	hw_data->check_hb_ctrs = adf_heartbeat_check_ctrs;
++>>>>>>> bec61a294dbe (crypto: qat - add heartbeat counters check):drivers/crypto/intel/qat/qat_dh895xcc/adf_dh895xcc_hw_data.c
  
  	adf_gen2_init_pf_pfvf_ops(&hw_data->pfvf_ops);
  	hw_data->pfvf_ops.enable_vf2pf_interrupts = enable_vf2pf_interrupts;
* Unmerged path drivers/crypto/intel/qat/qat_common/adf_heartbeat.c
* Unmerged path drivers/crypto/intel/qat/qat_common/adf_heartbeat.h
* Unmerged path drivers/crypto/intel/qat/qat_common/adf_heartbeat.c
* Unmerged path drivers/crypto/intel/qat/qat_common/adf_heartbeat.h
* Unmerged path drivers/crypto/qat/qat_c3xxx/adf_c3xxx_hw_data.c
* Unmerged path drivers/crypto/qat/qat_c62x/adf_c62x_hw_data.c
* Unmerged path drivers/crypto/qat/qat_common/adf_accel_devices.h
* Unmerged path drivers/crypto/qat/qat_dh895xcc/adf_dh895xcc_hw_data.c
