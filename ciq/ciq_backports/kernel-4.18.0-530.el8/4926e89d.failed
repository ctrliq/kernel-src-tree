crypto: qat - add reporting of errors from ERRSOU1 for QAT GEN4

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-530.el8
commit-author Shashank Gupta <shashank.gupta@intel.com>
commit 4926e89d19b0631d8f5f5f292c4caf0f0de08f4f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-530.el8/4926e89d.failed

Add logic to detect and report uncorrectable errors reported through
the ERRSOU1 register in QAT GEN4 devices.
This also introduces the adf_dev_err_mask structure as part of
adf_hw_device_data which will allow to provide different error masks
per device generation.

	Signed-off-by: Shashank Gupta <shashank.gupta@intel.com>
	Reviewed-by: Giovanni Cabiddu <giovanni.cabiddu@intel.com>
	Reviewed-by: Tero Kristo <tero.kristo@linux.intel.com>
	Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
(cherry picked from commit 4926e89d19b0631d8f5f5f292c4caf0f0de08f4f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/crypto/intel/qat/qat_common/adf_gen4_ras.c
#	drivers/crypto/intel/qat/qat_common/adf_gen4_ras.h
#	drivers/crypto/qat/qat_common/adf_accel_devices.h
diff --cc drivers/crypto/qat/qat_common/adf_accel_devices.h
index c43e39c34d9b,ebdf9f7f4bc8..000000000000
--- a/drivers/crypto/qat/qat_common/adf_accel_devices.h
+++ b/drivers/crypto/qat/qat_common/adf_accel_devices.h
@@@ -209,6 -225,8 +213,11 @@@ struct adf_hw_device_data 
  	struct adf_pfvf_ops pfvf_ops;
  	struct adf_hw_csr_ops csr_ops;
  	struct adf_dc_ops dc_ops;
++<<<<<<< HEAD:drivers/crypto/qat/qat_common/adf_accel_devices.h
++=======
+ 	struct adf_ras_ops ras_ops;
+ 	struct adf_dev_err_mask dev_err_mask;
++>>>>>>> 4926e89d19b0 (crypto: qat - add reporting of errors from ERRSOU1 for QAT GEN4):drivers/crypto/intel/qat/qat_common/adf_accel_devices.h
  	const char *fw_name;
  	const char *fw_mmp_name;
  	u32 fuses;
* Unmerged path drivers/crypto/intel/qat/qat_common/adf_gen4_ras.c
* Unmerged path drivers/crypto/intel/qat/qat_common/adf_gen4_ras.h
* Unmerged path drivers/crypto/intel/qat/qat_common/adf_gen4_ras.c
* Unmerged path drivers/crypto/intel/qat/qat_common/adf_gen4_ras.h
diff --git a/drivers/crypto/qat/qat_4xxx/adf_4xxx_hw_data.c b/drivers/crypto/qat/qat_4xxx/adf_4xxx_hw_data.c
index 3eda91aa7c11..086a321b39f5 100644
--- a/drivers/crypto/qat/qat_4xxx/adf_4xxx_hw_data.c
+++ b/drivers/crypto/qat/qat_4xxx/adf_4xxx_hw_data.c
@@ -459,6 +459,11 @@ static u32 uof_get_ae_mask(struct adf_accel_dev *accel_dev, u32 obj_num)
 	}
 }
 
+static void adf_gen4_set_err_mask(struct adf_dev_err_mask *dev_err_mask)
+{
+	dev_err_mask->cppagentcmdpar_mask = ADF_4XXX_HICPPAGENTCMDPARERRLOG_MASK;
+}
+
 void adf_init_hw_data_4xxx(struct adf_hw_device_data *hw_data, u32 dev_id)
 {
 	hw_data->dev_class = &adf_4xxx_class;
@@ -518,6 +523,7 @@ void adf_init_hw_data_4xxx(struct adf_hw_device_data *hw_data, u32 dev_id)
 	hw_data->handle_pm_interrupt = adf_gen4_handle_pm_interrupt;
 	hw_data->dev_config = adf_gen4_dev_config;
 
+	adf_gen4_set_err_mask(&hw_data->dev_err_mask);
 	adf_gen4_init_hw_csr_ops(&hw_data->csr_ops);
 	adf_gen4_init_pf_pfvf_ops(&hw_data->pfvf_ops);
 	adf_gen4_init_dc_ops(&hw_data->dc_ops);
diff --git a/drivers/crypto/qat/qat_4xxx/adf_4xxx_hw_data.h b/drivers/crypto/qat/qat_4xxx/adf_4xxx_hw_data.h
index e5b314d2b60e..71d1d03ecef8 100644
--- a/drivers/crypto/qat/qat_4xxx/adf_4xxx_hw_data.h
+++ b/drivers/crypto/qat/qat_4xxx/adf_4xxx_hw_data.h
@@ -27,6 +27,8 @@
 #define ADF_4XXX_ACCELENGINES_MASK	(0x1FF)
 #define ADF_4XXX_ADMIN_AE_MASK		(0x100)
 
+#define ADF_4XXX_HICPPAGENTCMDPARERRLOG_MASK	0x1F
+
 #define ADF_4XXX_ETR_MAX_BANKS		64
 
 /* MSIX interrupt */
* Unmerged path drivers/crypto/qat/qat_common/adf_accel_devices.h
