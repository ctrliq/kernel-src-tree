crypto: qat - fix unregistration of compression algorithms

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-530.el8
commit-author Giovanni Cabiddu <giovanni.cabiddu@intel.com>
commit 11af152f784d9eca54e193140891ac52de36e9a9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-530.el8/11af152f.failed

The function adf_dev_init(), through the subsystem qat_compression,
populates the list of list of compression instances
accel_dev->compression_list. If the list of instances is not empty,
the function adf_dev_start() will then call qat_compression_registers()
register the compression algorithms into the crypto framework.

If any of the functions in adf_dev_start() fail, the caller of such
function, in the error path calls adf_dev_down() which in turn call
adf_dev_stop() and adf_dev_shutdown(), see for example the function
state_store in adf_sriov.c.
However, if the registration of compression algorithms is not done,
adf_dev_stop() will try to unregister the algorithms regardless.
This might cause the counter active_devs in qat_compression.c to get
to a negative value.

Add a new state, ADF_STATUS_COMPRESSION_ALGS_REGISTERED, which tracks
if the compression algorithms are registered into the crypto framework.
Then use this to unregister the algorithms if such flag is set. This
ensures that the compression algorithms are only unregistered if
previously registered.

Fixes: 1198ae56c9a5 ("crypto: qat - expose deflate through acomp api for QAT GEN2")
	Signed-off-by: Giovanni Cabiddu <giovanni.cabiddu@intel.com>
	Reviewed-by: Adam Guerin <adam.guerin@intel.com>
	Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
(cherry picked from commit 11af152f784d9eca54e193140891ac52de36e9a9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/crypto/qat/qat_common/adf_init.c
diff --cc drivers/crypto/qat/qat_common/adf_init.c
index 55c4bf1a3b16,bccd6bf8cf63..000000000000
--- a/drivers/crypto/qat/qat_common/adf_init.c
+++ b/drivers/crypto/qat/qat_common/adf_init.c
@@@ -217,6 -236,10 +217,13 @@@ static int adf_dev_start(struct adf_acc
  		clear_bit(ADF_STATUS_STARTED, &accel_dev->status);
  		return -EFAULT;
  	}
++<<<<<<< HEAD:drivers/crypto/qat/qat_common/adf_init.c
++=======
+ 	set_bit(ADF_STATUS_COMP_ALGS_REGISTERED, &accel_dev->status);
+ 
+ 	adf_dbgfs_add(accel_dev);
+ 
++>>>>>>> 11af152f784d (crypto: qat - fix unregistration of compression algorithms):drivers/crypto/intel/qat/qat_common/adf_init.c
  	return 0;
  }
  
@@@ -251,11 -276,12 +258,13 @@@ static void adf_dev_stop(struct adf_acc
  	}
  	clear_bit(ADF_STATUS_CRYPTO_ALGS_REGISTERED, &accel_dev->status);
  
- 	if (!list_empty(&accel_dev->compression_list))
+ 	if (!list_empty(&accel_dev->compression_list) &&
+ 	    test_bit(ADF_STATUS_COMP_ALGS_REGISTERED, &accel_dev->status))
  		qat_comp_algs_unregister();
+ 	clear_bit(ADF_STATUS_COMP_ALGS_REGISTERED, &accel_dev->status);
  
 -	list_for_each_entry(service, &service_table, list) {
 +	list_for_each(list_itr, &service_table) {
 +		service = list_entry(list_itr, struct service_hndl, list);
  		if (!test_bit(accel_dev->accel_id, service->start_status))
  			continue;
  		ret = service->event_hld(accel_dev, ADF_EVENT_STOP);
diff --git a/drivers/crypto/qat/qat_common/adf_common_drv.h b/drivers/crypto/qat/qat_common/adf_common_drv.h
index ca85fbecaebb..ce2907ea9616 100644
--- a/drivers/crypto/qat/qat_common/adf_common_drv.h
+++ b/drivers/crypto/qat/qat_common/adf_common_drv.h
@@ -26,6 +26,7 @@
 #define ADF_STATUS_PF_RUNNING 7
 #define ADF_STATUS_IRQ_ALLOCATED 8
 #define ADF_STATUS_CRYPTO_ALGS_REGISTERED 9
+#define ADF_STATUS_COMP_ALGS_REGISTERED 10
 
 enum adf_dev_reset_mode {
 	ADF_DEV_RESET_ASYNC = 0,
* Unmerged path drivers/crypto/qat/qat_common/adf_init.c
