crypto: qat - refactor fw config related functions

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-530.el8
commit-author Giovanni Cabiddu <giovanni.cabiddu@intel.com>
commit 2990d2edac6061c6f0f646a46e40957244be2268
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-530.el8/2990d2ed.failed

The logic that selects the correct adf_fw_config structure based on the
configured service is replicated twice in the uof_get_name() and
uof_get_ae_mask() functions. Refactor the code so that there is no
replication.

This does not introduce any functional change.

	Signed-off-by: Giovanni Cabiddu <giovanni.cabiddu@intel.com>
	Reviewed-by: Damian Muszynski <damian.muszynski@intel.com>
	Reviewed-by: Tero Kristo <tero.kristo@linux.intel.com>
	Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
(cherry picked from commit 2990d2edac6061c6f0f646a46e40957244be2268)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/crypto/qat/qat_4xxx/adf_4xxx_hw_data.c
diff --cc drivers/crypto/qat/qat_4xxx/adf_4xxx_hw_data.c
index 3eda91aa7c11,3ea4bfc91bfe..000000000000
--- a/drivers/crypto/qat/qat_4xxx/adf_4xxx_hw_data.c
+++ b/drivers/crypto/qat/qat_4xxx/adf_4xxx_hw_data.c
@@@ -389,31 -400,37 +388,42 @@@ static const struct adf_fw_config *get_
  	switch (get_service_enabled(accel_dev)) {
  	case SVC_CY:
  	case SVC_CY2:
- 		id = adf_fw_cy_config[obj_num].obj;
- 		break;
+ 		return adf_fw_cy_config;
  	case SVC_DC:
++<<<<<<< HEAD:drivers/crypto/qat/qat_4xxx/adf_4xxx_hw_data.c
 +		id = adf_fw_dc_config[obj_num].obj;
 +		break;
++=======
+ 		return adf_fw_dc_config;
+ 	case SVC_DCC:
+ 		return adf_fw_dcc_config;
++>>>>>>> 2990d2edac60 (crypto: qat - refactor fw config related functions):drivers/crypto/intel/qat/qat_4xxx/adf_4xxx_hw_data.c
  	case SVC_SYM:
- 		id = adf_fw_sym_config[obj_num].obj;
- 		break;
+ 		return adf_fw_sym_config;
  	case SVC_ASYM:
- 		id =  adf_fw_asym_config[obj_num].obj;
- 		break;
+ 		return adf_fw_asym_config;
  	case SVC_ASYM_DC:
  	case SVC_DC_ASYM:
- 		id = adf_fw_asym_dc_config[obj_num].obj;
- 		break;
+ 		return adf_fw_asym_dc_config;
  	case SVC_SYM_DC:
  	case SVC_DC_SYM:
- 		id = adf_fw_sym_dc_config[obj_num].obj;
- 		break;
+ 		return adf_fw_sym_dc_config;
  	default:
- 		id = -EINVAL;
- 		break;
+ 		return NULL;
  	}
+ }
+ 
+ static const char *uof_get_name(struct adf_accel_dev *accel_dev, u32 obj_num,
+ 				const char * const fw_objs[], int num_objs)
+ {
+ 	const struct adf_fw_config *fw_config;
+ 	int id;
+ 
+ 	fw_config = get_fw_config(accel_dev);
+ 	if (fw_config)
+ 		id = fw_config[obj_num].obj;
+ 	else
+ 		id = -EINVAL;
  
  	if (id < 0 || id > num_objs)
  		return NULL;
@@@ -437,28 -454,25 +447,36 @@@ static const char *uof_get_name_402xx(s
  
  static u32 uof_get_ae_mask(struct adf_accel_dev *accel_dev, u32 obj_num)
  {
++<<<<<<< HEAD:drivers/crypto/qat/qat_4xxx/adf_4xxx_hw_data.c
 +	switch (get_service_enabled(accel_dev)) {
 +	case SVC_CY:
 +		return adf_fw_cy_config[obj_num].ae_mask;
 +	case SVC_DC:
 +		return adf_fw_dc_config[obj_num].ae_mask;
 +	case SVC_CY2:
 +		return adf_fw_cy_config[obj_num].ae_mask;
 +	case SVC_SYM:
 +		return adf_fw_sym_config[obj_num].ae_mask;
 +	case SVC_ASYM:
 +		return adf_fw_asym_config[obj_num].ae_mask;
 +	case SVC_ASYM_DC:
 +	case SVC_DC_ASYM:
 +		return adf_fw_asym_dc_config[obj_num].ae_mask;
 +	case SVC_SYM_DC:
 +	case SVC_DC_SYM:
 +		return adf_fw_sym_dc_config[obj_num].ae_mask;
 +	default:
++=======
+ 	const struct adf_fw_config *fw_config;
+ 
+ 	fw_config = get_fw_config(accel_dev);
+ 	if (!fw_config)
++>>>>>>> 2990d2edac60 (crypto: qat - refactor fw config related functions):drivers/crypto/intel/qat/qat_4xxx/adf_4xxx_hw_data.c
  		return 0;
- 	}
+ 
+ 	return fw_config[obj_num].ae_mask;
  }
  
 -static void adf_gen4_set_err_mask(struct adf_dev_err_mask *dev_err_mask)
 -{
 -	dev_err_mask->cppagentcmdpar_mask = ADF_4XXX_HICPPAGENTCMDPARERRLOG_MASK;
 -	dev_err_mask->parerr_ath_cph_mask = ADF_4XXX_PARITYERRORMASK_ATH_CPH_MASK;
 -	dev_err_mask->parerr_cpr_xlt_mask = ADF_4XXX_PARITYERRORMASK_CPR_XLT_MASK;
 -	dev_err_mask->parerr_dcpr_ucs_mask = ADF_4XXX_PARITYERRORMASK_DCPR_UCS_MASK;
 -	dev_err_mask->parerr_pke_mask = ADF_4XXX_PARITYERRORMASK_PKE_MASK;
 -	dev_err_mask->ssmfeatren_mask = ADF_4XXX_SSMFEATREN_MASK;
 -}
 -
  void adf_init_hw_data_4xxx(struct adf_hw_device_data *hw_data, u32 dev_id)
  {
  	hw_data->dev_class = &adf_4xxx_class;
* Unmerged path drivers/crypto/qat/qat_4xxx/adf_4xxx_hw_data.c
