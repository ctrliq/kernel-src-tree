crypto: qat - add num_rps sysfs attribute

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-530.el8
commit-author Ciunas Bennett <ciunas.bennett@intel.com>
commit 71fed09b49c168435fc28d57870007495475d946
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-530.el8/71fed09b.failed

Add the attribute `num_rps` to the `qat` attribute group. This returns
the number of ring pairs that a single device has. This allows to know
the maximum value that can be set to the attribute `rp2svc`.

	Signed-off-by: Ciunas Bennett <ciunas.bennett@intel.com>
	Reviewed-by: Giovanni Cabiddu <giovanni.cabiddu@intel.com>
	Reviewed-by: Damian Muszynski <damian.muszynski@intel.com>
	Reviewed-by: Tero Kristo <tero.kristo@linux.intel.com>
	Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
(cherry picked from commit 71fed09b49c168435fc28d57870007495475d946)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	Documentation/ABI/testing/sysfs-driver-qat
#	drivers/crypto/qat/qat_common/adf_sysfs.c
diff --cc Documentation/ABI/testing/sysfs-driver-qat
index ef6d6c57105e,bbf329cf0d67..000000000000
--- a/Documentation/ABI/testing/sysfs-driver-qat
+++ b/Documentation/ABI/testing/sysfs-driver-qat
@@@ -93,3 -95,49 +93,52 @@@ Description:	(RW) This configuration op
  			0
  
  		This attribute is only available for qat_4xxx devices.
++<<<<<<< HEAD
++=======
+ 
+ What:		/sys/bus/pci/devices/<BDF>/qat/rp2srv
+ Date:		January 2024
+ KernelVersion:	6.7
+ Contact:	qat-linux@intel.com
+ Description:
+ 		(RW) This attribute provides a way for a user to query a
+ 		specific ring pair for the type of service that it is currently
+ 		configured for.
+ 
+ 		When written to, the value is cached and used to perform the
+ 		read operation. Allowed values are in the range 0 to N-1, where
+ 		N is the max number of ring pairs supported by a device. This
+ 		can be queried using the attribute qat/num_rps.
+ 
+ 		A read returns the service associated to the ring pair queried.
+ 
+ 		The values are:
+ 
+ 		* dc: the ring pair is configured for running compression services
+ 		* sym: the ring pair is configured for running symmetric crypto
+ 		  services
+ 		* asym: the ring pair is configured for running asymmetric crypto
+ 		  services
+ 
+ 		Example usage::
+ 
+ 			# echo 1 > /sys/bus/pci/devices/<BDF>/qat/rp2srv
+ 			# cat /sys/bus/pci/devices/<BDF>/qat/rp2srv
+ 			sym
+ 
+ 		This attribute is only available for qat_4xxx devices.
+ 
+ What:		/sys/bus/pci/devices/<BDF>/qat/num_rps
+ Date:		January 2024
+ KernelVersion:	6.7
+ Contact:	qat-linux@intel.com
+ Description:
+ 		(RO) Returns the number of ring pairs that a single device has.
+ 
+ 		Example usage::
+ 
+ 			# cat /sys/bus/pci/devices/<BDF>/qat/num_rps
+ 			64
+ 
+ 		This attribute is only available for qat_4xxx devices.
++>>>>>>> 71fed09b49c1 (crypto: qat - add num_rps sysfs attribute)
diff --cc drivers/crypto/qat/qat_common/adf_sysfs.c
index 8672cfa2800f,ddffc98119c6..000000000000
--- a/drivers/crypto/qat/qat_common/adf_sysfs.c
+++ b/drivers/crypto/qat/qat_common/adf_sysfs.c
@@@ -216,10 -207,86 +216,92 @@@ static DEVICE_ATTR_RW(pm_idle_enabled)
  static DEVICE_ATTR_RW(state);
  static DEVICE_ATTR_RW(cfg_services);
  
++<<<<<<< HEAD:drivers/crypto/qat/qat_common/adf_sysfs.c
++=======
+ static ssize_t rp2srv_show(struct device *dev, struct device_attribute *attr,
+ 			   char *buf)
+ {
+ 	struct adf_hw_device_data *hw_data;
+ 	struct adf_accel_dev *accel_dev;
+ 	enum adf_cfg_service_type svc;
+ 
+ 	accel_dev = adf_devmgr_pci_to_accel_dev(to_pci_dev(dev));
+ 	hw_data = GET_HW_DATA(accel_dev);
+ 
+ 	if (accel_dev->sysfs.ring_num == UNSET_RING_NUM)
+ 		return -EINVAL;
+ 
+ 	down_read(&accel_dev->sysfs.lock);
+ 	svc = GET_SRV_TYPE(accel_dev, accel_dev->sysfs.ring_num %
+ 					      hw_data->num_banks_per_vf);
+ 	up_read(&accel_dev->sysfs.lock);
+ 
+ 	switch (svc) {
+ 	case COMP:
+ 		return sysfs_emit(buf, "%s\n", ADF_CFG_DC);
+ 	case SYM:
+ 		return sysfs_emit(buf, "%s\n", ADF_CFG_SYM);
+ 	case ASYM:
+ 		return sysfs_emit(buf, "%s\n", ADF_CFG_ASYM);
+ 	default:
+ 		break;
+ 	}
+ 	return -EINVAL;
+ }
+ 
+ static ssize_t rp2srv_store(struct device *dev, struct device_attribute *attr,
+ 			    const char *buf, size_t count)
+ {
+ 	struct adf_accel_dev *accel_dev;
+ 	int ring, num_rings, ret;
+ 
+ 	accel_dev = adf_devmgr_pci_to_accel_dev(to_pci_dev(dev));
+ 	if (!accel_dev)
+ 		return -EINVAL;
+ 
+ 	ret = kstrtouint(buf, 10, &ring);
+ 	if (ret)
+ 		return ret;
+ 
+ 	num_rings = GET_MAX_BANKS(accel_dev);
+ 	if (ring >= num_rings) {
+ 		dev_err(&GET_DEV(accel_dev),
+ 			"Device does not support more than %u ring pairs\n",
+ 			num_rings);
+ 		return -EINVAL;
+ 	}
+ 
+ 	down_write(&accel_dev->sysfs.lock);
+ 	accel_dev->sysfs.ring_num = ring;
+ 	up_write(&accel_dev->sysfs.lock);
+ 
+ 	return count;
+ }
+ static DEVICE_ATTR_RW(rp2srv);
+ 
+ static ssize_t num_rps_show(struct device *dev, struct device_attribute *attr,
+ 			    char *buf)
+ {
+ 	struct adf_accel_dev *accel_dev;
+ 
+ 	accel_dev = adf_devmgr_pci_to_accel_dev(to_pci_dev(dev));
+ 	if (!accel_dev)
+ 		return -EINVAL;
+ 
+ 	return sysfs_emit(buf, "%u\n", GET_MAX_BANKS(accel_dev));
+ }
+ static DEVICE_ATTR_RO(num_rps);
+ 
++>>>>>>> 71fed09b49c1 (crypto: qat - add num_rps sysfs attribute):drivers/crypto/intel/qat/qat_common/adf_sysfs.c
  static struct attribute *qat_attrs[] = {
  	&dev_attr_state.attr,
  	&dev_attr_cfg_services.attr,
  	&dev_attr_pm_idle_enabled.attr,
++<<<<<<< HEAD:drivers/crypto/qat/qat_common/adf_sysfs.c
++=======
+ 	&dev_attr_rp2srv.attr,
+ 	&dev_attr_num_rps.attr,
++>>>>>>> 71fed09b49c1 (crypto: qat - add num_rps sysfs attribute):drivers/crypto/intel/qat/qat_common/adf_sysfs.c
  	NULL,
  };
  
* Unmerged path Documentation/ABI/testing/sysfs-driver-qat
* Unmerged path drivers/crypto/qat/qat_common/adf_sysfs.c
