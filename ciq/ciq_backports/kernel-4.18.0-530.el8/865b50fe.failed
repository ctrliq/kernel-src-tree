crypto: qat - add fw_counters debugfs file

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-530.el8
commit-author Lucas Segarra Fernandez <lucas.segarra.fernandez@intel.com>
commit 865b50fe6ea85b41354967df03c317eb1627cc13
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-530.el8/865b50fe.failed

Expose FW counters statistics by providing the "fw_counters" file
under debugfs. Currently the statistics include the number of
requests sent to the FW and the number of responses received
from the FW for each Acceleration Engine, for all the QAT product
line.

This patch is based on earlier work done by Marco Chiappero.

Co-developed-by: Adam Guerin <adam.guerin@intel.com>
	Signed-off-by: Adam Guerin <adam.guerin@intel.com>
	Signed-off-by: Lucas Segarra Fernandez <lucas.segarra.fernandez@intel.com>
	Reviewed-by: Giovanni Cabiddu <giovanni.cabiddu@intel.com>
	Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
	Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
(cherry picked from commit 865b50fe6ea85b41354967df03c317eb1627cc13)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/crypto/intel/qat/qat_common/adf_dbgfs.c
#	drivers/crypto/qat/qat_common/Makefile
#	drivers/crypto/qat/qat_common/adf_fw_counters.c
#	drivers/crypto/qat/qat_common/adf_fw_counters.h
diff --cc drivers/crypto/qat/qat_common/Makefile
index 1fb8d50f509f,f541046cdf9a..000000000000
--- a/drivers/crypto/qat/qat_common/Makefile
+++ b/drivers/crypto/qat/qat_common/Makefile
@@@ -27,7 -27,10 +27,14 @@@ intel_qat-objs := adf_cfg.o 
  	qat_hal.o \
  	qat_bl.o
  
++<<<<<<< HEAD:drivers/crypto/qat/qat_common/Makefile
 +intel_qat-$(CONFIG_DEBUG_FS) += adf_transport_debug.o
++=======
+ intel_qat-$(CONFIG_DEBUG_FS) += adf_transport_debug.o \
+ 				adf_fw_counters.o \
+ 				adf_dbgfs.o
+ 
++>>>>>>> 865b50fe6ea8 (crypto: qat - add fw_counters debugfs file):drivers/crypto/intel/qat/qat_common/Makefile
  intel_qat-$(CONFIG_PCI_IOV) += adf_sriov.o adf_vf_isr.o adf_pfvf_utils.o \
  			       adf_pfvf_pf_msg.o adf_pfvf_pf_proto.o \
  			       adf_pfvf_vf_msg.o adf_pfvf_vf_proto.o \
* Unmerged path drivers/crypto/intel/qat/qat_common/adf_dbgfs.c
* Unmerged path drivers/crypto/qat/qat_common/adf_fw_counters.c
* Unmerged path drivers/crypto/qat/qat_common/adf_fw_counters.h
diff --git a/Documentation/ABI/testing/debugfs-driver-qat b/Documentation/ABI/testing/debugfs-driver-qat
new file mode 100644
index 000000000000..22d39c0ca1b2
--- /dev/null
+++ b/Documentation/ABI/testing/debugfs-driver-qat
@@ -0,0 +1,10 @@
+What:		/sys/kernel/debug/qat_<device>_<BDF>/qat/fw_counters
+Date:		November 2023
+KernelVersion:	6.6
+Contact:	qat-linux@intel.com
+Description:	(RO) Read returns the number of requests sent to the FW and the number of responses
+		received from the FW for each Acceleration Engine
+		Reported firmware counters::
+
+			<N>: Number of requests sent from Acceleration Engine N to FW and responses
+			     Acceleration Engine N received from FW
* Unmerged path drivers/crypto/intel/qat/qat_common/adf_dbgfs.c
* Unmerged path drivers/crypto/qat/qat_common/Makefile
diff --git a/drivers/crypto/qat/qat_common/adf_accel_devices.h b/drivers/crypto/qat/qat_common/adf_accel_devices.h
index 0399417b91fc..a54a994b5e27 100644
--- a/drivers/crypto/qat/qat_common/adf_accel_devices.h
+++ b/drivers/crypto/qat/qat_common/adf_accel_devices.h
@@ -292,6 +292,7 @@ struct adf_accel_dev {
 	unsigned long status;
 	atomic_t ref_count;
 	struct dentry *debugfs_dir;
+	struct dentry *fw_cntr_dbgfile;
 	struct list_head list;
 	struct module *owner;
 	struct adf_accel_pci accel_pci_dev;
diff --git a/drivers/crypto/qat/qat_common/adf_admin.c b/drivers/crypto/qat/qat_common/adf_admin.c
index 118775ee02f2..4716b82d48ec 100644
--- a/drivers/crypto/qat/qat_common/adf_admin.c
+++ b/drivers/crypto/qat/qat_common/adf_admin.c
@@ -223,6 +223,24 @@ static int adf_get_dc_capabilities(struct adf_accel_dev *accel_dev,
 	return 0;
 }
 
+int adf_get_ae_fw_counters(struct adf_accel_dev *accel_dev, u16 ae, u64 *reqs, u64 *resps)
+{
+	struct icp_qat_fw_init_admin_resp resp = { };
+	struct icp_qat_fw_init_admin_req req = { };
+	int ret;
+
+	req.cmd_id = ICP_QAT_FW_COUNTERS_GET;
+
+	ret = adf_put_admin_msg_sync(accel_dev, ae, &req, &resp);
+	if (ret || resp.status)
+		return -EFAULT;
+
+	*reqs = resp.req_rec_count;
+	*resps = resp.resp_sent_count;
+
+	return 0;
+}
+
 /**
  * adf_send_admin_init() - Function sends init message to FW
  * @accel_dev: Pointer to acceleration device.
diff --git a/drivers/crypto/qat/qat_common/adf_common_drv.h b/drivers/crypto/qat/qat_common/adf_common_drv.h
index b8132eb9bc2a..4682be073c99 100644
--- a/drivers/crypto/qat/qat_common/adf_common_drv.h
+++ b/drivers/crypto/qat/qat_common/adf_common_drv.h
@@ -94,6 +94,7 @@ void adf_exit_aer(void);
 int adf_init_admin_comms(struct adf_accel_dev *accel_dev);
 void adf_exit_admin_comms(struct adf_accel_dev *accel_dev);
 int adf_send_admin_init(struct adf_accel_dev *accel_dev);
+int adf_get_ae_fw_counters(struct adf_accel_dev *accel_dev, u16 ae, u64 *reqs, u64 *resps);
 int adf_init_admin_pm(struct adf_accel_dev *accel_dev, u32 idle_delay);
 int adf_init_arb(struct adf_accel_dev *accel_dev);
 void adf_exit_arb(struct adf_accel_dev *accel_dev);
* Unmerged path drivers/crypto/qat/qat_common/adf_fw_counters.c
* Unmerged path drivers/crypto/qat/qat_common/adf_fw_counters.h
