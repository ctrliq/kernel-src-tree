crypto: qat - add handling of errors from ERRSOU2 for QAT GEN4

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-530.el8
commit-author Shashank Gupta <shashank.gupta@intel.com>
commit 895f7d532c843f49e0b6dc8341bb911b26da4731
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-530.el8/895f7d53.failed

Add logic to detect, report and handle uncorrectable errors reported
through the ERRSOU2 register in QAT GEN4 devices.

	Signed-off-by: Shashank Gupta <shashank.gupta@intel.com>
	Reviewed-by: Giovanni Cabiddu <giovanni.cabiddu@intel.com>
	Reviewed-by: Tero Kristo <tero.kristo@linux.intel.com>
	Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
(cherry picked from commit 895f7d532c843f49e0b6dc8341bb911b26da4731)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/crypto/intel/qat/qat_common/adf_gen4_ras.c
#	drivers/crypto/intel/qat/qat_common/adf_gen4_ras.h
#	drivers/crypto/qat/qat_4xxx/adf_4xxx_hw_data.c
#	drivers/crypto/qat/qat_4xxx/adf_4xxx_hw_data.h
#	drivers/crypto/qat/qat_common/adf_accel_devices.h
diff --cc drivers/crypto/qat/qat_4xxx/adf_4xxx_hw_data.c
index 3eda91aa7c11,51db004641bf..000000000000
--- a/drivers/crypto/qat/qat_4xxx/adf_4xxx_hw_data.c
+++ b/drivers/crypto/qat/qat_4xxx/adf_4xxx_hw_data.c
@@@ -459,6 -476,16 +459,19 @@@ static u32 uof_get_ae_mask(struct adf_a
  	}
  }
  
++<<<<<<< HEAD:drivers/crypto/qat/qat_4xxx/adf_4xxx_hw_data.c
++=======
+ static void adf_gen4_set_err_mask(struct adf_dev_err_mask *dev_err_mask)
+ {
+ 	dev_err_mask->cppagentcmdpar_mask = ADF_4XXX_HICPPAGENTCMDPARERRLOG_MASK;
+ 	dev_err_mask->parerr_ath_cph_mask = ADF_4XXX_PARITYERRORMASK_ATH_CPH_MASK;
+ 	dev_err_mask->parerr_cpr_xlt_mask = ADF_4XXX_PARITYERRORMASK_CPR_XLT_MASK;
+ 	dev_err_mask->parerr_dcpr_ucs_mask = ADF_4XXX_PARITYERRORMASK_DCPR_UCS_MASK;
+ 	dev_err_mask->parerr_pke_mask = ADF_4XXX_PARITYERRORMASK_PKE_MASK;
+ 	dev_err_mask->ssmfeatren_mask = ADF_4XXX_SSMFEATREN_MASK;
+ }
+ 
++>>>>>>> 895f7d532c84 (crypto: qat - add handling of errors from ERRSOU2 for QAT GEN4):drivers/crypto/intel/qat/qat_4xxx/adf_4xxx_hw_data.c
  void adf_init_hw_data_4xxx(struct adf_hw_device_data *hw_data, u32 dev_id)
  {
  	hw_data->dev_class = &adf_4xxx_class;
diff --cc drivers/crypto/qat/qat_4xxx/adf_4xxx_hw_data.h
index e5b314d2b60e,efd5dadc19ed..000000000000
--- a/drivers/crypto/qat/qat_4xxx/adf_4xxx_hw_data.h
+++ b/drivers/crypto/qat/qat_4xxx/adf_4xxx_hw_data.h
@@@ -27,6 -28,23 +27,26 @@@
  #define ADF_4XXX_ACCELENGINES_MASK	(0x1FF)
  #define ADF_4XXX_ADMIN_AE_MASK		(0x100)
  
++<<<<<<< HEAD:drivers/crypto/qat/qat_4xxx/adf_4xxx_hw_data.h
++=======
+ #define ADF_4XXX_HICPPAGENTCMDPARERRLOG_MASK	0x1F
+ #define ADF_4XXX_PARITYERRORMASK_ATH_CPH_MASK	0xF000F
+ #define ADF_4XXX_PARITYERRORMASK_CPR_XLT_MASK	0x10001
+ #define ADF_4XXX_PARITYERRORMASK_DCPR_UCS_MASK	0x30007
+ #define ADF_4XXX_PARITYERRORMASK_PKE_MASK	0x3F
+ 
+ /*
+  * SSMFEATREN bit mask
+  * BIT(4) - enables parity detection on CPP
+  * BIT(12) - enables the logging of push/pull data errors
+  *	     in pperr register
+  * BIT(16) - BIT(23) - enable parity detection on SPPs
+  */
+ #define ADF_4XXX_SSMFEATREN_MASK \
+ 	(BIT(4) | BIT(12) | BIT(16) | BIT(17) | BIT(18) | \
+ 	 BIT(19) | BIT(20) | BIT(21) | BIT(22) | BIT(23))
+ 
++>>>>>>> 895f7d532c84 (crypto: qat - add handling of errors from ERRSOU2 for QAT GEN4):drivers/crypto/intel/qat/qat_4xxx/adf_4xxx_hw_data.h
  #define ADF_4XXX_ETR_MAX_BANKS		64
  
  /* MSIX interrupt */
diff --cc drivers/crypto/qat/qat_common/adf_accel_devices.h
index c43e39c34d9b,65d52a07e435..000000000000
--- a/drivers/crypto/qat/qat_common/adf_accel_devices.h
+++ b/drivers/crypto/qat/qat_common/adf_accel_devices.h
@@@ -169,6 -176,16 +169,19 @@@ struct adf_dc_ops 
  	void (*build_deflate_ctx)(void *ctx);
  };
  
++<<<<<<< HEAD:drivers/crypto/qat/qat_common/adf_accel_devices.h
++=======
+ struct adf_dev_err_mask {
+ 	u32 cppagentcmdpar_mask;
+ 	u32 parerr_ath_cph_mask;
+ 	u32 parerr_cpr_xlt_mask;
+ 	u32 parerr_dcpr_ucs_mask;
+ 	u32 parerr_pke_mask;
+ 	u32 parerr_wat_wcp_mask;
+ 	u32 ssmfeatren_mask;
+ };
+ 
++>>>>>>> 895f7d532c84 (crypto: qat - add handling of errors from ERRSOU2 for QAT GEN4):drivers/crypto/intel/qat/qat_common/adf_accel_devices.h
  struct adf_hw_device_data {
  	struct adf_hw_device_class *dev_class;
  	u32 (*get_accel_mask)(struct adf_hw_device_data *self);
* Unmerged path drivers/crypto/intel/qat/qat_common/adf_gen4_ras.c
* Unmerged path drivers/crypto/intel/qat/qat_common/adf_gen4_ras.h
* Unmerged path drivers/crypto/intel/qat/qat_common/adf_gen4_ras.c
* Unmerged path drivers/crypto/intel/qat/qat_common/adf_gen4_ras.h
* Unmerged path drivers/crypto/qat/qat_4xxx/adf_4xxx_hw_data.c
* Unmerged path drivers/crypto/qat/qat_4xxx/adf_4xxx_hw_data.h
* Unmerged path drivers/crypto/qat/qat_common/adf_accel_devices.h
