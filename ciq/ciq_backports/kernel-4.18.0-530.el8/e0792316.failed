crypto: qat - add pm_status debugfs file

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-530.el8
commit-author Lucas Segarra Fernandez <lucas.segarra.fernandez@intel.com>
commit e079231676e05d6c88fba4585db1ac399a790b63
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-530.el8/e0792316.failed

QAT devices implement a mechanism that allows them to go autonomously
to a low power state depending on the load.

Expose power management info by providing the "pm_status" file under
debugfs. This includes PM state, PM event log, PM event counters, PM HW
CSRs, per-resource type constrain counters and per-domain power gating
status specific to the QAT device.

This information is retrieved from (1) the FW by means of
ICP_QAT_FW_PM_INFO command, (2) CSRs and (3) counters collected by the
device driver.

In addition, add logic to keep track and report power management event
interrupts and acks/nacks sent to FW to allow/prevent state transitions.

	Signed-off-by: Lucas Segarra Fernandez <lucas.segarra.fernandez@intel.com>
	Reviewed-by: Giovanni Cabiddu <giovanni.cabiddu@intel.com>
	Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
(cherry picked from commit e079231676e05d6c88fba4585db1ac399a790b63)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	Documentation/ABI/testing/debugfs-driver-qat
#	drivers/crypto/intel/qat/qat_common/adf_dbgfs.c
#	drivers/crypto/qat/qat_common/Makefile
#	drivers/crypto/qat/qat_common/adf_common_drv.h
#	drivers/crypto/qat/qat_common/adf_gen4_pm_debugfs.c
#	drivers/crypto/qat/qat_common/adf_pm_dbgfs.c
#	drivers/crypto/qat/qat_common/adf_pm_dbgfs.h
#	drivers/crypto/qat/qat_common/icp_qat_fw_init_admin.h
diff --cc drivers/crypto/qat/qat_common/Makefile
index 1fb8d50f509f,cf44ede55c58..000000000000
--- a/drivers/crypto/qat/qat_common/Makefile
+++ b/drivers/crypto/qat/qat_common/Makefile
@@@ -27,7 -30,14 +27,18 @@@ intel_qat-objs := adf_cfg.o 
  	qat_hal.o \
  	qat_bl.o
  
++<<<<<<< HEAD:drivers/crypto/qat/qat_common/Makefile
 +intel_qat-$(CONFIG_DEBUG_FS) += adf_transport_debug.o
++=======
+ intel_qat-$(CONFIG_DEBUG_FS) += adf_transport_debug.o \
+ 				adf_fw_counters.o \
+ 				adf_gen4_pm_debugfs.o \
+ 				adf_heartbeat.o \
+ 				adf_heartbeat_dbgfs.o \
+ 				adf_pm_dbgfs.o \
+ 				adf_dbgfs.o
+ 
++>>>>>>> e079231676e0 (crypto: qat - add pm_status debugfs file):drivers/crypto/intel/qat/qat_common/Makefile
  intel_qat-$(CONFIG_PCI_IOV) += adf_sriov.o adf_vf_isr.o adf_pfvf_utils.o \
  			       adf_pfvf_pf_msg.o adf_pfvf_pf_proto.o \
  			       adf_pfvf_vf_msg.o adf_pfvf_vf_proto.o \
diff --cc drivers/crypto/qat/qat_common/adf_common_drv.h
index ca85fbecaebb,46dd81074166..000000000000
--- a/drivers/crypto/qat/qat_common/adf_common_drv.h
+++ b/drivers/crypto/qat/qat_common/adf_common_drv.h
@@@ -89,7 -90,12 +89,14 @@@ void adf_exit_aer(void)
  int adf_init_admin_comms(struct adf_accel_dev *accel_dev);
  void adf_exit_admin_comms(struct adf_accel_dev *accel_dev);
  int adf_send_admin_init(struct adf_accel_dev *accel_dev);
 -int adf_get_ae_fw_counters(struct adf_accel_dev *accel_dev, u16 ae, u64 *reqs, u64 *resps);
  int adf_init_admin_pm(struct adf_accel_dev *accel_dev, u32 idle_delay);
++<<<<<<< HEAD:drivers/crypto/qat/qat_common/adf_common_drv.h
++=======
+ int adf_send_admin_tim_sync(struct adf_accel_dev *accel_dev, u32 cnt);
+ int adf_send_admin_hb_timer(struct adf_accel_dev *accel_dev, uint32_t ticks);
+ int adf_get_fw_timestamp(struct adf_accel_dev *accel_dev, u64 *timestamp);
+ int adf_get_pm_info(struct adf_accel_dev *accel_dev, dma_addr_t p_state_addr, size_t buff_size);
++>>>>>>> e079231676e0 (crypto: qat - add pm_status debugfs file):drivers/crypto/intel/qat/qat_common/adf_common_drv.h
  int adf_init_arb(struct adf_accel_dev *accel_dev);
  void adf_exit_arb(struct adf_accel_dev *accel_dev);
  void adf_update_ring_arb(struct adf_etr_ring_data *ring);
diff --cc drivers/crypto/qat/qat_common/icp_qat_fw_init_admin.h
index 56cb827f93ea,2ebbec75d778..000000000000
--- a/drivers/crypto/qat/qat_common/icp_qat_fw_init_admin.h
+++ b/drivers/crypto/qat/qat_common/icp_qat_fw_init_admin.h
@@@ -16,7 -16,11 +16,8 @@@ enum icp_qat_fw_init_admin_cmd_id 
  	ICP_QAT_FW_HEARTBEAT_SYNC = 7,
  	ICP_QAT_FW_HEARTBEAT_GET = 8,
  	ICP_QAT_FW_COMP_CAPABILITY_GET = 9,
 -	ICP_QAT_FW_DC_CHAIN_INIT = 11,
 -	ICP_QAT_FW_HEARTBEAT_TIMER_SET = 13,
 -	ICP_QAT_FW_TIMER_GET = 19,
  	ICP_QAT_FW_PM_STATE_CONFIG = 128,
+ 	ICP_QAT_FW_PM_INFO = 129,
  };
  
  enum icp_qat_fw_init_admin_resp_status {
@@@ -97,19 -107,40 +98,56 @@@ struct icp_qat_fw_init_admin_resp 
  	};
  } __packed;
  
 -#define ICP_QAT_FW_SYNC ICP_QAT_FW_HEARTBEAT_SYNC
 +#define ICP_QAT_FW_COMN_HEARTBEAT_OK 0
 +#define ICP_QAT_FW_COMN_HEARTBEAT_BLOCKED 1
 +#define ICP_QAT_FW_COMN_HEARTBEAT_FLAG_BITPOS 0
 +#define ICP_QAT_FW_COMN_HEARTBEAT_FLAG_MASK 0x1
 +#define ICP_QAT_FW_COMN_STATUS_RESRVD_FLD_MASK 0xFE
 +#define ICP_QAT_FW_COMN_HEARTBEAT_HDR_FLAG_GET(hdr_t) \
 +	ICP_QAT_FW_COMN_HEARTBEAT_FLAG_GET(hdr_t.flags)
 +
++<<<<<<< HEAD:drivers/crypto/qat/qat_common/icp_qat_fw_init_admin.h
 +#define ICP_QAT_FW_COMN_HEARTBEAT_HDR_FLAG_SET(hdr_t, val) \
 +	ICP_QAT_FW_COMN_HEARTBEAT_FLAG_SET(hdr_t, val)
  
 +#define ICP_QAT_FW_COMN_HEARTBEAT_FLAG_GET(flags) \
 +	QAT_FIELD_GET(flags, \
 +		 ICP_QAT_FW_COMN_HEARTBEAT_FLAG_BITPOS, \
 +		 ICP_QAT_FW_COMN_HEARTBEAT_FLAG_MASK)
++=======
+ #define ICP_QAT_NUMBER_OF_PM_EVENTS 8
+ 
+ struct icp_qat_fw_init_admin_pm_info {
+ 	__u16 max_pwrreq;
+ 	__u16 min_pwrreq;
+ 	__u16 resvrd1;
+ 	__u8 pwr_state;
+ 	__u8 resvrd2;
+ 	__u32 fusectl0;
+ 	struct_group(event_counters,
+ 		__u32 sys_pm;
+ 		__u32 host_msg;
+ 		__u32 unknown;
+ 		__u32 local_ssm;
+ 		__u32 timer;
+ 	);
+ 	__u32 event_log[ICP_QAT_NUMBER_OF_PM_EVENTS];
+ 	struct_group(pm,
+ 		__u32 fw_init;
+ 		__u32 pwrreq;
+ 		__u32 status;
+ 		__u32 main;
+ 		__u32 thread;
+ 	);
+ 	struct_group(ssm,
+ 		__u32 pm_enable;
+ 		__u32 pm_active_status;
+ 		__u32 pm_managed_status;
+ 		__u32 pm_domain_status;
+ 		__u32 active_constraint;
+ 	);
+ 	__u32 resvrd3[6];
+ };
+ 
++>>>>>>> e079231676e0 (crypto: qat - add pm_status debugfs file):drivers/crypto/intel/qat/qat_common/icp_qat_fw_init_admin.h
  #endif
* Unmerged path Documentation/ABI/testing/debugfs-driver-qat
* Unmerged path drivers/crypto/intel/qat/qat_common/adf_dbgfs.c
* Unmerged path drivers/crypto/qat/qat_common/adf_gen4_pm_debugfs.c
* Unmerged path drivers/crypto/qat/qat_common/adf_pm_dbgfs.c
* Unmerged path drivers/crypto/qat/qat_common/adf_pm_dbgfs.h
* Unmerged path Documentation/ABI/testing/debugfs-driver-qat
* Unmerged path drivers/crypto/intel/qat/qat_common/adf_dbgfs.c
* Unmerged path drivers/crypto/qat/qat_common/Makefile
diff --git a/drivers/crypto/qat/qat_common/adf_accel_devices.h b/drivers/crypto/qat/qat_common/adf_accel_devices.h
index c43e39c34d9b..6e193d70d792 100644
--- a/drivers/crypto/qat/qat_common/adf_accel_devices.h
+++ b/drivers/crypto/qat/qat_common/adf_accel_devices.h
@@ -280,6 +280,18 @@ struct adf_dc_data {
 	dma_addr_t ovf_buff_p;
 };
 
+struct adf_pm {
+	struct dentry *debugfs_pm_status;
+	bool present;
+	int idle_irq_counters;
+	int throttle_irq_counters;
+	int fw_irq_counters;
+	int host_ack_counter;
+	int host_nack_counter;
+	ssize_t (*print_pm_status)(struct adf_accel_dev *accel_dev,
+				   char __user *buf, size_t count, loff_t *pos);
+};
+
 struct adf_accel_dev {
 	struct adf_etr_data *transport;
 	struct adf_hw_device_data *hw_device;
@@ -287,6 +299,7 @@ struct adf_accel_dev {
 	struct adf_fw_loader_data *fw_loader;
 	struct adf_admin_comms *admin;
 	struct adf_dc_data *dc_data;
+	struct adf_pm power_management;
 	struct list_head crypto_list;
 	struct list_head compression_list;
 	unsigned long status;
diff --git a/drivers/crypto/qat/qat_common/adf_admin.c b/drivers/crypto/qat/qat_common/adf_admin.c
index 118775ee02f2..5aa9a778fc1d 100644
--- a/drivers/crypto/qat/qat_common/adf_admin.c
+++ b/drivers/crypto/qat/qat_common/adf_admin.c
@@ -287,6 +287,33 @@ int adf_init_admin_pm(struct adf_accel_dev *accel_dev, u32 idle_delay)
 	return adf_send_admin(accel_dev, &req, &resp, ae_mask);
 }
 
+int adf_get_pm_info(struct adf_accel_dev *accel_dev, dma_addr_t p_state_addr,
+		    size_t buff_size)
+{
+	struct adf_hw_device_data *hw_data = accel_dev->hw_device;
+	struct icp_qat_fw_init_admin_req req = { };
+	struct icp_qat_fw_init_admin_resp resp;
+	u32 ae_mask = hw_data->admin_ae_mask;
+	int ret;
+
+	/* Query pm info via init/admin cmd */
+	if (!accel_dev->admin) {
+		dev_err(&GET_DEV(accel_dev), "adf_admin is not available\n");
+		return -EFAULT;
+	}
+
+	req.cmd_id = ICP_QAT_FW_PM_INFO;
+	req.init_cfg_sz = buff_size;
+	req.init_cfg_ptr = p_state_addr;
+
+	ret = adf_send_admin(accel_dev, &req, &resp, ae_mask);
+	if (ret)
+		dev_err(&GET_DEV(accel_dev),
+			"Failed to query power-management info\n");
+
+	return ret;
+}
+
 int adf_init_admin_comms(struct adf_accel_dev *accel_dev)
 {
 	struct adf_admin_comms *admin;
* Unmerged path drivers/crypto/qat/qat_common/adf_common_drv.h
diff --git a/drivers/crypto/qat/qat_common/adf_gen4_pm.c b/drivers/crypto/qat/qat_common/adf_gen4_pm.c
index b0e60471163c..c663d3a20c5b 100644
--- a/drivers/crypto/qat/qat_common/adf_gen4_pm.c
+++ b/drivers/crypto/qat/qat_common/adf_gen4_pm.c
@@ -12,11 +12,6 @@
 #include "adf_gen4_hw_data.h"
 #include "adf_cfg.h"
 
-enum qat_pm_host_msg {
-	PM_NO_CHANGE = 0,
-	PM_SET_MIN,
-};
-
 struct adf_gen4_pm_data {
 	struct work_struct pm_irq_work;
 	struct adf_accel_dev *accel_dev;
@@ -27,6 +22,7 @@ static int send_host_msg(struct adf_accel_dev *accel_dev)
 {
 	char pm_idle_support_cfg[ADF_CFG_MAX_VAL_LEN_IN_BYTES] = {};
 	void __iomem *pmisc = adf_get_pmisc_base(accel_dev);
+	struct adf_pm *pm = &accel_dev->power_management;
 	bool pm_idle_support;
 	u32 msg;
 	int ret;
@@ -41,6 +37,11 @@ static int send_host_msg(struct adf_accel_dev *accel_dev)
 	if (ret)
 		pm_idle_support = true;
 
+	if (pm_idle_support)
+		pm->host_ack_counter++;
+	else
+		pm->host_nack_counter++;
+
 	/* Send HOST_MSG */
 	msg = FIELD_PREP(ADF_GEN4_PM_MSG_PAYLOAD_BIT_MASK,
 			 pm_idle_support ? PM_SET_MIN : PM_NO_CHANGE);
@@ -61,17 +62,27 @@ static void pm_bh_handler(struct work_struct *work)
 		container_of(work, struct adf_gen4_pm_data, pm_irq_work);
 	struct adf_accel_dev *accel_dev = pm_data->accel_dev;
 	void __iomem *pmisc = adf_get_pmisc_base(accel_dev);
+	struct adf_pm *pm = &accel_dev->power_management;
 	u32 pm_int_sts = pm_data->pm_int_sts;
 	u32 val;
 
 	/* PM Idle interrupt */
 	if (pm_int_sts & ADF_GEN4_PM_IDLE_STS) {
+		pm->idle_irq_counters++;
 		/* Issue host message to FW */
 		if (send_host_msg(accel_dev))
 			dev_warn_ratelimited(&GET_DEV(accel_dev),
 					     "Failed to send host msg to FW\n");
 	}
 
+	/* PM throttle interrupt */
+	if (pm_int_sts & ADF_GEN4_PM_THR_STS)
+		pm->throttle_irq_counters++;
+
+	/* PM fw interrupt */
+	if (pm_int_sts & ADF_GEN4_PM_FW_INT_STS)
+		pm->fw_irq_counters++;
+
 	/* Clear interrupt status */
 	ADF_CSR_WR(pmisc, ADF_GEN4_PM_INTERRUPT, pm_int_sts);
 
@@ -131,6 +142,9 @@ int adf_gen4_enable_pm(struct adf_accel_dev *accel_dev)
 	if (ret)
 		return ret;
 
+	/* Initialize PM internal data */
+	adf_gen4_init_dev_pm_data(accel_dev);
+
 	/* Enable default PM interrupts: IDLE, THROTTLE */
 	val = ADF_CSR_RD(pmisc, ADF_GEN4_PM_INTERRUPT);
 	val |= ADF_GEN4_PM_INT_EN_DEFAULT;
diff --git a/drivers/crypto/qat/qat_common/adf_gen4_pm.h b/drivers/crypto/qat/qat_common/adf_gen4_pm.h
index 39d37b352b45..a49352b79a7a 100644
--- a/drivers/crypto/qat/qat_common/adf_gen4_pm.h
+++ b/drivers/crypto/qat/qat_common/adf_gen4_pm.h
@@ -7,6 +7,11 @@
 
 struct adf_accel_dev;
 
+enum qat_pm_host_msg {
+	PM_NO_CHANGE = 0,
+	PM_SET_MIN,
+};
+
 /* Power management registers */
 #define ADF_GEN4_PM_HOST_MSG (0x50A01C)
 
@@ -41,7 +46,48 @@ struct adf_accel_dev;
 #define ADF_GEN4_PM_MAX_IDLE_FILTER		(0x7)
 #define ADF_GEN4_PM_DEFAULT_IDLE_SUPPORT	(0x1)
 
+/* PM CSRs fields masks */
+#define ADF_GEN4_PM_DOMAIN_POWER_GATED_MASK	GENMASK(15, 0)
+#define ADF_GEN4_PM_SSM_PM_ENABLE_MASK		GENMASK(15, 0)
+#define ADF_GEN4_PM_IDLE_FILTER_MASK		GENMASK(5, 3)
+#define ADF_GEN4_PM_IDLE_ENABLE_MASK		BIT(2)
+#define ADF_GEN4_PM_ENABLE_PM_MASK		BIT(21)
+#define ADF_GEN4_PM_ENABLE_PM_IDLE_MASK		BIT(22)
+#define ADF_GEN4_PM_ENABLE_DEEP_PM_IDLE_MASK	BIT(23)
+#define ADF_GEN4_PM_CURRENT_WP_MASK		GENMASK(19, 11)
+#define ADF_GEN4_PM_CPM_PM_STATE_MASK		GENMASK(22, 20)
+#define ADF_GEN4_PM_PENDING_WP_MASK		GENMASK(31, 23)
+#define ADF_GEN4_PM_THR_VALUE_MASK		GENMASK(6, 4)
+#define ADF_GEN4_PM_MIN_PWR_ACK_MASK		BIT(7)
+#define ADF_GEN4_PM_MIN_PWR_ACK_PENDING_MASK	BIT(17)
+#define ADF_GEN4_PM_CPR_ACTIVE_COUNT_MASK	BIT(0)
+#define ADF_GEN4_PM_CPR_MANAGED_COUNT_MASK	BIT(0)
+#define ADF_GEN4_PM_XLT_ACTIVE_COUNT_MASK	BIT(1)
+#define ADF_GEN4_PM_XLT_MANAGED_COUNT_MASK	BIT(1)
+#define ADF_GEN4_PM_DCPR_ACTIVE_COUNT_MASK	GENMASK(3, 2)
+#define ADF_GEN4_PM_DCPR_MANAGED_COUNT_MASK	GENMASK(3, 2)
+#define ADF_GEN4_PM_PKE_ACTIVE_COUNT_MASK	GENMASK(8, 4)
+#define ADF_GEN4_PM_PKE_MANAGED_COUNT_MASK	GENMASK(8, 4)
+#define ADF_GEN4_PM_WAT_ACTIVE_COUNT_MASK	GENMASK(13, 9)
+#define ADF_GEN4_PM_WAT_MANAGED_COUNT_MASK	GENMASK(13, 9)
+#define ADF_GEN4_PM_WCP_ACTIVE_COUNT_MASK	GENMASK(18, 14)
+#define ADF_GEN4_PM_WCP_MANAGED_COUNT_MASK	GENMASK(18, 14)
+#define ADF_GEN4_PM_UCS_ACTIVE_COUNT_MASK	GENMASK(20, 19)
+#define ADF_GEN4_PM_UCS_MANAGED_COUNT_MASK	GENMASK(20, 19)
+#define ADF_GEN4_PM_CPH_ACTIVE_COUNT_MASK	GENMASK(24, 21)
+#define ADF_GEN4_PM_CPH_MANAGED_COUNT_MASK	GENMASK(24, 21)
+#define ADF_GEN4_PM_ATH_ACTIVE_COUNT_MASK	GENMASK(28, 25)
+#define ADF_GEN4_PM_ATH_MANAGED_COUNT_MASK	GENMASK(28, 25)
+
 int adf_gen4_enable_pm(struct adf_accel_dev *accel_dev);
 bool adf_gen4_handle_pm_interrupt(struct adf_accel_dev *accel_dev);
 
+#ifdef CONFIG_DEBUG_FS
+void adf_gen4_init_dev_pm_data(struct adf_accel_dev *accel_dev);
+#else
+static inline void adf_gen4_init_dev_pm_data(struct adf_accel_dev *accel_dev)
+{
+}
+#endif /* CONFIG_DEBUG_FS */
+
 #endif
* Unmerged path drivers/crypto/qat/qat_common/adf_gen4_pm_debugfs.c
* Unmerged path drivers/crypto/qat/qat_common/adf_pm_dbgfs.c
* Unmerged path drivers/crypto/qat/qat_common/adf_pm_dbgfs.h
* Unmerged path drivers/crypto/qat/qat_common/icp_qat_fw_init_admin.h
