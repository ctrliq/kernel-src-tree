crypto: qat - add infrastructure for error reporting

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-530.el8
commit-author Shashank Gupta <shashank.gupta@intel.com>
commit 93b2f7de7db598b0fe429948c739c212f8316330
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-530.el8/93b2f7de.failed

Add infrastructure for enabling, disabling and reporting errors in the QAT
driver. This adds a new structure, adf_ras_ops, to adf_hw_device_data that
contains the following methods:
  - enable_ras_errors(): allows to enable RAS errors at device
    initialization.
  - disable_ras_errors(): allows to disable RAS errors at device shutdown.
  - handle_interrupt(): allows to detect if there is an error and report if
    a reset is required. This is executed immediately after the error is
    reported, in the context of an ISR.

An initial, empty, implementation of the methods above is provided
for QAT GEN4.

	Signed-off-by: Shashank Gupta <shashank.gupta@intel.com>
	Reviewed-by: Giovanni Cabiddu <giovanni.cabiddu@intel.com>
	Reviewed-by: Tero Kristo <tero.kristo@linux.intel.com>
	Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
(cherry picked from commit 93b2f7de7db598b0fe429948c739c212f8316330)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/crypto/qat/qat_4xxx/adf_4xxx_hw_data.c
#	drivers/crypto/qat/qat_common/Makefile
#	drivers/crypto/qat/qat_common/adf_gen4_ras.c
#	drivers/crypto/qat/qat_common/adf_gen4_ras.h
#	drivers/crypto/qat/qat_common/adf_init.c
diff --cc drivers/crypto/qat/qat_4xxx/adf_4xxx_hw_data.c
index 3eda91aa7c11,671e32c93160..000000000000
--- a/drivers/crypto/qat/qat_4xxx/adf_4xxx_hw_data.c
+++ b/drivers/crypto/qat/qat_4xxx/adf_4xxx_hw_data.c
@@@ -8,7 -9,10 +8,12 @@@
  #include <adf_gen4_hw_data.h>
  #include <adf_gen4_pfvf.h>
  #include <adf_gen4_pm.h>
++<<<<<<< HEAD:drivers/crypto/qat/qat_4xxx/adf_4xxx_hw_data.c
++=======
+ #include "adf_gen4_ras.h"
+ #include <adf_gen4_timer.h>
++>>>>>>> 93b2f7de7db5 (crypto: qat - add infrastructure for error reporting):drivers/crypto/intel/qat/qat_4xxx/adf_4xxx_hw_data.c
  #include "adf_4xxx_hw_data.h"
 -#include "adf_cfg_services.h"
  #include "icp_qat_hw.h"
  
  enum adf_fw_objs {
diff --cc drivers/crypto/qat/qat_common/Makefile
index 1fb8d50f509f,151fd3c01f62..000000000000
--- a/drivers/crypto/qat/qat_common/Makefile
+++ b/drivers/crypto/qat/qat_common/Makefile
@@@ -17,6 -18,9 +17,12 @@@ intel_qat-objs := adf_cfg.o 
  	adf_gen4_pm.o \
  	adf_gen2_dc.o \
  	adf_gen4_dc.o \
++<<<<<<< HEAD:drivers/crypto/qat/qat_common/Makefile
++=======
+ 	adf_gen4_ras.o \
+ 	adf_gen4_timer.o \
+ 	adf_clock.o \
++>>>>>>> 93b2f7de7db5 (crypto: qat - add infrastructure for error reporting):drivers/crypto/intel/qat/qat_common/Makefile
  	qat_crypto.o \
  	qat_compression.o \
  	qat_comp_algs.o \
diff --cc drivers/crypto/qat/qat_common/adf_init.c
index 55c4bf1a3b16,b3cf0720cf9a..000000000000
--- a/drivers/crypto/qat/qat_common/adf_init.c
+++ b/drivers/crypto/qat/qat_common/adf_init.c
@@@ -323,6 -353,11 +326,14 @@@ static void adf_dev_shutdown(struct adf
  			clear_bit(accel_dev->accel_id, service->init_status);
  	}
  
++<<<<<<< HEAD:drivers/crypto/qat/qat_common/adf_init.c
++=======
+ 	if (hw_data->ras_ops.disable_ras_errors)
+ 		hw_data->ras_ops.disable_ras_errors(accel_dev);
+ 
+ 	adf_heartbeat_shutdown(accel_dev);
+ 
++>>>>>>> 93b2f7de7db5 (crypto: qat - add infrastructure for error reporting):drivers/crypto/intel/qat/qat_common/adf_init.c
  	hw_data->disable_iov(accel_dev);
  
  	if (test_bit(ADF_STATUS_IRQ_ALLOCATED, &accel_dev->status)) {
* Unmerged path drivers/crypto/qat/qat_common/adf_gen4_ras.c
* Unmerged path drivers/crypto/qat/qat_common/adf_gen4_ras.h
* Unmerged path drivers/crypto/qat/qat_4xxx/adf_4xxx_hw_data.c
* Unmerged path drivers/crypto/qat/qat_common/Makefile
diff --git a/drivers/crypto/qat/qat_common/adf_accel_devices.h b/drivers/crypto/qat/qat_common/adf_accel_devices.h
index c43e39c34d9b..ff82fa07357f 100644
--- a/drivers/crypto/qat/qat_common/adf_accel_devices.h
+++ b/drivers/crypto/qat/qat_common/adf_accel_devices.h
@@ -152,6 +152,13 @@ struct adf_accel_dev;
 struct adf_etr_data;
 struct adf_etr_ring_data;
 
+struct adf_ras_ops {
+	void (*enable_ras_errors)(struct adf_accel_dev *accel_dev);
+	void (*disable_ras_errors)(struct adf_accel_dev *accel_dev);
+	bool (*handle_interrupt)(struct adf_accel_dev *accel_dev,
+				 bool *reset_required);
+};
+
 struct adf_pfvf_ops {
 	int (*enable_comms)(struct adf_accel_dev *accel_dev);
 	u32 (*get_pf2vf_offset)(u32 i);
@@ -209,6 +216,7 @@ struct adf_hw_device_data {
 	struct adf_pfvf_ops pfvf_ops;
 	struct adf_hw_csr_ops csr_ops;
 	struct adf_dc_ops dc_ops;
+	struct adf_ras_ops ras_ops;
 	const char *fw_name;
 	const char *fw_mmp_name;
 	u32 fuses;
* Unmerged path drivers/crypto/qat/qat_common/adf_gen4_ras.c
* Unmerged path drivers/crypto/qat/qat_common/adf_gen4_ras.h
* Unmerged path drivers/crypto/qat/qat_common/adf_init.c
diff --git a/drivers/crypto/qat/qat_common/adf_isr.c b/drivers/crypto/qat/qat_common/adf_isr.c
index ad9e135b8560..84116ee312ce 100644
--- a/drivers/crypto/qat/qat_common/adf_isr.c
+++ b/drivers/crypto/qat/qat_common/adf_isr.c
@@ -132,6 +132,21 @@ static bool adf_handle_pm_int(struct adf_accel_dev *accel_dev)
 	return false;
 }
 
+static bool adf_handle_ras_int(struct adf_accel_dev *accel_dev)
+{
+	struct adf_ras_ops *ras_ops = &accel_dev->hw_device->ras_ops;
+	bool reset_required;
+
+	if (ras_ops->handle_interrupt &&
+	    ras_ops->handle_interrupt(accel_dev, &reset_required)) {
+		if (reset_required)
+			dev_err(&GET_DEV(accel_dev), "Fatal error, reset required\n");
+		return true;
+	}
+
+	return false;
+}
+
 static irqreturn_t adf_msix_isr_ae(int irq, void *dev_ptr)
 {
 	struct adf_accel_dev *accel_dev = dev_ptr;
@@ -145,6 +160,9 @@ static irqreturn_t adf_msix_isr_ae(int irq, void *dev_ptr)
 	if (adf_handle_pm_int(accel_dev))
 		return IRQ_HANDLED;
 
+	if (adf_handle_ras_int(accel_dev))
+		return IRQ_HANDLED;
+
 	dev_dbg(&GET_DEV(accel_dev), "qat_dev%d spurious AE interrupt\n",
 		accel_dev->accel_id);
 
