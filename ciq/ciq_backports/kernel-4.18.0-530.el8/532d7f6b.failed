crypto: qat - add error counters

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-530.el8
commit-author Shashank Gupta <shashank.gupta@intel.com>
commit 532d7f6bc458042571752168bcb5e1fdc576b8c4
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-530.el8/532d7f6b.failed

Introduce ras counters interface for counting QAT specific device
errors and expose them through the newly created qat_ras sysfs
group attribute.

This adds the following attributes:

- errors_correctable: number of correctable errors
- errors_nonfatal: number of uncorrectable non fatal errors
- errors_fatal: number of uncorrectable fatal errors
- reset_error_counters: resets all counters

These counters are initialized during device bring up and cleared
during device shutdown and are applicable only to QAT GEN4 devices.

	Signed-off-by: Shashank Gupta <shashank.gupta@intel.com>
	Reviewed-by: Giovanni Cabiddu <giovanni.cabiddu@intel.com>
	Reviewed-by: Tero Kristo <tero.kristo@linux.intel.com>
	Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
(cherry picked from commit 532d7f6bc458042571752168bcb5e1fdc576b8c4)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/crypto/qat/qat_4xxx/adf_drv.c
#	drivers/crypto/qat/qat_common/adf_init.c
#	drivers/crypto/qat/qat_common/adf_sysfs_ras_counters.c
#	drivers/crypto/qat/qat_common/adf_sysfs_ras_counters.h
diff --cc drivers/crypto/qat/qat_4xxx/adf_drv.c
index 3f92d9e7e814,8f483d1197dd..000000000000
--- a/drivers/crypto/qat/qat_4xxx/adf_drv.c
+++ b/drivers/crypto/qat/qat_4xxx/adf_drv.c
@@@ -443,6 -418,9 +443,12 @@@ static int adf_probe(struct pci_dev *pd
  		goto out_err;
  	}
  
++<<<<<<< HEAD:drivers/crypto/qat/qat_4xxx/adf_drv.c
++=======
+ 	accel_dev->ras_errors.enabled = true;
+ 	adf_dbgfs_init(accel_dev);
+ 
++>>>>>>> 532d7f6bc458 (crypto: qat - add error counters):drivers/crypto/intel/qat/qat_4xxx/adf_drv.c
  	ret = adf_dev_up(accel_dev, true);
  	if (ret)
  		goto out_err_dev_stop;
diff --cc drivers/crypto/qat/qat_common/adf_init.c
index 55c4bf1a3b16,00a32efdfc59..000000000000
--- a/drivers/crypto/qat/qat_common/adf_init.c
+++ b/drivers/crypto/qat/qat_common/adf_init.c
@@@ -7,6 -7,9 +7,12 @@@
  #include "adf_accel_devices.h"
  #include "adf_cfg.h"
  #include "adf_common_drv.h"
++<<<<<<< HEAD:drivers/crypto/qat/qat_common/adf_init.c
++=======
+ #include "adf_dbgfs.h"
+ #include "adf_heartbeat.h"
+ #include "adf_sysfs_ras_counters.h"
++>>>>>>> 532d7f6bc458 (crypto: qat - add error counters):drivers/crypto/intel/qat/qat_common/adf_init.c
  
  static LIST_HEAD(service_table);
  static DEFINE_MUTEX(service_lock);
@@@ -217,6 -240,11 +223,14 @@@ static int adf_dev_start(struct adf_acc
  		clear_bit(ADF_STATUS_STARTED, &accel_dev->status);
  		return -EFAULT;
  	}
++<<<<<<< HEAD:drivers/crypto/qat/qat_common/adf_init.c
++=======
+ 	set_bit(ADF_STATUS_COMP_ALGS_REGISTERED, &accel_dev->status);
+ 
+ 	adf_dbgfs_add(accel_dev);
+ 	adf_sysfs_start_ras(accel_dev);
+ 
++>>>>>>> 532d7f6bc458 (crypto: qat - add error counters):drivers/crypto/intel/qat/qat_common/adf_init.c
  	return 0;
  }
  
@@@ -241,6 -269,9 +255,12 @@@ static void adf_dev_stop(struct adf_acc
  	    !test_bit(ADF_STATUS_STARTING, &accel_dev->status))
  		return;
  
++<<<<<<< HEAD:drivers/crypto/qat/qat_common/adf_init.c
++=======
+ 	adf_dbgfs_rm(accel_dev);
+ 	adf_sysfs_stop_ras(accel_dev);
+ 
++>>>>>>> 532d7f6bc458 (crypto: qat - add error counters):drivers/crypto/intel/qat/qat_common/adf_init.c
  	clear_bit(ADF_STATUS_STARTING, &accel_dev->status);
  	clear_bit(ADF_STATUS_STARTED, &accel_dev->status);
  
* Unmerged path drivers/crypto/qat/qat_common/adf_sysfs_ras_counters.c
* Unmerged path drivers/crypto/qat/qat_common/adf_sysfs_ras_counters.h
diff --git a/Documentation/ABI/testing/sysfs-driver-qat_ras b/Documentation/ABI/testing/sysfs-driver-qat_ras
new file mode 100644
index 000000000000..176dea1e9c0a
--- /dev/null
+++ b/Documentation/ABI/testing/sysfs-driver-qat_ras
@@ -0,0 +1,41 @@
+What:		/sys/bus/pci/devices/<BDF>/qat_ras/errors_correctable
+Date:		January 2024
+KernelVersion:	6.7
+Contact:	qat-linux@intel.com
+Description:	(RO) Reports the number of correctable errors detected by the device.
+
+		This attribute is only available for qat_4xxx devices.
+
+What:		/sys/bus/pci/devices/<BDF>/qat_ras/errors_nonfatal
+Date:		January 2024
+KernelVersion:	6.7
+Contact:	qat-linux@intel.com
+Description:	(RO) Reports the number of non fatal errors detected by the device.
+
+		This attribute is only available for qat_4xxx devices.
+
+What:		/sys/bus/pci/devices/<BDF>/qat_ras/errors_fatal
+Date:		January 2024
+KernelVersion:	6.7
+Contact:	qat-linux@intel.com
+Description:	(RO) Reports the number of fatal errors detected by the device.
+
+		This attribute is only available for qat_4xxx devices.
+
+What:		/sys/bus/pci/devices/<BDF>/qat_ras/reset_error_counters
+Date:		January 2024
+KernelVersion:	6.7
+Contact:	qat-linux@intel.com
+Description:	(WO) Write to resets all error counters of a device.
+
+		The following example reports how to reset the counters::
+
+			# echo 1 > /sys/bus/pci/devices/<BDF>/qat_ras/reset_error_counters
+			# cat /sys/bus/pci/devices/<BDF>/qat_ras/errors_correctable
+			0
+			# cat /sys/bus/pci/devices/<BDF>/qat_ras/errors_nonfatal
+			0
+			# cat /sys/bus/pci/devices/<BDF>/qat_ras/errors_fatal
+			0
+
+		This attribute is only available for qat_4xxx devices.
* Unmerged path drivers/crypto/qat/qat_4xxx/adf_drv.c
diff --git a/drivers/crypto/qat/qat_common/Makefile b/drivers/crypto/qat/qat_common/Makefile
index 1fb8d50f509f..0d4cb273f2e5 100644
--- a/drivers/crypto/qat/qat_common/Makefile
+++ b/drivers/crypto/qat/qat_common/Makefile
@@ -11,6 +11,7 @@ intel_qat-objs := adf_cfg.o \
 	adf_admin.o \
 	adf_hw_arbiter.o \
 	adf_sysfs.o \
+	adf_sysfs_ras_counters.o \
 	adf_gen2_hw_data.o \
 	adf_gen2_config.o \
 	adf_gen4_hw_data.o \
diff --git a/drivers/crypto/qat/qat_common/adf_accel_devices.h b/drivers/crypto/qat/qat_common/adf_accel_devices.h
index c43e39c34d9b..0336df59b0e7 100644
--- a/drivers/crypto/qat/qat_common/adf_accel_devices.h
+++ b/drivers/crypto/qat/qat_common/adf_accel_devices.h
@@ -7,6 +7,7 @@
 #include <linux/list.h>
 #include <linux/io.h>
 #include <linux/ratelimit.h>
+#include <linux/types.h>
 #include "adf_cfg_common.h"
 #include "adf_pfvf_msg.h"
 
@@ -81,6 +82,18 @@ enum dev_sku_info {
 	DEV_SKU_UNKNOWN,
 };
 
+enum ras_errors {
+	ADF_RAS_CORR,
+	ADF_RAS_UNCORR,
+	ADF_RAS_FATAL,
+	ADF_RAS_ERRORS,
+};
+
+struct adf_error_counters {
+	atomic_t counter[ADF_RAS_ERRORS];
+	bool enabled;
+};
+
 static inline const char *get_sku_info(enum dev_sku_info info)
 {
 	switch (info) {
@@ -312,6 +325,7 @@ struct adf_accel_dev {
 			u8 pf_compat_ver;
 		} vf;
 	};
+	struct adf_error_counters ras_errors;
 	struct mutex state_lock; /* protect state of the device */
 	bool is_vf;
 	u32 accel_id;
* Unmerged path drivers/crypto/qat/qat_common/adf_init.c
* Unmerged path drivers/crypto/qat/qat_common/adf_sysfs_ras_counters.c
* Unmerged path drivers/crypto/qat/qat_common/adf_sysfs_ras_counters.h
