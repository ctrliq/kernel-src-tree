intel_idle: Add ibrs_off module parameter to force-disable IBRS

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-532.el8
commit-author Waiman Long <longman@redhat.com>
commit aa1567a7e6440b8c3af4b0d8a8219d8fc5028c5f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-532.el8/aa1567a7.failed

Commit bf5835bcdb96 ("intel_idle: Disable IBRS during long idle")
disables IBRS when the cstate is 6 or lower. However, there are
some use cases where a customer may want to use max_cstate=1 to
lower latency. Such use cases will suffer from the performance
degradation caused by the enabling of IBRS in the sibling idle thread.
Add a "ibrs_off" module parameter to force disable IBRS and the
CPUIDLE_FLAG_IRQ_ENABLE flag if set.

In the case of a Skylake server with max_cstate=1, this new ibrs_off
option will likely increase the IRQ response latency as IRQ will now
be disabled.

When running SPECjbb2015 with cstates set to C1 on a Skylake system.

First test when the kernel is booted with: "intel_idle.ibrs_off":

  max-jOPS = 117828, critical-jOPS = 66047

Then retest when the kernel is booted without the "intel_idle.ibrs_off"
added:

  max-jOPS = 116408, critical-jOPS = 58958

That means booting with "intel_idle.ibrs_off" improves performance by:

  max-jOPS:      +1.2%, which could be considered noise range.
  critical-jOPS: +12%,  which is definitely a solid improvement.

The admin-guide/pm/intel_idle.rst file is updated to add a description
about the new "ibrs_off" module parameter.

	Signed-off-by: Waiman Long <longman@redhat.com>
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
	Acked-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
Link: https://lore.kernel.org/r/20230727184600.26768-5-longman@redhat.com
(cherry picked from commit aa1567a7e6440b8c3af4b0d8a8219d8fc5028c5f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/idle/intel_idle.c
diff --cc drivers/idle/intel_idle.c
index eff6d430987a,dcda0afecfc5..000000000000
--- a/drivers/idle/intel_idle.c
+++ b/drivers/idle/intel_idle.c
@@@ -65,8 -65,10 +65,15 @@@ static struct cpuidle_driver intel_idle
  };
  /* intel_idle.max_cstate=0 disables driver */
  static int max_cstate = CPUIDLE_STATE_MAX - 1;
++<<<<<<< HEAD
 +static unsigned int disabled_states_mask;
 +static unsigned int preferred_states_mask;
++=======
+ static unsigned int disabled_states_mask __read_mostly;
+ static unsigned int preferred_states_mask __read_mostly;
+ static bool force_irq_on __read_mostly;
+ static bool ibrs_off __read_mostly;
++>>>>>>> aa1567a7e644 (intel_idle: Add ibrs_off module parameter to force-disable IBRS)
  
  static struct cpuidle_device __percpu *intel_idle_cpuidle_devices;
  
@@@ -1843,6 -1839,43 +1850,46 @@@ static bool __init intel_idle_verify_cs
  	return true;
  }
  
++<<<<<<< HEAD
++=======
+ static void state_update_enter_method(struct cpuidle_state *state, int cstate)
+ {
+ 	if (state->flags & CPUIDLE_FLAG_INIT_XSTATE) {
+ 		/*
+ 		 * Combining with XSTATE with IBRS or IRQ_ENABLE flags
+ 		 * is not currently supported but this driver.
+ 		 */
+ 		WARN_ON_ONCE(state->flags & CPUIDLE_FLAG_IBRS);
+ 		WARN_ON_ONCE(state->flags & CPUIDLE_FLAG_IRQ_ENABLE);
+ 		state->enter = intel_idle_xstate;
+ 		return;
+ 	}
+ 
+ 	if (cpu_feature_enabled(X86_FEATURE_KERNEL_IBRS) &&
+ 			((state->flags & CPUIDLE_FLAG_IBRS) || ibrs_off)) {
+ 		/*
+ 		 * IBRS mitigation requires that C-states are entered
+ 		 * with interrupts disabled.
+ 		 */
+ 		if (ibrs_off && (state->flags & CPUIDLE_FLAG_IRQ_ENABLE))
+ 			state->flags &= ~CPUIDLE_FLAG_IRQ_ENABLE;
+ 		WARN_ON_ONCE(state->flags & CPUIDLE_FLAG_IRQ_ENABLE);
+ 		state->enter = intel_idle_ibrs;
+ 		return;
+ 	}
+ 
+ 	if (state->flags & CPUIDLE_FLAG_IRQ_ENABLE) {
+ 		state->enter = intel_idle_irq;
+ 		return;
+ 	}
+ 
+ 	if (force_irq_on) {
+ 		pr_info("forced intel_idle_irq for state %d\n", cstate);
+ 		state->enter = intel_idle_irq;
+ 	}
+ }
+ 
++>>>>>>> aa1567a7e644 (intel_idle: Add ibrs_off module parameter to force-disable IBRS)
  static void __init intel_idle_init_cstates_icpu(struct cpuidle_driver *drv)
  {
  	int cstate;
@@@ -2146,3 -2172,15 +2193,18 @@@ MODULE_PARM_DESC(states_off, "Mask of d
   */
  module_param_named(preferred_cstates, preferred_states_mask, uint, 0444);
  MODULE_PARM_DESC(preferred_cstates, "Mask of preferred idle states");
++<<<<<<< HEAD
++=======
+ /*
+  * Debugging option that forces the driver to enter all C-states with
+  * interrupts enabled. Does not apply to C-states with
+  * 'CPUIDLE_FLAG_INIT_XSTATE' and 'CPUIDLE_FLAG_IBRS' flags.
+  */
+ module_param(force_irq_on, bool, 0444);
+ /*
+  * Force the disabling of IBRS when X86_FEATURE_KERNEL_IBRS is on and
+  * CPUIDLE_FLAG_IRQ_ENABLE isn't set.
+  */
+ module_param(ibrs_off, bool, 0444);
+ MODULE_PARM_DESC(ibrs_off, "Disable IBRS when idle");
++>>>>>>> aa1567a7e644 (intel_idle: Add ibrs_off module parameter to force-disable IBRS)
diff --git a/Documentation/admin-guide/pm/intel_idle.rst b/Documentation/admin-guide/pm/intel_idle.rst
index 89309e1b0e48..7c59ff6fc753 100644
--- a/Documentation/admin-guide/pm/intel_idle.rst
+++ b/Documentation/admin-guide/pm/intel_idle.rst
@@ -168,7 +168,7 @@ and ``idle=nomwait``.  If any of them is present in the kernel command line, the
 ``MWAIT`` instruction is not allowed to be used, so the initialization of
 ``intel_idle`` will fail.
 
-Apart from that there are four module parameters recognized by ``intel_idle``
+Apart from that there are five module parameters recognized by ``intel_idle``
 itself that can be set via the kernel command line (they cannot be updated via
 sysfs, so that is the only way to change their values).
 
@@ -212,6 +212,21 @@ are ignored).
 The idle states disabled this way can be enabled (on a per-CPU basis) from user
 space via ``sysfs``.
 
+The ``ibrs_off`` module parameter is a boolean flag (defaults to
+false). If set, it is used to control if IBRS (Indirect Branch Restricted
+Speculation) should be turned off when the CPU enters an idle state.
+This flag does not affect CPUs that use Enhanced IBRS which can remain
+on with little performance impact.
+
+For some CPUs, IBRS will be selected as mitigation for Spectre v2 and Retbleed
+security vulnerabilities by default.  Leaving the IBRS mode on while idling may
+have a performance impact on its sibling CPU.  The IBRS mode will be turned off
+by default when the CPU enters into a deep idle state, but not in some
+shallower ones.  Setting the ``ibrs_off`` module parameter will force the IBRS
+mode to off when the CPU is in any one of the available idle states.  This may
+help performance of a sibling CPU at the expense of a slightly higher wakeup
+latency for the idle CPU.
+
 
 .. _intel-idle-core-and-package-idle-states:
 
* Unmerged path drivers/idle/intel_idle.c
