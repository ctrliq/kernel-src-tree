bpf: Generally fix helper register offset check

jira LE-1907
cve CVE-2021-4204
Rebuild_History Non-Buildable kernel-4.18.0-532.el8
commit-author Daniel Borkmann <daniel@iogearbox.net>
commit 6788ab23508bddb0a9d88e104284922cb2c22b77
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-532.el8/6788ab23.failed

Right now the assertion on check_ptr_off_reg() is only enforced for register
types PTR_TO_CTX (and open coded also for PTR_TO_BTF_ID), however, this is
insufficient since many other PTR_TO_* register types such as PTR_TO_FUNC do
not handle/expect register offsets when passed to helper functions.

Given this can slip-through easily when adding new types, make this an explicit
allow-list and reject all other current and future types by default if this is
encountered.

Also, extend check_ptr_off_reg() to handle PTR_TO_BTF_ID as well instead of
duplicating it. For PTR_TO_BTF_ID, reg->off is used for BTF to match expected
BTF ids if struct offset is used. This part still needs to be allowed, but the
dynamic off from the tnum must be rejected.

Fixes: 69c087ba6225 ("bpf: Add bpf_for_each_map_elem() helper")
Fixes: eaa6bcb71ef6 ("bpf: Introduce bpf_per_cpu_ptr()")
	Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
	Acked-by: John Fastabend <john.fastabend@gmail.com>
	Acked-by: Alexei Starovoitov <ast@kernel.org>
(cherry picked from commit 6788ab23508bddb0a9d88e104284922cb2c22b77)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/bpf/verifier.c
diff --cc kernel/bpf/verifier.c
index 627d7910d79e,e0b3f4d683eb..000000000000
--- a/kernel/bpf/verifier.c
+++ b/kernel/bpf/verifier.c
@@@ -3695,16 -3969,17 +3695,28 @@@ static int get_callee_stack_depth(struc
  }
  #endif
  
++<<<<<<< HEAD
 +int check_ctx_reg(struct bpf_verifier_env *env,
 +		  const struct bpf_reg_state *reg, int regno)
++=======
+ static int __check_ptr_off_reg(struct bpf_verifier_env *env,
+ 			       const struct bpf_reg_state *reg, int regno,
+ 			       bool fixed_off_ok)
++>>>>>>> 6788ab23508b (bpf: Generally fix helper register offset check)
  {
 -	/* Access to this pointer-typed register or passing it to a helper
 -	 * is only allowed in its original, unmodified form.
 +	/* Access to ctx or passing it to a helper is only allowed in
 +	 * its original, unmodified form.
  	 */
  
++<<<<<<< HEAD
 +	if (reg->off) {
 +		verbose(env, "dereference of modified ctx ptr R%d off=%d disallowed\n",
 +			regno, reg->off);
++=======
+ 	if (!fixed_off_ok && reg->off) {
+ 		verbose(env, "dereference of modified %s ptr R%d off=%d disallowed\n",
+ 			reg_type_str(env, reg->type), regno, reg->off);
++>>>>>>> 6788ab23508b (bpf: Generally fix helper register offset check)
  		return -EACCES;
  	}
  
@@@ -4918,10 -5306,26 +4930,31 @@@ static int check_func_arg(struct bpf_ve
  	if (err)
  		return err;
  
++<<<<<<< HEAD
 +	if (type == PTR_TO_CTX) {
 +		err = check_ctx_reg(env, reg, regno);
++=======
+ 	switch ((u32)type) {
+ 	case SCALAR_VALUE:
+ 	/* Pointer types where reg offset is explicitly allowed: */
+ 	case PTR_TO_PACKET:
+ 	case PTR_TO_PACKET_META:
+ 	case PTR_TO_MAP_KEY:
+ 	case PTR_TO_MAP_VALUE:
+ 	case PTR_TO_MEM:
+ 	case PTR_TO_MEM | MEM_RDONLY:
+ 	case PTR_TO_BUF:
+ 	case PTR_TO_BUF | MEM_RDONLY:
+ 	case PTR_TO_STACK:
+ 		break;
+ 	/* All the rest must be rejected: */
+ 	default:
+ 		err = __check_ptr_off_reg(env, reg, regno,
+ 					  type == PTR_TO_BTF_ID);
++>>>>>>> 6788ab23508b (bpf: Generally fix helper register offset check)
  		if (err < 0)
  			return err;
+ 		break;
  	}
  
  skip_type_check:
* Unmerged path kernel/bpf/verifier.c
