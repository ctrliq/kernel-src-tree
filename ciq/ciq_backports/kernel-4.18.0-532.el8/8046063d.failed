igc: Rename qbv_enable to taprio_offload_enable

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-532.el8
commit-author Florian Kauer <florian.kauer@linutronix.de>
commit 8046063df887bee35c002224267ba46f41be7cf6
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-532.el8/8046063d.failed

In the current implementation the flags adapter->qbv_enable
and IGC_FLAG_TSN_QBV_ENABLED have a similar name, but do not
have the same meaning. The first one is used only to indicate
taprio offload (i.e. when igc_save_qbv_schedule was called),
while the second one corresponds to the Qbv mode of the hardware.
However, the second one is also used to support the TX launchtime
feature, i.e. ETF qdisc offload. This leads to situations where
adapter->qbv_enable is false, but the flag IGC_FLAG_TSN_QBV_ENABLED
is set. This is prone to confusion.

The rename should reduce this confusion. Since it is a pure
rename, it has no impact on functionality.

Fixes: e17090eb2494 ("igc: allow BaseTime 0 enrollment for Qbv")
	Signed-off-by: Florian Kauer <florian.kauer@linutronix.de>
	Reviewed-by: Kurt Kanzenbach <kurt@linutronix.de>
	Tested-by: Naama Meir <naamax.meir@linux.intel.com>
	Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
(cherry picked from commit 8046063df887bee35c002224267ba46f41be7cf6)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/intel/igc/igc_main.c
diff --cc drivers/net/ethernet/intel/igc/igc_main.c
index 80cce6f30899,fae534ef1c4f..000000000000
--- a/drivers/net/ethernet/intel/igc/igc_main.c
+++ b/drivers/net/ethernet/intel/igc/igc_main.c
@@@ -6076,9 -6123,19 +6076,24 @@@ static int igc_save_qbv_schedule(struc
  	size_t n;
  	int i;
  
++<<<<<<< HEAD
 +	adapter->qbv_enable = qopt->enable;
 +
 +	if (!qopt->enable)
++=======
+ 	switch (qopt->cmd) {
+ 	case TAPRIO_CMD_REPLACE:
+ 		adapter->taprio_offload_enable = true;
+ 		break;
+ 	case TAPRIO_CMD_DESTROY:
+ 		adapter->taprio_offload_enable = false;
+ 		break;
+ 	default:
+ 		return -EOPNOTSUPP;
+ 	}
+ 
+ 	if (!adapter->taprio_offload_enable)
++>>>>>>> 8046063df887 (igc: Rename qbv_enable to taprio_offload_enable)
  		return igc_tsn_clear_schedule(adapter);
  
  	if (qopt->base_time < 0)
diff --git a/drivers/net/ethernet/intel/igc/igc.h b/drivers/net/ethernet/intel/igc/igc.h
index 9902f726f06a..b933f0713823 100644
--- a/drivers/net/ethernet/intel/igc/igc.h
+++ b/drivers/net/ethernet/intel/igc/igc.h
@@ -187,7 +187,7 @@ struct igc_adapter {
 	int tc_setup_type;
 	ktime_t base_time;
 	ktime_t cycle_time;
-	bool qbv_enable;
+	bool taprio_offload_enable;
 	u32 qbv_config_change_errors;
 
 	/* OS defined structs */
* Unmerged path drivers/net/ethernet/intel/igc/igc_main.c
diff --git a/drivers/net/ethernet/intel/igc/igc_tsn.c b/drivers/net/ethernet/intel/igc/igc_tsn.c
index 6b299b83e7ef..e17cf7f50192 100644
--- a/drivers/net/ethernet/intel/igc/igc_tsn.c
+++ b/drivers/net/ethernet/intel/igc/igc_tsn.c
@@ -37,7 +37,7 @@ static unsigned int igc_tsn_new_flags(struct igc_adapter *adapter)
 {
 	unsigned int new_flags = adapter->flags & ~IGC_FLAG_TSN_ANY_ENABLED;
 
-	if (adapter->qbv_enable)
+	if (adapter->taprio_offload_enable)
 		new_flags |= IGC_FLAG_TSN_QBV_ENABLED;
 
 	if (is_any_launchtime(adapter))
