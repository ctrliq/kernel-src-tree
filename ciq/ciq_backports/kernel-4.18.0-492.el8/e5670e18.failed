iommu/amd: Specify PCI segment ID when getting pci device

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-492.el8
commit-author Suravee Suthikulpanit <suravee.suthikulpanit@amd.com>
commit e5670e1822cf2858e4c9133fc4e834a1d4a8a4d2
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-492.el8/e5670e18.failed

Upcoming AMD systems can have multiple PCI segments. Hence pass PCI
segment ID to pci_get_domain_bus_and_slot() instead of '0'.

Co-developed-by: Vasant Hegde <vasant.hegde@amd.com>
	Signed-off-by: Vasant Hegde <vasant.hegde@amd.com>
	Signed-off-by: Suravee Suthikulpanit <suravee.suthikulpanit@amd.com>
Link: https://lore.kernel.org/r/20220706113825.25582-32-vasant.hegde@amd.com
	Signed-off-by: Joerg Roedel <jroedel@suse.de>
(cherry picked from commit e5670e1822cf2858e4c9133fc4e834a1d4a8a4d2)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/iommu/amd/iommu.c
diff --cc drivers/iommu/amd/iommu.c
index 3e2277dd9d65,2dbe17e49ffc..000000000000
--- a/drivers/iommu/amd/iommu.c
+++ b/drivers/iommu/amd/iommu.c
@@@ -551,7 -538,14 +551,18 @@@ static void amd_iommu_report_rmp_fault(
  		pci_dev_put(pdev);
  }
  
++<<<<<<< HEAD
 +static void amd_iommu_report_page_fault(u16 devid, u16 domain_id,
++=======
+ #define IS_IOMMU_MEM_TRANSACTION(flags)		\
+ 	(((flags) & EVENT_FLAG_I) == 0)
+ 
+ #define IS_WRITE_REQUEST(flags)			\
+ 	((flags) & EVENT_FLAG_RW)
+ 
+ static void amd_iommu_report_page_fault(struct amd_iommu *iommu,
+ 					u16 devid, u16 domain_id,
++>>>>>>> e5670e1822cf (iommu/amd: Specify PCI segment ID when getting pci device)
  					u64 address, int flags)
  {
  	struct iommu_dev_data *dev_data = NULL;
diff --git a/drivers/iommu/amd/init.c b/drivers/iommu/amd/init.c
index 157f577ae2e2..a21780948858 100644
--- a/drivers/iommu/amd/init.c
+++ b/drivers/iommu/amd/init.c
@@ -1959,7 +1959,8 @@ static int __init iommu_init_pci(struct amd_iommu *iommu)
 	int cap_ptr = iommu->cap_ptr;
 	int ret;
 
-	iommu->dev = pci_get_domain_bus_and_slot(0, PCI_BUS_NUM(iommu->devid),
+	iommu->dev = pci_get_domain_bus_and_slot(iommu->pci_seg->id,
+						 PCI_BUS_NUM(iommu->devid),
 						 iommu->devid & 0xff);
 	if (!iommu->dev)
 		return -ENODEV;
@@ -2018,7 +2019,8 @@ static int __init iommu_init_pci(struct amd_iommu *iommu)
 		int i, j;
 
 		iommu->root_pdev =
-			pci_get_domain_bus_and_slot(0, iommu->dev->bus->number,
+			pci_get_domain_bus_and_slot(iommu->pci_seg->id,
+						    iommu->dev->bus->number,
 						    PCI_DEVFN(0, 0));
 
 		/*
* Unmerged path drivers/iommu/amd/iommu.c
