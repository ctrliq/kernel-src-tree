iommu/vt-d: Avoid unnecessary global DMA cache invalidation

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-492.el8
commit-author Lu Baolu <baolu.lu@linux.intel.com>
commit 6ad931a232e71620c6dbb8d573ccef51f84f2566
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-492.el8/6ad931a2.failed

Some VT-d hardware implementations invalidate all DMA remapping hardware
translation caches as part of SRTP flow. The VT-d spec adds a ESRTPS
(Enhanced Set Root Table Pointer Support, section 11.4.2 in VT-d spec)
capability bit to indicate this. With this bit set, software has no need
to issue the global invalidation request.

	Signed-off-by: Lu Baolu <baolu.lu@linux.intel.com>
	Reviewed-by: Jerry Snitselaar <jsnitsel@redhat.com>
	Reviewed-by: Kevin Tian <kevin.tian@intel.com>
Link: https://lore.kernel.org/r/20220919062523.3438951-3-baolu.lu@linux.intel.com
	Signed-off-by: Joerg Roedel <jroedel@suse.de>
(cherry picked from commit 6ad931a232e71620c6dbb8d573ccef51f84f2566)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/intel-iommu.h
diff --cc include/linux/intel-iommu.h
index fcd9af6275ba,92023dff9513..000000000000
--- a/include/linux/intel-iommu.h
+++ b/include/linux/intel-iommu.h
@@@ -157,7 -146,9 +157,13 @@@
  /*
   * Decoding Capability Register
   */
++<<<<<<< HEAD:include/linux/intel-iommu.h
 +#define cap_5lp_support(c)	(((c) >> 60) & 1)
++=======
+ #define cap_esrtps(c)		(((c) >> 63) & 1)
+ #define cap_esirtps(c)		(((c) >> 62) & 1)
+ #define cap_fl5lp_support(c)	(((c) >> 60) & 1)
++>>>>>>> 6ad931a232e7 (iommu/vt-d: Avoid unnecessary global DMA cache invalidation):drivers/iommu/intel/iommu.h
  #define cap_pi_support(c)	(((c) >> 59) & 1)
  #define cap_fl1gp_support(c)	(((c) >> 56) & 1)
  #define cap_read_drain(c)	(((c) >> 55) & 1)
diff --git a/drivers/iommu/intel/iommu.c b/drivers/iommu/intel/iommu.c
index 5f174639e11b..860a55245dd5 100644
--- a/drivers/iommu/intel/iommu.c
+++ b/drivers/iommu/intel/iommu.c
@@ -1427,6 +1427,13 @@ static void iommu_set_root_entry(struct intel_iommu *iommu)
 
 	raw_spin_unlock_irqrestore(&iommu->register_lock, flag);
 
+	/*
+	 * Hardware invalidates all DMA remapping hardware translation
+	 * caches as part of SRTP flow.
+	 */
+	if (cap_esrtps(iommu->cap))
+		return;
+
 	iommu->flush.flush_context(iommu, 0, 0, 0, DMA_CCMD_GLOBAL_INVL);
 	if (sm_supported(iommu))
 		qi_flush_pasid_cache(iommu, 0, QI_PC_GLOBAL, 0);
* Unmerged path include/linux/intel-iommu.h
