xfs: document the XFS_ALLOC_AGFL_RESERVE constant

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-492.el8
commit-author Darrick J. Wong <djwong@kernel.org>
commit 93defd5a15dd74791532692cc59be3a1aaa045fe
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-492.el8/93defd5a.failed

Currently, we use this undocumented macro to encode the minimum number
of blocks needed to replenish a completely empty AGFL when an AG is
nearly full.  This has lead to confusion on the part of the maintainers,
so let's document what the value actually means, and move it to
xfs_alloc.c since it's not used outside of that module.

	Signed-off-by: Darrick J. Wong <djwong@kernel.org>
	Reviewed-by: Dave Chinner <dchinner@redhat.com>
(cherry picked from commit 93defd5a15dd74791532692cc59be3a1aaa045fe)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/xfs/libxfs/xfs_alloc.c
diff --cc fs/xfs/libxfs/xfs_alloc.c
index 6929157d8d6e,b52ed339727f..000000000000
--- a/fs/xfs/libxfs/xfs_alloc.c
+++ b/fs/xfs/libxfs/xfs_alloc.c
@@@ -124,13 -142,13 +142,19 @@@ xfs_alloc_ag_max_usable
  	unsigned int		blocks;
  
  	blocks = XFS_BB_TO_FSB(mp, XFS_FSS_TO_BB(mp, 4)); /* ag headers */
- 	blocks += XFS_ALLOC_AGFL_RESERVE;
+ 	blocks += XFS_ALLOCBT_AGFL_RESERVE;
  	blocks += 3;			/* AGF, AGI btree root blocks */
 -	if (xfs_has_finobt(mp))
 +	if (xfs_sb_version_hasfinobt(&mp->m_sb))
  		blocks++;		/* finobt root block */
++<<<<<<< HEAD
 +	if (xfs_sb_version_hasrmapbt(&mp->m_sb))
 +		blocks++; 		/* rmap root block */
 +	if (xfs_sb_version_hasreflink(&mp->m_sb))
++=======
+ 	if (xfs_has_rmapbt(mp))
+ 		blocks++;		/* rmap root block */
+ 	if (xfs_has_reflink(mp))
++>>>>>>> 93defd5a15dd (xfs: document the XFS_ALLOC_AGFL_RESERVE constant)
  		blocks++;		/* refcount root block */
  
  	return mp->m_sb.sb_agblocks - blocks;
* Unmerged path fs/xfs/libxfs/xfs_alloc.c
diff --git a/fs/xfs/libxfs/xfs_alloc.h b/fs/xfs/libxfs/xfs_alloc.h
index e30900b6f8ba..8f05e92ddf79 100644
--- a/fs/xfs/libxfs/xfs_alloc.h
+++ b/fs/xfs/libxfs/xfs_alloc.h
@@ -88,7 +88,6 @@ typedef struct xfs_alloc_arg {
 #define XFS_ALLOC_NOBUSY		(1 << 2)/* Busy extents not allowed */
 
 /* freespace limit calculations */
-#define XFS_ALLOC_AGFL_RESERVE	4
 unsigned int xfs_alloc_set_aside(struct xfs_mount *mp);
 unsigned int xfs_alloc_ag_max_usable(struct xfs_mount *mp);
 
