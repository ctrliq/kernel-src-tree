iommu/vt-d: Fix buggy QAT device mask

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-492.el8
commit-author Jacob Pan <jacob.jun.pan@linux.intel.com>
commit 81c95fbaebfa5990c3c786c8c3e87426a33106fe
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-492.el8/81c95fba.failed

Impacted QAT device IDs that need extra dtlb flush quirk is ranging
from 0x4940 to 0x4943. After bitwise AND device ID with 0xfffc the
result should be 0x4940 instead of 0x494c to identify these devices.

Fixes: e65a6897be5e ("iommu/vt-d: Add a fix for devices need extra dtlb flush")
	Reported-by: Raghunathan Srinivasan <raghunathan.srinivasan@intel.com>
	Signed-off-by: Ashok Raj <ashok.raj@intel.com>
	Signed-off-by: Jacob Pan <jacob.jun.pan@linux.intel.com>
Link: https://lore.kernel.org/r/20221203005610.2927487-1-jacob.jun.pan@linux.intel.com
	Signed-off-by: Lu Baolu <baolu.lu@linux.intel.com>
	Signed-off-by: Joerg Roedel <jroedel@suse.de>
(cherry picked from commit 81c95fbaebfa5990c3c786c8c3e87426a33106fe)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/iommu/intel/iommu.c
diff --cc drivers/iommu/intel/iommu.c
index 5f174639e11b,644ca49e8cf8..000000000000
--- a/drivers/iommu/intel/iommu.c
+++ b/drivers/iommu/intel/iommu.c
@@@ -1576,23 -1391,30 +1576,45 @@@ static void domain_update_iotlb(struct 
  			has_iotlb_device = true;
  			break;
  		}
 +
 +	if (!has_iotlb_device) {
 +		struct subdev_domain_info *sinfo;
 +
 +		list_for_each_entry(sinfo, &domain->subdevices, link_domain) {
 +			info = get_domain_info(sinfo->pdev);
 +			if (info && info->ats_enabled) {
 +				has_iotlb_device = true;
 +				break;
 +			}
 +		}
  	}
 +
  	domain->has_iotlb_device = has_iotlb_device;
 -	spin_unlock_irqrestore(&domain->lock, flags);
  }
  
++<<<<<<< HEAD
 +static void iommu_enable_dev_iotlb(struct device_domain_info *info)
++=======
+ /*
+  * The extra devTLB flush quirk impacts those QAT devices with PCI device
+  * IDs ranging from 0x4940 to 0x4943. It is exempted from risky_device()
+  * check because it applies only to the built-in QAT devices and it doesn't
+  * grant additional privileges.
+  */
+ #define BUGGY_QAT_DEVID_MASK 0x4940
+ static bool dev_needs_extra_dtlb_flush(struct pci_dev *pdev)
+ {
+ 	if (pdev->vendor != PCI_VENDOR_ID_INTEL)
+ 		return false;
+ 
+ 	if ((pdev->device & 0xfffc) != BUGGY_QAT_DEVID_MASK)
+ 		return false;
+ 
+ 	return true;
+ }
+ 
+ static void iommu_enable_pci_caps(struct device_domain_info *info)
++>>>>>>> 81c95fbaebfa (iommu/vt-d: Fix buggy QAT device mask)
  {
  	struct pci_dev *pdev;
  
* Unmerged path drivers/iommu/intel/iommu.c
