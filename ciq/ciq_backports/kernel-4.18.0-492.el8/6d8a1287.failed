iomap: switch iomap_bmap to use iomap_iter

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-492.el8
commit-author Christoph Hellwig <hch@lst.de>
commit 6d8a1287a48909dbf542470aa2ca1ef7ceab3fc1
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-492.el8/6d8a1287.failed

Rewrite the ->bmap implementation based on iomap_iter.

	Signed-off-by: Christoph Hellwig <hch@lst.de>
[djwong: restructure the loop to make its behavior a little clearer]
	Reviewed-by: Darrick J. Wong <djwong@kernel.org>
	Signed-off-by: Darrick J. Wong <djwong@kernel.org>
	Reviewed-by: Dave Chinner <dchinner@redhat.com>
(cherry picked from commit 6d8a1287a48909dbf542470aa2ca1ef7ceab3fc1)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/iomap/fiemap.c
diff --cc fs/iomap/fiemap.c
index 7f843772f7dc,66cf267c68ae..000000000000
--- a/fs/iomap/fiemap.c
+++ b/fs/iomap/fiemap.c
@@@ -109,22 -92,6 +109,25 @@@ int iomap_fiemap(struct inode *inode, s
  }
  EXPORT_SYMBOL_GPL(iomap_fiemap);
  
++<<<<<<< HEAD
 +static loff_t
 +iomap_bmap_actor(struct inode *inode, loff_t pos, loff_t length,
 +		void *data, struct iomap *iomap, struct iomap *srcmap)
 +{
 +	sector_t *bno = data, addr;
 +
 +	if (iomap->type == IOMAP_MAPPED) {
 +		addr = (pos - iomap->offset + iomap->addr) >> inode->i_blkbits;
 +		if (addr > INT_MAX)
 +			WARN(1, "would truncate bmap result\n");
 +		else
 +			*bno = addr;
 +	}
 +	return 0;
 +}
 +
++=======
++>>>>>>> 6d8a1287a489 (iomap: switch iomap_bmap to use iomap_iter)
  /* legacy ->bmap interface.  0 is the error return (!) */
  sector_t
  iomap_bmap(struct address_space *mapping, sector_t bno,
* Unmerged path fs/iomap/fiemap.c
