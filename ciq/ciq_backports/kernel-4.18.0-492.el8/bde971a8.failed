KVM: arm64: nvhe: Fix build with profile optimization

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-492.el8
commit-author Denis Nikitin <denik@chromium.org>
commit bde971a83bbff78561458ded236605a365411b87
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-492.el8/bde971a8.failed

Kernel build with clang and KCFLAGS=-fprofile-sample-use=<profile> fails with:

error: arch/arm64/kvm/hyp/nvhe/kvm_nvhe.tmp.o: Unexpected SHT_REL
section ".rel.llvm.call-graph-profile"

Starting from 13.0.0 llvm can generate SHT_REL section, see
https://reviews.llvm.org/rGca3bdb57fa1ac98b711a735de048c12b5fdd8086.
gen-hyprel does not support SHT_REL relocation section.

Filter out profile use flags to fix the build with profile optimization.

	Signed-off-by: Denis Nikitin <denik@chromium.org>
	Signed-off-by: Marc Zyngier <maz@kernel.org>
Link: https://lore.kernel.org/r/20221014184532.3153551-1-denik@chromium.org
(cherry picked from commit bde971a83bbff78561458ded236605a365411b87)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/arm64/kvm/hyp/nvhe/Makefile
diff --cc arch/arm64/kvm/hyp/nvhe/Makefile
index aef76487edc2,be0a2bc3e20d..000000000000
--- a/arch/arm64/kvm/hyp/nvhe/Makefile
+++ b/arch/arm64/kvm/hyp/nvhe/Makefile
@@@ -3,51 -3,99 +3,61 @@@
  # Makefile for Kernel-based Virtual Machine module, HYP/nVHE part
  #
  
 -asflags-y := -D__KVM_NVHE_HYPERVISOR__ -D__DISABLE_EXPORTS
 +asflags-y := -D__KVM_NVHE_HYPERVISOR__
 +ccflags-y := -D__KVM_NVHE_HYPERVISOR__
  
 -# Tracepoint and MMIO logging symbols should not be visible at nVHE KVM as
 -# there is no way to execute them and any such MMIO access from nVHE KVM
 -# will explode instantly (Words of Marc Zyngier). So introduce a generic flag
 -# __DISABLE_TRACE_MMIO__ to disable MMIO tracing for nVHE KVM.
 -ccflags-y := -D__KVM_NVHE_HYPERVISOR__ -D__DISABLE_EXPORTS -D__DISABLE_TRACE_MMIO__
 -ccflags-y += -fno-stack-protector	\
 -	     -DDISABLE_BRANCH_PROFILING	\
 -	     $(DISABLE_STACKLEAK_PLUGIN)
 +obj-y := timer-sr.o sysreg-sr.o debug-sr.o switch.o tlb.o hyp-init.o
 +obj-y += ../vgic-v3-sr.o ../aarch32.o ../vgic-v2-cpuif-proxy.o ../entry.o \
 +	 ../fpsimd.o ../hyp-entry.o
  
 -hostprogs := gen-hyprel
 -HOST_EXTRACFLAGS += -I$(objtree)/include
 +obj-y := $(patsubst %.o,%.hyp.o,$(obj-y))
 +extra-y := $(patsubst %.hyp.o,%.hyp.tmp.o,$(obj-y))
  
 -lib-objs := clear_page.o copy_page.o memcpy.o memset.o
 -lib-objs := $(addprefix ../../../lib/, $(lib-objs))
 -
 -hyp-obj-y := timer-sr.o sysreg-sr.o debug-sr.o switch.o tlb.o hyp-init.o host.o \
 -	 hyp-main.o hyp-smp.o psci-relay.o early_alloc.o page_alloc.o \
 -	 cache.o setup.o mm.o mem_protect.o sys_regs.o pkvm.o stacktrace.o
 -hyp-obj-y += ../vgic-v3-sr.o ../aarch32.o ../vgic-v2-cpuif-proxy.o ../entry.o \
 -	 ../fpsimd.o ../hyp-entry.o ../exception.o ../pgtable.o
 -hyp-obj-$(CONFIG_DEBUG_LIST) += list_debug.o
 -hyp-obj-y += $(lib-objs)
 -
 -##
 -## Build rules for compiling nVHE hyp code
 -## Output of this folder is `kvm_nvhe.o`, a partially linked object
 -## file containing all nVHE hyp code and data.
 -##
 -
 -hyp-obj := $(patsubst %.o,%.nvhe.o,$(hyp-obj-y))
 -obj-y := kvm_nvhe.o
 -targets += $(hyp-obj) kvm_nvhe.tmp.o kvm_nvhe.rel.o hyp.lds hyp-reloc.S hyp-reloc.o
 -
 -# 1) Compile all source files to `.nvhe.o` object files. The file extension
 -#    avoids file name clashes for files shared with VHE.
 -$(obj)/%.nvhe.o: $(src)/%.c FORCE
 +$(obj)/%.hyp.tmp.o: $(src)/%.c FORCE
  	$(call if_changed_rule,cc_o_c)
 -$(obj)/%.nvhe.o: $(src)/%.S FORCE
 +$(obj)/%.hyp.tmp.o: $(src)/%.S FORCE
  	$(call if_changed_rule,as_o_S)
 -
 -# 2) Compile linker script.
 -$(obj)/hyp.lds: $(src)/hyp.lds.S FORCE
 -	$(call if_changed_dep,cpp_lds_S)
 -
 -# 3) Partially link all '.nvhe.o' files and apply the linker script.
 -#    Prefixes names of ELF sections with '.hyp', eg. '.hyp.text'.
 -#    Note: The following rule assumes that the 'ld' rule puts LDFLAGS before
 -#          the list of dependencies to form '-T $(obj)/hyp.lds'. This is to
 -#          keep the dependency on the target while avoiding an error from
 -#          GNU ld if the linker script is passed to it twice.
 -LDFLAGS_kvm_nvhe.tmp.o := -r -T
 -$(obj)/kvm_nvhe.tmp.o: $(obj)/hyp.lds $(addprefix $(obj)/,$(hyp-obj)) FORCE
 -	$(call if_changed,ld)
 -
 -# 4) Generate list of hyp code/data positions that need to be relocated at
 -#    runtime. Because the hypervisor is part of the kernel binary, relocations
 -#    produce a kernel VA. We enumerate relocations targeting hyp at build time
 -#    and convert the kernel VAs at those positions to hyp VAs.
 -$(obj)/hyp-reloc.S: $(obj)/kvm_nvhe.tmp.o $(obj)/gen-hyprel FORCE
 -	$(call if_changed,hyprel)
 -
 -# 5) Compile hyp-reloc.S and link it into the existing partially linked object.
 -#    The object file now contains a section with pointers to hyp positions that
 -#    will contain kernel VAs at runtime. These pointers have relocations on them
 -#    so that they get updated as the hyp object is linked into `vmlinux`.
 -LDFLAGS_kvm_nvhe.rel.o := -r
 -$(obj)/kvm_nvhe.rel.o: $(obj)/kvm_nvhe.tmp.o $(obj)/hyp-reloc.o FORCE
 -	$(call if_changed,ld)
 -
 -# 6) Produce the final 'kvm_nvhe.o', ready to be linked into 'vmlinux'.
 -#    Prefixes names of ELF symbols with '__kvm_nvhe_'.
 -$(obj)/kvm_nvhe.o: $(obj)/kvm_nvhe.rel.o FORCE
 +$(obj)/%.hyp.o: $(obj)/%.hyp.tmp.o FORCE
  	$(call if_changed,hypcopy)
  
 -# The HYPREL command calls `gen-hyprel` to generate an assembly file with
 -# a list of relocations targeting hyp code/data.
 -quiet_cmd_hyprel = HYPREL  $@
 -      cmd_hyprel = $(obj)/gen-hyprel $< > $@
 +# Disable reordering functions by GCC (enabled at -O2).
 +# This pass puts functions into '.text.*' sections to aid the linker
 +# in optimizing ELF layout. See HYPCOPY comment below for more info.
 +ccflags-y += $(call cc-option,-fno-reorder-functions)
  
  # The HYPCOPY command uses `objcopy` to prefix all ELF symbol names
 -# to avoid clashes with VHE code/data.
 +# and relevant ELF section names to avoid clashes with VHE code/data.
 +#
 +# Hyp code is assumed to be in the '.text' section of the input object
 +# files (with the exception of specialized sections such as
 +# '.hyp.idmap.text'). This assumption may be broken by a compiler that
 +# divides code into sections like '.text.unlikely' so as to optimize
 +# ELF layout. HYPCOPY checks that no such sections exist in the input
 +# using `objdump`, otherwise they would be linked together with other
 +# kernel code and not memory-mapped correctly at runtime.
  quiet_cmd_hypcopy = HYPCOPY $@
 -      cmd_hypcopy = $(OBJCOPY) --prefix-symbols=__kvm_nvhe_ $< $@
 -
 +      cmd_hypcopy =							\
 +	if $(OBJDUMP) -h $< | grep -F '.text.'; then			\
 +		echo "$@: function reordering not supported in nVHE hyp code" >&2; \
 +		/bin/false;						\
 +	fi;								\
 +	$(OBJCOPY) --prefix-symbols=__kvm_nvhe_				\
 +		   --rename-section=.text=.hyp.text			\
 +		   $< $@
 +
++<<<<<<< HEAD
 +# Remove ftrace and Shadow Call Stack CFLAGS.
 +# This is equivalent to the 'notrace' and '__noscs' annotations.
 +KBUILD_CFLAGS := $(filter-out $(CC_FLAGS_FTRACE) $(CC_FLAGS_SCS), $(KBUILD_CFLAGS))
++=======
+ # Remove ftrace, Shadow Call Stack, and CFI CFLAGS.
+ # This is equivalent to the 'notrace', '__noscs', and '__nocfi' annotations.
+ KBUILD_CFLAGS := $(filter-out $(CC_FLAGS_FTRACE) $(CC_FLAGS_SCS) $(CC_FLAGS_CFI), $(KBUILD_CFLAGS))
+ # Starting from 13.0.0 llvm emits SHT_REL section '.llvm.call-graph-profile'
+ # when profile optimization is applied. gen-hyprel does not support SHT_REL and
+ # causes a build failure. Remove profile optimization flags.
+ KBUILD_CFLAGS := $(filter-out -fprofile-sample-use=% -fprofile-use=%, $(KBUILD_CFLAGS))
++>>>>>>> bde971a83bbf (KVM: arm64: nvhe: Fix build with profile optimization)
  
  # KVM nVHE code is run at a different exception code with a different map, so
  # compiler instrumentation that inserts callbacks or checks into the code may
* Unmerged path arch/arm64/kvm/hyp/nvhe/Makefile
