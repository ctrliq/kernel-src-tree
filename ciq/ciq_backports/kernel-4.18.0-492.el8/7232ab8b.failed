iommu/vt-d: Add IOMMU perfmon support

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-492.el8
commit-author Kan Liang <kan.liang@linux.intel.com>
commit 7232ab8b89e9ea32f07370643635a13641ce9c3c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-492.el8/7232ab8b.failed

Implement the IOMMU performance monitor capability, which supports the
collection of information about key events occurring during operation of
the remapping hardware, to aid performance tuning and debug.

The IOMMU perfmon support is implemented as part of the IOMMU driver and
interfaces with the Linux perf subsystem.

The IOMMU PMU has the following unique features compared with the other
PMUs.
- Support counting. Not support sampling.
- Does not support per-thread counting. The scope is system-wide.
- Support per-counter capability register. The event constraints can be
  enumerated.
- The available event and event group can also be enumerated.
- Extra Enhanced Commands are introduced to control the counters.

Add a new variable, struct iommu_pmu *pmu, to in the struct intel_iommu
to track the PMU related information.

Add iommu_pmu_register() and iommu_pmu_unregister() to register and
unregister a IOMMU PMU. The register function setup the IOMMU PMU ops
and invoke the standard perf_pmu_register() interface to register a PMU
in the perf subsystem. This patch only exposes the functions. The
following patch will enable them in the IOMMU driver.

The IOMMU PMUs can be found under /sys/bus/event_source/devices/dmar*

The available filters and event format can be found at the format folder

 $ ls /sys/bus/event_source/devices/dmar1/format/
 event  event_group  filter_ats  filter_ats_en  filter_page_table
 filter_page_table_en

The supported events can be found at the events folder

 $ ls /sys/bus/event_source/devices/dmar1/events/
 ats_blocked        fs_nonleaf_hit           int_cache_hit_posted
 iommu_mem_blocked  iotlb_hit        pasid_cache_lookup  ss_nonleaf_hit
 ctxt_cache_hit     fs_nonleaf_lookup        int_cache_lookup
 iommu_mrds         iotlb_lookup     pg_req_posted    ss_nonleaf_lookup
 ctxt_cache_lookup  int_cache_hit_nonposted  iommu_clocks
 iommu_requests     pasid_cache_hit  pw_occupancy

The command below illustrates filter usage with a simple example.

 $ perf stat -e dmar1/iommu_requests,filter_ats_en=0x1,filter_ats=0x1/
   -a sleep 1

 Performance counter stats for 'system wide':

   368,947      dmar1/iommu_requests,filter_ats_en=0x1,filter_ats=0x1/

 1.002592074 seconds time elapsed

	Signed-off-by: Kan Liang <kan.liang@linux.intel.com>
Link: https://lore.kernel.org/r/20230128200428.1459118-5-kan.liang@linux.intel.com
	Signed-off-by: Lu Baolu <baolu.lu@linux.intel.com>
	Signed-off-by: Joerg Roedel <jroedel@suse.de>
(cherry picked from commit 7232ab8b89e9ea32f07370643635a13641ce9c3c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/iommu/intel/perfmon.c
#	drivers/iommu/intel/perfmon.h
#	include/linux/intel-iommu.h
diff --cc include/linux/intel-iommu.h
index b9494fd422a2,d56b3c386366..000000000000
--- a/include/linux/intel-iommu.h
+++ b/include/linux/intel-iommu.h
@@@ -33,6 -21,8 +33,11 @@@
  #include <linux/dmar.h>
  #include <linux/ioasid.h>
  #include <linux/bitfield.h>
++<<<<<<< HEAD:include/linux/intel-iommu.h
++=======
+ #include <linux/xarray.h>
+ #include <linux/perf_event.h>
++>>>>>>> 7232ab8b89e9 (iommu/vt-d: Add IOMMU perfmon support):drivers/iommu/intel/iommu.h
  
  #include <asm/cacheflush.h>
  #include <asm/iommu.h>
@@@ -582,6 -607,36 +587,39 @@@ struct dmar_domain 
  					   iommu core */
  };
  
++<<<<<<< HEAD:include/linux/intel-iommu.h
++=======
+ /*
+  * In theory, the VT-d 4.0 spec can support up to 2 ^ 16 counters.
+  * But in practice, there are only 14 counters for the existing
+  * platform. Setting the max number of counters to 64 should be good
+  * enough for a long time. Also, supporting more than 64 counters
+  * requires more extras, e.g., extra freeze and overflow registers,
+  * which is not necessary for now.
+  */
+ #define IOMMU_PMU_IDX_MAX		64
+ 
+ struct iommu_pmu {
+ 	struct intel_iommu	*iommu;
+ 	u32			num_cntr;	/* Number of counters */
+ 	u32			num_eg;		/* Number of event group */
+ 	u32			cntr_width;	/* Counter width */
+ 	u32			cntr_stride;	/* Counter Stride */
+ 	u32			filter;		/* Bitmask of filter support */
+ 	void __iomem		*base;		/* the PerfMon base address */
+ 	void __iomem		*cfg_reg;	/* counter configuration base address */
+ 	void __iomem		*cntr_reg;	/* counter 0 address*/
+ 	void __iomem		*overflow;	/* overflow status register */
+ 
+ 	u64			*evcap;		/* Indicates all supported events */
+ 	u32			**cntr_evcap;	/* Supported events of each counter. */
+ 
+ 	struct pmu		pmu;
+ 	DECLARE_BITMAP(used_mask, IOMMU_PMU_IDX_MAX);
+ 	struct perf_event	*event_list[IOMMU_PMU_IDX_MAX];
+ };
+ 
++>>>>>>> 7232ab8b89e9 (iommu/vt-d: Add IOMMU perfmon support):drivers/iommu/intel/iommu.h
  struct intel_iommu {
  	void __iomem	*reg; /* Pointer to hardware regs, virtual addr */
  	u64 		reg_phys; /* physical address of hw register set */
* Unmerged path drivers/iommu/intel/perfmon.c
* Unmerged path drivers/iommu/intel/perfmon.h
diff --git a/Documentation/ABI/testing/sysfs-bus-event_source-devices-iommu b/Documentation/ABI/testing/sysfs-bus-event_source-devices-iommu
new file mode 100644
index 000000000000..988210a0e8ce
--- /dev/null
+++ b/Documentation/ABI/testing/sysfs-bus-event_source-devices-iommu
@@ -0,0 +1,29 @@
+What:		/sys/bus/event_source/devices/dmar*/format
+Date:		Jan 2023
+KernelVersion:  6.3
+Contact:	Kan Liang <kan.liang@linux.intel.com>
+Description:	Read-only.  Attribute group to describe the magic bits
+		that go into perf_event_attr.config,
+		perf_event_attr.config1 or perf_event_attr.config2 for
+		the IOMMU pmu.  (See also
+		ABI/testing/sysfs-bus-event_source-devices-format).
+
+		Each attribute in this group defines a bit range in
+		perf_event_attr.config, perf_event_attr.config1,
+		or perf_event_attr.config2. All supported attributes
+		are listed below (See the VT-d Spec 4.0 for possible
+		attribute values)::
+
+		    event		= "config:0-27"   - event ID
+		    event_group		= "config:28-31"  - event group ID
+
+		    filter_requester_en	= "config1:0"     - Enable Requester ID filter
+		    filter_domain_en	= "config1:1"     - Enable Domain ID filter
+		    filter_pasid_en	= "config1:2"     - Enable PASID filter
+		    filter_ats_en	= "config1:3"     - Enable Address Type filter
+		    filter_page_table_en= "config1:4"     - Enable Page Table Level filter
+		    filter_requester_id	= "config1:16-31" - Requester ID filter
+		    filter_domain	= "config1:32-47" - Domain ID filter
+		    filter_pasid	= "config2:0-21"  - PASID filter
+		    filter_ats		= "config2:24-28" - Address Type filter
+		    filter_page_table	= "config2:32-36" - Page Table Level filter
* Unmerged path drivers/iommu/intel/perfmon.c
* Unmerged path drivers/iommu/intel/perfmon.h
* Unmerged path include/linux/intel-iommu.h
