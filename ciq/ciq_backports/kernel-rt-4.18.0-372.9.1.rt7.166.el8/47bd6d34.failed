xfs: expose the blockgc workqueue knobs publicly

jira LE-1907
Rebuild_History Non-Buildable kernel-rt-4.18.0-372.9.1.rt7.166.el8
commit-author Darrick J. Wong <djwong@kernel.org>
commit 47bd6d3457fb96d287278027aed8a78d14f1d32d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-rt-4.18.0-372.9.1.rt7.166.el8/47bd6d34.failed

Expose the workqueue sysfs knobs for the speculative preallocation gc
workers on all kernels, and update the sysadmin information.

	Signed-off-by: Darrick J. Wong <djwong@kernel.org>
	Reviewed-by: Christoph Hellwig <hch@lst.de>
(cherry picked from commit 47bd6d3457fb96d287278027aed8a78d14f1d32d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	Documentation/filesystems/xfs.txt
diff --cc Documentation/filesystems/xfs.txt
index 20c6aa2c7752,d2064a52811b..000000000000
--- a/Documentation/filesystems/xfs.txt
+++ b/Documentation/filesystems/xfs.txt
@@@ -468,3 -495,44 +468,47 @@@ the class and error context. For exampl
  "metadata/ENODEV" are "0" rather than "-1" so that this error handler defaults
  to "fail immediately" behaviour. This is done because ENODEV is a fatal,
  unrecoverable error no matter how many times the metadata IO is retried.
++<<<<<<< HEAD:Documentation/filesystems/xfs.txt
++=======
+ 
+ Workqueue Concurrency
+ =====================
+ 
+ XFS uses kernel workqueues to parallelize metadata update processes.  This
+ enables it to take advantage of storage hardware that can service many IO
+ operations simultaneously.  This interface exposes internal implementation
+ details of XFS, and as such is explicitly not part of any userspace API/ABI
+ guarantee the kernel may give userspace.  These are undocumented features of
+ the generic workqueue implementation XFS uses for concurrency, and they are
+ provided here purely for diagnostic and tuning purposes and may change at any
+ time in the future.
+ 
+ The control knobs for a filesystem's workqueues are organized by task at hand
+ and the short name of the data device.  They all can be found in:
+ 
+   /sys/bus/workqueue/devices/${task}!${device}
+ 
+ ================  ===========
+   Task            Description
+ ================  ===========
+   xfs_iwalk-$pid  Inode scans of the entire filesystem. Currently limited to
+                   mount time quotacheck.
+   xfs-blockgc     Background garbage collection of disk space that have been
+                   speculatively allocated beyond EOF or for staging copy on
+                   write operations.
+ ================  ===========
+ 
+ For example, the knobs for the quotacheck workqueue for /dev/nvme0n1 would be
+ found in /sys/bus/workqueue/devices/xfs_iwalk-1111!nvme0n1/.
+ 
+ The interesting knobs for XFS workqueues are as follows:
+ 
+ ============     ===========
+   Knob           Description
+ ============     ===========
+   max_active     Maximum number of background threads that can be started to
+                  run the work.
+   cpumask        CPUs upon which the threads are allowed to run.
+   nice           Relative priority of scheduling the threads.  These are the
+                  same nice levels that can be applied to userspace processes.
++>>>>>>> 47bd6d3457fb (xfs: expose the blockgc workqueue knobs publicly):Documentation/admin-guide/xfs.rst
* Unmerged path Documentation/filesystems/xfs.txt
diff --git a/fs/xfs/xfs_super.c b/fs/xfs/xfs_super.c
index 9b8571c5179b..cb55e77ebc47 100644
--- a/fs/xfs/xfs_super.c
+++ b/fs/xfs/xfs_super.c
@@ -521,7 +521,7 @@ xfs_init_mount_workqueues(
 		goto out_destroy_cil;
 
 	mp->m_blockgc_workqueue = alloc_workqueue("xfs-blockgc/%s",
-			XFS_WQFLAGS(WQ_UNBOUND | WQ_FREEZABLE | WQ_MEM_RECLAIM),
+			WQ_SYSFS | WQ_UNBOUND | WQ_FREEZABLE | WQ_MEM_RECLAIM,
 			0, mp->m_super->s_id);
 	if (!mp->m_blockgc_workqueue)
 		goto out_destroy_reclaim;
