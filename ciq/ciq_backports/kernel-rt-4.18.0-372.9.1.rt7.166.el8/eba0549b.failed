xfs: don't generate selinux audit messages for capability testing

jira LE-1907
Rebuild_History Non-Buildable kernel-rt-4.18.0-372.9.1.rt7.166.el8
commit-author Darrick J. Wong <djwong@kernel.org>
commit eba0549bc7d100691c13384b774346b8aa9cf9a9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-rt-4.18.0-372.9.1.rt7.166.el8/eba0549b.failed

There are a few places where we test the current process' capability set
to decide if we're going to be more or less generous with resource
acquisition for a system call.  If the process doesn't have the
capability, we can continue the call, albeit in a degraded mode.

These are /not/ the actual security decisions, so it's not proper to use
capable(), which (in certain selinux setups) causes audit messages to
get logged.  Switch them to has_capability_noaudit.

Fixes: 7317a03df703f ("xfs: refactor inode ownership change transaction/inode/quota allocation idiom")
Fixes: ea9a46e1c4925 ("xfs: only return detailed fsmap info if the caller has CAP_SYS_ADMIN")
	Signed-off-by: Darrick J. Wong <djwong@kernel.org>
	Cc: Dave Chinner <david@fromorbit.com>
	Reviewed-by: Ondrej Mosnacek <omosnace@redhat.com>
	Acked-by: Serge Hallyn <serge@hallyn.com>
	Reviewed-by: Eric Sandeen <sandeen@redhat.com>
(cherry picked from commit eba0549bc7d100691c13384b774346b8aa9cf9a9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/xfs/xfs_fsmap.c
diff --cc fs/xfs/xfs_fsmap.c
index 9ce5e7d5bf8f,10e1cb71439e..000000000000
--- a/fs/xfs/xfs_fsmap.c
+++ b/fs/xfs/xfs_fsmap.c
@@@ -842,8 -864,8 +842,13 @@@ xfs_getfsmap
  	    !xfs_getfsmap_is_valid_device(mp, &head->fmh_keys[1]))
  		return -EINVAL;
  
++<<<<<<< HEAD
 +	use_rmap = capable(CAP_SYS_ADMIN) &&
 +		   xfs_sb_version_hasrmapbt(&mp->m_sb);
++=======
+ 	use_rmap = xfs_has_rmapbt(mp) &&
+ 		   has_capability_noaudit(current, CAP_SYS_ADMIN);
++>>>>>>> eba0549bc7d1 (xfs: don't generate selinux audit messages for capability testing)
  	head->fmh_entries = 0;
  
  	/* Set up our device handlers. */
* Unmerged path fs/xfs/xfs_fsmap.c
diff --git a/fs/xfs/xfs_ioctl.c b/fs/xfs/xfs_ioctl.c
index 93d7c8fa9768..9368b4995684 100644
--- a/fs/xfs/xfs_ioctl.c
+++ b/fs/xfs/xfs_ioctl.c
@@ -1290,7 +1290,7 @@ xfs_ioctl_setattr_get_trans(
 		goto out_error;
 
 	error = xfs_trans_alloc_ichange(ip, NULL, NULL, pdqp,
-			capable(CAP_FOWNER), &tp);
+			has_capability_noaudit(current, CAP_FOWNER), &tp);
 	if (error)
 		goto out_error;
 
diff --git a/fs/xfs/xfs_iops.c b/fs/xfs/xfs_iops.c
index 8489f9681ea7..339158765b79 100644
--- a/fs/xfs/xfs_iops.c
+++ b/fs/xfs/xfs_iops.c
@@ -700,7 +700,7 @@ xfs_setattr_nonsize(
 	}
 
 	error = xfs_trans_alloc_ichange(ip, udqp, gdqp, NULL,
-			capable(CAP_FOWNER), &tp);
+			has_capability_noaudit(current, CAP_FOWNER), &tp);
 	if (error)
 		goto out_dqrele;
 
diff --git a/kernel/capability.c b/kernel/capability.c
index 7718d7dcadc7..6c5c8c737fb3 100644
--- a/kernel/capability.c
+++ b/kernel/capability.c
@@ -362,6 +362,7 @@ bool has_capability_noaudit(struct task_struct *t, int cap)
 {
 	return has_ns_capability_noaudit(t, &init_user_ns, cap);
 }
+EXPORT_SYMBOL(has_capability_noaudit);
 
 static bool ns_capable_common(struct user_namespace *ns,
 			      int cap,
