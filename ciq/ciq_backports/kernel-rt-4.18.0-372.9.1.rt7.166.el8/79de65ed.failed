vdpa/mlx5: Report max device capabilities

jira LE-1907
Rebuild_History Non-Buildable kernel-rt-4.18.0-372.9.1.rt7.166.el8
commit-author Eli Cohen <elic@nvidia.com>
commit 79de65edf8891725616f4992cee5d5963900f07a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-rt-4.18.0-372.9.1.rt7.166.el8/79de65ed.failed

Configure max supported virtqueues and features on the management
device.
This info can be retrieved using:

$ vdpa mgmtdev show
auxiliary/mlx5_core.sf.1:
  supported_classes net
  max_supported_vqs 257
  dev_features CSUM GUEST_CSUM MTU HOST_TSO4 HOST_TSO6 STATUS CTRL_VQ MQ \
               CTRL_MAC_ADDR VERSION_1 ACCESS_PLATFORM

	Signed-off-by: Eli Cohen <elic@nvidia.com>
Link: https://lore.kernel.org/r/20220105114646.577224-12-elic@nvidia.com
	Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
	Reviewed-by: Si-Wei Liu<si-wei.liu@oracle.com>
(cherry picked from commit 79de65edf8891725616f4992cee5d5963900f07a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/vdpa/mlx5/net/mlx5_vnet.c
diff --cc drivers/vdpa/mlx5/net/mlx5_vnet.c
index c77f630333e1,d1ff65065fb1..000000000000
--- a/drivers/vdpa/mlx5/net/mlx5_vnet.c
+++ b/drivers/vdpa/mlx5/net/mlx5_vnet.c
@@@ -1863,22 -1866,29 +1863,33 @@@ static u64 mlx_to_vritio_features(u16 d
  	return result;
  }
  
++<<<<<<< HEAD
 +static u64 mlx5_vdpa_get_features(struct vdpa_device *vdev)
++=======
+ static u64 get_supported_features(struct mlx5_core_dev *mdev)
  {
- 	struct mlx5_vdpa_dev *mvdev = to_mvdev(vdev);
- 	struct mlx5_vdpa_net *ndev = to_mlx5_vdpa_ndev(mvdev);
+ 	u64 mlx_vdpa_features = 0;
  	u16 dev_features;
  
- 	dev_features = MLX5_CAP_DEV_VDPA_EMULATION(mvdev->mdev, device_features_bits_mask);
- 	ndev->mvdev.mlx_features |= mlx_to_vritio_features(dev_features);
- 	if (MLX5_CAP_DEV_VDPA_EMULATION(mvdev->mdev, virtio_version_1_0))
- 		ndev->mvdev.mlx_features |= BIT_ULL(VIRTIO_F_VERSION_1);
- 	ndev->mvdev.mlx_features |= BIT_ULL(VIRTIO_F_ACCESS_PLATFORM);
- 	ndev->mvdev.mlx_features |= BIT_ULL(VIRTIO_NET_F_CTRL_VQ);
- 	ndev->mvdev.mlx_features |= BIT_ULL(VIRTIO_NET_F_CTRL_MAC_ADDR);
- 	ndev->mvdev.mlx_features |= BIT_ULL(VIRTIO_NET_F_MQ);
- 	ndev->mvdev.mlx_features |= BIT_ULL(VIRTIO_NET_F_STATUS);
- 	ndev->mvdev.mlx_features |= BIT_ULL(VIRTIO_NET_F_MTU);
+ 	dev_features = MLX5_CAP_DEV_VDPA_EMULATION(mdev, device_features_bits_mask);
+ 	mlx_vdpa_features |= mlx_to_vritio_features(dev_features);
+ 	if (MLX5_CAP_DEV_VDPA_EMULATION(mdev, virtio_version_1_0))
+ 		mlx_vdpa_features |= BIT_ULL(VIRTIO_F_VERSION_1);
+ 	mlx_vdpa_features |= BIT_ULL(VIRTIO_F_ACCESS_PLATFORM);
+ 	mlx_vdpa_features |= BIT_ULL(VIRTIO_NET_F_CTRL_VQ);
+ 	mlx_vdpa_features |= BIT_ULL(VIRTIO_NET_F_CTRL_MAC_ADDR);
+ 	mlx_vdpa_features |= BIT_ULL(VIRTIO_NET_F_MQ);
+ 	mlx_vdpa_features |= BIT_ULL(VIRTIO_NET_F_STATUS);
+ 	mlx_vdpa_features |= BIT_ULL(VIRTIO_NET_F_MTU);
+ 
+ 	return mlx_vdpa_features;
+ }
+ 
+ static u64 mlx5_vdpa_get_device_features(struct vdpa_device *vdev)
++>>>>>>> 79de65edf889 (vdpa/mlx5: Report max device capabilities)
+ {
+ 	struct mlx5_vdpa_dev *mvdev = to_mvdev(vdev);
+ 	struct mlx5_vdpa_net *ndev = to_mlx5_vdpa_ndev(mvdev);
  
  	print_features(mvdev, ndev->mvdev.mlx_features, false);
  	return ndev->mvdev.mlx_features;
* Unmerged path drivers/vdpa/mlx5/net/mlx5_vnet.c
