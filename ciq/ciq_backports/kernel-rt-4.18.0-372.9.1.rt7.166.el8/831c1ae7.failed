PCI: hv: Make the code arch neutral by adding arch specific interfaces

jira LE-1907
Rebuild_History Non-Buildable kernel-rt-4.18.0-372.9.1.rt7.166.el8
commit-author Sunil Muthuswamy <sunilmut@microsoft.com>
commit 831c1ae725f7d2f8f858b0840692b48e75b49331
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-rt-4.18.0-372.9.1.rt7.166.el8/831c1ae7.failed

Encapsulate arch dependencies in Hyper-V vPCI through a set of
arch-dependent interfaces. Adding these arch specific interfaces will
allow for an implementation for other architectures, such as arm64.

There are no functional changes expected from this patch.

Link: https://lore.kernel.org/r/1641411156-31705-2-git-send-email-sunilmut@linux.microsoft.com
	Signed-off-by: Sunil Muthuswamy <sunilmut@microsoft.com>
	Signed-off-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
	Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
	Reviewed-by: Boqun Feng <boqun.feng@gmail.com>
	Reviewed-by: Marc Zyngier <maz@kernel.org>
	Reviewed-by: Michael Kelley <mikelley@microsoft.com>
(cherry picked from commit 831c1ae725f7d2f8f858b0840692b48e75b49331)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/include/asm/mshyperv.h
#	drivers/pci/controller/pci-hyperv.c
diff --cc arch/x86/include/asm/mshyperv.h
index 83a234a6d1d2,a1c3dceff8eb..000000000000
--- a/arch/x86/include/asm/mshyperv.h
+++ b/arch/x86/include/asm/mshyperv.h
@@@ -189,11 -169,54 +189,62 @@@ bool hv_vcpu_is_preempted(int vcpu)
  static inline void hv_apic_init(void) {}
  #endif
  
++<<<<<<< HEAD
 +static inline void hv_set_msi_entry_from_desc(union hv_msi_entry *msi_entry,
 +					      struct msi_desc *msi_desc)
 +{
 +	msi_entry->address.as_uint32 = msi_desc->msg.address_lo;
 +	msi_entry->data.as_uint32 = msi_desc->msg.data;
++=======
+ struct irq_domain *hv_create_pci_msi_domain(void);
+ 
+ int hv_map_ioapic_interrupt(int ioapic_id, bool level, int vcpu, int vector,
+ 		struct hv_interrupt_entry *entry);
+ int hv_unmap_ioapic_interrupt(int ioapic_id, struct hv_interrupt_entry *entry);
+ int hv_set_mem_host_visibility(unsigned long addr, int numpages, bool visible);
+ 
+ #ifdef CONFIG_AMD_MEM_ENCRYPT
+ void hv_ghcb_msr_write(u64 msr, u64 value);
+ void hv_ghcb_msr_read(u64 msr, u64 *value);
+ #else
+ static inline void hv_ghcb_msr_write(u64 msr, u64 value) {}
+ static inline void hv_ghcb_msr_read(u64 msr, u64 *value) {}
+ #endif
+ 
+ extern bool hv_isolation_type_snp(void);
+ 
+ static inline bool hv_is_synic_reg(unsigned int reg)
+ {
+ 	if ((reg >= HV_REGISTER_SCONTROL) &&
+ 	    (reg <= HV_REGISTER_SINT15))
+ 		return true;
+ 	return false;
+ }
+ 
+ static inline u64 hv_get_register(unsigned int reg)
+ {
+ 	u64 value;
+ 
+ 	if (hv_is_synic_reg(reg) && hv_isolation_type_snp())
+ 		hv_ghcb_msr_read(reg, &value);
+ 	else
+ 		rdmsrl(reg, value);
+ 	return value;
+ }
+ 
+ static inline void hv_set_register(unsigned int reg, u64 value)
+ {
+ 	if (hv_is_synic_reg(reg) && hv_isolation_type_snp()) {
+ 		hv_ghcb_msr_write(reg, value);
+ 
+ 		/* Write proxy bit via wrmsl instruction */
+ 		if (reg >= HV_REGISTER_SINT0 &&
+ 		    reg <= HV_REGISTER_SINT15)
+ 			wrmsrl(reg, value | 1 << 20);
+ 	} else {
+ 		wrmsrl(reg, value);
+ 	}
++>>>>>>> 831c1ae725f7 (PCI: hv: Make the code arch neutral by adding arch specific interfaces)
  }
  
  #else /* CONFIG_HYPERV */
diff --cc drivers/pci/controller/pci-hyperv.c
index 83688135b5a0,ead7d6cb6bf1..000000000000
--- a/drivers/pci/controller/pci-hyperv.c
+++ b/drivers/pci/controller/pci-hyperv.c
@@@ -1600,16 -1623,8 +1623,20 @@@ static struct irq_chip hv_msi_irq_chip 
  	.irq_unmask		= hv_irq_unmask,
  };
  
 +static irq_hw_number_t hv_msi_domain_ops_get_hwirq(struct msi_domain_info *info,
 +						   msi_alloc_info_t *arg)
 +{
 +	return arg->msi_hwirq;
 +}
 +
  static struct msi_domain_ops hv_msi_ops = {
++<<<<<<< HEAD
 +	.get_hwirq	= hv_msi_domain_ops_get_hwirq,
 +	.msi_prepare	= pci_msi_prepare,
 +	.set_desc	= pci_msi_set_desc,
++=======
+ 	.msi_prepare	= hv_msi_prepare,
++>>>>>>> 831c1ae725f7 (PCI: hv: Make the code arch neutral by adding arch specific interfaces)
  	.msi_free	= hv_msi_free,
  };
  
diff --git a/arch/x86/include/asm/hyperv-tlfs.h b/arch/x86/include/asm/hyperv-tlfs.h
index 07c046c2e3b8..9eb549543030 100644
--- a/arch/x86/include/asm/hyperv-tlfs.h
+++ b/arch/x86/include/asm/hyperv-tlfs.h
@@ -576,6 +576,39 @@ enum hv_interrupt_type {
 	HV_X64_INTERRUPT_TYPE_MAXIMUM           = 0x000A,
 };
 
+union hv_msi_address_register {
+	u32 as_uint32;
+	struct {
+		u32 reserved1:2;
+		u32 destination_mode:1;
+		u32 redirection_hint:1;
+		u32 reserved2:8;
+		u32 destination_id:8;
+		u32 msi_base:12;
+	};
+} __packed;
+
+union hv_msi_data_register {
+	u32 as_uint32;
+	struct {
+		u32 vector:8;
+		u32 delivery_mode:3;
+		u32 reserved1:3;
+		u32 level_assert:1;
+		u32 trigger_mode:1;
+		u32 reserved2:16;
+	};
+} __packed;
+
+/* HvRetargetDeviceInterrupt hypercall */
+union hv_msi_entry {
+	u64 as_uint64;
+	struct {
+		union hv_msi_address_register address;
+		union hv_msi_data_register data;
+	} __packed;
+};
+
 #include <asm-generic/hyperv-tlfs.h>
 
 #endif
* Unmerged path arch/x86/include/asm/mshyperv.h
* Unmerged path drivers/pci/controller/pci-hyperv.c
diff --git a/include/asm-generic/hyperv-tlfs.h b/include/asm-generic/hyperv-tlfs.h
index 56348a541c50..45cc0c3b8ed7 100644
--- a/include/asm-generic/hyperv-tlfs.h
+++ b/include/asm-generic/hyperv-tlfs.h
@@ -539,39 +539,6 @@ enum hv_interrupt_source {
 	HV_INTERRUPT_SOURCE_IOAPIC,
 };
 
-union hv_msi_address_register {
-	u32 as_uint32;
-	struct {
-		u32 reserved1:2;
-		u32 destination_mode:1;
-		u32 redirection_hint:1;
-		u32 reserved2:8;
-		u32 destination_id:8;
-		u32 msi_base:12;
-	};
-} __packed;
-
-union hv_msi_data_register {
-	u32 as_uint32;
-	struct {
-		u32 vector:8;
-		u32 delivery_mode:3;
-		u32 reserved1:3;
-		u32 level_assert:1;
-		u32 trigger_mode:1;
-		u32 reserved2:16;
-	};
-} __packed;
-
-/* HvRetargetDeviceInterrupt hypercall */
-union hv_msi_entry {
-	u64 as_uint64;
-	struct {
-		union hv_msi_address_register address;
-		union hv_msi_data_register data;
-	} __packed;
-};
-
 union hv_ioapic_rte {
 	u64 as_uint64;
 
