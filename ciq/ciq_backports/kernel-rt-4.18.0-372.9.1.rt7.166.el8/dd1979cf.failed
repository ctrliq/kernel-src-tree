net/mlx5e: Fix the presented RQ index in PTP stats

jira LE-1907
Rebuild_History Non-Buildable kernel-rt-4.18.0-372.9.1.rt7.166.el8
commit-author Lama Kayal <lkayal@nvidia.com>
commit dd1979cf3c710398a9eeba4853b908fe16426814
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-rt-4.18.0-372.9.1.rt7.166.el8/dd1979cf.failed

PTP-RQ counters title format contains PTP-RQ identifier, which is
mistakenly not passed to sprinft().
This leads to unexpected garbage values instead.
This patch fixes it.

Before applying the patch:
ethtool -S eth3 | grep ptp_rq
     ptp_rq15_packets: 0
     ptp_rq8_bytes: 0
     ptp_rq6_csum_complete: 0
     ptp_rq14_csum_complete_tail: 0
     ptp_rq3_csum_complete_tail_slow : 0
     ptp_rq9_csum_unnecessary: 0
     ptp_rq1_csum_unnecessary_inner: 0
     ptp_rq7_csum_none: 0
     ptp_rq10_xdp_drop: 0
     ptp_rq9_xdp_redirect: 0
     ptp_rq13_lro_packets: 0
     ptp_rq12_lro_bytes: 0
     ptp_rq10_ecn_mark: 0
     ptp_rq9_removed_vlan_packets: 0
     ptp_rq5_wqe_err: 0
     ptp_rq8_mpwqe_filler_cqes: 0
     ptp_rq2_mpwqe_filler_strides: 0
     ptp_rq5_oversize_pkts_sw_drop: 0
     ptp_rq6_buff_alloc_err: 0
     ptp_rq15_cqe_compress_blks: 0
     ptp_rq2_cqe_compress_pkts: 0
     ptp_rq2_cache_reuse: 0
     ptp_rq12_cache_full: 0
     ptp_rq11_cache_empty: 256
     ptp_rq12_cache_busy: 0
     ptp_rq11_cache_waive: 0
     ptp_rq12_congst_umr: 0
     ptp_rq11_arfs_err: 0
     ptp_rq9_recover: 0

After applying the patch:
ethtool -S eth3 | grep ptp_rq
     ptp_rq0_packets: 0
     ptp_rq0_bytes: 0
     ptp_rq0_csum_complete: 0
     ptp_rq0_csum_complete_tail: 0
     ptp_rq0_csum_complete_tail_slow : 0
     ptp_rq0_csum_unnecessary: 0
     ptp_rq0_csum_unnecessary_inner: 0
     ptp_rq0_csum_none: 0
     ptp_rq0_xdp_drop: 0
     ptp_rq0_xdp_redirect: 0
     ptp_rq0_lro_packets: 0
     ptp_rq0_lro_bytes: 0
     ptp_rq0_ecn_mark: 0
     ptp_rq0_removed_vlan_packets: 0
     ptp_rq0_wqe_err: 0
     ptp_rq0_mpwqe_filler_cqes: 0
     ptp_rq0_mpwqe_filler_strides: 0
     ptp_rq0_oversize_pkts_sw_drop: 0
     ptp_rq0_buff_alloc_err: 0
     ptp_rq0_cqe_compress_blks: 0
     ptp_rq0_cqe_compress_pkts: 0
     ptp_rq0_cache_reuse: 0
     ptp_rq0_cache_full: 0
     ptp_rq0_cache_empty: 256
     ptp_rq0_cache_busy: 0
     ptp_rq0_cache_waive: 0
     ptp_rq0_congst_umr: 0
     ptp_rq0_arfs_err: 0
     ptp_rq0_recover: 0

Fixes: a28359e922c6 ("net/mlx5e: Add PTP-RX statistics")
	Signed-off-by: Lama Kayal <lkayal@nvidia.com>
	Reviewed-by: Tariq Toukan <tariqt@nvidia.com>
	Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
(cherry picked from commit dd1979cf3c710398a9eeba4853b908fe16426814)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en/ptp.c
#	drivers/net/ethernet/mellanox/mlx5/core/en_stats.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en/ptp.c
index f9afbdefded5,3a86f66d1295..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en/ptp.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en/ptp.c
@@@ -3,6 -3,21 +3,24 @@@
  
  #include "en/ptp.h"
  #include "en/txrx.h"
++<<<<<<< HEAD
++=======
+ #include "en/params.h"
+ #include "en/fs_tt_redirect.h"
+ 
+ struct mlx5e_ptp_fs {
+ 	struct mlx5_flow_handle *l2_rule;
+ 	struct mlx5_flow_handle *udp_v4_rule;
+ 	struct mlx5_flow_handle *udp_v6_rule;
+ 	bool valid;
+ };
+ 
+ struct mlx5e_ptp_params {
+ 	struct mlx5e_params params;
+ 	struct mlx5e_sq_param txq_sq_param;
+ 	struct mlx5e_rq_param rq_param;
+ };
++>>>>>>> dd1979cf3c71 (net/mlx5e: Fix the presented RQ index in PTP stats)
  
  struct mlx5e_skb_cb_hwtstamp {
  	ktime_t cqe_hwtstamp;
@@@ -412,15 -477,59 +430,57 @@@ static void mlx5e_ptp_build_params(stru
  	params->num_channels = orig->num_channels;
  	params->hard_mtu = orig->hard_mtu;
  	params->sw_mtu = orig->sw_mtu;
 -	params->mqprio = orig->mqprio;
 +	params->num_tc = orig->num_tc;
  
  	/* SQ */
 -	if (test_bit(MLX5E_PTP_STATE_TX, c->state)) {
 -		params->log_sq_size = orig->log_sq_size;
 -		mlx5e_ptp_build_sq_param(c->mdev, params, &cparams->txq_sq_param);
 -	}
 -	/* RQ */
 -	if (test_bit(MLX5E_PTP_STATE_RX, c->state)) {
 -		params->vlan_strip_disable = orig->vlan_strip_disable;
 -		mlx5e_ptp_build_rq_param(c->mdev, c->netdev, c->priv->q_counter, cparams);
 -	}
 +	params->log_sq_size = orig->log_sq_size;
 +
 +	mlx5e_ptp_build_sq_param(c->mdev, params, &cparams->txq_sq_param);
  }
  
++<<<<<<< HEAD
 +static int mlx5e_ptp_open_queues(struct mlx5e_port_ptp *c,
++=======
+ static int mlx5e_init_ptp_rq(struct mlx5e_ptp *c, struct mlx5e_params *params,
+ 			     struct mlx5e_rq *rq)
+ {
+ 	struct mlx5_core_dev *mdev = c->mdev;
+ 	struct mlx5e_priv *priv = c->priv;
+ 	int err;
+ 
+ 	rq->wq_type      = params->rq_wq_type;
+ 	rq->pdev         = c->pdev;
+ 	rq->netdev       = priv->netdev;
+ 	rq->priv         = priv;
+ 	rq->clock        = &mdev->clock;
+ 	rq->tstamp       = &priv->tstamp;
+ 	rq->mdev         = mdev;
+ 	rq->hw_mtu       = MLX5E_SW2HW_MTU(params, params->sw_mtu);
+ 	rq->stats        = &c->priv->ptp_stats.rq;
+ 	rq->ix           = MLX5E_PTP_CHANNEL_IX;
+ 	rq->ptp_cyc2time = mlx5_rq_ts_translator(mdev);
+ 	err = mlx5e_rq_set_handlers(rq, params, false);
+ 	if (err)
+ 		return err;
+ 
+ 	return xdp_rxq_info_reg(&rq->xdp_rxq, rq->netdev, rq->ix, 0);
+ }
+ 
+ static int mlx5e_ptp_open_rq(struct mlx5e_ptp *c, struct mlx5e_params *params,
+ 			     struct mlx5e_rq_param *rq_param)
+ {
+ 	int node = dev_to_node(c->mdev->device);
+ 	int err;
+ 
+ 	err = mlx5e_init_ptp_rq(c, params, &c->rq);
+ 	if (err)
+ 		return err;
+ 
+ 	return mlx5e_open_rq(params, rq_param, NULL, node, &c->rq);
+ }
+ 
+ static int mlx5e_ptp_open_queues(struct mlx5e_ptp *c,
++>>>>>>> dd1979cf3c71 (net/mlx5e: Fix the presented RQ index in PTP stats)
  				 struct mlx5e_ptp_params *cparams)
  {
  	int err;
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_stats.c
index 8cf3f3dfe7c0,e1dd17019030..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_stats.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_stats.c
@@@ -2014,15 -2063,22 +2015,20 @@@ static MLX5E_DECLARE_STATS_GRP_OP_FILL_
  		sprintf(data + (idx++) * ETH_GSTRING_LEN,
  			ptp_ch_stats_desc[i].format);
  
 -	if (priv->tx_ptp_opened) {
 -		for (tc = 0; tc < priv->max_opened_tc; tc++)
 -			for (i = 0; i < NUM_PTP_SQ_STATS; i++)
 -				sprintf(data + (idx++) * ETH_GSTRING_LEN,
 -					ptp_sq_stats_desc[i].format, tc);
 +	for (tc = 0; tc < priv->max_opened_tc; tc++)
 +		for (i = 0; i < NUM_PTP_SQ_STATS; i++)
 +			sprintf(data + (idx++) * ETH_GSTRING_LEN,
++<<<<<<< HEAD
 +				ptp_sq_stats_desc[i].format, tc);
  
 -		for (tc = 0; tc < priv->max_opened_tc; tc++)
 -			for (i = 0; i < NUM_PTP_CQ_STATS; i++)
 -				sprintf(data + (idx++) * ETH_GSTRING_LEN,
 -					ptp_cq_stats_desc[i].format, tc);
 -	}
 -	if (priv->rx_ptp_opened) {
 -		for (i = 0; i < NUM_PTP_RQ_STATS; i++)
 +	for (tc = 0; tc < priv->max_opened_tc; tc++)
 +		for (i = 0; i < NUM_PTP_CQ_STATS; i++)
  			sprintf(data + (idx++) * ETH_GSTRING_LEN,
 +				ptp_cq_stats_desc[i].format, tc);
++=======
+ 				ptp_rq_stats_desc[i].format, MLX5E_PTP_CHANNEL_IX);
+ 	}
++>>>>>>> dd1979cf3c71 (net/mlx5e: Fix the presented RQ index in PTP stats)
  	return idx;
  }
  
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en/ptp.c
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en/ptp.h b/drivers/net/ethernet/mellanox/mlx5/core/en/ptp.h
index 28aa5ae118f4..a6725dbf13c4 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en/ptp.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en/ptp.h
@@ -8,6 +8,8 @@
 #include "en/params.h"
 #include "en_stats.h"
 
+#define MLX5E_PTP_CHANNEL_IX 0
+
 struct mlx5e_ptpsq {
 	struct mlx5e_txqsq       txqsq;
 	struct mlx5e_cq          ts_cq;
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_stats.c
