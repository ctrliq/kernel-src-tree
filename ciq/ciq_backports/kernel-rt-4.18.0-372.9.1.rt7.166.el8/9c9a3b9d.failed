ALSA: usb-audio: Rename early_playback_start flag with lowlatency_playback

jira LE-1907
Rebuild_History Non-Buildable kernel-rt-4.18.0-372.9.1.rt7.166.el8
commit-author Takashi Iwai <tiwai@suse.de>
commit 9c9a3b9da891cc70405a544da6855700eddcbb71
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-rt-4.18.0-372.9.1.rt7.166.el8/9c9a3b9d.failed

This is a preparation patch for the upcoming low-latency improvement
changes.

Rename early_playback_start flag with lowlatency_playback as it's more
intuitive.  The new flag is basically a reverse meaning.

Along with the rename, factor out the code to set the flag to a
function.  This makes the complex condition checks simpler.

Also, the same flag is introduced to snd_usb_endpoint, too, that is
carried from the snd_usb_substream flag.  Currently the endpoint flag
isn't still referred, but will be used in later patches.

Link: https://lore.kernel.org/r/20210929080844.11583-4-tiwai@suse.de
	Signed-off-by: Takashi Iwai <tiwai@suse.de>
(cherry picked from commit 9c9a3b9da891cc70405a544da6855700eddcbb71)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	sound/usb/card.h
#	sound/usb/pcm.c
diff --cc sound/usb/card.h
index 8a43985b6c68,a00caa1db37e..000000000000
--- a/sound/usb/card.h
+++ b/sound/usb/card.h
@@@ -187,6 -191,8 +188,11 @@@ struct snd_usb_substream 
  	} dsd_dop;
  
  	bool trigger_tstamp_pending_update; /* trigger timestamp being updated from initial estimate */
++<<<<<<< HEAD
++=======
+ 	bool lowlatency_playback;	/* low-latency playback mode */
+ 	struct media_ctl *media_ctl;
++>>>>>>> 9c9a3b9da891 (ALSA: usb-audio: Rename early_playback_start flag with lowlatency_playback)
  };
  
  struct snd_usb_stream {
diff --cc sound/usb/pcm.c
index af70e60d7da4,4dd7f1c9e2af..000000000000
--- a/sound/usb/pcm.c
+++ b/sound/usb/pcm.c
@@@ -605,6 -630,10 +621,13 @@@ static int snd_usb_pcm_prepare(struct s
  	subs->period_elapsed_pending = 0;
  	runtime->delay = 0;
  
++<<<<<<< HEAD
++=======
+ 	subs->lowlatency_playback = lowlatency_playback_available(subs);
+ 	if (!subs->lowlatency_playback)
+ 		ret = start_endpoints(subs);
+ 
++>>>>>>> 9c9a3b9da891 (ALSA: usb-audio: Rename early_playback_start flag with lowlatency_playback)
   unlock:
  	snd_usb_unlock_shutdown(chip);
  	return ret;
@@@ -1386,7 -1423,7 +1409,11 @@@ static void prepare_playback_urb(struc
  		subs->trigger_tstamp_pending_update = false;
  	}
  
++<<<<<<< HEAD
 +	if (period_elapsed && !subs->running) {
++=======
+ 	if (period_elapsed && !subs->running && subs->lowlatency_playback) {
++>>>>>>> 9c9a3b9da891 (ALSA: usb-audio: Rename early_playback_start flag with lowlatency_playback)
  		subs->period_elapsed_pending = 1;
  		period_elapsed = 0;
  	}
@@@ -1440,7 -1477,8 +1467,12 @@@ static int snd_usb_substream_playback_t
  					      prepare_playback_urb,
  					      retire_playback_urb,
  					      subs);
++<<<<<<< HEAD
 +		if (cmd == SNDRV_PCM_TRIGGER_START) {
++=======
+ 		if (subs->lowlatency_playback &&
+ 		    cmd == SNDRV_PCM_TRIGGER_START) {
++>>>>>>> 9c9a3b9da891 (ALSA: usb-audio: Rename early_playback_start flag with lowlatency_playback)
  			err = start_endpoints(subs);
  			if (err < 0) {
  				snd_usb_endpoint_set_callback(subs->data_endpoint,
* Unmerged path sound/usb/card.h
diff --git a/sound/usb/endpoint.c b/sound/usb/endpoint.c
index 6aeff33f106d..81480884224c 100644
--- a/sound/usb/endpoint.c
+++ b/sound/usb/endpoint.c
@@ -789,6 +789,10 @@ void snd_usb_endpoint_set_callback(struct snd_usb_endpoint *ep,
 {
 	ep->prepare_data_urb = prepare;
 	ep->retire_data_urb = retire;
+	if (data_subs)
+		ep->lowlatency_playback = data_subs->lowlatency_playback;
+	else
+		ep->lowlatency_playback = false;
 	WRITE_ONCE(ep->data_subs, data_subs);
 }
 
* Unmerged path sound/usb/pcm.c
