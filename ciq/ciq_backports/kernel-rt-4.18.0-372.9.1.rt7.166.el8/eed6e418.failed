driver core: Fix locking bug in deferred_probe_timeout_work_func()

jira LE-1907
Rebuild_History Non-Buildable kernel-rt-4.18.0-372.9.1.rt7.166.el8
commit-author Saravana Kannan <saravanak@google.com>
commit eed6e41813deb9ee622cd9242341f21430d7789f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-rt-4.18.0-372.9.1.rt7.166.el8/eed6e418.failed

list_for_each_entry_safe() is only useful if we are deleting nodes in a
linked list within the loop. It doesn't protect against other threads
adding/deleting nodes to the list in parallel. We need to grab
deferred_probe_mutex when traversing the deferred_probe_pending_list.

	Cc: stable@vger.kernel.org
Fixes: 25b4e70dcce9 ("driver core: allow stopping deferred probe after init")
	Signed-off-by: Saravana Kannan <saravanak@google.com>
Link: https://lore.kernel.org/r/20210402040342.2944858-2-saravanak@google.com
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit eed6e41813deb9ee622cd9242341f21430d7789f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/base/dd.c
diff --cc drivers/base/dd.c
index 984241ca88a0,37a5e5f8b221..000000000000
--- a/drivers/base/dd.c
+++ b/drivers/base/dd.c
@@@ -318,14 -292,17 +318,22 @@@ int driver_deferred_probe_check_state_c
  
  static void deferred_probe_timeout_work_func(struct work_struct *work)
  {
- 	struct device_private *private, *p;
+ 	struct device_private *p;
  
 -	driver_deferred_probe_timeout = 0;
 +	deferred_probe_timeout = 0;
  	driver_deferred_probe_trigger();
  	flush_work(&deferred_probe_work);
  
++<<<<<<< HEAD
 +	list_for_each_entry_safe(private, p, &deferred_probe_pending_list, deferred_probe)
 +		dev_info(private->device, "deferred probe pending");
++=======
+ 	mutex_lock(&deferred_probe_mutex);
+ 	list_for_each_entry(p, &deferred_probe_pending_list, deferred_probe)
+ 		dev_info(p->device, "deferred probe pending\n");
+ 	mutex_unlock(&deferred_probe_mutex);
+ 	wake_up_all(&probe_timeout_waitqueue);
++>>>>>>> eed6e41813de (driver core: Fix locking bug in deferred_probe_timeout_work_func())
  }
  static DECLARE_DELAYED_WORK(deferred_probe_timeout_work, deferred_probe_timeout_work_func);
  
* Unmerged path drivers/base/dd.c
