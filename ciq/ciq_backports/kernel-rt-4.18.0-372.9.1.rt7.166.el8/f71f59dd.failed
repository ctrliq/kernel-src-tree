ASoC: SOF: Introduce snd_sof_mailbox_read / snd_sof_mailbox_write callbacks

jira LE-1907
Rebuild_History Non-Buildable kernel-rt-4.18.0-372.9.1.rt7.166.el8
commit-author Daniel Baluta <daniel.baluta@nxp.com>
commit f71f59dd450813684d838e0c1d6602186b7d2d8f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-rt-4.18.0-372.9.1.rt7.166.el8/f71f59dd.failed

We need to introduce snd_sof_mailbox_{read/write} in order to provide
a generic way for mailbox access. These routines are optional, each
platform can implement their own specific routines.

So far, all platforms use mmapped I/O thus they can use custom made
routines sof_mailbox_read / sof_mailbox_write that use MMIO.

	Signed-off-by: Daniel Baluta <daniel.baluta@nxp.com>
	Signed-off-by: Bud Liviu-Alexandru <budliviu@gmail.com>
	Reviewed-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
	Reviewed-by: PÃ©ter Ujfalusi <peter.ujfalusi@linux.intel.com>
Link: https://lore.kernel.org/r/20211004152147.1268978-2-daniel.baluta@oss.nxp.com
	Signed-off-by: Mark Brown <broonie@kernel.org>
(cherry picked from commit f71f59dd450813684d838e0c1d6602186b7d2d8f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	sound/soc/sof/intel/pci-tng.c
diff --cc sound/soc/sof/intel/pci-tng.c
index 1e08231262bc,8042ac76ec15..000000000000
--- a/sound/soc/sof/intel/pci-tng.c
+++ b/sound/soc/sof/intel/pci-tng.c
@@@ -29,6 -31,175 +29,178 @@@ static struct snd_soc_acpi_mach sof_tng
  	{}
  };
  
++<<<<<<< HEAD
++=======
+ static const struct snd_sof_debugfs_map tng_debugfs[] = {
+ 	{"dmac0", DSP_BAR, DMAC0_OFFSET, DMAC_SIZE,
+ 	 SOF_DEBUGFS_ACCESS_ALWAYS},
+ 	{"dmac1", DSP_BAR, DMAC1_OFFSET, DMAC_SIZE,
+ 	 SOF_DEBUGFS_ACCESS_ALWAYS},
+ 	{"ssp0", DSP_BAR, SSP0_OFFSET, SSP_SIZE,
+ 	 SOF_DEBUGFS_ACCESS_ALWAYS},
+ 	{"ssp1", DSP_BAR, SSP1_OFFSET, SSP_SIZE,
+ 	 SOF_DEBUGFS_ACCESS_ALWAYS},
+ 	{"ssp2", DSP_BAR, SSP2_OFFSET, SSP_SIZE,
+ 	 SOF_DEBUGFS_ACCESS_ALWAYS},
+ 	{"iram", DSP_BAR, IRAM_OFFSET, IRAM_SIZE,
+ 	 SOF_DEBUGFS_ACCESS_D0_ONLY},
+ 	{"dram", DSP_BAR, DRAM_OFFSET, DRAM_SIZE,
+ 	 SOF_DEBUGFS_ACCESS_D0_ONLY},
+ 	{"shim", DSP_BAR, SHIM_OFFSET, SHIM_SIZE_BYT,
+ 	 SOF_DEBUGFS_ACCESS_ALWAYS},
+ };
+ 
+ static int tangier_pci_probe(struct snd_sof_dev *sdev)
+ {
+ 	struct snd_sof_pdata *pdata = sdev->pdata;
+ 	const struct sof_dev_desc *desc = pdata->desc;
+ 	struct pci_dev *pci = to_pci_dev(sdev->dev);
+ 	u32 base, size;
+ 	int ret;
+ 
+ 	/* DSP DMA can only access low 31 bits of host memory */
+ 	ret = dma_coerce_mask_and_coherent(&pci->dev, DMA_BIT_MASK(31));
+ 	if (ret < 0) {
+ 		dev_err(sdev->dev, "error: failed to set DMA mask %d\n", ret);
+ 		return ret;
+ 	}
+ 
+ 	/* LPE base */
+ 	base = pci_resource_start(pci, desc->resindex_lpe_base) - IRAM_OFFSET;
+ 	size = PCI_BAR_SIZE;
+ 
+ 	dev_dbg(sdev->dev, "LPE PHY base at 0x%x size 0x%x", base, size);
+ 	sdev->bar[DSP_BAR] = devm_ioremap(sdev->dev, base, size);
+ 	if (!sdev->bar[DSP_BAR]) {
+ 		dev_err(sdev->dev, "error: failed to ioremap LPE base 0x%x size 0x%x\n",
+ 			base, size);
+ 		return -ENODEV;
+ 	}
+ 	dev_dbg(sdev->dev, "LPE VADDR %p\n", sdev->bar[DSP_BAR]);
+ 
+ 	/* IMR base - optional */
+ 	if (desc->resindex_imr_base == -1)
+ 		goto irq;
+ 
+ 	base = pci_resource_start(pci, desc->resindex_imr_base);
+ 	size = pci_resource_len(pci, desc->resindex_imr_base);
+ 
+ 	/* some BIOSes don't map IMR */
+ 	if (base == 0x55aa55aa || base == 0x0) {
+ 		dev_info(sdev->dev, "IMR not set by BIOS. Ignoring\n");
+ 		goto irq;
+ 	}
+ 
+ 	dev_dbg(sdev->dev, "IMR base at 0x%x size 0x%x", base, size);
+ 	sdev->bar[IMR_BAR] = devm_ioremap(sdev->dev, base, size);
+ 	if (!sdev->bar[IMR_BAR]) {
+ 		dev_err(sdev->dev, "error: failed to ioremap IMR base 0x%x size 0x%x\n",
+ 			base, size);
+ 		return -ENODEV;
+ 	}
+ 	dev_dbg(sdev->dev, "IMR VADDR %p\n", sdev->bar[IMR_BAR]);
+ 
+ irq:
+ 	/* register our IRQ */
+ 	sdev->ipc_irq = pci->irq;
+ 	dev_dbg(sdev->dev, "using IRQ %d\n", sdev->ipc_irq);
+ 	ret = devm_request_threaded_irq(sdev->dev, sdev->ipc_irq,
+ 					atom_irq_handler, atom_irq_thread,
+ 					0, "AudioDSP", sdev);
+ 	if (ret < 0) {
+ 		dev_err(sdev->dev, "error: failed to register IRQ %d\n",
+ 			sdev->ipc_irq);
+ 		return ret;
+ 	}
+ 
+ 	/* enable BUSY and disable DONE Interrupt by default */
+ 	snd_sof_dsp_update_bits64(sdev, DSP_BAR, SHIM_IMRX,
+ 				  SHIM_IMRX_BUSY | SHIM_IMRX_DONE,
+ 				  SHIM_IMRX_DONE);
+ 
+ 	/* set default mailbox offset for FW ready message */
+ 	sdev->dsp_box.offset = MBOX_OFFSET;
+ 
+ 	return ret;
+ }
+ 
+ const struct snd_sof_dsp_ops sof_tng_ops = {
+ 	/* device init */
+ 	.probe		= tangier_pci_probe,
+ 
+ 	/* DSP core boot / reset */
+ 	.run		= atom_run,
+ 	.reset		= atom_reset,
+ 
+ 	/* Register IO */
+ 	.write		= sof_io_write,
+ 	.read		= sof_io_read,
+ 	.write64	= sof_io_write64,
+ 	.read64		= sof_io_read64,
+ 
+ 	/* Block IO */
+ 	.block_read	= sof_block_read,
+ 	.block_write	= sof_block_write,
+ 
+ 	/* Mailbox IO */
+ 	.mailbox_read	= sof_mailbox_read,
+ 	.mailbox_write	= sof_mailbox_write,
+ 
+ 	/* doorbell */
+ 	.irq_handler	= atom_irq_handler,
+ 	.irq_thread	= atom_irq_thread,
+ 
+ 	/* ipc */
+ 	.send_msg	= atom_send_msg,
+ 	.fw_ready	= sof_fw_ready,
+ 	.get_mailbox_offset = atom_get_mailbox_offset,
+ 	.get_window_offset = atom_get_window_offset,
+ 
+ 	.ipc_msg_data	= intel_ipc_msg_data,
+ 	.ipc_pcm_params	= intel_ipc_pcm_params,
+ 
+ 	/* machine driver */
+ 	.machine_select = atom_machine_select,
+ 	.machine_register = sof_machine_register,
+ 	.machine_unregister = sof_machine_unregister,
+ 	.set_mach_params = atom_set_mach_params,
+ 
+ 	/* debug */
+ 	.debug_map	= tng_debugfs,
+ 	.debug_map_count	= ARRAY_SIZE(tng_debugfs),
+ 	.dbg_dump	= atom_dump,
+ 	.debugfs_add_region_item = snd_sof_debugfs_add_region_item_iomem,
+ 
+ 	/* stream callbacks */
+ 	.pcm_open	= intel_pcm_open,
+ 	.pcm_close	= intel_pcm_close,
+ 
+ 	/* module loading */
+ 	.load_module	= snd_sof_parse_module_memcpy,
+ 
+ 	/*Firmware loading */
+ 	.load_firmware	= snd_sof_load_firmware_memcpy,
+ 
+ 	/* DAI drivers */
+ 	.drv = atom_dai,
+ 	.num_drv = 3, /* we have only 3 SSPs on byt*/
+ 
+ 	/* ALSA HW info flags */
+ 	.hw_info =	SNDRV_PCM_INFO_MMAP |
+ 			SNDRV_PCM_INFO_MMAP_VALID |
+ 			SNDRV_PCM_INFO_INTERLEAVED |
+ 			SNDRV_PCM_INFO_PAUSE |
+ 			SNDRV_PCM_INFO_BATCH,
+ 
+ 	.dsp_arch_ops = &sof_xtensa_arch_ops,
+ };
+ 
+ const struct sof_intel_dsp_desc tng_chip_info = {
+ 	.cores_num = 1,
+ 	.host_managed_cores_mask = 1,
+ };
+ 
++>>>>>>> f71f59dd4508 (ASoC: SOF: Introduce snd_sof_mailbox_read / snd_sof_mailbox_write callbacks)
  static const struct sof_dev_desc tng_desc = {
  	.machines		= sof_tng_machines,
  	.resindex_lpe_base	= 3,	/* IRAM, but subtract IRAM offset */
diff --git a/sound/soc/sof/imx/imx8.c b/sound/soc/sof/imx/imx8.c
index 49d5f2dd464f..c042fd7f1a4c 100644
--- a/sound/soc/sof/imx/imx8.c
+++ b/sound/soc/sof/imx/imx8.c
@@ -428,6 +428,10 @@ struct snd_sof_dsp_ops sof_imx8_ops = {
 	.block_read	= sof_block_read,
 	.block_write	= sof_block_write,
 
+	/* Mailbox IO */
+	.mailbox_read	= sof_mailbox_read,
+	.mailbox_write	= sof_mailbox_write,
+
 	/* ipc */
 	.send_msg	= imx8_send_msg,
 	.fw_ready	= sof_fw_ready,
@@ -475,6 +479,10 @@ struct snd_sof_dsp_ops sof_imx8x_ops = {
 	.block_read	= sof_block_read,
 	.block_write	= sof_block_write,
 
+	/* Mailbox IO */
+	.mailbox_read	= sof_mailbox_read,
+	.mailbox_write	= sof_mailbox_write,
+
 	/* ipc */
 	.send_msg	= imx8_send_msg,
 	.fw_ready	= sof_fw_ready,
diff --git a/sound/soc/sof/imx/imx8m.c b/sound/soc/sof/imx/imx8m.c
index 301b7123b1bf..9e2669f93b80 100644
--- a/sound/soc/sof/imx/imx8m.c
+++ b/sound/soc/sof/imx/imx8m.c
@@ -291,6 +291,10 @@ struct snd_sof_dsp_ops sof_imx8m_ops = {
 	.block_read	= sof_block_read,
 	.block_write	= sof_block_write,
 
+	/* Mailbox IO */
+	.mailbox_read	= sof_mailbox_read,
+	.mailbox_write	= sof_mailbox_write,
+
 	/* ipc */
 	.send_msg	= imx8m_send_msg,
 	.fw_ready	= sof_fw_ready,
diff --git a/sound/soc/sof/intel/apl.c b/sound/soc/sof/intel/apl.c
index 968a31dc6101..d7ba0243b47d 100644
--- a/sound/soc/sof/intel/apl.c
+++ b/sound/soc/sof/intel/apl.c
@@ -42,6 +42,10 @@ const struct snd_sof_dsp_ops sof_apl_ops = {
 	.block_read	= sof_block_read,
 	.block_write	= sof_block_write,
 
+	/* Mailbox IO */
+	.mailbox_read	= sof_mailbox_read,
+	.mailbox_write	= sof_mailbox_write,
+
 	/* doorbell */
 	.irq_thread	= hda_dsp_ipc_irq_thread,
 
diff --git a/sound/soc/sof/intel/bdw.c b/sound/soc/sof/intel/bdw.c
index 96ace32fc1be..404dbf81dc6e 100644
--- a/sound/soc/sof/intel/bdw.c
+++ b/sound/soc/sof/intel/bdw.c
@@ -616,6 +616,10 @@ static const struct snd_sof_dsp_ops sof_bdw_ops = {
 	.block_read	= sof_block_read,
 	.block_write	= sof_block_write,
 
+	/* Mailbox IO */
+	.mailbox_read	= sof_mailbox_read,
+	.mailbox_write	= sof_mailbox_write,
+
 	/* ipc */
 	.send_msg	= bdw_send_msg,
 	.fw_ready	= sof_fw_ready,
diff --git a/sound/soc/sof/intel/byt.c b/sound/soc/sof/intel/byt.c
index d725edd4a6bf..096484baa051 100644
--- a/sound/soc/sof/intel/byt.c
+++ b/sound/soc/sof/intel/byt.c
@@ -868,6 +868,10 @@ static const struct snd_sof_dsp_ops sof_byt_ops = {
 	.block_read	= sof_block_read,
 	.block_write	= sof_block_write,
 
+	/* Mailbox IO */
+	.mailbox_read	= sof_mailbox_read,
+	.mailbox_write	= sof_mailbox_write,
+
 	/* doorbell */
 	.irq_handler	= atom_irq_handler,
 	.irq_thread	= atom_irq_thread,
@@ -945,6 +949,10 @@ static const struct snd_sof_dsp_ops sof_cht_ops = {
 	.block_read	= sof_block_read,
 	.block_write	= sof_block_write,
 
+	/* Mailbox IO */
+	.mailbox_read	= sof_mailbox_read,
+	.mailbox_write	= sof_mailbox_write,
+
 	/* doorbell */
 	.irq_handler	= atom_irq_handler,
 	.irq_thread	= atom_irq_thread,
diff --git a/sound/soc/sof/intel/cnl.c b/sound/soc/sof/intel/cnl.c
index 8c1eef80ac1e..f7345fb80740 100644
--- a/sound/soc/sof/intel/cnl.c
+++ b/sound/soc/sof/intel/cnl.c
@@ -247,6 +247,10 @@ const struct snd_sof_dsp_ops sof_cnl_ops = {
 	.block_read	= sof_block_read,
 	.block_write	= sof_block_write,
 
+	/* Mailbox IO */
+	.mailbox_read	= sof_mailbox_read,
+	.mailbox_write	= sof_mailbox_write,
+
 	/* doorbell */
 	.irq_thread	= cnl_ipc_irq_thread,
 
diff --git a/sound/soc/sof/intel/icl.c b/sound/soc/sof/intel/icl.c
index 42d6862432e4..21724253fcf6 100644
--- a/sound/soc/sof/intel/icl.c
+++ b/sound/soc/sof/intel/icl.c
@@ -41,6 +41,10 @@ const struct snd_sof_dsp_ops sof_icl_ops = {
 	.block_read	= sof_block_read,
 	.block_write	= sof_block_write,
 
+	/* Mailbox IO */
+	.mailbox_read	= sof_mailbox_read,
+	.mailbox_write	= sof_mailbox_write,
+
 	/* doorbell */
 	.irq_thread	= cnl_ipc_irq_thread,
 
* Unmerged path sound/soc/sof/intel/pci-tng.c
diff --git a/sound/soc/sof/intel/tgl.c b/sound/soc/sof/intel/tgl.c
index d26512f7876c..78c2df2dc6b1 100644
--- a/sound/soc/sof/intel/tgl.c
+++ b/sound/soc/sof/intel/tgl.c
@@ -37,6 +37,10 @@ const struct snd_sof_dsp_ops sof_tgl_ops = {
 	.block_read	= sof_block_read,
 	.block_write	= sof_block_write,
 
+	/* Mailbox IO */
+	.mailbox_read	= sof_mailbox_read,
+	.mailbox_write	= sof_mailbox_write,
+
 	/* doorbell */
 	.irq_thread	= cnl_ipc_irq_thread,
 
diff --git a/sound/soc/sof/ops.h b/sound/soc/sof/ops.h
index d143a35f16fc..a3c361bfde59 100644
--- a/sound/soc/sof/ops.h
+++ b/sound/soc/sof/ops.h
@@ -328,6 +328,21 @@ static inline int snd_sof_dsp_block_write(struct snd_sof_dev *sdev,
 	return sof_ops(sdev)->block_write(sdev, blk_type, offset, src, bytes);
 }
 
+/* mailbox IO */
+static inline void snd_sof_dsp_mailbox_read(struct snd_sof_dev *sdev,
+					    u32 offset, void *dest, size_t bytes)
+{
+	if (sof_ops(sdev)->mailbox_read)
+		sof_ops(sdev)->mailbox_read(sdev, offset, dest, bytes);
+}
+
+static inline void snd_sof_dsp_mailbox_write(struct snd_sof_dev *sdev,
+					     u32 offset, void *src, size_t bytes)
+{
+	if (sof_ops(sdev)->mailbox_write)
+		sof_ops(sdev)->mailbox_write(sdev, offset, src, bytes);
+}
+
 /* ipc */
 static inline int snd_sof_dsp_send_msg(struct snd_sof_dev *sdev,
 				       struct snd_sof_ipc_msg *msg)
diff --git a/sound/soc/sof/sof-priv.h b/sound/soc/sof/sof-priv.h
index 94632a45d6b0..f5f072284b06 100644
--- a/sound/soc/sof/sof-priv.h
+++ b/sound/soc/sof/sof-priv.h
@@ -144,6 +144,14 @@ struct snd_sof_dsp_ops {
 			   enum snd_sof_fw_blk_type type, u32 offset,
 			   void *src, size_t size); /* mandatory */
 
+	/* Mailbox IO */
+	void (*mailbox_read)(struct snd_sof_dev *sof_dev,
+			     u32 offset, void *dest,
+			     size_t size); /* optional */
+	void (*mailbox_write)(struct snd_sof_dev *sof_dev,
+			      u32 offset, void *src,
+			      size_t size); /* optional */
+
 	/* doorbell */
 	irqreturn_t (*irq_handler)(int irq, void *context); /* optional */
 	irqreturn_t (*irq_thread)(int irq, void *context); /* optional */
