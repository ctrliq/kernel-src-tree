ext4: fix reserved space counter leakage

jira LE-1907
Rebuild_History Non-Buildable kernel-rt-4.18.0-372.9.1.rt7.166.el8
commit-author Jeffle Xu <jefflexu@linux.alibaba.com>
commit 6fed83957f21eff11c8496e9f24253b03d2bc1dc
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-rt-4.18.0-372.9.1.rt7.166.el8/6fed8395.failed

When ext4_insert_delayed block receives and recovers from an error from
ext4_es_insert_delayed_block(), e.g., ENOMEM, it does not release the
space it has reserved for that block insertion as it should. One effect
of this bug is that s_dirtyclusters_counter is not decremented and
remains incorrectly elevated until the file system has been unmounted.
This can result in premature ENOSPC returns and apparent loss of free
space.

Another effect of this bug is that
/sys/fs/ext4/<dev>/delayed_allocation_blocks can remain non-zero even
after syncfs has been executed on the filesystem.

Besides, add check for s_dirtyclusters_counter when inode is going to be
evicted and freed. s_dirtyclusters_counter can still keep non-zero until
inode is written back in .evict_inode(), and thus the check is delayed
to .destroy_inode().

Fixes: 51865fda28e5 ("ext4: let ext4 maintain extent status tree")
	Cc: stable@kernel.org
	Suggested-by: Gao Xiang <hsiangkao@linux.alibaba.com>
	Signed-off-by: Jeffle Xu <jefflexu@linux.alibaba.com>
	Reviewed-by: Eric Whitney <enwlinux@gmail.com>
	Signed-off-by: Theodore Ts'o <tytso@mit.edu>
Link: https://lore.kernel.org/r/20210823061358.84473-1-jefflexu@linux.alibaba.com
(cherry picked from commit 6fed83957f21eff11c8496e9f24253b03d2bc1dc)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/ext4/super.c
diff --cc fs/ext4/super.c
index b667fc916ac8,a52f1572daa5..000000000000
--- a/fs/ext4/super.c
+++ b/fs/ext4/super.c
@@@ -1188,7 -1352,12 +1188,16 @@@ static void ext4_destroy_inode(struct i
  				true);
  		dump_stack();
  	}
++<<<<<<< HEAD
 +	call_rcu(&inode->i_rcu, ext4_i_callback);
++=======
+ 
+ 	if (EXT4_I(inode)->i_reserved_data_blocks)
+ 		ext4_msg(inode->i_sb, KERN_ERR,
+ 			 "Inode %lu (%p): i_reserved_data_blocks (%u) not cleared!",
+ 			 inode->i_ino, EXT4_I(inode),
+ 			 EXT4_I(inode)->i_reserved_data_blocks);
++>>>>>>> 6fed83957f21 (ext4: fix reserved space counter leakage)
  }
  
  static void init_once(void *foo)
diff --git a/fs/ext4/inode.c b/fs/ext4/inode.c
index a09c860ebe62..4d98f12c92e6 100644
--- a/fs/ext4/inode.c
+++ b/fs/ext4/inode.c
@@ -1791,6 +1791,7 @@ static int ext4_insert_delayed_block(struct inode *inode, ext4_lblk_t lblk)
 	struct ext4_sb_info *sbi = EXT4_SB(inode->i_sb);
 	int ret;
 	bool allocated = false;
+	bool reserved = false;
 
 	/*
 	 * If the cluster containing lblk is shared with a delayed,
@@ -1807,6 +1808,7 @@ static int ext4_insert_delayed_block(struct inode *inode, ext4_lblk_t lblk)
 		ret = ext4_da_reserve_space(inode);
 		if (ret != 0)   /* ENOSPC */
 			goto errout;
+		reserved = true;
 	} else {   /* bigalloc */
 		if (!ext4_es_scan_clu(inode, &ext4_es_is_delonly, lblk)) {
 			if (!ext4_es_scan_clu(inode,
@@ -1819,6 +1821,7 @@ static int ext4_insert_delayed_block(struct inode *inode, ext4_lblk_t lblk)
 					ret = ext4_da_reserve_space(inode);
 					if (ret != 0)   /* ENOSPC */
 						goto errout;
+					reserved = true;
 				} else {
 					allocated = true;
 				}
@@ -1829,6 +1832,8 @@ static int ext4_insert_delayed_block(struct inode *inode, ext4_lblk_t lblk)
 	}
 
 	ret = ext4_es_insert_delayed_block(inode, lblk, allocated);
+	if (ret && reserved)
+		ext4_da_release_space(inode, 1);
 
 errout:
 	return ret;
* Unmerged path fs/ext4/super.c
