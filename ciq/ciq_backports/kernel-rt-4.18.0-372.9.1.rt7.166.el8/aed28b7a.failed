SUNRPC: Don't dereference xprt->snd_task if it's a cookie

jira LE-1907
Rebuild_History Non-Buildable kernel-rt-4.18.0-372.9.1.rt7.166.el8
commit-author Chuck Lever <chuck.lever@oracle.com>
commit aed28b7a2d620cb5cd0c554cb889075c02e25e8e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-rt-4.18.0-372.9.1.rt7.166.el8/aed28b7a.failed

Fixes: e26d9972720e ("SUNRPC: Clean up scheduling of autoclose")
	Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
	Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
(cherry picked from commit aed28b7a2d620cb5cd0c554cb889075c02e25e8e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/trace/events/sunrpc.h
diff --cc include/trace/events/sunrpc.h
index 1a30b9f881fd,7cdcbc6dc38e..000000000000
--- a/include/trace/events/sunrpc.h
+++ b/include/trace/events/sunrpc.h
@@@ -957,29 -952,21 +957,45 @@@ TRACE_EVENT(rpc_socket_nospace
  	)
  );
  
 +TRACE_DEFINE_ENUM(XPRT_LOCKED);
 +TRACE_DEFINE_ENUM(XPRT_CONNECTED);
 +TRACE_DEFINE_ENUM(XPRT_CONNECTING);
 +TRACE_DEFINE_ENUM(XPRT_CLOSE_WAIT);
 +TRACE_DEFINE_ENUM(XPRT_BOUND);
 +TRACE_DEFINE_ENUM(XPRT_BINDING);
 +TRACE_DEFINE_ENUM(XPRT_CLOSING);
 +TRACE_DEFINE_ENUM(XPRT_CONGESTED);
 +TRACE_DEFINE_ENUM(XPRT_CWND_WAIT);
 +TRACE_DEFINE_ENUM(XPRT_WRITE_SPACE);
 +
  #define rpc_show_xprt_state(x)						\
  	__print_flags(x, "|",						\
++<<<<<<< HEAD
 +		{ (1UL << XPRT_LOCKED),		"LOCKED"},		\
 +		{ (1UL << XPRT_CONNECTED),	"CONNECTED"},		\
 +		{ (1UL << XPRT_CONNECTING),	"CONNECTING"},		\
 +		{ (1UL << XPRT_CLOSE_WAIT),	"CLOSE_WAIT"},		\
 +		{ (1UL << XPRT_BOUND),		"BOUND"},		\
 +		{ (1UL << XPRT_BINDING),	"BINDING"},		\
 +		{ (1UL << XPRT_CLOSING),	"CLOSING"},		\
 +		{ (1UL << XPRT_CONGESTED),	"CONGESTED"},		\
 +		{ (1UL << XPRT_CWND_WAIT),	"CWND_WAIT"},		\
 +		{ (1UL << XPRT_WRITE_SPACE),	"WRITE_SPACE"})
++=======
+ 		{ BIT(XPRT_LOCKED),		"LOCKED" },		\
+ 		{ BIT(XPRT_CONNECTED),		"CONNECTED" },		\
+ 		{ BIT(XPRT_CONNECTING),		"CONNECTING" },		\
+ 		{ BIT(XPRT_CLOSE_WAIT),		"CLOSE_WAIT" },		\
+ 		{ BIT(XPRT_BOUND),		"BOUND" },		\
+ 		{ BIT(XPRT_BINDING),		"BINDING" },		\
+ 		{ BIT(XPRT_CLOSING),		"CLOSING" },		\
+ 		{ BIT(XPRT_OFFLINE),		"OFFLINE" },		\
+ 		{ BIT(XPRT_REMOVE),		"REMOVE" },		\
+ 		{ BIT(XPRT_CONGESTED),		"CONGESTED" },		\
+ 		{ BIT(XPRT_CWND_WAIT),		"CWND_WAIT" },		\
+ 		{ BIT(XPRT_WRITE_SPACE),	"WRITE_SPACE" },	\
+ 		{ BIT(XPRT_SND_IS_COOKIE),	"SND_IS_COOKIE" })
++>>>>>>> aed28b7a2d62 (SUNRPC: Don't dereference xprt->snd_task if it's a cookie)
  
  DECLARE_EVENT_CLASS(rpc_xprt_lifetime_class,
  	TP_PROTO(
@@@ -1174,11 -1163,15 +1190,14 @@@ DECLARE_EVENT_CLASS(xprt_writelock_even
  			__entry->task_id = -1;
  			__entry->client_id = -1;
  		}
- 		__entry->snd_task_id = xprt->snd_task ?
- 					xprt->snd_task->tk_pid : -1;
+ 		if (xprt->snd_task &&
+ 		    !test_bit(XPRT_SND_IS_COOKIE, &xprt->state))
+ 			__entry->snd_task_id = xprt->snd_task->tk_pid;
+ 		else
+ 			__entry->snd_task_id = -1;
  	),
  
 -	TP_printk(SUNRPC_TRACE_TASK_SPECIFIER
 -		  " snd_task:" SUNRPC_TRACE_PID_SPECIFIER,
 +	TP_printk("task:%u@%u snd_task:%u",
  			__entry->task_id, __entry->client_id,
  			__entry->snd_task_id)
  );
* Unmerged path include/trace/events/sunrpc.h
