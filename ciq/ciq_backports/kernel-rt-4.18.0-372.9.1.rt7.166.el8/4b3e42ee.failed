net/mlx5e: Remove mdev from mlx5e_build_indir_tir_ctx_common()

jira LE-1907
Rebuild_History Non-Buildable kernel-rt-4.18.0-372.9.1.rt7.166.el8
commit-author Maxim Mikityanskiy <maximmi@nvidia.com>
commit 4b3e42eecb1cd8731af59fa01d85af109f0234e4
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-rt-4.18.0-372.9.1.rt7.166.el8/4b3e42ee.failed

In order to drop a dependency to mdev and make the function more
universal, stop passing mdev to mlx5e_build_indir_tir_ctx_common() and
pass transport domain directly instead. It also prepares this function
to be used in other contexts that need a custom transport domain, such
as hairpin.

	Signed-off-by: Maxim Mikityanskiy <maximmi@nvidia.com>
	Reviewed-by: Tariq Toukan <tariqt@nvidia.com>
	Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
(cherry picked from commit 4b3e42eecb1cd8731af59fa01d85af109f0234e4)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en_main.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_main.c
index 15e30d82e985,53a51ac86d64..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
@@@ -3182,30 -3129,21 +3182,46 @@@ static void mlx5e_cleanup_nic_tx(struc
  	mlx5e_destroy_tises(priv);
  }
  
++<<<<<<< HEAD
 +static void mlx5e_build_indir_tir_ctx_common(struct mlx5e_priv *priv,
 +					     u32 rqtn, u32 *tirc)
 +{
 +	MLX5_SET(tirc, tirc, transport_domain, priv->mdev->mlx5e_res.hw_objs.td.tdn);
++=======
+ static void mlx5e_build_indir_tir_ctx_common(u32 tdn, bool inner_ft_support,
+ 					     u32 rqtn, u32 *tirc)
+ {
+ 	MLX5_SET(tirc, tirc, transport_domain, tdn);
++>>>>>>> 4b3e42eecb1c (net/mlx5e: Remove mdev from mlx5e_build_indir_tir_ctx_common())
  	MLX5_SET(tirc, tirc, disp_type, MLX5_TIRC_DISP_TYPE_INDIRECT);
  	MLX5_SET(tirc, tirc, indirect_table, rqtn);
 -	MLX5_SET(tirc, tirc, tunneled_offload_en, inner_ft_support);
 +	MLX5_SET(tirc, tirc, tunneled_offload_en,
 +		 priv->channels.params.tunneled_offload_en);
 +
 +	mlx5e_build_tir_ctx_lro(&priv->channels.params, tirc);
 +}
 +
++<<<<<<< HEAD
 +static void mlx5e_build_indir_tir_ctx(struct mlx5e_priv *priv,
 +				      enum mlx5e_traffic_types tt,
 +				      u32 *tirc)
 +{
 +	mlx5e_build_indir_tir_ctx_common(priv, priv->indir_rqt.rqtn, tirc);
 +	mlx5e_build_indir_tir_ctx_hash(&priv->rss_params,
 +				       &tirc_default_config[tt], tirc, false);
  }
  
 +static void mlx5e_build_direct_tir_ctx(struct mlx5e_priv *priv, u32 rqtn, u32 *tirc)
 +{
 +	mlx5e_build_indir_tir_ctx_common(priv, rqtn, tirc);
++=======
+ static void mlx5e_build_direct_tir_ctx(struct mlx5e_lro_param *lro_param,
+ 				       u32 tdn, bool inner_ft_support,
+ 				       u32 rqtn, u32 *tirc)
+ {
+ 	mlx5e_build_indir_tir_ctx_common(tdn, inner_ft_support, rqtn, tirc);
+ 	mlx5e_build_tir_ctx_lro(lro_param, tirc);
++>>>>>>> 4b3e42eecb1c (net/mlx5e: Remove mdev from mlx5e_build_indir_tir_ctx_common())
  	MLX5_SET(tirc, tirc, rx_hash_fn, MLX5_RX_HASH_FN_INVERTED_XOR8);
  }
  
@@@ -3233,11 -3165,20 +3249,21 @@@ int mlx5e_create_indirect_tirs(struct m
  	if (!in)
  		return -ENOMEM;
  
 -	lro_param = mlx5e_get_lro_param(&priv->channels.params);
 -	indir_rqtn = mlx5e_rqt_get_rqtn(&priv->rx_res->indir_rqt);
 -
  	for (tt = 0; tt < MLX5E_NUM_INDIR_TIRS; tt++) {
  		memset(in, 0, inlen);
 -		tir = &res->rss[tt].indir_tir;
 +		tir = &priv->indir_tir[tt];
  		tirc = MLX5_ADDR_OF(create_tir_in, in, ctx);
++<<<<<<< HEAD
 +		mlx5e_build_indir_tir_ctx(priv, tt, tirc);
++=======
+ 		mlx5e_build_indir_tir_ctx_common(priv->mdev->mlx5e_res.hw_objs.td.tdn,
+ 						 priv->channels.params.tunneled_offload_en,
+ 						 indir_rqtn, tirc);
+ 		mlx5e_build_tir_ctx_lro(&lro_param, tirc);
+ 		mlx5e_build_indir_tir_ctx_hash(&priv->rx_res->rss_params,
+ 					       &tirc_default_config[tt], tirc, false);
+ 
++>>>>>>> 4b3e42eecb1c (net/mlx5e: Remove mdev from mlx5e_build_indir_tir_ctx_common())
  		err = mlx5e_create_tir(priv->mdev, tir, in);
  		if (err) {
  			mlx5_core_warn(priv->mdev, "create indirect tirs failed, %d\n", err);
@@@ -3250,9 -3191,14 +3276,18 @@@
  
  	for (i = 0; i < MLX5E_NUM_INDIR_TIRS; i++) {
  		memset(in, 0, inlen);
 -		tir = &res->rss[i].inner_indir_tir;
 +		tir = &priv->inner_indir_tir[i];
  		tirc = MLX5_ADDR_OF(create_tir_in, in, ctx);
++<<<<<<< HEAD
 +		mlx5e_build_inner_indir_tir_ctx(priv, i, tirc);
++=======
+ 		mlx5e_build_indir_tir_ctx_common(priv->mdev->mlx5e_res.hw_objs.td.tdn,
+ 						 priv->channels.params.tunneled_offload_en,
+ 						 indir_rqtn, tirc);
+ 		mlx5e_build_tir_ctx_lro(&lro_param, tirc);
+ 		mlx5e_build_indir_tir_ctx_hash(&priv->rx_res->rss_params,
+ 					       &tirc_default_config[i], tirc, true);
++>>>>>>> 4b3e42eecb1c (net/mlx5e: Remove mdev from mlx5e_build_indir_tir_ctx_common())
  		err = mlx5e_create_tir(priv->mdev, tir, in);
  		if (err) {
  			mlx5_core_warn(priv->mdev, "create inner indirect tirs failed, %d\n", err);
@@@ -3291,25 -3237,59 +3326,37 @@@ int mlx5e_create_direct_tirs(struct mlx
  	if (!in)
  		return -ENOMEM;
  
++<<<<<<< HEAD
 +	for (ix = 0; ix < n; ix++) {
 +		memset(in, 0, inlen);
 +		tir = &tirs[ix];
 +		tirc = MLX5_ADDR_OF(create_tir_in, in, ctx);
 +		mlx5e_build_direct_tir_ctx(priv, tir->rqt.rqtn, tirc);
 +		err = mlx5e_create_tir(priv->mdev, tir, in);
 +		if (unlikely(err))
 +			goto err_destroy_ch_tirs;
 +	}
++=======
+ 	tirc = MLX5_ADDR_OF(create_tir_in, in, ctx);
+ 	lro_param = mlx5e_get_lro_param(&priv->channels.params);
+ 	mlx5e_build_direct_tir_ctx(&lro_param,
+ 				   priv->mdev->mlx5e_res.hw_objs.td.tdn,
+ 				   priv->channels.params.tunneled_offload_en,
+ 				   mlx5e_rqt_get_rqtn(rqt), tirc);
+ 	err = mlx5e_create_tir(priv->mdev, tir, in);
+ 	if (unlikely(err))
+ 		mlx5_core_warn(priv->mdev, "create tirs failed, %d\n", err);
++>>>>>>> 4b3e42eecb1c (net/mlx5e: Remove mdev from mlx5e_build_indir_tir_ctx_common())
  
 -	kvfree(in);
 -
 -	return err;
 -}
 -
 -int mlx5e_create_direct_tirs(struct mlx5e_priv *priv)
 -{
 -	int err;
 -	int ix;
 -
 -	for (ix = 0; ix < priv->max_nch; ix++) {
 -		err = mlx5e_create_direct_tir(priv, &priv->rx_res->channels[ix].direct_tir,
 -					      &priv->rx_res->channels[ix].direct_rqt);
 -		if (err)
 -			goto err_destroy_tirs;
 -	}
 -
 -	return 0;
 -
 -err_destroy_tirs:
 -	while (--ix >= 0)
 -		mlx5e_destroy_tir(priv->mdev, &priv->rx_res->channels[ix].direct_tir);
 -
 -	return err;
 -}
 -
 -static int mlx5e_create_xsk_tirs(struct mlx5e_priv *priv)
 -{
 -	int err;
 -	int ix;
 -
 -	for (ix = 0; ix < priv->max_nch; ix++) {
 -		err = mlx5e_create_direct_tir(priv, &priv->rx_res->channels[ix].xsk_tir,
 -					      &priv->rx_res->channels[ix].xsk_rqt);
 -		if (err)
 -			goto err_destroy_tirs;
 -	}
 +	goto out;
  
 -	return 0;
 +err_destroy_ch_tirs:
 +	mlx5_core_warn(priv->mdev, "create tirs failed, %d\n", err);
 +	for (ix--; ix >= 0; ix--)
 +		mlx5e_destroy_tir(priv->mdev, &tirs[ix]);
  
 -err_destroy_tirs:
 -	while (--ix >= 0)
 -		mlx5e_destroy_tir(priv->mdev, &priv->rx_res->channels[ix].xsk_tir);
 +out:
 +	kvfree(in);
  
  	return err;
  }
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_main.c
