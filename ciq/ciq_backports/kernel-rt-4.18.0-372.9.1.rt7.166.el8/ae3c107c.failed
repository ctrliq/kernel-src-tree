numa: Move numa implementation to common code

jira LE-1907
Rebuild_History Non-Buildable kernel-rt-4.18.0-372.9.1.rt7.166.el8
commit-author Atish Patra <atish.patra@wdc.com>
commit ae3c107cd8bea82cb7cb427d9c5d305b8ce72216
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-rt-4.18.0-372.9.1.rt7.166.el8/ae3c107c.failed

ARM64 numa implementation is generic enough that RISC-V can reuse that
implementation with very minor cosmetic changes. This will help both
ARM64 and RISC-V in terms of maintanace and feature improvement

Move the numa implementation code to common directory so that both ISAs
can reuse this. This doesn't introduce any function changes for ARM64.

	Signed-off-by: Atish Patra <atish.patra@wdc.com>
	Acked-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
	Tested-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
	Acked-by: Catalin Marinas <catalin.marinas@arm.com>
	Signed-off-by: Palmer Dabbelt <palmerdabbelt@google.com>
(cherry picked from commit ae3c107cd8bea82cb7cb427d9c5d305b8ce72216)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/arm64/Kconfig
#	arch/arm64/include/asm/numa.h
diff --cc arch/arm64/Kconfig
index efb2a529c2cb,ff9f5c05cca3..000000000000
--- a/arch/arm64/Kconfig
+++ b/arch/arm64/Kconfig
@@@ -962,12 -994,12 +962,17 @@@ config HOTPLUG_CP
  
  # Common NUMA Features
  config NUMA
++<<<<<<< HEAD
 +	bool "Numa Memory Allocation and Scheduler Support"
++=======
+ 	bool "NUMA Memory Allocation and Scheduler Support"
+ 	select GENERIC_ARCH_NUMA
++>>>>>>> ae3c107cd8be (numa: Move numa implementation to common code)
  	select ACPI_NUMA if ACPI
  	select OF_NUMA
 +	select CPUMASK_OFFSTACK
  	help
 -	  Enable NUMA (Non-Uniform Memory Access) support.
 +	  Enable NUMA (Non Uniform Memory Access) support.
  
  	  The kernel will try to allocate memory used by a CPU on the
  	  local memory of the CPU and add some more
diff --cc arch/arm64/include/asm/numa.h
index 626ad01e83bf,8c8cf4297cc3..000000000000
--- a/arch/arm64/include/asm/numa.h
+++ b/arch/arm64/include/asm/numa.h
@@@ -3,49 -3,6 +3,53 @@@
  #define __ASM_NUMA_H
  
  #include <asm/topology.h>
++<<<<<<< HEAD
 +
 +#ifdef CONFIG_NUMA
 +
 +#define NR_NODE_MEMBLKS		(MAX_NUMNODES * 2)
 +
 +int __node_distance(int from, int to);
 +#define node_distance(a, b) __node_distance(a, b)
 +
 +extern nodemask_t numa_nodes_parsed __initdata;
 +
 +extern bool numa_off;
 +
 +/* Mappings between node number and cpus on that node. */
 +extern cpumask_var_t node_to_cpumask_map[MAX_NUMNODES];
 +void numa_clear_node(unsigned int cpu);
 +
 +#ifdef CONFIG_DEBUG_PER_CPU_MAPS
 +const struct cpumask *cpumask_of_node(int node);
 +#else
 +/* Returns a pointer to the cpumask of CPUs on Node 'node'. */
 +static inline const struct cpumask *cpumask_of_node(int node)
 +{
 +	return node_to_cpumask_map[node];
 +}
 +#endif
 +
 +void __init arm64_numa_init(void);
 +int __init numa_add_memblk(int nodeid, u64 start, u64 end);
 +void __init numa_set_distance(int from, int to, int distance);
 +void __init numa_free_distance(void);
 +void __init early_map_cpu_to_node(unsigned int cpu, int nid);
 +void numa_store_cpu_info(unsigned int cpu);
 +void numa_add_cpu(unsigned int cpu);
 +void numa_remove_cpu(unsigned int cpu);
 +
 +#else	/* CONFIG_NUMA */
 +
 +static inline void numa_store_cpu_info(unsigned int cpu) { }
 +static inline void numa_add_cpu(unsigned int cpu) { }
 +static inline void numa_remove_cpu(unsigned int cpu) { }
 +static inline void arm64_numa_init(void) { }
 +static inline void early_map_cpu_to_node(unsigned int cpu, int nid) { }
 +
 +#endif	/* CONFIG_NUMA */
++=======
+ #include <asm-generic/numa.h>
++>>>>>>> ae3c107cd8be (numa: Move numa implementation to common code)
  
  #endif	/* __ASM_NUMA_H */
* Unmerged path arch/arm64/Kconfig
* Unmerged path arch/arm64/include/asm/numa.h
diff --git a/arch/arm64/mm/Makefile b/arch/arm64/mm/Makefile
index d91030f0ffee..928c308b044b 100644
--- a/arch/arm64/mm/Makefile
+++ b/arch/arm64/mm/Makefile
@@ -6,7 +6,6 @@ obj-y				:= dma-mapping.o extable.o fault.o init.o \
 obj-$(CONFIG_HUGETLB_PAGE)	+= hugetlbpage.o
 obj-$(CONFIG_PTDUMP_CORE)	+= dump.o
 obj-$(CONFIG_PTDUMP_DEBUGFS)	+= ptdump_debugfs.o
-obj-$(CONFIG_NUMA)		+= numa.o
 obj-$(CONFIG_DEBUG_VIRTUAL)	+= physaddr.o
 KASAN_SANITIZE_physaddr.o	+= n
 
diff --git a/drivers/base/Kconfig b/drivers/base/Kconfig
index 171c5301057b..fb184637fefc 100644
--- a/drivers/base/Kconfig
+++ b/drivers/base/Kconfig
@@ -291,4 +291,10 @@ config GENERIC_ARCH_TOPOLOGY
 	  appropriate scaling, sysfs interface for changing capacity values at
 	  runtime.
 
+config GENERIC_ARCH_NUMA
+	bool
+	help
+	  Enable support for generic NUMA implementation. Currently, RISC-V
+	  and ARM64 use it.
+
 endmenu
diff --git a/drivers/base/Makefile b/drivers/base/Makefile
index b0d46a4a7f79..1611f64c4d30 100644
--- a/drivers/base/Makefile
+++ b/drivers/base/Makefile
@@ -24,6 +24,7 @@ obj-$(CONFIG_PINCTRL) += pinctrl.o
 obj-$(CONFIG_DEV_COREDUMP) += devcoredump.o
 obj-$(CONFIG_GENERIC_MSI_IRQ_DOMAIN) += platform-msi.o
 obj-$(CONFIG_GENERIC_ARCH_TOPOLOGY) += arch_topology.o
+obj-$(CONFIG_GENERIC_ARCH_NUMA) += arch_numa.o
 
 obj-y			+= test/
 
diff --git a/arch/arm64/mm/numa.c b/drivers/base/arch_numa.c
similarity index 100%
rename from arch/arm64/mm/numa.c
rename to drivers/base/arch_numa.c
diff --git a/include/asm-generic/numa.h b/include/asm-generic/numa.h
new file mode 100644
index 000000000000..1a3ad6d29833
--- /dev/null
+++ b/include/asm-generic/numa.h
@@ -0,0 +1,52 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+#ifndef __ASM_GENERIC_NUMA_H
+#define __ASM_GENERIC_NUMA_H
+
+#ifdef CONFIG_NUMA
+
+#define NR_NODE_MEMBLKS		(MAX_NUMNODES * 2)
+
+int __node_distance(int from, int to);
+#define node_distance(a, b) __node_distance(a, b)
+
+extern nodemask_t numa_nodes_parsed __initdata;
+
+extern bool numa_off;
+
+/* Mappings between node number and cpus on that node. */
+extern cpumask_var_t node_to_cpumask_map[MAX_NUMNODES];
+void numa_clear_node(unsigned int cpu);
+
+#ifdef CONFIG_DEBUG_PER_CPU_MAPS
+const struct cpumask *cpumask_of_node(int node);
+#else
+/* Returns a pointer to the cpumask of CPUs on Node 'node'. */
+static inline const struct cpumask *cpumask_of_node(int node)
+{
+	if (node == NUMA_NO_NODE)
+		return cpu_all_mask;
+
+	return node_to_cpumask_map[node];
+}
+#endif
+
+void __init arch_numa_init(void);
+int __init numa_add_memblk(int nodeid, u64 start, u64 end);
+void __init numa_set_distance(int from, int to, int distance);
+void __init numa_free_distance(void);
+void __init early_map_cpu_to_node(unsigned int cpu, int nid);
+void numa_store_cpu_info(unsigned int cpu);
+void numa_add_cpu(unsigned int cpu);
+void numa_remove_cpu(unsigned int cpu);
+
+#else	/* CONFIG_NUMA */
+
+static inline void numa_store_cpu_info(unsigned int cpu) { }
+static inline void numa_add_cpu(unsigned int cpu) { }
+static inline void numa_remove_cpu(unsigned int cpu) { }
+static inline void arch_numa_init(void) { }
+static inline void early_map_cpu_to_node(unsigned int cpu, int nid) { }
+
+#endif	/* CONFIG_NUMA */
+
+#endif	/* __ASM_GENERIC_NUMA_H */
