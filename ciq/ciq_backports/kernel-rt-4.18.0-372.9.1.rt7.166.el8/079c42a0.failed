PM: domains: Make set_performance_state() callback optional

jira LE-1907
Rebuild_History Non-Buildable kernel-rt-4.18.0-372.9.1.rt7.166.el8
commit-author Dmitry Osipenko <digetx@gmail.com>
commit 079c42a0ed73500f1d11b5564e31d56c52bee21e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-rt-4.18.0-372.9.1.rt7.166.el8/079c42a0.failed

Make set_performance_state() callback optional in order to remove the
need from power domain drivers to implement a dummy callback. If callback
isn't implemented by a GENPD driver, then the performance state is passed
to the parent domain.

	Tested-by: Peter Geis <pgwipeout@gmail.com>
	Tested-by: Nicolas Chauvet <kwizart@gmail.com>
	Tested-by: Matt Merhar <mattmerhar@protonmail.com>
[tested on NVIDIA Tegra20/30/124 SoCs]
	Suggested-by: Ulf Hansson <ulf.hansson@linaro.org>
	Reviewed-by: Ulf Hansson <ulf.hansson@linaro.org>
	Signed-off-by: Dmitry Osipenko <digetx@gmail.com>
	Reviewed-by: Viresh Kumar <viresh.kumar@linaro.org>
	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
(cherry picked from commit 079c42a0ed73500f1d11b5564e31d56c52bee21e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/base/power/domain.c
diff --cc drivers/base/power/domain.c
index 69bb53feefac,4878c824e66c..000000000000
--- a/drivers/base/power/domain.c
+++ b/drivers/base/power/domain.c
@@@ -309,17 -319,12 +321,22 @@@ static int _genpd_set_performance_state
  	if (state == genpd->performance_state)
  		return 0;
  
 -	/* Propagate to parents of genpd */
 -	list_for_each_entry(link, &genpd->child_links, child_node) {
 -		parent = link->parent;
 +	/* Propagate to masters of genpd */
 +	list_for_each_entry(link, &genpd->slave_links, slave_node) {
 +		master = link->master;
 +
++<<<<<<< HEAD
 +		if (!master->set_performance_state)
 +			continue;
  
 +		/* Find master's performance state */
 +		ret = dev_pm_opp_xlate_performance_state(genpd->opp_table,
 +							 master->opp_table,
 +							 state);
++=======
+ 		/* Find parent's performance state */
+ 		ret = genpd_xlate_performance_state(genpd, parent, state);
++>>>>>>> 079c42a0ed73 (PM: domains: Make set_performance_state() callback optional)
  		if (unlikely(ret < 0))
  			goto err;
  
@@@ -350,26 -357,23 +369,30 @@@
  
  err:
  	/* Encountered an error, lets rollback */
 -	list_for_each_entry_continue_reverse(link, &genpd->child_links,
 -					     child_node) {
 -		parent = link->parent;
 +	list_for_each_entry_continue_reverse(link, &genpd->slave_links,
 +					     slave_node) {
 +		master = link->master;
  
++<<<<<<< HEAD
 +		if (!master->set_performance_state)
 +			continue;
 +
 +		genpd_lock_nested(master, depth + 1);
++=======
+ 		genpd_lock_nested(parent, depth + 1);
++>>>>>>> 079c42a0ed73 (PM: domains: Make set_performance_state() callback optional)
  
 -		parent_state = link->prev_performance_state;
 -		link->performance_state = parent_state;
 +		master_state = link->prev_performance_state;
 +		link->performance_state = master_state;
  
 -		parent_state = _genpd_reeval_performance_state(parent,
 -						parent_state);
 -		if (_genpd_set_performance_state(parent, parent_state, depth + 1)) {
 +		master_state = _genpd_reeval_performance_state(master,
 +						master_state);
 +		if (_genpd_set_performance_state(master, master_state, depth + 1)) {
  			pr_err("%s: Failed to roll back to %d performance state\n",
 -			       parent->name, parent_state);
 +			       master->name, master_state);
  		}
  
 -		genpd_unlock(parent);
 +		genpd_unlock(master);
  	}
  
  	return ret;
@@@ -397,13 -401,10 +420,10 @@@ int dev_pm_genpd_set_performance_state(
  	unsigned int prev;
  	int ret;
  
 -	genpd = dev_to_genpd_safe(dev);
 -	if (!genpd)
 +	genpd = dev_to_genpd(dev);
 +	if (IS_ERR(genpd))
  		return -ENODEV;
  
- 	if (unlikely(!genpd->set_performance_state))
- 		return -EINVAL;
- 
  	if (WARN_ON(!dev->power.subsys_data ||
  		     !dev->power.subsys_data->domain_data))
  		return -EINVAL;
* Unmerged path drivers/base/power/domain.c
