rtw88: Disable PCIe ASPM while doing NAPI poll on 8821CE

jira LE-1907
Rebuild_History Non-Buildable kernel-rt-4.18.0-372.9.1.rt7.166.el8
commit-author Kai-Heng Feng <kai.heng.feng@canonical.com>
commit 24f5e38a13b5ae2b6105cda8bb47c19108e62a9a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-rt-4.18.0-372.9.1.rt7.166.el8/24f5e38a.failed

Many Intel based platforms face system random freeze after commit
9e2fd29864c5 ("rtw88: add napi support").

The commit itself shouldn't be the culprit. My guess is that the 8821CE
only leaves ASPM L1 for a short period when IRQ is raised. Since IRQ is
masked during NAPI polling, the PCIe link stays at L1 and makes RX DMA
extremely slow. Eventually the RX ring becomes messed up:
[ 1133.194697] rtw_8821ce 0000:02:00.0: pci bus timeout, check dma status

Since the 8821CE hardware may fail to leave ASPM L1, manually do it in
the driver to resolve the issue.

Fixes: 9e2fd29864c5 ("rtw88: add napi support")
Bugzilla: https://bugzilla.kernel.org/show_bug.cgi?id=215131
BugLink: https://bugs.launchpad.net/bugs/1927808
	Signed-off-by: Kai-Heng Feng <kai.heng.feng@canonical.com>
	Acked-by: Jian-Hong Pan <jhp@endlessos.org>
	Signed-off-by: Kalle Valo <kvalo@kernel.org>
Link: https://lore.kernel.org/r/20211215114635.333767-1-kai.heng.feng@canonical.com
(cherry picked from commit 24f5e38a13b5ae2b6105cda8bb47c19108e62a9a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/wireless/realtek/rtw88/pci.c
diff --cc drivers/net/wireless/realtek/rtw88/pci.c
index a7a6ebfaa203,08cf66141889..000000000000
--- a/drivers/net/wireless/realtek/rtw88/pci.c
+++ b/drivers/net/wireless/realtek/rtw88/pci.c
@@@ -1702,45 -1710,6 +1710,48 @@@ static void rtw_pci_napi_deinit(struct 
  	netif_napi_del(&rtwpci->napi);
  }
  
++<<<<<<< HEAD
 +enum rtw88_quirk_dis_pci_caps {
 +	QUIRK_DIS_PCI_CAP_MSI,
 +	QUIRK_DIS_PCI_CAP_ASPM,
 +};
 +
 +static int disable_pci_caps(const struct dmi_system_id *dmi)
 +{
 +	uintptr_t dis_caps = (uintptr_t)dmi->driver_data;
 +
 +	if (dis_caps & BIT(QUIRK_DIS_PCI_CAP_MSI))
 +		rtw_disable_msi = true;
 +	if (dis_caps & BIT(QUIRK_DIS_PCI_CAP_ASPM))
 +		rtw_pci_disable_aspm = true;
 +
 +	return 1;
 +}
 +
 +static const struct dmi_system_id rtw88_pci_quirks[] = {
 +	{
 +		.callback = disable_pci_caps,
 +		.ident = "Protempo Ltd L116HTN6SPW",
 +		.matches = {
 +			DMI_MATCH(DMI_SYS_VENDOR, "Protempo Ltd"),
 +			DMI_MATCH(DMI_PRODUCT_NAME, "L116HTN6SPW"),
 +		},
 +		.driver_data = (void *)BIT(QUIRK_DIS_PCI_CAP_ASPM),
 +	},
 +	{
 +		.callback = disable_pci_caps,
 +		.ident = "HP HP Pavilion Laptop 14-ce0xxx",
 +		.matches = {
 +			DMI_MATCH(DMI_SYS_VENDOR, "HP"),
 +			DMI_MATCH(DMI_PRODUCT_NAME, "HP Pavilion Laptop 14-ce0xxx"),
 +		},
 +		.driver_data = (void *)BIT(QUIRK_DIS_PCI_CAP_ASPM),
 +	},
 +	{}
 +};
 +
++=======
++>>>>>>> 24f5e38a13b5 (rtw88: Disable PCIe ASPM while doing NAPI poll on 8821CE)
  int rtw_pci_probe(struct pci_dev *pdev,
  		  const struct pci_device_id *id)
  {
* Unmerged path drivers/net/wireless/realtek/rtw88/pci.c
diff --git a/drivers/net/wireless/realtek/rtw88/pci.h b/drivers/net/wireless/realtek/rtw88/pci.h
index 66f78eb7757c..0c37efd8c66f 100644
--- a/drivers/net/wireless/realtek/rtw88/pci.h
+++ b/drivers/net/wireless/realtek/rtw88/pci.h
@@ -223,6 +223,8 @@ struct rtw_pci {
 	struct rtw_pci_tx_ring tx_rings[RTK_MAX_TX_QUEUE_NUM];
 	struct rtw_pci_rx_ring rx_rings[RTK_MAX_RX_QUEUE_NUM];
 	u16 link_ctrl;
+	atomic_t link_usage;
+	bool rx_no_aspm;
 	DECLARE_BITMAP(flags, NUM_OF_RTW_PCI_FLAGS);
 
 	void __iomem *mmap;
