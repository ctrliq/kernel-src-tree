net/mlx5e: Abstract MQPRIO params

jira LE-1907
Rebuild_History Non-Buildable kernel-rt-4.18.0-372.9.1.rt7.166.el8
commit-author Tariq Toukan <tariqt@nvidia.com>
commit 86d747a3f9697abe477ad8fe847afa738d3991a0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-rt-4.18.0-372.9.1.rt7.166.el8/86d747a3.failed

Abstract the MQPRIO params into a struct.
Use a getter for DCB mode num_tcs.

	Signed-off-by: Tariq Toukan <tariqt@nvidia.com>
	Reviewed-by: Maxim Mikityanskiy <maximmi@nvidia.com>
	Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
(cherry picked from commit 86d747a3f9697abe477ad8fe847afa738d3991a0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en/ptp.c
#	drivers/net/ethernet/mellanox/mlx5/core/en/reporter_tx.c
#	drivers/net/ethernet/mellanox/mlx5/core/en_main.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en/ptp.c
index f9afbdefded5,ee688dec67a9..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en/ptp.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en/ptp.c
@@@ -412,20 -479,51 +416,20 @@@ static void mlx5e_ptp_build_params(stru
  	params->num_channels = orig->num_channels;
  	params->hard_mtu = orig->hard_mtu;
  	params->sw_mtu = orig->sw_mtu;
- 	params->num_tc = orig->num_tc;
+ 	params->mqprio = orig->mqprio;
  
  	/* SQ */
 -	if (test_bit(MLX5E_PTP_STATE_TX, c->state)) {
 -		params->log_sq_size = orig->log_sq_size;
 -		mlx5e_ptp_build_sq_param(c->mdev, params, &cparams->txq_sq_param);
 -	}
 -	/* RQ */
 -	if (test_bit(MLX5E_PTP_STATE_RX, c->state)) {
 -		params->vlan_strip_disable = orig->vlan_strip_disable;
 -		mlx5e_ptp_build_rq_param(c->mdev, c->netdev, c->priv->q_counter, cparams);
 -	}
 -}
 +	params->log_sq_size = orig->log_sq_size;
  
 -static int mlx5e_init_ptp_rq(struct mlx5e_ptp *c, struct mlx5e_params *params,
 -			     struct mlx5e_rq *rq)
 -{
 -	struct mlx5_core_dev *mdev = c->mdev;
 -	struct mlx5e_priv *priv = c->priv;
 -	int err;
 -
 -	rq->wq_type      = params->rq_wq_type;
 -	rq->pdev         = c->pdev;
 -	rq->netdev       = priv->netdev;
 -	rq->priv         = priv;
 -	rq->clock        = &mdev->clock;
 -	rq->tstamp       = &priv->tstamp;
 -	rq->mdev         = mdev;
 -	rq->hw_mtu       = MLX5E_SW2HW_MTU(params, params->sw_mtu);
 -	rq->stats        = &c->priv->ptp_stats.rq;
 -	rq->ptp_cyc2time = mlx5_rq_ts_translator(mdev);
 -	err = mlx5e_rq_set_handlers(rq, params, false);
 -	if (err)
 -		return err;
 -
 -	return xdp_rxq_info_reg(&rq->xdp_rxq, rq->netdev, rq->ix, 0);
 +	mlx5e_ptp_build_sq_param(c->mdev, params, &cparams->txq_sq_param);
  }
  
 -static int mlx5e_ptp_open_rq(struct mlx5e_ptp *c, struct mlx5e_params *params,
 -			     struct mlx5e_rq_param *rq_param)
 +static int mlx5e_ptp_open_queues(struct mlx5e_port_ptp *c,
 +				 struct mlx5e_ptp_params *cparams)
  {
 -	int node = dev_to_node(c->mdev->device);
  	int err;
  
 -	err = mlx5e_init_ptp_rq(c, params, &c->rq);
 +	err = mlx5e_ptp_open_cqs(c, cparams);
  	if (err)
  		return err;
  
@@@ -474,11 -684,14 +478,16 @@@ int mlx5e_port_ptp_open(struct mlx5e_pr
  	c->pdev     = mlx5_core_dma_dev(priv->mdev);
  	c->netdev   = priv->netdev;
  	c->mkey_be  = cpu_to_be32(priv->mdev->mlx5e_res.hw_objs.mkey.key);
++<<<<<<< HEAD
 +	c->num_tc   = params->num_tc;
 +	c->stats    = &priv->port_ptp_stats.ch;
 +	c->irq_desc = irq_to_desc(irq);
++=======
+ 	c->num_tc   = mlx5e_get_dcb_num_tc(params);
+ 	c->stats    = &priv->ptp_stats.ch;
++>>>>>>> 86d747a3f969 (net/mlx5e: Abstract MQPRIO params)
  	c->lag_port = lag_port;
  
 -	err = mlx5e_ptp_set_state(c, params);
 -	if (err)
 -		goto err_free;
 -
  	netif_napi_add(netdev, &c->napi, mlx5e_ptp_napi_poll, 64);
  
  	mlx5e_ptp_build_params(c, cparams, params);
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en/reporter_tx.c
index 54f69a73efb5,bb682fd751c9..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en/reporter_tx.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en/reporter_tx.c
@@@ -380,10 -381,10 +380,10 @@@ static int mlx5e_tx_reporter_diagnose(s
  		}
  	}
  
 -	if (!ptp_ch || !test_bit(MLX5E_PTP_STATE_TX, ptp_ch->state))
 +	if (!ptp_ch)
  		goto close_sqs_nest;
  
- 	for (tc = 0; tc < priv->channels.params.num_tc; tc++) {
+ 	for (tc = 0; tc < mlx5e_get_dcb_num_tc(&priv->channels.params); tc++) {
  		err = mlx5e_tx_reporter_build_diagnose_output_ptpsq(fmsg,
  								    &ptp_ch->ptpsq[tc],
  								    tc);
@@@ -510,8 -503,8 +510,13 @@@ static int mlx5e_tx_reporter_dump_all_s
  		}
  	}
  
++<<<<<<< HEAD
 +	if (ptp_ch) {
 +		for (tc = 0; tc < priv->channels.params.num_tc; tc++) {
++=======
+ 	if (ptp_ch && test_bit(MLX5E_PTP_STATE_TX, ptp_ch->state)) {
+ 		for (tc = 0; tc < mlx5e_get_dcb_num_tc(&priv->channels.params); tc++) {
++>>>>>>> 86d747a3f969 (net/mlx5e: Abstract MQPRIO params)
  			struct mlx5e_txqsq *sq = &ptp_ch->ptpsq[tc].txqsq;
  
  			err = mlx5e_health_queue_dump(priv, fmsg, sq->sqn, "PTP SQ");
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_main.c
index 15e30d82e985,b2f95cd34622..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
@@@ -3387,23 -2869,11 +3387,28 @@@ static int mlx5e_setup_tc_mqprio(struc
  		goto out;
  	}
  
++<<<<<<< HEAD
 +	new_channels.params = priv->channels.params;
 +	new_channels.params.num_tc = tc ? tc : 1;
++=======
+ 	new_params = priv->channels.params;
+ 	new_params.mqprio.num_tc = tc ? tc : 1;
++>>>>>>> 86d747a3f969 (net/mlx5e: Abstract MQPRIO params)
  
 -	err = mlx5e_safe_switch_params(priv, &new_params,
 -				       mlx5e_num_channels_changed_ctx, NULL, true);
 +	if (!test_bit(MLX5E_STATE_OPENED, &priv->state)) {
 +		struct mlx5e_params old_params;
 +
 +		old_params = priv->channels.params;
 +		priv->channels.params = new_channels.params;
 +		err = mlx5e_num_channels_changed(priv);
 +		if (err)
 +			priv->channels.params = old_params;
 +
 +		goto out;
 +	}
 +
 +	err = mlx5e_safe_switch_channels(priv, &new_channels,
 +					 mlx5e_num_channels_changed_ctx, NULL);
  
  out:
  	priv->max_opened_tc = max_t(u8, priv->max_opened_tc,
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en.h b/drivers/net/ethernet/mellanox/mlx5/core/en.h
index 73a162266789..29a98601e2d0 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en.h
@@ -252,7 +252,9 @@ struct mlx5e_params {
 	u8  rq_wq_type;
 	u8  log_rq_mtu_frames;
 	u16 num_channels;
-	u8  num_tc;
+	struct {
+		u8 num_tc;
+	} mqprio;
 	bool rx_cqe_compress_def;
 	struct dim_cq_moder rx_cq_moderation;
 	struct dim_cq_moder tx_cq_moderation;
@@ -271,6 +273,11 @@ struct mlx5e_params {
 	int hard_mtu;
 };
 
+static inline u8 mlx5e_get_dcb_num_tc(struct mlx5e_params *params)
+{
+	return params->mqprio.num_tc;
+}
+
 enum {
 	MLX5E_RQ_STATE_ENABLED,
 	MLX5E_RQ_STATE_RECOVERING,
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en/ptp.c
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en/qos.c b/drivers/net/ethernet/mellanox/mlx5/core/en/qos.c
index 1fd8baf19829..e8a8d78e3e4d 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en/qos.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en/qos.c
@@ -132,7 +132,7 @@ static u16 mlx5e_qid_from_qos(struct mlx5e_channels *chs, u16 qid)
 	 */
 	bool is_ptp = MLX5E_GET_PFLAG(&chs->params, MLX5E_PFLAG_TX_PORT_TS);
 
-	return (chs->params.num_channels + is_ptp) * chs->params.num_tc + qid;
+	return (chs->params.num_channels + is_ptp) * mlx5e_get_dcb_num_tc(&chs->params) + qid;
 }
 
 int mlx5e_get_txq_by_classid(struct mlx5e_priv *priv, u16 classid)
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en/reporter_tx.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_main.c
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en_rep.c b/drivers/net/ethernet/mellanox/mlx5/core/en_rep.c
index 98da6dcc9ee9..77021b9bccfa 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_rep.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_rep.c
@@ -368,7 +368,8 @@ int mlx5e_add_sqs_fwd_rules(struct mlx5e_priv *priv)
 	int err = -ENOMEM;
 	u32 *sqs;
 
-	sqs = kcalloc(priv->channels.num * priv->channels.params.num_tc, sizeof(*sqs), GFP_KERNEL);
+	sqs = kcalloc(priv->channels.num * mlx5e_get_dcb_num_tc(&priv->channels.params),
+		      sizeof(*sqs), GFP_KERNEL);
 	if (!sqs)
 		goto out;
 
@@ -585,7 +586,7 @@ static void mlx5e_build_rep_params(struct net_device *netdev)
 	params->rx_dim_enabled = MLX5_CAP_GEN(mdev, cq_moderation);
 	mlx5e_set_rx_cq_mode_params(params, cq_period_mode);
 
-	params->num_tc                = 1;
+	params->mqprio.num_tc       = 1;
 	params->tunneled_offload_en = false;
 
 	mlx5_query_min_inline(mdev, &params->tx_min_inline_mode);
