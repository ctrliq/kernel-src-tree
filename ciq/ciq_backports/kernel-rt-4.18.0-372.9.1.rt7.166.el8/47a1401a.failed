vdpa: Use BIT_ULL for bit operations

jira LE-1907
Rebuild_History Non-Buildable kernel-rt-4.18.0-372.9.1.rt7.166.el8
commit-author Eli Cohen <elic@nvidia.com>
commit 47a1401ac95f95936148b813843ee51d516921ea
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-rt-4.18.0-372.9.1.rt7.166.el8/47a1401a.failed

All masks in this file are 64 bits. Change BIT to BIT_ULL.

Other occurences use (1 << val) which yields a 32 bit value. Change them
to use BIT_ULL too.

	Reviewed-by: Si-Wei Liu <si-wei.liu@oracle.com>
	Signed-off-by: Eli Cohen <elic@nvidia.com>
Link: https://lore.kernel.org/r/20220105114646.577224-14-elic@nvidia.com
	Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
	Acked-by: Jason Wang <jasowang@redhat.com>
(cherry picked from commit 47a1401ac95f95936148b813843ee51d516921ea)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/vdpa/vdpa.c
diff --cc drivers/vdpa/vdpa.c
index 2703bbc9306a,4380367d00b5..000000000000
--- a/drivers/vdpa/vdpa.c
+++ b/drivers/vdpa/vdpa.c
@@@ -582,9 -590,16 +582,16 @@@ out
  	return msg->len;
  }
  
++<<<<<<< HEAD
++=======
+ #define VDPA_DEV_NET_ATTRS_MASK (BIT_ULL(VDPA_ATTR_DEV_NET_CFG_MACADDR) | \
+ 				 BIT_ULL(VDPA_ATTR_DEV_NET_CFG_MTU)     | \
+ 				 BIT_ULL(VDPA_ATTR_DEV_NET_CFG_MAX_VQP))
+ 
++>>>>>>> 47a1401ac95f (vdpa: Use BIT_ULL for bit operations)
  static int vdpa_nl_cmd_dev_add_set_doit(struct sk_buff *skb, struct genl_info *info)
  {
 -	struct vdpa_dev_set_config config = {};
 -	struct nlattr **nl_attrs = info->attrs;
  	struct vdpa_mgmt_dev *mdev;
 -	const u8 *macaddr;
  	const char *name;
  	int err = 0;
  
@@@ -593,6 -608,36 +600,39 @@@
  
  	name = nla_data(info->attrs[VDPA_ATTR_DEV_NAME]);
  
++<<<<<<< HEAD
++=======
+ 	if (nl_attrs[VDPA_ATTR_DEV_NET_CFG_MACADDR]) {
+ 		macaddr = nla_data(nl_attrs[VDPA_ATTR_DEV_NET_CFG_MACADDR]);
+ 		memcpy(config.net.mac, macaddr, sizeof(config.net.mac));
+ 		config.mask |= BIT_ULL(VDPA_ATTR_DEV_NET_CFG_MACADDR);
+ 	}
+ 	if (nl_attrs[VDPA_ATTR_DEV_NET_CFG_MTU]) {
+ 		config.net.mtu =
+ 			nla_get_u16(nl_attrs[VDPA_ATTR_DEV_NET_CFG_MTU]);
+ 		config.mask |= BIT_ULL(VDPA_ATTR_DEV_NET_CFG_MTU);
+ 	}
+ 	if (nl_attrs[VDPA_ATTR_DEV_NET_CFG_MAX_VQP]) {
+ 		config.net.max_vq_pairs =
+ 			nla_get_u16(nl_attrs[VDPA_ATTR_DEV_NET_CFG_MAX_VQP]);
+ 		if (!config.net.max_vq_pairs) {
+ 			NL_SET_ERR_MSG_MOD(info->extack,
+ 					   "At least one pair of VQs is required");
+ 			return -EINVAL;
+ 		}
+ 		config.mask |= BIT_ULL(VDPA_ATTR_DEV_NET_CFG_MAX_VQP);
+ 	}
+ 
+ 	/* Skip checking capability if user didn't prefer to configure any
+ 	 * device networking attributes. It is likely that user might have used
+ 	 * a device specific method to configure such attributes or using device
+ 	 * default attributes.
+ 	 */
+ 	if ((config.mask & VDPA_DEV_NET_ATTRS_MASK) &&
+ 	    !netlink_capable(skb, CAP_NET_ADMIN))
+ 		return -EPERM;
+ 
++>>>>>>> 47a1401ac95f (vdpa: Use BIT_ULL for bit operations)
  	mutex_lock(&vdpa_dev_mutex);
  	mdev = vdpa_mgmtdev_get_from_attr(info->attrs);
  	if (IS_ERR(mdev)) {
* Unmerged path drivers/vdpa/vdpa.c
