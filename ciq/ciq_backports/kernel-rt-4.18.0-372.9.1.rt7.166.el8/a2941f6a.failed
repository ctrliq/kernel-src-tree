nvme: add command id quirk for apple controllers

jira LE-1907
Rebuild_History Non-Buildable kernel-rt-4.18.0-372.9.1.rt7.166.el8
commit-author Keith Busch <kbusch@kernel.org>
commit a2941f6aa71a72be2c82c0a168523a492d093530
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-rt-4.18.0-372.9.1.rt7.166.el8/a2941f6a.failed

Some apple controllers use the command id as an index to implementation
specific data structures and will fail if the value is out of bounds.
The nvme driver's recently introduced command sequence number breaks
this controller.

Provide a quirk so these spec incompliant controllers can function as
before. The driver will not have the ability to detect bad completions
when this quirk is used, but we weren't previously checking this anyway.

The quirk bit was selected so that it can readily apply to stable.

Link: https://bugzilla.kernel.org/show_bug.cgi?id=214509
	Cc: Sven Peter <sven@svenpeter.dev>
	Reported-by: Orlando Chamberlain <redecorating@protonmail.com>
	Reported-by: Aditya Garg <gargaditya08@live.com>
	Signed-off-by: Keith Busch <kbusch@kernel.org>
	Reviewed-by: Christoph Hellwig <hch@lst.de>
	Tested-by: Sven Peter <sven@svenpeter.dev>
Link: https://lore.kernel.org/r/20210927154306.387437-1-kbusch@kernel.org
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit a2941f6aa71a72be2c82c0a168523a492d093530)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/nvme/host/core.c
diff --cc drivers/nvme/host/core.c
index 3aac79362944,7712a8f78337..000000000000
--- a/drivers/nvme/host/core.c
+++ b/drivers/nvme/host/core.c
@@@ -1075,7 -1027,9 +1076,13 @@@ blk_status_t nvme_setup_cmd(struct nvme
  		return BLK_STS_IOERR;
  	}
  
++<<<<<<< HEAD
 +	cmd->common.command_id = req->tag;
++=======
+ 	if (!(ctrl->quirks & NVME_QUIRK_SKIP_CID_GEN))
+ 		nvme_req(req)->genctr++;
+ 	cmd->common.command_id = nvme_cid(req);
++>>>>>>> a2941f6aa71a (nvme: add command id quirk for apple controllers)
  	trace_nvme_setup_cmd(req, cmd);
  	return ret;
  }
* Unmerged path drivers/nvme/host/core.c
diff --git a/drivers/nvme/host/nvme.h b/drivers/nvme/host/nvme.h
index b96a51edbfef..010f024e923b 100644
--- a/drivers/nvme/host/nvme.h
+++ b/drivers/nvme/host/nvme.h
@@ -149,6 +149,12 @@ enum nvme_quirks {
 	 * 48 bits.
 	 */
 	NVME_QUIRK_DMA_ADDRESS_BITS_48		= (1 << 16),
+
+	/*
+	 * The controller requires the command_id value be be limited, so skip
+	 * encoding the generation sequence number.
+	 */
+	NVME_QUIRK_SKIP_CID_GEN			= (1 << 17),
 };
 
 /*
diff --git a/drivers/nvme/host/pci.c b/drivers/nvme/host/pci.c
index 6815aaa46329..e74cff868c9d 100644
--- a/drivers/nvme/host/pci.c
+++ b/drivers/nvme/host/pci.c
@@ -3195,7 +3195,8 @@ static const struct pci_device_id nvme_id_table[] = {
 	{ PCI_DEVICE(PCI_VENDOR_ID_APPLE, 0x2005),
 		.driver_data = NVME_QUIRK_SINGLE_VECTOR |
 				NVME_QUIRK_128_BYTES_SQES |
-				NVME_QUIRK_SHARED_TAGS },
+				NVME_QUIRK_SHARED_TAGS |
+				NVME_QUIRK_SKIP_CID_GEN },
 
 	{ PCI_DEVICE_CLASS(PCI_CLASS_STORAGE_EXPRESS, 0xffffff) },
 	{ 0, }
