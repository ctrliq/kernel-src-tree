net/mlx5e: Use a new initializer to build uniform indir table

jira LE-1907
Rebuild_History Non-Buildable kernel-rt-4.18.0-372.9.1.rt7.166.el8
commit-author Maxim Mikityanskiy <maximmi@nvidia.com>
commit 43befe99bc62a019142f4760b3c3e29c4892565a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-rt-4.18.0-372.9.1.rt7.166.el8/43befe99.failed

Replace mlx5e_build_default_indir_rqt with a new initializer of struct
mlx5e_rss_params_indir that works directly with the struct, rather than
its internals.

The new initializer is called mlx5e_rss_params_indir_init_uniform, which
also reflects the purpose (uniform spreading) better.

	Signed-off-by: Maxim Mikityanskiy <maximmi@nvidia.com>
	Reviewed-by: Tariq Toukan <tariqt@nvidia.com>
	Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
(cherry picked from commit 43befe99bc62a019142f4760b3c3e29c4892565a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en/rqt.c
#	drivers/net/ethernet/mellanox/mlx5/core/en/rqt.h
#	drivers/net/ethernet/mellanox/mlx5/core/en_main.c
#	drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_main.c
index 15e30d82e985,68be4e0e77bf..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
@@@ -2745,9 -2570,10 +2745,16 @@@ int mlx5e_num_channels_changed(struct m
  
  	mlx5e_set_default_xps_cpumasks(priv, &priv->channels.params);
  
++<<<<<<< HEAD
 +	if (!netif_is_rxfh_configured(priv->netdev))
 +		mlx5e_build_default_indir_rqt(priv->rss_params.indirection_rqt,
 +					      MLX5E_INDIR_RQT_SIZE, count);
++=======
+ 	/* This function may be called on attach, before priv->rx_res is created. */
+ 	if (!netif_is_rxfh_configured(priv->netdev) && priv->rx_res)
+ 		mlx5e_rss_params_indir_init_uniform(&priv->rx_res->rss_params.indir,
+ 						    count);
++>>>>>>> 43befe99bc62 (net/mlx5e: Use a new initializer to build uniform indir table)
  
  	return 0;
  }
@@@ -4659,14 -4476,13 +4657,21 @@@ void mlx5e_build_rss_params(struct mlx5
  {
  	enum mlx5e_traffic_types tt;
  
++<<<<<<< HEAD
 +	rss_params->hfunc = ETH_RSS_HASH_TOP;
 +	netdev_rss_key_fill(rss_params->toeplitz_hash_key,
 +			    sizeof(rss_params->toeplitz_hash_key));
 +	mlx5e_build_default_indir_rqt(rss_params->indirection_rqt,
 +				      MLX5E_INDIR_RQT_SIZE, num_channels);
++=======
+ 	rss_params->hash.hfunc = ETH_RSS_HASH_TOP;
+ 	netdev_rss_key_fill(rss_params->hash.toeplitz_hash_key,
+ 			    sizeof(rss_params->hash.toeplitz_hash_key));
+ 	mlx5e_rss_params_indir_init_uniform(&rss_params->indir, num_channels);
++>>>>>>> 43befe99bc62 (net/mlx5e: Use a new initializer to build uniform indir table)
  	for (tt = 0; tt < MLX5E_NUM_INDIR_TIRS; tt++)
  		rss_params->rx_hash_fields[tt] =
 -			mlx5e_rss_get_default_tt_config(tt).rx_hash_fields;
 +			tirc_default_config[tt].rx_hash_fields;
  }
  
  void mlx5e_build_nic_params(struct mlx5e_priv *priv, struct mlx5e_xsk *xsk, u16 mtu)
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
index e0f6d7e16317,4d7ed24ae13c..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
@@@ -516,60 -514,22 +516,66 @@@ static void mlx5e_hairpin_destroy_trans
  	mlx5_core_dealloc_transport_domain(hp->func_mdev, hp->tdn);
  }
  
 +static int mlx5e_hairpin_fill_rqt_rqns(struct mlx5e_hairpin *hp, void *rqtc)
 +{
 +	struct mlx5e_priv *priv = hp->func_priv;
 +	int i, ix, sz = MLX5E_INDIR_RQT_SIZE;
 +	u32 *indirection_rqt, rqn;
 +
 +	indirection_rqt = kcalloc(sz, sizeof(*indirection_rqt), GFP_KERNEL);
 +	if (!indirection_rqt)
 +		return -ENOMEM;
 +
 +	mlx5e_build_default_indir_rqt(indirection_rqt, sz,
 +				      hp->num_channels);
 +
 +	for (i = 0; i < sz; i++) {
 +		ix = i;
 +		if (priv->rss_params.hfunc == ETH_RSS_HASH_XOR)
 +			ix = mlx5e_bits_invert(i, ilog2(sz));
 +		ix = indirection_rqt[ix];
 +		rqn = hp->pair->rqn[ix];
 +		MLX5_SET(rqtc, rqtc, rq_num[i], rqn);
 +	}
 +
 +	kfree(indirection_rqt);
 +	return 0;
 +}
 +
  static int mlx5e_hairpin_create_indirect_rqt(struct mlx5e_hairpin *hp)
  {
 +	int inlen, err, sz = MLX5E_INDIR_RQT_SIZE;
  	struct mlx5e_priv *priv = hp->func_priv;
  	struct mlx5_core_dev *mdev = priv->mdev;
 -	struct mlx5e_rss_params_indir *indir;
 -	int err;
 +	void *rqtc;
 +	u32 *in;
  
 -	indir = kvmalloc(sizeof(*indir), GFP_KERNEL);
 -	if (!indir)
 +	inlen = MLX5_ST_SZ_BYTES(create_rqt_in) + sizeof(u32) * sz;
 +	in = kvzalloc(inlen, GFP_KERNEL);
 +	if (!in)
  		return -ENOMEM;
  
++<<<<<<< HEAD
 +	rqtc = MLX5_ADDR_OF(create_rqt_in, in, rqt_context);
++=======
+ 	mlx5e_rss_params_indir_init_uniform(indir, hp->num_channels);
+ 	err = mlx5e_rqt_init_indir(&hp->indir_rqt, mdev, hp->pair->rqn, hp->num_channels,
+ 				   priv->rx_res->rss_params.hash.hfunc, indir);
++>>>>>>> 43befe99bc62 (net/mlx5e: Use a new initializer to build uniform indir table)
 +
 +	MLX5_SET(rqtc, rqtc, rqt_actual_size, sz);
 +	MLX5_SET(rqtc, rqtc, rqt_max_size, sz);
 +
 +	err = mlx5e_hairpin_fill_rqt_rqns(hp, rqtc);
 +	if (err)
 +		goto out;
 +
 +	err = mlx5_core_create_rqt(mdev, in, inlen, &hp->indir_rqt.rqtn);
 +	if (!err)
 +		hp->indir_rqt.enabled = true;
  
 -	kvfree(indir);
 +out:
 +	kvfree(in);
  	return err;
  }
  
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en/rqt.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en/rqt.h
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en.h b/drivers/net/ethernet/mellanox/mlx5/core/en.h
index 73a162266789..532037e1a6d6 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en.h
@@ -1023,9 +1023,6 @@ int mlx5e_num_channels_changed_ctx(struct mlx5e_priv *priv, void *context);
 void mlx5e_activate_priv_channels(struct mlx5e_priv *priv);
 void mlx5e_deactivate_priv_channels(struct mlx5e_priv *priv);
 
-void mlx5e_build_default_indir_rqt(u32 *indirection_rqt, int len,
-				   int num_channels);
-
 int mlx5e_modify_rq_state(struct mlx5e_rq *rq, int curr_state, int next_state);
 void mlx5e_activate_rq(struct mlx5e_rq *rq);
 void mlx5e_deactivate_rq(struct mlx5e_rq *rq);
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en/rqt.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en/rqt.h
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_main.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
