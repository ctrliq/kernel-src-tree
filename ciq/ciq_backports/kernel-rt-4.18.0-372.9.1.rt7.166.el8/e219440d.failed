net/mlx5: E-Switch, Use indirect table only if all destinations support it

jira LE-1907
Rebuild_History Non-Buildable kernel-rt-4.18.0-372.9.1.rt7.166.el8
commit-author Maor Dickman <maord@nvidia.com>
commit e219440da0c3a63b3cec23d08473436ae7d95fa6
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-rt-4.18.0-372.9.1.rt7.166.el8/e219440d.failed

When adding rule with multiple destinations, indirect table is used for all of
the destinations if at least one of the destinations support it, this can cause
creation of invalid indirect tables for the destinations that doesn't support it.

Fixed it by using indirect table only if all destinations support it.

Fixes: a508728a4c8b ("net/mlx5e: VF tunnel RX traffic offloading")
	Signed-off-by: Maor Dickman <maord@nvidia.com>
	Reviewed-by: Roi Dayan <roid@nvidia.com>
	Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
(cherry picked from commit e219440da0c3a63b3cec23d08473436ae7d95fa6)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/eswitch_offloads.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/eswitch_offloads.c
index a066d41cc204,32bc08a39925..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/eswitch_offloads.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/eswitch_offloads.c
@@@ -313,13 -329,25 +313,33 @@@ static boo
  esw_is_indir_table(struct mlx5_eswitch *esw, struct mlx5_flow_attr *attr)
  {
  	struct mlx5_esw_flow_attr *esw_attr = attr->esw_attr;
+ 	bool result = false;
  	int i;
  
++<<<<<<< HEAD
 +	for (i = esw_attr->split_count; i < esw_attr->out_count; i++)
 +		if (mlx5_esw_indir_table_needed(esw, attr, esw_attr->dests[i].rep->vport,
 +						esw_attr->dests[i].mdev))
 +			return true;
 +	return false;
++=======
+ 	/* Indirect table is supported only for flows with in_port uplink
+ 	 * and the destination is vport on the same eswitch as the uplink,
+ 	 * return false in case at least one of destinations doesn't meet
+ 	 * this criteria.
+ 	 */
+ 	for (i = esw_attr->split_count; i < esw_attr->out_count; i++) {
+ 		if (esw_attr->dests[i].rep &&
+ 		    mlx5_esw_indir_table_needed(esw, attr, esw_attr->dests[i].rep->vport,
+ 						esw_attr->dests[i].mdev)) {
+ 			result = true;
+ 		} else {
+ 			result = false;
+ 			break;
+ 		}
+ 	}
+ 	return result;
++>>>>>>> e219440da0c3 (net/mlx5: E-Switch, Use indirect table only if all destinations support it)
  }
  
  static int
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/eswitch_offloads.c
