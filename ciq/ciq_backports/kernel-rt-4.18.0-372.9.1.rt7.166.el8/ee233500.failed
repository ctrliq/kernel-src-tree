ASoC: Intel: bytcr_rt5640: Utilize dev_err_probe() to avoid log saturation

jira LE-1907
Rebuild_History Non-Buildable kernel-rt-4.18.0-372.9.1.rt7.166.el8
commit-author Andy Shevchenko <andriy.shevchenko@linux.intel.com>
commit ee233500eea421118cd9d53c82fd5e612f6d7bd5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-rt-4.18.0-372.9.1.rt7.166.el8/ee233500.failed

dev_err_probe() avoids printing into log when the deferred probe is invoked.
This is possible when clock provider is pending to appear.

	Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
	Reviewed-by: Hans de Goede <hdegoede@redhat.com>
	Tested-by: Hans de Goede <hdegoede@redhat.com>
Link: https://lore.kernel.org/r/20211007165715.27463-5-andriy.shevchenko@linux.intel.com
	Signed-off-by: Mark Brown <broonie@kernel.org>
(cherry picked from commit ee233500eea421118cd9d53c82fd5e612f6d7bd5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	sound/soc/intel/boards/bytcr_rt5640.c
diff --cc sound/soc/intel/boards/bytcr_rt5640.c
index 87176e56171e,a0c5f0e9c22a..000000000000
--- a/sound/soc/intel/boards/bytcr_rt5640.c
+++ b/sound/soc/intel/boards/bytcr_rt5640.c
@@@ -1485,6 -1609,20 +1485,23 @@@ static int snd_byt_rt5640_mc_probe(stru
  		return -EPROBE_DEFER;
  	priv->codec_dev = get_device(codec_dev);
  
++<<<<<<< HEAD
++=======
+ 	if (byt_rt5640_quirk & BYT_RT5640_JD_HP_ELITEP_1000G2) {
+ 		acpi_dev_add_driver_gpios(ACPI_COMPANION(priv->codec_dev),
+ 					  byt_rt5640_hp_elitepad_1000g2_gpios);
+ 
+ 		priv->hsmic_detect = devm_fwnode_gpiod_get(dev, codec_dev->fwnode,
+ 							   "headset-mic-detect", GPIOD_IN,
+ 							   "headset-mic-detect");
+ 		if (IS_ERR(priv->hsmic_detect)) {
+ 			ret_val = dev_err_probe(dev, PTR_ERR(priv->hsmic_detect),
+ 						"getting hsmic-detect GPIO\n");
+ 			goto err_device;
+ 		}
+ 	}
+ 
++>>>>>>> ee233500eea4 (ASoC: Intel: bytcr_rt5640: Utilize dev_err_probe() to avoid log saturation)
  	/* Must be called before register_card, also see declaration comment. */
  	ret_val = byt_rt5640_add_codec_device_props(codec_dev, priv);
  	if (ret_val)
@@@ -1505,23 -1643,18 +1522,35 @@@
  		byt_rt5640_dais[dai_index].cpus->dai_name = "ssp0-port";
  
  	if (byt_rt5640_quirk & BYT_RT5640_MCLK_EN) {
 -		priv->mclk = devm_clk_get_optional(dev, "pmc_plt_clk_3");
 +		priv->mclk = devm_clk_get(&pdev->dev, "pmc_plt_clk_3");
  		if (IS_ERR(priv->mclk)) {
++<<<<<<< HEAD
 +			ret_val = PTR_ERR(priv->mclk);
 +
 +			dev_err(&pdev->dev,
 +				"Failed to get MCLK from pmc_plt_clk_3: %d\n",
 +				ret_val);
 +
 +			/*
 +			 * Fall back to bit clock usage for -ENOENT (clock not
 +			 * available likely due to missing dependencies), bail
 +			 * for all other errors, including -EPROBE_DEFER
 +			 */
 +			if (ret_val != -ENOENT)
 +				goto err;
++=======
+ 			ret_val = dev_err_probe(dev, PTR_ERR(priv->mclk),
+ 						"Failed to get MCLK from pmc_plt_clk_3\n");
+ 			goto err;
+ 		}
+ 		/*
+ 		 * Fall back to bit clock usage when clock is not
+ 		 * available likely due to missing dependencies.
+ 		 */
+ 		if (!priv->mclk)
++>>>>>>> ee233500eea4 (ASoC: Intel: bytcr_rt5640: Utilize dev_err_probe() to avoid log saturation)
  			byt_rt5640_quirk &= ~BYT_RT5640_MCLK_EN;
 +		}
  	}
  
  	if (byt_rt5640_quirk & BYT_RT5640_NO_SPEAKERS) {
* Unmerged path sound/soc/intel/boards/bytcr_rt5640.c
