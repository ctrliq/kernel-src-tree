ice: replay advanced rules after reset

jira LE-1907
Rebuild_History Non-Buildable kernel-rt-4.18.0-372.9.1.rt7.166.el8
commit-author Victor Raj <victor.raj@intel.com>
commit c36a2b97162720ff373985f13d819e05f1ba128d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-rt-4.18.0-372.9.1.rt7.166.el8/c36a2b97.failed

ice_replay_vsi_adv_rule will replay advanced rules for a given VSI.
Exit this function when list of rules for given recipe is empty.
Do not add rule when given vsi_handle does not match vsi_handle
from the rule info.

Use ICE_MAX_NUM_RECIPES instead of ICE_SW_LKUP_LAST in order to find
advanced rules as well.

	Signed-off-by: Victor Raj <victor.raj@intel.com>
	Signed-off-by: Wojciech Drewek <wojciech.drewek@intel.com>
	Tested-by: Sandeep Penigalapati <sandeep.penigalapati@intel.com>
	Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
(cherry picked from commit c36a2b97162720ff373985f13d819e05f1ba128d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/intel/ice/ice_switch.c
diff --cc drivers/net/ethernet/intel/ice/ice_switch.c
index 436584f83302,996274c6b73c..000000000000
--- a/drivers/net/ethernet/intel/ice/ice_switch.c
+++ b/drivers/net/ethernet/intel/ice/ice_switch.c
@@@ -5165,9 -5648,41 +5165,41 @@@ ice_rem_adv_rule_by_id(struct ice_hw *h
  		}
  	}
  	/* either list is empty or unable to find rule */
 -	return -ENOENT;
 +	return ICE_ERR_DOES_NOT_EXIST;
  }
  
+ /**
+  * ice_replay_vsi_adv_rule - Replay advanced rule for requested VSI
+  * @hw: pointer to the hardware structure
+  * @vsi_handle: driver VSI handle
+  * @list_head: list for which filters need to be replayed
+  *
+  * Replay the advanced rule for the given VSI.
+  */
+ static int
+ ice_replay_vsi_adv_rule(struct ice_hw *hw, u16 vsi_handle,
+ 			struct list_head *list_head)
+ {
+ 	struct ice_rule_query_data added_entry = { 0 };
+ 	struct ice_adv_fltr_mgmt_list_entry *adv_fltr;
+ 	int status = 0;
+ 
+ 	if (list_empty(list_head))
+ 		return status;
+ 	list_for_each_entry(adv_fltr, list_head, list_entry) {
+ 		struct ice_adv_rule_info *rinfo = &adv_fltr->rule_info;
+ 		u16 lk_cnt = adv_fltr->lkups_cnt;
+ 
+ 		if (vsi_handle != rinfo->sw_act.vsi_handle)
+ 			continue;
+ 		status = ice_add_adv_rule(hw, adv_fltr->lkups, lk_cnt, rinfo,
+ 					  &added_entry);
+ 		if (status)
+ 			break;
+ 	}
+ 	return status;
+ }
+ 
  /**
   * ice_replay_vsi_all_fltr - replay all filters stored in bookkeeping lists
   * @hw: pointer to the hardware structure
@@@ -5175,13 -5690,13 +5207,17 @@@
   *
   * Replays filters for requested VSI via vsi_handle.
   */
 -int ice_replay_vsi_all_fltr(struct ice_hw *hw, u16 vsi_handle)
 +enum ice_status ice_replay_vsi_all_fltr(struct ice_hw *hw, u16 vsi_handle)
  {
  	struct ice_switch_info *sw = hw->switch_info;
++<<<<<<< HEAD
 +	enum ice_status status = 0;
++=======
+ 	int status;
++>>>>>>> c36a2b971627 (ice: replay advanced rules after reset)
  	u8 i;
  
- 	for (i = 0; i < ICE_SW_LKUP_LAST; i++) {
+ 	for (i = 0; i < ICE_MAX_NUM_RECIPES; i++) {
  		struct list_head *head;
  
  		head = &sw->recp_list[i].filt_replay_rules;
diff --git a/drivers/net/ethernet/intel/ice/ice_common.c b/drivers/net/ethernet/intel/ice/ice_common.c
index 0d416923f63d..4c1b8333aec0 100644
--- a/drivers/net/ethernet/intel/ice/ice_common.c
+++ b/drivers/net/ethernet/intel/ice/ice_common.c
@@ -4580,7 +4580,7 @@ static enum ice_status ice_replay_pre_init(struct ice_hw *hw)
 	 * will allow adding rules entries back to filt_rules list,
 	 * which is operational list.
 	 */
-	for (i = 0; i < ICE_SW_LKUP_LAST; i++)
+	for (i = 0; i < ICE_MAX_NUM_RECIPES; i++)
 		list_replace_init(&sw->recp_list[i].filt_rules,
 				  &sw->recp_list[i].filt_replay_rules);
 	ice_sched_replay_agg_vsi_preinit(hw);
* Unmerged path drivers/net/ethernet/intel/ice/ice_switch.c
