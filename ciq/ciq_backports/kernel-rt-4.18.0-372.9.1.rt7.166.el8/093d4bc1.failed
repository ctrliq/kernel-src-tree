net/mlx5e: Use mlx5e_rqt_get_rqtn to access RQT hardware id

jira LE-1907
Rebuild_History Non-Buildable kernel-rt-4.18.0-372.9.1.rt7.166.el8
commit-author Maxim Mikityanskiy <maximmi@nvidia.com>
commit 093d4bc1731dfe4ec209d3534608a38436331586
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-rt-4.18.0-372.9.1.rt7.166.el8/093d4bc1.failed

In order to abstract from implementation details of mlx5e_rqt, use the
mlx5e_rqt_get_rqtn getter instead of accessing the field directly.

	Signed-off-by: Maxim Mikityanskiy <maximmi@nvidia.com>
	Reviewed-by: Tariq Toukan <tariqt@nvidia.com>
	Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
(cherry picked from commit 093d4bc1731dfe4ec209d3534608a38436331586)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en_accel/ktls_rx.c
#	drivers/net/ethernet/mellanox/mlx5/core/en_main.c
#	drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_accel/ktls_rx.c
index 1d166cb4f6f5,44bc6efd62fd..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_accel/ktls_rx.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_accel/ktls_rx.c
@@@ -642,7 -635,7 +642,11 @@@ int mlx5e_ktls_add_rx(struct net_devic
  	priv_rx->sw_stats = &priv->tls->sw_stats;
  	mlx5e_set_ktls_rx_priv_ctx(tls_ctx, priv_rx);
  
++<<<<<<< HEAD
 +	rqtn = priv->direct_tir[rxq].rqt.rqtn;
++=======
+ 	rqtn = mlx5e_rqt_get_rqtn(&priv->rx_res->channels[rxq].direct_rqt);
++>>>>>>> 093d4bc1731d (net/mlx5e: Use mlx5e_rqt_get_rqtn to access RQT hardware id)
  
  	err = mlx5e_ktls_create_tir(mdev, &priv_rx->tirn, rqtn);
  	if (err)
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_main.c
index 15e30d82e985,a70ada2e7208..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
@@@ -3198,8 -3143,10 +3198,15 @@@ static void mlx5e_build_indir_tir_ctx(s
  				      enum mlx5e_traffic_types tt,
  				      u32 *tirc)
  {
++<<<<<<< HEAD
 +	mlx5e_build_indir_tir_ctx_common(priv, priv->indir_rqt.rqtn, tirc);
 +	mlx5e_build_indir_tir_ctx_hash(&priv->rss_params,
++=======
+ 	u32 rqtn = mlx5e_rqt_get_rqtn(&priv->rx_res->indir_rqt);
+ 
+ 	mlx5e_build_indir_tir_ctx_common(priv, rqtn, tirc);
+ 	mlx5e_build_indir_tir_ctx_hash(&priv->rx_res->rss_params,
++>>>>>>> 093d4bc1731d (net/mlx5e: Use mlx5e_rqt_get_rqtn to access RQT hardware id)
  				       &tirc_default_config[tt], tirc, false);
  }
  
@@@ -3213,8 -3160,10 +3220,15 @@@ static void mlx5e_build_inner_indir_tir
  					    enum mlx5e_traffic_types tt,
  					    u32 *tirc)
  {
++<<<<<<< HEAD
 +	mlx5e_build_indir_tir_ctx_common(priv, priv->indir_rqt.rqtn, tirc);
 +	mlx5e_build_indir_tir_ctx_hash(&priv->rss_params,
++=======
+ 	u32 rqtn = mlx5e_rqt_get_rqtn(&priv->rx_res->indir_rqt);
+ 
+ 	mlx5e_build_indir_tir_ctx_common(priv, rqtn, tirc);
+ 	mlx5e_build_indir_tir_ctx_hash(&priv->rx_res->rss_params,
++>>>>>>> 093d4bc1731d (net/mlx5e: Use mlx5e_rqt_get_rqtn to access RQT hardware id)
  				       &tirc_default_config[tt], tirc, true);
  }
  
@@@ -3291,25 -3240,55 +3305,33 @@@ int mlx5e_create_direct_tirs(struct mlx
  	if (!in)
  		return -ENOMEM;
  
++<<<<<<< HEAD
 +	for (ix = 0; ix < n; ix++) {
 +		memset(in, 0, inlen);
 +		tir = &tirs[ix];
 +		tirc = MLX5_ADDR_OF(create_tir_in, in, ctx);
 +		mlx5e_build_direct_tir_ctx(priv, tir->rqt.rqtn, tirc);
 +		err = mlx5e_create_tir(priv->mdev, tir, in);
 +		if (unlikely(err))
 +			goto err_destroy_ch_tirs;
 +	}
++=======
+ 	tirc = MLX5_ADDR_OF(create_tir_in, in, ctx);
+ 	mlx5e_build_direct_tir_ctx(priv, mlx5e_rqt_get_rqtn(rqt), tirc);
+ 	err = mlx5e_create_tir(priv->mdev, tir, in);
+ 	if (unlikely(err))
+ 		mlx5_core_warn(priv->mdev, "create tirs failed, %d\n", err);
++>>>>>>> 093d4bc1731d (net/mlx5e: Use mlx5e_rqt_get_rqtn to access RQT hardware id)
  
 -	kvfree(in);
 +	goto out;
  
 -	return err;
 -}
 -
 -int mlx5e_create_direct_tirs(struct mlx5e_priv *priv)
 -{
 -	int err;
 -	int ix;
 +err_destroy_ch_tirs:
 +	mlx5_core_warn(priv->mdev, "create tirs failed, %d\n", err);
 +	for (ix--; ix >= 0; ix--)
 +		mlx5e_destroy_tir(priv->mdev, &tirs[ix]);
  
 -	for (ix = 0; ix < priv->max_nch; ix++) {
 -		err = mlx5e_create_direct_tir(priv, &priv->rx_res->channels[ix].direct_tir,
 -					      &priv->rx_res->channels[ix].direct_rqt);
 -		if (err)
 -			goto err_destroy_tirs;
 -	}
 -
 -	return 0;
 -
 -err_destroy_tirs:
 -	while (--ix >= 0)
 -		mlx5e_destroy_tir(priv->mdev, &priv->rx_res->channels[ix].direct_tir);
 -
 -	return err;
 -}
 -
 -static int mlx5e_create_xsk_tirs(struct mlx5e_priv *priv)
 -{
 -	int err;
 -	int ix;
 -
 -	for (ix = 0; ix < priv->max_nch; ix++) {
 -		err = mlx5e_create_direct_tir(priv, &priv->rx_res->channels[ix].xsk_tir,
 -					      &priv->rx_res->channels[ix].xsk_rqt);
 -		if (err)
 -			goto err_destroy_tirs;
 -	}
 -
 -	return 0;
 -
 -err_destroy_tirs:
 -	while (--ix >= 0)
 -		mlx5e_destroy_tir(priv->mdev, &priv->rx_res->channels[ix].xsk_tir);
 +out:
 +	kvfree(in);
  
  	return err;
  }
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
index e0f6d7e16317,dd5546fb0f42..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
@@@ -588,8 -528,9 +588,14 @@@ static int mlx5e_hairpin_create_indirec
  
  		MLX5_SET(tirc, tirc, transport_domain, hp->tdn);
  		MLX5_SET(tirc, tirc, disp_type, MLX5_TIRC_DISP_TYPE_INDIRECT);
++<<<<<<< HEAD
 +		MLX5_SET(tirc, tirc, indirect_table, hp->indir_rqt.rqtn);
 +		mlx5e_build_indir_tir_ctx_hash(&priv->rss_params, &ttconfig, tirc, false);
++=======
+ 		MLX5_SET(tirc, tirc, indirect_table, mlx5e_rqt_get_rqtn(&hp->indir_rqt));
+ 		mlx5e_build_indir_tir_ctx_hash(&priv->rx_res->rss_params, &ttconfig,
+ 					       tirc, false);
++>>>>>>> 093d4bc1731d (net/mlx5e: Use mlx5e_rqt_get_rqtn to access RQT hardware id)
  
  		err = mlx5_core_create_tir(hp->func_mdev, in,
  					   &hp->indir_tirn[tt]);
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_accel/ktls_rx.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_main.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
