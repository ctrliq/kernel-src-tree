ALSA: usb-audio: Move ignore_ctl_error check into quirk_flags

jira LE-1907
Rebuild_History Non-Buildable kernel-rt-4.18.0-372.9.1.rt7.166.el8
commit-author Takashi Iwai <tiwai@suse.de>
commit 3c69dc9134130deb9682279374d9d97de52b0731
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-rt-4.18.0-372.9.1.rt7.166.el8/3c69dc91.failed

The mixer code has a flag ignore_ctl_error for ignoring the errors
returned from the device wrt mixer accesses, and this is set from the
entries in mixer_maps.c, as well as ignore_ctl_error module option.
Those can be well integrated into the new quirk_flags field, too.

Link: https://lore.kernel.org/r/20210729074404.19728-3-tiwai@suse.de
	Signed-off-by: Takashi Iwai <tiwai@suse.de>
(cherry picked from commit 3c69dc9134130deb9682279374d9d97de52b0731)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	sound/usb/card.c
#	sound/usb/quirks.c
#	sound/usb/usbaudio.h
diff --cc sound/usb/card.c
index d2bdd26c46d9,9535df39c02f..000000000000
--- a/sound/usb/card.c
+++ b/sound/usb/card.c
@@@ -784,6 -804,12 +784,15 @@@ static int usb_audio_probe(struct usb_i
  
  	dev_set_drvdata(&dev->dev, chip);
  
++<<<<<<< HEAD
++=======
+ 	if (ignore_ctl_error)
+ 		chip->quirk_flags |= QUIRK_FLAG_IGNORE_CTL_ERROR;
+ 
+ 	if (chip->quirk_flags & QUIRK_FLAG_DISABLE_AUTOSUSPEND)
+ 		usb_disable_autosuspend(interface_to_usbdev(intf));
+ 
++>>>>>>> 3c69dc913413 (ALSA: usb-audio: Move ignore_ctl_error check into quirk_flags)
  	/*
  	 * For devices with more than one control interface, we assume the
  	 * first contains the audio controls. We might need a more specific
diff --cc sound/usb/quirks.c
index 9c3d234c8b32,fce3a341adc8..000000000000
--- a/sound/usb/quirks.c
+++ b/sound/usb/quirks.c
@@@ -547,18 -531,9 +547,18 @@@ static int create_standard_mixer_quirk(
  	if (quirk->ifnum < 0)
  		return 0;
  
- 	return snd_usb_create_mixer(chip, quirk->ifnum, 0);
+ 	return snd_usb_create_mixer(chip, quirk->ifnum);
  }
  
 +static int setup_disable_autosuspend(struct snd_usb_audio *chip,
 +				       struct usb_interface *iface,
 +				       struct usb_driver *driver,
 +				       const struct snd_usb_audio_quirk *quirk)
 +{
 +	usb_disable_autosuspend(interface_to_usbdev(iface));
 +	return 1;	/* Continue with creating streams and mixer */
 +}
 +
  /*
   * audio-interface quirks
   *
@@@ -1904,21 -1801,102 +1906,81 @@@ static const struct usb_audio_quirk_fla
  	DEVICE_FLG(0x041e, 0x4080, /* Creative Live Cam VF0610 */
  		   QUIRK_FLAG_GET_SAMPLE_RATE),
  	DEVICE_FLG(0x046d, 0x084c, /* Logitech ConferenceCam Connect */
++<<<<<<< HEAD
 +		   QUIRK_FLAG_GET_SAMPLE_RATE),
++=======
+ 		   QUIRK_FLAG_GET_SAMPLE_RATE | QUIRK_FLAG_CTL_MSG_DELAY_1M),
+ 	DEVICE_FLG(0x046d, 0x0991, /* Logitech QuickCam Pro */
+ 		   QUIRK_FLAG_CTL_MSG_DELAY_1M | QUIRK_FLAG_IGNORE_CTL_ERROR),
+ 	DEVICE_FLG(0x046d, 0x09a4, /* Logitech QuickCam E 3500 */
+ 		   QUIRK_FLAG_CTL_MSG_DELAY_1M | QUIRK_FLAG_IGNORE_CTL_ERROR),
++>>>>>>> 3c69dc913413 (ALSA: usb-audio: Move ignore_ctl_error check into quirk_flags)
  	DEVICE_FLG(0x04d8, 0xfeea, /* Benchmark DAC1 Pre */
  		   QUIRK_FLAG_GET_SAMPLE_RATE),
 -	DEVICE_FLG(0x04e8, 0xa051, /* Samsung USBC Headset (AKG) */
 -		   QUIRK_FLAG_SKIP_CLOCK_SELECTOR | QUIRK_FLAG_CTL_MSG_DELAY_5M),
  	DEVICE_FLG(0x0556, 0x0014, /* Phoenix Audio TMX320VC */
  		   QUIRK_FLAG_GET_SAMPLE_RATE),
  	DEVICE_FLG(0x05a3, 0x9420, /* ELP HD USB Camera */
  		   QUIRK_FLAG_GET_SAMPLE_RATE),
  	DEVICE_FLG(0x05a7, 0x1020, /* Bose Companion 5 */
  		   QUIRK_FLAG_GET_SAMPLE_RATE),
++<<<<<<< HEAD
 +	DEVICE_FLG(0x074d, 0x3553, /* Outlaw RR2150 (Micronas UAC3553B) */
 +		   QUIRK_FLAG_GET_SAMPLE_RATE),
 +	DEVICE_FLG(0x1395, 0x740a, /* Sennheiser DECT */
 +		   QUIRK_FLAG_GET_SAMPLE_RATE),
++=======
+ 	DEVICE_FLG(0x05e1, 0x0408, /* Syntek STK1160 */
+ 		   QUIRK_FLAG_ALIGN_TRANSFER),
+ 	DEVICE_FLG(0x05e1, 0x0480, /* Hauppauge Woodbury */
+ 		   QUIRK_FLAG_SHARE_MEDIA_DEVICE | QUIRK_FLAG_ALIGN_TRANSFER),
+ 	DEVICE_FLG(0x0644, 0x8043, /* TEAC UD-501/UD-501V2/UD-503/NT-503 */
+ 		   QUIRK_FLAG_ITF_USB_DSD_DAC | QUIRK_FLAG_CTL_MSG_DELAY |
+ 		   QUIRK_FLAG_IFACE_DELAY),
+ 	DEVICE_FLG(0x0644, 0x8044, /* Esoteric D-05X */
+ 		   QUIRK_FLAG_ITF_USB_DSD_DAC | QUIRK_FLAG_CTL_MSG_DELAY |
+ 		   QUIRK_FLAG_IFACE_DELAY),
+ 	DEVICE_FLG(0x0644, 0x804a, /* TEAC UD-301 */
+ 		   QUIRK_FLAG_ITF_USB_DSD_DAC | QUIRK_FLAG_CTL_MSG_DELAY |
+ 		   QUIRK_FLAG_IFACE_DELAY),
+ 	DEVICE_FLG(0x06f8, 0xb000, /* Hercules DJ Console (Windows Edition) */
+ 		   QUIRK_FLAG_IGNORE_CTL_ERROR),
+ 	DEVICE_FLG(0x06f8, 0xd002, /* Hercules DJ Console (Macintosh Edition) */
+ 		   QUIRK_FLAG_IGNORE_CTL_ERROR),
+ 	DEVICE_FLG(0x074d, 0x3553, /* Outlaw RR2150 (Micronas UAC3553B) */
+ 		   QUIRK_FLAG_GET_SAMPLE_RATE),
+ 	DEVICE_FLG(0x08bb, 0x2702, /* LineX FM Transmitter */
+ 		   QUIRK_FLAG_IGNORE_CTL_ERROR),
+ 	DEVICE_FLG(0x0951, 0x16ad, /* Kingston HyperX */
+ 		   QUIRK_FLAG_CTL_MSG_DELAY_1M),
+ 	DEVICE_FLG(0x0b0e, 0x0349, /* Jabra 550a */
+ 		   QUIRK_FLAG_CTL_MSG_DELAY_1M),
+ 	DEVICE_FLG(0x0fd9, 0x0008, /* Hauppauge HVR-950Q */
+ 		   QUIRK_FLAG_SHARE_MEDIA_DEVICE | QUIRK_FLAG_ALIGN_TRANSFER),
+ 	DEVICE_FLG(0x1395, 0x740a, /* Sennheiser DECT */
+ 		   QUIRK_FLAG_GET_SAMPLE_RATE),
+ 	DEVICE_FLG(0x13e5, 0x0001, /* Serato Phono */
+ 		   QUIRK_FLAG_IGNORE_CTL_ERROR),
+ 	DEVICE_FLG(0x154e, 0x1002, /* Denon DCD-1500RE */
+ 		   QUIRK_FLAG_ITF_USB_DSD_DAC | QUIRK_FLAG_CTL_MSG_DELAY),
+ 	DEVICE_FLG(0x154e, 0x1003, /* Denon DA-300USB */
+ 		   QUIRK_FLAG_ITF_USB_DSD_DAC | QUIRK_FLAG_CTL_MSG_DELAY),
+ 	DEVICE_FLG(0x154e, 0x3005, /* Marantz HD-DAC1 */
+ 		   QUIRK_FLAG_ITF_USB_DSD_DAC | QUIRK_FLAG_CTL_MSG_DELAY),
+ 	DEVICE_FLG(0x154e, 0x3006, /* Marantz SA-14S1 */
+ 		   QUIRK_FLAG_ITF_USB_DSD_DAC | QUIRK_FLAG_CTL_MSG_DELAY),
+ 	DEVICE_FLG(0x154e, 0x500e, /* Denon DN-X1600 */
+ 		   QUIRK_FLAG_IGNORE_CLOCK_SOURCE),
+ 	DEVICE_FLG(0x1686, 0x00dd, /* Zoom R16/24 */
+ 		   QUIRK_FLAG_TX_LENGTH | QUIRK_FLAG_CTL_MSG_DELAY_1M),
+ 	DEVICE_FLG(0x17aa, 0x1046, /* Lenovo ThinkStation P620 Rear Line-in, Line-out and Microphone */
+ 		   QUIRK_FLAG_DISABLE_AUTOSUSPEND),
+ 	DEVICE_FLG(0x17aa, 0x104d, /* Lenovo ThinkStation P620 Internal Speaker + Front Headset */
+ 		   QUIRK_FLAG_DISABLE_AUTOSUSPEND),
+ 	DEVICE_FLG(0x1852, 0x5065, /* Luxman DA-06 */
+ 		   QUIRK_FLAG_ITF_USB_DSD_DAC | QUIRK_FLAG_CTL_MSG_DELAY),
++>>>>>>> 3c69dc913413 (ALSA: usb-audio: Move ignore_ctl_error check into quirk_flags)
  	DEVICE_FLG(0x1901, 0x0191, /* GE B850V3 CP2114 audio interface */
  		   QUIRK_FLAG_GET_SAMPLE_RATE),
 -	DEVICE_FLG(0x2040, 0x7200, /* Hauppauge HVR-950Q */
 -		   QUIRK_FLAG_SHARE_MEDIA_DEVICE | QUIRK_FLAG_ALIGN_TRANSFER),
 -	DEVICE_FLG(0x2040, 0x7201, /* Hauppauge HVR-950Q-MXL */
 -		   QUIRK_FLAG_SHARE_MEDIA_DEVICE | QUIRK_FLAG_ALIGN_TRANSFER),
 -	DEVICE_FLG(0x2040, 0x7210, /* Hauppauge HVR-950Q */
 -		   QUIRK_FLAG_SHARE_MEDIA_DEVICE | QUIRK_FLAG_ALIGN_TRANSFER),
 -	DEVICE_FLG(0x2040, 0x7211, /* Hauppauge HVR-950Q-MXL */
 -		   QUIRK_FLAG_SHARE_MEDIA_DEVICE | QUIRK_FLAG_ALIGN_TRANSFER),
 -	DEVICE_FLG(0x2040, 0x7213, /* Hauppauge HVR-950Q */
 -		   QUIRK_FLAG_SHARE_MEDIA_DEVICE | QUIRK_FLAG_ALIGN_TRANSFER),
 -	DEVICE_FLG(0x2040, 0x7217, /* Hauppauge HVR-950Q */
 -		   QUIRK_FLAG_SHARE_MEDIA_DEVICE | QUIRK_FLAG_ALIGN_TRANSFER),
 -	DEVICE_FLG(0x2040, 0x721b, /* Hauppauge HVR-950Q */
 -		   QUIRK_FLAG_SHARE_MEDIA_DEVICE | QUIRK_FLAG_ALIGN_TRANSFER),
 -	DEVICE_FLG(0x2040, 0x721e, /* Hauppauge HVR-950Q */
 -		   QUIRK_FLAG_SHARE_MEDIA_DEVICE | QUIRK_FLAG_ALIGN_TRANSFER),
 -	DEVICE_FLG(0x2040, 0x721f, /* Hauppauge HVR-950Q */
 -		   QUIRK_FLAG_SHARE_MEDIA_DEVICE | QUIRK_FLAG_ALIGN_TRANSFER),
 -	DEVICE_FLG(0x2040, 0x7240, /* Hauppauge HVR-850 */
 -		   QUIRK_FLAG_SHARE_MEDIA_DEVICE | QUIRK_FLAG_ALIGN_TRANSFER),
 -	DEVICE_FLG(0x2040, 0x7260, /* Hauppauge HVR-950Q */
 -		   QUIRK_FLAG_SHARE_MEDIA_DEVICE | QUIRK_FLAG_ALIGN_TRANSFER),
 -	DEVICE_FLG(0x2040, 0x7270, /* Hauppauge HVR-950Q */
 -		   QUIRK_FLAG_SHARE_MEDIA_DEVICE | QUIRK_FLAG_ALIGN_TRANSFER),
 -	DEVICE_FLG(0x2040, 0x7280, /* Hauppauge HVR-950Q */
 -		   QUIRK_FLAG_SHARE_MEDIA_DEVICE | QUIRK_FLAG_ALIGN_TRANSFER),
 -	DEVICE_FLG(0x2040, 0x7281, /* Hauppauge HVR-950Q-MXL */
 -		   QUIRK_FLAG_SHARE_MEDIA_DEVICE | QUIRK_FLAG_ALIGN_TRANSFER),
 -	DEVICE_FLG(0x2040, 0x8200, /* Hauppauge Woodbury */
 -		   QUIRK_FLAG_SHARE_MEDIA_DEVICE | QUIRK_FLAG_ALIGN_TRANSFER),
  	DEVICE_FLG(0x21b4, 0x0081, /* AudioQuest DragonFly */
  		   QUIRK_FLAG_GET_SAMPLE_RATE),
  	DEVICE_FLG(0x2912, 0x30c8, /* Audioengine D1 */
diff --cc sound/usb/usbaudio.h
index c0a3ac71bf0a,a152f5b08c7a..000000000000
--- a/sound/usb/usbaudio.h
+++ b/sound/usb/usbaudio.h
@@@ -130,8 -129,52 +130,58 @@@ extern bool snd_usb_skip_validation
   * QUIRK_FLAG_GET_SAMPLE_RATE:
   *  Skip reading sample rate for devices, as some devices behave inconsistently
   *  or return error
++<<<<<<< HEAD
 + */
 +
 +#define QUIRK_FLAG_GET_SAMPLE_RATE	(1U << 0)
++=======
+  * QUIRK_FLAG_SHARE_MEDIA_DEVICE:
+  *  Create Media Controller API entries
+  * QUIRK_FLAG_ALIGN_TRANSFER:
+  *  Allow alignment on audio sub-slot (channel samples) rather than on audio
+  *  slots (audio frames)
+  * QUIRK_TX_LENGTH:
+  *  Add length specifier to transfers
+  * QUIRK_FLAG_PLAYBACK_FIRST:
+  *  Start playback stream at first even in implement feedback mode
+  * QUIRK_FLAG_SKIP_CLOCK_SELECTOR:
+  *  Skip clock selector setup; the device may reset to invalid state
+  * QUIRK_FLAG_IGNORE_CLOCK_SOURCE:
+  *  Ignore errors from clock source search; i.e. hardcoded clock
+  * QUIRK_FLAG_ITF_USB_DSD_DAC:
+  *  Indicates the device is for ITF-USB DSD based DACs that need a vendor cmd
+  *  to switch between PCM and native DSD mode
+  * QUIRK_FLAG_CTL_MSG_DELAY:
+  *  Add a delay of 20ms at each control message handling
+  * QUIRK_FLAG_CTL_MSG_DELAY_1M:
+  *  Add a delay of 1-2ms at each control message handling
+  * QUIRK_FLAG_CTL_MSG_DELAY_5M:
+  *  Add a delay of 5-6ms at each control message handling
+  * QUIRK_FLAG_IFACE_DELAY:
+  *  Add a delay of 50ms at each interface setup
+  * QUIRK_FLAG_VALIDATE_RATES:
+  *  Perform sample rate validations at probe
+  * QUIRK_FLAG_DISABLE_AUTOSUSPEND:
+  *  Disable runtime PM autosuspend
+  * QUIRK_FLAG_IGNORE_CTL_ERROR:
+  *  Ignore errors for mixer access
+  */
+ 
+ #define QUIRK_FLAG_GET_SAMPLE_RATE	(1U << 0)
+ #define QUIRK_FLAG_SHARE_MEDIA_DEVICE	(1U << 1)
+ #define QUIRK_FLAG_ALIGN_TRANSFER	(1U << 2)
+ #define QUIRK_FLAG_TX_LENGTH		(1U << 3)
+ #define QUIRK_FLAG_PLAYBACK_FIRST	(1U << 4)
+ #define QUIRK_FLAG_SKIP_CLOCK_SELECTOR	(1U << 5)
+ #define QUIRK_FLAG_IGNORE_CLOCK_SOURCE	(1U << 6)
+ #define QUIRK_FLAG_ITF_USB_DSD_DAC	(1U << 7)
+ #define QUIRK_FLAG_CTL_MSG_DELAY	(1U << 8)
+ #define QUIRK_FLAG_CTL_MSG_DELAY_1M	(1U << 9)
+ #define QUIRK_FLAG_CTL_MSG_DELAY_5M	(1U << 10)
+ #define QUIRK_FLAG_IFACE_DELAY		(1U << 11)
+ #define QUIRK_FLAG_VALIDATE_RATES	(1U << 12)
+ #define QUIRK_FLAG_DISABLE_AUTOSUSPEND	(1U << 13)
+ #define QUIRK_FLAG_IGNORE_CTL_ERROR	(1U << 14)
++>>>>>>> 3c69dc913413 (ALSA: usb-audio: Move ignore_ctl_error check into quirk_flags)
  
  #endif /* __USBAUDIO_H */
* Unmerged path sound/usb/card.c
diff --git a/sound/usb/mixer.c b/sound/usb/mixer.c
index 9b713b4a5ec4..db7cb6b6dc4e 100644
--- a/sound/usb/mixer.c
+++ b/sound/usb/mixer.c
@@ -3183,7 +3183,6 @@ static int snd_usb_mixer_controls(struct usb_mixer_interface *mixer)
 			state.map = map->map;
 			state.selector_map = map->selector_map;
 			mixer->connector_map = map->connector_map;
-			mixer->ignore_ctl_error |= map->ignore_ctl_error;
 			break;
 		}
 	}
@@ -3508,8 +3507,7 @@ static int snd_usb_mixer_status_create(struct usb_mixer_interface *mixer)
 	return 0;
 }
 
-int snd_usb_create_mixer(struct snd_usb_audio *chip, int ctrlif,
-			 int ignore_error)
+int snd_usb_create_mixer(struct snd_usb_audio *chip, int ctrlif)
 {
 	static const struct snd_device_ops dev_ops = {
 		.dev_free = snd_usb_mixer_dev_free
@@ -3523,7 +3521,7 @@ int snd_usb_create_mixer(struct snd_usb_audio *chip, int ctrlif,
 	if (!mixer)
 		return -ENOMEM;
 	mixer->chip = chip;
-	mixer->ignore_ctl_error = ignore_error;
+	mixer->ignore_ctl_error = !!(chip->quirk_flags & QUIRK_FLAG_IGNORE_CTL_ERROR);
 	mixer->id_elems = kcalloc(MAX_ID_ELEMS, sizeof(*mixer->id_elems),
 				  GFP_KERNEL);
 	if (!mixer->id_elems) {
diff --git a/sound/usb/mixer.h b/sound/usb/mixer.h
index e6d09fd60e13..2d2554ab5df7 100644
--- a/sound/usb/mixer.h
+++ b/sound/usb/mixer.h
@@ -94,8 +94,7 @@ struct usb_mixer_elem_info {
 	void *private_data;
 };
 
-int snd_usb_create_mixer(struct snd_usb_audio *chip, int ctrlif,
-			 int ignore_error);
+int snd_usb_create_mixer(struct snd_usb_audio *chip, int ctrlif);
 void snd_usb_mixer_disconnect(struct usb_mixer_interface *mixer);
 
 void snd_usb_mixer_notify_id(struct usb_mixer_interface *mixer, int unitid);
diff --git a/sound/usb/mixer_maps.c b/sound/usb/mixer_maps.c
index c5794e83fd80..55eea90ee993 100644
--- a/sound/usb/mixer_maps.c
+++ b/sound/usb/mixer_maps.c
@@ -28,7 +28,6 @@ struct usbmix_ctl_map {
 	const struct usbmix_name_map *map;
 	const struct usbmix_selector_map *selector_map;
 	const struct usbmix_connector_map *connector_map;
-	int ignore_ctl_error;
 };
 
 /*
@@ -432,7 +431,6 @@ static const struct usbmix_ctl_map usbmix_ctl_maps[] = {
 	{
 		.id = USB_ID(0x041e, 0x3000),
 		.map = extigy_map,
-		.ignore_ctl_error = 1,
 	},
 	{
 		.id = USB_ID(0x041e, 0x3010),
@@ -452,28 +450,10 @@ static const struct usbmix_ctl_map usbmix_ctl_maps[] = {
 		.map = audigy2nx_map,
 		.selector_map = audigy2nx_selectors,
 	},
-	{	/* Logitech, Inc. QuickCam Pro for Notebooks */
-		.id = USB_ID(0x046d, 0x0991),
-		.ignore_ctl_error = 1,
-	},
-	{	/* Logitech, Inc. QuickCam E 3500 */
-		.id = USB_ID(0x046d, 0x09a4),
-		.ignore_ctl_error = 1,
-	},
 	{	/* Plantronics GameCom 780 */
 		.id = USB_ID(0x047f, 0xc010),
 		.map = gamecom780_map,
 	},
-	{
-		/* Hercules DJ Console (Windows Edition) */
-		.id = USB_ID(0x06f8, 0xb000),
-		.ignore_ctl_error = 1,
-	},
-	{
-		/* Hercules DJ Console (Macintosh Edition) */
-		.id = USB_ID(0x06f8, 0xd002),
-		.ignore_ctl_error = 1,
-	},
 	{
 		/* Hercules Gamesurround Muse Pocket LT
 		 * (USB 5.1 Channel Audio Adapter)
@@ -492,7 +472,6 @@ static const struct usbmix_ctl_map usbmix_ctl_maps[] = {
 	{
 		.id = USB_ID(0x08bb, 0x2702),
 		.map = linex_map,
-		.ignore_ctl_error = 1,
 	},
 	{
 		.id = USB_ID(0x0a92, 0x0091),
@@ -517,7 +496,6 @@ static const struct usbmix_ctl_map usbmix_ctl_maps[] = {
 	{
 		.id = USB_ID(0x13e5, 0x0001),
 		.map = scratch_live_map,
-		.ignore_ctl_error = 1,
 	},
 	{
 		.id = USB_ID(0x200c, 0x1018),
* Unmerged path sound/usb/quirks.c
* Unmerged path sound/usb/usbaudio.h
