mm/gup: remove unused pin_user_pages_locked()

jira LE-1907
Rebuild_History Non-Buildable kernel-rt-4.18.0-372.9.1.rt7.166.el8
commit-author John Hubbard <jhubbard@nvidia.com>
commit ad6c441266dcd50be080a47e1178a1b15369923c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-rt-4.18.0-372.9.1.rt7.166.el8/ad6c4412.failed

This routine was used for a short while, but then the calling code was
refactored and the only caller was removed.

Link: https://lkml.kernel.org/r/20220204020010.68930-4-jhubbard@nvidia.com
	Signed-off-by: John Hubbard <jhubbard@nvidia.com>
	Reviewed-by: David Hildenbrand <david@redhat.com>
	Reviewed-by: Jason Gunthorpe <jgg@nvidia.com>
	Reviewed-by: Jan Kara <jack@suse.cz>
	Reviewed-by: Christoph Hellwig <hch@lst.de>
	Reviewed-by: Claudio Imbrenda <imbrenda@linux.ibm.com>
	Cc: Alex Williamson <alex.williamson@redhat.com>
	Cc: Andrea Arcangeli <aarcange@redhat.com>
	Cc: Jason Gunthorpe <jgg@ziepe.ca>
	Cc: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
	Cc: Lukas Bulwahn <lukas.bulwahn@gmail.com>
	Cc: Matthew Wilcox (Oracle) <willy@infradead.org>
	Cc: Peter Xu <peterx@redhat.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit ad6c441266dcd50be080a47e1178a1b15369923c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	mm/gup.c
diff --cc mm/gup.c
index 2d14c0391dbe,f8faa646f208..000000000000
--- a/mm/gup.c
+++ b/mm/gup.c
@@@ -3068,32 -3127,3 +3068,35 @@@ long pin_user_pages_unlocked(unsigned l
  	return get_user_pages_unlocked(start, nr_pages, pages, gup_flags);
  }
  EXPORT_SYMBOL(pin_user_pages_unlocked);
++<<<<<<< HEAD
 +
 +/*
 + * pin_user_pages_locked() is the FOLL_PIN variant of get_user_pages_locked().
 + * Behavior is the same, except that this one sets FOLL_PIN and rejects
 + * FOLL_GET.
 + */
 +long pin_user_pages_locked(unsigned long start, unsigned long nr_pages,
 +			   unsigned int gup_flags, struct page **pages,
 +			   int *locked)
 +{
 +	/*
 +	 * FIXME: Current FOLL_LONGTERM behavior is incompatible with
 +	 * FAULT_FLAG_ALLOW_RETRY because of the FS DAX check requirement on
 +	 * vmas.  As there are no users of this flag in this call we simply
 +	 * disallow this option for now.
 +	 */
 +	if (WARN_ON_ONCE(gup_flags & FOLL_LONGTERM))
 +		return -EINVAL;
 +
 +	/* FOLL_GET and FOLL_PIN are mutually exclusive. */
 +	if (WARN_ON_ONCE(gup_flags & FOLL_GET))
 +		return -EINVAL;
 +
 +	gup_flags |= FOLL_PIN;
 +	return __get_user_pages_locked(current, current->mm, start, nr_pages,
 +				       pages, NULL, locked,
 +				       gup_flags | FOLL_TOUCH);
 +}
 +EXPORT_SYMBOL(pin_user_pages_locked);
++=======
++>>>>>>> ad6c441266dc (mm/gup: remove unused pin_user_pages_locked())
diff --git a/include/linux/mm.h b/include/linux/mm.h
index 230c8d984885..34c8c4b4bd23 100644
--- a/include/linux/mm.h
+++ b/include/linux/mm.h
@@ -1691,8 +1691,6 @@ long pin_user_pages(unsigned long start, unsigned long nr_pages,
 		    struct vm_area_struct **vmas);
 long get_user_pages_locked(unsigned long start, unsigned long nr_pages,
 		    unsigned int gup_flags, struct page **pages, int *locked);
-long pin_user_pages_locked(unsigned long start, unsigned long nr_pages,
-		    unsigned int gup_flags, struct page **pages, int *locked);
 long get_user_pages_unlocked(unsigned long start, unsigned long nr_pages,
 		    struct page **pages, unsigned int gup_flags);
 long pin_user_pages_unlocked(unsigned long start, unsigned long nr_pages,
* Unmerged path mm/gup.c
