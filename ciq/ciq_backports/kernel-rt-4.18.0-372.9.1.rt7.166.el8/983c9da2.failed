net/mlx5e: Remove mlx5e_priv usage from mlx5e_build_*tir_ctx*()

jira LE-1907
Rebuild_History Non-Buildable kernel-rt-4.18.0-372.9.1.rt7.166.el8
commit-author Maxim Mikityanskiy <maximmi@nvidia.com>
commit 983c9da2b1e1aa25a56bfb0715bf728f61c54e8b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-rt-4.18.0-372.9.1.rt7.166.el8/983c9da2.failed

The functions that build TIR context for TIR create and modify commands
used to depend on struct mlx5e_priv and fetch some values directly from
different places. It increased coupling of code and the chance of weird
misbehavior due to hidden complex dependencies.

As the first step, this commit removes the priv parameter from these
functions. Instead, the necessary values are passed directly.

	Signed-off-by: Maxim Mikityanskiy <maximmi@nvidia.com>
	Reviewed-by: Tariq Toukan <tariqt@nvidia.com>
	Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
(cherry picked from commit 983c9da2b1e1aa25a56bfb0715bf728f61c54e8b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en_main.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_main.c
index 15e30d82e985,72782f0fd5eb..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
@@@ -2523,6 -2455,8 +2523,11 @@@ void mlx5e_modify_tirs_hash(struct mlx5
  static int mlx5e_modify_tirs_lro(struct mlx5e_priv *priv)
  {
  	struct mlx5_core_dev *mdev = priv->mdev;
++<<<<<<< HEAD
++=======
+ 	struct mlx5e_rx_res *res = priv->rx_res;
+ 	struct mlx5e_lro_param lro_param;
++>>>>>>> 983c9da2b1e1 (net/mlx5e: Remove mlx5e_priv usage from mlx5e_build_*tir_ctx*())
  
  	void *in;
  	void *tirc;
@@@ -2539,10 -2473,11 +2544,11 @@@
  	MLX5_SET(modify_tir_in, in, bitmask.lro, 1);
  	tirc = MLX5_ADDR_OF(modify_tir_in, in, ctx);
  
- 	mlx5e_build_tir_ctx_lro(&priv->channels.params, tirc);
+ 	lro_param = mlx5e_get_lro_param(&priv->channels.params);
+ 	mlx5e_build_tir_ctx_lro(&lro_param, tirc);
  
  	for (tt = 0; tt < MLX5E_NUM_INDIR_TIRS; tt++) {
 -		err = mlx5_core_modify_tir(mdev, res->rss[tt].indir_tir.tirn, in);
 +		err = mlx5_core_modify_tir(mdev, priv->indir_tir[tt].tirn, in);
  		if (err)
  			goto free_in;
  
@@@ -3182,45 -3129,34 +3188,59 @@@ static void mlx5e_cleanup_nic_tx(struc
  	mlx5e_destroy_tises(priv);
  }
  
- static void mlx5e_build_indir_tir_ctx_common(struct mlx5e_priv *priv,
+ static void mlx5e_build_indir_tir_ctx_common(struct mlx5_core_dev *mdev,
+ 					     struct mlx5e_lro_param *lro_param,
+ 					     bool inner_ft_support,
  					     u32 rqtn, u32 *tirc)
  {
- 	MLX5_SET(tirc, tirc, transport_domain, priv->mdev->mlx5e_res.hw_objs.td.tdn);
+ 	MLX5_SET(tirc, tirc, transport_domain, mdev->mlx5e_res.hw_objs.td.tdn);
  	MLX5_SET(tirc, tirc, disp_type, MLX5_TIRC_DISP_TYPE_INDIRECT);
  	MLX5_SET(tirc, tirc, indirect_table, rqtn);
- 	MLX5_SET(tirc, tirc, tunneled_offload_en,
- 		 priv->channels.params.tunneled_offload_en);
+ 	MLX5_SET(tirc, tirc, tunneled_offload_en, inner_ft_support);
  
- 	mlx5e_build_tir_ctx_lro(&priv->channels.params, tirc);
+ 	mlx5e_build_tir_ctx_lro(lro_param, tirc);
  }
  
- static void mlx5e_build_indir_tir_ctx(struct mlx5e_priv *priv,
- 				      enum mlx5e_traffic_types tt,
- 				      u32 *tirc)
+ static void mlx5e_build_direct_tir_ctx(struct mlx5_core_dev *mdev,
+ 				       struct mlx5e_lro_param *lro_param,
+ 				       bool inner_ft_support,
+ 				       u32 rqtn, u32 *tirc)
  {
++<<<<<<< HEAD
 +	mlx5e_build_indir_tir_ctx_common(priv, priv->indir_rqt.rqtn, tirc);
 +	mlx5e_build_indir_tir_ctx_hash(&priv->rss_params,
 +				       &tirc_default_config[tt], tirc, false);
 +}
 +
 +static void mlx5e_build_direct_tir_ctx(struct mlx5e_priv *priv, u32 rqtn, u32 *tirc)
 +{
 +	mlx5e_build_indir_tir_ctx_common(priv, rqtn, tirc);
 +	MLX5_SET(tirc, tirc, rx_hash_fn, MLX5_RX_HASH_FN_INVERTED_XOR8);
 +}
 +
 +static void mlx5e_build_inner_indir_tir_ctx(struct mlx5e_priv *priv,
 +					    enum mlx5e_traffic_types tt,
 +					    u32 *tirc)
 +{
 +	mlx5e_build_indir_tir_ctx_common(priv, priv->indir_rqt.rqtn, tirc);
 +	mlx5e_build_indir_tir_ctx_hash(&priv->rss_params,
 +				       &tirc_default_config[tt], tirc, true);
 +}
 +
 +int mlx5e_create_indirect_tirs(struct mlx5e_priv *priv, bool inner_ttc)
 +{
++=======
+ 	mlx5e_build_indir_tir_ctx_common(mdev, lro_param, inner_ft_support, rqtn, tirc);
+ 	MLX5_SET(tirc, tirc, rx_hash_fn, MLX5_RX_HASH_FN_INVERTED_XOR8);
+ }
+ 
+ int mlx5e_create_indirect_tirs(struct mlx5e_priv *priv, bool inner_ttc)
+ {
+ 	struct mlx5e_rx_res *res = priv->rx_res;
+ 	struct mlx5e_lro_param lro_param;
++>>>>>>> 983c9da2b1e1 (net/mlx5e: Remove mlx5e_priv usage from mlx5e_build_*tir_ctx*())
  	struct mlx5e_tir *tir;
+ 	u32 indir_rqtn;
  	void *tirc;
  	int inlen;
  	int i = 0;
@@@ -3233,11 -3169,19 +3253,19 @@@
  	if (!in)
  		return -ENOMEM;
  
+ 	lro_param = mlx5e_get_lro_param(&priv->channels.params);
+ 	indir_rqtn = mlx5e_rqt_get_rqtn(&priv->rx_res->indir_rqt);
+ 
  	for (tt = 0; tt < MLX5E_NUM_INDIR_TIRS; tt++) {
  		memset(in, 0, inlen);
 -		tir = &res->rss[tt].indir_tir;
 +		tir = &priv->indir_tir[tt];
  		tirc = MLX5_ADDR_OF(create_tir_in, in, ctx);
- 		mlx5e_build_indir_tir_ctx(priv, tt, tirc);
+ 		mlx5e_build_indir_tir_ctx_common(priv->mdev, &lro_param,
+ 						 priv->channels.params.tunneled_offload_en,
+ 						 indir_rqtn, tirc);
+ 		mlx5e_build_indir_tir_ctx_hash(&priv->rx_res->rss_params,
+ 					       &tirc_default_config[tt], tirc, false);
+ 
  		err = mlx5e_create_tir(priv->mdev, tir, in);
  		if (err) {
  			mlx5_core_warn(priv->mdev, "create indirect tirs failed, %d\n", err);
@@@ -3250,9 -3194,13 +3278,13 @@@
  
  	for (i = 0; i < MLX5E_NUM_INDIR_TIRS; i++) {
  		memset(in, 0, inlen);
 -		tir = &res->rss[i].inner_indir_tir;
 +		tir = &priv->inner_indir_tir[i];
  		tirc = MLX5_ADDR_OF(create_tir_in, in, ctx);
- 		mlx5e_build_inner_indir_tir_ctx(priv, i, tirc);
+ 		mlx5e_build_indir_tir_ctx_common(priv->mdev, &lro_param,
+ 						 priv->channels.params.tunneled_offload_en,
+ 						 indir_rqtn, tirc);
+ 		mlx5e_build_indir_tir_ctx_hash(&priv->rx_res->rss_params,
+ 					       &tirc_default_config[i], tirc, true);
  		err = mlx5e_create_tir(priv->mdev, tir, in);
  		if (err) {
  			mlx5_core_warn(priv->mdev, "create inner indirect tirs failed, %d\n", err);
@@@ -3277,9 -3225,10 +3309,13 @@@ err_destroy_inner_tirs
  	return err;
  }
  
 -static int mlx5e_create_direct_tir(struct mlx5e_priv *priv, struct mlx5e_tir *tir,
 -				   struct mlx5e_rqt *rqt)
 +int mlx5e_create_direct_tirs(struct mlx5e_priv *priv, struct mlx5e_tir *tirs, int n)
  {
++<<<<<<< HEAD
 +	struct mlx5e_tir *tir;
++=======
+ 	struct mlx5e_lro_param lro_param;
++>>>>>>> 983c9da2b1e1 (net/mlx5e: Remove mlx5e_priv usage from mlx5e_build_*tir_ctx*())
  	void *tirc;
  	int inlen;
  	int err = 0;
@@@ -3291,25 -3239,58 +3327,36 @@@
  	if (!in)
  		return -ENOMEM;
  
++<<<<<<< HEAD
 +	for (ix = 0; ix < n; ix++) {
 +		memset(in, 0, inlen);
 +		tir = &tirs[ix];
 +		tirc = MLX5_ADDR_OF(create_tir_in, in, ctx);
 +		mlx5e_build_direct_tir_ctx(priv, tir->rqt.rqtn, tirc);
 +		err = mlx5e_create_tir(priv->mdev, tir, in);
 +		if (unlikely(err))
 +			goto err_destroy_ch_tirs;
 +	}
++=======
+ 	tirc = MLX5_ADDR_OF(create_tir_in, in, ctx);
+ 	lro_param = mlx5e_get_lro_param(&priv->channels.params);
+ 	mlx5e_build_direct_tir_ctx(priv->mdev, &lro_param,
+ 				   priv->channels.params.tunneled_offload_en,
+ 				   mlx5e_rqt_get_rqtn(rqt), tirc);
+ 	err = mlx5e_create_tir(priv->mdev, tir, in);
+ 	if (unlikely(err))
+ 		mlx5_core_warn(priv->mdev, "create tirs failed, %d\n", err);
++>>>>>>> 983c9da2b1e1 (net/mlx5e: Remove mlx5e_priv usage from mlx5e_build_*tir_ctx*())
  
 -	kvfree(in);
 -
 -	return err;
 -}
 -
 -int mlx5e_create_direct_tirs(struct mlx5e_priv *priv)
 -{
 -	int err;
 -	int ix;
 -
 -	for (ix = 0; ix < priv->max_nch; ix++) {
 -		err = mlx5e_create_direct_tir(priv, &priv->rx_res->channels[ix].direct_tir,
 -					      &priv->rx_res->channels[ix].direct_rqt);
 -		if (err)
 -			goto err_destroy_tirs;
 -	}
 -
 -	return 0;
 -
 -err_destroy_tirs:
 -	while (--ix >= 0)
 -		mlx5e_destroy_tir(priv->mdev, &priv->rx_res->channels[ix].direct_tir);
 -
 -	return err;
 -}
 -
 -static int mlx5e_create_xsk_tirs(struct mlx5e_priv *priv)
 -{
 -	int err;
 -	int ix;
 -
 -	for (ix = 0; ix < priv->max_nch; ix++) {
 -		err = mlx5e_create_direct_tir(priv, &priv->rx_res->channels[ix].xsk_tir,
 -					      &priv->rx_res->channels[ix].xsk_rqt);
 -		if (err)
 -			goto err_destroy_tirs;
 -	}
 +	goto out;
  
 -	return 0;
 +err_destroy_ch_tirs:
 +	mlx5_core_warn(priv->mdev, "create tirs failed, %d\n", err);
 +	for (ix--; ix >= 0; ix--)
 +		mlx5e_destroy_tir(priv->mdev, &tirs[ix]);
  
 -err_destroy_tirs:
 -	while (--ix >= 0)
 -		mlx5e_destroy_tir(priv->mdev, &priv->rx_res->channels[ix].xsk_tir);
 +out:
 +	kvfree(in);
  
  	return err;
  }
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en/params.c b/drivers/net/ethernet/mellanox/mlx5/core/en/params.c
index 2cbf18c967f7..3cbb596821e8 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en/params.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en/params.c
@@ -167,6 +167,18 @@ u16 mlx5e_get_rq_headroom(struct mlx5_core_dev *mdev,
 	return is_linear_skb ? mlx5e_get_linear_rq_headroom(params, xsk) : 0;
 }
 
+struct mlx5e_lro_param mlx5e_get_lro_param(struct mlx5e_params *params)
+{
+	struct mlx5e_lro_param lro_param;
+
+	lro_param = (struct mlx5e_lro_param) {
+		.enabled = params->lro_en,
+		.timeout = params->lro_timeout,
+	};
+
+	return lro_param;
+}
+
 u16 mlx5e_calc_sq_stop_room(struct mlx5_core_dev *mdev, struct mlx5e_params *params)
 {
 	bool is_mpwqe = MLX5E_GET_PFLAG(params, MLX5E_PFLAG_SKB_TX_MPWQE);
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en/params.h b/drivers/net/ethernet/mellanox/mlx5/core/en/params.h
index e9593f5f0661..879ad46d754e 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en/params.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en/params.h
@@ -11,6 +11,11 @@ struct mlx5e_xsk_param {
 	u16 chunk_size;
 };
 
+struct mlx5e_lro_param {
+	bool enabled;
+	u32 timeout;
+};
+
 struct mlx5e_cq_param {
 	u32                        cqc[MLX5_ST_SZ_DW(cqc)];
 	struct mlx5_wq_param       wq;
@@ -120,6 +125,7 @@ u8 mlx5e_mpwqe_get_log_num_strides(struct mlx5_core_dev *mdev,
 u16 mlx5e_get_rq_headroom(struct mlx5_core_dev *mdev,
 			  struct mlx5e_params *params,
 			  struct mlx5e_xsk_param *xsk);
+struct mlx5e_lro_param mlx5e_get_lro_param(struct mlx5e_params *params);
 
 /* Build queue parameters */
 
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_main.c
