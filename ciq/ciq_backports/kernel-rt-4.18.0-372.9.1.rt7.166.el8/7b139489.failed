netfilter: nft_dynset: relax superfluous check on set updates

jira LE-1907
Rebuild_History Non-Buildable kernel-rt-4.18.0-372.9.1.rt7.166.el8
commit-author Pablo Neira Ayuso <pablo@netfilter.org>
commit 7b1394892de8d95748d05e3ee41e85edb4abbfa1
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-rt-4.18.0-372.9.1.rt7.166.el8/7b139489.failed

Relax this condition to make add and update commands idempotent for sets
with no timeout. The eval function already checks if the set element
timeout is available and updates it if the update command is used.

Fixes: 22fe54d5fefc ("netfilter: nf_tables: add support for dynamic set updates")
	Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
(cherry picked from commit 7b1394892de8d95748d05e3ee41e85edb4abbfa1)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/netfilter/nft_dynset.c
diff --cc net/netfilter/nft_dynset.c
index 09c7a690cef7,87f3af4645d9..000000000000
--- a/net/netfilter/nft_dynset.c
+++ b/net/netfilter/nft_dynset.c
@@@ -196,16 -198,8 +196,19 @@@ static int nft_dynset_init(const struc
  		return -EBUSY;
  
  	priv->op = ntohl(nla_get_be32(tb[NFTA_DYNSET_OP]));
++<<<<<<< HEAD
 +	switch (priv->op) {
 +	case NFT_DYNSET_OP_ADD:
 +		break;
 +	case NFT_DYNSET_OP_UPDATE:
 +		if (!(set->flags & NFT_SET_TIMEOUT))
 +			return -EOPNOTSUPP;
 +		break;
 +	default:
++=======
+ 	if (priv->op > NFT_DYNSET_OP_DELETE)
++>>>>>>> 7b1394892de8 (netfilter: nft_dynset: relax superfluous check on set updates)
  		return -EOPNOTSUPP;
- 	}
  
  	timeout = 0;
  	if (tb[NFTA_DYNSET_TIMEOUT] != NULL) {
* Unmerged path net/netfilter/nft_dynset.c
