arm64: kernel: arch_crash_save_vmcoreinfo() should depend on CONFIG_CRASH_CORE

jira LE-1907
Rebuild_History Non-Buildable kernel-rt-4.18.0-372.9.1.rt7.166.el8
commit-author James Morse <james.morse@arm.com>
commit 84c57dbd3c480fb2730c393a2cef994ddb4f42cc
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-rt-4.18.0-372.9.1.rt7.166.el8/84c57dbd.failed

Since commit 23c85094fe18 ("proc/kcore: add vmcoreinfo note to /proc/kcore")
the kernel has exported the vmcoreinfo PT_NOTE on /proc/kcore as well
as /proc/vmcore.

arm64 only exposes it's additional arch information via
arch_crash_save_vmcoreinfo() if built with CONFIG_KEXEC, as kdump was
previously the only user of vmcoreinfo.

Move this weak function to a separate file that is built at the same
time as its caller in kernel/crash_core.c. This ensures values like
'kimage_voffset' are always present in the vmcoreinfo PT_NOTE.

CC: AKASHI Takahiro <takahiro.akashi@linaro.org>
	Reviewed-by: Bhupesh Sharma <bhsharma@redhat.com>
	Signed-off-by: James Morse <james.morse@arm.com>
	Signed-off-by: Will Deacon <will.deacon@arm.com>
(cherry picked from commit 84c57dbd3c480fb2730c393a2cef994ddb4f42cc)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/arm64/kernel/Makefile
#	arch/arm64/kernel/machine_kexec.c
diff --cc arch/arm64/kernel/Makefile
index 952119db9f0f,4c8b13bede80..000000000000
--- a/arch/arm64/kernel/Makefile
+++ b/arch/arm64/kernel/Makefile
@@@ -27,41 -27,39 +27,48 @@@ OBJCOPYFLAGS := --prefix-symbols=__efis
  $(obj)/%.stub.o: $(obj)/%.o FORCE
  	$(call if_changed,objcopy)
  
 -arm64-obj-$(CONFIG_COMPAT)		+= sys32.o kuser32.o signal32.o 	\
 +obj-$(CONFIG_COMPAT)			+= sys32.o kuser32.o signal32.o 	\
  					   sys_compat.o
 -arm64-obj-$(CONFIG_FUNCTION_TRACER)	+= ftrace.o entry-ftrace.o
 -arm64-obj-$(CONFIG_MODULES)		+= arm64ksyms.o module.o
 -arm64-obj-$(CONFIG_ARM64_MODULE_PLTS)	+= module-plts.o
 -arm64-obj-$(CONFIG_PERF_EVENTS)		+= perf_regs.o perf_callchain.o
 -arm64-obj-$(CONFIG_HW_PERF_EVENTS)	+= perf_event.o
 -arm64-obj-$(CONFIG_HAVE_HW_BREAKPOINT)	+= hw_breakpoint.o
 -arm64-obj-$(CONFIG_CPU_PM)		+= sleep.o suspend.o
 -arm64-obj-$(CONFIG_CPU_IDLE)		+= cpuidle.o
 -arm64-obj-$(CONFIG_JUMP_LABEL)		+= jump_label.o
 -arm64-obj-$(CONFIG_KGDB)		+= kgdb.o
 -arm64-obj-$(CONFIG_EFI)			+= efi.o efi-entry.stub.o		\
 +obj-$(CONFIG_COMPAT)			+= sigreturn32.o
 +obj-$(CONFIG_FUNCTION_TRACER)		+= ftrace.o entry-ftrace.o
 +obj-$(CONFIG_MODULES)			+= module.o
 +obj-$(CONFIG_ARM64_MODULE_PLTS)		+= module-plts.o
 +obj-$(CONFIG_PERF_EVENTS)		+= perf_regs.o perf_callchain.o
 +obj-$(CONFIG_HW_PERF_EVENTS)		+= perf_event.o
 +obj-$(CONFIG_HAVE_HW_BREAKPOINT)	+= hw_breakpoint.o
 +obj-$(CONFIG_CPU_PM)			+= sleep.o suspend.o
 +obj-$(CONFIG_CPU_IDLE)			+= cpuidle.o
 +obj-$(CONFIG_JUMP_LABEL)		+= jump_label.o
 +obj-$(CONFIG_KGDB)			+= kgdb.o
 +obj-$(CONFIG_EFI)			+= efi.o efi-entry.stub.o		\
  					   efi-rt-wrapper.o
 -arm64-obj-$(CONFIG_PCI)			+= pci.o
 -arm64-obj-$(CONFIG_ARMV8_DEPRECATED)	+= armv8_deprecated.o
 -arm64-obj-$(CONFIG_ACPI)		+= acpi.o
 -arm64-obj-$(CONFIG_ACPI_NUMA)		+= acpi_numa.o
 -arm64-obj-$(CONFIG_ARM64_ACPI_PARKING_PROTOCOL)	+= acpi_parking_protocol.o
 -arm64-obj-$(CONFIG_PARAVIRT)		+= paravirt.o
 -arm64-obj-$(CONFIG_RANDOMIZE_BASE)	+= kaslr.o
 -arm64-obj-$(CONFIG_HIBERNATION)		+= hibernate.o hibernate-asm.o
 -arm64-obj-$(CONFIG_KEXEC)		+= machine_kexec.o relocate_kernel.o	\
 +obj-$(CONFIG_PCI)			+= pci.o
 +obj-$(CONFIG_ARMV8_DEPRECATED)		+= armv8_deprecated.o
 +obj-$(CONFIG_ACPI)			+= acpi.o
 +obj-$(CONFIG_ACPI_NUMA)			+= acpi_numa.o
 +obj-$(CONFIG_ARM64_ACPI_PARKING_PROTOCOL)	+= acpi_parking_protocol.o
 +obj-$(CONFIG_PARAVIRT)			+= paravirt.o
 +obj-$(CONFIG_RANDOMIZE_BASE)		+= kaslr.o
 +obj-$(CONFIG_HIBERNATION)		+= hibernate.o hibernate-asm.o
 +obj-$(CONFIG_KEXEC_CORE)		+= machine_kexec.o relocate_kernel.o	\
  					   cpu-reset.o
 -arm64-obj-$(CONFIG_ARM64_RELOC_TEST)	+= arm64-reloc-test.o
 +obj-$(CONFIG_KEXEC_FILE)		+= machine_kexec_file.o kexec_image.o
 +obj-$(CONFIG_ARM64_RELOC_TEST)		+= arm64-reloc-test.o
  arm64-reloc-test-y := reloc_test_core.o reloc_test_syms.o
++<<<<<<< HEAD
 +obj-$(CONFIG_CRASH_DUMP)		+= crash_dump.o
 +obj-$(CONFIG_ARM_SDE_INTERFACE)		+= sdei.o
 +obj-$(CONFIG_ARM64_SSBD)		+= ssbd.o
 +obj-$(CONFIG_ARM64_PTR_AUTH)		+= pointer_auth.o
++=======
+ arm64-obj-$(CONFIG_CRASH_DUMP)		+= crash_dump.o
+ arm64-obj-$(CONFIG_CRASH_CORE)		+= crash_core.o
+ arm64-obj-$(CONFIG_ARM_SDE_INTERFACE)	+= sdei.o
+ arm64-obj-$(CONFIG_ARM64_SSBD)		+= ssbd.o
++>>>>>>> 84c57dbd3c48 (arm64: kernel: arch_crash_save_vmcoreinfo() should depend on CONFIG_CRASH_CORE)
  
 -obj-y					+= $(arm64-obj-y) vdso/ probes/
 -obj-m					+= $(arm64-obj-m)
 +obj-y					+= vdso/ probes/
 +obj-$(CONFIG_COMPAT_VDSO)		+= vdso32/
  head-y					:= head.o
  extra-y					+= $(head-y) vmlinux.lds
  
diff --cc arch/arm64/kernel/machine_kexec.c
index d7424a275e08,922add8adb74..000000000000
--- a/arch/arm64/kernel/machine_kexec.c
+++ b/arch/arm64/kernel/machine_kexec.c
@@@ -367,20 -358,3 +367,23 @@@ void crash_free_reserved_phys_range(uns
  	}
  }
  #endif /* CONFIG_HIBERNATION */
++<<<<<<< HEAD
 +
 +void arch_crash_save_vmcoreinfo(void)
 +{
 +	VMCOREINFO_NUMBER(VA_BITS);
 +	VMCOREINFO_NUMBER(MAX_PHYSMEM_BITS);
 +
 +	/* MAX_USER_VA_BITS was removed but keep VA_BITS here for compatibility
 +	 * reasons due to RHEL commit 68bdded37d6a ([arm64] arm64, vmcoreinfo :
 +	 * Append 'MAX_USER_VA_BITS' to vmcoreinfo) */
 +	VMCOREINFO_NUMBER(VA_BITS);
 +	/* Please note VMCOREINFO_NUMBER() uses "%d", not "%x" */
 +	vmcoreinfo_append_str("NUMBER(kimage_voffset)=0x%llx\n",
 +						kimage_voffset);
 +	vmcoreinfo_append_str("NUMBER(PHYS_OFFSET)=0x%llx\n",
 +						PHYS_OFFSET);
 +	vmcoreinfo_append_str("KERNELOFFSET=%lx\n", kaslr_offset());
 +}
++=======
++>>>>>>> 84c57dbd3c48 (arm64: kernel: arch_crash_save_vmcoreinfo() should depend on CONFIG_CRASH_CORE)
* Unmerged path arch/arm64/kernel/Makefile
diff --git a/arch/arm64/kernel/crash_core.c b/arch/arm64/kernel/crash_core.c
new file mode 100644
index 000000000000..ca4c3e12d8c5
--- /dev/null
+++ b/arch/arm64/kernel/crash_core.c
@@ -0,0 +1,19 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * Copyright (C) Linaro.
+ * Copyright (C) Huawei Futurewei Technologies.
+ */
+
+#include <linux/crash_core.h>
+#include <asm/memory.h>
+
+void arch_crash_save_vmcoreinfo(void)
+{
+	VMCOREINFO_NUMBER(VA_BITS);
+	/* Please note VMCOREINFO_NUMBER() uses "%d", not "%x" */
+	vmcoreinfo_append_str("NUMBER(kimage_voffset)=0x%llx\n",
+						kimage_voffset);
+	vmcoreinfo_append_str("NUMBER(PHYS_OFFSET)=0x%llx\n",
+						PHYS_OFFSET);
+	vmcoreinfo_append_str("KERNELOFFSET=%lx\n", kaslr_offset());
+}
* Unmerged path arch/arm64/kernel/machine_kexec.c
