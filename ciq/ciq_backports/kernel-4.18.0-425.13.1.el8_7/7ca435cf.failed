x86/irq: Cleanup the arch_*_msi_irqs() leftovers

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-425.13.1.el8_7
commit-author Thomas Gleixner <tglx@linutronix.de>
commit 7ca435cf857dd63d29d5e0b785807f6988788d2f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-425.13.1.el8_7/7ca435cf.failed

Get rid of all the gunk and remove the 'select PCI_MSI_ARCH_FALLBACK' from
the x86 Kconfig so the weak functions in the PCI core are replaced by stubs
which emit a warning, which ensures that any fail to set the irq domain
pointer results in a warning when the device is used.

	Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
Link: https://lore.kernel.org/r/20200826112334.086003720@linutronix.de
(cherry picked from commit 7ca435cf857dd63d29d5e0b785807f6988788d2f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/include/asm/pci.h
#	arch/x86/kernel/apic/msi.c
diff --cc arch/x86/include/asm/pci.h
index a24ce600292b,d2c76c8d8cfd..000000000000
--- a/arch/x86/include/asm/pci.h
+++ b/arch/x86/include/asm/pci.h
@@@ -107,22 -105,6 +107,25 @@@ static inline void early_quirks(void) 
  
  extern void pci_iommu_alloc(void);
  
++<<<<<<< HEAD
 +#ifdef CONFIG_PCI_MSI
 +/* implemented in arch/x86/kernel/apic/io_apic. */
 +struct msi_desc;
 +int native_setup_msi_irqs(struct pci_dev *dev, int nvec, int type);
 +void native_teardown_msi_irq(unsigned int irq);
 +void native_restore_msi_irqs(struct pci_dev *dev);
 +#else
 +#define native_setup_msi_irqs		NULL
 +#define native_teardown_msi_irq		NULL
 +#endif
 +#endif  /* __KERNEL__ */
 +
 +#ifdef CONFIG_X86_64
 +#include <asm/pci_64.h>
 +#endif
 +
++=======
++>>>>>>> 7ca435cf857d (x86/irq: Cleanup the arch_*_msi_irqs() leftovers)
  /* generic pci stuff */
  #include <asm-generic/pci.h>
  
diff --cc arch/x86/kernel/apic/msi.c
index eb944445adf2,3b522b098e92..000000000000
--- a/arch/x86/kernel/apic/msi.c
+++ b/arch/x86/kernel/apic/msi.c
@@@ -155,35 -181,6 +155,38 @@@ static struct irq_chip pci_msi_controll
  	.flags			= IRQCHIP_SKIP_SET_WAKE,
  };
  
++<<<<<<< HEAD
 +int native_setup_msi_irqs(struct pci_dev *dev, int nvec, int type)
 +{
 +	struct irq_domain *domain;
 +	struct irq_alloc_info info;
 +
 +	init_irq_alloc_info(&info, NULL);
 +	info.type = X86_IRQ_ALLOC_TYPE_PCI_MSI;
 +	info.msi_dev = dev;
 +
 +	domain = irq_remapping_get_irq_domain(&info);
 +	if (domain == NULL)
 +		domain = x86_pci_msi_default_domain;
 +	if (domain == NULL)
 +		return -ENOSYS;
 +
 +	return msi_domain_alloc_irqs(domain, &dev->dev, nvec);
 +}
 +
 +void native_teardown_msi_irq(unsigned int irq)
 +{
 +	irq_domain_free_irqs(irq, 1);
 +}
 +
 +static irq_hw_number_t pci_msi_get_hwirq(struct msi_domain_info *info,
 +					 msi_alloc_info_t *arg)
 +{
 +	return arg->msi_hwirq;
 +}
 +
++=======
++>>>>>>> 7ca435cf857d (x86/irq: Cleanup the arch_*_msi_irqs() leftovers)
  int pci_msi_prepare(struct irq_domain *domain, struct device *dev, int nvec,
  		    msi_alloc_info_t *arg)
  {
* Unmerged path arch/x86/include/asm/pci.h
diff --git a/arch/x86/include/asm/x86_init.h b/arch/x86/include/asm/x86_init.h
index 0ab1f0494218..cdaee43a5438 100644
--- a/arch/x86/include/asm/x86_init.h
+++ b/arch/x86/include/asm/x86_init.h
@@ -301,7 +301,6 @@ struct pci_dev;
 
 struct x86_msi_ops {
 	int (*setup_msi_irqs)(struct pci_dev *dev, int nvec, int type);
-	void (*teardown_msi_irq)(unsigned int irq);
 	void (*teardown_msi_irqs)(struct pci_dev *dev);
 	void (*restore_msi_irqs)(struct pci_dev *dev);
 };
* Unmerged path arch/x86/kernel/apic/msi.c
diff --git a/arch/x86/kernel/x86_init.c b/arch/x86/kernel/x86_init.c
index cb13abca22fd..b2d582b66a17 100644
--- a/arch/x86/kernel/x86_init.c
+++ b/arch/x86/kernel/x86_init.c
@@ -128,28 +128,10 @@ EXPORT_SYMBOL_GPL(x86_platform);
 
 #if defined(CONFIG_PCI_MSI)
 struct x86_msi_ops x86_msi __ro_after_init = {
-	.setup_msi_irqs		= native_setup_msi_irqs,
-	.teardown_msi_irq	= native_teardown_msi_irq,
-	.teardown_msi_irqs	= default_teardown_msi_irqs,
 	.restore_msi_irqs	= default_restore_msi_irqs,
 };
 
 /* MSI arch specific hooks */
-int arch_setup_msi_irqs(struct pci_dev *dev, int nvec, int type)
-{
-	return x86_msi.setup_msi_irqs(dev, nvec, type);
-}
-
-void arch_teardown_msi_irqs(struct pci_dev *dev)
-{
-	x86_msi.teardown_msi_irqs(dev);
-}
-
-void arch_teardown_msi_irq(unsigned int irq)
-{
-	x86_msi.teardown_msi_irq(irq);
-}
-
 void arch_restore_msi_irqs(struct pci_dev *dev)
 {
 	x86_msi.restore_msi_irqs(dev);
diff --git a/arch/x86/pci/xen.c b/arch/x86/pci/xen.c
index 2ea4bcc5db04..26975090c05a 100644
--- a/arch/x86/pci/xen.c
+++ b/arch/x86/pci/xen.c
@@ -404,11 +404,6 @@ static void xen_pv_teardown_msi_irqs(struct pci_dev *dev)
 	xen_teardown_msi_irqs(dev);
 }
 
-static void xen_teardown_msi_irq(unsigned int irq)
-{
-	WARN_ON_ONCE(1);
-}
-
 static int xen_msi_domain_alloc_irqs(struct irq_domain *domain,
 				     struct device *dev,  int nvec)
 {
@@ -485,8 +480,6 @@ static __init void xen_setup_pci_msi(void)
 		return;
 	}
 
-	x86_msi.teardown_msi_irq = xen_teardown_msi_irq;
-
 	/*
 	 * Override the PCI/MSI irq domain init function. No point
 	 * in allocating the native domain and never use it.
