arm64: extable: use `ex` for `exception_table_entry`

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-425.13.1.el8_7
commit-author Mark Rutland <mark.rutland@arm.com>
commit 5d0e79051425a6607959e2ab918ef3068cce07f0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-425.13.1.el8_7/5d0e7905.failed

Subsequent patches will extend `struct exception_table_entry` with more
fields, and the distinction between the entry and its `fixup` field will
become more important.

For clarity, let's consistently use `ex` to refer to refer to an entire
entry. In subsequent patches we'll use `fixup` to refer to the fixup
field specifically. This matches the naming convention used today in
arch/arm64/net/bpf_jit_comp.c.

There should be no functional change as a result of this patch.

	Signed-off-by: Mark Rutland <mark.rutland@arm.com>
	Acked-by: Robin Murphy <robin.murphy@arm.com>
	Reviewed-by: Ard Biesheuvel <ardb@kernel.org>
	Cc: Catalin Marinas <catalin.marinas@arm.com>
	Cc: James Morse <james.morse@arm.com>
	Cc: Will Deacon <will@kernel.org>
Link: https://lore.kernel.org/r/20211019160219.5202-10-mark.rutland@arm.com
	Signed-off-by: Will Deacon <will@kernel.org>
(cherry picked from commit 5d0e79051425a6607959e2ab918ef3068cce07f0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/arm64/mm/extable.c
diff --cc arch/arm64/mm/extable.c
index 3552fd77dbaf,dba3d59f3eca..000000000000
--- a/arch/arm64/mm/extable.c
+++ b/arch/arm64/mm/extable.c
@@@ -8,17 -8,15 +8,22 @@@
  
  bool fixup_exception(struct pt_regs *regs)
  {
- 	const struct exception_table_entry *fixup;
+ 	const struct exception_table_entry *ex;
  
- 	fixup = search_exception_tables(instruction_pointer(regs));
- 	if (!fixup)
+ 	ex = search_exception_tables(instruction_pointer(regs));
+ 	if (!ex)
  		return false;
  
++<<<<<<< HEAD
 +	if (IS_ENABLED(CONFIG_BPF_JIT) &&
 +	    regs->pc >= BPF_JIT_REGION_START &&
 +	    regs->pc < BPF_JIT_REGION_END)
 +		return arm64_bpf_fixup_exception(fixup, regs);
++=======
+ 	if (in_bpf_jit(regs))
+ 		return arm64_bpf_fixup_exception(ex, regs);
++>>>>>>> 5d0e79051425 (arm64: extable: use `ex` for `exception_table_entry`)
  
- 	regs->pc = (unsigned long)&fixup->fixup + fixup->fixup;
+ 	regs->pc = (unsigned long)&ex->fixup + ex->fixup;
  	return true;
  }
* Unmerged path arch/arm64/mm/extable.c
