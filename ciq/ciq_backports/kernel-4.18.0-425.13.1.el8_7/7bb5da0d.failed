kexec: turn all kexec_mutex acquisitions into trylocks

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-425.13.1.el8_7
commit-author Valentin Schneider <vschneid@redhat.com>
commit 7bb5da0d490b2d836c5218f5186ee588d2145310
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-425.13.1.el8_7/7bb5da0d.failed

Patch series "kexec, panic: Making crash_kexec() NMI safe", v4.


This patch (of 2):

Most acquistions of kexec_mutex are done via mutex_trylock() - those were
a direct "translation" from:

  8c5a1cf0ad3a ("kexec: use a mutex for locking rather than xchg()")

there have however been two additions since then that use mutex_lock():
crash_get_memory_size() and crash_shrink_memory().

A later commit will replace said mutex with an atomic variable, and
locking operations will become atomic_cmpxchg().  Rather than having those
mutex_lock() become while (atomic_cmpxchg(&lock, 0, 1)), turn them into
trylocks that can return -EBUSY on acquisition failure.

This does halve the printable size of the crash kernel, but that's still
neighbouring 2G for 32bit kernels which should be ample enough.

Link: https://lkml.kernel.org/r/20220630223258.4144112-1-vschneid@redhat.com
Link: https://lkml.kernel.org/r/20220630223258.4144112-2-vschneid@redhat.com
	Signed-off-by: Valentin Schneider <vschneid@redhat.com>
	Cc: Arnd Bergmann <arnd@arndb.de>
	Cc: "Eric W . Biederman" <ebiederm@xmission.com>
	Cc: Juri Lelli <jlelli@redhat.com>
	Cc: Luis Claudio R. Goncalves <lgoncalv@redhat.com>
	Cc: Miaohe Lin <linmiaohe@huawei.com>
	Cc: Petr Mladek <pmladek@suse.com>
	Cc: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: Baoquan He <bhe@redhat.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
(cherry picked from commit 7bb5da0d490b2d836c5218f5186ee588d2145310)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/kexec.h
diff --cc include/linux/kexec.h
index 10ca6c6696dd,41a686996aaa..000000000000
--- a/include/linux/kexec.h
+++ b/include/linux/kexec.h
@@@ -332,11 -427,22 +332,15 @@@ extern note_buf_t __percpu *crash_notes
  extern bool kexec_in_progress;
  
  int crash_shrink_memory(unsigned long new_size);
++<<<<<<< HEAD
 +size_t crash_get_memory_size(void);
 +void crash_free_reserved_phys_range(unsigned long begin, unsigned long end);
++=======
+ ssize_t crash_get_memory_size(void);
++>>>>>>> 7bb5da0d490b (kexec: turn all kexec_mutex acquisitions into trylocks)
  
 -#ifndef arch_kexec_protect_crashkres
 -/*
 - * Protection mechanism for crashkernel reserved memory after
 - * the kdump kernel is loaded.
 - *
 - * Provide an empty default implementation here -- architecture
 - * code may override this
 - */
 -static inline void arch_kexec_protect_crashkres(void) { }
 -#endif
 -
 -#ifndef arch_kexec_unprotect_crashkres
 -static inline void arch_kexec_unprotect_crashkres(void) { }
 -#endif
 +void arch_kexec_protect_crashkres(void);
 +void arch_kexec_unprotect_crashkres(void);
  
  #ifndef page_to_boot_pfn
  static inline unsigned long page_to_boot_pfn(struct page *page)
* Unmerged path include/linux/kexec.h
diff --git a/kernel/kexec_core.c b/kernel/kexec_core.c
index af6f1873ab4b..c5bd23246895 100644
--- a/kernel/kexec_core.c
+++ b/kernel/kexec_core.c
@@ -983,13 +983,16 @@ void crash_kexec(struct pt_regs *regs)
 	}
 }
 
-size_t crash_get_memory_size(void)
+ssize_t crash_get_memory_size(void)
 {
-	size_t size = 0;
+	ssize_t size = 0;
+
+	if (!mutex_trylock(&kexec_mutex))
+		return -EBUSY;
 
-	mutex_lock(&kexec_mutex);
 	if (crashk_res.end != crashk_res.start)
 		size = resource_size(&crashk_res);
+
 	mutex_unlock(&kexec_mutex);
 	return size;
 }
@@ -1010,7 +1013,8 @@ int crash_shrink_memory(unsigned long new_size)
 	unsigned long old_size;
 	struct resource *ram_res;
 
-	mutex_lock(&kexec_mutex);
+	if (!mutex_trylock(&kexec_mutex))
+		return -EBUSY;
 
 	if (kexec_crash_image) {
 		ret = -ENOENT;
diff --git a/kernel/ksysfs.c b/kernel/ksysfs.c
index 46ba853656f6..067d89c2618c 100644
--- a/kernel/ksysfs.c
+++ b/kernel/ksysfs.c
@@ -108,7 +108,12 @@ KERNEL_ATTR_RO(kexec_crash_loaded);
 static ssize_t kexec_crash_size_show(struct kobject *kobj,
 				       struct kobj_attribute *attr, char *buf)
 {
-	return sprintf(buf, "%zu\n", crash_get_memory_size());
+	ssize_t size = crash_get_memory_size();
+
+	if (size < 0)
+		return size;
+
+	return sprintf(buf, "%zd\n", size);
 }
 static ssize_t kexec_crash_size_store(struct kobject *kobj,
 				   struct kobj_attribute *attr,
