mm/vmscan: delay waking of tasks throttled on NOPROGRESS

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-425.13.1.el8_7
commit-author Mel Gorman <mgorman@techsingularity.net>
commit 66ce520bb7c22848bfdf3180d7e760a066dbcfbe
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-425.13.1.el8_7/66ce520b.failed

Tracing indicates that tasks throttled on NOPROGRESS are woken
prematurely resulting in occasional massive spikes in direct reclaim
activity.  This patch wakes tasks throttled on NOPROGRESS if reclaim
efficiency is at least 12%.

Link: https://lkml.kernel.org/r/20211022144651.19914-9-mgorman@techsingularity.net
	Signed-off-by: Mel Gorman <mgorman@techsingularity.net>
	Acked-by: Vlastimil Babka <vbabka@suse.cz>
	Cc: Andreas Dilger <adilger.kernel@dilger.ca>
	Cc: "Darrick J . Wong" <djwong@kernel.org>
	Cc: Dave Chinner <david@fromorbit.com>
	Cc: Johannes Weiner <hannes@cmpxchg.org>
	Cc: Jonathan Corbet <corbet@lwn.net>
	Cc: Matthew Wilcox <willy@infradead.org>
	Cc: Michal Hocko <mhocko@suse.com>
	Cc: NeilBrown <neilb@suse.de>
	Cc: Rik van Riel <riel@surriel.com>
	Cc: "Theodore Ts'o" <tytso@mit.edu>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 66ce520bb7c22848bfdf3180d7e760a066dbcfbe)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	mm/vmscan.c
diff --cc mm/vmscan.c
index e3ffc3c3d8d7,41f5f6007c30..000000000000
--- a/mm/vmscan.c
+++ b/mm/vmscan.c
@@@ -3121,6 -3346,36 +3121,39 @@@ static inline bool compaction_ready(str
  	return zone_watermark_ok_safe(zone, 0, watermark, sc->reclaim_idx);
  }
  
++<<<<<<< HEAD
++=======
+ static void consider_reclaim_throttle(pg_data_t *pgdat, struct scan_control *sc)
+ {
+ 	/*
+ 	 * If reclaim is making progress greater than 12% efficiency then
+ 	 * wake all the NOPROGRESS throttled tasks.
+ 	 */
+ 	if (sc->nr_reclaimed > (sc->nr_scanned >> 3)) {
+ 		wait_queue_head_t *wqh;
+ 
+ 		wqh = &pgdat->reclaim_wait[VMSCAN_THROTTLE_NOPROGRESS];
+ 		if (waitqueue_active(wqh))
+ 			wake_up(wqh);
+ 
+ 		return;
+ 	}
+ 
+ 	/*
+ 	 * Do not throttle kswapd on NOPROGRESS as it will throttle on
+ 	 * VMSCAN_THROTTLE_WRITEBACK if there are too many pages under
+ 	 * writeback and marked for immediate reclaim at the tail of
+ 	 * the LRU.
+ 	 */
+ 	if (current_is_kswapd())
+ 		return;
+ 
+ 	/* Throttle if making no progress at high prioities. */
+ 	if (sc->priority < DEF_PRIORITY - 2)
+ 		reclaim_throttle(pgdat, VMSCAN_THROTTLE_NOPROGRESS);
+ }
+ 
++>>>>>>> 66ce520bb7c2 (mm/vmscan: delay waking of tasks throttled on NOPROGRESS)
  /*
   * This is the direct reclaim path, for page-allocating processes.  We only
   * try to reclaim pages from zones which will satisfy the caller's allocation
* Unmerged path mm/vmscan.c
