include/linux/compiler*.h: fix OPTIMIZER_HIDE_VAR

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-507.el8
commit-author Michael S. Tsirkin <mst@redhat.com>
commit 3e2ffd655cc6a694608d997738989ff5572a8266
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-507.el8/3e2ffd65.failed

Since commit 815f0ddb346c ("include/linux/compiler*.h: make compiler-*.h
mutually exclusive") clang no longer reuses the OPTIMIZER_HIDE_VAR macro
from compiler-gcc - instead it gets the version in
include/linux/compiler.h.  Unfortunately that version doesn't actually
prevent compiler from optimizing out the variable.

Fix up by moving the macro out from compiler-gcc.h to compiler.h.
Compilers without incline asm support will keep working
since it's protected by an ifdef.

Also fix up comments to match reality since we are no longer overriding
any macros.

Build-tested with gcc and clang.

Fixes: 815f0ddb346c ("include/linux/compiler*.h: make compiler-*.h mutually exclusive")
	Cc: Eli Friedman <efriedma@codeaurora.org>
	Cc: Joe Perches <joe@perches.com>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>
	Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
	Signed-off-by: Miguel Ojeda <miguel.ojeda.sandonis@gmail.com>
(cherry picked from commit 3e2ffd655cc6a694608d997738989ff5572a8266)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/compiler-clang.h
diff --cc include/linux/compiler-clang.h
index 7f432aad8ccb,333a6695a918..000000000000
--- a/include/linux/compiler-clang.h
+++ b/include/linux/compiler-clang.h
@@@ -3,14 -3,9 +3,19 @@@
  #error "Please don't include <linux/compiler-clang.h> directly, include <linux/compiler.h> instead."
  #endif
  
++<<<<<<< HEAD
 +/* Some compiler specific definitions are overwritten here
 + * for Clang compiler
 + */
 +
 +#ifdef uninitialized_var
 +#undef uninitialized_var
++=======
+ /* Compiler specific definitions for Clang compiler */
+ 
++>>>>>>> 3e2ffd655cc6 (include/linux/compiler*.h: fix OPTIMIZER_HIDE_VAR)
  #define uninitialized_var(x) x = *(&(x))
 +#endif
  
  /* same as gcc, this was present in clang-2.6 so we can assume it works
   * with any version that can compile the kernel
* Unmerged path include/linux/compiler-clang.h
diff --git a/include/linux/compiler-gcc.h b/include/linux/compiler-gcc.h
index 86782a1b73c9..5f4138a39994 100644
--- a/include/linux/compiler-gcc.h
+++ b/include/linux/compiler-gcc.h
@@ -58,10 +58,6 @@
 	(typeof(ptr)) (__ptr + (off));					\
 })
 
-/* Make the optimizer believe the variable can be manipulated arbitrarily. */
-#define OPTIMIZER_HIDE_VAR(var)						\
-	__asm__ ("" : "=r" (var) : "0" (var))
-
 /*
  * A trick to suppress uninitialized variable warning without generating any
  * code
diff --git a/include/linux/compiler-intel.h b/include/linux/compiler-intel.h
index 547cdc920a3c..5e0ecfa6a283 100644
--- a/include/linux/compiler-intel.h
+++ b/include/linux/compiler-intel.h
@@ -5,9 +5,7 @@
 
 #ifdef __ECC
 
-/* Some compiler specific definitions are overwritten here
- * for Intel ECC compiler
- */
+/* Compiler specific definitions for Intel ECC compiler */
 
 #include <asm/intrinsics.h>
 
diff --git a/include/linux/compiler.h b/include/linux/compiler.h
index 24a0e7ee0618..e3f6ca823bba 100644
--- a/include/linux/compiler.h
+++ b/include/linux/compiler.h
@@ -218,7 +218,9 @@ void ftrace_likely_update(struct ftrace_likely_data *f, int val,
 #define absolute_pointer(val)	RELOC_HIDE((void *)(val), 0)
 
 #ifndef OPTIMIZER_HIDE_VAR
-#define OPTIMIZER_HIDE_VAR(var) barrier()
+/* Make the optimizer believe the variable can be manipulated arbitrarily. */
+#define OPTIMIZER_HIDE_VAR(var)						\
+	__asm__ ("" : "=r" (var) : "0" (var))
 #endif
 
 /* Not-quite-unique ID. */
