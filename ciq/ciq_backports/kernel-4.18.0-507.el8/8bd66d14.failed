include/linux/compiler*.h: define asm_volatile_goto

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-507.el8
commit-author ndesaulniers@google.com <ndesaulniers@google.com>
commit 8bd66d147c88bd441178c7b4c774ae5a185f19b8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-507.el8/8bd66d14.failed

asm_volatile_goto should also be defined for other compilers that support
asm goto.

Fixes commit 815f0ddb346c ("include/linux/compiler*.h: make compiler-*.h
mutually exclusive").

	Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>
	Signed-off-by: Miguel Ojeda <miguel.ojeda.sandonis@gmail.com>
(cherry picked from commit 8bd66d147c88bd441178c7b4c774ae5a185f19b8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/compiler_types.h
diff --cc include/linux/compiler_types.h
index 4fb18f107703,4a3f9c09c92d..000000000000
--- a/include/linux/compiler_types.h
+++ b/include/linux/compiler_types.h
@@@ -230,50 -130,19 +230,57 @@@ struct ftrace_likely_data 
  # define randomized_struct_fields_end
  #endif
  
++<<<<<<< HEAD
 +#ifndef __noscs
 +# define __noscs
 +#endif
 +
 +/*
 + * Tell gcc if a function is cold. The compiler will assume any path
 + * directly leading to the call is unlikely.
 + */
 +
 +#ifndef __cold
 +#define __cold
 +#endif
 +
 +/* Simple shorthand for a section definition */
 +#ifndef __section
 +# define __section(S) __attribute__ ((__section__(#S)))
 +#endif
 +
 +#ifndef __visible
 +#define __visible
 +#endif
 +
 +#ifndef __nostackprotector
 +# define __nostackprotector
 +#endif
 +
 +/*
 + * Assume alignment of return value.
 + */
 +#ifndef __assume_aligned
 +#define __assume_aligned(a, ...)
 +#endif
 +
 +
++=======
+ #ifndef asm_volatile_goto
+ #define asm_volatile_goto(x...) asm goto(x)
+ #endif
+ 
++>>>>>>> 8bd66d147c88 (include/linux/compiler*.h: define asm_volatile_goto)
  /* Are two types/vars the same type (ignoring qualifiers)? */
 -#define __same_type(a, b) __builtin_types_compatible_p(typeof(a), typeof(b))
 +#ifndef __same_type
 +# define __same_type(a, b) __builtin_types_compatible_p(typeof(a), typeof(b))
 +#endif
  
  /* Is this type a native word size -- useful for atomic operations */
 -#define __native_word(t) \
 -	(sizeof(t) == sizeof(char) || sizeof(t) == sizeof(short) || \
 -	 sizeof(t) == sizeof(int) || sizeof(t) == sizeof(long))
 +#ifndef __native_word
 +# define __native_word(t) (sizeof(t) == sizeof(char) || sizeof(t) == sizeof(short) || sizeof(t) == sizeof(int) || sizeof(t) == sizeof(long))
 +#endif
  
 -/* Helpers for emitting diagnostics in pragmas. */
  #ifndef __diag
  #define __diag(string)
  #endif
* Unmerged path include/linux/compiler_types.h
