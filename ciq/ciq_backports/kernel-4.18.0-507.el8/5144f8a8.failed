compiler_types.h: Add __no_sanitize_{address,undefined} to noinstr

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-507.el8
commit-author Marco Elver <elver@google.com>
commit 5144f8a8dfd7b3681f0a2b5bf599a210b2315018
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-507.el8/5144f8a8.failed

Adds the portable definitions for __no_sanitize_address, and
__no_sanitize_undefined, and subsequently changes noinstr to use the
attributes to disable instrumentation via KASAN or UBSAN.

	Reported-by: syzbot+dc1fa714cb070b184db5@syzkaller.appspotmail.com
	Signed-off-by: Marco Elver <elver@google.com>
	Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
	Acked-by: Miguel Ojeda <miguel.ojeda.sandonis@gmail.com>
Link: https://lore.kernel.org/lkml/000000000000d2474c05a6c938fe@google.com/
(cherry picked from commit 5144f8a8dfd7b3681f0a2b5bf599a210b2315018)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/compiler_types.h
diff --cc include/linux/compiler_types.h
index 4fb18f107703,85b8d2370c24..000000000000
--- a/include/linux/compiler_types.h
+++ b/include/linux/compiler_types.h
@@@ -185,34 -167,49 +185,51 @@@ struct ftrace_likely_data 
   */
  #define noinline_for_stack noinline
  
 -/*
 - * Sanitizer helper attributes: Because using __always_inline and
 - * __no_sanitize_* conflict, provide helper attributes that will either expand
 - * to __no_sanitize_* in compilation units where instrumentation is enabled
 - * (__SANITIZE_*__), or __always_inline in compilation units without
 - * instrumentation (__SANITIZE_*__ undefined).
 - */
 -#ifdef __SANITIZE_ADDRESS__
 -/*
 - * We can't declare function 'inline' because __no_sanitize_address conflicts
 - * with inlining. Attempt to inline it may cause a build failure.
 - *     https://gcc.gnu.org/bugzilla/show_bug.cgi?id=67368
 - * '__maybe_unused' allows us to avoid defined-but-not-used warnings.
 - */
 -# define __no_kasan_or_inline __no_sanitize_address notrace __maybe_unused
 -# define __no_sanitize_or_inline __no_kasan_or_inline
 -#else
 -# define __no_kasan_or_inline __always_inline
 +#ifndef __always_inline
 +#define __always_inline inline
  #endif
  
++<<<<<<< HEAD
++=======
+ #define __no_kcsan __no_sanitize_thread
+ #ifdef __SANITIZE_THREAD__
+ # define __no_sanitize_or_inline __no_kcsan notrace __maybe_unused
+ #endif
+ 
+ #ifndef __no_sanitize_or_inline
+ #define __no_sanitize_or_inline __always_inline
+ #endif
+ 
+ /* Section for code which can't be instrumented at all */
+ #define noinstr								\
+ 	noinline notrace __attribute((__section__(".noinstr.text")))	\
+ 	__no_kcsan __no_sanitize_address __no_sanitize_undefined
+ 
++>>>>>>> 5144f8a8dfd7 (compiler_types.h: Add __no_sanitize_{address,undefined} to noinstr)
  #endif /* __KERNEL__ */
  
 -#endif /* __ASSEMBLY__ */
 -
  /*
 - * The below symbols may be defined for one or more, but not ALL, of the above
 - * compilers. We don't consider that to be an error, so set them to nothing.
 - * For example, some of them are for compiler specific plugins.
 + * From the GCC manual:
 + *
 + * Many functions do not examine any values except their arguments,
 + * and have no effects except the return value.  Basically this is
 + * just slightly more strict class than the `pure' attribute above,
 + * since function is not allowed to read global memory.
 + *
 + * Note that a function that has pointer arguments and examines the
 + * data pointed to must _not_ be declared `const'.  Likewise, a
 + * function that calls a non-`const' function usually must not be
 + * `const'.  It does not make sense for a `const' function to return
 + * `void'.
   */
 +#ifndef __attribute_const__
 +# define __attribute_const__	/* unimplemented */
 +#endif
 +
 +#ifndef __designated_init
 +# define __designated_init
 +#endif
 +
  #ifndef __latent_entropy
  # define __latent_entropy
  #endif
diff --git a/include/linux/compiler-clang.h b/include/linux/compiler-clang.h
index 7f432aad8ccb..05441704a1e5 100644
--- a/include/linux/compiler-clang.h
+++ b/include/linux/compiler-clang.h
@@ -45,6 +45,14 @@
 #define __no_sanitize_thread
 #endif
 
+#if __has_feature(undefined_behavior_sanitizer)
+/* GCC does not have __SANITIZE_UNDEFINED__ */
+#define __no_sanitize_undefined \
+		__attribute__((no_sanitize("undefined")))
+#else
+#define __no_sanitize_undefined
+#endif
+
 /*
  * Not all versions of clang implement the the type-generic versions
  * of the builtin overflow checkers. Fortunately, clang implements
diff --git a/include/linux/compiler-gcc.h b/include/linux/compiler-gcc.h
index daf7e12f1022..5076bc760720 100644
--- a/include/linux/compiler-gcc.h
+++ b/include/linux/compiler-gcc.h
@@ -302,6 +302,12 @@
 #define __no_sanitize_thread
 #endif
 
+#if __has_attribute(__no_sanitize_undefined__)
+#define __no_sanitize_undefined __attribute__((no_sanitize_undefined))
+#else
+#define __no_sanitize_undefined
+#endif
+
 #if GCC_VERSION >= 50100
 /*
  * Mark structures as requiring designated initializers.
* Unmerged path include/linux/compiler_types.h
