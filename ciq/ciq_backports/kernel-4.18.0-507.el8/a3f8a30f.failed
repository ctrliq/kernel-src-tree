Compiler Attributes: use feature checks instead of version checks

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-507.el8
commit-author Miguel Ojeda <miguel.ojeda.sandonis@gmail.com>
commit a3f8a30f3f0079c7edfc72e329eee8594fb3e3cb
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-507.el8/a3f8a30f.failed

Instead of using version checks per-compiler to define (or not)
each attribute, use __has_attribute to test for them, following
the cleanup started with commit 815f0ddb346c
("include/linux/compiler*.h: make compiler-*.h mutually exclusive"),
which is supported on gcc >= 5, clang >= 2.9 and icc >= 17.
In the meantime, to support 4.6 <= gcc < 5, we implement
__has_attribute by hand.

All the attributes that can be unconditionally defined and directly
map to compiler attribute(s) (even if optional) have been moved
to a new file include/linux/compiler_attributes.h

In an effort to make the file as regular as possible, comments
stating the purpose of attributes have been removed. Instead,
links to the compiler docs have been added (i.e. to gcc and,
if available, to clang as well). In addition, they have been sorted.

Finally, if an attribute is optional (i.e. if it is guarded
by __has_attribute), the reason has been stated for future reference.

	Tested-by: Sedat Dilek <sedat.dilek@gmail.com> # on top of v4.19-rc5, clang 7
	Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>
	Reviewed-by: Luc Van Oostenryck <luc.vanoostenryck@gmail.com>
	Signed-off-by: Miguel Ojeda <miguel.ojeda.sandonis@gmail.com>
(cherry picked from commit a3f8a30f3f0079c7edfc72e329eee8594fb3e3cb)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/compiler-clang.h
#	include/linux/compiler-gcc.h
#	include/linux/compiler-intel.h
#	include/linux/compiler_types.h
diff --cc include/linux/compiler-clang.h
index 7f432aad8ccb,3e7dafb3ea80..000000000000
--- a/include/linux/compiler-clang.h
+++ b/include/linux/compiler-clang.h
@@@ -20,31 -16,11 +20,34 @@@
  /* all clang versions usable with the kernel support KASAN ABI version 5 */
  #define KASAN_ABI_VERSION 5
  
 -/* emulate gcc's __SANITIZE_ADDRESS__ flag */
 -#if __has_feature(address_sanitizer)
 +#undef __no_sanitize_address
 +#if __has_feature(address_sanitizer) || __has_feature(hwaddress_sanitizer)
 +/* Emulate GCC's __SANITIZE_ADDRESS__ flag */
  #define __SANITIZE_ADDRESS__
 +#define __no_sanitize_address \
 +		__attribute__((no_sanitize("address", "hwaddress")))
 +#else
 +#define __no_sanitize_address
 +#endif
 +
++<<<<<<< HEAD
 +/* Clang doesn't have a way to turn it off per-function, yet. */
 +#ifdef __noretpoline
 +#undef __noretpoline
  #endif
  
 +#undef __no_sanitize_thread
 +#if __has_feature(thread_sanitizer)
 +/* emulate gcc's __SANITIZE_THREAD__ flag */
 +#define __SANITIZE_THREAD__
 +#define __no_sanitize_thread \
 +		__attribute__((no_sanitize("thread")))
 +#else
 +#define __no_sanitize_thread
 +#endif
 +
++=======
++>>>>>>> a3f8a30f3f00 (Compiler Attributes: use feature checks instead of version checks)
  /*
   * Not all versions of clang implement the the type-generic versions
   * of the builtin overflow checkers. Fortunately, clang implements
@@@ -59,6 -34,8 +62,14 @@@
  #define COMPILER_HAS_GENERIC_BUILTIN_OVERFLOW 1
  #endif
  
++<<<<<<< HEAD
 +#if __has_feature(shadow_call_stack)
 +# define __noscs	__attribute__((__no_sanitize__("shadow-call-stack")))
 +#endif
++=======
+ /* The following are for compatibility with GCC, from compiler-gcc.h,
+  * and may be redefined here because they should not be shared with other
+  * compilers, like ICC.
+  */
+ #define barrier() __asm__ __volatile__("" : : : "memory")
++>>>>>>> a3f8a30f3f00 (Compiler Attributes: use feature checks instead of version checks)
diff --cc include/linux/compiler-gcc.h
index 86782a1b73c9,cfac027e1625..000000000000
--- a/include/linux/compiler-gcc.h
+++ b/include/linux/compiler-gcc.h
@@@ -234,32 -117,6 +231,35 @@@
  #endif
  
  /*
++<<<<<<< HEAD
 + * When used with Link Time Optimization, gcc can optimize away C functions or
 + * variables which are referenced only from assembly code.  __visible tells the
 + * optimizer that something else uses this function or variable, thus preventing
 + * this.
 + */
 +#define __visible	__attribute__((externally_visible))
 +
 +/* gcc version specific checks */
 +
 +#if GCC_VERSION >= 40900 && !defined(__CHECKER__)
 +/*
 + * __assume_aligned(n, k): Tell the optimizer that the returned
 + * pointer can be assumed to be k modulo n. The second argument is
 + * optional (default 0), so we use a variadic macro to make the
 + * shorthand.
 + *
 + * Beware: Do not apply this to functions which may return
 + * ERR_PTRs. Also, it is probably unwise to apply it to functions
 + * returning extra information in the low bits (but in that case the
 + * compiler should see some alignment anyway, when the return value is
 + * massaged by 'flags = ptr & 3; ptr &= ~3;').
 + */
 +#define __assume_aligned(a, ...) __attribute__((__assume_aligned__(a, ## __VA_ARGS__)))
 +#endif
 +
 +/*
++=======
++>>>>>>> a3f8a30f3f00 (Compiler Attributes: use feature checks instead of version checks)
   * GCC 'asm goto' miscompiles certain code sequences:
   *
   *   http://gcc.gnu.org/bugzilla/show_bug.cgi?id=58670
@@@ -290,25 -147,7 +290,29 @@@
  #define KASAN_ABI_VERSION 3
  #endif
  
++<<<<<<< HEAD
 +#if __has_attribute(__no_sanitize_address__)
 +#define __no_sanitize_address __attribute__((no_sanitize_address))
 +#else
 +#define __no_sanitize_address
 +#endif
 +
 +#if defined(__SANITIZE_THREAD__) && __has_attribute(__no_sanitize_thread__)
 +#define __no_sanitize_thread                                                   \
 +	__attribute__((__noinline__)) __attribute__((no_sanitize_thread))
 +#else
 +#define __no_sanitize_thread
 +#endif
 +
 +#if GCC_VERSION >= 50100
 +/*
 + * Mark structures as requiring designated initializers.
 + * https://gcc.gnu.org/onlinedocs/gcc/Designated-Inits.html
 + */
 +#define __designated_init __attribute__((designated_init))
++=======
+ #if GCC_VERSION >= 50100
++>>>>>>> a3f8a30f3f00 (Compiler Attributes: use feature checks instead of version checks)
  #define COMPILER_HAS_GENERIC_BUILTIN_OVERFLOW 1
  #endif
  
diff --cc include/linux/compiler-intel.h
index 547cdc920a3c,517bd14e1222..000000000000
--- a/include/linux/compiler-intel.h
+++ b/include/linux/compiler-intel.h
@@@ -42,9 -34,3 +42,12 @@@
  /* icc has this, but it's called _bswap16 */
  #define __HAVE_BUILTIN_BSWAP16__
  #define __builtin_bswap16 _bswap16
++<<<<<<< HEAD
 +#endif
 +
 +/*
 + * icc defines __GNUC__, but does not implement the builtin overflow checkers.
 + */
 +#undef COMPILER_HAS_GENERIC_BUILTIN_OVERFLOW
++=======
++>>>>>>> a3f8a30f3f00 (Compiler Attributes: use feature checks instead of version checks)
diff --cc include/linux/compiler_types.h
index 4fb18f107703,3439d7d0249a..000000000000
--- a/include/linux/compiler_types.h
+++ b/include/linux/compiler_types.h
@@@ -54,28 -55,19 +54,35 @@@ extern void __chk_io_ptr(const volatil
  
  #ifdef __KERNEL__
  
++<<<<<<< HEAD
 +#ifdef __GNUC__
 +#include <linux/compiler-gcc.h>
 +#endif
 +
 +#if defined(CC_USING_HOTPATCH) && !defined(__CHECKER__)
 +#define notrace __attribute__((hotpatch(0,0)))
 +#else
 +#define notrace __attribute__((no_instrument_function))
 +#endif
 +
 +/* Intel compiler defines __GNUC__. So we will overwrite implementations
 + * coming from above header files here
 + */
 +#ifdef __INTEL_COMPILER
 +# include <linux/compiler-intel.h>
 +#endif
 +
 +/* Clang compiler defines __GNUC__. So we will overwrite implementations
 + * coming from above header files here
 + */
++=======
+ /* Attributes */
+ #include <linux/compiler_attributes.h>
+ 
+ /* Compiler specific macros. */
++>>>>>>> a3f8a30f3f00 (Compiler Attributes: use feature checks instead of version checks)
  #ifdef __clang__
  #include <linux/compiler-clang.h>
 -#elif defined(__INTEL_COMPILER)
 -#include <linux/compiler-intel.h>
 -#elif defined(__GNUC__)
 -/* The above compilers also define __GNUC__, so order is important here. */
 -#include <linux/compiler-gcc.h>
 -#else
 -#error "Unknown compiler"
  #endif
  
  /*
@@@ -90,12 -82,6 +97,15 @@@
  #include <asm/compiler.h>
  #endif
  
++<<<<<<< HEAD
 +/*
 + * Generic compiler-dependent macros required for kernel
 + * build go below this comment. Actual compiler/compiler version
 + * specific implementations come from the above header files
 + */
 +
++=======
++>>>>>>> a3f8a30f3f00 (Compiler Attributes: use feature checks instead of version checks)
  struct ftrace_branch_data {
  	const char *func;
  	const char *file;
@@@ -118,101 -104,15 +128,107 @@@ struct ftrace_likely_data 
  	unsigned long			constant;
  };
  
++<<<<<<< HEAD
 +/* Section for code which can't be instrumented at all */
 +#define noinstr								\
 +	noinline notrace __attribute((__section__(".noinstr.text")))
 +
++=======
++>>>>>>> a3f8a30f3f00 (Compiler Attributes: use feature checks instead of version checks)
  #endif /* __KERNEL__ */
  
  #endif /* __ASSEMBLY__ */
  
 +#ifdef __KERNEL__
 +
 +/* Don't. Just don't. */
 +#define __deprecated
 +#define __deprecated_for_modules
 +
 +#ifndef __must_check
 +#define __must_check
 +#endif
 +
 +#ifndef CONFIG_ENABLE_MUST_CHECK
 +#undef __must_check
 +#define __must_check
 +#endif
 +
 +#ifndef __malloc
 +#define __malloc
 +#endif
 +
  /*
 - * The below symbols may be defined for one or more, but not ALL, of the above
 - * compilers. We don't consider that to be an error, so set them to nothing.
 - * For example, some of them are for compiler specific plugins.
 + * Allow us to avoid 'defined but not used' warnings on functions and data,
 + * as well as force them to be emitted to the assembly file.
 + *
 + * As of gcc 3.4, static functions that are not marked with attribute((used))
 + * may be elided from the assembly file.  As of gcc 3.4, static data not so
 + * marked will not be elided, but this may change in a future gcc version.
 + *
 + * NOTE: Because distributions shipped with a backported unit-at-a-time
 + * compiler in gcc 3.3, we must define __used to be __attribute__((used))
 + * for gcc >=3.3 instead of 3.4.
 + *
 + * In prior versions of gcc, such functions and data would be emitted, but
 + * would be warned about except with attribute((unused)).
 + *
 + * Mark functions that are referenced only in inline assembly as __used so
 + * the code is emitted even though it appears to be unreferenced.
   */
++<<<<<<< HEAD
 +#ifndef __used
 +# define __used			/* unimplemented */
 +#endif
 +
 +#ifndef __maybe_unused
 +# define __maybe_unused		/* unimplemented */
 +#endif
 +
 +#ifndef __always_unused
 +# define __always_unused	/* unimplemented */
 +#endif
 +
 +#ifndef noinline
 +#define noinline
 +#endif
 +
 +/*
 + * Rather then using noinline to prevent stack consumption, use
 + * noinline_for_stack instead.  For documentation reasons.
 + */
 +#define noinline_for_stack noinline
 +
 +#ifndef __always_inline
 +#define __always_inline inline
 +#endif
 +
 +#endif /* __KERNEL__ */
 +
 +/*
 + * From the GCC manual:
 + *
 + * Many functions do not examine any values except their arguments,
 + * and have no effects except the return value.  Basically this is
 + * just slightly more strict class than the `pure' attribute above,
 + * since function is not allowed to read global memory.
 + *
 + * Note that a function that has pointer arguments and examines the
 + * data pointed to must _not_ be declared `const'.  Likewise, a
 + * function that calls a non-`const' function usually must not be
 + * `const'.  It does not make sense for a `const' function to return
 + * `void'.
 + */
 +#ifndef __attribute_const__
 +# define __attribute_const__	/* unimplemented */
 +#endif
 +
 +#ifndef __designated_init
 +# define __designated_init
 +#endif
 +
++=======
++>>>>>>> a3f8a30f3f00 (Compiler Attributes: use feature checks instead of version checks)
  #ifndef __latent_entropy
  # define __latent_entropy
  #endif
@@@ -230,50 -130,15 +246,62 @@@
  # define randomized_struct_fields_end
  #endif
  
++<<<<<<< HEAD
 +#ifndef __noscs
 +# define __noscs
 +#endif
 +
 +/*
 + * Tell gcc if a function is cold. The compiler will assume any path
 + * directly leading to the call is unlikely.
 + */
 +
 +#ifndef __cold
 +#define __cold
 +#endif
 +
 +/* Simple shorthand for a section definition */
 +#ifndef __section
 +# define __section(S) __attribute__ ((__section__(#S)))
 +#endif
 +
 +#ifndef __visible
 +#define __visible
 +#endif
 +
 +#ifndef __nostackprotector
 +# define __nostackprotector
 +#endif
 +
 +/*
 + * Assume alignment of return value.
 + */
 +#ifndef __assume_aligned
 +#define __assume_aligned(a, ...)
 +#endif
 +
 +
 +/* Are two types/vars the same type (ignoring qualifiers)? */
 +#ifndef __same_type
 +# define __same_type(a, b) __builtin_types_compatible_p(typeof(a), typeof(b))
 +#endif
 +
 +/* Is this type a native word size -- useful for atomic operations */
 +#ifndef __native_word
 +# define __native_word(t) (sizeof(t) == sizeof(char) || sizeof(t) == sizeof(short) || sizeof(t) == sizeof(int) || sizeof(t) == sizeof(long))
 +#endif
 +
++=======
+ /* Are two types/vars the same type (ignoring qualifiers)? */
+ #define __same_type(a, b) __builtin_types_compatible_p(typeof(a), typeof(b))
+ 
+ /* Is this type a native word size -- useful for atomic operations */
+ #define __native_word(t) \
+ 	(sizeof(t) == sizeof(char) || sizeof(t) == sizeof(short) || \
+ 	 sizeof(t) == sizeof(int) || sizeof(t) == sizeof(long))
+ 
+ /* Helpers for emitting diagnostics in pragmas. */
++>>>>>>> a3f8a30f3f00 (Compiler Attributes: use feature checks instead of version checks)
  #ifndef __diag
  #define __diag(string)
  #endif
@@@ -292,4 -157,58 +320,61 @@@
  #define __diag_error(compiler, version, option, comment) \
  	__diag_ ## compiler(version, error, option)
  
++<<<<<<< HEAD
++=======
+ #ifdef CONFIG_ENABLE_MUST_CHECK
+ #define __must_check		__attribute__((__warn_unused_result__))
+ #else
+ #define __must_check
+ #endif
+ 
+ #if defined(CC_USING_HOTPATCH)
+ #define notrace			__attribute__((hotpatch(0, 0)))
+ #else
+ #define notrace			__attribute__((__no_instrument_function__))
+ #endif
+ 
+ /*
+  * it doesn't make sense on ARM (currently the only user of __naked)
+  * to trace naked functions because then mcount is called without
+  * stack and frame pointer being set up and there is no chance to
+  * restore the lr register to the value before mcount was called.
+  */
+ #define __naked			__attribute__((__naked__)) notrace
+ 
+ #define __compiler_offsetof(a, b)	__builtin_offsetof(a, b)
+ 
+ /*
+  * Force always-inline if the user requests it so via the .config.
+  * GCC does not warn about unused static inline functions for
+  * -Wunused-function.  This turns out to avoid the need for complex #ifdef
+  * directives.  Suppress the warning in clang as well by using "unused"
+  * function attribute, which is redundant but not harmful for gcc.
+  * Prefer gnu_inline, so that extern inline functions do not emit an
+  * externally visible function. This makes extern inline behave as per gnu89
+  * semantics rather than c99. This prevents multiple symbol definition errors
+  * of extern inline functions at link time.
+  * A lot of inline functions can cause havoc with function tracing.
+  * Do not use __always_inline here, since currently it expands to inline again
+  * (which would break users of __always_inline).
+  */
+ #if !defined(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || \
+ 	!defined(CONFIG_OPTIMIZE_INLINING)
+ #define inline inline __attribute__((__always_inline__)) __gnu_inline \
+ 	__maybe_unused notrace
+ #else
+ #define inline inline                                    __gnu_inline \
+ 	__maybe_unused notrace
+ #endif
+ 
+ #define __inline__ inline
+ #define __inline   inline
+ 
+ /*
+  * Rather then using noinline to prevent stack consumption, use
+  * noinline_for_stack instead.  For documentation reasons.
+  */
+ #define noinline_for_stack noinline
+ 
++>>>>>>> a3f8a30f3f00 (Compiler Attributes: use feature checks instead of version checks)
  #endif /* __LINUX_COMPILER_TYPES_H */
* Unmerged path include/linux/compiler-clang.h
* Unmerged path include/linux/compiler-gcc.h
* Unmerged path include/linux/compiler-intel.h
diff --git a/include/linux/compiler_attributes.h b/include/linux/compiler_attributes.h
new file mode 100644
index 000000000000..f0f9fc398440
--- /dev/null
+++ b/include/linux/compiler_attributes.h
@@ -0,0 +1,244 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+#ifndef __LINUX_COMPILER_ATTRIBUTES_H
+#define __LINUX_COMPILER_ATTRIBUTES_H
+
+/*
+ * The attributes in this file are unconditionally defined and they directly
+ * map to compiler attribute(s) -- except those that are optional.
+ *
+ * Any other "attributes" (i.e. those that depend on a configuration option,
+ * on a compiler, on an architecture, on plugins, on other attributes...)
+ * should be defined elsewhere (e.g. compiler_types.h or compiler-*.h).
+ *
+ * This file is meant to be sorted (by actual attribute name,
+ * not by #define identifier). Use the __attribute__((__name__)) syntax
+ * (i.e. with underscores) to avoid future collisions with other macros.
+ * If an attribute is optional, state the reason in the comment.
+ */
+
+/*
+ * To check for optional attributes, we use __has_attribute, which is supported
+ * on gcc >= 5, clang >= 2.9 and icc >= 17. In the meantime, to support
+ * 4.6 <= gcc < 5, we implement __has_attribute by hand.
+ *
+ * sparse does not support __has_attribute (yet) and defines __GNUC_MINOR__
+ * depending on the compiler used to build it; however, these attributes have
+ * no semantic effects for sparse, so it does not matter. Also note that,
+ * in order to avoid sparse's warnings, even the unsupported ones must be
+ * defined to 0.
+ */
+#ifndef __has_attribute
+# define __has_attribute(x) __GCC4_has_attribute_##x
+# define __GCC4_has_attribute___assume_aligned__      (__GNUC_MINOR__ >= 9)
+# define __GCC4_has_attribute___designated_init__     0
+# define __GCC4_has_attribute___externally_visible__  1
+# define __GCC4_has_attribute___noclone__             1
+# define __GCC4_has_attribute___optimize__            1
+# define __GCC4_has_attribute___no_sanitize_address__ (__GNUC_MINOR__ >= 8)
+#endif
+
+/*
+ *   gcc: https://gcc.gnu.org/onlinedocs/gcc/Common-Function-Attributes.html#index-alias-function-attribute
+ */
+#define __alias(symbol)                 __attribute__((__alias__(#symbol)))
+
+/*
+ *   gcc: https://gcc.gnu.org/onlinedocs/gcc/Common-Function-Attributes.html#index-aligned-function-attribute
+ *   gcc: https://gcc.gnu.org/onlinedocs/gcc/Common-Type-Attributes.html#index-aligned-type-attribute
+ *   gcc: https://gcc.gnu.org/onlinedocs/gcc/Common-Variable-Attributes.html#index-aligned-variable-attribute
+ */
+#define __aligned(x)                    __attribute__((__aligned__(x)))
+#define __aligned_largest               __attribute__((__aligned__))
+
+/*
+ * Note: users of __always_inline currently do not write "inline" themselves,
+ * which seems to be required by gcc to apply the attribute according
+ * to its docs (and also "warning: always_inline function might not be
+ * inlinable [-Wattributes]" is emitted).
+ *
+ *   gcc: https://gcc.gnu.org/onlinedocs/gcc/Common-Function-Attributes.html#index-always_005finline-function-attribute
+ * clang: mentioned
+ */
+#define __always_inline                 inline __attribute__((__always_inline__))
+
+/*
+ * The second argument is optional (default 0), so we use a variadic macro
+ * to make the shorthand.
+ *
+ * Beware: Do not apply this to functions which may return
+ * ERR_PTRs. Also, it is probably unwise to apply it to functions
+ * returning extra information in the low bits (but in that case the
+ * compiler should see some alignment anyway, when the return value is
+ * massaged by 'flags = ptr & 3; ptr &= ~3;').
+ *
+ * Optional: only supported since gcc >= 4.9
+ * Optional: not supported by icc
+ *
+ *   gcc: https://gcc.gnu.org/onlinedocs/gcc/Common-Function-Attributes.html#index-assume_005faligned-function-attribute
+ * clang: https://clang.llvm.org/docs/AttributeReference.html#assume-aligned
+ */
+#if __has_attribute(__assume_aligned__)
+# define __assume_aligned(a, ...)       __attribute__((__assume_aligned__(a, ## __VA_ARGS__)))
+#else
+# define __assume_aligned(a, ...)
+#endif
+
+/*
+ *   gcc: https://gcc.gnu.org/onlinedocs/gcc/Common-Function-Attributes.html#index-cold-function-attribute
+ *   gcc: https://gcc.gnu.org/onlinedocs/gcc/Label-Attributes.html#index-cold-label-attribute
+ */
+#define __cold                          __attribute__((__cold__))
+
+/*
+ * Note the long name.
+ *
+ *   gcc: https://gcc.gnu.org/onlinedocs/gcc/Common-Function-Attributes.html#index-const-function-attribute
+ */
+#define __attribute_const__             __attribute__((__const__))
+
+/*
+ * Don't. Just don't. See commit 771c035372a0 ("deprecate the '__deprecated'
+ * attribute warnings entirely and for good") for more information.
+ *
+ *   gcc: https://gcc.gnu.org/onlinedocs/gcc/Common-Function-Attributes.html#index-deprecated-function-attribute
+ *   gcc: https://gcc.gnu.org/onlinedocs/gcc/Common-Type-Attributes.html#index-deprecated-type-attribute
+ *   gcc: https://gcc.gnu.org/onlinedocs/gcc/Common-Variable-Attributes.html#index-deprecated-variable-attribute
+ *   gcc: https://gcc.gnu.org/onlinedocs/gcc/Enumerator-Attributes.html#index-deprecated-enumerator-attribute
+ * clang: https://clang.llvm.org/docs/AttributeReference.html#deprecated
+ */
+#define __deprecated
+
+/*
+ * Optional: only supported since gcc >= 5.1
+ * Optional: not supported by clang
+ * Optional: not supported by icc
+ *
+ *   gcc: https://gcc.gnu.org/onlinedocs/gcc/Common-Type-Attributes.html#index-designated_005finit-type-attribute
+ */
+#if __has_attribute(__designated_init__)
+# define __designated_init              __attribute__((__designated_init__))
+#else
+# define __designated_init
+#endif
+
+/*
+ * Optional: not supported by clang
+ *
+ *   gcc: https://gcc.gnu.org/onlinedocs/gcc/Common-Function-Attributes.html#index-externally_005fvisible-function-attribute
+ */
+#if __has_attribute(__externally_visible__)
+# define __visible                      __attribute__((__externally_visible__))
+#else
+# define __visible
+#endif
+
+/*
+ *   gcc: https://gcc.gnu.org/onlinedocs/gcc/Common-Function-Attributes.html#index-format-function-attribute
+ * clang: https://clang.llvm.org/docs/AttributeReference.html#format
+ */
+#define __printf(a, b)                  __attribute__((__format__(printf, a, b)))
+#define __scanf(a, b)                   __attribute__((__format__(scanf, a, b)))
+
+/*
+ *   gcc: https://gcc.gnu.org/onlinedocs/gcc/Common-Function-Attributes.html#index-gnu_005finline-function-attribute
+ * clang: https://clang.llvm.org/docs/AttributeReference.html#gnu-inline
+ */
+#define __gnu_inline                    __attribute__((__gnu_inline__))
+
+/*
+ *   gcc: https://gcc.gnu.org/onlinedocs/gcc/Common-Function-Attributes.html#index-malloc-function-attribute
+ */
+#define __malloc                        __attribute__((__malloc__))
+
+/*
+ *   gcc: https://gcc.gnu.org/onlinedocs/gcc/Common-Type-Attributes.html#index-mode-type-attribute
+ *   gcc: https://gcc.gnu.org/onlinedocs/gcc/Common-Variable-Attributes.html#index-mode-variable-attribute
+ */
+#define __mode(x)                       __attribute__((__mode__(x)))
+
+/*
+ * Optional: not supported by clang
+ * Note: icc does not recognize gcc's no-tracer
+ *
+ *  gcc: https://gcc.gnu.org/onlinedocs/gcc/Common-Function-Attributes.html#index-noclone-function-attribute
+ *  gcc: https://gcc.gnu.org/onlinedocs/gcc/Common-Function-Attributes.html#index-optimize-function-attribute
+ */
+#if __has_attribute(__noclone__)
+# if __has_attribute(__optimize__)
+#  define __noclone                     __attribute__((__noclone__, __optimize__("no-tracer")))
+# else
+#  define __noclone                     __attribute__((__noclone__))
+# endif
+#else
+# define __noclone
+#endif
+
+/*
+ * Note the missing underscores.
+ *
+ *   gcc: https://gcc.gnu.org/onlinedocs/gcc/Common-Function-Attributes.html#index-noinline-function-attribute
+ * clang: mentioned
+ */
+#define   noinline                      __attribute__((__noinline__))
+
+/*
+ *   gcc: https://gcc.gnu.org/onlinedocs/gcc/Common-Function-Attributes.html#index-noreturn-function-attribute
+ * clang: https://clang.llvm.org/docs/AttributeReference.html#noreturn
+ * clang: https://clang.llvm.org/docs/AttributeReference.html#id1
+ */
+#define __noreturn                      __attribute__((__noreturn__))
+
+/*
+ * Optional: only supported since gcc >= 4.8
+ * Optional: not supported by icc
+ *
+ *   gcc: https://gcc.gnu.org/onlinedocs/gcc/Common-Function-Attributes.html#index-no_005fsanitize_005faddress-function-attribute
+ * clang: https://clang.llvm.org/docs/AttributeReference.html#no-sanitize-address-no-address-safety-analysis
+ */
+#if __has_attribute(__no_sanitize_address__)
+# define __no_sanitize_address          __attribute__((__no_sanitize_address__))
+#else
+# define __no_sanitize_address
+#endif
+
+/*
+ *   gcc: https://gcc.gnu.org/onlinedocs/gcc/Common-Type-Attributes.html#index-packed-type-attribute
+ * clang: https://gcc.gnu.org/onlinedocs/gcc/Common-Variable-Attributes.html#index-packed-variable-attribute
+ */
+#define __packed                        __attribute__((__packed__))
+
+/*
+ *   gcc: https://gcc.gnu.org/onlinedocs/gcc/Common-Function-Attributes.html#index-pure-function-attribute
+ */
+#define __pure                          __attribute__((__pure__))
+
+/*
+ *   gcc: https://gcc.gnu.org/onlinedocs/gcc/Common-Function-Attributes.html#index-section-function-attribute
+ *   gcc: https://gcc.gnu.org/onlinedocs/gcc/Common-Variable-Attributes.html#index-section-variable-attribute
+ * clang: https://clang.llvm.org/docs/AttributeReference.html#section-declspec-allocate
+ */
+#define __section(S)                    __attribute__((__section__(#S)))
+
+/*
+ *   gcc: https://gcc.gnu.org/onlinedocs/gcc/Common-Function-Attributes.html#index-unused-function-attribute
+ *   gcc: https://gcc.gnu.org/onlinedocs/gcc/Common-Type-Attributes.html#index-unused-type-attribute
+ *   gcc: https://gcc.gnu.org/onlinedocs/gcc/Common-Variable-Attributes.html#index-unused-variable-attribute
+ *   gcc: https://gcc.gnu.org/onlinedocs/gcc/Label-Attributes.html#index-unused-label-attribute
+ * clang: https://clang.llvm.org/docs/AttributeReference.html#maybe-unused-unused
+ */
+#define __always_unused                 __attribute__((__unused__))
+#define __maybe_unused                  __attribute__((__unused__))
+
+/*
+ *   gcc: https://gcc.gnu.org/onlinedocs/gcc/Common-Function-Attributes.html#index-used-function-attribute
+ *   gcc: https://gcc.gnu.org/onlinedocs/gcc/Common-Variable-Attributes.html#index-used-variable-attribute
+ */
+#define __used                          __attribute__((__used__))
+
+/*
+ *   gcc: https://gcc.gnu.org/onlinedocs/gcc/Common-Function-Attributes.html#index-weak-function-attribute
+ *   gcc: https://gcc.gnu.org/onlinedocs/gcc/Common-Variable-Attributes.html#index-weak-variable-attribute
+ */
+#define __weak                          __attribute__((__weak__))
+
+#endif /* __LINUX_COMPILER_ATTRIBUTES_H */
* Unmerged path include/linux/compiler_types.h
