mm/page_alloc: check high-order pages for corruption during PCP operations

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-507.el8
commit-author Mel Gorman <mgorman@techsingularity.net>
commit 77fe7f136a7312954b1b8b7eeb4bc91fc3c14a3f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-507.el8/77fe7f13.failed

Eric Dumazet pointed out that commit 44042b449872 ("mm/page_alloc: allow
high-order pages to be stored on the per-cpu lists") only checks the
head page during PCP refill and allocation operations.  This was an
oversight and all pages should be checked.  This will incur a small
performance penalty but it's necessary for correctness.

Link: https://lkml.kernel.org/r/20220310092456.GJ15701@techsingularity.net
Fixes: 44042b449872 ("mm/page_alloc: allow high-order pages to be stored on the per-cpu lists")
	Signed-off-by: Mel Gorman <mgorman@techsingularity.net>
	Reported-by: Eric Dumazet <edumazet@google.com>
	Acked-by: Eric Dumazet <edumazet@google.com>
	Reviewed-by: Shakeel Butt <shakeelb@google.com>
	Acked-by: Vlastimil Babka <vbabka@suse.cz>
	Acked-by: David Rientjes <rientjes@google.com>
	Cc: Michal Hocko <mhocko@kernel.org>
	Cc: Wei Xu <weixugc@google.com>
	Cc: Greg Thelen <gthelen@google.com>
	Cc: Hugh Dickins <hughd@google.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 77fe7f136a7312954b1b8b7eeb4bc91fc3c14a3f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	mm/page_alloc.c
diff --cc mm/page_alloc.c
index c5bf723f114f,e36d7631a64c..000000000000
--- a/mm/page_alloc.c
+++ b/mm/page_alloc.c
@@@ -3427,8 -3599,8 +3427,13 @@@ static struct page *__rmqueue_pcplist(s
  
  		page = list_first_entry(list, struct page, lru);
  		list_del(&page->lru);
++<<<<<<< HEAD
 +		pcp->count--;
 +	} while (check_new_pcp(page));
++=======
+ 		pcp->count -= 1 << order;
+ 	} while (check_new_pcp(page, order));
++>>>>>>> 77fe7f136a73 (mm/page_alloc: check high-order pages for corruption during PCP operations)
  
  	return page;
  }
* Unmerged path mm/page_alloc.c
