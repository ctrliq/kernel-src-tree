Compiler Attributes: remove unused attributes

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-507.el8
commit-author Miguel Ojeda <miguel.ojeda.sandonis@gmail.com>
commit 29efbc6aea9d9bd9aa9870a9afc1882046303cf9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-507.el8/29efbc6a.failed

__optimize and __deprecate_for_modules are unused in
the whole kernel tree. Simply drop them.

	Tested-by: Sedat Dilek <sedat.dilek@gmail.com> # on top of v4.19-rc5, clang 7
	Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>
	Reviewed-by: Luc Van Oostenryck <luc.vanoostenryck@gmail.com>
	Signed-off-by: Miguel Ojeda <miguel.ojeda.sandonis@gmail.com>
(cherry picked from commit 29efbc6aea9d9bd9aa9870a9afc1882046303cf9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/compiler-gcc.h
#	include/linux/compiler_types.h
diff --cc include/linux/compiler-gcc.h
index 86782a1b73c9,1302b425e625..000000000000
--- a/include/linux/compiler-gcc.h
+++ b/include/linux/compiler-gcc.h
@@@ -128,64 -79,8 +128,67 @@@
  #define __noretpoline __attribute__((indirect_branch("keep")))
  #endif
  
 +/*
 + * it doesn't make sense on ARM (currently the only user of __naked)
 + * to trace naked functions because then mcount is called without
 + * stack and frame pointer being set up and there is no chance to
 + * restore the lr register to the value before mcount was called.
 + */
 +#define __naked		__attribute__((naked)) notrace
 +
 +#define __noreturn	__attribute__((noreturn))
 +
 +/*
 + * From the GCC manual:
 + *
 + * Many functions have no effects except the return value and their
 + * return value depends only on the parameters and/or global
 + * variables.  Such a function can be subject to common subexpression
 + * elimination and loop optimization just as an arithmetic operator
 + * would be.
 + * [...]
 + */
 +#define __pure			__attribute__((pure))
 +#define __aligned(x)		__attribute__((aligned(x)))
 +#define __aligned_largest	__attribute__((aligned))
 +#define __printf(a, b)		__attribute__((format(printf, a, b)))
 +#define __scanf(a, b)		__attribute__((format(scanf, a, b)))
 +#define __attribute_const__	__attribute__((__const__))
 +#define __maybe_unused		__attribute__((unused))
 +#define __always_unused		__attribute__((unused))
 +#define __mode(x)               __attribute__((mode(x)))
 +
 +#define __must_check		__attribute__((warn_unused_result))
 +#define __malloc		__attribute__((__malloc__))
 +
 +#define __used			__attribute__((__used__))
 +#define __compiler_offsetof(a, b)					\
 +	__builtin_offsetof(a, b)
 +
 +/* Mark functions as cold. gcc will assume any path leading to a call
 + * to them will be unlikely.  This means a lot of manual unlikely()s
 + * are unnecessary now for any paths leading to the usual suspects
 + * like BUG(), printk(), panic() etc. [but let's keep them for now for
 + * older compilers]
 + *
 + * Early snapshots of gcc 4.3 don't support this and we can't detect this
 + * in the preprocessor, but we can live with this because they're unreleased.
 + * Maketime probing would be overkill here.
 + *
 + * gcc also has a __attribute__((__hot__)) to move hot functions into
 + * a special section, but I don't see any sense in this right now in
 + * the kernel context
 + */
 +#define __cold			__attribute__((__cold__))
 +
  #define __UNIQUE_ID(prefix) __PASTE(__PASTE(__UNIQUE_ID_, prefix), __COUNTER__)
  
++<<<<<<< HEAD
 +#define __optimize(level)	__attribute__((__optimize__(level)))
 +#define __nostackprotector	__optimize("no-stack-protector")
 +
++=======
++>>>>>>> 29efbc6aea9d (Compiler Attributes: remove unused attributes)
  #define __compiletime_object_size(obj) __builtin_object_size(obj, 0)
  
  #ifndef __CHECKER__
diff --cc include/linux/compiler_types.h
index 4fb18f107703,a19562cb047c..000000000000
--- a/include/linux/compiler_types.h
+++ b/include/linux/compiler_types.h
@@@ -118,9 -106,8 +118,14 @@@ struct ftrace_likely_data 
  	unsigned long			constant;
  };
  
++<<<<<<< HEAD
 +/* Section for code which can't be instrumented at all */
 +#define noinstr								\
 +	noinline notrace __attribute((__section__(".noinstr.text")))
++=======
+ /* Don't. Just don't. */
+ #define __deprecated
++>>>>>>> 29efbc6aea9d (Compiler Attributes: remove unused attributes)
  
  #endif /* __KERNEL__ */
  
* Unmerged path include/linux/compiler-gcc.h
diff --git a/include/linux/compiler.h b/include/linux/compiler.h
index 24a0e7ee0618..c3ddea781561 100644
--- a/include/linux/compiler.h
+++ b/include/linux/compiler.h
@@ -395,10 +395,6 @@ unsigned long read_word_at_a_time(const void *addr)
 
 #endif /* __ASSEMBLY__ */
 
-#ifndef __optimize
-# define __optimize(level)
-#endif
-
 /* Compile time object size, -1 for unknown */
 #ifndef __compiletime_object_size
 # define __compiletime_object_size(obj) -1
* Unmerged path include/linux/compiler_types.h
