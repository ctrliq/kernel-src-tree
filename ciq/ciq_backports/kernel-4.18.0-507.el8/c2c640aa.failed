Compiler Attributes: remove unneeded tests

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-507.el8
commit-author Miguel Ojeda <miguel.ojeda.sandonis@gmail.com>
commit c2c640aa04cc4e6caf0ff17ff18b3784e0c99566
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-507.el8/c2c640aa.failed

Attributes const and always_inline have tests around them
which are unneeded, since they are supported by gcc >= 4.6,
clang >= 3 and icc >= 13. https://godbolt.org/z/DFPq37

In the case of gnu_inline, we do not need to test for
__GNUC_STDC_INLINE__ because, regardless of the current
inlining behavior, we can simply always force the old
GCC inlining behavior by using the attribute in all cases.

	Tested-by: Sedat Dilek <sedat.dilek@gmail.com> # on top of v4.19-rc5, clang 7
	Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>
	Reviewed-by: Luc Van Oostenryck <luc.vanoostenryck@gmail.com>
	Signed-off-by: Miguel Ojeda <miguel.ojeda.sandonis@gmail.com>
(cherry picked from commit c2c640aa04cc4e6caf0ff17ff18b3784e0c99566)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/compiler_types.h
diff --cc include/linux/compiler_types.h
index 4fb18f107703,5ff9cda893f4..000000000000
--- a/include/linux/compiler_types.h
+++ b/include/linux/compiler_types.h
@@@ -263,17 -150,19 +263,29 @@@ struct ftrace_likely_data 
  #define __assume_aligned(a, ...)
  #endif
  
 +
  /* Are two types/vars the same type (ignoring qualifiers)? */
 -#define __same_type(a, b) __builtin_types_compatible_p(typeof(a), typeof(b))
 +#ifndef __same_type
 +# define __same_type(a, b) __builtin_types_compatible_p(typeof(a), typeof(b))
 +#endif
  
  /* Is this type a native word size -- useful for atomic operations */
++<<<<<<< HEAD
 +#ifndef __native_word
 +# define __native_word(t) (sizeof(t) == sizeof(char) || sizeof(t) == sizeof(short) || sizeof(t) == sizeof(int) || sizeof(t) == sizeof(long))
 +#endif
 +
++=======
+ #define __native_word(t) \
+ 	(sizeof(t) == sizeof(char) || sizeof(t) == sizeof(short) || \
+ 	 sizeof(t) == sizeof(int) || sizeof(t) == sizeof(long))
+ 
+ #ifndef __noclone
+ #define __noclone
+ #endif
+ 
+ /* Helpers for emitting diagnostics in pragmas. */
++>>>>>>> c2c640aa04cc (Compiler Attributes: remove unneeded tests)
  #ifndef __diag
  #define __diag(string)
  #endif
@@@ -292,4 -181,87 +304,90 @@@
  #define __diag_error(compiler, version, option, comment) \
  	__diag_ ## compiler(version, error, option)
  
++<<<<<<< HEAD
++=======
+ /*
+  * From the GCC manual:
+  *
+  * Many functions have no effects except the return value and their
+  * return value depends only on the parameters and/or global
+  * variables.  Such a function can be subject to common subexpression
+  * elimination and loop optimization just as an arithmetic operator
+  * would be.
+  * [...]
+  */
+ #define __pure			__attribute__((__pure__))
+ #define __attribute_const__	__attribute__((__const__))
+ #define __aligned(x)		__attribute__((__aligned__(x)))
+ #define __aligned_largest	__attribute__((__aligned__))
+ #define __printf(a, b)		__attribute__((__format__(printf, a, b)))
+ #define __scanf(a, b)		__attribute__((__format__(scanf, a, b)))
+ #define __maybe_unused		__attribute__((__unused__))
+ #define __always_unused		__attribute__((__unused__))
+ #define __mode(x)		__attribute__((__mode__(x)))
+ #define __malloc		__attribute__((__malloc__))
+ #define __used			__attribute__((__used__))
+ #define __noreturn		__attribute__((__noreturn__))
+ #define __packed		__attribute__((__packed__))
+ #define __weak			__attribute__((__weak__))
+ #define __alias(symbol)		__attribute__((__alias__(#symbol)))
+ #define __cold			__attribute__((__cold__))
+ #define __section(S)		__attribute__((__section__(#S)))
+ #define __always_inline		inline __attribute__((__always_inline__))
+ #define __gnu_inline		__attribute__((__gnu_inline__))
+ 
+ 
+ #ifdef CONFIG_ENABLE_MUST_CHECK
+ #define __must_check		__attribute__((__warn_unused_result__))
+ #else
+ #define __must_check
+ #endif
+ 
+ #if defined(CC_USING_HOTPATCH) && !defined(__CHECKER__)
+ #define notrace			__attribute__((hotpatch(0, 0)))
+ #else
+ #define notrace			__attribute__((__no_instrument_function__))
+ #endif
+ 
+ /*
+  * it doesn't make sense on ARM (currently the only user of __naked)
+  * to trace naked functions because then mcount is called without
+  * stack and frame pointer being set up and there is no chance to
+  * restore the lr register to the value before mcount was called.
+  */
+ #define __naked			__attribute__((__naked__)) notrace
+ 
+ #define __compiler_offsetof(a, b)	__builtin_offsetof(a, b)
+ 
+ /*
+  * Force always-inline if the user requests it so via the .config.
+  * GCC does not warn about unused static inline functions for
+  * -Wunused-function.  This turns out to avoid the need for complex #ifdef
+  * directives.  Suppress the warning in clang as well by using "unused"
+  * function attribute, which is redundant but not harmful for gcc.
+  * Prefer gnu_inline, so that extern inline functions do not emit an
+  * externally visible function. This makes extern inline behave as per gnu89
+  * semantics rather than c99. This prevents multiple symbol definition errors
+  * of extern inline functions at link time.
+  * A lot of inline functions can cause havoc with function tracing.
+  */
+ #if !defined(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || \
+ 	!defined(CONFIG_OPTIMIZE_INLINING)
+ #define inline \
+ 	inline __attribute__((__always_inline__, __unused__)) notrace __gnu_inline
+ #else
+ #define inline inline	__attribute__((__unused__)) notrace __gnu_inline
+ #endif
+ 
+ #define __inline__ inline
+ #define __inline inline
+ #define noinline	__attribute__((__noinline__))
+ 
+ /*
+  * Rather then using noinline to prevent stack consumption, use
+  * noinline_for_stack instead.  For documentation reasons.
+  */
+ #define noinline_for_stack noinline
+ 
++>>>>>>> c2c640aa04cc (Compiler Attributes: remove unneeded tests)
  #endif /* __LINUX_COMPILER_TYPES_H */
* Unmerged path include/linux/compiler_types.h
