mm/page_alloc: free pages in a single pass during bulk free

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-507.el8
commit-author Mel Gorman <mgorman@techsingularity.net>
commit 8b10b465d0e18b002b290b2162145abc7167e53d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-507.el8/8b10b465.failed

free_pcppages_bulk() has taken two passes through the pcp lists since
commit 0a5f4e5b4562 ("mm/free_pcppages_bulk: do not hold lock when
picking pages to free") due to deferring the cost of selecting PCP lists
until the zone lock is held.  Now that list selection is simplier, the
main cost during selection is bulkfree_pcp_prepare() which in the normal
case is a simple check and prefetching.  As the list manipulations have
cost in itself, go back to freeing pages in a single pass.

The series up to this point was evaulated using a trunc microbenchmark
that is truncating sparse files stored in page cache (mmtests config
config-io-trunc).  Sparse files were used to limit filesystem
interaction.  The results versus a revert of storing high-order pages in
the PCP lists is

1-socket Skylake
                               5.17.0-rc3             5.17.0-rc3             5.17.0-rc3
                                  vanilla      mm-reverthighpcp-v1     mm-highpcpopt-v2
 Min       elapsed      540.00 (   0.00%)      530.00 (   1.85%)      530.00 (   1.85%)
 Amean     elapsed      543.00 (   0.00%)      530.00 *   2.39%*      530.00 *   2.39%*
 Stddev    elapsed        4.83 (   0.00%)        0.00 ( 100.00%)        0.00 ( 100.00%)
 CoeffVar  elapsed        0.89 (   0.00%)        0.00 ( 100.00%)        0.00 ( 100.00%)
 Max       elapsed      550.00 (   0.00%)      530.00 (   3.64%)      530.00 (   3.64%)
 BAmean-50 elapsed      540.00 (   0.00%)      530.00 (   1.85%)      530.00 (   1.85%)
 BAmean-95 elapsed      542.22 (   0.00%)      530.00 (   2.25%)      530.00 (   2.25%)
 BAmean-99 elapsed      542.22 (   0.00%)      530.00 (   2.25%)      530.00 (   2.25%)

2-socket CascadeLake
                               5.17.0-rc3             5.17.0-rc3             5.17.0-rc3
                                  vanilla    mm-reverthighpcp-v1       mm-highpcpopt-v2
 Min       elapsed      510.00 (   0.00%)      500.00 (   1.96%)      500.00 (   1.96%)
 Amean     elapsed      529.00 (   0.00%)      521.00 (   1.51%)      510.00 *   3.59%*
 Stddev    elapsed       16.63 (   0.00%)       12.87 (  22.64%)       11.55 (  30.58%)
 CoeffVar  elapsed        3.14 (   0.00%)        2.47 (  21.46%)        2.26 (  27.99%)
 Max       elapsed      550.00 (   0.00%)      540.00 (   1.82%)      530.00 (   3.64%)
 BAmean-50 elapsed      516.00 (   0.00%)      512.00 (   0.78%)      500.00 (   3.10%)
 BAmean-95 elapsed      526.67 (   0.00%)      518.89 (   1.48%)      507.78 (   3.59%)
 BAmean-99 elapsed      526.67 (   0.00%)      518.89 (   1.48%)      507.78 (   3.59%)

The original motivation for multi-passes was will-it-scale page_fault1
using $nr_cpu processes.

2-socket CascadeLake (40 cores, 80 CPUs HT enabled)
                                                     5.17.0-rc3                 5.17.0-rc3
                                                        vanilla           mm-highpcpopt-v2
 Hmean     page_fault1-processes-2        2694662.26 (   0.00%)      2695780.35 (   0.04%)
 Hmean     page_fault1-processes-5        6425819.34 (   0.00%)      6435544.57 *   0.15%*
 Hmean     page_fault1-processes-8        9642169.10 (   0.00%)      9658962.39 (   0.17%)
 Hmean     page_fault1-processes-12      12167502.10 (   0.00%)     12190163.79 (   0.19%)
 Hmean     page_fault1-processes-21      15636859.03 (   0.00%)     15612447.26 (  -0.16%)
 Hmean     page_fault1-processes-30      25157348.61 (   0.00%)     25169456.65 (   0.05%)
 Hmean     page_fault1-processes-48      27694013.85 (   0.00%)     27671111.46 (  -0.08%)
 Hmean     page_fault1-processes-79      25928742.64 (   0.00%)     25934202.02 (   0.02%) <--
 Hmean     page_fault1-processes-110     25730869.75 (   0.00%)     25671880.65 *  -0.23%*
 Hmean     page_fault1-processes-141     25626992.42 (   0.00%)     25629551.61 (   0.01%)
 Hmean     page_fault1-processes-172     25611651.35 (   0.00%)     25614927.99 (   0.01%)
 Hmean     page_fault1-processes-203     25577298.75 (   0.00%)     25583445.59 (   0.02%)
 Hmean     page_fault1-processes-234     25580686.07 (   0.00%)     25608240.71 (   0.11%)
 Hmean     page_fault1-processes-265     25570215.47 (   0.00%)     25568647.58 (  -0.01%)
 Hmean     page_fault1-processes-296     25549488.62 (   0.00%)     25543935.00 (  -0.02%)
 Hmean     page_fault1-processes-320     25555149.05 (   0.00%)     25575696.74 (   0.08%)

The differences are mostly within the noise and the difference close to
$nr_cpus is negligible.

Link: https://lkml.kernel.org/r/20220217002227.5739-6-mgorman@techsingularity.net
	Signed-off-by: Mel Gorman <mgorman@techsingularity.net>
	Reviewed-by: Vlastimil Babka <vbabka@suse.cz>
	Tested-by: Aaron Lu <aaron.lu@intel.com>
	Cc: Dave Hansen <dave.hansen@linux.intel.com>
	Cc: Jesper Dangaard Brouer <brouer@redhat.com>
	Cc: Michal Hocko <mhocko@kernel.org>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 8b10b465d0e18b002b290b2162145abc7167e53d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	mm/page_alloc.c
diff --cc mm/page_alloc.c
index c5bf723f114f,9cf8bb8ba4c7..000000000000
--- a/mm/page_alloc.c
+++ b/mm/page_alloc.c
@@@ -1362,62 -1440,71 +1362,83 @@@ static inline void prefetch_buddy(struc
  
  /*
   * Frees a number of pages from the PCP lists
 - * Assumes all pages on list are in same zone.
 + * Assumes all pages on list are in same zone, and of same order.
   * count is the number of pages to free.
 + *
 + * If the zone was previously in an "all pages pinned" state then look to
 + * see if this freeing clears that state.
 + *
 + * And clear the zone's pages_scanned counter, to hold off the "all pages are
 + * pinned" detection logic.
   */
  static void free_pcppages_bulk(struct zone *zone, int count,
 -					struct per_cpu_pages *pcp,
 -					int pindex)
 +					struct per_cpu_pages *pcp)
  {
 -	int min_pindex = 0;
 -	int max_pindex = NR_PCP_LISTS - 1;
 -	unsigned int order;
 +	int migratetype = 0;
 +	int batch_free = 0;
  	int prefetch_nr = READ_ONCE(pcp->batch);
  	bool isolated_pageblocks;
- 	struct page *page, *tmp;
- 	LIST_HEAD(head);
+ 	struct page *page;
  
  	/*
  	 * Ensure proper count is passed which otherwise would stuck in the
  	 * below while (list_empty(list)) loop.
  	 */
  	count = min(pcp->count, count);
++<<<<<<< HEAD
 +	while (count) {
++=======
+ 
+ 	/* Ensure requested pindex is drained first. */
+ 	pindex = pindex - 1;
+ 
+ 	/*
+ 	 * local_lock_irq held so equivalent to spin_lock_irqsave for
+ 	 * both PREEMPT_RT and non-PREEMPT_RT configurations.
+ 	 */
+ 	spin_lock(&zone->lock);
+ 	isolated_pageblocks = has_isolate_pageblock(zone);
+ 
+ 	while (count > 0) {
++>>>>>>> 8b10b465d0e1 (mm/page_alloc: free pages in a single pass during bulk free)
  		struct list_head *list;
 -		int nr_pages;
  
 -		/* Remove pages from lists in a round-robin fashion. */
 +		/*
 +		 * Remove pages from lists in a round-robin fashion. A
 +		 * batch_free count is maintained that is incremented when an
 +		 * empty list is encountered.  This is so more pages are freed
 +		 * off fuller lists instead of spinning excessively around empty
 +		 * lists
 +		 */
  		do {
 -			if (++pindex > max_pindex)
 -				pindex = min_pindex;
 -			list = &pcp->lists[pindex];
 -			if (!list_empty(list))
 -				break;
 +			batch_free++;
 +			if (++migratetype == MIGRATE_PCPTYPES)
 +				migratetype = 0;
 +			list = &pcp->lists[migratetype];
 +		} while (list_empty(list));
  
 -			if (pindex == max_pindex)
 -				max_pindex--;
 -			if (pindex == min_pindex)
 -				min_pindex++;
 -		} while (1);
 +		/* This is the only non-empty list. Free them all. */
 +		if (batch_free == MIGRATE_PCPTYPES)
 +			batch_free = count;
  
 -		order = pindex_to_order(pindex);
 -		nr_pages = 1 << order;
 -		BUILD_BUG_ON(MAX_ORDER >= (1<<NR_PCP_ORDER_WIDTH));
  		do {
+ 			int mt;
+ 
  			page = list_last_entry(list, struct page, lru);
+ 			mt = get_pcppage_migratetype(page);
+ 
  			/* must delete to avoid corrupting pcp list */
  			list_del(&page->lru);
 -			count -= nr_pages;
 -			pcp->count -= nr_pages;
 +			pcp->count--;
  
  			if (bulkfree_pcp_prepare(page))
  				continue;
  
++<<<<<<< HEAD
 +			list_add_tail(&page->lru, &head);
 +
++=======
++>>>>>>> 8b10b465d0e1 (mm/page_alloc: free pages in a single pass during bulk free)
  			/*
  			 * We are going to put the page back to the global
  			 * pool, prefetch its buddy to speed up later access
@@@ -1431,27 -1518,18 +1452,42 @@@
  				prefetch_buddy(page, order);
  				prefetch_nr--;
  			}
++<<<<<<< HEAD
 +		} while (--count && --batch_free && !list_empty(list));
 +	}
 +
 +	spin_lock(&zone->lock);
 +	isolated_pageblocks = has_isolate_pageblock(zone);
 +
 +	/*
 +	 * Use safe version since after __free_one_page(),
 +	 * page->lru.next will not point to original list.
 +	 */
 +	list_for_each_entry_safe(page, tmp, &head, lru) {
 +		int mt = get_pcppage_migratetype(page);
 +		/* MIGRATE_ISOLATE page should not go to pcplists */
 +		VM_BUG_ON_PAGE(is_migrate_isolate(mt), page);
 +		/* Pageblock could have been isolated meanwhile */
 +		if (unlikely(isolated_pageblocks))
 +			mt = get_pageblock_migratetype(page);
 +
 +		__free_one_page(page, page_to_pfn(page), zone, 0, mt, FPI_NONE);
 +		trace_mm_page_pcpu_drain(page, 0, mt);
 +	}
++=======
+ 
+ 			/* MIGRATE_ISOLATE page should not go to pcplists */
+ 			VM_BUG_ON_PAGE(is_migrate_isolate(mt), page);
+ 			/* Pageblock could have been isolated meanwhile */
+ 			if (unlikely(isolated_pageblocks))
+ 				mt = get_pageblock_migratetype(page);
+ 
+ 			__free_one_page(page, page_to_pfn(page), zone, order, mt, FPI_NONE);
+ 			trace_mm_page_pcpu_drain(page, order, mt);
+ 		} while (count > 0 && !list_empty(list));
+ 	}
+ 
++>>>>>>> 8b10b465d0e1 (mm/page_alloc: free pages in a single pass during bulk free)
  	spin_unlock(&zone->lock);
  }
  
* Unmerged path mm/page_alloc.c
