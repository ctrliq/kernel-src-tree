vsock/virtio: remove socket from connected/bound list on shutdown

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-531.el8
commit-author Filippo Storniolo <f.storniolo95@gmail.com>
commit 3a5cc90a4d1756072619fe511d07621bdef7f120
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-531.el8/3a5cc90a.failed

If the same remote peer, using the same port, tries to connect
to a server on a listening port more than once, the server will
reject the connection, causing a "connection reset by peer"
error on the remote peer. This is due to the presence of a
dangling socket from a previous connection in both the connected
and bound socket lists.
The inconsistency of the above lists only occurs when the remote
peer disconnects and the server remains active.

This bug does not occur when the server socket is closed:
virtio_transport_release() will eventually schedule a call to
virtio_transport_do_close() and the latter will remove the socket
from the bound and connected socket lists and clear the sk_buff.

However, virtio_transport_do_close() will only perform the above
actions if it has been scheduled, and this will not happen
if the server is processing the shutdown message from a remote peer.

To fix this, introduce a call to vsock_remove_sock()
when the server is handling a client disconnect.
This is to remove the socket from the bound and connected socket
lists without clearing the sk_buff.

Fixes: 06a8fc78367d ("VSOCK: Introduce virtio_vsock_common.ko")
	Reported-by: Daan De Meyer <daan.j.demeyer@gmail.com>
	Tested-by: Daan De Meyer <daan.j.demeyer@gmail.com>
Co-developed-by: Luigi Leonardi <luigi.leonardi@outlook.com>
	Signed-off-by: Luigi Leonardi <luigi.leonardi@outlook.com>
	Signed-off-by: Filippo Storniolo <f.storniolo95@gmail.com>
	Reviewed-by: Stefano Garzarella <sgarzare@redhat.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 3a5cc90a4d1756072619fe511d07621bdef7f120)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/vmw_vsock/virtio_transport_common.c
diff --cc net/vmw_vsock/virtio_transport_common.c
index 4e86fc306090,4c595dd1fd64..000000000000
--- a/net/vmw_vsock/virtio_transport_common.c
+++ b/net/vmw_vsock/virtio_transport_common.c
@@@ -952,18 -1365,23 +952,32 @@@ virtio_transport_recv_connected(struct 
  		sk->sk_write_space(sk);
  		break;
  	case VIRTIO_VSOCK_OP_SHUTDOWN:
 -		if (le32_to_cpu(hdr->flags) & VIRTIO_VSOCK_SHUTDOWN_RCV)
 +		if (le32_to_cpu(pkt->hdr.flags) & VIRTIO_VSOCK_SHUTDOWN_RCV)
  			vsk->peer_shutdown |= RCV_SHUTDOWN;
 -		if (le32_to_cpu(hdr->flags) & VIRTIO_VSOCK_SHUTDOWN_SEND)
 +		if (le32_to_cpu(pkt->hdr.flags) & VIRTIO_VSOCK_SHUTDOWN_SEND)
  			vsk->peer_shutdown |= SEND_SHUTDOWN;
++<<<<<<< HEAD
 +		if (vsk->peer_shutdown == SHUTDOWN_MASK &&
 +		    vsock_stream_has_data(vsk) <= 0 &&
 +		    !sock_flag(sk, SOCK_DONE)) {
 +			(void)virtio_transport_reset(vsk, NULL);
 +
 +			virtio_transport_do_close(vsk, true);
++=======
+ 		if (vsk->peer_shutdown == SHUTDOWN_MASK) {
+ 			if (vsock_stream_has_data(vsk) <= 0 && !sock_flag(sk, SOCK_DONE)) {
+ 				(void)virtio_transport_reset(vsk, NULL);
+ 				virtio_transport_do_close(vsk, true);
+ 			}
+ 			/* Remove this socket anyway because the remote peer sent
+ 			 * the shutdown. This way a new connection will succeed
+ 			 * if the remote peer uses the same source port,
+ 			 * even if the old socket is still unreleased, but now disconnected.
+ 			 */
+ 			vsock_remove_sock(vsk);
++>>>>>>> 3a5cc90a4d17 (vsock/virtio: remove socket from connected/bound list on shutdown)
  		}
 -		if (le32_to_cpu(virtio_vsock_hdr(skb)->flags))
 +		if (le32_to_cpu(pkt->hdr.flags))
  			sk->sk_state_change(sk);
  		break;
  	case VIRTIO_VSOCK_OP_RST:
* Unmerged path net/vmw_vsock/virtio_transport_common.c
