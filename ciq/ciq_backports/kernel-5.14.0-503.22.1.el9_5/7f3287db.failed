netfilter: nft_socket: make cgroupsv2 matching work with namespaces

jira LE-2290
Rebuild_History Non-Buildable kernel-5.14.0-503.22.1.el9_5
commit-author Florian Westphal <fw@strlen.de>
commit 7f3287db654395f9c5ddd246325ff7889f550286
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-5.14.0-503.22.1.el9_5/7f3287db.failed

When running in container environmment, /sys/fs/cgroup/ might not be
the real root node of the sk-attached cgroup.

Example:

In container:
% stat /sys//fs/cgroup/
Device: 0,21    Inode: 2214  ..
% stat /sys/fs/cgroup/foo
Device: 0,21    Inode: 2264  ..

The expectation would be for:

  nft add rule .. socket cgroupv2 level 1 "foo" counter

to match traffic from a process that got added to "foo" via
"echo $pid > /sys/fs/cgroup/foo/cgroup.procs".

However, 'level 3' is needed to make this work.

Seen from initial namespace, the complete hierarchy is:

% stat /sys/fs/cgroup/system.slice/docker-.../foo
  Device: 0,21    Inode: 2264 ..

i.e. hierarchy is
0    1               2              3
/ -> system.slice -> docker-1... -> foo

... but the container doesn't know that its "/" is the "docker-1.."
cgroup.  Current code will retrieve the 'system.slice' cgroup node
and store its kn->id in the destination register, so compare with
2264 ("foo" cgroup id) will not match.

Fetch "/" cgroup from ->init() and add its level to the level we try to
extract.  cgroup root-level is 0 for the init-namespace or the level
of the ancestor that is exposed as the cgroup root inside the container.

In the above case, cgrp->level of "/" resolved in the container is 2
(docker-1...scope/) and request for 'level 1' will get adjusted
to fetch the actual level (3).

v2: use CONFIG_SOCK_CGROUP_DATA, eval function depends on it.
    (kernel test robot)

	Cc: cgroups@vger.kernel.org
Fixes: e0bb96db96f8 ("netfilter: nft_socket: add support for cgroupsv2")
	Reported-by: Nadia Pinaeva <n.m.pinaeva@gmail.com>
	Signed-off-by: Florian Westphal <fw@strlen.de>
	Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
(cherry picked from commit 7f3287db654395f9c5ddd246325ff7889f550286)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/netfilter/nft_socket.c
diff --cc net/netfilter/nft_socket.c
index 7605b96d8ebc,12cdff640492..000000000000
--- a/net/netfilter/nft_socket.c
+++ b/net/netfilter/nft_socket.c
@@@ -9,7 -9,9 +9,13 @@@
  
  struct nft_socket {
  	enum nft_socket_keys		key:8;
++<<<<<<< HEAD
 +	u8				level;
++=======
+ 	u8				level;		/* cgroupv2 level to extract */
+ 	u8				level_user;	/* cgroupv2 level provided by userspace */
+ 	u8				len;
++>>>>>>> 7f3287db6543 (netfilter: nft_socket: make cgroupsv2 matching work with namespaces)
  	union {
  		u8			dreg;
  	};
@@@ -207,7 -244,7 +247,11 @@@ static int nft_socket_dump(struct sk_bu
  	if (nft_dump_register(skb, NFTA_SOCKET_DREG, priv->dreg))
  		return -1;
  	if (priv->key == NFT_SOCKET_CGROUPV2 &&
++<<<<<<< HEAD
 +	    nla_put_u32(skb, NFTA_SOCKET_LEVEL, htonl(priv->level)))
++=======
+ 	    nla_put_be32(skb, NFTA_SOCKET_LEVEL, htonl(priv->level_user)))
++>>>>>>> 7f3287db6543 (netfilter: nft_socket: make cgroupsv2 matching work with namespaces)
  		return -1;
  	return 0;
  }
* Unmerged path net/netfilter/nft_socket.c
