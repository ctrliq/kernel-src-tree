md: raid5: use __bio_add_page to add single page to new bio

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-516.el8
commit-author Johannes Thumshirn <johannes.thumshirn@wdc.com>
commit 6eea4ff8528d6a5b9f0eeb47992e48a8f44b5b8f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-516.el8/6eea4ff8.failed

The raid5-ppl submission code uses bio_add_page() to add a page to a
newly created bio. bio_add_page() can fail, but the return value is never
checked. For adding consecutive pages, the return is actually checked and
a new bio is allocated if adding the page fails.

Use __bio_add_page() as adding a single page to a newly created bio is
guaranteed to succeed.

This brings us a step closer to marking bio_add_page() as __must_check.

	Reviewed-by: Christoph Hellwig <hch@lst.de>
	Reviewed-by: Damien Le Moal <damien.lemoal@opensource.wdc.com>
	Acked-by: Song Liu <song@kernel.org>
	Signed-off-by: Johannes Thumshirn <johannes.thumshirn@wdc.com>
Link: https://lore.kernel.org/r/27e6bcd762354bff74602e89159cdd12ae3d1fa9.1685532726.git.johannes.thumshirn@wdc.com
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit 6eea4ff8528d6a5b9f0eeb47992e48a8f44b5b8f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/md/raid5-ppl.c
diff --cc drivers/md/raid5-ppl.c
index c9306a108a53,eaea57aee602..000000000000
--- a/drivers/md/raid5-ppl.c
+++ b/drivers/md/raid5-ppl.c
@@@ -473,11 -464,8 +473,15 @@@ static void ppl_submit_iounit(struct pp
  
  
  	bio->bi_end_io = ppl_log_endio;
 +	bio->bi_opf = REQ_OP_WRITE | REQ_FUA;
 +	bio_set_dev(bio, log->rdev->bdev);
  	bio->bi_iter.bi_sector = log->next_io_sector;
++<<<<<<< HEAD
 +	bio_add_page(bio, io->header_page, PAGE_SIZE, 0);
 +	bio->bi_write_hint = ppl_conf->write_hint;
++=======
+ 	__bio_add_page(bio, io->header_page, PAGE_SIZE, 0);
++>>>>>>> 6eea4ff8528d (md: raid5: use __bio_add_page to add single page to new bio)
  
  	pr_debug("%s: log->current_io_sector: %llu\n", __func__,
  	    (unsigned long long)log->next_io_sector);
@@@ -504,13 -492,11 +508,13 @@@
  		if (!bio_add_page(bio, sh->ppl_page, PAGE_SIZE, 0)) {
  			struct bio *prev = bio;
  
 -			bio = bio_alloc_bioset(prev->bi_bdev, BIO_MAX_VECS,
 -					       prev->bi_opf, GFP_NOIO,
 +			bio = bio_alloc_bioset(GFP_NOIO, BIO_MAX_PAGES,
  					       &ppl_conf->bs);
 +			bio->bi_opf = prev->bi_opf;
 +			bio->bi_write_hint = prev->bi_write_hint;
 +			bio_copy_dev(bio, prev);
  			bio->bi_iter.bi_sector = bio_end_sector(prev);
- 			bio_add_page(bio, sh->ppl_page, PAGE_SIZE, 0);
+ 			__bio_add_page(bio, sh->ppl_page, PAGE_SIZE, 0);
  
  			bio_chain(bio, prev);
  			ppl_submit_iounit_bio(io, prev);
* Unmerged path drivers/md/raid5-ppl.c
