cpufreq: stats: Convert to use sysfs_emit_at() API

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-506.el8
commit-author ye xingchen <ye.xingchen@zte.com.cn>
commit 7ed40bcf8a618436d43b17d565ca35af61bc8e54
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-506.el8/7ed40bcf.failed

Follow the advice of the Documentation/filesystems/sysfs.rst and show()
should only use sysfs_emit() or sysfs_emit_at() when formatting the
value to be returned to user space.

	Signed-off-by: ye xingchen <ye.xingchen@zte.com.cn>
	Acked-by: Viresh Kumar <viresh.kumar@linaro.org>
	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
(cherry picked from commit 7ed40bcf8a618436d43b17d565ca35af61bc8e54)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/cpufreq/cpufreq_stats.c
diff --cc drivers/cpufreq/cpufreq_stats.c
index f5679e2ff9bc,55c7ffd37d1c..000000000000
--- a/drivers/cpufreq/cpufreq_stats.c
+++ b/drivers/cpufreq/cpufreq_stats.c
@@@ -87,14 -124,12 +87,14 @@@ cpufreq_freq_attr_wo(reset)
  static ssize_t show_trans_table(struct cpufreq_policy *policy, char *buf)
  {
  	struct cpufreq_stats *stats = policy->stats;
 -	bool pending = READ_ONCE(stats->reset_pending);
  	ssize_t len = 0;
 -	int i, j, count;
 +	int i, j;
 +
 +	if (policy->fast_switch_enabled)
 +		return 0;
  
- 	len += scnprintf(buf + len, PAGE_SIZE - len, "   From  :    To\n");
- 	len += scnprintf(buf + len, PAGE_SIZE - len, "         : ");
+ 	len += sysfs_emit_at(buf, len, "   From  :    To\n");
+ 	len += sysfs_emit_at(buf, len, "         : ");
  	for (i = 0; i < stats->state_num; i++) {
  		if (len >= PAGE_SIZE)
  			break;
@@@ -116,8 -149,13 +114,18 @@@
  		for (j = 0; j < stats->state_num; j++) {
  			if (len >= PAGE_SIZE)
  				break;
++<<<<<<< HEAD
 +			len += scnprintf(buf + len, PAGE_SIZE - len, "%9u ",
 +					stats->trans_table[i*stats->max_state+j]);
++=======
+ 
+ 			if (pending)
+ 				count = 0;
+ 			else
+ 				count = stats->trans_table[i * stats->max_state + j];
+ 
+ 			len += sysfs_emit_at(buf, len, "%9u ", count);
++>>>>>>> 7ed40bcf8a61 (cpufreq: stats: Convert to use sysfs_emit_at() API)
  		}
  		if (len >= PAGE_SIZE)
  			break;
* Unmerged path drivers/cpufreq/cpufreq_stats.c
