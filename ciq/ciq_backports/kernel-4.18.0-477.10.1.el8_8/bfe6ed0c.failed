x86/tdx: Add HLT support for TDX guests

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-477.10.1.el8_8
commit-author Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
commit bfe6ed0c672782ac2a8edffac93b1ba84b0ff984
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-477.10.1.el8_8/bfe6ed0c.failed

The HLT instruction is a privileged instruction, executing it stops
instruction execution and places the processor in a HALT state. It
is used in kernel for cases like reboot, idle loop and exception fixup
handlers. For the idle case, interrupts will be enabled (using STI)
before the HLT instruction (this is also called safe_halt()).

To support the HLT instruction in TDX guests, it needs to be emulated
using TDVMCALL (hypercall to VMM). More details about it can be found
in Intel Trust Domain Extensions (Intel TDX) Guest-Host-Communication
Interface (GHCI) specification, section TDVMCALL[Instruction.HLT].

In TDX guests, executing HLT instruction will generate a #VE, which is
used to emulate the HLT instruction. But #VE based emulation will not
work for the safe_halt() flavor, because it requires STI instruction to
be executed just before the TDCALL. Since idle loop is the only user of
safe_halt() variant, handle it as a special case.

To avoid *safe_halt() call in the idle function, define the
tdx_guest_idle() and use it to override the "x86_idle" function pointer
for a valid TDX guest.

Alternative choices like PV ops have been considered for adding
safe_halt() support. But it was rejected because HLT paravirt calls
only exist under PARAVIRT_XXL, and enabling it in TDX guest just for
safe_halt() use case is not worth the cost.

Co-developed-by: Kuppuswamy Sathyanarayanan <sathyanarayanan.kuppuswamy@linux.intel.com>
	Signed-off-by: Kuppuswamy Sathyanarayanan <sathyanarayanan.kuppuswamy@linux.intel.com>
	Signed-off-by: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
	Signed-off-by: Dave Hansen <dave.hansen@linux.intel.com>
	Reviewed-by: Andi Kleen <ak@linux.intel.com>
	Reviewed-by: Tony Luck <tony.luck@intel.com>
	Reviewed-by: Dave Hansen <dave.hansen@linux.intel.com>
Link: https://lkml.kernel.org/r/20220405232939.73860-9-kirill.shutemov@linux.intel.com
(cherry picked from commit bfe6ed0c672782ac2a8edffac93b1ba84b0ff984)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/coco/tdx/tdcall.S
#	arch/x86/coco/tdx/tdx.c
#	arch/x86/include/asm/tdx.h
#	arch/x86/kernel/process.c
diff --cc arch/x86/kernel/process.c
index 24b20df4377f,dbaf12c43fe1..000000000000
--- a/arch/x86/kernel/process.c
+++ b/arch/x86/kernel/process.c
@@@ -43,7 -42,11 +43,13 @@@
  #include <asm/desc.h>
  #include <asm/prctl.h>
  #include <asm/spec-ctrl.h>
 -#include <asm/io_bitmap.h>
  #include <asm/proto.h>
++<<<<<<< HEAD
++=======
+ #include <asm/frame.h>
+ #include <asm/unwind.h>
+ #include <asm/tdx.h>
++>>>>>>> bfe6ed0c6727 (x86/tdx: Add HLT support for TDX guests)
  
  #include "process.h"
  
* Unmerged path arch/x86/coco/tdx/tdcall.S
* Unmerged path arch/x86/coco/tdx/tdx.c
* Unmerged path arch/x86/include/asm/tdx.h
* Unmerged path arch/x86/coco/tdx/tdcall.S
* Unmerged path arch/x86/coco/tdx/tdx.c
* Unmerged path arch/x86/include/asm/tdx.h
* Unmerged path arch/x86/kernel/process.c
