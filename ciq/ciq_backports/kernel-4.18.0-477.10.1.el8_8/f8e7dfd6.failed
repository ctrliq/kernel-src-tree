net: stmmac: Avoid DMA_CHAN_CONTROL write if no Split Header support

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-477.10.1.el8_8
commit-author Vincent Whitchurch <vincent.whitchurch@axis.com>
commit f8e7dfd6fdabb831846ab1970a875746559d491b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-477.10.1.el8_8/f8e7dfd6.failed

The driver assumes that split headers can be enabled/disabled without
stopping/starting the device, so it writes DMA_CHAN_CONTROL from
stmmac_set_features().  However, on my system (IP v5.10a without Split
Header support), simply writing DMA_CHAN_CONTROL when DMA is running
(for example, with the commands below) leads to a TX watchdog timeout.

 host$ socat TCP-LISTEN:1024,fork,reuseaddr - &
 device$ ethtool -K eth0 tso off
 device$ ethtool -K eth0 tso on
 device$ dd if=/dev/zero bs=1M count=10 | socat - TCP4:host:1024
 <tx watchdog timeout>

Note that since my IP is configured without Split Header support, the
driver always just reads and writes the same value to the
DMA_CHAN_CONTROL register.

I don't have access to any platforms with Split Header support so I
don't know if these writes to the DMA_CHAN_CONTROL while DMA is running
actually work properly on such systems.  I could not find anything in
the databook that says that DMA_CHAN_CONTROL should not be written when
the DMA is running.

But on systems without Split Header support, there is in any case no
need to call enable_sph() in stmmac_set_features() at all since SPH can
never be toggled, so we can avoid the watchdog timeout there by skipping
this call.

Fixes: 8c6fc097a2f4acf ("net: stmmac: gmac4+: Add Split Header support")
	Signed-off-by: Vincent Whitchurch <vincent.whitchurch@axis.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit f8e7dfd6fdabb831846ab1970a875746559d491b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
diff --cc drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
index 0dd9bf13b43c,da8306f60730..000000000000
--- a/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
@@@ -4551,9 -5551,13 +4549,19 @@@ static int stmmac_set_features(struct n
  	 */
  	stmmac_rx_ipc(priv, priv->hw);
  
++<<<<<<< HEAD
 +	sph_en = (priv->hw->rx_csum > 0) && priv->sph;
 +	for (chan = 0; chan < priv->plat->rx_queues_to_use; chan++)
 +		stmmac_enable_sph(priv, priv->ioaddr, sph_en, chan);
++=======
+ 	if (priv->sph_cap) {
+ 		bool sph_en = (priv->hw->rx_csum > 0) && priv->sph;
+ 		u32 chan;
+ 
+ 		for (chan = 0; chan < priv->plat->rx_queues_to_use; chan++)
+ 			stmmac_enable_sph(priv, priv->ioaddr, sph_en, chan);
+ 	}
++>>>>>>> f8e7dfd6fdab (net: stmmac: Avoid DMA_CHAN_CONTROL write if no Split Header support)
  
  	return 0;
  }
* Unmerged path drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
