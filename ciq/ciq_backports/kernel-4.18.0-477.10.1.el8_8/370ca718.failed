net-sysctl: factor-out rpm mask manipulation helpers

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-477.10.1.el8_8
commit-author Paolo Abeni <pabeni@redhat.com>
commit 370ca718fd5e1fd45ccfdf7a9d76d010f561e607
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-477.10.1.el8_8/370ca718.failed

Will simplify the following patch. No functional change
intended.

	Signed-off-by: Paolo Abeni <pabeni@redhat.com>
	Reviewed-by: Simon Horman <simon.horman@corigine.com>
	Reviewed-by: Eric Dumazet <edumazet@google.com>
	Signed-off-by: Jakub Kicinski <kuba@kernel.org>
(cherry picked from commit 370ca718fd5e1fd45ccfdf7a9d76d010f561e607)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/core/dev.h
#	net/core/net-sysfs.c
diff --cc net/core/dev.h
index 97980cad7bac,e075e198092c..000000000000
--- a/net/core/dev.h
+++ b/net/core/dev.h
@@@ -97,4 -112,28 +98,31 @@@ static inline void netif_set_gso_max_se
  	WRITE_ONCE(dev->gso_max_segs, segs);
  }
  
++<<<<<<< HEAD
++=======
+ static inline void netif_set_gro_max_size(struct net_device *dev,
+ 					  unsigned int size)
+ {
+ 	/* This pairs with the READ_ONCE() in skb_gro_receive() */
+ 	WRITE_ONCE(dev->gro_max_size, size);
+ 	if (size <= GRO_LEGACY_MAX_SIZE)
+ 		WRITE_ONCE(dev->gro_ipv4_max_size, size);
+ }
+ 
+ static inline void netif_set_gso_ipv4_max_size(struct net_device *dev,
+ 					       unsigned int size)
+ {
+ 	/* dev->gso_ipv4_max_size is read locklessly from sk_setup_caps() */
+ 	WRITE_ONCE(dev->gso_ipv4_max_size, size);
+ }
+ 
+ static inline void netif_set_gro_ipv4_max_size(struct net_device *dev,
+ 					       unsigned int size)
+ {
+ 	/* This pairs with the READ_ONCE() in skb_gro_receive() */
+ 	WRITE_ONCE(dev->gro_ipv4_max_size, size);
+ }
+ 
+ int rps_cpumask_housekeeping(struct cpumask *mask);
++>>>>>>> 370ca718fd5e (net-sysctl: factor-out rpm mask manipulation helpers)
  #endif
diff --cc net/core/net-sysfs.c
index 10667cc2a611,2126970a4bfd..000000000000
--- a/net/core/net-sysfs.c
+++ b/net/core/net-sysfs.c
@@@ -835,34 -831,12 +835,40 @@@ static ssize_t show_rps_map(struct netd
  	return len < PAGE_SIZE ? len : -EINVAL;
  }
  
- static ssize_t store_rps_map(struct netdev_rx_queue *queue,
- 			     const char *buf, size_t len)
+ static int netdev_rx_queue_set_rps_mask(struct netdev_rx_queue *queue,
+ 					cpumask_var_t mask)
  {
++<<<<<<< HEAD
 +	struct rps_map *old_map, *map;
 +	cpumask_var_t mask;
 +	int err, cpu, i, hk_flags;
 +	static DEFINE_MUTEX(rps_map_mutex);
 +
 +	if (!capable(CAP_NET_ADMIN))
 +		return -EPERM;
 +
 +	if (!alloc_cpumask_var(&mask, GFP_KERNEL))
 +		return -ENOMEM;
 +
 +	err = bitmap_parse(buf, len, cpumask_bits(mask), nr_cpumask_bits);
 +	if (err) {
 +		free_cpumask_var(mask);
 +		return err;
 +	}
 +
 +	if (!cpumask_empty(mask)) {
 +		hk_flags = HK_FLAG_DOMAIN | HK_FLAG_WQ;
 +		cpumask_and(mask, mask, housekeeping_cpumask(hk_flags));
 +		if (cpumask_empty(mask)) {
 +			free_cpumask_var(mask);
 +			return -EINVAL;
 +		}
 +	}
++=======
+ 	static DEFINE_MUTEX(rps_map_mutex);
+ 	struct rps_map *old_map, *map;
+ 	int cpu, i;
++>>>>>>> 370ca718fd5e (net-sysctl: factor-out rpm mask manipulation helpers)
  
  	map = kzalloc(max_t(unsigned int,
  			    RPS_MAP_SIZE(cpumask_weight(mask)), L1_CACHE_BYTES),
* Unmerged path net/core/dev.h
* Unmerged path net/core/net-sysfs.c
