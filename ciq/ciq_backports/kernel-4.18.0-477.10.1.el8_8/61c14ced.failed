x86/compressed/acpi: Move EFI config table lookup to helper

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-477.10.1.el8_8
commit-author Michael Roth <michael.roth@amd.com>
commit 61c14ceda8405f37545a0983d6b9bc45c6236793
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-477.10.1.el8_8/61c14ced.failed

Future patches for SEV-SNP-validated CPUID will also require early
parsing of the EFI configuration. Incrementally move the related code
into a set of helpers that can be re-used for that purpose.

  [ bp: Remove superfluous zeroing of a stack variable. ]

	Signed-off-by: Michael Roth <michael.roth@amd.com>
	Signed-off-by: Brijesh Singh <brijesh.singh@amd.com>
	Signed-off-by: Borislav Petkov <bp@suse.de>
Link: https://lore.kernel.org/r/20220307213356.2797205-27-brijesh.singh@amd.com
(cherry picked from commit 61c14ceda8405f37545a0983d6b9bc45c6236793)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/boot/compressed/acpi.c
#	arch/x86/boot/compressed/efi.c
#	arch/x86/boot/compressed/misc.h
diff --cc arch/x86/boot/compressed/acpi.c
index 15255f388a85,9a824af69961..000000000000
--- a/arch/x86/boot/compressed/acpi.c
+++ b/arch/x86/boot/compressed/acpi.c
@@@ -143,54 -118,31 +143,72 @@@ static acpi_physical_address kexec_get_
  static acpi_physical_address efi_get_rsdp_addr(void)
  {
  #ifdef CONFIG_EFI
++<<<<<<< HEAD
 +	unsigned long systab, config_tables;
++=======
+ 	unsigned long cfg_tbl_pa = 0;
+ 	unsigned int cfg_tbl_len;
+ 	unsigned long systab_pa;
++>>>>>>> 61c14ceda840 (x86/compressed/acpi: Move EFI config table lookup to helper)
  	unsigned int nr_tables;
 -	enum efi_type et;
 +	struct efi_info *ei;
  	bool efi_64;
++<<<<<<< HEAD
 +	char *sig;
++=======
+ 	int ret;
++>>>>>>> 61c14ceda840 (x86/compressed/acpi: Move EFI config table lookup to helper)
  
 -	et = efi_get_type(boot_params);
 -	if (et == EFI_TYPE_64)
 +	ei = &boot_params->efi_info;
 +	sig = (char *)&ei->efi_loader_signature;
 +
 +	if (!strncmp(sig, EFI64_LOADER_SIGNATURE, 4)) {
  		efi_64 = true;
 -	else if (et == EFI_TYPE_32)
 +	} else if (!strncmp(sig, EFI32_LOADER_SIGNATURE, 4)) {
  		efi_64 = false;
 -	else
 +	} else {
 +		debug_putstr("Wrong EFI loader signature.\n");
  		return 0;
 +	}
 +
 +	/* Get systab from boot params. */
 +#ifdef CONFIG_X86_64
 +	systab = ei->efi_systab | ((__u64)ei->efi_systab_hi << 32);
 +#else
 +	if (ei->efi_systab_hi || ei->efi_memmap_hi) {
 +		debug_putstr("Error getting RSDP address: EFI system table located above 4GB.\n");
 +		return 0;
 +	}
 +	systab = ei->efi_systab;
 +#endif
 +	if (!systab)
 +		error("EFI system table not found.");
 +
++<<<<<<< HEAD
 +	/* Handle EFI bitness properly */
 +	if (efi_64) {
 +		efi_system_table_64_t *stbl = (efi_system_table_64_t *)systab;
  
 -	systab_pa = efi_get_system_table(boot_params);
 -	if (!systab_pa)
 -		error("EFI support advertised, but unable to locate system table.");
 +		config_tables	= stbl->tables;
 +		nr_tables	= stbl->nr_tables;
 +	} else {
 +		efi_system_table_32_t *stbl = (efi_system_table_32_t *)systab;
 +
 +		config_tables	= stbl->tables;
 +		nr_tables	= stbl->nr_tables;
 +	}
  
 +	if (!config_tables)
 +		error("EFI config tables not found.");
 +
 +	return __efi_get_rsdp_addr(config_tables, nr_tables, efi_64);
++=======
+ 	ret = efi_get_conf_table(boot_params, &cfg_tbl_pa, &cfg_tbl_len);
+ 	if (ret || !cfg_tbl_pa)
+ 		error("EFI config table not found.");
+ 
+ 	return __efi_get_rsdp_addr(cfg_tbl_pa, cfg_tbl_len, efi_64);
++>>>>>>> 61c14ceda840 (x86/compressed/acpi: Move EFI config table lookup to helper)
  #else
  	return 0;
  #endif
diff --cc arch/x86/boot/compressed/misc.h
index 5bf08eb0ecdc,8815af092a10..000000000000
--- a/arch/x86/boot/compressed/misc.h
+++ b/arch/x86/boot/compressed/misc.h
@@@ -168,4 -176,35 +168,38 @@@ void boot_stage2_vc(void)
  
  unsigned long sev_verify_cbit(unsigned long cr3);
  
++<<<<<<< HEAD
++=======
+ enum efi_type {
+ 	EFI_TYPE_64,
+ 	EFI_TYPE_32,
+ 	EFI_TYPE_NONE,
+ };
+ 
+ #ifdef CONFIG_EFI
+ /* helpers for early EFI config table access */
+ enum efi_type efi_get_type(struct boot_params *bp);
+ unsigned long efi_get_system_table(struct boot_params *bp);
+ int efi_get_conf_table(struct boot_params *bp, unsigned long *cfg_tbl_pa,
+ 		       unsigned int *cfg_tbl_len);
+ #else
+ static inline enum efi_type efi_get_type(struct boot_params *bp)
+ {
+ 	return EFI_TYPE_NONE;
+ }
+ 
+ static inline unsigned long efi_get_system_table(struct boot_params *bp)
+ {
+ 	return 0;
+ }
+ 
+ static inline int efi_get_conf_table(struct boot_params *bp,
+ 				     unsigned long *cfg_tbl_pa,
+ 				     unsigned int *cfg_tbl_len)
+ {
+ 	return -ENOENT;
+ }
+ #endif /* CONFIG_EFI */
+ 
++>>>>>>> 61c14ceda840 (x86/compressed/acpi: Move EFI config table lookup to helper)
  #endif /* BOOT_COMPRESSED_MISC_H */
* Unmerged path arch/x86/boot/compressed/efi.c
* Unmerged path arch/x86/boot/compressed/acpi.c
* Unmerged path arch/x86/boot/compressed/efi.c
* Unmerged path arch/x86/boot/compressed/misc.h
