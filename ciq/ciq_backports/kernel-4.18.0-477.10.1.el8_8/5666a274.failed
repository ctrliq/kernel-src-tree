driver core: fix driver_set_override() issue with empty strings

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-477.10.1.el8_8
commit-author Greg Kroah-Hartman <gregkh@linuxfoundation.org>
commit 5666a274a6d54372d6b79b1f78682a9d827e679e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-477.10.1.el8_8/5666a274.failed

Python likes to send an empty string for some sysfs files, including the
driver_override field.  When commit 23d99baf9d72 ("PCI: Use
driver_set_override() instead of open-coding") moved the PCI core to use
the driver core function instead of hand-rolling their own handler, this
showed up as a regression from some userspace tools, like DPDK.

Fix this up by actually looking at the length of the string first
instead of trusting that userspace got it correct.

Fixes: 23d99baf9d72 ("PCI: Use driver_set_override() instead of open-coding")
	Cc: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
	Cc: Bjorn Helgaas <bhelgaas@google.com>
	Cc: "Rafael J. Wysocki" <rafael@kernel.org>
	Cc: Andy Shevchenko <andy.shevchenko@gmail.com>
	Cc: stable <stable@kernel.org>
	Reported-by: Stephen Hemminger <stephen@networkplumber.org>
	Tested-by: Huisong Li <lihuisong@huawei.com>
	Reviewed-by: Stephen Hemminger <stephen@networkplumber.org>
	Reviewed-by: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
Link: https://lore.kernel.org/r/20220901163734.3583106-1-gregkh@linuxfoundation.org
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit 5666a274a6d54372d6b79b1f78682a9d827e679e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/base/driver.c
diff --cc drivers/base/driver.c
index 4e5ca632f35e,676b6275d5b5..000000000000
--- a/drivers/base/driver.c
+++ b/drivers/base/driver.c
@@@ -30,6 -31,81 +30,84 @@@ static struct device *next_device(struc
  }
  
  /**
++<<<<<<< HEAD
++=======
+  * driver_set_override() - Helper to set or clear driver override.
+  * @dev: Device to change
+  * @override: Address of string to change (e.g. &device->driver_override);
+  *            The contents will be freed and hold newly allocated override.
+  * @s: NUL-terminated string, new driver name to force a match, pass empty
+  *     string to clear it ("" or "\n", where the latter is only for sysfs
+  *     interface).
+  * @len: length of @s
+  *
+  * Helper to set or clear driver override in a device, intended for the cases
+  * when the driver_override field is allocated by driver/bus code.
+  *
+  * Returns: 0 on success or a negative error code on failure.
+  */
+ int driver_set_override(struct device *dev, const char **override,
+ 			const char *s, size_t len)
+ {
+ 	const char *new, *old;
+ 	char *cp;
+ 
+ 	if (!override || !s)
+ 		return -EINVAL;
+ 
+ 	/*
+ 	 * The stored value will be used in sysfs show callback (sysfs_emit()),
+ 	 * which has a length limit of PAGE_SIZE and adds a trailing newline.
+ 	 * Thus we can store one character less to avoid truncation during sysfs
+ 	 * show.
+ 	 */
+ 	if (len >= (PAGE_SIZE - 1))
+ 		return -EINVAL;
+ 
+ 	/*
+ 	 * Compute the real length of the string in case userspace sends us a
+ 	 * bunch of \0 characters like python likes to do.
+ 	 */
+ 	len = strlen(s);
+ 
+ 	if (!len) {
+ 		/* Empty string passed - clear override */
+ 		device_lock(dev);
+ 		old = *override;
+ 		*override = NULL;
+ 		device_unlock(dev);
+ 		kfree(old);
+ 
+ 		return 0;
+ 	}
+ 
+ 	cp = strnchr(s, len, '\n');
+ 	if (cp)
+ 		len = cp - s;
+ 
+ 	new = kstrndup(s, len, GFP_KERNEL);
+ 	if (!new)
+ 		return -ENOMEM;
+ 
+ 	device_lock(dev);
+ 	old = *override;
+ 	if (cp != s) {
+ 		*override = new;
+ 	} else {
+ 		/* "\n" passed - clear override */
+ 		kfree(new);
+ 		*override = NULL;
+ 	}
+ 	device_unlock(dev);
+ 
+ 	kfree(old);
+ 
+ 	return 0;
+ }
+ EXPORT_SYMBOL_GPL(driver_set_override);
+ 
+ /**
++>>>>>>> 5666a274a6d5 (driver core: fix driver_set_override() issue with empty strings)
   * driver_for_each_device - Iterator for devices bound to a driver.
   * @drv: Driver we're iterating.
   * @start: Device to begin with
* Unmerged path drivers/base/driver.c
