net/ulp: use consistent error code when blocking ULP

jira LE-1907
cve CVE-2023-0461
Rebuild_History Non-Buildable kernel-4.18.0-477.10.1.el8_8
commit-author Paolo Abeni <pabeni@redhat.com>
commit 8ccc99362b60c6f27bb46f36fdaaccf4ef0303de
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-477.10.1.el8_8/8ccc9936.failed

The referenced commit changed the error code returned by the kernel
when preventing a non-established socket from attaching the ktls
ULP. Before to such a commit, the user-space got ENOTCONN instead
of EINVAL.

The existing self-tests depend on such error code, and the change
caused a failure:

  RUN           global.non_established ...
 tls.c:1673:non_established:Expected errno (22) == ENOTCONN (107)
 non_established: Test failed at step #3
          FAIL  global.non_established

In the unlikely event existing applications do the same, address
the issue by restoring the prior error code in the above scenario.

Note that the only other ULP performing similar checks at init
time - smc_ulp_ops - also fails with ENOTCONN when trying to attach
the ULP to a non-established socket.

	Reported-by: Sabrina Dubroca <sd@queasysnail.net>
Fixes: 2c02d41d71f9 ("net/ulp: prevent ULP without clone op from entering the LISTEN status")
	Signed-off-by: Paolo Abeni <pabeni@redhat.com>
	Reviewed-by: Sabrina Dubroca <sd@queasysnail.net>
Link: https://lore.kernel.org/r/7bb199e7a93317fb6f8bf8b9b2dc71c18f337cde.1674042685.git.pabeni@redhat.com
	Signed-off-by: Jakub Kicinski <kuba@kernel.org>
(cherry picked from commit 8ccc99362b60c6f27bb46f36fdaaccf4ef0303de)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/ipv4/tcp_ulp.c
diff --cc net/ipv4/tcp_ulp.c
index 6cae9e21420b,2aa442128630..000000000000
--- a/net/ipv4/tcp_ulp.c
+++ b/net/ipv4/tcp_ulp.c
@@@ -131,6 -136,13 +131,16 @@@ static int __tcp_set_ulp(struct sock *s
  	if (icsk->icsk_ulp_ops)
  		goto out_err;
  
++<<<<<<< HEAD
++=======
+ 	if (sk->sk_socket)
+ 		clear_bit(SOCK_SUPPORT_ZC, &sk->sk_socket->flags);
+ 
+ 	err = -ENOTCONN;
+ 	if (!ulp_ops->clone && sk->sk_state == TCP_LISTEN)
+ 		goto out_err;
+ 
++>>>>>>> 8ccc99362b60 (net/ulp: use consistent error code when blocking ULP)
  	err = ulp_ops->init(sk);
  	if (err)
  		goto out_err;
* Unmerged path net/ipv4/tcp_ulp.c
