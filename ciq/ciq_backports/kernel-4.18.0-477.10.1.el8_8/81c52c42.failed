net: stmmac: separate the tas basetime calculation function

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-477.10.1.el8_8
commit-author Xiaoliang Yang <xiaoliang.yang_1@nxp.com>
commit 81c52c42afd92b741289208c65e5063b9e23ffb4
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-477.10.1.el8_8/81c52c42.failed

Separate the TAS basetime calculation function so that it can be
called by other functions.

	Signed-off-by: Xiaoliang Yang <xiaoliang.yang_1@nxp.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 81c52c42afd92b741289208c65e5063b9e23ffb4)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/stmicro/stmmac/stmmac.h
diff --cc drivers/net/ethernet/stmicro/stmmac/stmmac.h
index 532f17835b06,fcdb1d20389b..000000000000
--- a/drivers/net/ethernet/stmicro/stmmac/stmmac.h
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac.h
@@@ -311,4 -331,48 +311,51 @@@ int stmmac_reinit_ringparam(struct net_
  int stmmac_bus_clks_config(struct stmmac_priv *priv, bool enabled);
  void stmmac_fpe_handshake(struct stmmac_priv *priv, bool enable);
  
++<<<<<<< HEAD
++=======
+ static inline bool stmmac_xdp_is_enabled(struct stmmac_priv *priv)
+ {
+ 	return !!priv->xdp_prog;
+ }
+ 
+ static inline unsigned int stmmac_rx_offset(struct stmmac_priv *priv)
+ {
+ 	if (stmmac_xdp_is_enabled(priv))
+ 		return XDP_PACKET_HEADROOM + NET_IP_ALIGN;
+ 
+ 	return NET_SKB_PAD + NET_IP_ALIGN;
+ }
+ 
+ void stmmac_disable_rx_queue(struct stmmac_priv *priv, u32 queue);
+ void stmmac_enable_rx_queue(struct stmmac_priv *priv, u32 queue);
+ void stmmac_disable_tx_queue(struct stmmac_priv *priv, u32 queue);
+ void stmmac_enable_tx_queue(struct stmmac_priv *priv, u32 queue);
+ int stmmac_xsk_wakeup(struct net_device *dev, u32 queue, u32 flags);
+ struct timespec64 stmmac_calc_tas_basetime(ktime_t old_base_time,
+ 					   ktime_t current_time,
+ 					   u64 cycle_time);
+ 
+ #if IS_ENABLED(CONFIG_STMMAC_SELFTESTS)
+ void stmmac_selftest_run(struct net_device *dev,
+ 			 struct ethtool_test *etest, u64 *buf);
+ void stmmac_selftest_get_strings(struct stmmac_priv *priv, u8 *data);
+ int stmmac_selftest_get_count(struct stmmac_priv *priv);
+ #else
+ static inline void stmmac_selftest_run(struct net_device *dev,
+ 				       struct ethtool_test *etest, u64 *buf)
+ {
+ 	/* Not enabled */
+ }
+ static inline void stmmac_selftest_get_strings(struct stmmac_priv *priv,
+ 					       u8 *data)
+ {
+ 	/* Not enabled */
+ }
+ static inline int stmmac_selftest_get_count(struct stmmac_priv *priv)
+ {
+ 	return -EOPNOTSUPP;
+ }
+ #endif /* CONFIG_STMMAC_SELFTESTS */
+ 
++>>>>>>> 81c52c42afd9 (net: stmmac: separate the tas basetime calculation function)
  #endif /* __STMMAC_H__ */
* Unmerged path drivers/net/ethernet/stmicro/stmmac/stmmac.h
diff --git a/drivers/net/ethernet/stmicro/stmmac/stmmac_tc.c b/drivers/net/ethernet/stmicro/stmmac/stmmac_tc.c
index 1a937313f822..c736276b31d2 100644
--- a/drivers/net/ethernet/stmicro/stmmac/stmmac_tc.c
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac_tc.c
@@ -717,6 +717,29 @@ static int tc_setup_cls(struct stmmac_priv *priv,
 	return ret;
 }
 
+struct timespec64 stmmac_calc_tas_basetime(ktime_t old_base_time,
+					   ktime_t current_time,
+					   u64 cycle_time)
+{
+	struct timespec64 time;
+
+	if (ktime_after(old_base_time, current_time)) {
+		time = ktime_to_timespec64(old_base_time);
+	} else {
+		s64 n;
+		ktime_t base_time;
+
+		n = div64_s64(ktime_sub_ns(current_time, old_base_time),
+			      cycle_time);
+		base_time = ktime_add_ns(old_base_time,
+					 (n + 1) * cycle_time);
+
+		time = ktime_to_timespec64(base_time);
+	}
+
+	return time;
+}
+
 static int tc_setup_taprio(struct stmmac_priv *priv,
 			   struct tc_taprio_qopt_offload *qopt)
 {
@@ -820,19 +843,8 @@ static int tc_setup_taprio(struct stmmac_priv *priv,
 	/* Adjust for real system time */
 	priv->ptp_clock_ops.gettime64(&priv->ptp_clock_ops, &current_time);
 	current_time_ns = timespec64_to_ktime(current_time);
-	if (ktime_after(qopt->base_time, current_time_ns)) {
-		time = ktime_to_timespec64(qopt->base_time);
-	} else {
-		ktime_t base_time;
-		s64 n;
-
-		n = div64_s64(ktime_sub_ns(current_time_ns, qopt->base_time),
-			      qopt->cycle_time);
-		base_time = ktime_add_ns(qopt->base_time,
-					 (n + 1) * qopt->cycle_time);
-
-		time = ktime_to_timespec64(base_time);
-	}
+	time = stmmac_calc_tas_basetime(qopt->base_time, current_time_ns,
+					qopt->cycle_time);
 
 	priv->plat->est->btr[0] = (u32)time.tv_nsec;
 	priv->plat->est->btr[1] = (u32)time.tv_sec;
