net/mlx5: Remove tls vs. ktls separation as it is the same

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-477.10.1.el8_8
commit-author Leon Romanovsky <leonro@nvidia.com>
commit 943aa7bda37301eefc363e4940c4805d8e166478
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-477.10.1.el8_8/943aa7bd.failed

After removal FPGA TLS, we can remove tls->ktls indirection too,
as it is the same thing.

Link: https://lore.kernel.org/r/67e596599edcffb0de43f26551208dfd34ac777e.1649073691.git.leonro@nvidia.com
	Reviewed-by: Tariq Toukan <tariqt@nvidia.com>
	Reviewed-by: Saeed Mahameed <saeedm@nvidia.com>
	Signed-off-by: Leon Romanovsky <leonro@nvidia.com>
(cherry picked from commit 943aa7bda37301eefc363e4940c4805d8e166478)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en_accel/ktls.c
#	drivers/net/ethernet/mellanox/mlx5/core/en_accel/ktls.h
#	drivers/net/ethernet/mellanox/mlx5/core/en_accel/ktls_stats.c
#	drivers/net/ethernet/mellanox/mlx5/core/en_accel/tls.c
#	drivers/net/ethernet/mellanox/mlx5/core/en_accel/tls.h
#	drivers/net/ethernet/mellanox/mlx5/core/en_accel/tls_rxtx.c
#	drivers/net/ethernet/mellanox/mlx5/core/en_accel/tls_rxtx.h
#	drivers/net/ethernet/mellanox/mlx5/core/en_main.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_accel/ktls.c
index d93aadbf10da,7f95b833f2ea..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_accel/ktls.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_accel/ktls.c
@@@ -2,7 -2,7 +2,11 @@@
  // Copyright (c) 2019 Mellanox Technologies.
  
  #include "en.h"
++<<<<<<< HEAD
 +#include "en_accel/tls.h"
++=======
+ #include "lib/mlx5.h"
++>>>>>>> 943aa7bda373 (net/mlx5: Remove tls vs. ktls separation as it is the same)
  #include "en_accel/ktls.h"
  #include "en_accel/ktls_utils.h"
  #include "en_accel/fs_tcp.h"
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_accel/ktls.h
index 5833deb2354c,50e720966358..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_accel/ktls.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_accel/ktls.h
@@@ -4,6 -4,8 +4,11 @@@
  #ifndef __MLX5E_KTLS_H__
  #define __MLX5E_KTLS_H__
  
++<<<<<<< HEAD
++=======
+ #include <linux/tls.h>
+ #include <net/tls.h>
++>>>>>>> 943aa7bda373 (net/mlx5: Remove tls vs. ktls separation as it is the same)
  #include "en.h"
  
  #ifdef CONFIG_MLX5_EN_TLS
@@@ -34,7 -62,38 +39,26 @@@ static inline bool mlx5e_accel_is_ktls_
  		mlx5_accel_is_ktls_device(mdev);
  }
  
+ struct mlx5e_tls_sw_stats {
+ 	atomic64_t tx_tls_ctx;
+ 	atomic64_t tx_tls_del;
+ 	atomic64_t rx_tls_ctx;
+ 	atomic64_t rx_tls_del;
+ };
+ 
+ struct mlx5e_tls {
+ 	struct mlx5e_tls_sw_stats sw_stats;
+ 	struct workqueue_struct *rx_wq;
+ };
+ 
+ int mlx5e_ktls_init(struct mlx5e_priv *priv);
+ void mlx5e_ktls_cleanup(struct mlx5e_priv *priv);
+ 
+ int mlx5e_ktls_get_count(struct mlx5e_priv *priv);
+ int mlx5e_ktls_get_strings(struct mlx5e_priv *priv, uint8_t *data);
+ int mlx5e_ktls_get_stats(struct mlx5e_priv *priv, u64 *data);
+ 
  #else
 -static inline int
 -mlx5_ktls_create_key(struct mlx5_core_dev *mdev,
 -		     struct tls_crypto_info *crypto_info,
 -		     u32 *p_key_id) { return -EOPNOTSUPP; }
 -static inline void
 -mlx5_ktls_destroy_key(struct mlx5_core_dev *mdev, u32 key_id) {}
 -
 -static inline bool
 -mlx5_accel_is_ktls_device(struct mlx5_core_dev *mdev) { return false; }
 -static inline bool
 -mlx5e_ktls_type_check(struct mlx5_core_dev *mdev,
 -		      struct tls_crypto_info *crypto_info) { return false; }
  
  static inline void mlx5e_ktls_build_netdev(struct mlx5e_priv *priv)
  {
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_accel/ktls_stats.c
index 56e7b2aee85f,2ab46c4247ff..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_accel/ktls_stats.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_accel/ktls_stats.c
@@@ -36,15 -36,8 +36,15 @@@
  
  #include "en.h"
  #include "fpga/sdk.h"
- #include "en_accel/tls.h"
+ #include "en_accel/ktls.h"
  
 +static const struct counter_desc mlx5e_tls_sw_stats_desc[] = {
 +	{ MLX5E_DECLARE_STAT(struct mlx5e_tls_sw_stats, tx_tls_drop_metadata) },
 +	{ MLX5E_DECLARE_STAT(struct mlx5e_tls_sw_stats, tx_tls_drop_resync_alloc) },
 +	{ MLX5E_DECLARE_STAT(struct mlx5e_tls_sw_stats, tx_tls_drop_no_sync_data) },
 +	{ MLX5E_DECLARE_STAT(struct mlx5e_tls_sw_stats, tx_tls_drop_bypass_required) },
 +};
 +
  static const struct counter_desc mlx5e_ktls_sw_stats_desc[] = {
  	{ MLX5E_DECLARE_STAT(struct mlx5e_tls_sw_stats, tx_tls_ctx) },
  	{ MLX5E_DECLARE_STAT(struct mlx5e_tls_sw_stats, tx_tls_del) },
@@@ -55,31 -48,22 +55,36 @@@
  #define MLX5E_READ_CTR_ATOMIC64(ptr, dsc, i) \
  	atomic64_read((atomic64_t *)((char *)(ptr) + (dsc)[i].offset))
  
++<<<<<<< HEAD:drivers/net/ethernet/mellanox/mlx5/core/en_accel/tls_stats.c
 +static const struct counter_desc *get_tls_atomic_stats(struct mlx5e_priv *priv)
 +{
 +	if (!priv->tls)
 +		return NULL;
 +	if (mlx5e_accel_is_ktls_device(priv->mdev))
 +		return mlx5e_ktls_sw_stats_desc;
 +	return mlx5e_tls_sw_stats_desc;
 +}
 +
 +int mlx5e_tls_get_count(struct mlx5e_priv *priv)
++=======
+ int mlx5e_ktls_get_count(struct mlx5e_priv *priv)
++>>>>>>> 943aa7bda373 (net/mlx5: Remove tls vs. ktls separation as it is the same):drivers/net/ethernet/mellanox/mlx5/core/en_accel/ktls_stats.c
  {
  	if (!priv->tls)
  		return 0;
 -
 -	return ARRAY_SIZE(mlx5e_ktls_sw_stats_desc);
 +	if (mlx5e_accel_is_ktls_device(priv->mdev))
 +		return ARRAY_SIZE(mlx5e_ktls_sw_stats_desc);
 +	return ARRAY_SIZE(mlx5e_tls_sw_stats_desc);
  }
  
- int mlx5e_tls_get_strings(struct mlx5e_priv *priv, uint8_t *data)
+ int mlx5e_ktls_get_strings(struct mlx5e_priv *priv, uint8_t *data)
  {
- 	const struct counter_desc *stats_desc;
  	unsigned int i, n, idx = 0;
  
- 	stats_desc = get_tls_atomic_stats(priv);
- 	n = mlx5e_tls_get_count(priv);
+ 	if (!priv->tls)
+ 		return 0;
+ 
+ 	n = mlx5e_ktls_get_count(priv);
  
  	for (i = 0; i < n; i++)
  		strcpy(data + (idx++) * ETH_GSTRING_LEN,
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_main.c
index 22f111312bee,89a85030b0eb..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
@@@ -47,9 -47,8 +47,9 @@@
  #include "en_rep.h"
  #include "en_accel/ipsec.h"
  #include "en_accel/en_accel.h"
- #include "en_accel/tls.h"
+ #include "en_accel/ktls.h"
  #include "accel/ipsec.h"
 +#include "accel/tls.h"
  #include "lib/vxlan.h"
  #include "lib/clock.h"
  #include "en/port.h"
@@@ -5027,11 -5002,8 +5027,16 @@@ static int mlx5e_nic_init(struct mlx5_c
  
  static void mlx5e_nic_cleanup(struct mlx5e_priv *priv)
  {
++<<<<<<< HEAD
 +	/* RHEL-only: Disable 'devlink port' support for non-switchdev mode*/
 +	if (!mlx5_core_is_sf(priv->mdev))
 +		mlx5e_health_destroy_reporters(priv);
 +	mlx5e_devlink_port_unregister(priv);
 +	mlx5e_tls_cleanup(priv);
++=======
+ 	mlx5e_health_destroy_reporters(priv);
+ 	mlx5e_ktls_cleanup(priv);
++>>>>>>> 943aa7bda373 (net/mlx5: Remove tls vs. ktls separation as it is the same)
  	mlx5e_ipsec_cleanup(priv);
  	mlx5e_fs_cleanup(priv);
  }
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_accel/tls.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_accel/tls.h
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_accel/tls_rxtx.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_accel/tls_rxtx.h
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/Makefile b/drivers/net/ethernet/mellanox/mlx5/core/Makefile
index 4bc666714a35..f2f4c31d7412 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/Makefile
+++ b/drivers/net/ethernet/mellanox/mlx5/core/Makefile
@@ -98,7 +98,7 @@ mlx5_core-$(CONFIG_MLX5_FPGA) += fpga/cmd.o fpga/core.o fpga/conn.o fpga/sdk.o
 mlx5_core-$(CONFIG_MLX5_EN_IPSEC) += en_accel/ipsec.o en_accel/ipsec_rxtx.o \
 				     en_accel/ipsec_stats.o en_accel/ipsec_fs.o
 
-mlx5_core-$(CONFIG_MLX5_EN_TLS) += en_accel/tls.o en_accel/tls_rxtx.o en_accel/tls_stats.o \
+mlx5_core-$(CONFIG_MLX5_EN_TLS) += en_accel/ktls_stats.o \
 				   en_accel/fs_tcp.o en_accel/ktls.o en_accel/ktls_txrx.o \
 				   en_accel/ktls_tx.o en_accel/ktls_rx.o
 
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en/params.c b/drivers/net/ethernet/mellanox/mlx5/core/en/params.c
index 5c4711be6fae..1df6d8362b0a 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en/params.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en/params.c
@@ -207,7 +207,7 @@ u16 mlx5e_calc_sq_stop_room(struct mlx5_core_dev *mdev, struct mlx5e_params *par
 	bool is_mpwqe = MLX5E_GET_PFLAG(params, MLX5E_PFLAG_SKB_TX_MPWQE);
 	u16 stop_room;
 
-	stop_room  = mlx5e_tls_get_stop_room(mdev, params);
+	stop_room  = mlx5e_ktls_get_stop_room(mdev, params);
 	stop_room += mlx5e_stop_room_for_max_wqe(mdev);
 	if (is_mpwqe)
 		/* A MPWQE can take up to the maximum-sized WQE + all the normal
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en_accel/en_accel.h b/drivers/net/ethernet/mellanox/mlx5/core/en_accel/en_accel.h
index 62cde3e87c2e..04c0a5e1c89a 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_accel/en_accel.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_accel/en_accel.h
@@ -37,8 +37,8 @@
 #include <linux/skbuff.h>
 #include <linux/netdevice.h>
 #include "en_accel/ipsec_rxtx.h"
-#include "en_accel/tls.h"
-#include "en_accel/tls_rxtx.h"
+#include "en_accel/ktls.h"
+#include "en_accel/ktls_txrx.h"
 #include "en.h"
 #include "en/txrx.h"
 
@@ -124,8 +124,9 @@ static inline bool mlx5e_accel_tx_begin(struct net_device *dev,
 
 #ifdef CONFIG_MLX5_EN_TLS
 	/* May send SKBs and WQEs. */
-	if (mlx5e_tls_skb_offloaded(skb))
-		if (unlikely(!mlx5e_tls_handle_tx_skb(dev, sq, skb, &state->tls)))
+	if (mlx5e_ktls_skb_offloaded(skb))
+		if (unlikely(!mlx5e_ktls_handle_tx_skb(dev, sq, skb,
+						       &state->tls)))
 			return false;
 #endif
 
@@ -174,7 +175,7 @@ static inline void mlx5e_accel_tx_finish(struct mlx5e_txqsq *sq,
 					 struct mlx5_wqe_inline_seg *inlseg)
 {
 #ifdef CONFIG_MLX5_EN_TLS
-	mlx5e_tls_handle_tx_wqe(&wqe->ctrl, &state->tls);
+	mlx5e_ktls_handle_tx_wqe(&wqe->ctrl, &state->tls);
 #endif
 
 #ifdef CONFIG_MLX5_EN_IPSEC
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_accel/ktls.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_accel/ktls.h
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en_accel/ktls_rx.c b/drivers/net/ethernet/mellanox/mlx5/core/en_accel/ktls_rx.c
index 96064a2033f7..0bb0633b7542 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_accel/ktls_rx.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_accel/ktls_rx.c
@@ -3,7 +3,7 @@
 
 #include <net/inet6_hashtables.h>
 #include "en_accel/en_accel.h"
-#include "en_accel/tls.h"
+#include "en_accel/ktls.h"
 #include "en_accel/ktls_txrx.h"
 #include "en_accel/ktls_utils.h"
 #include "en_accel/fs_tcp.h"
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_accel/ktls_stats.c
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en_accel/ktls_tx.c b/drivers/net/ethernet/mellanox/mlx5/core/en_accel/ktls_tx.c
index aaf11c66bf4c..cadf322f9d9b 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_accel/ktls_tx.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_accel/ktls_tx.c
@@ -1,7 +1,7 @@
 // SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB
 // Copyright (c) 2019 Mellanox Technologies.
 
-#include "en_accel/tls.h"
+#include "en_accel/ktls.h"
 #include "en_accel/ktls_txrx.h"
 #include "en_accel/ktls_utils.h"
 
@@ -448,14 +448,26 @@ mlx5e_ktls_tx_handle_ooo(struct mlx5e_ktls_offload_context_tx *priv_tx,
 	return MLX5E_KTLS_SYNC_FAIL;
 }
 
-bool mlx5e_ktls_handle_tx_skb(struct tls_context *tls_ctx, struct mlx5e_txqsq *sq,
-			      struct sk_buff *skb, int datalen,
+bool mlx5e_ktls_handle_tx_skb(struct net_device *netdev, struct mlx5e_txqsq *sq,
+			      struct sk_buff *skb,
 			      struct mlx5e_accel_tx_tls_state *state)
 {
 	struct mlx5e_ktls_offload_context_tx *priv_tx;
 	struct mlx5e_sq_stats *stats = sq->stats;
+	struct tls_context *tls_ctx;
+	int datalen;
 	u32 seq;
 
+	datalen = skb->len - (skb_transport_offset(skb) + tcp_hdrlen(skb));
+	if (!datalen)
+		return true;
+
+	mlx5e_tx_mpwqe_ensure_complete(sq);
+
+	tls_ctx = tls_get_ctx(skb->sk);
+	if (WARN_ON_ONCE(tls_ctx->netdev != netdev))
+		goto err_out;
+
 	priv_tx = mlx5e_get_ktls_tx_priv_ctx(tls_ctx);
 
 	if (unlikely(mlx5e_ktls_tx_offload_test_and_clear_pending(priv_tx))) {
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en_accel/ktls_txrx.h b/drivers/net/ethernet/mellanox/mlx5/core/en_accel/ktls_txrx.h
index 08c9d5134479..2dd78dd4ad65 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_accel/ktls_txrx.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_accel/ktls_txrx.h
@@ -16,8 +16,8 @@ struct mlx5e_accel_tx_tls_state {
 
 u16 mlx5e_ktls_get_stop_room(struct mlx5_core_dev *mdev, struct mlx5e_params *params);
 
-bool mlx5e_ktls_handle_tx_skb(struct tls_context *tls_ctx, struct mlx5e_txqsq *sq,
-			      struct sk_buff *skb, int datalen,
+bool mlx5e_ktls_handle_tx_skb(struct net_device *netdev, struct mlx5e_txqsq *sq,
+			      struct sk_buff *skb,
 			      struct mlx5e_accel_tx_tls_state *state);
 void mlx5e_ktls_handle_rx_skb(struct mlx5e_rq *rq, struct sk_buff *skb,
 			      struct mlx5_cqe64 *cqe, u32 *cqe_bcnt);
@@ -48,6 +48,18 @@ mlx5e_ktls_rx_pending_resync_list(struct mlx5e_channel *c, int budget)
 {
 	return budget && test_bit(MLX5E_SQ_STATE_PENDING_TLS_RX_RESYNC, &c->async_icosq.state);
 }
+
+static inline bool mlx5e_ktls_skb_offloaded(struct sk_buff *skb)
+{
+	return skb->sk && tls_is_sk_tx_device_offloaded(skb->sk);
+}
+
+static inline void
+mlx5e_ktls_handle_tx_wqe(struct mlx5_wqe_ctrl_seg *cseg,
+			 struct mlx5e_accel_tx_tls_state *state)
+{
+	cseg->tis_tir_num = cpu_to_be32(state->tls_tisn << 8);
+}
 #else
 static inline bool
 mlx5e_ktls_tx_try_handle_resync_dump_comp(struct mlx5e_txqsq *sq,
@@ -69,6 +81,18 @@ mlx5e_ktls_rx_pending_resync_list(struct mlx5e_channel *c, int budget)
 	return false;
 }
 
+static inline u16 mlx5e_ktls_get_stop_room(struct mlx5_core_dev *mdev,
+					   struct mlx5e_params *params)
+{
+	return 0;
+}
+
+static inline void mlx5e_ktls_handle_rx_skb(struct mlx5e_rq *rq,
+					    struct sk_buff *skb,
+					    struct mlx5_cqe64 *cqe,
+					    u32 *cqe_bcnt)
+{
+}
 #endif /* CONFIG_MLX5_EN_TLS */
 
 #endif /* __MLX5E_TLS_TXRX_H__ */
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_accel/tls.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_accel/tls.h
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_accel/tls_rxtx.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_accel/tls_rxtx.h
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en_accel/tls_stats.c b/drivers/net/ethernet/mellanox/mlx5/core/en_accel/tls_stats.c
deleted file mode 100644
index 56e7b2aee85f..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_accel/tls_stats.c
+++ /dev/null
@@ -1,105 +0,0 @@
-/*
- * Copyright (c) 2018 Mellanox Technologies. All rights reserved.
- *
- * This software is available to you under a choice of one of two
- * licenses.  You may choose to be licensed under the terms of the GNU
- * General Public License (GPL) Version 2, available from the file
- * COPYING in the main directory of this source tree, or the
- * OpenIB.org BSD license below:
- *
- *     Redistribution and use in source and binary forms, with or
- *     without modification, are permitted provided that the following
- *     conditions are met:
- *
- *      - Redistributions of source code must retain the above
- *        copyright notice, this list of conditions and the following
- *        disclaimer.
- *
- *      - Redistributions in binary form must reproduce the above
- *        copyright notice, this list of conditions and the following
- *        disclaimer in the documentation and/or other materials
- *        provided with the distribution.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
- * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
- * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
- * SOFTWARE.
- *
- */
-
-#include <linux/ethtool.h>
-#include <net/sock.h>
-
-#include "en.h"
-#include "fpga/sdk.h"
-#include "en_accel/tls.h"
-
-static const struct counter_desc mlx5e_tls_sw_stats_desc[] = {
-	{ MLX5E_DECLARE_STAT(struct mlx5e_tls_sw_stats, tx_tls_drop_metadata) },
-	{ MLX5E_DECLARE_STAT(struct mlx5e_tls_sw_stats, tx_tls_drop_resync_alloc) },
-	{ MLX5E_DECLARE_STAT(struct mlx5e_tls_sw_stats, tx_tls_drop_no_sync_data) },
-	{ MLX5E_DECLARE_STAT(struct mlx5e_tls_sw_stats, tx_tls_drop_bypass_required) },
-};
-
-static const struct counter_desc mlx5e_ktls_sw_stats_desc[] = {
-	{ MLX5E_DECLARE_STAT(struct mlx5e_tls_sw_stats, tx_tls_ctx) },
-	{ MLX5E_DECLARE_STAT(struct mlx5e_tls_sw_stats, tx_tls_del) },
-	{ MLX5E_DECLARE_STAT(struct mlx5e_tls_sw_stats, rx_tls_ctx) },
-	{ MLX5E_DECLARE_STAT(struct mlx5e_tls_sw_stats, rx_tls_del) },
-};
-
-#define MLX5E_READ_CTR_ATOMIC64(ptr, dsc, i) \
-	atomic64_read((atomic64_t *)((char *)(ptr) + (dsc)[i].offset))
-
-static const struct counter_desc *get_tls_atomic_stats(struct mlx5e_priv *priv)
-{
-	if (!priv->tls)
-		return NULL;
-	if (mlx5e_accel_is_ktls_device(priv->mdev))
-		return mlx5e_ktls_sw_stats_desc;
-	return mlx5e_tls_sw_stats_desc;
-}
-
-int mlx5e_tls_get_count(struct mlx5e_priv *priv)
-{
-	if (!priv->tls)
-		return 0;
-	if (mlx5e_accel_is_ktls_device(priv->mdev))
-		return ARRAY_SIZE(mlx5e_ktls_sw_stats_desc);
-	return ARRAY_SIZE(mlx5e_tls_sw_stats_desc);
-}
-
-int mlx5e_tls_get_strings(struct mlx5e_priv *priv, uint8_t *data)
-{
-	const struct counter_desc *stats_desc;
-	unsigned int i, n, idx = 0;
-
-	stats_desc = get_tls_atomic_stats(priv);
-	n = mlx5e_tls_get_count(priv);
-
-	for (i = 0; i < n; i++)
-		strcpy(data + (idx++) * ETH_GSTRING_LEN,
-		       stats_desc[i].format);
-
-	return n;
-}
-
-int mlx5e_tls_get_stats(struct mlx5e_priv *priv, u64 *data)
-{
-	const struct counter_desc *stats_desc;
-	unsigned int i, n, idx = 0;
-
-	stats_desc = get_tls_atomic_stats(priv);
-	n = mlx5e_tls_get_count(priv);
-
-	for (i = 0; i < n; i++)
-		data[idx++] =
-		    MLX5E_READ_CTR_ATOMIC64(&priv->tls->sw_stats,
-					    stats_desc, i);
-
-	return n;
-}
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_main.c
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en_rx.c b/drivers/net/ethernet/mellanox/mlx5/core/en_rx.c
index 6181b0baf324..c253f502c943 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_rx.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_rx.c
@@ -51,7 +51,7 @@
 #include "accel/ipsec.h"
 #include "fpga/ipsec.h"
 #include "en_accel/ipsec_rxtx.h"
-#include "en_accel/tls_rxtx.h"
+#include "en_accel/ktls_txrx.h"
 #include "en/xdp.h"
 #include "en/xsk/rx.h"
 #include "en/health.h"
@@ -1414,7 +1414,8 @@ static inline void mlx5e_build_rx_skb(struct mlx5_cqe64 *cqe,
 
 	skb->mac_len = ETH_HLEN;
 
-	mlx5e_tls_handle_rx_skb(rq, skb, cqe, &cqe_bcnt);
+	if (unlikely(get_cqe_tls_offload(cqe)))
+		mlx5e_ktls_handle_rx_skb(rq, skb, cqe, &cqe_bcnt);
 
 	if (unlikely(mlx5_ipsec_is_rx_flow(cqe)))
 		mlx5e_ipsec_offload_handle_rx_skb(netdev, skb, cqe);
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en_stats.c b/drivers/net/ethernet/mellanox/mlx5/core/en_stats.c
index bdc870f9c2f3..5123a220d7a4 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_stats.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_stats.c
@@ -32,7 +32,7 @@
 
 #include "lib/mlx5.h"
 #include "en.h"
-#include "en_accel/tls.h"
+#include "en_accel/ktls.h"
 #include "en_accel/en_accel.h"
 #include "en/ptp.h"
 #include "en/port.h"
@@ -1900,17 +1900,17 @@ static MLX5E_DECLARE_STATS_GRP_OP_UPDATE_STATS(pme) { return; }
 
 static MLX5E_DECLARE_STATS_GRP_OP_NUM_STATS(tls)
 {
-	return mlx5e_tls_get_count(priv);
+	return mlx5e_ktls_get_count(priv);
 }
 
 static MLX5E_DECLARE_STATS_GRP_OP_FILL_STRS(tls)
 {
-	return idx + mlx5e_tls_get_strings(priv, data + idx * ETH_GSTRING_LEN);
+	return idx + mlx5e_ktls_get_strings(priv, data + idx * ETH_GSTRING_LEN);
 }
 
 static MLX5E_DECLARE_STATS_GRP_OP_FILL_STATS(tls)
 {
-	return idx + mlx5e_tls_get_stats(priv, data + idx);
+	return idx + mlx5e_ktls_get_stats(priv, data + idx);
 }
 
 static MLX5E_DECLARE_STATS_GRP_OP_UPDATE_STATS(tls) { return; }
