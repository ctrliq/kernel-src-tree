net: stmmac: add ethtool per-queue irq statistic support

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-477.10.1.el8_8
commit-author Vijayakannan Ayyathurai <vijayakannan.ayyathurai@intel.com>
commit af9bf70154eb5ad36d638eb3ab7aa1f834673b3a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-477.10.1.el8_8/af9bf701.failed

Adding ethtool per-queue statistics support to show number of interrupts
generated at DMA tx and DMA rx. All the counters are incremented at
dwmac4_dma_interrupt function.

	Signed-off-by: Vijayakannan Ayyathurai <vijayakannan.ayyathurai@intel.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit af9bf70154eb5ad36d638eb3ab7aa1f834673b3a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/stmicro/stmmac/common.h
#	drivers/net/ethernet/stmicro/stmmac/stmmac_ethtool.c
diff --cc drivers/net/ethernet/stmicro/stmmac/common.h
index 2f8e5961a08a,b6d945ea903d..000000000000
--- a/drivers/net/ethernet/stmicro/stmmac/common.h
+++ b/drivers/net/ethernet/stmicro/stmmac/common.h
@@@ -63,6 -58,16 +63,19 @@@
  #undef FRAME_FILTER_DEBUG
  /* #define FRAME_FILTER_DEBUG */
  
++<<<<<<< HEAD
++=======
+ struct stmmac_txq_stats {
+ 	unsigned long tx_pkt_n;
+ 	unsigned long tx_normal_irq_n;
+ };
+ 
+ struct stmmac_rxq_stats {
+ 	unsigned long rx_pkt_n;
+ 	unsigned long rx_normal_irq_n;
+ };
+ 
++>>>>>>> af9bf70154eb (net: stmmac: add ethtool per-queue irq statistic support)
  /* Extra statistic and debug information exposed by ethtool */
  struct stmmac_extra_stats {
  	/* Transmit errors */
diff --cc drivers/net/ethernet/stmicro/stmmac/stmmac_ethtool.c
index 718d3fc35773,595c3ccdcbb7..000000000000
--- a/drivers/net/ethernet/stmicro/stmmac/stmmac_ethtool.c
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac_ethtool.c
@@@ -271,6 -261,18 +271,21 @@@ static const struct stmmac_stats stmmac
  };
  #define STMMAC_MMC_STATS_LEN ARRAY_SIZE(stmmac_mmc)
  
++<<<<<<< HEAD
++=======
+ static const char stmmac_qstats_tx_string[][ETH_GSTRING_LEN] = {
+ 	"tx_pkt_n",
+ 	"tx_irq_n",
+ #define STMMAC_TXQ_STATS ARRAY_SIZE(stmmac_qstats_tx_string)
+ };
+ 
+ static const char stmmac_qstats_rx_string[][ETH_GSTRING_LEN] = {
+ 	"rx_pkt_n",
+ 	"rx_irq_n",
+ #define STMMAC_RXQ_STATS ARRAY_SIZE(stmmac_qstats_rx_string)
+ };
+ 
++>>>>>>> af9bf70154eb (net: stmmac: add ethtool per-queue irq statistic support)
  static void stmmac_ethtool_getdrvinfo(struct net_device *dev,
  				      struct ethtool_drvinfo *info)
  {
* Unmerged path drivers/net/ethernet/stmicro/stmmac/common.h
diff --git a/drivers/net/ethernet/stmicro/stmmac/dwmac4_lib.c b/drivers/net/ethernet/stmicro/stmmac/dwmac4_lib.c
index 5054133fe7a1..b3e58ec6c45b 100644
--- a/drivers/net/ethernet/stmicro/stmmac/dwmac4_lib.c
+++ b/drivers/net/ethernet/stmicro/stmmac/dwmac4_lib.c
@@ -177,10 +177,12 @@ int dwmac4_dma_interrupt(void __iomem *ioaddr,
 		x->normal_irq_n++;
 	if (likely(intr_status & DMA_CHAN_STATUS_RI)) {
 		x->rx_normal_irq_n++;
+		x->rxq_stats[chan].rx_normal_irq_n++;
 		ret |= handle_rx;
 	}
 	if (likely(intr_status & DMA_CHAN_STATUS_TI)) {
 		x->tx_normal_irq_n++;
+		x->txq_stats[chan].tx_normal_irq_n++;
 		ret |= handle_tx;
 	}
 	if (unlikely(intr_status & DMA_CHAN_STATUS_TBU))
* Unmerged path drivers/net/ethernet/stmicro/stmmac/stmmac_ethtool.c
