net: pcs: xpcs: add support for sgmii with no inband AN

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-477.10.1.el8_8
commit-author Vladimir Oltean <vladimir.oltean@nxp.com>
commit 2031c09e6d5f50d4c337da11efd1deb8279687d6
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-477.10.1.el8_8/2031c09e.failed

In fixed-link use cases, the XPCS can disable the clause 37 in-band
autoneg process, disable the "Automatic Speed Mode Change after CL37 AN"
setting, and force operation in a speed dictated by management.

Add support for this operating mode.

	Signed-off-by: Vladimir Oltean <vladimir.oltean@nxp.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 2031c09e6d5f50d4c337da11efd1deb8279687d6)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/pcs/pcs-xpcs.c
diff --cc drivers/net/pcs/pcs-xpcs.c
index e17e72175ebb,743b53734eeb..000000000000
--- a/drivers/net/pcs/pcs-xpcs.c
+++ b/drivers/net/pcs/pcs-xpcs.c
@@@ -753,7 -690,7 +753,11 @@@ int xpcs_config_eee(struct mdio_xpcs_ar
  }
  EXPORT_SYMBOL_GPL(xpcs_config_eee);
  
++<<<<<<< HEAD
 +static int xpcs_config_aneg_c37_sgmii(struct mdio_xpcs_args *xpcs)
++=======
+ static int xpcs_config_aneg_c37_sgmii(struct dw_xpcs *xpcs, unsigned int mode)
++>>>>>>> 2031c09e6d5f (net: pcs: xpcs: add support for sgmii with no inband AN)
  {
  	int ret;
  
@@@ -917,26 -898,58 +924,66 @@@ static int xpcs_get_state(struct mdio_x
  		break;
  	case DW_AN_C37_SGMII:
  		ret = xpcs_get_state_c37_sgmii(xpcs, state);
 -		if (ret) {
 -			pr_err("xpcs_get_state_c37_sgmii returned %pe\n",
 -			       ERR_PTR(ret));
 -		}
 +		if (ret)
 +			return ret;
  		break;
  	default:
 -		return;
 +		return -1;
  	}
 +
 +	return 0;
  }
  
++<<<<<<< HEAD
 +static int xpcs_link_up(struct mdio_xpcs_args *xpcs, int speed,
 +			phy_interface_t interface)
++=======
+ static void xpcs_link_up_sgmii(struct dw_xpcs *xpcs, unsigned int mode,
+ 			       int speed, int duplex)
+ {
+ 	int val, ret;
+ 
+ 	if (phylink_autoneg_inband(mode))
+ 		return;
+ 
+ 	switch (speed) {
+ 	case SPEED_1000:
+ 		val = BMCR_SPEED1000;
+ 		break;
+ 	case SPEED_100:
+ 		val = BMCR_SPEED100;
+ 		break;
+ 	case SPEED_10:
+ 		val = BMCR_SPEED10;
+ 		break;
+ 	default:
+ 		return;
+ 	}
+ 
+ 	if (duplex == DUPLEX_FULL)
+ 		val |= BMCR_FULLDPLX;
+ 
+ 	ret = xpcs_write(xpcs, MDIO_MMD_VEND2, MDIO_CTRL1, val);
+ 	if (ret)
+ 		pr_err("%s: xpcs_write returned %pe\n", __func__, ERR_PTR(ret));
+ }
+ 
+ static void xpcs_link_up(struct phylink_pcs *pcs, unsigned int mode,
+ 			 phy_interface_t interface, int speed, int duplex)
++>>>>>>> 2031c09e6d5f (net: pcs: xpcs: add support for sgmii with no inband AN)
  {
 -	struct dw_xpcs *xpcs = phylink_pcs_to_xpcs(pcs);
 -
  	if (interface == PHY_INTERFACE_MODE_USXGMII)
  		return xpcs_config_usxgmii(xpcs, speed);
++<<<<<<< HEAD
 +
 +	return 0;
++=======
+ 	if (interface == PHY_INTERFACE_MODE_SGMII)
+ 		return xpcs_link_up_sgmii(xpcs, mode, speed, duplex);
++>>>>>>> 2031c09e6d5f (net: pcs: xpcs: add support for sgmii with no inband AN)
  }
  
 -static u32 xpcs_get_id(struct dw_xpcs *xpcs)
 +static u32 xpcs_get_id(struct mdio_xpcs_args *xpcs)
  {
  	int ret;
  	u32 id;
* Unmerged path drivers/net/pcs/pcs-xpcs.c
