perf/x86/amd/core: Detect available counters

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-477.10.1.el8_8
commit-author Sandipan Das <sandipan.das@amd.com>
commit 56e026a7ca3f92b8e44359e1f705febd1833f701
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-477.10.1.el8_8/56e026a7.failed

If AMD Performance Monitoring Version 2 (PerfMonV2) is
supported, use CPUID leaf 0x80000022 EBX to detect the
number of Core PMCs. This offers more flexibility if the
counts change in later processor families.

	Signed-off-by: Sandipan Das <sandipan.das@amd.com>
	Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
Link: https://lkml.kernel.org/r/68a6d9688df189267db26530378870edd34f7b06.1650515382.git.sandipan.das@amd.com
(cherry picked from commit 56e026a7ca3f92b8e44359e1f705febd1833f701)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/events/amd/core.c
diff --cc arch/x86/events/amd/core.c
index fc84e3f05348,52fd7941a724..000000000000
--- a/arch/x86/events/amd/core.c
+++ b/arch/x86/events/amd/core.c
@@@ -937,8 -1138,55 +937,9 @@@ static __initconst const struct x86_pm
  	.amd_nb_constraints	= 1,
  };
  
 -static ssize_t branches_show(struct device *cdev,
 -			      struct device_attribute *attr,
 -			      char *buf)
 -{
 -	return snprintf(buf, PAGE_SIZE, "%d\n", x86_pmu.lbr_nr);
 -}
 -
 -static DEVICE_ATTR_RO(branches);
 -
 -static struct attribute *amd_pmu_brs_attrs[] = {
 -	&dev_attr_branches.attr,
 -	NULL,
 -};
 -
 -static umode_t
 -amd_brs_is_visible(struct kobject *kobj, struct attribute *attr, int i)
 -{
 -	return x86_pmu.lbr_nr ? attr->mode : 0;
 -}
 -
 -static struct attribute_group group_caps_amd_brs = {
 -	.name  = "caps",
 -	.attrs = amd_pmu_brs_attrs,
 -	.is_visible = amd_brs_is_visible,
 -};
 -
 -EVENT_ATTR_STR(branch-brs, amd_branch_brs,
 -	       "event=" __stringify(AMD_FAM19H_BRS_EVENT)"\n");
 -
 -static struct attribute *amd_brs_events_attrs[] = {
 -	EVENT_PTR(amd_branch_brs),
 -	NULL,
 -};
 -
 -static struct attribute_group group_events_amd_brs = {
 -	.name       = "events",
 -	.attrs      = amd_brs_events_attrs,
 -	.is_visible = amd_brs_is_visible,
 -};
 -
 -static const struct attribute_group *amd_attr_update[] = {
 -	&group_caps_amd_brs,
 -	&group_events_amd_brs,
 -	NULL,
 -};
 -
  static int __init amd_core_pmu_init(void)
  {
+ 	union cpuid_0x80000022_ebx ebx;
  	u64 even_ctr_mask = 0ULL;
  	int i;
  
@@@ -956,6 -1204,20 +957,23 @@@
  	x86_pmu.eventsel	= MSR_F15H_PERF_CTL;
  	x86_pmu.perfctr		= MSR_F15H_PERF_CTR;
  	x86_pmu.num_counters	= AMD64_NUM_COUNTERS_CORE;
++<<<<<<< HEAD
++=======
+ 
+ 	/* Check for Performance Monitoring v2 support */
+ 	if (boot_cpu_has(X86_FEATURE_PERFMON_V2)) {
+ 		ebx.full = cpuid_ebx(EXT_PERFMON_DEBUG_FEATURES);
+ 
+ 		/* Update PMU version for later usage */
+ 		x86_pmu.version = 2;
+ 
+ 		/* Find the number of available Core PMCs */
+ 		x86_pmu.num_counters = ebx.split.num_core_pmc;
+ 
+ 		amd_pmu_global_cntr_mask = (1ULL << x86_pmu.num_counters) - 1;
+ 	}
+ 
++>>>>>>> 56e026a7ca3f (perf/x86/amd/core: Detect available counters)
  	/*
  	 * AMD Core perfctr has separate MSRs for the NB events, see
  	 * the amd/uncore.c driver.
* Unmerged path arch/x86/events/amd/core.c
diff --git a/arch/x86/include/asm/perf_event.h b/arch/x86/include/asm/perf_event.h
index 4a0e00661c00..31c27e6a9420 100644
--- a/arch/x86/include/asm/perf_event.h
+++ b/arch/x86/include/asm/perf_event.h
@@ -184,6 +184,18 @@ union cpuid28_ecx {
 	unsigned int            full;
 };
 
+/*
+ * AMD "Extended Performance Monitoring and Debug" CPUID
+ * detection/enumeration details:
+ */
+union cpuid_0x80000022_ebx {
+	struct {
+		/* Number of Core Performance Counters */
+		unsigned int	num_core_pmc:4;
+	} split;
+	unsigned int		full;
+};
+
 struct x86_pmu_capability {
 	int		version;
 	int		num_counters_gp;
@@ -365,6 +377,11 @@ struct pebs_xmm {
 	u64 xmm[16*2];	/* two entries for each register */
 };
 
+/*
+ * AMD Extended Performance Monitoring and Debug cpuid feature detection
+ */
+#define EXT_PERFMON_DEBUG_FEATURES		0x80000022
+
 /*
  * IBS cpuid feature detection
  */
