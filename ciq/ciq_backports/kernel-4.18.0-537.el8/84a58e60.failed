net/mlx5: Dynamic cyclecounter shift calculation for PTP free running clock

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-537.el8
commit-author Rahul Rameshbabu <rrameshbabu@nvidia.com>
commit 84a58e60038fa0366006977dba85eae16b2e3d78
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-537.el8/84a58e60.failed

Use a dynamic calculation to determine the shift value for the internal
timer cyclecounter that will lead to the highest precision frequency
adjustments. Previously used a constant for the shift value assuming all
devices supported by the driver had a nominal frequency of 1GHz. However,
there are devices that operate at different frequencies. The previous shift
value constant would break the PHC functionality for those devices.

	Reported-by: Vadim Fedorenko <vadim.fedorenko@linux.dev>
Closes: https://lore.kernel.org/netdev/20230815151507.3028503-1-vadfed@meta.com/
Fixes: 6a4010927562 ("net/mlx5: Update cyclecounter shift value to improve ptp free running mode precision")
	Signed-off-by: Rahul Rameshbabu <rrameshbabu@nvidia.com>
	Tested-by: Vadim Fedorenko <vadim.fedorenko@linux.dev>
	Reviewed-by: Jacob Keller <jacob.e.keller@intel.com>
	Reviewed-by: Simon Horman <horms@kernel.org>
	Acked-by: Saeed Mahameed <saeedm@nvidia.com>
Link: https://lore.kernel.org/r/20230821230554.236210-1-rrameshbabu@nvidia.com
	Signed-off-by: Jakub Kicinski <kuba@kernel.org>
(cherry picked from commit 84a58e60038fa0366006977dba85eae16b2e3d78)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/lib/clock.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/lib/clock.c
index 66dadd6c5182,aa29f09e8356..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/lib/clock.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/lib/clock.c
@@@ -93,17 -90,48 +90,57 @@@ static bool mlx5_modify_mtutc_allowed(s
  	return MLX5_CAP_MCAM_FEATURE(mdev, ptpcyc2realtime_modify);
  }
  
++<<<<<<< HEAD
++=======
+ static u32 mlx5_ptp_shift_constant(u32 dev_freq_khz)
+ {
+ 	/* Optimal shift constant leads to corrections above just 1 scaled ppm.
+ 	 *
+ 	 * Two sets of equations are needed to derive the optimal shift
+ 	 * constant for the cyclecounter.
+ 	 *
+ 	 *    dev_freq_khz * 1000 / 2^shift_constant = 1 scaled_ppm
+ 	 *    ppb = scaled_ppm * 1000 / 2^16
+ 	 *
+ 	 * Using the two equations together
+ 	 *
+ 	 *    dev_freq_khz * 1000 / 1 scaled_ppm = 2^shift_constant
+ 	 *    dev_freq_khz * 2^16 / 1 ppb = 2^shift_constant
+ 	 *    dev_freq_khz = 2^(shift_constant - 16)
+ 	 *
+ 	 * then yields
+ 	 *
+ 	 *    shift_constant = ilog2(dev_freq_khz) + 16
+ 	 */
+ 
+ 	return min(ilog2(dev_freq_khz) + 16,
+ 		   ilog2((U32_MAX / NSEC_PER_MSEC) * dev_freq_khz));
+ }
+ 
+ static s32 mlx5_ptp_getmaxphase(struct ptp_clock_info *ptp)
+ {
+ 	struct mlx5_clock *clock = container_of(ptp, struct mlx5_clock, ptp_info);
+ 	struct mlx5_core_dev *mdev;
+ 
+ 	mdev = container_of(clock, struct mlx5_core_dev, clock);
+ 
+ 	return MLX5_CAP_MCAM_FEATURE(mdev, mtutc_time_adjustment_extended_range) ?
+ 		       MLX5_MTUTC_OPERATION_ADJUST_TIME_EXTENDED_MAX :
+ 			     MLX5_MTUTC_OPERATION_ADJUST_TIME_MAX;
+ }
+ 
++>>>>>>> 84a58e60038f (net/mlx5: Dynamic cyclecounter shift calculation for PTP free running clock)
  static bool mlx5_is_mtutc_time_adj_cap(struct mlx5_core_dev *mdev, s64 delta)
  {
 -	s64 max = mlx5_ptp_getmaxphase(&mdev->clock.ptp_info);
 +	s64 min = MLX5_MTUTC_OPERATION_ADJUST_TIME_MIN;
 +	s64 max = MLX5_MTUTC_OPERATION_ADJUST_TIME_MAX;
  
 -	if (delta < -max || delta > max)
 +	if (MLX5_CAP_MCAM_FEATURE(mdev, mtutc_time_adjustment_extended_range)) {
 +		min = MLX5_MTUTC_OPERATION_ADJUST_TIME_EXTENDED_MIN;
 +		max = MLX5_MTUTC_OPERATION_ADJUST_TIME_EXTENDED_MAX;
 +	}
 +
 +	if (delta < min || delta > max)
  		return false;
  
  	return true;
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/lib/clock.c
