iommu/vt-d: Remove PASID supervisor request support

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-537.el8
commit-author Jacob Pan <jacob.jun.pan@linux.intel.com>
commit 113a031becc8a1b904d7fd873fb3d329f203d2f0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-537.el8/113a031b.failed

There's no more usage, remove PASID supervisor support.

	Suggested-by: Lu Baolu <baolu.lu@linux.intel.com>
	Reviewed-by: Lu Baolu <baolu.lu@linux.intel.com>
	Signed-off-by: Jacob Pan <jacob.jun.pan@linux.intel.com>
Link: https://lore.kernel.org/r/20230331231137.1947675-3-jacob.jun.pan@linux.intel.com
	Signed-off-by: Lu Baolu <baolu.lu@linux.intel.com>
	Signed-off-by: Joerg Roedel <jroedel@suse.de>
(cherry picked from commit 113a031becc8a1b904d7fd873fb3d329f203d2f0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/iommu/intel/pasid.c
diff --cc drivers/iommu/intel/pasid.c
index 1385f79d1e5a,c5d479770e12..000000000000
--- a/drivers/iommu/intel/pasid.c
+++ b/drivers/iommu/intel/pasid.c
@@@ -535,39 -512,31 +526,52 @@@ int intel_pasid_setup_first_level(struc
  		return -EINVAL;
  	}
  
++<<<<<<< HEAD
++=======
+ 	if ((flags & PASID_FLAG_FL5LP) && !cap_fl5lp_support(iommu->cap)) {
+ 		pr_err("No 5-level paging support for first-level on %s\n",
+ 		       iommu->name);
+ 		return -EINVAL;
+ 	}
+ 
+ 	spin_lock(&iommu->lock);
++>>>>>>> 113a031becc8 (iommu/vt-d: Remove PASID supervisor request support)
  	pte = intel_pasid_get_entry(dev, pasid);
 -	if (!pte) {
 -		spin_unlock(&iommu->lock);
 -		return -ENODEV;
 -	}
 +	if (WARN_ON(!pte))
 +		return -EINVAL;
  
 -	if (pasid_pte_is_present(pte)) {
 -		spin_unlock(&iommu->lock);
 +	/* Caller must ensure PASID entry is not in use. */
 +	if (pasid_pte_is_present(pte))
  		return -EBUSY;
 -	}
  
  	pasid_clear_entry(pte);
  
  	/* Setup the first level page table pointer: */
  	pasid_set_flptr(pte, (u64)__pa(pgd));
++<<<<<<< HEAD
 +	if (flags & PASID_FLAG_SUPERVISOR_MODE) {
 +		if (!ecap_srs(iommu->ecap)) {
 +			pr_err("No supervisor request support on %s\n",
 +			       iommu->name);
 +			return -EINVAL;
 +		}
 +		pasid_set_sre(pte);
 +		if (pasid_enable_wpe(pte))
 +			return -EINVAL;
  
 -	if (flags & PASID_FLAG_FL5LP)
 -		pasid_set_flpm(pte, 1);
 +	}
++=======
++>>>>>>> 113a031becc8 (iommu/vt-d: Remove PASID supervisor request support)
 +
 +	if (flags & PASID_FLAG_FL5LP) {
 +		if (cap_5lp_support(iommu->cap)) {
 +			pasid_set_flpm(pte, 1);
 +		} else {
 +			pr_err("No 5-level paging support for first-level\n");
 +			pasid_clear_entry(pte);
 +			return -EINVAL;
 +		}
 +	}
  
  	if (flags & PASID_FLAG_PAGE_SNOOP)
  		pasid_set_pgsnp(pte);
@@@ -655,16 -628,9 +659,19 @@@ int intel_pasid_setup_second_level(stru
  	pasid_set_fault_enable(pte);
  	pasid_set_page_snoop(pte, !!ecap_smpwc(iommu->ecap));
  
 -	pasid_set_present(pte);
 -	spin_unlock(&iommu->lock);
++<<<<<<< HEAD
 +	if (domain->domain.type == IOMMU_DOMAIN_UNMANAGED)
 +		pasid_set_pgsnp(pte);
  
 +	/*
 +	 * Since it is a second level only translation setup, we should
 +	 * set SRE bit as well (addresses are expected to be GPAs).
 +	 */
 +	if (pasid != PASID_RID2PASID && ecap_srs(iommu->ecap))
 +		pasid_set_sre(pte);
++=======
++>>>>>>> 113a031becc8 (iommu/vt-d: Remove PASID supervisor request support)
 +	pasid_set_present(pte);
  	pasid_flush_caches(iommu, pte, pasid, did);
  
  	return 0;
@@@ -696,14 -664,9 +703,7 @@@ int intel_pasid_setup_pass_through(stru
  	pasid_set_translation_type(pte, PASID_ENTRY_PGTT_PT);
  	pasid_set_fault_enable(pte);
  	pasid_set_page_snoop(pte, !!ecap_smpwc(iommu->ecap));
- 
- 	/*
- 	 * We should set SRE bit as well since the addresses are expected
- 	 * to be GPAs.
- 	 */
- 	if (ecap_srs(iommu->ecap))
- 		pasid_set_sre(pte);
  	pasid_set_present(pte);
 -	spin_unlock(&iommu->lock);
 -
  	pasid_flush_caches(iommu, pte, pasid, did);
  
  	return 0;
* Unmerged path drivers/iommu/intel/pasid.c
diff --git a/drivers/iommu/intel/pasid.h b/drivers/iommu/intel/pasid.h
index 3d62d84aced4..fedae84027ab 100644
--- a/drivers/iommu/intel/pasid.h
+++ b/drivers/iommu/intel/pasid.h
@@ -40,13 +40,6 @@
  */
 #define FLPT_DEFAULT_DID		1
 
-/*
- * The SUPERVISOR_MODE flag indicates a first level translation which
- * can be used for access to kernel addresses. It is valid only for
- * access to the kernel's static 1:1 mapping of physical memory â€” not
- * to vmalloc or even module mappings.
- */
-#define PASID_FLAG_SUPERVISOR_MODE	BIT(0)
 #define PASID_FLAG_NESTED		BIT(1)
 #define PASID_FLAG_PAGE_SNOOP		BIT(2)
 
