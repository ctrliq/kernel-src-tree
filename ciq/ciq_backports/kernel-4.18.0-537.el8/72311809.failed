swiotlb: clean up some coding style and minor issues

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-537.el8
commit-author Tianyu Lan <tiala@microsoft.com>
commit 72311809031217714e635b24f8478e6ecb0d93d9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-537.el8/72311809.failed

- Fix the used field of struct io_tlb_area wasn't initialized
- Set area number to be 0 if input area number parameter is 0
- Use array_size() to calculate io_tlb_area array size
- Make parameters of swiotlb_do_find_slots() more reasonable

Fixes: 26ffb91fa5e0 ("swiotlb: split up the global swiotlb lock")
	Signed-off-by: Tianyu Lan <tiala@microsoft.com>
	Reviewed-by: Michael Kelley <mikelley@microsoft.com>
	Signed-off-by: Christoph Hellwig <hch@lst.de>
(cherry picked from commit 72311809031217714e635b24f8478e6ecb0d93d9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/dma/swiotlb.c
diff --cc kernel/dma/swiotlb.c
index 2f75af589723,cc50f1fb127f..000000000000
--- a/kernel/dma/swiotlb.c
+++ b/kernel/dma/swiotlb.c
@@@ -314,19 -357,15 +318,26 @@@ void __init swiotlb_init_remap(bool add
  	}
  
  	alloc_size = PAGE_ALIGN(array_size(sizeof(*mem->slots), nslabs));
 -	mem->slots = memblock_alloc(alloc_size, PAGE_SIZE);
 -	if (!mem->slots)
 -		panic("%s: Failed to allocate %zu bytes align=0x%lx\n",
 -		      __func__, alloc_size, PAGE_SIZE);
 +	mem->slots = memblock_alloc_nopanic(alloc_size, PAGE_SIZE);
 +	if (!mem->slots) {
 +		pr_warn("%s: Failed to allocate %zu bytes align=0x%lx\n",
 +			__func__, alloc_size, PAGE_SIZE);
 +		return;
 +	}
  
++<<<<<<< HEAD
 +	mem->areas = memblock_alloc_nopanic(array_size(sizeof(struct io_tlb_area),
 +		default_nareas), SMP_CACHE_BYTES);
 +	if (!mem->areas) {
 +		pr_warn("%s: Failed to allocate mem->areas.\n", __func__);
 +		return;
 +	}
++=======
+ 	mem->areas = memblock_alloc(array_size(sizeof(struct io_tlb_area),
+ 		default_nareas), SMP_CACHE_BYTES);
+ 	if (!mem->areas)
+ 		panic("%s: Failed to allocate mem->areas.\n", __func__);
++>>>>>>> 723118090312 (swiotlb: clean up some coding style and minor issues)
  
  	swiotlb_init_io_tlb_mem(mem, __pa(tlb), nslabs, flags, false,
  				default_nareas);
diff --git a/Documentation/admin-guide/kernel-parameters.txt b/Documentation/admin-guide/kernel-parameters.txt
index cbd8b762dc71..4cb0c8f9d7b0 100644
--- a/Documentation/admin-guide/kernel-parameters.txt
+++ b/Documentation/admin-guide/kernel-parameters.txt
@@ -5342,7 +5342,8 @@
 			Format: { <int> [,<int>] | force | noforce }
 			<int> -- Number of I/O TLB slabs
 			<int> -- Second integer after comma. Number of swiotlb
-				 areas with their own lock. Must be power of 2.
+				 areas with their own lock. Will be rounded up
+				 to a power of 2.
 			force -- force using of bounce buffers even if they
 			         wouldn't be automatically used by the kernel
 			noforce -- Never use bounce buffers (for debugging)
* Unmerged path kernel/dma/swiotlb.c
