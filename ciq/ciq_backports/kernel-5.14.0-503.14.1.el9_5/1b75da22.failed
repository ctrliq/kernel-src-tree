net/mlx5: Always drain health in shutdown callback

jira LE-2157
cve CVE-2024-43866
Rebuild_History Non-Buildable kernel-5.14.0-503.14.1.el9_5
commit-author Shay Drory <shayd@nvidia.com>
commit 1b75da22ed1e6171e261bc9265370162553d5393
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-5.14.0-503.14.1.el9_5/1b75da22.failed

There is no point in recovery during device shutdown. if health
work started need to wait for it to avoid races and NULL pointer
access.

Hence, drain health WQ on shutdown callback.

Fixes: 1958fc2f0712 ("net/mlx5: SF, Add auxiliary device driver")
Fixes: d2aa060d40fa ("net/mlx5: Cancel health poll before sending panic teardown command")
	Signed-off-by: Shay Drory <shayd@nvidia.com>
	Reviewed-by: Moshe Shemesh <moshe@nvidia.com>
	Signed-off-by: Tariq Toukan <tariqt@nvidia.com>
	Reviewed-by: Wojciech Drewek <wojciech.drewek@intel.com>
Link: https://patch.msgid.link/20240730061638.1831002-2-tariqt@nvidia.com
	Signed-off-by: Jakub Kicinski <kuba@kernel.org>
(cherry picked from commit 1b75da22ed1e6171e261bc9265370162553d5393)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/sf/dev/driver.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/sf/dev/driver.c
index 5c054a0005dd,b706f1486504..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/sf/dev/driver.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/sf/dev/driver.c
@@@ -106,8 -109,11 +106,14 @@@ static void mlx5_sf_dev_remove(struct a
  static void mlx5_sf_dev_shutdown(struct auxiliary_device *adev)
  {
  	struct mlx5_sf_dev *sf_dev = container_of(adev, struct mlx5_sf_dev, adev);
 -	struct mlx5_core_dev *mdev = sf_dev->mdev;
  
++<<<<<<< HEAD
 +	mlx5_unload_one(sf_dev->mdev, false);
++=======
+ 	set_bit(MLX5_BREAK_FW_WAIT, &mdev->intf_state);
+ 	mlx5_drain_health_wq(mdev);
+ 	mlx5_unload_one(mdev, false);
++>>>>>>> 1b75da22ed1e (net/mlx5: Always drain health in shutdown callback)
  }
  
  static const struct auxiliary_device_id mlx5_sf_dev_id_table[] = {
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/main.c b/drivers/net/ethernet/mellanox/mlx5/core/main.c
index 8152cba96786..c00e0f67c971 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/main.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/main.c
@@ -2140,7 +2140,6 @@ static int mlx5_try_fast_unload(struct mlx5_core_dev *dev)
 	/* Panic tear down fw command will stop the PCI bus communication
 	 * with the HCA, so the health poll is no longer needed.
 	 */
-	mlx5_drain_health_wq(dev);
 	mlx5_stop_health_poll(dev, false);
 
 	ret = mlx5_cmd_fast_teardown_hca(dev);
@@ -2175,6 +2174,7 @@ static void shutdown(struct pci_dev *pdev)
 
 	mlx5_core_info(dev, "Shutdown was called\n");
 	set_bit(MLX5_BREAK_FW_WAIT, &dev->intf_state);
+	mlx5_drain_health_wq(dev);
 	err = mlx5_try_fast_unload(dev);
 	if (err)
 		mlx5_unload_one(dev, false);
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/sf/dev/driver.c
