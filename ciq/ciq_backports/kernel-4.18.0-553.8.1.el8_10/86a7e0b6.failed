net: prevent rewrite of msg_name in sock_sendmsg()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-553.8.1.el8_10
commit-author Jordan Rife <jrife@google.com>
commit 86a7e0b69bd5b812e48a20c66c2161744f3caa16
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-553.8.1.el8_10/86a7e0b6.failed

Callers of sock_sendmsg(), and similarly kernel_sendmsg(), in kernel
space may observe their value of msg_name change in cases where BPF
sendmsg hooks rewrite the send address. This has been confirmed to break
NFS mounts running in UDP mode and has the potential to break other
systems.

This patch:

1) Creates a new function called __sock_sendmsg() with same logic as the
   old sock_sendmsg() function.
2) Replaces calls to sock_sendmsg() made by __sys_sendto() and
   __sys_sendmsg() with __sock_sendmsg() to avoid an unnecessary copy,
   as these system calls are already protected.
3) Modifies sock_sendmsg() so that it makes a copy of msg_name if
   present before passing it down the stack to insulate callers from
   changes to the send address.

Link: https://lore.kernel.org/netdev/20230912013332.2048422-1-jrife@google.com/
Fixes: 1cedee13d25a ("bpf: Hooks for sys_sendmsg")
	Cc: stable@vger.kernel.org
	Reviewed-by: Willem de Bruijn <willemb@google.com>
	Signed-off-by: Jordan Rife <jrife@google.com>
	Reviewed-by: Simon Horman <horms@kernel.org>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 86a7e0b69bd5b812e48a20c66c2161744f3caa16)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/socket.c
diff --cc net/socket.c
index e69fd02a179d,a39ec136f5cf..000000000000
--- a/net/socket.c
+++ b/net/socket.c
@@@ -651,6 -714,37 +651,40 @@@ void __sock_tx_timestamp(__u16 tsflags
  }
  EXPORT_SYMBOL(__sock_tx_timestamp);
  
++<<<<<<< HEAD
++=======
+ INDIRECT_CALLABLE_DECLARE(int inet_sendmsg(struct socket *, struct msghdr *,
+ 					   size_t));
+ INDIRECT_CALLABLE_DECLARE(int inet6_sendmsg(struct socket *, struct msghdr *,
+ 					    size_t));
+ 
+ static noinline void call_trace_sock_send_length(struct sock *sk, int ret,
+ 						 int flags)
+ {
+ 	trace_sock_send_length(sk, ret, 0);
+ }
+ 
+ static inline int sock_sendmsg_nosec(struct socket *sock, struct msghdr *msg)
+ {
+ 	int ret = INDIRECT_CALL_INET(READ_ONCE(sock->ops)->sendmsg, inet6_sendmsg,
+ 				     inet_sendmsg, sock, msg,
+ 				     msg_data_left(msg));
+ 	BUG_ON(ret == -EIOCBQUEUED);
+ 
+ 	if (trace_sock_send_length_enabled())
+ 		call_trace_sock_send_length(sock->sk, ret, 0);
+ 	return ret;
+ }
+ 
+ static int __sock_sendmsg(struct socket *sock, struct msghdr *msg)
+ {
+ 	int err = security_socket_sendmsg(sock, msg,
+ 					  msg_data_left(msg));
+ 
+ 	return err ?: sock_sendmsg_nosec(sock, msg);
+ }
+ 
++>>>>>>> 86a7e0b69bd5 (net: prevent rewrite of msg_name in sock_sendmsg())
  /**
   *	sock_sendmsg - send a message through @sock
   *	@sock: socket
@@@ -659,23 -753,21 +693,32 @@@
   *	Sends @msg through @sock, passing through LSM.
   *	Returns the number of bytes sent, or an error code.
   */
 +
 +INDIRECT_CALLABLE_DECLARE(int inet_sendmsg(struct socket *, struct msghdr *,
 +					   size_t));
 +static inline int sock_sendmsg_nosec(struct socket *sock, struct msghdr *msg)
 +{
 +	int ret = INDIRECT_CALL_INET4(sock->ops->sendmsg, inet_sendmsg, sock,
 +				      msg, msg_data_left(msg));
 +	BUG_ON(ret == -EIOCBQUEUED);
 +	return ret;
 +}
 +
  int sock_sendmsg(struct socket *sock, struct msghdr *msg)
  {
- 	int err = security_socket_sendmsg(sock, msg,
- 					  msg_data_left(msg));
+ 	struct sockaddr_storage *save_addr = (struct sockaddr_storage *)msg->msg_name;
+ 	struct sockaddr_storage address;
+ 	int ret;
  
- 	return err ?: sock_sendmsg_nosec(sock, msg);
+ 	if (msg->msg_name) {
+ 		memcpy(&address, msg->msg_name, msg->msg_namelen);
+ 		msg->msg_name = &address;
+ 	}
+ 
+ 	ret = __sock_sendmsg(sock, msg);
+ 	msg->msg_name = save_addr;
+ 
+ 	return ret;
  }
  EXPORT_SYMBOL(sock_sendmsg);
  
* Unmerged path net/socket.c
