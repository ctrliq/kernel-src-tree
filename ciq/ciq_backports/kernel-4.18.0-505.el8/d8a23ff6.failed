ice: Change ice_vsi_realloc_stat_arrays() to void

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-505.el8
commit-author Tony Nguyen <anthony.l.nguyen@intel.com>
commit d8a23ff6a755eccbebfa1b5173a951cfdd088c8c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-505.el8/d8a23ff6.failed

smatch reports:

smatch warnings:
drivers/net/ethernet/intel/ice/ice_lib.c:3612 ice_vsi_rebuild() warn: missing error code 'ret'

If an error is encountered for ice_vsi_realloc_stat_arrays(), ret is not
assigned an error value so the goto error path would return success. The
function, however, only returns 0 so an error will never be reported; due
to this, change the function to return void.

	Reported-by: kernel test robot <lkp@intel.com>
	Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
	Tested-by: Gurucharan G <gurucharanx.g@intel.com> (A Contingent worker at Intel)
(cherry picked from commit d8a23ff6a755eccbebfa1b5173a951cfdd088c8c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/intel/ice/ice_lib.c
diff --cc drivers/net/ethernet/intel/ice/ice_lib.c
index dc99c12b0643,8cfc30fc9840..000000000000
--- a/drivers/net/ethernet/intel/ice/ice_lib.c
+++ b/drivers/net/ethernet/intel/ice/ice_lib.c
@@@ -3207,9 -3421,51 +3207,51 @@@ ice_vsi_rebuild_set_coalesce(struct ice
  }
  
  /**
++<<<<<<< HEAD
++=======
+  * ice_vsi_realloc_stat_arrays - Frees unused stat structures
+  * @vsi: VSI pointer
+  * @prev_txq: Number of Tx rings before ring reallocation
+  * @prev_rxq: Number of Rx rings before ring reallocation
+  */
+ static void
+ ice_vsi_realloc_stat_arrays(struct ice_vsi *vsi, int prev_txq, int prev_rxq)
+ {
+ 	struct ice_vsi_stats *vsi_stat;
+ 	struct ice_pf *pf = vsi->back;
+ 	int i;
+ 
+ 	if (!prev_txq || !prev_rxq)
+ 		return;
+ 	if (vsi->type == ICE_VSI_CHNL)
+ 		return;
+ 
+ 	vsi_stat = pf->vsi_stats[vsi->idx];
+ 
+ 	if (vsi->num_txq < prev_txq) {
+ 		for (i = vsi->num_txq; i < prev_txq; i++) {
+ 			if (vsi_stat->tx_ring_stats[i]) {
+ 				kfree_rcu(vsi_stat->tx_ring_stats[i], rcu);
+ 				WRITE_ONCE(vsi_stat->tx_ring_stats[i], NULL);
+ 			}
+ 		}
+ 	}
+ 
+ 	if (vsi->num_rxq < prev_rxq) {
+ 		for (i = vsi->num_rxq; i < prev_rxq; i++) {
+ 			if (vsi_stat->rx_ring_stats[i]) {
+ 				kfree_rcu(vsi_stat->rx_ring_stats[i], rcu);
+ 				WRITE_ONCE(vsi_stat->rx_ring_stats[i], NULL);
+ 			}
+ 		}
+ 	}
+ }
+ 
+ /**
++>>>>>>> d8a23ff6a755 (ice: Change ice_vsi_realloc_stat_arrays() to void)
   * ice_vsi_rebuild - Rebuild VSI after reset
   * @vsi: VSI to be rebuild
 - * @vsi_flags: flags used for VSI rebuild flow
 - *
 - * Set vsi_flags to ICE_VSI_FLAG_INIT to initialize a new VSI, or
 - * ICE_VSI_FLAG_NO_INIT to rebuild an existing VSI in hardware.
 + * @init_vsi: is this an initialization or a reconfigure of the VSI
   *
   * Returns 0 on success and negative value on failure
   */
@@@ -3392,6 -3511,10 +3434,12 @@@ int ice_vsi_rebuild(struct ice_vsi *vsi
  			return ice_schedule_reset(pf, ICE_RESET_PFR);
  		}
  	}
++<<<<<<< HEAD
++=======
+ 
+ 	ice_vsi_realloc_stat_arrays(vsi, prev_txq, prev_rxq);
+ 
++>>>>>>> d8a23ff6a755 (ice: Change ice_vsi_realloc_stat_arrays() to void)
  	ice_vsi_rebuild_set_coalesce(vsi, coalesce, prev_num_q_vectors);
  	kfree(coalesce);
  
* Unmerged path drivers/net/ethernet/intel/ice/ice_lib.c
