ice: Remove excess space

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-505.el8
commit-author Tony Nguyen <anthony.l.nguyen@intel.com>
commit d52a6180c7466a3520ee42ae56315ee12a097e87
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-505.el8/d52a6180.failed

smatch reports inconsistent indenting due to an extra space; remove it to
resolve the issue.

smatch warnings:
drivers/net/ethernet/intel/ice/ice_lib.c:1673 ice_vsi_alloc_ring_stats() warn: inconsistent indenting

	Reported-by: kernel test robot <lkp@intel.com>
	Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
(cherry picked from commit d52a6180c7466a3520ee42ae56315ee12a097e87)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/intel/ice/ice_lib.c
diff --cc drivers/net/ethernet/intel/ice/ice_lib.c
index 5a7867ad1ffd,8316037b5548..000000000000
--- a/drivers/net/ethernet/intel/ice/ice_lib.c
+++ b/drivers/net/ethernet/intel/ice/ice_lib.c
@@@ -1536,6 -1584,106 +1536,109 @@@ err_out
  }
  
  /**
++<<<<<<< HEAD
++=======
+  * ice_vsi_free_stats - Free the ring statistics structures
+  * @vsi: VSI pointer
+  */
+ static void ice_vsi_free_stats(struct ice_vsi *vsi)
+ {
+ 	struct ice_vsi_stats *vsi_stat;
+ 	struct ice_pf *pf = vsi->back;
+ 	int i;
+ 
+ 	if (vsi->type == ICE_VSI_CHNL)
+ 		return;
+ 	if (!pf->vsi_stats)
+ 		return;
+ 
+ 	vsi_stat = pf->vsi_stats[vsi->idx];
+ 	if (!vsi_stat)
+ 		return;
+ 
+ 	ice_for_each_alloc_txq(vsi, i) {
+ 		if (vsi_stat->tx_ring_stats[i]) {
+ 			kfree_rcu(vsi_stat->tx_ring_stats[i], rcu);
+ 			WRITE_ONCE(vsi_stat->tx_ring_stats[i], NULL);
+ 		}
+ 	}
+ 
+ 	ice_for_each_alloc_rxq(vsi, i) {
+ 		if (vsi_stat->rx_ring_stats[i]) {
+ 			kfree_rcu(vsi_stat->rx_ring_stats[i], rcu);
+ 			WRITE_ONCE(vsi_stat->rx_ring_stats[i], NULL);
+ 		}
+ 	}
+ 
+ 	kfree(vsi_stat->tx_ring_stats);
+ 	kfree(vsi_stat->rx_ring_stats);
+ 	kfree(vsi_stat);
+ 	pf->vsi_stats[vsi->idx] = NULL;
+ }
+ 
+ /**
+  * ice_vsi_alloc_ring_stats - Allocates Tx and Rx ring stats for the VSI
+  * @vsi: VSI which is having stats allocated
+  */
+ static int ice_vsi_alloc_ring_stats(struct ice_vsi *vsi)
+ {
+ 	struct ice_ring_stats **tx_ring_stats;
+ 	struct ice_ring_stats **rx_ring_stats;
+ 	struct ice_vsi_stats *vsi_stats;
+ 	struct ice_pf *pf = vsi->back;
+ 	u16 i;
+ 
+ 	vsi_stats = pf->vsi_stats[vsi->idx];
+ 	tx_ring_stats = vsi_stats->tx_ring_stats;
+ 	rx_ring_stats = vsi_stats->rx_ring_stats;
+ 
+ 	/* Allocate Tx ring stats */
+ 	ice_for_each_alloc_txq(vsi, i) {
+ 		struct ice_ring_stats *ring_stats;
+ 		struct ice_tx_ring *ring;
+ 
+ 		ring = vsi->tx_rings[i];
+ 		ring_stats = tx_ring_stats[i];
+ 
+ 		if (!ring_stats) {
+ 			ring_stats = kzalloc(sizeof(*ring_stats), GFP_KERNEL);
+ 			if (!ring_stats)
+ 				goto err_out;
+ 
+ 			WRITE_ONCE(tx_ring_stats[i], ring_stats);
+ 		}
+ 
+ 		ring->ring_stats = ring_stats;
+ 	}
+ 
+ 	/* Allocate Rx ring stats */
+ 	ice_for_each_alloc_rxq(vsi, i) {
+ 		struct ice_ring_stats *ring_stats;
+ 		struct ice_rx_ring *ring;
+ 
+ 		ring = vsi->rx_rings[i];
+ 		ring_stats = rx_ring_stats[i];
+ 
+ 		if (!ring_stats) {
+ 			ring_stats = kzalloc(sizeof(*ring_stats), GFP_KERNEL);
+ 			if (!ring_stats)
+ 				goto err_out;
+ 
+ 			WRITE_ONCE(rx_ring_stats[i], ring_stats);
+ 		}
+ 
+ 		ring->ring_stats = ring_stats;
+ 	}
+ 
+ 	return 0;
+ 
+ err_out:
+ 	ice_vsi_free_stats(vsi);
+ 	return -ENOMEM;
+ }
+ 
+ /**
++>>>>>>> d52a6180c746 (ice: Remove excess space)
   * ice_vsi_manage_rss_lut - disable/enable RSS
   * @vsi: the VSI being changed
   * @ena: boolean value indicating if this is an enable or disable request
* Unmerged path drivers/net/ethernet/intel/ice/ice_lib.c
