intel: Simplify bool conversion

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-505.el8
commit-author Yang Li <yang.lee@linux.alibaba.com>
commit 3c6f3ae3bb2e5b2b67db324c100f29f7f56fad98
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-505.el8/3c6f3ae3.failed

Fix the following coccicheck warning:
./drivers/net/ethernet/intel/i40e/i40e_xsk.c:229:35-40: WARNING:
conversion to bool not needed here
./drivers/net/ethernet/intel/ice/ice_xsk.c:399:35-40: WARNING:
conversion to bool not needed here

	Reported-by: Abaci Robot <abaci@linux.alibaba.com>
	Signed-off-by: Yang Li <yang.lee@linux.alibaba.com>
	Tested-by: Tony Brelinski <tony.brelinski@intel.com>
	Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
(cherry picked from commit 3c6f3ae3bb2e5b2b67db324c100f29f7f56fad98)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/intel/i40e/i40e_xsk.c
#	drivers/net/ethernet/intel/ice/ice_xsk.c
diff --cc drivers/net/ethernet/intel/i40e/i40e_xsk.c
index 51ce422d0e5d,ea06e957393e..000000000000
--- a/drivers/net/ethernet/intel/i40e/i40e_xsk.c
+++ b/drivers/net/ethernet/intel/i40e/i40e_xsk.c
@@@ -263,24 -212,21 +263,39 @@@ bool i40e_alloc_rx_buffers_zc(struct i4
  		rx_desc->read.hdr_addr = 0;
  
  		rx_desc++;
 -		xdp++;
 +		bi++;
 +		ntu++;
 +
 +		if (unlikely(ntu == rx_ring->count)) {
 +			rx_desc = I40E_RX_DESC(rx_ring, 0);
 +			bi = i40e_rx_bi(rx_ring, 0);
 +			ntu = 0;
 +		}
 +	} while (--count);
 +
 +no_buffers:
 +	if (rx_ring->next_to_use != ntu) {
 +		/* clear the status bits for the next_to_use descriptor */
 +		rx_desc->wb.qword1.status_error_len = 0;
 +		i40e_release_rx_desc(rx_ring, ntu);
  	}
  
++<<<<<<< HEAD
 +	return ok;
++=======
+ 	ntu += nb_buffs;
+ 	if (ntu == rx_ring->count) {
+ 		rx_desc = I40E_RX_DESC(rx_ring, 0);
+ 		xdp = i40e_rx_bi(rx_ring, 0);
+ 		ntu = 0;
+ 	}
+ 
+ 	/* clear the status bits for the next_to_use descriptor */
+ 	rx_desc->wb.qword1.status_error_len = 0;
+ 	i40e_release_rx_desc(rx_ring, ntu);
+ 
+ 	return count == nb_buffs;
++>>>>>>> 3c6f3ae3bb2e (intel: Simplify bool conversion)
  }
  
  /**
diff --cc drivers/net/ethernet/intel/ice/ice_xsk.c
index 71d9a26e480a,ff55cb415b11..000000000000
--- a/drivers/net/ethernet/intel/ice/ice_xsk.c
+++ b/drivers/net/ethernet/intel/ice/ice_xsk.c
@@@ -460,22 -386,20 +460,37 @@@ bool ice_alloc_rx_bufs_zc(struct ice_rx
  
  		rx_desc++;
  		xdp++;
 +		ntu++;
 +
 +		if (unlikely(ntu == rx_ring->count)) {
 +			rx_desc = ICE_RX_DESC(rx_ring, 0);
 +			xdp = rx_ring->xdp_buf;
 +			ntu = 0;
 +		}
 +	} while (--count);
 +
 +	if (rx_ring->next_to_use != ntu) {
 +		/* clear the status bits for the next_to_use descriptor */
 +		rx_desc->wb.status_error0 = 0;
 +		ice_release_rx_desc(rx_ring, ntu);
  	}
  
++<<<<<<< HEAD
 +	return ok;
++=======
+ 	ntu += nb_buffs;
+ 	if (ntu == rx_ring->count) {
+ 		rx_desc = ICE_RX_DESC(rx_ring, 0);
+ 		xdp = rx_ring->xdp_buf;
+ 		ntu = 0;
+ 	}
+ 
+ 	/* clear the status bits for the next_to_use descriptor */
+ 	rx_desc->wb.status_error0 = 0;
+ 	ice_release_rx_desc(rx_ring, ntu);
+ 
+ 	return count == nb_buffs;
++>>>>>>> 3c6f3ae3bb2e (intel: Simplify bool conversion)
  }
  
  /**
* Unmerged path drivers/net/ethernet/intel/i40e/i40e_xsk.c
* Unmerged path drivers/net/ethernet/intel/ice/ice_xsk.c
