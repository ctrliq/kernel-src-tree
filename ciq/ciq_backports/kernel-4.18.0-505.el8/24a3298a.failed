ice: Unregister netdev and devlink_port only once

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-505.el8
commit-author Petr Oros <poros@redhat.com>
commit 24a3298ac9e6bd8de838ab79f7868207170d556d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-505.el8/24a3298a.failed

Since commit 6624e780a577fc ("ice: split ice_vsi_setup into smaller
functions") ice_vsi_release does things twice. There is unregister
netdev which is unregistered in ice_deinit_eth also.

It also unregisters the devlink_port twice which is also unregistered
in ice_deinit_eth(). This double deregistration is hidden because
devl_port_unregister ignores the return value of xa_erase.

[   68.642167] Call Trace:
[   68.650385]  ice_devlink_destroy_pf_port+0xe/0x20 [ice]
[   68.655656]  ice_vsi_release+0x445/0x690 [ice]
[   68.660147]  ice_deinit+0x99/0x280 [ice]
[   68.664117]  ice_remove+0x1b6/0x5c0 [ice]

[  171.103841] Call Trace:
[  171.109607]  ice_devlink_destroy_pf_port+0xf/0x20 [ice]
[  171.114841]  ice_remove+0x158/0x270 [ice]
[  171.118854]  pci_device_remove+0x3b/0xc0
[  171.122779]  device_release_driver_internal+0xc7/0x170
[  171.127912]  driver_detach+0x54/0x8c
[  171.131491]  bus_remove_driver+0x77/0xd1
[  171.135406]  pci_unregister_driver+0x2d/0xb0
[  171.139670]  ice_module_exit+0xc/0x55f [ice]

Fixes: 6624e780a577 ("ice: split ice_vsi_setup into smaller functions")
	Signed-off-by: Petr Oros <poros@redhat.com>
	Reviewed-by: Maciej Fijalkowski <maciej.fijalkowski@intel.com>
	Tested-by: Pucha Himasekhar Reddy <himasekharx.reddy.pucha@intel.com> (A Contingent worker at Intel)
	Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
(cherry picked from commit 24a3298ac9e6bd8de838ab79f7868207170d556d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/intel/ice/ice_lib.c
diff --cc drivers/net/ethernet/intel/ice/ice_lib.c
index dc99c12b0643,0054d7e64ec3..000000000000
--- a/drivers/net/ethernet/intel/ice/ice_lib.c
+++ b/drivers/net/ethernet/intel/ice/ice_lib.c
@@@ -3003,85 -2972,12 +3003,91 @@@ int ice_vsi_release(struct ice_vsi *vsi
  		return -ENODEV;
  	pf = vsi->back;
  
++<<<<<<< HEAD
 +	/* do not unregister while driver is in the reset recovery pending
 +	 * state. Since reset/rebuild happens through PF service task workqueue,
 +	 * it's not a good idea to unregister netdev that is associated to the
 +	 * PF that is running the work queue items currently. This is done to
 +	 * avoid check_flush_dependency() warning on this wq
 +	 */
 +	if (vsi->netdev && !ice_is_reset_in_progress(pf->state) &&
 +	    (test_bit(ICE_VSI_NETDEV_REGISTERED, vsi->state))) {
 +		unregister_netdev(vsi->netdev);
 +		clear_bit(ICE_VSI_NETDEV_REGISTERED, vsi->state);
 +	}
 +
++=======
++>>>>>>> 24a3298ac9e6 (ice: Unregister netdev and devlink_port only once)
  	if (test_bit(ICE_FLAG_RSS_ENA, pf->flags))
  		ice_rss_clean(vsi);
  
 +	/* Disable VSI and free resources */
 +	if (vsi->type != ICE_VSI_LB)
 +		ice_vsi_dis_irq(vsi);
  	ice_vsi_close(vsi);
 -	ice_vsi_decfg(vsi);
  
 +	/* SR-IOV determines needed MSIX resources all at once instead of per
 +	 * VSI since when VFs are spawned we know how many VFs there are and how
 +	 * many interrupts each VF needs. SR-IOV MSIX resources are also
 +	 * cleared in the same manner.
 +	 */
 +	if (vsi->type == ICE_VSI_CTRL && vsi->vf) {
 +		ice_free_vf_ctrl_res(pf, vsi);
 +	} else if (vsi->type != ICE_VSI_VF) {
 +		/* reclaim SW interrupts back to the common pool */
 +		ice_free_res(pf->irq_tracker, vsi->base_vector, vsi->idx);
 +		pf->num_avail_sw_msix += vsi->num_q_vectors;
 +	}
 +
 +	if (!ice_is_safe_mode(pf)) {
 +		if (vsi->type == ICE_VSI_PF) {
 +			ice_fltr_remove_eth(vsi, ETH_P_PAUSE, ICE_FLTR_TX,
 +					    ICE_DROP_PACKET);
 +			ice_cfg_sw_lldp(vsi, true, false);
 +			/* The Rx rule will only exist to remove if the LLDP FW
 +			 * engine is currently stopped
 +			 */
 +			if (!test_bit(ICE_FLAG_FW_LLDP_AGENT, pf->flags))
 +				ice_cfg_sw_lldp(vsi, false, false);
 +		}
 +	}
 +
 +	if (ice_is_vsi_dflt_vsi(vsi))
 +		ice_clear_dflt_vsi(vsi);
 +	ice_fltr_remove_all(vsi);
 +	ice_rm_vsi_lan_cfg(vsi->port_info, vsi->idx);
 +	err = ice_rm_vsi_rdma_cfg(vsi->port_info, vsi->idx);
 +	if (err)
 +		dev_err(ice_pf_to_dev(vsi->back), "Failed to remove RDMA scheduler config for VSI %u, err %d\n",
 +			vsi->vsi_num, err);
 +	ice_vsi_delete(vsi);
 +	ice_vsi_free_q_vectors(vsi);
 +
++<<<<<<< HEAD
 +	if (vsi->netdev) {
 +		if (test_bit(ICE_VSI_NETDEV_REGISTERED, vsi->state)) {
 +			unregister_netdev(vsi->netdev);
 +			clear_bit(ICE_VSI_NETDEV_REGISTERED, vsi->state);
 +		}
 +		if (test_bit(ICE_VSI_NETDEV_ALLOCD, vsi->state)) {
 +			free_netdev(vsi->netdev);
 +			vsi->netdev = NULL;
 +			clear_bit(ICE_VSI_NETDEV_ALLOCD, vsi->state);
 +		}
 +	}
 +
 +	if (vsi->type == ICE_VSI_PF)
 +		ice_devlink_destroy_pf_port(pf);
 +
 +	if (vsi->type == ICE_VSI_VF &&
 +	    vsi->agg_node && vsi->agg_node->valid)
 +		vsi->agg_node->num_vsis--;
 +	ice_vsi_clear_rings(vsi);
 +
 +	ice_vsi_put_qs(vsi);
 +
++=======
++>>>>>>> 24a3298ac9e6 (ice: Unregister netdev and devlink_port only once)
  	/* retain SW VSI data structure since it is needed to unregister and
  	 * free VSI netdev when PF is not in reset recovery pending state,\
  	 * for ex: during rmmod.
* Unmerged path drivers/net/ethernet/intel/ice/ice_lib.c
