ice: Add L2TPv3 hardware offload support

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-505.el8
commit-author Marcin Szycik <marcin.szycik@linux.intel.com>
commit cd63454902d067b27453823aa471949a7cc7390a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-505.el8/cd634549.failed

Add support for offloading packets based on L2TPv3 session id in switchdev
mode.

Example filter:
tc filter add dev $PF1 ingress prio 1 protocol ip flower ip_proto l2tp \
    l2tpv3_sid 1234 skip_sw action mirred egress redirect dev $VF1_PR

Changes in iproute2 are required to be able to specify l2tpv3_sid.

ICE COMMS DDP package is required to create a filter as it contains L2TPv3
profiles.

	Reviewed-by: Michal Swiatkowski <michal.swiatkowski@linux.intel.com>
	Signed-off-by: Marcin Szycik <marcin.szycik@linux.intel.com>
	Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
	Signed-off-by: Paolo Abeni <pabeni@redhat.com>
(cherry picked from commit cd63454902d067b27453823aa471949a7cc7390a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/intel/ice/ice_tc_lib.c
#	drivers/net/ethernet/intel/ice/ice_tc_lib.h
diff --cc drivers/net/ethernet/intel/ice/ice_tc_lib.c
index 256836c52bfe,170e04eaad18..000000000000
--- a/drivers/net/ethernet/intel/ice/ice_tc_lib.c
+++ b/drivers/net/ethernet/intel/ice/ice_tc_lib.c
@@@ -61,6 -68,13 +61,16 @@@ ice_tc_count_lkups(u32 flags, struct ic
  		     ICE_TC_FLWR_FIELD_DEST_IPV6 | ICE_TC_FLWR_FIELD_SRC_IPV6))
  		lkups_cnt++;
  
++<<<<<<< HEAD
++=======
+ 	if (flags & (ICE_TC_FLWR_FIELD_IP_TOS | ICE_TC_FLWR_FIELD_IP_TTL))
+ 		lkups_cnt++;
+ 
+ 	/* are L2TPv3 options specified? */
+ 	if (flags & ICE_TC_FLWR_FIELD_L2TPV3_SESSID)
+ 		lkups_cnt++;
+ 
++>>>>>>> cd63454902d0 (ice: Add L2TPv3 hardware offload support)
  	/* is L4 (TCP/UDP/any other L4 protocol fields) specified? */
  	if (flags & (ICE_TC_FLWR_FIELD_DEST_L4_PORT |
  		     ICE_TC_FLWR_FIELD_SRC_L4_PORT))
@@@ -382,6 -475,61 +392,64 @@@ ice_tc_fill_rules(struct ice_hw *hw, u3
  		i++;
  	}
  
++<<<<<<< HEAD
++=======
+ 	if (headers->l2_key.n_proto == htons(ETH_P_IP) &&
+ 	    (flags & (ICE_TC_FLWR_FIELD_IP_TOS | ICE_TC_FLWR_FIELD_IP_TTL))) {
+ 		list[i].type = ice_proto_type_from_ipv4(inner);
+ 
+ 		if (flags & ICE_TC_FLWR_FIELD_IP_TOS) {
+ 			list[i].h_u.ipv4_hdr.tos = headers->l3_key.tos;
+ 			list[i].m_u.ipv4_hdr.tos = headers->l3_mask.tos;
+ 		}
+ 
+ 		if (flags & ICE_TC_FLWR_FIELD_IP_TTL) {
+ 			list[i].h_u.ipv4_hdr.time_to_live =
+ 				headers->l3_key.ttl;
+ 			list[i].m_u.ipv4_hdr.time_to_live =
+ 				headers->l3_mask.ttl;
+ 		}
+ 
+ 		i++;
+ 	}
+ 
+ 	if (headers->l2_key.n_proto == htons(ETH_P_IPV6) &&
+ 	    (flags & (ICE_TC_FLWR_FIELD_IP_TOS | ICE_TC_FLWR_FIELD_IP_TTL))) {
+ 		struct ice_ipv6_hdr *hdr_h, *hdr_m;
+ 
+ 		hdr_h = &list[i].h_u.ipv6_hdr;
+ 		hdr_m = &list[i].m_u.ipv6_hdr;
+ 		list[i].type = ice_proto_type_from_ipv6(inner);
+ 
+ 		if (flags & ICE_TC_FLWR_FIELD_IP_TOS) {
+ 			be32p_replace_bits(&hdr_h->be_ver_tc_flow,
+ 					   headers->l3_key.tos,
+ 					   ICE_IPV6_HDR_TC_MASK);
+ 			be32p_replace_bits(&hdr_m->be_ver_tc_flow,
+ 					   headers->l3_mask.tos,
+ 					   ICE_IPV6_HDR_TC_MASK);
+ 		}
+ 
+ 		if (flags & ICE_TC_FLWR_FIELD_IP_TTL) {
+ 			hdr_h->hop_limit = headers->l3_key.ttl;
+ 			hdr_m->hop_limit = headers->l3_mask.ttl;
+ 		}
+ 
+ 		i++;
+ 	}
+ 
+ 	if (flags & ICE_TC_FLWR_FIELD_L2TPV3_SESSID) {
+ 		list[i].type = ICE_L2TPV3;
+ 
+ 		list[i].h_u.l2tpv3_sess_hdr.session_id =
+ 			headers->l2tpv3_hdr.session_id;
+ 		list[i].m_u.l2tpv3_sess_hdr.session_id =
+ 			cpu_to_be32(0xFFFFFFFF);
+ 
+ 		i++;
+ 	}
+ 
++>>>>>>> cd63454902d0 (ice: Add L2TPv3 hardware offload support)
  	/* copy L4 (src, dest) port */
  	if (flags & (ICE_TC_FLWR_FIELD_DEST_L4_PORT |
  		     ICE_TC_FLWR_FIELD_SRC_L4_PORT)) {
@@@ -940,9 -1179,12 +1008,10 @@@ ice_parse_cls_flower(struct net_device 
  	      BIT(FLOW_DISSECTOR_KEY_ENC_IPV4_ADDRS) |
  	      BIT(FLOW_DISSECTOR_KEY_ENC_IPV6_ADDRS) |
  	      BIT(FLOW_DISSECTOR_KEY_ENC_PORTS) |
 -	      BIT(FLOW_DISSECTOR_KEY_ENC_OPTS) |
 -	      BIT(FLOW_DISSECTOR_KEY_IP) |
  	      BIT(FLOW_DISSECTOR_KEY_ENC_IP) |
  	      BIT(FLOW_DISSECTOR_KEY_PORTS) |
- 	      BIT(FLOW_DISSECTOR_KEY_PPPOE))) {
+ 	      BIT(FLOW_DISSECTOR_KEY_PPPOE) |
+ 	      BIT(FLOW_DISSECTOR_KEY_L2TPV3))) {
  		NL_SET_ERR_MSG_MOD(fltr->extack, "Unsupported key used");
  		return -EOPNOTSUPP;
  	}
@@@ -1116,6 -1360,22 +1185,25 @@@
  			return -EINVAL;
  	}
  
++<<<<<<< HEAD
++=======
+ 	if (flow_rule_match_key(rule, FLOW_DISSECTOR_KEY_IP)) {
+ 		struct flow_match_ip match;
+ 
+ 		flow_rule_match_ip(rule, &match);
+ 		ice_tc_set_tos_ttl(&match, fltr, headers, false);
+ 	}
+ 
+ 	if (flow_rule_match_key(rule, FLOW_DISSECTOR_KEY_L2TPV3)) {
+ 		struct flow_match_l2tpv3 match;
+ 
+ 		flow_rule_match_l2tpv3(rule, &match);
+ 
+ 		fltr->flags |= ICE_TC_FLWR_FIELD_L2TPV3_SESSID;
+ 		headers->l2tpv3_hdr.session_id = match.key->session_id;
+ 	}
+ 
++>>>>>>> cd63454902d0 (ice: Add L2TPv3 hardware offload support)
  	if (flow_rule_match_key(rule, FLOW_DISSECTOR_KEY_PORTS)) {
  		struct flow_match_ports match;
  
diff --cc drivers/net/ethernet/intel/ice/ice_tc_lib.h
index 77d6b3536b9c,ebef34385a4f..000000000000
--- a/drivers/net/ethernet/intel/ice/ice_tc_lib.h
+++ b/drivers/net/ethernet/intel/ice/ice_tc_lib.h
@@@ -25,6 -25,12 +25,14 @@@
  #define ICE_TC_FLWR_FIELD_CVLAN			BIT(19)
  #define ICE_TC_FLWR_FIELD_PPPOE_SESSID		BIT(20)
  #define ICE_TC_FLWR_FIELD_PPP_PROTO		BIT(21)
++<<<<<<< HEAD
++=======
+ #define ICE_TC_FLWR_FIELD_IP_TOS		BIT(22)
+ #define ICE_TC_FLWR_FIELD_IP_TTL		BIT(23)
+ #define ICE_TC_FLWR_FIELD_ENC_IP_TOS		BIT(24)
+ #define ICE_TC_FLWR_FIELD_ENC_IP_TTL		BIT(25)
+ #define ICE_TC_FLWR_FIELD_L2TPV3_SESSID		BIT(26)
++>>>>>>> cd63454902d0 (ice: Add L2TPv3 hardware offload support)
  
  #define ICE_TC_FLOWER_MASK_32   0xFFFFFFFF
  
diff --git a/drivers/net/ethernet/intel/ice/ice_protocol_type.h b/drivers/net/ethernet/intel/ice/ice_protocol_type.h
index 9a80e489e026..454ed0bc710f 100644
--- a/drivers/net/ethernet/intel/ice/ice_protocol_type.h
+++ b/drivers/net/ethernet/intel/ice/ice_protocol_type.h
@@ -42,6 +42,7 @@ enum ice_protocol_type {
 	ICE_GENEVE,
 	ICE_NVGRE,
 	ICE_PPPOE,
+	ICE_L2TPV3,
 	ICE_VLAN_EX,
 	ICE_VLAN_IN,
 	ICE_VXLAN_GPE,
@@ -107,6 +108,7 @@ enum ice_prot_id {
 #define ICE_UDP_ILOS_HW		53
 #define ICE_GRE_OF_HW		64
 #define ICE_PPPOE_HW		103
+#define ICE_L2TPV3_HW		104
 
 #define ICE_UDP_OF_HW	52 /* UDP Tunnels */
 #define ICE_META_DATA_ID_HW 255 /* this is used for tunnel and VLAN type */
@@ -199,6 +201,11 @@ struct ice_pppoe_hdr {
 	__be16 ppp_prot_id; /* control and data only */
 };
 
+struct ice_l2tpv3_sess_hdr {
+	__be32 session_id;
+	__be64 cookie;
+};
+
 struct ice_nvgre_hdr {
 	__be16 flags;
 	__be16 protocol;
@@ -216,6 +223,7 @@ union ice_prot_hdr {
 	struct ice_udp_tnl_hdr tnl_hdr;
 	struct ice_nvgre_hdr nvgre_hdr;
 	struct ice_pppoe_hdr pppoe_hdr;
+	struct ice_l2tpv3_sess_hdr l2tpv3_sess_hdr;
 };
 
 /* This is mapping table entry that maps every word within a given protocol
diff --git a/drivers/net/ethernet/intel/ice/ice_switch.c b/drivers/net/ethernet/intel/ice/ice_switch.c
index 95090fc22ec9..9b05070ad6bf 100644
--- a/drivers/net/ethernet/intel/ice/ice_switch.c
+++ b/drivers/net/ethernet/intel/ice/ice_switch.c
@@ -42,6 +42,7 @@ enum {
 	ICE_PKT_GTP_NOPAY	= BIT(8),
 	ICE_PKT_KMALLOC		= BIT(9),
 	ICE_PKT_PPPOE		= BIT(10),
+	ICE_PKT_L2TPV3		= BIT(11),
 };
 
 struct ice_dummy_pkt_offsets {
@@ -779,6 +780,65 @@ ICE_DECLARE_PKT_TEMPLATE(pppoe_ipv6_udp) = {
 	0x00, 0x00,		/* 2 bytes for 4 bytes alignment */
 };
 
+ICE_DECLARE_PKT_OFFSETS(ipv4_l2tpv3) = {
+	{ ICE_MAC_OFOS,		0 },
+	{ ICE_ETYPE_OL,		12 },
+	{ ICE_IPV4_OFOS,	14 },
+	{ ICE_L2TPV3,		34 },
+	{ ICE_PROTOCOL_LAST,	0 },
+};
+
+ICE_DECLARE_PKT_TEMPLATE(ipv4_l2tpv3) = {
+	0x00, 0x00, 0x00, 0x00, /* ICE_MAC_OFOS 0 */
+	0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00,
+
+	0x08, 0x00,		/* ICE_ETYPE_OL 12 */
+
+	0x45, 0x00, 0x00, 0x20, /* ICE_IPV4_IL 14 */
+	0x00, 0x00, 0x40, 0x00,
+	0x40, 0x73, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00,
+
+	0x00, 0x00, 0x00, 0x00, /* ICE_L2TPV3 34 */
+	0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00,		/* 2 bytes for 4 bytes alignment */
+};
+
+ICE_DECLARE_PKT_OFFSETS(ipv6_l2tpv3) = {
+	{ ICE_MAC_OFOS,		0 },
+	{ ICE_ETYPE_OL,		12 },
+	{ ICE_IPV6_OFOS,	14 },
+	{ ICE_L2TPV3,		54 },
+	{ ICE_PROTOCOL_LAST,	0 },
+};
+
+ICE_DECLARE_PKT_TEMPLATE(ipv6_l2tpv3) = {
+	0x00, 0x00, 0x00, 0x00, /* ICE_MAC_OFOS 0 */
+	0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00,
+
+	0x86, 0xDD,		/* ICE_ETYPE_OL 12 */
+
+	0x60, 0x00, 0x00, 0x00, /* ICE_IPV6_IL 14 */
+	0x00, 0x0c, 0x73, 0x40,
+	0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00,
+
+	0x00, 0x00, 0x00, 0x00, /* ICE_L2TPV3 54 */
+	0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00,		/* 2 bytes for 4 bytes alignment */
+};
+
 static const struct ice_dummy_pkt_profile ice_dummy_pkt_profiles[] = {
 	ICE_PKT_PROFILE(pppoe_ipv6_udp, ICE_PKT_PPPOE | ICE_PKT_OUTER_IPV6 |
 					ICE_PKT_INNER_UDP),
@@ -793,6 +853,8 @@ static const struct ice_dummy_pkt_profile ice_dummy_pkt_profiles[] = {
 	ICE_PKT_PROFILE(udp_tun_ipv6_tcp, ICE_PKT_TUN_UDP |
 					  ICE_PKT_INNER_IPV6 |
 					  ICE_PKT_INNER_TCP),
+	ICE_PKT_PROFILE(ipv6_l2tpv3, ICE_PKT_L2TPV3 | ICE_PKT_OUTER_IPV6),
+	ICE_PKT_PROFILE(ipv4_l2tpv3, ICE_PKT_L2TPV3),
 	ICE_PKT_PROFILE(udp_tun_tcp, ICE_PKT_TUN_UDP | ICE_PKT_INNER_TCP),
 	ICE_PKT_PROFILE(udp_tun_ipv6_udp, ICE_PKT_TUN_UDP |
 					  ICE_PKT_INNER_IPV6),
@@ -3984,6 +4046,7 @@ static const struct ice_prot_ext_tbl_entry ice_prot_ext[ICE_PROTOCOL_LAST] = {
 	{ ICE_GENEVE,		{ 8, 10, 12, 14 } },
 	{ ICE_NVGRE,            { 0, 2, 4, 6 } },
 	{ ICE_PPPOE,		{ 0, 2, 4, 6 } },
+	{ ICE_L2TPV3,		{ 0, 2, 4, 6, 8, 10 } },
 	{ ICE_VLAN_EX,          { 2, 0 } },
 	{ ICE_VLAN_IN,          { 2, 0 } },
 };
@@ -4005,6 +4068,7 @@ static struct ice_protocol_entry ice_prot_id_tbl[ICE_PROTOCOL_LAST] = {
 	{ ICE_GENEVE,		ICE_UDP_OF_HW },
 	{ ICE_NVGRE,            ICE_GRE_OF_HW },
 	{ ICE_PPPOE,		ICE_PPPOE_HW },
+	{ ICE_L2TPV3,		ICE_L2TPV3_HW },
 	{ ICE_VLAN_EX,          ICE_VLAN_OF_HW },
 	{ ICE_VLAN_IN,          ICE_VLAN_OL_HW },
 };
@@ -5072,7 +5136,8 @@ ice_find_dummy_packet(struct ice_adv_lkup_elem *lkups, u16 lkups_cnt,
 			if (lkups[i].h_u.pppoe_hdr.ppp_prot_id ==
 			    htons(PPP_IPV6))
 				match |= ICE_PKT_OUTER_IPV6;
-		}
+		} else if (lkups[i].type == ICE_L2TPV3)
+			match |= ICE_PKT_L2TPV3;
 	}
 
 	while (ret->match && (match & ret->match) != ret->match)
@@ -5169,6 +5234,9 @@ ice_fill_adv_dummy_packet(struct ice_adv_lkup_elem *lkups, u16 lkups_cnt,
 		case ICE_PPPOE:
 			len = sizeof(struct ice_pppoe_hdr);
 			break;
+		case ICE_L2TPV3:
+			len = sizeof(struct ice_l2tpv3_sess_hdr);
+			break;
 		default:
 			return -EINVAL;
 		}
* Unmerged path drivers/net/ethernet/intel/ice/ice_tc_lib.c
* Unmerged path drivers/net/ethernet/intel/ice/ice_tc_lib.h
