fanotify: Ensure consistent variable type for response

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-505.el8
commit-author Richard Guy Briggs <rgb@redhat.com>
commit 2e0a547164b1384a87fd3500a01297222b0971b0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-505.el8/2e0a5471.failed

The user space API for the response variable is __u32. This patch makes
sure that the whole path through the kernel uses u32 so that there is
no sign extension or truncation of the user space response.

	Suggested-by: Steve Grubb <sgrubb@redhat.com>
Link: https://lore.kernel.org/r/12617626.uLZWGnKmhe@x2
	Signed-off-by: Richard Guy Briggs <rgb@redhat.com>
	Acked-by: Paul Moore <paul@paul-moore.com>
	Tested-by: Steve Grubb <sgrubb@redhat.com>
	Acked-by: Steve Grubb <sgrubb@redhat.com>
	Signed-off-by: Jan Kara <jack@suse.cz>
Message-Id: <3778cb0b3501bc4e686ba7770b20eb9ab0506cf4.1675373475.git.rgb@redhat.com>
(cherry picked from commit 2e0a547164b1384a87fd3500a01297222b0971b0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/notify/fanotify/fanotify.h
diff --cc fs/notify/fanotify/fanotify.h
index 7b84ea462af0,f899d610bc08..000000000000
--- a/fs/notify/fanotify/fanotify.h
+++ b/fs/notify/fanotify/fanotify.h
@@@ -39,7 -424,8 +39,12 @@@ struct fanotify_event 
   */
  struct fanotify_perm_event {
  	struct fanotify_event fae;
++<<<<<<< HEAD
 +	unsigned short response;	/* userspace answer to the event */
++=======
+ 	struct path path;
+ 	u32 response;			/* userspace answer to the event */
++>>>>>>> 2e0a547164b1 (fanotify: Ensure consistent variable type for response)
  	unsigned short state;		/* state of the event */
  	int fd;		/* fd we passed to userspace for this event */
  };
* Unmerged path fs/notify/fanotify/fanotify.h
diff --git a/fs/notify/fanotify/fanotify_user.c b/fs/notify/fanotify/fanotify_user.c
index 8f76ba1a748b..1e1b0f284fe4 100644
--- a/fs/notify/fanotify/fanotify_user.c
+++ b/fs/notify/fanotify/fanotify_user.c
@@ -154,7 +154,7 @@ static int fill_event_metadata(struct fsnotify_group *group,
  */
 static void finish_permission_event(struct fsnotify_group *group,
 				    struct fanotify_perm_event *event,
-				    unsigned int response)
+				    u32 response)
 				    __releases(&group->notification_lock)
 {
 	bool destroy = false;
@@ -175,9 +175,9 @@ static int process_access_response(struct fsnotify_group *group,
 {
 	struct fanotify_perm_event *event;
 	int fd = response_struct->fd;
-	int response = response_struct->response;
+	u32 response = response_struct->response;
 
-	pr_debug("%s: group=%p fd=%d response=%d\n", __func__, group,
+	pr_debug("%s: group=%p fd=%d response=%u\n", __func__, group,
 		 fd, response);
 	/*
 	 * make sure the response is valid, if invalid we do nothing and either
diff --git a/include/linux/audit.h b/include/linux/audit.h
index e3ee332a7338..a0570c659767 100644
--- a/include/linux/audit.h
+++ b/include/linux/audit.h
@@ -404,7 +404,7 @@ extern void __audit_log_capset(const struct cred *new, const struct cred *old);
 extern void __audit_mmap_fd(int fd, int flags);
 extern void __audit_openat2_how(struct open_how *how);
 extern void __audit_log_kern_module(char *name);
-extern void __audit_fanotify(unsigned int response);
+extern void __audit_fanotify(u32 response);
 extern void __audit_tk_injoffset(struct timespec64 offset);
 extern void __audit_ntp_log(const struct audit_ntp_data *ad);
 extern void __audit_log_nfcfg(const char *name, u8 af, unsigned int nentries,
@@ -511,7 +511,7 @@ static inline void audit_log_kern_module(char *name)
 		__audit_log_kern_module(name);
 }
 
-static inline void audit_fanotify(unsigned int response)
+static inline void audit_fanotify(u32 response)
 {
 	if (!audit_dummy_context())
 		__audit_fanotify(response);
@@ -663,7 +663,7 @@ static inline void audit_log_kern_module(char *name)
 {
 }
 
-static inline void audit_fanotify(unsigned int response)
+static inline void audit_fanotify(u32 response)
 { }
 
 static inline void audit_tk_injoffset(struct timespec64 offset)
diff --git a/kernel/auditsc.c b/kernel/auditsc.c
index 5738817d705e..3c59f25ea13d 100644
--- a/kernel/auditsc.c
+++ b/kernel/auditsc.c
@@ -2686,7 +2686,7 @@ void __audit_log_kern_module(char *name)
 	context->type = AUDIT_KERN_MODULE;
 }
 
-void __audit_fanotify(unsigned int response)
+void __audit_fanotify(u32 response)
 {
 	audit_log(audit_context(), GFP_KERNEL,
 		AUDIT_FANOTIFY,	"resp=%u", response);
