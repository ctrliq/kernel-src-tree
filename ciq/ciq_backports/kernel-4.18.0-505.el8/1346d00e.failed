powerpc: Don't select HAVE_IRQ_EXIT_ON_IRQ_STACK

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-505.el8
commit-author Michael Ellerman <mpe@ellerman.id.au>
commit 1346d00e1bdfd4067f92bc14e8a6131a01de4190
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-505.el8/1346d00e.failed

The HAVE_IRQ_EXIT_ON_IRQ_STACK option tells generic code that irq_exit()
is called while still running on the hard irq stack (hardirq_ctx[] in
the powerpc code).

Selecting the option means the generic code will *not* switch to the
softirq stack before running softirqs, because the code is already
running on the (mostly empty) hard irq stack.

But since commit 1b1b6a6f4cc0 ("powerpc: handle irq_enter/irq_exit in
interrupt handler wrappers"), irq_exit() is now called on the regular task
stack, not the hard irq stack.

That's because previously irq_exit() was called in __do_irq() which is
run on the hard irq stack, but now it is called in
interrupt_async_exit_prepare() which is called from do_irq() constructed
by the wrapper macro, which is after the switch back to the task stack.

So drop HAVE_IRQ_EXIT_ON_IRQ_STACK from the Kconfig. This will mean an
extra stack switch when processing some interrupts, but should
significantly reduce the likelihood of stack overflow.

It also means the softirq stack will be used for running softirqs from
other interrupts that don't use the hard irq stack, eg. timer interrupts.

Fixes: 1b1b6a6f4cc0 ("powerpc: handle irq_enter/irq_exit in interrupt handler wrappers")
	Cc: stable@vger.kernel.org # v5.12+
	Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
Link: https://lore.kernel.org/r/20220525032639.1947280-1-mpe@ellerman.id.au

(cherry picked from commit 1346d00e1bdfd4067f92bc14e8a6131a01de4190)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/powerpc/Kconfig
diff --cc arch/powerpc/Kconfig
index 069c69ae8e01,54dbbb1d4b36..000000000000
--- a/arch/powerpc/Kconfig
+++ b/arch/powerpc/Kconfig
@@@ -196,11 -216,18 +196,15 @@@ config PP
  	select HAVE_FUNCTION_GRAPH_TRACER
  	select HAVE_FUNCTION_TRACER
  	select HAVE_GCC_PLUGINS			if GCC_VERSION >= 50200   # plugin support on gcc <= 5.1 is buggy on PPC
 -	select HAVE_GENERIC_VDSO
 -	select HAVE_HARDLOCKUP_DETECTOR_ARCH	if PPC_BOOK3S_64 && SMP
 -	select HAVE_HARDLOCKUP_DETECTOR_PERF	if PERF_EVENTS && HAVE_PERF_EVENTS_NMI && !HAVE_HARDLOCKUP_DETECTOR_ARCH
  	select HAVE_HW_BREAKPOINT		if PERF_EVENTS && (PPC_BOOK3S || PPC_8xx)
 +	select HAVE_IDE
  	select HAVE_IOREMAP_PROT
++<<<<<<< HEAD
 +	select HAVE_IRQ_EXIT_ON_IRQ_STACK
++=======
+ 	select HAVE_IRQ_TIME_ACCOUNTING
++>>>>>>> 1346d00e1bdf (powerpc: Don't select HAVE_IRQ_EXIT_ON_IRQ_STACK)
  	select HAVE_KERNEL_GZIP
 -	select HAVE_KERNEL_LZMA			if DEFAULT_UIMAGE
 -	select HAVE_KERNEL_LZO			if DEFAULT_UIMAGE
 -	select HAVE_KERNEL_XZ			if PPC_BOOK3S || 44x
  	select HAVE_KPROBES
  	select HAVE_KPROBES_ON_FTRACE
  	select HAVE_KRETPROBES
* Unmerged path arch/powerpc/Kconfig
