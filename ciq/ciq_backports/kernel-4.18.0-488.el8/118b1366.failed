powerpc/pseries/mobility: set NMI watchdog factor during an LPM

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-488.el8
commit-author Laurent Dufour <ldufour@linux.ibm.com>
commit 118b1366930c8c833b8b36abef657f40d4e26610
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-488.el8/118b1366.failed

During an LPM, while the memory transfer is in progress on the arrival
side, some latencies are generated when accessing not yet transferred
pages on the arrival side. Thus, the NMI watchdog may be triggered too
frequently, which increases the risk to hit an NMI interrupt in a bad
place in the kernel, leading to a kernel panic.

Disabling the Hard Lockup Watchdog until the memory transfer could be a
too strong work around, some users would want this timeout to be
eventually triggered if the system is hanging even during an LPM.

Introduce a new sysctl variable nmi_watchdog_factor. It allows to apply
a factor to the NMI watchdog timeout during an LPM. Just before the CPUs
are stopped for the switchover sequence, the NMI watchdog timer is set
to watchdog_thresh + factor%

A value of 0 has no effect. The default value is 200, meaning that the
NMI watchdog is set to 30s during LPM (based on a 10s watchdog_thresh
value). Once the memory transfer is achieved, the factor is reset to 0.

Setting this value to a high number is like disabling the NMI watchdog
during an LPM.

	Signed-off-by: Laurent Dufour <ldufour@linux.ibm.com>
	Reviewed-by: Nicholas Piggin <npiggin@gmail.com>
	Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
Link: https://lore.kernel.org/r/20220713154729.80789-5-ldufour@linux.ibm.com

(cherry picked from commit 118b1366930c8c833b8b36abef657f40d4e26610)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	Documentation/admin-guide/sysctl/kernel.rst
#	arch/powerpc/platforms/pseries/mobility.c
diff --cc arch/powerpc/platforms/pseries/mobility.c
index b8de94164f79,3d36a8955eaf..000000000000
--- a/arch/powerpc/platforms/pseries/mobility.c
+++ b/arch/powerpc/platforms/pseries/mobility.c
@@@ -699,21 -735,20 +732,31 @@@ static int pseries_suspend(u64 handle
  static int pseries_migrate_partition(u64 handle)
  {
  	int ret;
+ 	unsigned int factor = 0;
  
++<<<<<<< HEAD
 +	/*
 +	 * When the migration is initiated, the hypervisor changes VAS
 +	 * mappings to prepare before OS gets the notification and
 +	 * closes all VAS windows. NX generates continuous faults during
 +	 * this time and the user space can not differentiate these
 +	 * faults from the migration event. So reduce this time window
 +	 * by closing VAS windows at the beginning of this function.
 +	 */
 +	vas_migration_handler(VAS_SUSPEND);
 +
++=======
+ #ifdef CONFIG_PPC_WATCHDOG
+ 	factor = nmi_wd_lpm_factor;
+ #endif
++>>>>>>> 118b1366930c (powerpc/pseries/mobility: set NMI watchdog factor during an LPM)
  	ret = wait_for_vasi_session_suspending(handle);
  	if (ret)
 -		return ret;
 -
 -	vas_migration_handler(VAS_SUSPEND);
 +		goto out;
  
+ 	if (factor)
+ 		watchdog_nmi_set_timeout_pct(factor);
+ 
  	ret = pseries_suspend(handle);
  	if (ret == 0) {
  		post_mobility_fixup();
@@@ -727,7 -762,9 +770,13 @@@
  	} else
  		pseries_cancel_migration(handle, ret);
  
++<<<<<<< HEAD
 +out:
++=======
+ 	if (factor)
+ 		watchdog_nmi_set_timeout_pct(0);
+ 
++>>>>>>> 118b1366930c (powerpc/pseries/mobility: set NMI watchdog factor during an LPM)
  	vas_migration_handler(VAS_RESUME);
  
  	return ret;
* Unmerged path Documentation/admin-guide/sysctl/kernel.rst
* Unmerged path Documentation/admin-guide/sysctl/kernel.rst
* Unmerged path arch/powerpc/platforms/pseries/mobility.c
