arp: Remove a nest in arp_req_get().

jira LE-2742
Rebuild_History Non-Buildable kernel-5.14.0-503.31.1.el9_5
commit-author Kuniyuki Iwashima <kuniyu@amazon.com>
commit 51e9ba48d48786da89d2695be9a1cab40b2afc31
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-5.14.0-503.31.1.el9_5/51e9ba48.failed

This is a prep patch to make the following changes tidy.

No functional change intended.

	Signed-off-by: Kuniyuki Iwashima <kuniyu@amazon.com>
Link: https://lore.kernel.org/r/20240430015813.71143-5-kuniyu@amazon.com
	Signed-off-by: Jakub Kicinski <kuba@kernel.org>
(cherry picked from commit 51e9ba48d48786da89d2695be9a1cab40b2afc31)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/ipv4/arp.c
diff --cc net/ipv4/arp.c
index 58c3109e7758,60f633b24ec8..000000000000
--- a/net/ipv4/arp.c
+++ b/net/ipv4/arp.c
@@@ -1100,23 -1138,28 +1100,42 @@@ static int arp_req_get(struct arpreq *r
  {
  	__be32 ip = ((struct sockaddr_in *) &r->arp_pa)->sin_addr.s_addr;
  	struct neighbour *neigh;
- 	int err = -ENXIO;
  
  	neigh = neigh_lookup(&arp_tbl, &ip, dev);
++<<<<<<< HEAD
 +	if (neigh) {
 +		if (!(READ_ONCE(neigh->nud_state) & NUD_NOARP)) {
 +			read_lock_bh(&neigh->lock);
 +			memcpy(r->arp_ha.sa_data, neigh->ha,
 +			       min((size_t)dev->addr_len, sizeof(r->arp_ha.sa_data)));
 +			r->arp_flags = arp_state_to_flags(neigh);
 +			read_unlock_bh(&neigh->lock);
 +			r->arp_ha.sa_family = dev->type;
 +			strlcpy(r->arp_dev, dev->name, sizeof(r->arp_dev));
 +			err = 0;
 +		}
++=======
+ 	if (!neigh)
+ 		return -ENXIO;
+ 
+ 	if (READ_ONCE(neigh->nud_state) & NUD_NOARP) {
++>>>>>>> 51e9ba48d487 (arp: Remove a nest in arp_req_get().)
  		neigh_release(neigh);
+ 		return -ENXIO;
  	}
- 	return err;
+ 
+ 	read_lock_bh(&neigh->lock);
+ 	memcpy(r->arp_ha.sa_data, neigh->ha,
+ 	       min(dev->addr_len, sizeof(r->arp_ha.sa_data_min)));
+ 	r->arp_flags = arp_state_to_flags(neigh);
+ 	read_unlock_bh(&neigh->lock);
+ 
+ 	neigh_release(neigh);
+ 
+ 	r->arp_ha.sa_family = dev->type;
+ 	strscpy(r->arp_dev, dev->name, sizeof(r->arp_dev));
+ 
+ 	return 0;
  }
  
  int arp_invalidate(struct net_device *dev, __be32 ip, bool force)
* Unmerged path net/ipv4/arp.c
