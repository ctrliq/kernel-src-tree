arp: Factorise ip_route_output() call in arp_req_set() and arp_req_delete().

jira LE-2742
Rebuild_History Non-Buildable kernel-5.14.0-503.31.1.el9_5
commit-author Kuniyuki Iwashima <kuniyu@amazon.com>
commit f8696133f6aa4e6a83c9fb2d9dddc6d194a2ba1f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-5.14.0-503.31.1.el9_5/f8696133.failed

When ioctl(SIOCDARP/SIOCSARP) is issued for non-proxy entry (no ATF_COM)
without arpreq.arp_dev[] set, arp_req_set() and arp_req_delete() looks up
dev based on IPv4 address by ip_route_output().

Let's factorise the same code as arp_req_dev().

	Signed-off-by: Kuniyuki Iwashima <kuniyu@amazon.com>
Link: https://lore.kernel.org/r/20240430015813.71143-4-kuniyu@amazon.com
	Signed-off-by: Jakub Kicinski <kuba@kernel.org>
(cherry picked from commit f8696133f6aa4e6a83c9fb2d9dddc6d194a2ba1f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/ipv4/arp.c
diff --cc net/ipv4/arp.c
index 58c3109e7758,ac3e15799c2f..000000000000
--- a/net/ipv4/arp.c
+++ b/net/ipv4/arp.c
@@@ -1030,17 -1073,10 +1051,21 @@@ static int arp_req_set(struct net *net
  	if (r->arp_flags & ATF_PUBL)
  		return arp_req_set_public(net, r, dev);
  
- 	ip = ((struct sockaddr_in *)&r->arp_pa)->sin_addr.s_addr;
- 
  	if (!dev) {
++<<<<<<< HEAD
 +		struct rtable *rt = ip_route_output(net, ip, 0, RTO_ONLINK, 0);
 +
 +		if (IS_ERR(rt))
 +			return PTR_ERR(rt);
 +		dev = rt->dst.dev;
 +		ip_rt_put(rt);
 +		if (!dev)
 +			return -EINVAL;
++=======
+ 		dev = arp_req_dev(net, r);
+ 		if (IS_ERR(dev))
+ 			return PTR_ERR(dev);
++>>>>>>> f8696133f6aa (arp: Factorise ip_route_output() call in arp_req_set() and arp_req_delete().)
  	}
  	switch (dev->type) {
  #if IS_ENABLED(CONFIG_FDDI)
@@@ -1168,13 -1206,9 +1195,19 @@@ static int arp_req_delete(struct net *n
  
  	ip = ((struct sockaddr_in *)&r->arp_pa)->sin_addr.s_addr;
  	if (!dev) {
++<<<<<<< HEAD
 +		struct rtable *rt = ip_route_output(net, ip, 0, RTO_ONLINK, 0);
 +		if (IS_ERR(rt))
 +			return PTR_ERR(rt);
 +		dev = rt->dst.dev;
 +		ip_rt_put(rt);
 +		if (!dev)
 +			return -EINVAL;
++=======
+ 		dev = arp_req_dev(net, r);
+ 		if (IS_ERR(dev))
+ 			return PTR_ERR(dev);
++>>>>>>> f8696133f6aa (arp: Factorise ip_route_output() call in arp_req_set() and arp_req_delete().)
  	}
  	return arp_invalidate(dev, ip, true);
  }
* Unmerged path net/ipv4/arp.c
