block: initialize integrity buffer to zero before writing it to media

jira LE-2169
cve CVE-2024-43854
Rebuild_History Non-Buildable kernel-4.18.0-553.27.1.el8_10
commit-author Christoph Hellwig <hch@lst.de>
commit 899ee2c3829c5ac14bfc7d3c4a5846c0b709b78f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-553.27.1.el8_10/899ee2c3.failed

Metadata added by bio_integrity_prep is using plain kmalloc, which leads
to random kernel memory being written media.  For PI metadata this is
limited to the app tag that isn't used by kernel generated metadata,
but for non-PI metadata the entire buffer leaks kernel memory.

Fix this by adding the __GFP_ZERO flag to allocations for writes.

Fixes: 7ba1ba12eeef ("block: Block layer data integrity support")
	Signed-off-by: Christoph Hellwig <hch@lst.de>
	Reviewed-by: Martin K. Petersen <martin.petersen@oracle.com>
	Reviewed-by: Kanchan Joshi <joshi.k@samsung.com>
	Reviewed-by: Chaitanya Kulkarni <kch@nvidia.com>
Link: https://lore.kernel.org/r/20240613084839.1044015-2-hch@lst.de
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit 899ee2c3829c5ac14bfc7d3c4a5846c0b709b78f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	block/bio-integrity.c
diff --cc block/bio-integrity.c
index f4b9fc182299,af7f71d16114..000000000000
--- a/block/bio-integrity.c
+++ b/block/bio-integrity.c
@@@ -221,8 -432,7 +221,12 @@@ bool bio_integrity_prep(struct bio *bio
  	unsigned long start, end;
  	unsigned int len, nr_pages;
  	unsigned int bytes, offset, i;
++<<<<<<< HEAD
 +	unsigned int intervals;
 +	blk_status_t status;
++=======
+ 	gfp_t gfp = GFP_NOIO;
++>>>>>>> 899ee2c3829c (block: initialize integrity buffer to zero before writing it to media)
  
  	if (!bi)
  		return true;
@@@ -245,13 -455,19 +249,26 @@@
  		if (!bi->profile->generate_fn ||
  		    !(bi->flags & BLK_INTEGRITY_GENERATE))
  			return true;
+ 
+ 		/*
+ 		 * Zero the memory allocated to not leak uninitialized kernel
+ 		 * memory to disk.  For PI this only affects the app tag, but
+ 		 * for non-integrity metadata it affects the entire metadata
+ 		 * buffer.
+ 		 */
+ 		gfp |= __GFP_ZERO;
  	}
 +	intervals = bio_integrity_intervals(bi, bio_sectors(bio));
  
  	/* Allocate kernel buffer for protection data */
++<<<<<<< HEAD
 +	len = intervals * bi->tuple_size;
 +	buf = kmalloc(len, GFP_NOIO | q->bounce_gfp);
 +	status = BLK_STS_RESOURCE;
++=======
+ 	len = bio_integrity_bytes(bi, bio_sectors(bio));
+ 	buf = kmalloc(len, gfp);
++>>>>>>> 899ee2c3829c (block: initialize integrity buffer to zero before writing it to media)
  	if (unlikely(buf == NULL)) {
  		printk(KERN_ERR "could not allocate integrity buffer\n");
  		goto err_end_io;
* Unmerged path block/bio-integrity.c
