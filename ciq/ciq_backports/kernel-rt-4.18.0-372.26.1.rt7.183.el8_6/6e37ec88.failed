KVM: x86: Use ERR_PTR_USR() to return -EFAULT as a __user pointer

jira LE-1907
Rebuild_History Non-Buildable kernel-rt-4.18.0-372.26.1.rt7.183.el8_6
commit-author Sean Christopherson <seanjc@google.com>
commit 6e37ec8825a113bc2dd1b280be10e5ac6eb4f6b1
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-rt-4.18.0-372.26.1.rt7.183.el8_6/6e37ec88.failed

Use ERR_PTR_USR() when returning -EFAULT from kvm_get_attr_addr(), sparse
complains about implicitly casting the kernel pointer from ERR_PTR() into
a __user pointer.

>> arch/x86/kvm/x86.c:4342:31: sparse: sparse: incorrect type in return expression
   (different address spaces) @@     expected void [noderef] __user * @@     got void * @@
   arch/x86/kvm/x86.c:4342:31: sparse:     expected void [noderef] __user *
   arch/x86/kvm/x86.c:4342:31: sparse:     got void *
>> arch/x86/kvm/x86.c:4342:31: sparse: sparse: incorrect type in return expression
   (different address spaces) @@     expected void [noderef] __user * @@     got void * @@
   arch/x86/kvm/x86.c:4342:31: sparse:     expected void [noderef] __user *
   arch/x86/kvm/x86.c:4342:31: sparse:     got void *

No functional change intended.

Fixes: 56f289a8d23a ("KVM: x86: Add a helper to retrieve userspace address from kvm_device_attr")
	Reported-by: kernel test robot <lkp@intel.com>
	Signed-off-by: Sean Christopherson <seanjc@google.com>
Message-Id: <20220202005157.2545816-1-seanjc@google.com>
	Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
(cherry picked from commit 6e37ec8825a113bc2dd1b280be10e5ac6eb4f6b1)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kvm/x86.c
diff --cc arch/x86/kvm/x86.c
index b3d6af75f4d0,b533aab98172..000000000000
--- a/arch/x86/kvm/x86.c
+++ b/arch/x86/kvm/x86.c
@@@ -4212,7 -4335,49 +4214,51 @@@ int kvm_vm_ioctl_check_extension(struc
  		break;
  	}
  	return r;
 -}
  
++<<<<<<< HEAD
++=======
+ static inline void __user *kvm_get_attr_addr(struct kvm_device_attr *attr)
+ {
+ 	void __user *uaddr = (void __user*)(unsigned long)attr->addr;
+ 
+ 	if ((u64)(unsigned long)uaddr != attr->addr)
+ 		return ERR_PTR_USR(-EFAULT);
+ 	return uaddr;
+ }
+ 
+ static int kvm_x86_dev_get_attr(struct kvm_device_attr *attr)
+ {
+ 	u64 __user *uaddr = kvm_get_attr_addr(attr);
+ 
+ 	if (attr->group)
+ 		return -ENXIO;
+ 
+ 	if (IS_ERR(uaddr))
+ 		return PTR_ERR(uaddr);
+ 
+ 	switch (attr->attr) {
+ 	case KVM_X86_XCOMP_GUEST_SUPP:
+ 		if (put_user(supported_xcr0, uaddr))
+ 			return -EFAULT;
+ 		return 0;
+ 	default:
+ 		return -ENXIO;
+ 		break;
+ 	}
+ }
+ 
+ static int kvm_x86_dev_has_attr(struct kvm_device_attr *attr)
+ {
+ 	if (attr->group)
+ 		return -ENXIO;
+ 
+ 	switch (attr->attr) {
+ 	case KVM_X86_XCOMP_GUEST_SUPP:
+ 		return 0;
+ 	default:
+ 		return -ENXIO;
+ 	}
++>>>>>>> 6e37ec8825a1 (KVM: x86: Use ERR_PTR_USR() to return -EFAULT as a __user pointer)
  }
  
  long kvm_arch_dev_ioctl(struct file *filp,
* Unmerged path arch/x86/kvm/x86.c
