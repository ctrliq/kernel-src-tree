x86/bugs: Group MDS, TAA & Processor MMIO Stale Data mitigations

jira LE-1907
cve CVE-2022-21166
cve CVE-2022-21125
cve CVE-2022-21123
Rebuild_History Non-Buildable kernel-4.18.0-425.3.1.el8
commit-author Pawan Gupta <pawan.kumar.gupta@linux.intel.com>
commit e5925fb867290ee924fcf2fe3ca887b792714366
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-425.3.1.el8/e5925fb8.failed

MDS, TAA and Processor MMIO Stale Data mitigations rely on clearing CPU
buffers. Moreover, status of these mitigations affects each other.
During boot, it is important to maintain the order in which these
mitigations are selected. This is especially true for
md_clear_update_mitigation() that needs to be called after MDS, TAA and
Processor MMIO Stale Data mitigation selection is done.

Introduce md_clear_select_mitigation(), and select all these mitigations
from there. This reflects relationships between these mitigations and
ensures proper ordering.

	Signed-off-by: Pawan Gupta <pawan.kumar.gupta@linux.intel.com>
	Signed-off-by: Borislav Petkov <bp@suse.de>
(cherry picked from commit e5925fb867290ee924fcf2fe3ca887b792714366)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kernel/cpu/bugs.c
diff --cc arch/x86/kernel/cpu/bugs.c
index f6dceabb4029,d2cc7dbba5e2..000000000000
--- a/arch/x86/kernel/cpu/bugs.c
+++ b/arch/x86/kernel/cpu/bugs.c
@@@ -43,8 -42,11 +43,9 @@@ static void __init ssb_select_mitigatio
  static void __init l1tf_select_mitigation(void);
  static void __init mds_select_mitigation(void);
  static void __init md_clear_update_mitigation(void);
+ static void __init md_clear_select_mitigation(void);
  static void __init taa_select_mitigation(void);
 -static void __init mmio_select_mitigation(void);
  static void __init srbds_select_mitigation(void);
 -static void __init l1d_flush_select_mitigation(void);
  
  /* The base value of the SPEC_CTRL MSR that always has to be preserved. */
  u64 x86_spec_ctrl_base;
@@@ -111,19 -121,12 +112,26 @@@ void __init check_bugs(void
  	/* Select the proper CPU mitigations before patching alternatives: */
  	spectre_v1_select_mitigation();
  	spectre_v2_select_mitigation();
 +	spec_ctrl_cpu_init();
  	ssb_select_mitigation();
  	l1tf_select_mitigation();
++<<<<<<< HEAD
 +	mds_select_mitigation();
 +	taa_select_mitigation();
++=======
+ 	md_clear_select_mitigation();
++>>>>>>> e5925fb86729 (x86/bugs: Group MDS, TAA & Processor MMIO Stale Data mitigations)
  	srbds_select_mitigation();
 -	l1d_flush_select_mitigation();
  
++<<<<<<< HEAD
 +	/*
 +	 * As MDS and TAA mitigations are inter-related, update and print their
 +	 * mitigation after TAA mitigation selection is done.
 +	 */
 +	md_clear_update_mitigation();
 +
++=======
++>>>>>>> e5925fb86729 (x86/bugs: Group MDS, TAA & Processor MMIO Stale Data mitigations)
  	arch_smt_update();
  
  #ifdef CONFIG_X86_32
@@@ -411,8 -508,24 +419,22 @@@ out
  		pr_info("MDS: %s\n", mds_strings[mds_mitigation]);
  	if (boot_cpu_has_bug(X86_BUG_TAA))
  		pr_info("TAA: %s\n", taa_strings[taa_mitigation]);
 -	if (boot_cpu_has_bug(X86_BUG_MMIO_STALE_DATA))
 -		pr_info("MMIO Stale Data: %s\n", mmio_strings[mmio_mitigation]);
  }
  
+ static void __init md_clear_select_mitigation(void)
+ {
+ 	mds_select_mitigation();
+ 	taa_select_mitigation();
+ 	mmio_select_mitigation();
+ 
+ 	/*
+ 	 * As MDS, TAA and MMIO Stale Data mitigations are inter-related, update
+ 	 * and print their mitigation after MDS, TAA and MMIO Stale Data
+ 	 * mitigation selection is done.
+ 	 */
+ 	md_clear_update_mitigation();
+ }
+ 
  #undef pr_fmt
  #define pr_fmt(fmt)	"SRBDS: " fmt
  
* Unmerged path arch/x86/kernel/cpu/bugs.c
