ASoC: wm_adsp: Split out struct cs_dsp from struct wm_adsp

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-425.3.1.el8
commit-author Simon Trimmer <simont@opensource.cirrus.com>
commit e146820215910d889ab16d6c2484fd51a6bb8f1f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-425.3.1.el8/e1468202.failed

In preparation for moving the generic DSP support out of ASoC split
struct wm_adsp into two parts, one will form the structure for the new
generic DSP code and embed that one into wm_adsp.

	Signed-off-by: Simon Trimmer <simont@opensource.cirrus.com>
	Signed-off-by: Charles Keepax <ckeepax@opensource.cirrus.com>
Link: https://lore.kernel.org/r/20210913160057.103842-15-simont@opensource.cirrus.com
	Signed-off-by: Mark Brown <broonie@kernel.org>
(cherry picked from commit e146820215910d889ab16d6c2484fd51a6bb8f1f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	sound/soc/codecs/cs47l15.c
#	sound/soc/codecs/cs47l35.c
#	sound/soc/codecs/cs47l85.c
#	sound/soc/codecs/cs47l90.c
#	sound/soc/codecs/cs47l92.c
#	sound/soc/codecs/madera.c
#	sound/soc/codecs/wm_adsp.c
#	sound/soc/codecs/wm_adsp.h
diff --cc sound/soc/codecs/wm_adsp.c
index c1b5ea3b5718,092df446ff2f..000000000000
--- a/sound/soc/codecs/wm_adsp.c
+++ b/sound/soc/codecs/wm_adsp.c
@@@ -33,16 -34,25 +33,16 @@@
  #include "wm_adsp.h"
  
  #define adsp_crit(_dsp, fmt, ...) \
- 	dev_crit(_dsp->dev, "%s: " fmt, _dsp->name, ##__VA_ARGS__)
+ 	dev_crit(_dsp->cs_dsp.dev, "%s: " fmt, _dsp->cs_dsp.name, ##__VA_ARGS__)
  #define adsp_err(_dsp, fmt, ...) \
- 	dev_err(_dsp->dev, "%s: " fmt, _dsp->name, ##__VA_ARGS__)
+ 	dev_err(_dsp->cs_dsp.dev, "%s: " fmt, _dsp->cs_dsp.name, ##__VA_ARGS__)
  #define adsp_warn(_dsp, fmt, ...) \
- 	dev_warn(_dsp->dev, "%s: " fmt, _dsp->name, ##__VA_ARGS__)
+ 	dev_warn(_dsp->cs_dsp.dev, "%s: " fmt, _dsp->cs_dsp.name, ##__VA_ARGS__)
  #define adsp_info(_dsp, fmt, ...) \
- 	dev_info(_dsp->dev, "%s: " fmt, _dsp->name, ##__VA_ARGS__)
+ 	dev_info(_dsp->cs_dsp.dev, "%s: " fmt, _dsp->cs_dsp.name, ##__VA_ARGS__)
  #define adsp_dbg(_dsp, fmt, ...) \
- 	dev_dbg(_dsp->dev, "%s: " fmt, _dsp->name, ##__VA_ARGS__)
+ 	dev_dbg(_dsp->cs_dsp.dev, "%s: " fmt, _dsp->cs_dsp.name, ##__VA_ARGS__)
  
 -#define cs_dsp_err(_dsp, fmt, ...) \
 -	dev_err(_dsp->dev, "%s: " fmt, _dsp->name, ##__VA_ARGS__)
 -#define cs_dsp_warn(_dsp, fmt, ...) \
 -	dev_warn(_dsp->dev, "%s: " fmt, _dsp->name, ##__VA_ARGS__)
 -#define cs_dsp_info(_dsp, fmt, ...) \
 -	dev_info(_dsp->dev, "%s: " fmt, _dsp->name, ##__VA_ARGS__)
 -#define cs_dsp_dbg(_dsp, fmt, ...) \
 -	dev_dbg(_dsp->dev, "%s: " fmt, _dsp->name, ##__VA_ARGS__)
 -
  #define compr_err(_obj, fmt, ...) \
  	adsp_err(_obj->dsp, "%s: " fmt, _obj->name ? _obj->name : "legacy", \
  		 ##__VA_ARGS__)
@@@ -641,7 -638,7 +641,11 @@@ static const char *wm_adsp_mem_region_n
  }
  
  #ifdef CONFIG_DEBUG_FS
++<<<<<<< HEAD
 +static void wm_adsp_debugfs_save_wmfwname(struct wm_adsp *dsp, const char *s)
++=======
+ static void cs_dsp_debugfs_save_wmfwname(struct cs_dsp *dsp, const char *s)
++>>>>>>> e14682021591 (ASoC: wm_adsp: Split out struct cs_dsp from struct wm_adsp)
  {
  	char *tmp = kasprintf(GFP_KERNEL, "%s\n", s);
  
@@@ -649,7 -646,7 +653,11 @@@
  	dsp->wmfw_file_name = tmp;
  }
  
++<<<<<<< HEAD
 +static void wm_adsp_debugfs_save_binname(struct wm_adsp *dsp, const char *s)
++=======
+ static void cs_dsp_debugfs_save_binname(struct cs_dsp *dsp, const char *s)
++>>>>>>> e14682021591 (ASoC: wm_adsp: Split out struct cs_dsp from struct wm_adsp)
  {
  	char *tmp = kasprintf(GFP_KERNEL, "%s\n", s);
  
@@@ -657,7 -654,7 +665,11 @@@
  	dsp->bin_file_name = tmp;
  }
  
++<<<<<<< HEAD
 +static void wm_adsp_debugfs_clear(struct wm_adsp *dsp)
++=======
+ static void cs_dsp_debugfs_clear(struct cs_dsp *dsp)
++>>>>>>> e14682021591 (ASoC: wm_adsp: Split out struct cs_dsp from struct wm_adsp)
  {
  	kfree(dsp->wmfw_file_name);
  	kfree(dsp->bin_file_name);
@@@ -665,11 -662,11 +677,11 @@@
  	dsp->bin_file_name = NULL;
  }
  
 -static ssize_t cs_dsp_debugfs_wmfw_read(struct file *file,
 -					char __user *user_buf,
 -					size_t count, loff_t *ppos)
 +static ssize_t wm_adsp_debugfs_wmfw_read(struct file *file,
 +					 char __user *user_buf,
 +					 size_t count, loff_t *ppos)
  {
- 	struct wm_adsp *dsp = file->private_data;
+ 	struct cs_dsp *dsp = file->private_data;
  	ssize_t ret;
  
  	mutex_lock(&dsp->pwr_lock);
@@@ -685,11 -682,11 +697,11 @@@
  	return ret;
  }
  
 -static ssize_t cs_dsp_debugfs_bin_read(struct file *file,
 -				       char __user *user_buf,
 -				       size_t count, loff_t *ppos)
 +static ssize_t wm_adsp_debugfs_bin_read(struct file *file,
 +					char __user *user_buf,
 +					size_t count, loff_t *ppos)
  {
- 	struct wm_adsp *dsp = file->private_data;
+ 	struct cs_dsp *dsp = file->private_data;
  	ssize_t ret;
  
  	mutex_lock(&dsp->pwr_lock);
@@@ -725,8 -722,8 +737,13 @@@ static const struct 
  	},
  };
  
++<<<<<<< HEAD
 +static void wm_adsp2_init_debugfs(struct wm_adsp *dsp,
 +				  struct snd_soc_component *component)
++=======
+ static void cs_dsp_init_debugfs(struct cs_dsp *dsp,
+ 				struct dentry *debugfs_root)
++>>>>>>> e14682021591 (ASoC: wm_adsp: Split out struct cs_dsp from struct wm_adsp)
  {
  	struct dentry *root = NULL;
  	int i;
@@@ -745,33 -742,33 +762,59 @@@
  	dsp->debugfs_root = root;
  }
  
++<<<<<<< HEAD
 +static void wm_adsp2_cleanup_debugfs(struct wm_adsp *dsp)
++=======
+ static void cs_dsp_cleanup_debugfs(struct cs_dsp *dsp)
++>>>>>>> e14682021591 (ASoC: wm_adsp: Split out struct cs_dsp from struct wm_adsp)
  {
 -	cs_dsp_debugfs_clear(dsp);
 +	wm_adsp_debugfs_clear(dsp);
  	debugfs_remove_recursive(dsp->debugfs_root);
  	dsp->debugfs_root = NULL;
  }
  #else
++<<<<<<< HEAD
 +static inline void wm_adsp2_init_debugfs(struct wm_adsp *dsp,
 +					 struct snd_soc_component *component)
 +{
 +}
 +
 +static inline void wm_adsp2_cleanup_debugfs(struct wm_adsp *dsp)
 +{
 +}
 +
 +static inline void wm_adsp_debugfs_save_wmfwname(struct wm_adsp *dsp,
 +						 const char *s)
 +{
 +}
 +
 +static inline void wm_adsp_debugfs_save_binname(struct wm_adsp *dsp,
++=======
+ static inline void cs_dsp_init_debugfs(struct cs_dsp *dsp,
+ 				       struct dentry *debugfs_root)
+ {
+ }
+ 
+ static inline void cs_dsp_cleanup_debugfs(struct cs_dsp *dsp)
+ {
+ }
+ 
+ static inline void cs_dsp_debugfs_save_wmfwname(struct cs_dsp *dsp,
++>>>>>>> e14682021591 (ASoC: wm_adsp: Split out struct cs_dsp from struct wm_adsp)
  						const char *s)
  {
  }
  
++<<<<<<< HEAD
 +static inline void wm_adsp_debugfs_clear(struct wm_adsp *dsp)
++=======
+ static inline void cs_dsp_debugfs_save_binname(struct cs_dsp *dsp,
+ 					       const char *s)
+ {
+ }
+ 
+ static inline void cs_dsp_debugfs_clear(struct cs_dsp *dsp)
++>>>>>>> e14682021591 (ASoC: wm_adsp: Split out struct cs_dsp from struct wm_adsp)
  {
  }
  #endif
@@@ -827,8 -824,8 +870,13 @@@ const struct soc_enum wm_adsp_fw_enum[
  };
  EXPORT_SYMBOL_GPL(wm_adsp_fw_enum);
  
++<<<<<<< HEAD
 +static const struct wm_adsp_region *wm_adsp_find_region(struct wm_adsp *dsp,
 +							int type)
++=======
+ static const struct cs_dsp_region *cs_dsp_find_region(struct cs_dsp *dsp,
+ 						      int type)
++>>>>>>> e14682021591 (ASoC: wm_adsp: Split out struct cs_dsp from struct wm_adsp)
  {
  	int i;
  
@@@ -874,8 -871,8 +922,13 @@@ static unsigned int wm_halo_region_to_r
  	}
  }
  
++<<<<<<< HEAD
 +static void wm_adsp_read_fw_status(struct wm_adsp *dsp,
 +				   int noffs, unsigned int *offs)
++=======
+ static void cs_dsp_read_fw_status(struct cs_dsp *dsp,
+ 				  int noffs, unsigned int *offs)
++>>>>>>> e14682021591 (ASoC: wm_adsp: Split out struct cs_dsp from struct wm_adsp)
  {
  	unsigned int i;
  	int ret;
@@@ -889,30 -886,30 +942,42 @@@
  	}
  }
  
++<<<<<<< HEAD
 +static void wm_adsp2_show_fw_status(struct wm_adsp *dsp)
++=======
+ static void cs_dsp_adsp2_show_fw_status(struct cs_dsp *dsp)
++>>>>>>> e14682021591 (ASoC: wm_adsp: Split out struct cs_dsp from struct wm_adsp)
  {
  	unsigned int offs[] = {
  		ADSP2_SCRATCH0, ADSP2_SCRATCH1, ADSP2_SCRATCH2, ADSP2_SCRATCH3,
  	};
  
 -	cs_dsp_read_fw_status(dsp, ARRAY_SIZE(offs), offs);
 +	wm_adsp_read_fw_status(dsp, ARRAY_SIZE(offs), offs);
  
 -	cs_dsp_dbg(dsp, "FW SCRATCH 0:0x%x 1:0x%x 2:0x%x 3:0x%x\n",
 -		   offs[0], offs[1], offs[2], offs[3]);
 +	adsp_dbg(dsp, "FW SCRATCH 0:0x%x 1:0x%x 2:0x%x 3:0x%x\n",
 +		 offs[0], offs[1], offs[2], offs[3]);
  }
  
++<<<<<<< HEAD
 +static void wm_adsp2v2_show_fw_status(struct wm_adsp *dsp)
++=======
+ static void cs_dsp_adsp2v2_show_fw_status(struct cs_dsp *dsp)
++>>>>>>> e14682021591 (ASoC: wm_adsp: Split out struct cs_dsp from struct wm_adsp)
  {
  	unsigned int offs[] = { ADSP2V2_SCRATCH0_1, ADSP2V2_SCRATCH2_3 };
  
 -	cs_dsp_read_fw_status(dsp, ARRAY_SIZE(offs), offs);
 +	wm_adsp_read_fw_status(dsp, ARRAY_SIZE(offs), offs);
  
 -	cs_dsp_dbg(dsp, "FW SCRATCH 0:0x%x 1:0x%x 2:0x%x 3:0x%x\n",
 -		   offs[0] & 0xFFFF, offs[0] >> 16,
 -		   offs[1] & 0xFFFF, offs[1] >> 16);
 +	adsp_dbg(dsp, "FW SCRATCH 0:0x%x 1:0x%x 2:0x%x 3:0x%x\n",
 +		 offs[0] & 0xFFFF, offs[0] >> 16,
 +		 offs[1] & 0xFFFF, offs[1] >> 16);
  }
  
++<<<<<<< HEAD
 +static void wm_halo_show_fw_status(struct wm_adsp *dsp)
++=======
+ static void cs_dsp_halo_show_fw_status(struct cs_dsp *dsp)
++>>>>>>> e14682021591 (ASoC: wm_adsp: Split out struct cs_dsp from struct wm_adsp)
  {
  	unsigned int offs[] = {
  		HALO_SCRATCH1, HALO_SCRATCH2, HALO_SCRATCH3, HALO_SCRATCH4,
@@@ -929,16 -926,16 +994,22 @@@ static inline struct wm_coeff_ctl *byte
  	return container_of(ext, struct wm_coeff_ctl, bytes_ext);
  }
  
 -static int cs_dsp_coeff_base_reg(struct cs_dsp_coeff_ctl *ctl, unsigned int *reg)
 +static int wm_coeff_base_reg(struct wm_coeff_ctl *ctl, unsigned int *reg)
  {
++<<<<<<< HEAD
 +	const struct wm_adsp_alg_region *alg_region = &ctl->alg_region;
 +	struct wm_adsp *dsp = ctl->dsp;
 +	const struct wm_adsp_region *mem;
++=======
+ 	const struct cs_dsp_alg_region *alg_region = &ctl->alg_region;
+ 	struct cs_dsp *dsp = ctl->dsp;
+ 	const struct cs_dsp_region *mem;
++>>>>>>> e14682021591 (ASoC: wm_adsp: Split out struct cs_dsp from struct wm_adsp)
  
 -	mem = cs_dsp_find_region(dsp, alg_region->type);
 +	mem = wm_adsp_find_region(dsp, alg_region->type);
  	if (!mem) {
 -		cs_dsp_err(dsp, "No base for region %x\n",
 -			   alg_region->type);
 +		adsp_err(dsp, "No base for region %x\n",
 +			 alg_region->type);
  		return -EINVAL;
  	}
  
@@@ -971,10 -969,10 +1042,10 @@@ static int wm_coeff_info(struct snd_kco
  	return 0;
  }
  
 -static int cs_dsp_coeff_write_acked_control(struct cs_dsp_coeff_ctl *ctl,
 -					    unsigned int event_id)
 +static int wm_coeff_write_acked_control(struct wm_coeff_ctl *ctl,
 +					unsigned int event_id)
  {
- 	struct wm_adsp *dsp = ctl->dsp;
+ 	struct cs_dsp *dsp = ctl->dsp;
  	__be32 val = cpu_to_be32(event_id);
  	unsigned int reg;
  	int i, ret;
@@@ -1031,10 -1032,10 +1102,10 @@@
  	return -ETIMEDOUT;
  }
  
 -static int cs_dsp_coeff_write_ctrl_raw(struct cs_dsp_coeff_ctl *ctl,
 -				       const void *buf, size_t len)
 +static int wm_coeff_write_ctrl_raw(struct wm_coeff_ctl *ctl,
 +				   const void *buf, size_t len)
  {
- 	struct wm_adsp *dsp = ctl->dsp;
+ 	struct cs_dsp *dsp = ctl->dsp;
  	void *scratch;
  	int ret;
  	unsigned int reg;
@@@ -1139,10 -1143,10 +1210,10 @@@ static int wm_coeff_put_acked(struct sn
  	return ret;
  }
  
 -static int cs_dsp_coeff_read_ctrl_raw(struct cs_dsp_coeff_ctl *ctl,
 -				      void *buf, size_t len)
 +static int wm_coeff_read_ctrl_raw(struct wm_coeff_ctl *ctl,
 +				  void *buf, size_t len)
  {
- 	struct wm_adsp *dsp = ctl->dsp;
+ 	struct cs_dsp *dsp = ctl->dsp;
  	void *scratch;
  	int ret;
  	unsigned int reg;
@@@ -1321,9 -1325,9 +1392,13 @@@ err_kcontrol
  	return ret;
  }
  
++<<<<<<< HEAD
 +static int wm_coeff_init_control_caches(struct wm_adsp *dsp)
++=======
+ static int cs_dsp_coeff_init_control_caches(struct cs_dsp *dsp)
++>>>>>>> e14682021591 (ASoC: wm_adsp: Split out struct cs_dsp from struct wm_adsp)
  {
 -	struct cs_dsp_coeff_ctl *ctl;
 +	struct wm_coeff_ctl *ctl;
  	int ret;
  
  	list_for_each_entry(ctl, &dsp->ctl_list, list) {
@@@ -1347,9 -1351,9 +1422,13 @@@
  	return 0;
  }
  
++<<<<<<< HEAD
 +static int wm_coeff_sync_controls(struct wm_adsp *dsp)
++=======
+ static int cs_dsp_coeff_sync_controls(struct cs_dsp *dsp)
++>>>>>>> e14682021591 (ASoC: wm_adsp: Split out struct cs_dsp from struct wm_adsp)
  {
 -	struct cs_dsp_coeff_ctl *ctl;
 +	struct wm_coeff_ctl *ctl;
  	int ret;
  
  	list_for_each_entry(ctl, &dsp->ctl_list, list) {
@@@ -1366,10 -1370,10 +1445,15 @@@
  	return 0;
  }
  
++<<<<<<< HEAD
 +static void wm_adsp_signal_event_controls(struct wm_adsp *dsp,
 +					  unsigned int event)
++=======
+ static void cs_dsp_signal_event_controls(struct cs_dsp *dsp,
+ 					 unsigned int event)
++>>>>>>> e14682021591 (ASoC: wm_adsp: Split out struct cs_dsp from struct wm_adsp)
  {
 -	struct cs_dsp_coeff_ctl *ctl;
 +	struct wm_coeff_ctl *ctl;
  	int ret;
  
  	list_for_each_entry(ctl, &dsp->ctl_list, list) {
@@@ -1392,33 -1396,116 +1476,134 @@@ static void wm_adsp_ctl_work(struct wor
  	struct wm_coeff_ctl *ctl = container_of(work,
  						struct wm_coeff_ctl,
  						work);
++<<<<<<< HEAD
 +
 +	wmfw_add_ctl(ctl->dsp, ctl);
++=======
+ 	struct wm_adsp *dsp = container_of(ctl->cs_ctl->dsp,
+ 					   struct wm_adsp,
+ 					   cs_dsp);
+ 
+ 	wmfw_add_ctl(dsp, ctl);
++>>>>>>> e14682021591 (ASoC: wm_adsp: Split out struct cs_dsp from struct wm_adsp)
  }
  
 -static void cs_dsp_free_ctl_blk(struct cs_dsp_coeff_ctl *ctl)
 +static void wm_adsp_free_ctl_blk(struct wm_coeff_ctl *ctl)
  {
 +	cancel_work_sync(&ctl->work);
 +
  	kfree(ctl->cache);
 +	kfree(ctl->name);
  	kfree(ctl->subname);
  	kfree(ctl);
  }
  
 -static int wm_adsp_control_add(struct cs_dsp_coeff_ctl *cs_ctl)
 +static int wm_adsp_create_control(struct wm_adsp *dsp,
 +				  const struct wm_adsp_alg_region *alg_region,
 +				  unsigned int offset, unsigned int len,
 +				  const char *subname, unsigned int subname_len,
 +				  unsigned int flags, unsigned int type)
  {
++<<<<<<< HEAD
++=======
+ 	struct wm_adsp *dsp = container_of(cs_ctl->dsp, struct wm_adsp, cs_dsp);
+ 	struct cs_dsp *cs_dsp = &dsp->cs_dsp;
++>>>>>>> e14682021591 (ASoC: wm_adsp: Split out struct cs_dsp from struct wm_adsp)
  	struct wm_coeff_ctl *ctl;
  	char name[SNDRV_CTL_ELEM_ID_NAME_MAXLEN];
  	const char *region_name;
  	int ret;
  
++<<<<<<< HEAD
++=======
+ 	if (cs_ctl->flags & WMFW_CTL_FLAG_SYS)
+ 		return 0;
+ 
+ 	region_name = cs_dsp_mem_region_name(cs_ctl->alg_region.type);
+ 	if (!region_name) {
+ 		adsp_err(dsp, "Unknown region type: %d\n", cs_ctl->alg_region.type);
+ 		return -EINVAL;
+ 	}
+ 
+ 	switch (cs_dsp->fw_ver) {
+ 	case 0:
+ 	case 1:
+ 		snprintf(name, SNDRV_CTL_ELEM_ID_NAME_MAXLEN, "%s %s %x",
+ 			 cs_dsp->name, region_name, cs_ctl->alg_region.alg);
+ 		break;
+ 	case 2:
+ 		ret = scnprintf(name, SNDRV_CTL_ELEM_ID_NAME_MAXLEN,
+ 				"%s%c %.12s %x", cs_dsp->name, *region_name,
+ 				wm_adsp_fw_text[dsp->fw], cs_ctl->alg_region.alg);
+ 		break;
+ 	default:
+ 		ret = scnprintf(name, SNDRV_CTL_ELEM_ID_NAME_MAXLEN,
+ 				"%s %.12s %x", cs_dsp->name,
+ 				wm_adsp_fw_text[dsp->fw], cs_ctl->alg_region.alg);
+ 		break;
+ 	}
+ 
+ 	if (cs_ctl->subname) {
+ 		int avail = SNDRV_CTL_ELEM_ID_NAME_MAXLEN - ret - 2;
+ 		int skip = 0;
+ 
+ 		if (dsp->component->name_prefix)
+ 			avail -= strlen(dsp->component->name_prefix) + 1;
+ 
+ 		/* Truncate the subname from the start if it is too long */
+ 		if (cs_ctl->subname_len > avail)
+ 			skip = cs_ctl->subname_len - avail;
+ 
+ 		snprintf(name + ret, SNDRV_CTL_ELEM_ID_NAME_MAXLEN - ret,
+ 			 " %.*s", cs_ctl->subname_len - skip, cs_ctl->subname + skip);
+ 	}
+ 
+ 	ctl = kzalloc(sizeof(*ctl), GFP_KERNEL);
+ 	if (!ctl)
+ 		return -ENOMEM;
+ 	ctl->cs_ctl = cs_ctl;
+ 
+ 	ctl->name = kmemdup(name, strlen(name) + 1, GFP_KERNEL);
+ 	if (!ctl->name) {
+ 		ret = -ENOMEM;
+ 		goto err_ctl;
+ 	}
+ 
+ 	cs_ctl->priv = ctl;
+ 
+ 	INIT_WORK(&ctl->work, wm_adsp_ctl_work);
+ 	schedule_work(&ctl->work);
+ 
+ 	return 0;
+ 
+ err_ctl:
+ 	kfree(ctl);
+ 
+ 	return ret;
+ }
+ 
+ static void wm_adsp_control_remove(struct cs_dsp_coeff_ctl *cs_ctl)
+ {
+ 	struct wm_coeff_ctl *ctl = cs_ctl->priv;
+ 
+ 	cancel_work_sync(&ctl->work);
+ 
+ 	kfree(ctl->name);
+ 	kfree(ctl);
+ }
+ 
+ static int cs_dsp_create_control(struct cs_dsp *dsp,
+ 				 const struct cs_dsp_alg_region *alg_region,
+ 				 unsigned int offset, unsigned int len,
+ 				 const char *subname, unsigned int subname_len,
+ 				 unsigned int flags, unsigned int type)
+ {
+ 	struct cs_dsp_coeff_ctl *ctl;
+ 	int ret;
+ 
++>>>>>>> e14682021591 (ASoC: wm_adsp: Split out struct cs_dsp from struct wm_adsp)
  	list_for_each_entry(ctl, &dsp->ctl_list, list) {
 -		if (ctl->fw_name == dsp->fw_name &&
 +		if (ctl->fw_name == wm_adsp_fw_text[dsp->fw] &&
  		    ctl->alg_region.alg == alg_region->alg &&
  		    ctl->alg_region.type == alg_region->type) {
  			if ((!subname && !ctl->subname) ||
@@@ -1583,8 -1625,8 +1768,13 @@@ static int wm_coeff_parse_int(int bytes
  	return val;
  }
  
++<<<<<<< HEAD
 +static inline void wm_coeff_parse_alg(struct wm_adsp *dsp, const u8 **data,
 +				      struct wm_coeff_parsed_alg *blk)
++=======
+ static inline void cs_dsp_coeff_parse_alg(struct cs_dsp *dsp, const u8 **data,
+ 					  struct cs_dsp_coeff_parsed_alg *blk)
++>>>>>>> e14682021591 (ASoC: wm_adsp: Split out struct cs_dsp from struct wm_adsp)
  {
  	const struct wmfw_adsp_alg_data *raw;
  
@@@ -1608,13 -1650,13 +1798,18 @@@
  		break;
  	}
  
 -	cs_dsp_dbg(dsp, "Algorithm ID: %#x\n", blk->id);
 -	cs_dsp_dbg(dsp, "Algorithm name: %.*s\n", blk->name_len, blk->name);
 -	cs_dsp_dbg(dsp, "# of coefficient descriptors: %#x\n", blk->ncoeff);
 +	adsp_dbg(dsp, "Algorithm ID: %#x\n", blk->id);
 +	adsp_dbg(dsp, "Algorithm name: %.*s\n", blk->name_len, blk->name);
 +	adsp_dbg(dsp, "# of coefficient descriptors: %#x\n", blk->ncoeff);
  }
  
++<<<<<<< HEAD
 +static inline void wm_coeff_parse_coeff(struct wm_adsp *dsp, const u8 **data,
 +					struct wm_coeff_parsed_coeff *blk)
++=======
+ static inline void cs_dsp_coeff_parse_coeff(struct cs_dsp *dsp, const u8 **data,
+ 					    struct cs_dsp_coeff_parsed_coeff *blk)
++>>>>>>> e14682021591 (ASoC: wm_adsp: Split out struct cs_dsp from struct wm_adsp)
  {
  	const struct wmfw_adsp_coeff_data *raw;
  	const u8 *tmp;
@@@ -1651,18 -1693,18 +1846,25 @@@
  		break;
  	}
  
 -	cs_dsp_dbg(dsp, "\tCoefficient type: %#x\n", blk->mem_type);
 -	cs_dsp_dbg(dsp, "\tCoefficient offset: %#x\n", blk->offset);
 -	cs_dsp_dbg(dsp, "\tCoefficient name: %.*s\n", blk->name_len, blk->name);
 -	cs_dsp_dbg(dsp, "\tCoefficient flags: %#x\n", blk->flags);
 -	cs_dsp_dbg(dsp, "\tALSA control type: %#x\n", blk->ctl_type);
 -	cs_dsp_dbg(dsp, "\tALSA control len: %#x\n", blk->len);
 +	adsp_dbg(dsp, "\tCoefficient type: %#x\n", blk->mem_type);
 +	adsp_dbg(dsp, "\tCoefficient offset: %#x\n", blk->offset);
 +	adsp_dbg(dsp, "\tCoefficient name: %.*s\n", blk->name_len, blk->name);
 +	adsp_dbg(dsp, "\tCoefficient flags: %#x\n", blk->flags);
 +	adsp_dbg(dsp, "\tALSA control type: %#x\n", blk->ctl_type);
 +	adsp_dbg(dsp, "\tALSA control len: %#x\n", blk->len);
  }
  
++<<<<<<< HEAD
 +static int wm_adsp_check_coeff_flags(struct wm_adsp *dsp,
 +				const struct wm_coeff_parsed_coeff *coeff_blk,
 +				unsigned int f_required,
 +				unsigned int f_illegal)
++=======
+ static int cs_dsp_check_coeff_flags(struct cs_dsp *dsp,
+ 				    const struct cs_dsp_coeff_parsed_coeff *coeff_blk,
+ 				    unsigned int f_required,
+ 				    unsigned int f_illegal)
++>>>>>>> e14682021591 (ASoC: wm_adsp: Split out struct cs_dsp from struct wm_adsp)
  {
  	if ((coeff_blk->flags & f_illegal) ||
  	    ((coeff_blk->flags & f_required) != f_required)) {
@@@ -1674,12 -1716,12 +1876,17 @@@
  	return 0;
  }
  
++<<<<<<< HEAD
 +static int wm_adsp_parse_coeff(struct wm_adsp *dsp,
 +			       const struct wmfw_region *region)
++=======
+ static int cs_dsp_parse_coeff(struct cs_dsp *dsp,
+ 			      const struct wmfw_region *region)
++>>>>>>> e14682021591 (ASoC: wm_adsp: Split out struct cs_dsp from struct wm_adsp)
  {
 -	struct cs_dsp_alg_region alg_region = {};
 -	struct cs_dsp_coeff_parsed_alg alg_blk;
 -	struct cs_dsp_coeff_parsed_coeff coeff_blk;
 +	struct wm_adsp_alg_region alg_region = {};
 +	struct wm_coeff_parsed_alg alg_blk;
 +	struct wm_coeff_parsed_coeff coeff_blk;
  	const u8 *data = region->data;
  	int i, ret;
  
@@@ -1745,10 -1787,10 +1952,17 @@@
  	return 0;
  }
  
++<<<<<<< HEAD
 +static unsigned int wm_adsp1_parse_sizes(struct wm_adsp *dsp,
 +					 const char * const file,
 +					 unsigned int pos,
 +					 const struct firmware *firmware)
++=======
+ static unsigned int cs_dsp_adsp1_parse_sizes(struct cs_dsp *dsp,
+ 					     const char * const file,
+ 					     unsigned int pos,
+ 					     const struct firmware *firmware)
++>>>>>>> e14682021591 (ASoC: wm_adsp: Split out struct cs_dsp from struct wm_adsp)
  {
  	const struct wmfw_adsp1_sizes *adsp1_sizes;
  
@@@ -1761,10 -1803,65 +1975,72 @@@
  	return pos + sizeof(*adsp1_sizes);
  }
  
++<<<<<<< HEAD
 +static unsigned int wm_adsp2_parse_sizes(struct wm_adsp *dsp,
 +					 const char * const file,
 +					 unsigned int pos,
 +					 const struct firmware *firmware)
++=======
+ static void wm_adsp_release_firmware_files(struct wm_adsp *dsp,
+ 					   const struct firmware *wmfw_firmware,
+ 					   char *wmfw_filename,
+ 					   const struct firmware *coeff_firmware,
+ 					   char *coeff_filename)
+ {
+ 	if (wmfw_firmware)
+ 		release_firmware(wmfw_firmware);
+ 	kfree(wmfw_filename);
+ 
+ 	if (coeff_firmware)
+ 		release_firmware(coeff_firmware);
+ 	kfree(coeff_filename);
+ }
+ 
+ static int wm_adsp_request_firmware_file(struct wm_adsp *dsp,
+ 					 const struct firmware **firmware,
+ 					 char **filename,
+ 					 char *suffix)
+ {
+ 	struct cs_dsp *cs_dsp = &dsp->cs_dsp;
+ 	int ret = 0;
+ 
+ 	*filename = kasprintf(GFP_KERNEL, "%s-%s-%s.%s", dsp->part, dsp->fwf_name,
+ 			      wm_adsp_fw[dsp->fw].file, suffix);
+ 	if (*filename == NULL)
+ 		return -ENOMEM;
+ 
+ 	ret = request_firmware(firmware, *filename, cs_dsp->dev);
+ 	if (ret != 0) {
+ 		adsp_err(dsp, "Failed to request '%s'\n", *filename);
+ 		kfree(*filename);
+ 		*filename = NULL;
+ 	}
+ 
+ 	return ret;
+ }
+ 
+ static int wm_adsp_request_firmware_files(struct wm_adsp *dsp,
+ 					  const struct firmware **wmfw_firmware,
+ 					  char **wmfw_filename,
+ 					  const struct firmware **coeff_firmware,
+ 					  char **coeff_filename)
+ {
+ 	int ret = 0;
+ 
+ 	ret = wm_adsp_request_firmware_file(dsp, wmfw_firmware, wmfw_filename, "wmfw");
+ 	if (ret != 0)
+ 		return ret;
+ 
+ 	wm_adsp_request_firmware_file(dsp, coeff_firmware, coeff_filename, "bin");
+ 
+ 	return 0;
+ }
+ 
+ static unsigned int cs_dsp_adsp2_parse_sizes(struct cs_dsp *dsp,
+ 					     const char * const file,
+ 					     unsigned int pos,
+ 					     const struct firmware *firmware)
++>>>>>>> e14682021591 (ASoC: wm_adsp: Split out struct cs_dsp from struct wm_adsp)
  {
  	const struct wmfw_adsp2_sizes *adsp2_sizes;
  
@@@ -1777,7 -1874,7 +2053,11 @@@
  	return pos + sizeof(*adsp2_sizes);
  }
  
++<<<<<<< HEAD
 +static bool wm_adsp_validate_version(struct wm_adsp *dsp, unsigned int version)
++=======
+ static bool cs_dsp_validate_version(struct cs_dsp *dsp, unsigned int version)
++>>>>>>> e14682021591 (ASoC: wm_adsp: Split out struct cs_dsp from struct wm_adsp)
  {
  	switch (version) {
  	case 0:
@@@ -1791,7 -1888,7 +2071,11 @@@
  	}
  }
  
++<<<<<<< HEAD
 +static bool wm_halo_validate_version(struct wm_adsp *dsp, unsigned int version)
++=======
+ static bool cs_dsp_halo_validate_version(struct cs_dsp *dsp, unsigned int version)
++>>>>>>> e14682021591 (ASoC: wm_adsp: Split out struct cs_dsp from struct wm_adsp)
  {
  	switch (version) {
  	case 3:
@@@ -1801,10 -1898,10 +2085,15 @@@
  	}
  }
  
++<<<<<<< HEAD
 +static int wm_adsp_load(struct wm_adsp *dsp)
++=======
+ static int cs_dsp_load(struct cs_dsp *dsp, const struct firmware *firmware,
+ 		       const char *file)
++>>>>>>> e14682021591 (ASoC: wm_adsp: Split out struct cs_dsp from struct wm_adsp)
  {
  	LIST_HEAD(buf_list);
 +	const struct firmware *firmware;
  	struct regmap *regmap = dsp->regmap;
  	unsigned int pos = 0;
  	const struct wmfw_header *header;
@@@ -2004,15 -2085,14 +2293,21 @@@ out
  }
  
  /*
 - * Find cs_dsp_coeff_ctl with input name as its subname
 + * Find wm_coeff_ctl with input name as its subname
   * If not found, return NULL
   */
++<<<<<<< HEAD
 +static struct wm_coeff_ctl *wm_adsp_get_ctl(struct wm_adsp *dsp,
 +					     const char *name, int type,
 +					     unsigned int alg)
++=======
+ static struct cs_dsp_coeff_ctl *cs_dsp_get_ctl(struct cs_dsp *dsp,
+ 					       const char *name, int type,
+ 					       unsigned int alg)
++>>>>>>> e14682021591 (ASoC: wm_adsp: Split out struct cs_dsp from struct wm_adsp)
  {
 -	struct cs_dsp_coeff_ctl *pos, *rslt = NULL;
 +	struct wm_coeff_ctl *pos, *rslt = NULL;
 +	const char *fw_txt = wm_adsp_fw_text[dsp->fw];
  
  	list_for_each_entry(pos, &dsp->ctl_list, list) {
  		if (!pos->subname)
@@@ -2037,14 -2118,16 +2332,19 @@@ int wm_adsp_write_ctl(struct wm_adsp *d
  	char ctl_name[SNDRV_CTL_ELEM_ID_NAME_MAXLEN];
  	int ret;
  
++<<<<<<< HEAD
 +	ctl = wm_adsp_get_ctl(dsp, name, type, alg);
 +	if (!ctl)
++=======
+ 	cs_ctl = cs_dsp_get_ctl(&dsp->cs_dsp, name, type, alg);
+ 	if (!cs_ctl)
++>>>>>>> e14682021591 (ASoC: wm_adsp: Split out struct cs_dsp from struct wm_adsp)
  		return -EINVAL;
  
 -	ctl = cs_ctl->priv;
 -
 -	if (len > cs_ctl->len)
 +	if (len > ctl->len)
  		return -EINVAL;
  
 -	ret = cs_dsp_coeff_write_ctrl(cs_ctl, buf, len);
 +	ret = wm_coeff_write_ctrl(ctl, buf, len);
  	if (ret)
  		return ret;
  
@@@ -2074,26 -2157,26 +2374,36 @@@ EXPORT_SYMBOL_GPL(wm_adsp_write_ctl)
  int wm_adsp_read_ctl(struct wm_adsp *dsp, const char *name, int type,
  		     unsigned int alg, void *buf, size_t len)
  {
 -	struct cs_dsp_coeff_ctl *cs_ctl;
 +	struct wm_coeff_ctl *ctl;
  
++<<<<<<< HEAD
 +	ctl = wm_adsp_get_ctl(dsp, name, type, alg);
 +	if (!ctl)
++=======
+ 	cs_ctl = cs_dsp_get_ctl(&dsp->cs_dsp, name, type, alg);
+ 	if (!cs_ctl)
++>>>>>>> e14682021591 (ASoC: wm_adsp: Split out struct cs_dsp from struct wm_adsp)
  		return -EINVAL;
  
 -	if (len > cs_ctl->len)
 +	if (len > ctl->len)
  		return -EINVAL;
  
 -	return cs_dsp_coeff_read_ctrl(cs_ctl, buf, len);
 +	return wm_coeff_read_ctrl(ctl, buf, len);
  }
  EXPORT_SYMBOL_GPL(wm_adsp_read_ctl);
  
++<<<<<<< HEAD
 +static void wm_adsp_ctl_fixup_base(struct wm_adsp *dsp,
 +				  const struct wm_adsp_alg_region *alg_region)
++=======
+ static void cs_dsp_ctl_fixup_base(struct cs_dsp *dsp,
+ 				  const struct cs_dsp_alg_region *alg_region)
++>>>>>>> e14682021591 (ASoC: wm_adsp: Split out struct cs_dsp from struct wm_adsp)
  {
 -	struct cs_dsp_coeff_ctl *ctl;
 +	struct wm_coeff_ctl *ctl;
  
  	list_for_each_entry(ctl, &dsp->ctl_list, list) {
 -		if (ctl->fw_name == dsp->fw_name &&
 +		if (ctl->fw_name == wm_adsp_fw_text[dsp->fw] &&
  		    alg_region->alg == ctl->alg_region.alg &&
  		    alg_region->type == ctl->alg_region.type) {
  			ctl->alg_region.base = alg_region->base;
@@@ -2101,9 -2184,9 +2411,15 @@@
  	}
  }
  
++<<<<<<< HEAD
 +static void *wm_adsp_read_algs(struct wm_adsp *dsp, size_t n_algs,
 +			       const struct wm_adsp_region *mem,
 +			       unsigned int pos, unsigned int len)
++=======
+ static void *cs_dsp_read_algs(struct cs_dsp *dsp, size_t n_algs,
+ 			      const struct cs_dsp_region *mem,
+ 			      unsigned int pos, unsigned int len)
++>>>>>>> e14682021591 (ASoC: wm_adsp: Split out struct cs_dsp from struct wm_adsp)
  {
  	void *alg;
  	unsigned int reg;
@@@ -2153,10 -2236,10 +2469,15 @@@
  	return alg;
  }
  
++<<<<<<< HEAD
 +static struct wm_adsp_alg_region *
 +	wm_adsp_find_alg_region(struct wm_adsp *dsp, int type, unsigned int id)
++=======
+ static struct cs_dsp_alg_region *
+ 	cs_dsp_find_alg_region(struct cs_dsp *dsp, int type, unsigned int id)
++>>>>>>> e14682021591 (ASoC: wm_adsp: Split out struct cs_dsp from struct wm_adsp)
  {
 -	struct cs_dsp_alg_region *alg_region;
 +	struct wm_adsp_alg_region *alg_region;
  
  	list_for_each_entry(alg_region, &dsp->alg_regions, list) {
  		if (id == alg_region->alg && type == alg_region->type)
@@@ -2166,11 -2249,11 +2487,17 @@@
  	return NULL;
  }
  
++<<<<<<< HEAD
 +static struct wm_adsp_alg_region *wm_adsp_create_region(struct wm_adsp *dsp,
 +							int type, __be32 id,
 +							__be32 base)
++=======
+ static struct cs_dsp_alg_region *cs_dsp_create_region(struct cs_dsp *dsp,
+ 						      int type, __be32 id,
+ 						      __be32 base)
++>>>>>>> e14682021591 (ASoC: wm_adsp: Split out struct cs_dsp from struct wm_adsp)
  {
 -	struct cs_dsp_alg_region *alg_region;
 +	struct wm_adsp_alg_region *alg_region;
  
  	alg_region = kzalloc(sizeof(*alg_region), GFP_KERNEL);
  	if (!alg_region)
@@@ -2188,9 -2271,9 +2515,13 @@@
  	return alg_region;
  }
  
++<<<<<<< HEAD
 +static void wm_adsp_free_alg_regions(struct wm_adsp *dsp)
++=======
+ static void cs_dsp_free_alg_regions(struct cs_dsp *dsp)
++>>>>>>> e14682021591 (ASoC: wm_adsp: Split out struct cs_dsp from struct wm_adsp)
  {
 -	struct cs_dsp_alg_region *alg_region;
 +	struct wm_adsp_alg_region *alg_region;
  
  	while (!list_empty(&dsp->alg_regions)) {
  		alg_region = list_first_entry(&dsp->alg_regions,
@@@ -2201,36 -2284,36 +2532,51 @@@
  	}
  }
  
++<<<<<<< HEAD
 +static void wmfw_parse_id_header(struct wm_adsp *dsp,
 +				 struct wmfw_id_hdr *fw, int nalgs)
++=======
+ static void cs_dsp_parse_wmfw_id_header(struct cs_dsp *dsp,
+ 					struct wmfw_id_hdr *fw, int nalgs)
++>>>>>>> e14682021591 (ASoC: wm_adsp: Split out struct cs_dsp from struct wm_adsp)
  {
  	dsp->fw_id = be32_to_cpu(fw->id);
  	dsp->fw_id_version = be32_to_cpu(fw->ver);
  
 -	cs_dsp_info(dsp, "Firmware: %x v%d.%d.%d, %d algorithms\n",
 -		    dsp->fw_id, (dsp->fw_id_version & 0xff0000) >> 16,
 -		    (dsp->fw_id_version & 0xff00) >> 8, dsp->fw_id_version & 0xff,
 -		    nalgs);
 +	adsp_info(dsp, "Firmware: %x v%d.%d.%d, %d algorithms\n",
 +		  dsp->fw_id, (dsp->fw_id_version & 0xff0000) >> 16,
 +		  (dsp->fw_id_version & 0xff00) >> 8, dsp->fw_id_version & 0xff,
 +		  nalgs);
  }
  
++<<<<<<< HEAD
 +static void wmfw_v3_parse_id_header(struct wm_adsp *dsp,
 +				    struct wmfw_v3_id_hdr *fw, int nalgs)
++=======
+ static void cs_dsp_parse_wmfw_v3_id_header(struct cs_dsp *dsp,
+ 					   struct wmfw_v3_id_hdr *fw, int nalgs)
++>>>>>>> e14682021591 (ASoC: wm_adsp: Split out struct cs_dsp from struct wm_adsp)
  {
  	dsp->fw_id = be32_to_cpu(fw->id);
  	dsp->fw_id_version = be32_to_cpu(fw->ver);
  	dsp->fw_vendor_id = be32_to_cpu(fw->vendor_id);
  
 -	cs_dsp_info(dsp, "Firmware: %x vendor: 0x%x v%d.%d.%d, %d algorithms\n",
 -		    dsp->fw_id, dsp->fw_vendor_id,
 -		    (dsp->fw_id_version & 0xff0000) >> 16,
 -		    (dsp->fw_id_version & 0xff00) >> 8, dsp->fw_id_version & 0xff,
 -		    nalgs);
 +	adsp_info(dsp, "Firmware: %x vendor: 0x%x v%d.%d.%d, %d algorithms\n",
 +		  dsp->fw_id, dsp->fw_vendor_id,
 +		  (dsp->fw_id_version & 0xff0000) >> 16,
 +		  (dsp->fw_id_version & 0xff00) >> 8, dsp->fw_id_version & 0xff,
 +		  nalgs);
  }
  
++<<<<<<< HEAD
 +static int wm_adsp_create_regions(struct wm_adsp *dsp, __be32 id, int nregions,
 +				const int *type, __be32 *base)
++=======
+ static int cs_dsp_create_regions(struct cs_dsp *dsp, __be32 id, int nregions,
+ 				 const int *type, __be32 *base)
++>>>>>>> e14682021591 (ASoC: wm_adsp: Split out struct cs_dsp from struct wm_adsp)
  {
 -	struct cs_dsp_alg_region *alg_region;
 +	struct wm_adsp_alg_region *alg_region;
  	int i;
  
  	for (i = 0; i < nregions; i++) {
@@@ -2242,7 -2325,7 +2588,11 @@@
  	return 0;
  }
  
++<<<<<<< HEAD
 +static int wm_adsp1_setup_algs(struct wm_adsp *dsp)
++=======
+ static int cs_dsp_adsp1_setup_algs(struct cs_dsp *dsp)
++>>>>>>> e14682021591 (ASoC: wm_adsp: Split out struct cs_dsp from struct wm_adsp)
  {
  	struct wmfw_adsp1_id_hdr adsp1_id;
  	struct wmfw_adsp1_alg_hdr *adsp1_alg;
@@@ -2343,7 -2426,7 +2693,11 @@@ out
  	return ret;
  }
  
++<<<<<<< HEAD
 +static int wm_adsp2_setup_algs(struct wm_adsp *dsp)
++=======
+ static int cs_dsp_adsp2_setup_algs(struct cs_dsp *dsp)
++>>>>>>> e14682021591 (ASoC: wm_adsp: Split out struct cs_dsp from struct wm_adsp)
  {
  	struct wmfw_adsp2_id_hdr adsp2_id;
  	struct wmfw_adsp2_alg_hdr *adsp2_alg;
@@@ -2472,8 -2555,8 +2826,13 @@@ out
  	return ret;
  }
  
++<<<<<<< HEAD
 +static int wm_halo_create_regions(struct wm_adsp *dsp, __be32 id,
 +				  __be32 xm_base, __be32 ym_base)
++=======
+ static int cs_dsp_halo_create_regions(struct cs_dsp *dsp, __be32 id,
+ 				      __be32 xm_base, __be32 ym_base)
++>>>>>>> e14682021591 (ASoC: wm_adsp: Split out struct cs_dsp from struct wm_adsp)
  {
  	static const int types[] = {
  		WMFW_ADSP2_XM, WMFW_HALO_XM_PACKED,
@@@ -2481,10 -2564,10 +2840,14 @@@
  	};
  	__be32 bases[] = { xm_base, xm_base, ym_base, ym_base };
  
 -	return cs_dsp_create_regions(dsp, id, ARRAY_SIZE(types), types, bases);
 +	return wm_adsp_create_regions(dsp, id, ARRAY_SIZE(types), types, bases);
  }
  
++<<<<<<< HEAD
 +static int wm_halo_setup_algs(struct wm_adsp *dsp)
++=======
+ static int cs_dsp_halo_setup_algs(struct cs_dsp *dsp)
++>>>>>>> e14682021591 (ASoC: wm_adsp: Split out struct cs_dsp from struct wm_adsp)
  {
  	struct wmfw_halo_id_hdr halo_id;
  	struct wmfw_halo_alg_hdr *halo_alg;
@@@ -2544,7 -2627,8 +2907,12 @@@ out
  	return ret;
  }
  
++<<<<<<< HEAD
 +static int wm_adsp_load_coeff(struct wm_adsp *dsp)
++=======
+ static int cs_dsp_load_coeff(struct cs_dsp *dsp, const struct firmware *firmware,
+ 			     const char *file)
++>>>>>>> e14682021591 (ASoC: wm_adsp: Split out struct cs_dsp from struct wm_adsp)
  {
  	LIST_HEAD(buf_list);
  	struct regmap *regmap = dsp->regmap;
@@@ -2738,10 -2806,8 +3106,12 @@@ out
  	return ret;
  }
  
++<<<<<<< HEAD
 +static int wm_adsp_create_name(struct wm_adsp *dsp)
++=======
+ static int cs_dsp_create_name(struct cs_dsp *dsp)
++>>>>>>> e14682021591 (ASoC: wm_adsp: Split out struct cs_dsp from struct wm_adsp)
  {
- 	char *p;
- 
  	if (!dsp->name) {
  		dsp->name = devm_kasprintf(dsp->dev, GFP_KERNEL, "DSP%d",
  					   dsp->num);
@@@ -2752,17 -2818,7 +3122,11 @@@
  	return 0;
  }
  
++<<<<<<< HEAD
 +static int wm_adsp_common_init(struct wm_adsp *dsp)
++=======
+ static int cs_dsp_common_init(struct cs_dsp *dsp)
++>>>>>>> e14682021591 (ASoC: wm_adsp: Split out struct cs_dsp from struct wm_adsp)
  {
  	int ret;
  
@@@ -2780,26 -2834,52 +3144,71 @@@
  	return 0;
  }
  
++<<<<<<< HEAD
 +int wm_adsp1_init(struct wm_adsp *dsp)
 +{
 +	dsp->ops = &wm_adsp1_ops;
 +
++=======
+ static int wm_adsp_common_init(struct wm_adsp *dsp)
+ {
+ 	char *p;
+ 
+ 	INIT_LIST_HEAD(&dsp->compr_list);
+ 	INIT_LIST_HEAD(&dsp->buffer_list);
+ 
+ 	if (!dsp->fwf_name) {
+ 		p = devm_kstrdup(dsp->cs_dsp.dev, dsp->cs_dsp.name, GFP_KERNEL);
+ 		if (!p)
+ 			return -ENOMEM;
+ 
+ 		dsp->fwf_name = p;
+ 		for (; *p != 0; ++p)
+ 			*p = tolower(*p);
+ 	}
+ 
+ 	return 0;
+ }
+ 
+ static int cs_dsp_adsp1_init(struct cs_dsp *dsp)
+ {
+ 	dsp->ops = &cs_dsp_adsp1_ops;
+ 
+ 	return cs_dsp_common_init(dsp);
+ }
+ 
+ int wm_adsp1_init(struct wm_adsp *dsp)
+ {
+ 	int ret;
+ 
+ 	ret = cs_dsp_adsp1_init(&dsp->cs_dsp);
+ 	if (ret)
+ 		return ret;
+ 
++>>>>>>> e14682021591 (ASoC: wm_adsp: Split out struct cs_dsp from struct wm_adsp)
  	return wm_adsp_common_init(dsp);
  }
  EXPORT_SYMBOL_GPL(wm_adsp1_init);
  
++<<<<<<< HEAD
 +int wm_adsp1_event(struct snd_soc_dapm_widget *w,
 +		   struct snd_kcontrol *kcontrol,
 +		   int event)
++=======
+ static int cs_dsp_adsp1_power_up(struct cs_dsp *dsp,
+ 				 const struct firmware *wmfw_firmware, char *wmfw_filename,
+ 				 const struct firmware *coeff_firmware, char *coeff_filename,
+ 				 const char *fw_name)
++>>>>>>> e14682021591 (ASoC: wm_adsp: Split out struct cs_dsp from struct wm_adsp)
  {
 -	unsigned int val;
 +	struct snd_soc_component *component = snd_soc_dapm_to_component(w->dapm);
 +	struct wm_adsp *dsps = snd_soc_component_get_drvdata(component);
 +	struct wm_adsp *dsp = &dsps[w->shift];
 +	struct wm_coeff_ctl *ctl;
  	int ret;
 +	unsigned int val;
 +
 +	dsp->component = component;
  
  	mutex_lock(&dsp->pwr_lock);
  
@@@ -2898,12 -2950,80 +3307,87 @@@ err_ena
  			   ADSP1_SYS_ENA, 0);
  err_mutex:
  	mutex_unlock(&dsp->pwr_lock);
++<<<<<<< HEAD
++=======
+ 	return ret;
+ }
+ 
+ static void cs_dsp_adsp1_power_down(struct cs_dsp *dsp)
+ {
+ 	struct cs_dsp_coeff_ctl *ctl;
+ 
+ 	mutex_lock(&dsp->pwr_lock);
+ 
+ 	dsp->running = false;
+ 	dsp->booted = false;
+ 
+ 	/* Halt the core */
+ 	regmap_update_bits(dsp->regmap, dsp->base + ADSP1_CONTROL_30,
+ 			   ADSP1_CORE_ENA | ADSP1_START, 0);
+ 
+ 	regmap_update_bits(dsp->regmap, dsp->base + ADSP1_CONTROL_19,
+ 			   ADSP1_WDMA_BUFFER_LENGTH_MASK, 0);
+ 
+ 	regmap_update_bits(dsp->regmap, dsp->base + ADSP1_CONTROL_30,
+ 			   ADSP1_SYS_ENA, 0);
+ 
+ 	list_for_each_entry(ctl, &dsp->ctl_list, list)
+ 		ctl->enabled = 0;
+ 
+ 	cs_dsp_free_alg_regions(dsp);
+ 
+ 	mutex_unlock(&dsp->pwr_lock);
+ }
+ 
+ int wm_adsp1_event(struct snd_soc_dapm_widget *w,
+ 		   struct snd_kcontrol *kcontrol,
+ 		   int event)
+ {
+ 	struct snd_soc_component *component = snd_soc_dapm_to_component(w->dapm);
+ 	struct wm_adsp *dsps = snd_soc_component_get_drvdata(component);
+ 	struct wm_adsp *dsp = &dsps[w->shift];
+ 	int ret = 0;
+ 	char *wmfw_filename = NULL;
+ 	const struct firmware *wmfw_firmware = NULL;
+ 	char *coeff_filename = NULL;
+ 	const struct firmware *coeff_firmware = NULL;
+ 
+ 	dsp->component = component;
+ 
+ 	switch (event) {
+ 	case SND_SOC_DAPM_POST_PMU:
+ 		ret = wm_adsp_request_firmware_files(dsp,
+ 						     &wmfw_firmware, &wmfw_filename,
+ 						     &coeff_firmware, &coeff_filename);
+ 		if (ret)
+ 			break;
+ 
+ 		ret = cs_dsp_adsp1_power_up(&dsp->cs_dsp,
+ 					    wmfw_firmware, wmfw_filename,
+ 					    coeff_firmware, coeff_filename,
+ 					    wm_adsp_fw_text[dsp->fw]);
+ 
+ 		wm_adsp_release_firmware_files(dsp,
+ 					       wmfw_firmware, wmfw_filename,
+ 					       coeff_firmware, coeff_filename);
+ 		break;
+ 	case SND_SOC_DAPM_PRE_PMD:
+ 		cs_dsp_adsp1_power_down(&dsp->cs_dsp);
+ 		break;
+ 	default:
+ 		break;
+ 	}
++>>>>>>> e14682021591 (ASoC: wm_adsp: Split out struct cs_dsp from struct wm_adsp)
  
  	return ret;
  }
  EXPORT_SYMBOL_GPL(wm_adsp1_event);
  
++<<<<<<< HEAD
 +static int wm_adsp2v2_enable_core(struct wm_adsp *dsp)
++=======
+ static int cs_dsp_adsp2v2_enable_core(struct cs_dsp *dsp)
++>>>>>>> e14682021591 (ASoC: wm_adsp: Split out struct cs_dsp from struct wm_adsp)
  {
  	unsigned int val;
  	int ret, count;
@@@ -2930,7 -3050,7 +3414,11 @@@
  	return 0;
  }
  
++<<<<<<< HEAD
 +static int wm_adsp2_enable_core(struct wm_adsp *dsp)
++=======
+ static int cs_dsp_adsp2_enable_core(struct cs_dsp *dsp)
++>>>>>>> e14682021591 (ASoC: wm_adsp: Split out struct cs_dsp from struct wm_adsp)
  {
  	int ret;
  
@@@ -2939,10 -3059,10 +3427,14 @@@
  	if (ret != 0)
  		return ret;
  
 -	return cs_dsp_adsp2v2_enable_core(dsp);
 +	return wm_adsp2v2_enable_core(dsp);
  }
  
++<<<<<<< HEAD
 +static int wm_adsp2_lock(struct wm_adsp *dsp, unsigned int lock_regions)
++=======
+ static int cs_dsp_adsp2_lock(struct cs_dsp *dsp, unsigned int lock_regions)
++>>>>>>> e14682021591 (ASoC: wm_adsp: Split out struct cs_dsp from struct wm_adsp)
  {
  	struct regmap *regmap = dsp->regmap;
  	unsigned int code0, code1, lock_reg;
@@@ -2972,19 -3092,19 +3464,31 @@@
  	return 0;
  }
  
++<<<<<<< HEAD
 +static int wm_adsp2_enable_memory(struct wm_adsp *dsp)
++=======
+ static int cs_dsp_adsp2_enable_memory(struct cs_dsp *dsp)
++>>>>>>> e14682021591 (ASoC: wm_adsp: Split out struct cs_dsp from struct wm_adsp)
  {
  	return regmap_update_bits(dsp->regmap, dsp->base + ADSP2_CONTROL,
  				  ADSP2_MEM_ENA, ADSP2_MEM_ENA);
  }
  
++<<<<<<< HEAD
 +static void wm_adsp2_disable_memory(struct wm_adsp *dsp)
++=======
+ static void cs_dsp_adsp2_disable_memory(struct cs_dsp *dsp)
++>>>>>>> e14682021591 (ASoC: wm_adsp: Split out struct cs_dsp from struct wm_adsp)
  {
  	regmap_update_bits(dsp->regmap, dsp->base + ADSP2_CONTROL,
  			   ADSP2_MEM_ENA, 0);
  }
  
++<<<<<<< HEAD
 +static void wm_adsp2_disable_core(struct wm_adsp *dsp)
++=======
+ static void cs_dsp_adsp2_disable_core(struct cs_dsp *dsp)
++>>>>>>> e14682021591 (ASoC: wm_adsp: Split out struct cs_dsp from struct wm_adsp)
  {
  	regmap_write(dsp->regmap, dsp->base + ADSP2_RDMA_CONFIG_1, 0);
  	regmap_write(dsp->regmap, dsp->base + ADSP2_WDMA_CONFIG_1, 0);
@@@ -2994,71 -3114,14 +3498,79 @@@
  			   ADSP2_SYS_ENA, 0);
  }
  
++<<<<<<< HEAD
 +static void wm_adsp2v2_disable_core(struct wm_adsp *dsp)
++=======
+ static void cs_dsp_adsp2v2_disable_core(struct cs_dsp *dsp)
++>>>>>>> e14682021591 (ASoC: wm_adsp: Split out struct cs_dsp from struct wm_adsp)
  {
  	regmap_write(dsp->regmap, dsp->base + ADSP2_RDMA_CONFIG_1, 0);
  	regmap_write(dsp->regmap, dsp->base + ADSP2_WDMA_CONFIG_1, 0);
  	regmap_write(dsp->regmap, dsp->base + ADSP2V2_WDMA_CONFIG_2, 0);
  }
  
++<<<<<<< HEAD
 +static void wm_adsp_boot_work(struct work_struct *work)
 +{
 +	struct wm_adsp *dsp = container_of(work,
 +					   struct wm_adsp,
 +					   boot_work);
 +	int ret;
 +
 +	mutex_lock(&dsp->pwr_lock);
 +
 +	if (dsp->ops->enable_memory) {
 +		ret = dsp->ops->enable_memory(dsp);
 +		if (ret != 0)
 +			goto err_mutex;
 +	}
 +
 +	if (dsp->ops->enable_core) {
 +		ret = dsp->ops->enable_core(dsp);
 +		if (ret != 0)
 +			goto err_mem;
 +	}
 +
 +	ret = wm_adsp_load(dsp);
 +	if (ret != 0)
 +		goto err_ena;
 +
 +	ret = dsp->ops->setup_algs(dsp);
 +	if (ret != 0)
 +		goto err_ena;
 +
 +	ret = wm_adsp_load_coeff(dsp);
 +	if (ret != 0)
 +		goto err_ena;
 +
 +	/* Initialize caches for enabled and unset controls */
 +	ret = wm_coeff_init_control_caches(dsp);
 +	if (ret != 0)
 +		goto err_ena;
 +
 +	if (dsp->ops->disable_core)
 +		dsp->ops->disable_core(dsp);
 +
 +	dsp->booted = true;
 +
 +	mutex_unlock(&dsp->pwr_lock);
 +
 +	return;
 +
 +err_ena:
 +	if (dsp->ops->disable_core)
 +		dsp->ops->disable_core(dsp);
 +err_mem:
 +	if (dsp->ops->disable_memory)
 +		dsp->ops->disable_memory(dsp);
 +err_mutex:
 +	mutex_unlock(&dsp->pwr_lock);
 +}
 +
 +static int wm_halo_configure_mpu(struct wm_adsp *dsp, unsigned int lock_regions)
++=======
+ static int cs_dsp_halo_configure_mpu(struct cs_dsp *dsp, unsigned int lock_regions)
++>>>>>>> e14682021591 (ASoC: wm_adsp: Split out struct cs_dsp from struct wm_adsp)
  {
  	struct reg_sequence config[] = {
  		{ dsp->base + HALO_MPU_LOCK_CONFIG,     0x5555 },
@@@ -3089,11 -3152,8 +3601,15 @@@
  	return regmap_multi_reg_write(dsp->regmap, config, ARRAY_SIZE(config));
  }
  
++<<<<<<< HEAD
 +int wm_adsp2_set_dspclk(struct snd_soc_dapm_widget *w, unsigned int freq)
++=======
+ static int cs_dsp_set_dspclk(struct cs_dsp *dsp, unsigned int freq)
++>>>>>>> e14682021591 (ASoC: wm_adsp: Split out struct cs_dsp from struct wm_adsp)
  {
 +	struct snd_soc_component *component = snd_soc_dapm_to_component(w->dapm);
 +	struct wm_adsp *dsps = snd_soc_component_get_drvdata(component);
 +	struct wm_adsp *dsp = &dsps[w->shift];
  	int ret;
  
  	ret = regmap_update_bits(dsp->regmap, dsp->base + ADSP2_CLOCKING,
@@@ -3104,6 -3164,15 +3620,18 @@@
  
  	return ret;
  }
++<<<<<<< HEAD
++=======
+ 
+ int wm_adsp2_set_dspclk(struct snd_soc_dapm_widget *w, unsigned int freq)
+ {
+ 	struct snd_soc_component *component = snd_soc_dapm_to_component(w->dapm);
+ 	struct wm_adsp *dsps = snd_soc_component_get_drvdata(component);
+ 	struct wm_adsp *dsp = &dsps[w->shift];
+ 
+ 	return cs_dsp_set_dspclk(&dsp->cs_dsp, freq);
+ }
++>>>>>>> e14682021591 (ASoC: wm_adsp: Split out struct cs_dsp from struct wm_adsp)
  EXPORT_SYMBOL_GPL(wm_adsp2_set_dspclk);
  
  int wm_adsp2_preloader_get(struct snd_kcontrol *kcontrol,
@@@ -3149,18 -3218,131 +3677,142 @@@ int wm_adsp2_preloader_put(struct snd_k
  }
  EXPORT_SYMBOL_GPL(wm_adsp2_preloader_put);
  
++<<<<<<< HEAD
 +static void wm_adsp_stop_watchdog(struct wm_adsp *dsp)
++=======
+ static void cs_dsp_stop_watchdog(struct cs_dsp *dsp)
++>>>>>>> e14682021591 (ASoC: wm_adsp: Split out struct cs_dsp from struct wm_adsp)
  {
  	regmap_update_bits(dsp->regmap, dsp->base + ADSP2_WATCHDOG,
  			   ADSP2_WDT_ENA_MASK, 0);
  }
  
++<<<<<<< HEAD
 +static void wm_halo_stop_watchdog(struct wm_adsp *dsp)
++=======
+ static void cs_dsp_halo_stop_watchdog(struct cs_dsp *dsp)
++>>>>>>> e14682021591 (ASoC: wm_adsp: Split out struct cs_dsp from struct wm_adsp)
  {
  	regmap_update_bits(dsp->regmap, dsp->base + HALO_WDT_CONTROL,
  			   HALO_WDT_EN_MASK, 0);
  }
  
++<<<<<<< HEAD
++=======
+ static int cs_dsp_power_up(struct cs_dsp *dsp,
+ 			   const struct firmware *wmfw_firmware, char *wmfw_filename,
+ 			   const struct firmware *coeff_firmware, char *coeff_filename,
+ 			   const char *fw_name)
+ {
+ 	int ret;
+ 
+ 	mutex_lock(&dsp->pwr_lock);
+ 
+ 	dsp->fw_name = fw_name;
+ 
+ 	if (dsp->ops->enable_memory) {
+ 		ret = dsp->ops->enable_memory(dsp);
+ 		if (ret != 0)
+ 			goto err_mutex;
+ 	}
+ 
+ 	if (dsp->ops->enable_core) {
+ 		ret = dsp->ops->enable_core(dsp);
+ 		if (ret != 0)
+ 			goto err_mem;
+ 	}
+ 
+ 	ret = cs_dsp_load(dsp, wmfw_firmware, wmfw_filename);
+ 	if (ret != 0)
+ 		goto err_ena;
+ 
+ 	ret = dsp->ops->setup_algs(dsp);
+ 	if (ret != 0)
+ 		goto err_ena;
+ 
+ 	ret = cs_dsp_load_coeff(dsp, coeff_firmware, coeff_filename);
+ 	if (ret != 0)
+ 		goto err_ena;
+ 
+ 	/* Initialize caches for enabled and unset controls */
+ 	ret = cs_dsp_coeff_init_control_caches(dsp);
+ 	if (ret != 0)
+ 		goto err_ena;
+ 
+ 	if (dsp->ops->disable_core)
+ 		dsp->ops->disable_core(dsp);
+ 
+ 	dsp->booted = true;
+ 
+ 	mutex_unlock(&dsp->pwr_lock);
+ 
+ 	return 0;
+ err_ena:
+ 	if (dsp->ops->disable_core)
+ 		dsp->ops->disable_core(dsp);
+ err_mem:
+ 	if (dsp->ops->disable_memory)
+ 		dsp->ops->disable_memory(dsp);
+ err_mutex:
+ 	mutex_unlock(&dsp->pwr_lock);
+ 
+ 	return ret;
+ }
+ 
+ static void cs_dsp_power_down(struct cs_dsp *dsp)
+ {
+ 	struct cs_dsp_coeff_ctl *ctl;
+ 
+ 	mutex_lock(&dsp->pwr_lock);
+ 
+ 	cs_dsp_debugfs_clear(dsp);
+ 
+ 	dsp->fw_id = 0;
+ 	dsp->fw_id_version = 0;
+ 
+ 	dsp->booted = false;
+ 
+ 	if (dsp->ops->disable_memory)
+ 		dsp->ops->disable_memory(dsp);
+ 
+ 	list_for_each_entry(ctl, &dsp->ctl_list, list)
+ 		ctl->enabled = 0;
+ 
+ 	cs_dsp_free_alg_regions(dsp);
+ 
+ 	mutex_unlock(&dsp->pwr_lock);
+ 
+ 	cs_dsp_dbg(dsp, "Shutdown complete\n");
+ }
+ 
+ static void wm_adsp_boot_work(struct work_struct *work)
+ {
+ 	struct wm_adsp *dsp = container_of(work,
+ 					   struct wm_adsp,
+ 					   boot_work);
+ 	int ret = 0;
+ 	char *wmfw_filename = NULL;
+ 	const struct firmware *wmfw_firmware = NULL;
+ 	char *coeff_filename = NULL;
+ 	const struct firmware *coeff_firmware = NULL;
+ 
+ 	ret = wm_adsp_request_firmware_files(dsp,
+ 					     &wmfw_firmware, &wmfw_filename,
+ 					     &coeff_firmware, &coeff_filename);
+ 	if (ret)
+ 		return;
+ 
+ 	cs_dsp_power_up(&dsp->cs_dsp,
+ 			wmfw_firmware, wmfw_filename,
+ 			coeff_firmware, coeff_filename,
+ 			wm_adsp_fw_text[dsp->fw]);
+ 
+ 	wm_adsp_release_firmware_files(dsp,
+ 				       wmfw_firmware, wmfw_filename,
+ 				       coeff_firmware, coeff_filename);
+ }
+ 
++>>>>>>> e14682021591 (ASoC: wm_adsp: Split out struct cs_dsp from struct wm_adsp)
  int wm_adsp_early_event(struct snd_soc_dapm_widget *w,
  			struct snd_kcontrol *kcontrol, int event)
  {
@@@ -3174,26 -3355,7 +3826,30 @@@
  		queue_work(system_unbound_wq, &dsp->boot_work);
  		break;
  	case SND_SOC_DAPM_PRE_PMD:
++<<<<<<< HEAD
 +		mutex_lock(&dsp->pwr_lock);
 +
 +		wm_adsp_debugfs_clear(dsp);
 +
 +		dsp->fw_id = 0;
 +		dsp->fw_id_version = 0;
 +
 +		dsp->booted = false;
 +
 +		if (dsp->ops->disable_memory)
 +			dsp->ops->disable_memory(dsp);
 +
 +		list_for_each_entry(ctl, &dsp->ctl_list, list)
 +			ctl->enabled = 0;
 +
 +		wm_adsp_free_alg_regions(dsp);
 +
 +		mutex_unlock(&dsp->pwr_lock);
 +
 +		adsp_dbg(dsp, "Shutdown complete\n");
++=======
+ 		cs_dsp_power_down(&dsp->cs_dsp);
++>>>>>>> e14682021591 (ASoC: wm_adsp: Split out struct cs_dsp from struct wm_adsp)
  		break;
  	default:
  		break;
@@@ -3203,19 -3365,123 +3859,134 @@@
  }
  EXPORT_SYMBOL_GPL(wm_adsp_early_event);
  
++<<<<<<< HEAD
 +static int wm_adsp2_start_core(struct wm_adsp *dsp)
++=======
+ static int cs_dsp_adsp2_start_core(struct cs_dsp *dsp)
++>>>>>>> e14682021591 (ASoC: wm_adsp: Split out struct cs_dsp from struct wm_adsp)
  {
  	return regmap_update_bits(dsp->regmap, dsp->base + ADSP2_CONTROL,
  				 ADSP2_CORE_ENA | ADSP2_START,
  				 ADSP2_CORE_ENA | ADSP2_START);
  }
  
++<<<<<<< HEAD
 +static void wm_adsp2_stop_core(struct wm_adsp *dsp)
++=======
+ static void cs_dsp_adsp2_stop_core(struct cs_dsp *dsp)
++>>>>>>> e14682021591 (ASoC: wm_adsp: Split out struct cs_dsp from struct wm_adsp)
  {
  	regmap_update_bits(dsp->regmap, dsp->base + ADSP2_CONTROL,
  			   ADSP2_CORE_ENA | ADSP2_START, 0);
  }
  
++<<<<<<< HEAD
++=======
+ static int wm_adsp_event_post_run(struct cs_dsp *cs_dsp)
+ {
+ 	struct wm_adsp *dsp = container_of(cs_dsp, struct wm_adsp, cs_dsp);
+ 
+ 	if (wm_adsp_fw[dsp->fw].num_caps != 0)
+ 		return wm_adsp_buffer_init(dsp);
+ 
+ 	return 0;
+ }
+ 
+ static void wm_adsp_event_post_stop(struct cs_dsp *cs_dsp)
+ {
+ 	struct wm_adsp *dsp = container_of(cs_dsp, struct wm_adsp, cs_dsp);
+ 
+ 	if (wm_adsp_fw[dsp->fw].num_caps != 0)
+ 		wm_adsp_buffer_free(dsp);
+ 
+ 	dsp->fatal_error = false;
+ }
+ 
+ static int cs_dsp_run(struct cs_dsp *dsp)
+ {
+ 	int ret;
+ 
+ 	mutex_lock(&dsp->pwr_lock);
+ 
+ 	if (!dsp->booted) {
+ 		ret = -EIO;
+ 		goto err;
+ 	}
+ 
+ 	if (dsp->ops->enable_core) {
+ 		ret = dsp->ops->enable_core(dsp);
+ 		if (ret != 0)
+ 			goto err;
+ 	}
+ 
+ 	/* Sync set controls */
+ 	ret = cs_dsp_coeff_sync_controls(dsp);
+ 	if (ret != 0)
+ 		goto err;
+ 
+ 	if (dsp->ops->lock_memory) {
+ 		ret = dsp->ops->lock_memory(dsp, dsp->lock_regions);
+ 		if (ret != 0) {
+ 			cs_dsp_err(dsp, "Error configuring MPU: %d\n", ret);
+ 			goto err;
+ 		}
+ 	}
+ 
+ 	if (dsp->ops->start_core) {
+ 		ret = dsp->ops->start_core(dsp);
+ 		if (ret != 0)
+ 			goto err;
+ 	}
+ 
+ 	dsp->running = true;
+ 
+ 	ret = wm_adsp_event_post_run(dsp);
+ 	if (ret < 0)
+ 		goto err;
+ 
+ 	mutex_unlock(&dsp->pwr_lock);
+ 
+ 	return 0;
+ 
+ err:
+ 	if (dsp->ops->stop_core)
+ 		dsp->ops->stop_core(dsp);
+ 	if (dsp->ops->disable_core)
+ 		dsp->ops->disable_core(dsp);
+ 	mutex_unlock(&dsp->pwr_lock);
+ 
+ 	return ret;
+ }
+ 
+ static void cs_dsp_stop(struct cs_dsp *dsp)
+ {
+ 	/* Tell the firmware to cleanup */
+ 	cs_dsp_signal_event_controls(dsp, CS_DSP_FW_EVENT_SHUTDOWN);
+ 
+ 	if (dsp->ops->stop_watchdog)
+ 		dsp->ops->stop_watchdog(dsp);
+ 
+ 	/* Log firmware state, it can be useful for analysis */
+ 	if (dsp->ops->show_fw_status)
+ 		dsp->ops->show_fw_status(dsp);
+ 
+ 	mutex_lock(&dsp->pwr_lock);
+ 
+ 	dsp->running = false;
+ 
+ 	if (dsp->ops->stop_core)
+ 		dsp->ops->stop_core(dsp);
+ 	if (dsp->ops->disable_core)
+ 		dsp->ops->disable_core(dsp);
+ 
+ 	wm_adsp_event_post_stop(dsp);
+ 
+ 	mutex_unlock(&dsp->pwr_lock);
+ 
+ 	cs_dsp_dbg(dsp, "Execution stopped\n");
+ }
+ 
++>>>>>>> e14682021591 (ASoC: wm_adsp: Split out struct cs_dsp from struct wm_adsp)
  int wm_adsp_event(struct snd_soc_dapm_widget *w,
  		  struct snd_kcontrol *kcontrol, int event)
  {
@@@ -3227,81 -3493,11 +3998,89 @@@
  	switch (event) {
  	case SND_SOC_DAPM_POST_PMU:
  		flush_work(&dsp->boot_work);
++<<<<<<< HEAD
 +
 +		mutex_lock(&dsp->pwr_lock);
 +
 +		if (!dsp->booted) {
 +			ret = -EIO;
 +			goto err;
 +		}
 +
 +		if (dsp->ops->enable_core) {
 +			ret = dsp->ops->enable_core(dsp);
 +			if (ret != 0)
 +				goto err;
 +		}
 +
 +		/* Sync set controls */
 +		ret = wm_coeff_sync_controls(dsp);
 +		if (ret != 0)
 +			goto err;
 +
 +		if (dsp->ops->lock_memory) {
 +			ret = dsp->ops->lock_memory(dsp, dsp->lock_regions);
 +			if (ret != 0) {
 +				adsp_err(dsp, "Error configuring MPU: %d\n",
 +					 ret);
 +				goto err;
 +			}
 +		}
 +
 +		if (dsp->ops->start_core) {
 +			ret = dsp->ops->start_core(dsp);
 +			if (ret != 0)
 +				goto err;
 +		}
 +
 +		dsp->running = true;
 +
 +		if (wm_adsp_fw[dsp->fw].num_caps != 0) {
 +			ret = wm_adsp_buffer_init(dsp);
 +			if (ret < 0)
 +				goto err;
 +		}
 +
 +		mutex_unlock(&dsp->pwr_lock);
++=======
+ 		ret = cs_dsp_run(&dsp->cs_dsp);
++>>>>>>> e14682021591 (ASoC: wm_adsp: Split out struct cs_dsp from struct wm_adsp)
  		break;
 +
  	case SND_SOC_DAPM_PRE_PMD:
++<<<<<<< HEAD
 +		/* Tell the firmware to cleanup */
 +		wm_adsp_signal_event_controls(dsp, WM_ADSP_FW_EVENT_SHUTDOWN);
 +
 +		if (dsp->ops->stop_watchdog)
 +			dsp->ops->stop_watchdog(dsp);
 +
 +		/* Log firmware state, it can be useful for analysis */
 +		if (dsp->ops->show_fw_status)
 +			dsp->ops->show_fw_status(dsp);
 +
 +		mutex_lock(&dsp->pwr_lock);
 +
 +		dsp->running = false;
 +
 +		if (dsp->ops->stop_core)
 +			dsp->ops->stop_core(dsp);
 +		if (dsp->ops->disable_core)
 +			dsp->ops->disable_core(dsp);
 +
 +		if (wm_adsp_fw[dsp->fw].num_caps != 0)
 +			wm_adsp_buffer_free(dsp);
 +
 +		dsp->fatal_error = false;
 +
 +		mutex_unlock(&dsp->pwr_lock);
 +
 +		adsp_dbg(dsp, "Execution stopped\n");
++=======
+ 		cs_dsp_stop(&dsp->cs_dsp);
++>>>>>>> e14682021591 (ASoC: wm_adsp: Split out struct cs_dsp from struct wm_adsp)
  		break;
 +
  	default:
  		break;
  	}
@@@ -3317,7 -3506,7 +4096,11 @@@ err
  }
  EXPORT_SYMBOL_GPL(wm_adsp_event);
  
++<<<<<<< HEAD
 +static int wm_halo_start_core(struct wm_adsp *dsp)
++=======
+ static int cs_dsp_halo_start_core(struct cs_dsp *dsp)
++>>>>>>> e14682021591 (ASoC: wm_adsp: Split out struct cs_dsp from struct wm_adsp)
  {
  	return regmap_update_bits(dsp->regmap,
  				  dsp->base + HALO_CCM_CORE_CONTROL,
@@@ -3325,7 -3514,7 +4108,11 @@@
  				  HALO_CORE_RESET | HALO_CORE_EN);
  }
  
++<<<<<<< HEAD
 +static void wm_halo_stop_core(struct wm_adsp *dsp)
++=======
+ static void cs_dsp_halo_stop_core(struct cs_dsp *dsp)
++>>>>>>> e14682021591 (ASoC: wm_adsp: Split out struct cs_dsp from struct wm_adsp)
  {
  	regmap_update_bits(dsp->regmap, dsp->base + HALO_CCM_CORE_CONTROL,
  			   HALO_CORE_EN, 0);
@@@ -3339,10 -3528,10 +4126,14 @@@ int wm_adsp2_component_probe(struct wm_
  {
  	char preload[32];
  
- 	snprintf(preload, ARRAY_SIZE(preload), "%s Preload", dsp->name);
+ 	snprintf(preload, ARRAY_SIZE(preload), "%s Preload", dsp->cs_dsp.name);
  	snd_soc_component_disable_pin(component, preload);
  
++<<<<<<< HEAD
 +	wm_adsp2_init_debugfs(dsp, component);
++=======
+ 	cs_dsp_init_debugfs(&dsp->cs_dsp, component->debugfs_root);
++>>>>>>> e14682021591 (ASoC: wm_adsp: Split out struct cs_dsp from struct wm_adsp)
  
  	dsp->component = component;
  
@@@ -3352,13 -3541,13 +4143,21 @@@ EXPORT_SYMBOL_GPL(wm_adsp2_component_pr
  
  int wm_adsp2_component_remove(struct wm_adsp *dsp, struct snd_soc_component *component)
  {
++<<<<<<< HEAD
 +	wm_adsp2_cleanup_debugfs(dsp);
++=======
+ 	cs_dsp_cleanup_debugfs(&dsp->cs_dsp);
++>>>>>>> e14682021591 (ASoC: wm_adsp: Split out struct cs_dsp from struct wm_adsp)
  
  	return 0;
  }
  EXPORT_SYMBOL_GPL(wm_adsp2_component_remove);
  
++<<<<<<< HEAD
 +int wm_adsp2_init(struct wm_adsp *dsp)
++=======
+ static int cs_dsp_adsp2_init(struct cs_dsp *dsp)
++>>>>>>> e14682021591 (ASoC: wm_adsp: Split out struct cs_dsp from struct wm_adsp)
  {
  	int ret;
  
@@@ -3390,38 -3575,65 +4189,99 @@@
  		break;
  	}
  
++<<<<<<< HEAD
 +	INIT_WORK(&dsp->boot_work, wm_adsp_boot_work);
 +
 +	return 0;
 +}
 +EXPORT_SYMBOL_GPL(wm_adsp2_init);
 +
++=======
+ 	return cs_dsp_common_init(dsp);
+ }
+ 
+ int wm_adsp2_init(struct wm_adsp *dsp)
+ {
+ 	int ret;
+ 
+ 	INIT_WORK(&dsp->boot_work, wm_adsp_boot_work);
+ 
+ 	dsp->sys_config_size = sizeof(struct wm_adsp_system_config_xm_hdr);
+ 
+ 	ret = cs_dsp_adsp2_init(&dsp->cs_dsp);
+ 	if (ret)
+ 		return ret;
+ 
+ 	return wm_adsp_common_init(dsp);
+ }
+ EXPORT_SYMBOL_GPL(wm_adsp2_init);
+ 
+ static int cs_dsp_halo_init(struct cs_dsp *dsp)
+ {
+ 	dsp->ops = &cs_dsp_halo_ops;
+ 
+ 	return cs_dsp_common_init(dsp);
+ }
+ 
++>>>>>>> e14682021591 (ASoC: wm_adsp: Split out struct cs_dsp from struct wm_adsp)
  int wm_halo_init(struct wm_adsp *dsp)
  {
  	int ret;
  
++<<<<<<< HEAD
 +	ret = wm_adsp_common_init(dsp);
 +	if (ret)
 +		return ret;
 +
 +	dsp->ops = &wm_halo_ops;
 +
 +	INIT_WORK(&dsp->boot_work, wm_adsp_boot_work);
 +
 +	return 0;
 +}
 +EXPORT_SYMBOL_GPL(wm_halo_init);
 +
 +void wm_adsp2_remove(struct wm_adsp *dsp)
 +{
 +	struct wm_coeff_ctl *ctl;
 +
 +	while (!list_empty(&dsp->ctl_list)) {
 +		ctl = list_first_entry(&dsp->ctl_list, struct wm_coeff_ctl,
 +					list);
 +		list_del(&ctl->list);
 +		wm_adsp_free_ctl_blk(ctl);
 +	}
++=======
+ 	INIT_WORK(&dsp->boot_work, wm_adsp_boot_work);
+ 
+ 	dsp->sys_config_size = sizeof(struct wm_halo_system_config_xm_hdr);
+ 
+ 	ret = cs_dsp_halo_init(&dsp->cs_dsp);
+ 	if (ret)
+ 		return ret;
+ 
+ 	return wm_adsp_common_init(dsp);
+ }
+ EXPORT_SYMBOL_GPL(wm_halo_init);
+ 
+ static void cs_dsp_remove(struct cs_dsp *dsp)
+ {
+ 	struct cs_dsp_coeff_ctl *ctl;
+ 
+ 	while (!list_empty(&dsp->ctl_list)) {
+ 		ctl = list_first_entry(&dsp->ctl_list, struct cs_dsp_coeff_ctl, list);
+ 
+ 		wm_adsp_control_remove(ctl);
+ 
+ 		list_del(&ctl->list);
+ 		cs_dsp_free_ctl_blk(ctl);
+ 	}
+ }
+ 
+ void wm_adsp2_remove(struct wm_adsp *dsp)
+ {
+ 	cs_dsp_remove(&dsp->cs_dsp);
++>>>>>>> e14682021591 (ASoC: wm_adsp: Split out struct cs_dsp from struct wm_adsp)
  }
  EXPORT_SYMBOL_GPL(wm_adsp2_remove);
  
@@@ -3648,11 -3860,11 +4508,17 @@@ int wm_adsp_compr_get_caps(struct snd_s
  }
  EXPORT_SYMBOL_GPL(wm_adsp_compr_get_caps);
  
++<<<<<<< HEAD
 +static int wm_adsp_read_raw_data_block(struct wm_adsp *dsp, int mem_type,
 +				       unsigned int mem_addr,
 +				       unsigned int num_words, __be32 *data)
++=======
+ static int cs_dsp_read_raw_data_block(struct cs_dsp *dsp, int mem_type,
+ 				      unsigned int mem_addr,
+ 				      unsigned int num_words, __be32 *data)
++>>>>>>> e14682021591 (ASoC: wm_adsp: Split out struct cs_dsp from struct wm_adsp)
  {
 -	struct cs_dsp_region const *mem = cs_dsp_find_region(dsp, mem_type);
 +	struct wm_adsp_region const *mem = wm_adsp_find_region(dsp, mem_type);
  	unsigned int reg;
  	int ret;
  
@@@ -3669,8 -3881,8 +4535,13 @@@
  	return 0;
  }
  
++<<<<<<< HEAD
 +static inline int wm_adsp_read_data_word(struct wm_adsp *dsp, int mem_type,
 +					 unsigned int mem_addr, u32 *data)
++=======
+ static int cs_dsp_read_data_word(struct cs_dsp *dsp, int mem_type,
+ 				 unsigned int mem_addr, u32 *data)
++>>>>>>> e14682021591 (ASoC: wm_adsp: Split out struct cs_dsp from struct wm_adsp)
  {
  	__be32 raw;
  	int ret;
@@@ -3684,10 -3896,10 +4555,15 @@@
  	return 0;
  }
  
++<<<<<<< HEAD
 +static int wm_adsp_write_data_word(struct wm_adsp *dsp, int mem_type,
 +				   unsigned int mem_addr, u32 data)
++=======
+ static int cs_dsp_write_data_word(struct cs_dsp *dsp, int mem_type,
+ 				  unsigned int mem_addr, u32 data)
++>>>>>>> e14682021591 (ASoC: wm_adsp: Split out struct cs_dsp from struct wm_adsp)
  {
 -	struct cs_dsp_region const *mem = cs_dsp_find_region(dsp, mem_type);
 +	struct wm_adsp_region const *mem = wm_adsp_find_region(dsp, mem_type);
  	__be32 val = cpu_to_be32(data & 0x00ffffffu);
  	unsigned int reg;
  
@@@ -3702,18 -3914,19 +4578,29 @@@
  static inline int wm_adsp_buffer_read(struct wm_adsp_compr_buf *buf,
  				      unsigned int field_offset, u32 *data)
  {
++<<<<<<< HEAD
 +	return wm_adsp_read_data_word(buf->dsp, buf->host_buf_mem_type,
 +				      buf->host_buf_ptr + field_offset, data);
++=======
+ 	return cs_dsp_read_data_word(&buf->dsp->cs_dsp, buf->host_buf_mem_type,
+ 				     buf->host_buf_ptr + field_offset, data);
++>>>>>>> e14682021591 (ASoC: wm_adsp: Split out struct cs_dsp from struct wm_adsp)
  }
  
  static inline int wm_adsp_buffer_write(struct wm_adsp_compr_buf *buf,
  				       unsigned int field_offset, u32 data)
  {
++<<<<<<< HEAD
 +	return wm_adsp_write_data_word(buf->dsp, buf->host_buf_mem_type,
 +				       buf->host_buf_ptr + field_offset, data);
++=======
+ 	return cs_dsp_write_data_word(&buf->dsp->cs_dsp, buf->host_buf_mem_type,
+ 				      buf->host_buf_ptr + field_offset,
+ 				      data);
++>>>>>>> e14682021591 (ASoC: wm_adsp: Split out struct cs_dsp from struct wm_adsp)
  }
  
 -static void cs_dsp_remove_padding(u32 *buf, int nwords)
 +static void wm_adsp_remove_padding(u32 *buf, int nwords)
  {
  	const __be32 *pack_in = (__be32 *)buf;
  	u8 *pack_out = (u8 *)buf;
@@@ -3802,7 -4015,7 +4689,11 @@@ static int wm_adsp_buffer_parse_legacy(
  	u32 xmalg, addr, magic;
  	int i, ret;
  
++<<<<<<< HEAD
 +	alg_region = wm_adsp_find_alg_region(dsp, WMFW_ADSP2_XM, dsp->fw_id);
++=======
+ 	alg_region = cs_dsp_find_alg_region(&dsp->cs_dsp, WMFW_ADSP2_XM, dsp->cs_dsp.fw_id);
++>>>>>>> e14682021591 (ASoC: wm_adsp: Split out struct cs_dsp from struct wm_adsp)
  	if (!alg_region) {
  		adsp_err(dsp, "No algorithm region found\n");
  		return -EINVAL;
@@@ -3812,10 -4025,10 +4703,14 @@@
  	if (!buf)
  		return -ENOMEM;
  
 -	xmalg = dsp->sys_config_size / sizeof(__be32);
 +	xmalg = dsp->ops->sys_config_size / sizeof(__be32);
  
  	addr = alg_region->base + xmalg + ALG_XM_FIELD(magic);
++<<<<<<< HEAD
 +	ret = wm_adsp_read_data_word(dsp, WMFW_ADSP2_XM, addr, &magic);
++=======
+ 	ret = cs_dsp_read_data_word(&dsp->cs_dsp, WMFW_ADSP2_XM, addr, &magic);
++>>>>>>> e14682021591 (ASoC: wm_adsp: Split out struct cs_dsp from struct wm_adsp)
  	if (ret < 0)
  		return ret;
  
@@@ -3824,8 -4037,8 +4719,13 @@@
  
  	addr = alg_region->base + xmalg + ALG_XM_FIELD(host_buf_ptr);
  	for (i = 0; i < 5; ++i) {
++<<<<<<< HEAD
 +		ret = wm_adsp_read_data_word(dsp, WMFW_ADSP2_XM, addr,
 +					     &buf->host_buf_ptr);
++=======
+ 		ret = cs_dsp_read_data_word(&dsp->cs_dsp, WMFW_ADSP2_XM, addr,
+ 					    &buf->host_buf_ptr);
++>>>>>>> e14682021591 (ASoC: wm_adsp: Split out struct cs_dsp from struct wm_adsp)
  		if (ret < 0)
  			return ret;
  
@@@ -3853,6 -4066,7 +4753,10 @@@ static int wm_adsp_buffer_parse_coeff(s
  {
  	struct wm_adsp_host_buf_coeff_v1 coeff_v1;
  	struct wm_adsp_compr_buf *buf;
++<<<<<<< HEAD
++=======
+ 	struct wm_adsp *dsp = container_of(cs_ctl->dsp, struct wm_adsp, cs_dsp);
++>>>>>>> e14682021591 (ASoC: wm_adsp: Split out struct cs_dsp from struct wm_adsp)
  	unsigned int version;
  	int ret, i;
  
@@@ -3915,17 -4129,17 +4819,22 @@@
  
  static int wm_adsp_buffer_init(struct wm_adsp *dsp)
  {
 -	struct cs_dsp_coeff_ctl *cs_ctl;
 +	struct wm_coeff_ctl *ctl;
  	int ret;
  
++<<<<<<< HEAD
 +	list_for_each_entry(ctl, &dsp->ctl_list, list) {
 +		if (ctl->type != WMFW_CTL_TYPE_HOST_BUFFER)
++=======
+ 	list_for_each_entry(cs_ctl, &dsp->cs_dsp.ctl_list, list) {
+ 		if (cs_ctl->type != WMFW_CTL_TYPE_HOST_BUFFER)
++>>>>>>> e14682021591 (ASoC: wm_adsp: Split out struct cs_dsp from struct wm_adsp)
  			continue;
  
 -		if (!cs_ctl->enabled)
 +		if (!ctl->enabled)
  			continue;
  
 -		ret = wm_adsp_buffer_parse_coeff(cs_ctl);
 +		ret = wm_adsp_buffer_parse_coeff(ctl);
  		if (ret < 0) {
  			adsp_err(dsp, "Failed to parse coeff: %d\n", ret);
  			goto error;
@@@ -4241,8 -4455,8 +5150,13 @@@ static int wm_adsp_buffer_capture_block
  		return 0;
  
  	/* Read data from DSP */
++<<<<<<< HEAD
 +	ret = wm_adsp_read_raw_data_block(buf->dsp, mem_type, adsp_addr,
 +					  nwords, (__be32 *)compr->raw_buf);
++=======
+ 	ret = cs_dsp_read_raw_data_block(&buf->dsp->cs_dsp, mem_type, adsp_addr,
+ 					 nwords, (__be32 *)compr->raw_buf);
++>>>>>>> e14682021591 (ASoC: wm_adsp: Split out struct cs_dsp from struct wm_adsp)
  	if (ret < 0)
  		return ret;
  
@@@ -4340,9 -4555,8 +5255,13 @@@ static void wm_adsp_fatal_error(struct 
  	}
  }
  
++<<<<<<< HEAD
 +irqreturn_t wm_adsp2_bus_error(int irq, void *data)
++=======
+ static void cs_dsp_adsp2_bus_error(struct cs_dsp *dsp)
++>>>>>>> e14682021591 (ASoC: wm_adsp: Split out struct cs_dsp from struct wm_adsp)
  {
 +	struct wm_adsp *dsp = (struct wm_adsp *)data;
  	unsigned int val;
  	struct regmap *regmap = dsp->regmap;
  	int ret = 0;
@@@ -4401,14 -4615,20 +5320,28 @@@
  
  error:
  	mutex_unlock(&dsp->pwr_lock);
++<<<<<<< HEAD
++=======
+ }
+ 
+ irqreturn_t wm_adsp2_bus_error(int irq, void *data)
+ {
+ 	struct wm_adsp *dsp = (struct wm_adsp *)data;
+ 
+ 	cs_dsp_adsp2_bus_error(&dsp->cs_dsp);
++>>>>>>> e14682021591 (ASoC: wm_adsp: Split out struct cs_dsp from struct wm_adsp)
  
  	return IRQ_HANDLED;
  }
  EXPORT_SYMBOL_GPL(wm_adsp2_bus_error);
  
++<<<<<<< HEAD
 +irqreturn_t wm_halo_bus_error(int irq, void *data)
++=======
+ static void cs_dsp_halo_bus_error(struct cs_dsp *dsp)
++>>>>>>> e14682021591 (ASoC: wm_adsp: Split out struct cs_dsp from struct wm_adsp)
  {
 +	struct wm_adsp *dsp = (struct wm_adsp *)data;
  	struct regmap *regmap = dsp->regmap;
  	unsigned int fault[6];
  	struct reg_sequence clear[] = {
@@@ -4458,22 -4678,35 +5391,51 @@@
  
  exit_unlock:
  	mutex_unlock(&dsp->pwr_lock);
++<<<<<<< HEAD
++=======
+ }
+ 
+ irqreturn_t wm_halo_bus_error(int irq, void *data)
+ {
+ 	struct wm_adsp *dsp = (struct wm_adsp *)data;
+ 
+ 	cs_dsp_halo_bus_error(&dsp->cs_dsp);
++>>>>>>> e14682021591 (ASoC: wm_adsp: Split out struct cs_dsp from struct wm_adsp)
  
  	return IRQ_HANDLED;
  }
  EXPORT_SYMBOL_GPL(wm_halo_bus_error);
  
++<<<<<<< HEAD
++=======
+ static void cs_dsp_halo_wdt_expire(struct cs_dsp *dsp)
+ {
+ 	mutex_lock(&dsp->pwr_lock);
+ 
+ 	cs_dsp_warn(dsp, "WDT Expiry Fault\n");
+ 
+ 	dsp->ops->stop_watchdog(dsp);
+ 	wm_adsp_fatal_error(dsp);
+ 
+ 	mutex_unlock(&dsp->pwr_lock);
+ }
+ 
++>>>>>>> e14682021591 (ASoC: wm_adsp: Split out struct cs_dsp from struct wm_adsp)
  irqreturn_t wm_halo_wdt_expire(int irq, void *data)
  {
  	struct wm_adsp *dsp = data;
  
++<<<<<<< HEAD
 +	mutex_lock(&dsp->pwr_lock);
 +
 +	adsp_warn(dsp, "WDT Expiry Fault\n");
 +	dsp->ops->stop_watchdog(dsp);
 +	wm_adsp_fatal_error(dsp);
 +
 +	mutex_unlock(&dsp->pwr_lock);
++=======
+ 	cs_dsp_halo_wdt_expire(&dsp->cs_dsp);
++>>>>>>> e14682021591 (ASoC: wm_adsp: Split out struct cs_dsp from struct wm_adsp)
  
  	return IRQ_HANDLED;
  }
diff --cc sound/soc/codecs/wm_adsp.h
index f22131d9cc29,5a70b6679fa3..000000000000
--- a/sound/soc/codecs/wm_adsp.h
+++ b/sound/soc/codecs/wm_adsp.h
@@@ -51,20 -51,36 +51,40 @@@ struct wm_adsp_alg_region 
  
  struct wm_adsp_compr;
  struct wm_adsp_compr_buf;
++<<<<<<< HEAD
 +struct wm_adsp_ops;
++=======
+ struct cs_dsp_ops;
+ 
+ struct cs_dsp_coeff_ctl {
+ 	const char *fw_name;
+ 	/* Subname is needed to match with firmware */
+ 	const char *subname;
+ 	unsigned int subname_len;
+ 	struct cs_dsp_alg_region alg_region;
+ 	struct cs_dsp *dsp;
+ 	unsigned int enabled:1;
+ 	struct list_head list;
+ 	void *cache;
+ 	unsigned int offset;
+ 	size_t len;
+ 	unsigned int set:1;
+ 	unsigned int flags;
+ 	unsigned int type;
+ 
+ 	void *priv;
+ };
++>>>>>>> e14682021591 (ASoC: wm_adsp: Split out struct cs_dsp from struct wm_adsp)
  
- struct wm_adsp {
- 	const char *part;
+ struct cs_dsp {
  	const char *name;
- 	const char *fwf_name;
  	int rev;
  	int num;
  	int type;
  	struct device *dev;
  	struct regmap *regmap;
- 	struct snd_soc_component *component;
  
 -	const struct cs_dsp_ops *ops;
 +	const struct wm_adsp_ops *ops;
  
  	unsigned int base;
  	unsigned int base_sysinfo;
@@@ -78,16 -95,13 +98,17 @@@
  	unsigned int fw_id_version;
  	unsigned int fw_vendor_id;
  
 -	const struct cs_dsp_region *mem;
 +	const struct wm_adsp_region *mem;
  	int num_mems;
  
++<<<<<<< HEAD
 +	int fw;
++=======
++>>>>>>> e14682021591 (ASoC: wm_adsp: Split out struct cs_dsp from struct wm_adsp)
  	int fw_ver;
  
- 	bool preloaded;
  	bool booted;
  	bool running;
- 	bool fatal_error;
  
  	struct list_head ctl_list;
  
@@@ -105,33 -114,49 +121,62 @@@
  	char *wmfw_file_name;
  	char *bin_file_name;
  #endif
+ };
  
+ struct wm_adsp {
+ 	struct cs_dsp cs_dsp;
+ 	const char *part;
+ 	const char *fwf_name;
+ 	struct snd_soc_component *component;
+ 
+ 	unsigned int sys_config_size;
+ 
+ 	int fw;
+ 
+ 	struct work_struct boot_work;
+ 
+ 	bool preloaded;
+ 	bool fatal_error;
+ 
+ 	struct list_head compr_list;
+ 	struct list_head buffer_list;
  };
  
++<<<<<<< HEAD
 +struct wm_adsp_ops {
 +	unsigned int sys_config_size;
 +
 +	bool (*validate_version)(struct wm_adsp *dsp, unsigned int version);
 +	unsigned int (*parse_sizes)(struct wm_adsp *dsp,
 +				    const char * const file,
 +				    unsigned int pos,
 +				    const struct firmware *firmware);
 +	int (*setup_algs)(struct wm_adsp *dsp);
 +	unsigned int (*region_to_reg)(struct wm_adsp_region const *mem,
++=======
+ struct cs_dsp_ops {
+ 	bool (*validate_version)(struct cs_dsp *dsp, unsigned int version);
+ 	unsigned int (*parse_sizes)(struct cs_dsp *dsp,
+ 				    const char * const file,
+ 				    unsigned int pos,
+ 				    const struct firmware *firmware);
+ 	int (*setup_algs)(struct cs_dsp *dsp);
+ 	unsigned int (*region_to_reg)(struct cs_dsp_region const *mem,
++>>>>>>> e14682021591 (ASoC: wm_adsp: Split out struct cs_dsp from struct wm_adsp)
  				      unsigned int offset);
  
- 	void (*show_fw_status)(struct wm_adsp *dsp);
- 	void (*stop_watchdog)(struct wm_adsp *dsp);
+ 	void (*show_fw_status)(struct cs_dsp *dsp);
+ 	void (*stop_watchdog)(struct cs_dsp *dsp);
  
- 	int (*enable_memory)(struct wm_adsp *dsp);
- 	void (*disable_memory)(struct wm_adsp *dsp);
- 	int (*lock_memory)(struct wm_adsp *dsp, unsigned int lock_regions);
+ 	int (*enable_memory)(struct cs_dsp *dsp);
+ 	void (*disable_memory)(struct cs_dsp *dsp);
+ 	int (*lock_memory)(struct cs_dsp *dsp, unsigned int lock_regions);
  
- 	int (*enable_core)(struct wm_adsp *dsp);
- 	void (*disable_core)(struct wm_adsp *dsp);
+ 	int (*enable_core)(struct cs_dsp *dsp);
+ 	void (*disable_core)(struct cs_dsp *dsp);
  
- 	int (*start_core)(struct wm_adsp *dsp);
- 	void (*stop_core)(struct wm_adsp *dsp);
+ 	int (*start_core)(struct cs_dsp *dsp);
+ 	void (*stop_core)(struct cs_dsp *dsp);
  };
  
  #define WM_ADSP1(wname, num) \
* Unmerged path sound/soc/codecs/cs47l15.c
* Unmerged path sound/soc/codecs/cs47l35.c
* Unmerged path sound/soc/codecs/cs47l85.c
* Unmerged path sound/soc/codecs/cs47l90.c
* Unmerged path sound/soc/codecs/cs47l92.c
* Unmerged path sound/soc/codecs/madera.c
* Unmerged path sound/soc/codecs/cs47l15.c
diff --git a/sound/soc/codecs/cs47l24.c b/sound/soc/codecs/cs47l24.c
index 6b6d08816024..c04da794fdce 100644
--- a/sound/soc/codecs/cs47l24.c
+++ b/sound/soc/codecs/cs47l24.c
@@ -1234,15 +1234,15 @@ static int cs47l24_probe(struct platform_device *pdev)
 
 	for (i = 1; i <= 2; i++) {
 		cs47l24->core.adsp[i].part = "cs47l24";
-		cs47l24->core.adsp[i].num = i + 1;
-		cs47l24->core.adsp[i].type = WMFW_ADSP2;
-		cs47l24->core.adsp[i].dev = arizona->dev;
-		cs47l24->core.adsp[i].regmap = arizona->regmap;
+		cs47l24->core.adsp[i].cs_dsp.num = i + 1;
+		cs47l24->core.adsp[i].cs_dsp.type = WMFW_ADSP2;
+		cs47l24->core.adsp[i].cs_dsp.dev = arizona->dev;
+		cs47l24->core.adsp[i].cs_dsp.regmap = arizona->regmap;
 
-		cs47l24->core.adsp[i].base = ARIZONA_DSP1_CONTROL_1 +
+		cs47l24->core.adsp[i].cs_dsp.base = ARIZONA_DSP1_CONTROL_1 +
 					     (0x100 * i);
-		cs47l24->core.adsp[i].mem = cs47l24_dsp_regions[i - 1];
-		cs47l24->core.adsp[i].num_mems =
+		cs47l24->core.adsp[i].cs_dsp.mem = cs47l24_dsp_regions[i - 1];
+		cs47l24->core.adsp[i].cs_dsp.num_mems =
 				ARRAY_SIZE(cs47l24_dsp2_regions);
 
 		ret = wm_adsp2_init(&cs47l24->core.adsp[i]);
* Unmerged path sound/soc/codecs/cs47l35.c
* Unmerged path sound/soc/codecs/cs47l85.c
* Unmerged path sound/soc/codecs/cs47l90.c
* Unmerged path sound/soc/codecs/cs47l92.c
* Unmerged path sound/soc/codecs/madera.c
diff --git a/sound/soc/codecs/wm2200.c b/sound/soc/codecs/wm2200.c
index c35673e7f420..b1aa202e0aa8 100644
--- a/sound/soc/codecs/wm2200.c
+++ b/sound/soc/codecs/wm2200.c
@@ -2202,23 +2202,23 @@ static int wm2200_i2c_probe(struct i2c_client *i2c,
 	}
 
 	for (i = 0; i < 2; i++) {
-		wm2200->dsp[i].type = WMFW_ADSP1;
+		wm2200->dsp[i].cs_dsp.type = WMFW_ADSP1;
 		wm2200->dsp[i].part = "wm2200";
-		wm2200->dsp[i].num = i + 1;
-		wm2200->dsp[i].dev = &i2c->dev;
-		wm2200->dsp[i].regmap = wm2200->regmap;
-		wm2200->dsp[i].sysclk_reg = WM2200_CLOCKING_3;
-		wm2200->dsp[i].sysclk_mask = WM2200_SYSCLK_FREQ_MASK;
-		wm2200->dsp[i].sysclk_shift =  WM2200_SYSCLK_FREQ_SHIFT;
+		wm2200->dsp[i].cs_dsp.num = i + 1;
+		wm2200->dsp[i].cs_dsp.dev = &i2c->dev;
+		wm2200->dsp[i].cs_dsp.regmap = wm2200->regmap;
+		wm2200->dsp[i].cs_dsp.sysclk_reg = WM2200_CLOCKING_3;
+		wm2200->dsp[i].cs_dsp.sysclk_mask = WM2200_SYSCLK_FREQ_MASK;
+		wm2200->dsp[i].cs_dsp.sysclk_shift =  WM2200_SYSCLK_FREQ_SHIFT;
 	}
 
-	wm2200->dsp[0].base = WM2200_DSP1_CONTROL_1;
-	wm2200->dsp[0].mem = wm2200_dsp1_regions;
-	wm2200->dsp[0].num_mems = ARRAY_SIZE(wm2200_dsp1_regions);
+	wm2200->dsp[0].cs_dsp.base = WM2200_DSP1_CONTROL_1;
+	wm2200->dsp[0].cs_dsp.mem = wm2200_dsp1_regions;
+	wm2200->dsp[0].cs_dsp.num_mems = ARRAY_SIZE(wm2200_dsp1_regions);
 
-	wm2200->dsp[1].base = WM2200_DSP2_CONTROL_1;
-	wm2200->dsp[1].mem = wm2200_dsp2_regions;
-	wm2200->dsp[1].num_mems = ARRAY_SIZE(wm2200_dsp2_regions);
+	wm2200->dsp[1].cs_dsp.base = WM2200_DSP2_CONTROL_1;
+	wm2200->dsp[1].cs_dsp.mem = wm2200_dsp2_regions;
+	wm2200->dsp[1].cs_dsp.num_mems = ARRAY_SIZE(wm2200_dsp2_regions);
 
 	for (i = 0; i < ARRAY_SIZE(wm2200->dsp); i++)
 		wm_adsp1_init(&wm2200->dsp[i]);
diff --git a/sound/soc/codecs/wm5102.c b/sound/soc/codecs/wm5102.c
index 0cb113ad9aa3..7f2d01f5afa6 100644
--- a/sound/soc/codecs/wm5102.c
+++ b/sound/soc/codecs/wm5102.c
@@ -2045,13 +2045,13 @@ static int wm5102_probe(struct platform_device *pdev)
 	arizona_init_dvfs(&wm5102->core);
 
 	wm5102->core.adsp[0].part = "wm5102";
-	wm5102->core.adsp[0].num = 1;
-	wm5102->core.adsp[0].type = WMFW_ADSP2;
-	wm5102->core.adsp[0].base = ARIZONA_DSP1_CONTROL_1;
-	wm5102->core.adsp[0].dev = arizona->dev;
-	wm5102->core.adsp[0].regmap = arizona->regmap;
-	wm5102->core.adsp[0].mem = wm5102_dsp1_regions;
-	wm5102->core.adsp[0].num_mems = ARRAY_SIZE(wm5102_dsp1_regions);
+	wm5102->core.adsp[0].cs_dsp.num = 1;
+	wm5102->core.adsp[0].cs_dsp.type = WMFW_ADSP2;
+	wm5102->core.adsp[0].cs_dsp.base = ARIZONA_DSP1_CONTROL_1;
+	wm5102->core.adsp[0].cs_dsp.dev = arizona->dev;
+	wm5102->core.adsp[0].cs_dsp.regmap = arizona->regmap;
+	wm5102->core.adsp[0].cs_dsp.mem = wm5102_dsp1_regions;
+	wm5102->core.adsp[0].cs_dsp.num_mems = ARRAY_SIZE(wm5102_dsp1_regions);
 
 	ret = wm_adsp2_init(&wm5102->core.adsp[0]);
 	if (ret != 0)
diff --git a/sound/soc/codecs/wm5110.c b/sound/soc/codecs/wm5110.c
index 1eac6c635620..33a10c4ee890 100644
--- a/sound/soc/codecs/wm5110.c
+++ b/sound/soc/codecs/wm5110.c
@@ -2408,15 +2408,15 @@ static int wm5110_probe(struct platform_device *pdev)
 
 	for (i = 0; i < WM5110_NUM_ADSP; i++) {
 		wm5110->core.adsp[i].part = "wm5110";
-		wm5110->core.adsp[i].num = i + 1;
-		wm5110->core.adsp[i].type = WMFW_ADSP2;
-		wm5110->core.adsp[i].dev = arizona->dev;
-		wm5110->core.adsp[i].regmap = arizona->regmap;
+		wm5110->core.adsp[i].cs_dsp.num = i + 1;
+		wm5110->core.adsp[i].cs_dsp.type = WMFW_ADSP2;
+		wm5110->core.adsp[i].cs_dsp.dev = arizona->dev;
+		wm5110->core.adsp[i].cs_dsp.regmap = arizona->regmap;
 
-		wm5110->core.adsp[i].base = ARIZONA_DSP1_CONTROL_1
+		wm5110->core.adsp[i].cs_dsp.base = ARIZONA_DSP1_CONTROL_1
 			+ (0x100 * i);
-		wm5110->core.adsp[i].mem = wm5110_dsp_regions[i];
-		wm5110->core.adsp[i].num_mems
+		wm5110->core.adsp[i].cs_dsp.mem = wm5110_dsp_regions[i];
+		wm5110->core.adsp[i].cs_dsp.num_mems
 			= ARRAY_SIZE(wm5110_dsp1_regions);
 
 		ret = wm_adsp2_init(&wm5110->core.adsp[i]);
* Unmerged path sound/soc/codecs/wm_adsp.c
* Unmerged path sound/soc/codecs/wm_adsp.h
