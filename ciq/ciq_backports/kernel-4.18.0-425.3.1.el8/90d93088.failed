mptcp: constify a bunch of of helpers

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-425.3.1.el8
commit-author Paolo Abeni <pabeni@redhat.com>
commit 90d930882139f166ed2551205d6f6d8c50b656fb
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-425.3.1.el8/90d93088.failed

A few pm-related helpers don't touch arguments which lacking
the const modifier, let's constify them.

	Signed-off-by: Paolo Abeni <pabeni@redhat.com>
	Signed-off-by: Mat Martineau <mathew.j.martineau@linux.intel.com>
	Signed-off-by: Jakub Kicinski <kuba@kernel.org>
(cherry picked from commit 90d930882139f166ed2551205d6f6d8c50b656fb)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/mptcp/pm_netlink.c
diff --cc net/mptcp/pm_netlink.c
index 91db0ac49364,9aeee30e50ba..000000000000
--- a/net/mptcp/pm_netlink.c
+++ b/net/mptcp/pm_netlink.c
@@@ -198,10 -190,9 +198,14 @@@ select_local_address(const struct pm_nl
  }
  
  static struct mptcp_pm_addr_entry *
++<<<<<<< HEAD
 +select_signal_address(struct pm_nl_pernet *pernet, unsigned int pos)
++=======
+ select_signal_address(struct pm_nl_pernet *pernet, const struct mptcp_sock *msk)
++>>>>>>> 90d930882139 (mptcp: constify a bunch of of helpers)
  {
  	struct mptcp_pm_addr_entry *entry, *ret = NULL;
 +	int i = 0;
  
  	rcu_read_lock();
  	/* do not keep any additional per socket state, just signal
@@@ -461,6 -466,49 +465,52 @@@ static unsigned int fill_remote_address
  	return i;
  }
  
++<<<<<<< HEAD
++=======
+ static struct mptcp_pm_addr_entry *
+ __lookup_addr_by_id(struct pm_nl_pernet *pernet, unsigned int id)
+ {
+ 	struct mptcp_pm_addr_entry *entry;
+ 
+ 	list_for_each_entry(entry, &pernet->local_addr_list, list) {
+ 		if (entry->addr.id == id)
+ 			return entry;
+ 	}
+ 	return NULL;
+ }
+ 
+ static struct mptcp_pm_addr_entry *
+ __lookup_addr(struct pm_nl_pernet *pernet, const struct mptcp_addr_info *info,
+ 	      bool lookup_by_id)
+ {
+ 	struct mptcp_pm_addr_entry *entry;
+ 
+ 	list_for_each_entry(entry, &pernet->local_addr_list, list) {
+ 		if ((!lookup_by_id && addresses_equal(&entry->addr, info, true)) ||
+ 		    (lookup_by_id && entry->addr.id == info->id))
+ 			return entry;
+ 	}
+ 	return NULL;
+ }
+ 
+ static int
+ lookup_id_by_addr(const struct pm_nl_pernet *pernet, const struct mptcp_addr_info *addr)
+ {
+ 	const struct mptcp_pm_addr_entry *entry;
+ 	int ret = -1;
+ 
+ 	rcu_read_lock();
+ 	list_for_each_entry(entry, &pernet->local_addr_list, list) {
+ 		if (addresses_equal(&entry->addr, addr, entry->addr.port)) {
+ 			ret = entry->addr.id;
+ 			break;
+ 		}
+ 	}
+ 	rcu_read_unlock();
+ 	return ret;
+ }
+ 
++>>>>>>> 90d930882139 (mptcp: constify a bunch of of helpers)
  static void mptcp_pm_create_subflow_or_signal_addr(struct mptcp_sock *msk)
  {
  	struct sock *sk = (struct sock *)msk;
diff --git a/net/mptcp/pm.c b/net/mptcp/pm.c
index d550692d3374..3e2b801b0536 100644
--- a/net/mptcp/pm.c
+++ b/net/mptcp/pm.c
@@ -202,7 +202,7 @@ void mptcp_pm_add_addr_received(struct mptcp_sock *msk,
 }
 
 void mptcp_pm_add_addr_echoed(struct mptcp_sock *msk,
-			      struct mptcp_addr_info *addr)
+			      const struct mptcp_addr_info *addr)
 {
 	struct mptcp_pm_data *pm = &msk->pm;
 
@@ -255,7 +255,7 @@ void mptcp_pm_mp_prio_received(struct sock *sk, u8 bkup)
 
 /* path manager helpers */
 
-bool mptcp_pm_add_addr_signal(struct mptcp_sock *msk, struct sk_buff *skb,
+bool mptcp_pm_add_addr_signal(struct mptcp_sock *msk, const struct sk_buff *skb,
 			      unsigned int opt_size, unsigned int remaining,
 			      struct mptcp_addr_info *addr, bool *echo,
 			      bool *drop_other_suboptions)
* Unmerged path net/mptcp/pm_netlink.c
diff --git a/net/mptcp/protocol.h b/net/mptcp/protocol.h
index eedb890af3bd..8139a128d17a 100644
--- a/net/mptcp/protocol.h
+++ b/net/mptcp/protocol.h
@@ -691,7 +691,7 @@ void mptcp_pm_subflow_closed(struct mptcp_sock *msk, u8 id);
 void mptcp_pm_add_addr_received(struct mptcp_sock *msk,
 				const struct mptcp_addr_info *addr);
 void mptcp_pm_add_addr_echoed(struct mptcp_sock *msk,
-			      struct mptcp_addr_info *addr);
+			      const struct mptcp_addr_info *addr);
 void mptcp_pm_add_addr_send_ack(struct mptcp_sock *msk);
 void mptcp_pm_nl_addr_send_ack(struct mptcp_sock *msk);
 void mptcp_pm_rm_addr_received(struct mptcp_sock *msk,
@@ -701,10 +701,10 @@ void mptcp_pm_free_anno_list(struct mptcp_sock *msk);
 bool mptcp_pm_sport_in_anno_list(struct mptcp_sock *msk, const struct sock *sk);
 struct mptcp_pm_add_entry *
 mptcp_pm_del_add_timer(struct mptcp_sock *msk,
-		       struct mptcp_addr_info *addr, bool check_id);
+		       const struct mptcp_addr_info *addr, bool check_id);
 struct mptcp_pm_add_entry *
-mptcp_lookup_anno_list_by_saddr(struct mptcp_sock *msk,
-				struct mptcp_addr_info *addr);
+mptcp_lookup_anno_list_by_saddr(const struct mptcp_sock *msk,
+				const struct mptcp_addr_info *addr);
 int mptcp_pm_get_flags_and_ifindex_by_id(struct net *net, unsigned int id,
 					 u8 *flags, int *ifindex);
 
@@ -763,7 +763,7 @@ static inline int mptcp_rm_addr_len(const struct mptcp_rm_list *rm_list)
 	return TCPOLEN_MPTCP_RM_ADDR_BASE + roundup(rm_list->nr - 1, 4) + 1;
 }
 
-bool mptcp_pm_add_addr_signal(struct mptcp_sock *msk, struct sk_buff *skb,
+bool mptcp_pm_add_addr_signal(struct mptcp_sock *msk, const struct sk_buff *skb,
 			      unsigned int opt_size, unsigned int remaining,
 			      struct mptcp_addr_info *addr, bool *echo,
 			      bool *drop_other_suboptions);
@@ -777,10 +777,10 @@ void mptcp_pm_nl_work(struct mptcp_sock *msk);
 void mptcp_pm_nl_rm_subflow_received(struct mptcp_sock *msk,
 				     const struct mptcp_rm_list *rm_list);
 int mptcp_pm_nl_get_local_id(struct mptcp_sock *msk, struct sock_common *skc);
-unsigned int mptcp_pm_get_add_addr_signal_max(struct mptcp_sock *msk);
-unsigned int mptcp_pm_get_add_addr_accept_max(struct mptcp_sock *msk);
-unsigned int mptcp_pm_get_subflows_max(struct mptcp_sock *msk);
-unsigned int mptcp_pm_get_local_addr_max(struct mptcp_sock *msk);
+unsigned int mptcp_pm_get_add_addr_signal_max(const struct mptcp_sock *msk);
+unsigned int mptcp_pm_get_add_addr_accept_max(const struct mptcp_sock *msk);
+unsigned int mptcp_pm_get_subflows_max(const struct mptcp_sock *msk);
+unsigned int mptcp_pm_get_local_addr_max(const struct mptcp_sock *msk);
 
 void mptcp_sockopt_sync(struct mptcp_sock *msk, struct sock *ssk);
 void mptcp_sockopt_sync_all(struct mptcp_sock *msk);
