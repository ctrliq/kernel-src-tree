net/mlx5e: Refactor eswitch attr flags to just attr flags

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-425.3.1.el8
commit-author Roi Dayan <roid@nvidia.com>
commit e5d4e1da65564bb8631ecf5f08f0b2960fb0bc78
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-425.3.1.el8/e5d4e1da.failed

The flags are flow attrs and not esw specific attr flags.
Refactor to remove the esw prefix and move from eswitch.h
to en_tc.h where struct mlx5_flow_attr exists.

	Signed-off-by: Roi Dayan <roid@nvidia.com>
	Reviewed-by: Oz Shlomo <ozsh@nvidia.com>
	Reviewed-by: Vlad Buslov <vladbu@nvidia.com>
	Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
(cherry picked from commit e5d4e1da65564bb8631ecf5f08f0b2960fb0bc78)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en/tc/act/accept.c
#	drivers/net/ethernet/mellanox/mlx5/core/en/tc/act/trap.c
#	drivers/net/ethernet/mellanox/mlx5/core/eswitch.h
#	drivers/net/ethernet/mellanox/mlx5/core/eswitch_offloads.c
#	drivers/net/ethernet/mellanox/mlx5/core/eswitch_offloads_termtbl.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/eswitch.h
index 96fb02c0433d,44321cdfe928..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/eswitch.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/eswitch.h
@@@ -448,14 -448,6 +448,17 @@@ enum 
  	MLX5_ESW_DEST_CHAIN_WITH_SRC_PORT_CHANGE  = BIT(2),
  };
  
++<<<<<<< HEAD
 +enum {
 +	MLX5_ESW_ATTR_FLAG_VLAN_HANDLED  = BIT(0),
 +	MLX5_ESW_ATTR_FLAG_SLOW_PATH     = BIT(1),
 +	MLX5_ESW_ATTR_FLAG_NO_IN_PORT    = BIT(2),
 +	MLX5_ESW_ATTR_FLAG_SRC_REWRITE   = BIT(3),
 +	MLX5_ESW_ATTR_FLAG_SAMPLE        = BIT(4),
 +};
 +
++=======
++>>>>>>> e5d4e1da6556 (net/mlx5e: Refactor eswitch attr flags to just attr flags)
  struct mlx5_esw_flow_attr {
  	struct mlx5_eswitch_rep *in_rep;
  	struct mlx5_core_dev	*in_mdev;
diff --cc drivers/net/ethernet/mellanox/mlx5/core/eswitch_offloads.c
index 44eb1654e679,133f5cf23c3f..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/eswitch_offloads.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/eswitch_offloads.c
@@@ -464,15 -463,15 +464,24 @@@ esw_setup_dests(struct mlx5_flow_destin
  
  	if (!mlx5_eswitch_termtbl_required(esw, attr, flow_act, spec) &&
  	    esw_src_port_rewrite_supported(esw))
- 		attr->flags |= MLX5_ESW_ATTR_FLAG_SRC_REWRITE;
+ 		attr->flags |= MLX5_ATTR_FLAG_SRC_REWRITE;
  
++<<<<<<< HEAD
 +	if (attr->flags & MLX5_ESW_ATTR_FLAG_SAMPLE) {
 +		esw_setup_sampler_dest(dest, flow_act, attr, *i);
++=======
+ 	if (attr->flags & MLX5_ATTR_FLAG_SAMPLE) {
+ 		esw_setup_sampler_dest(dest, flow_act, attr->sample_attr.sampler_id, *i);
++>>>>>>> e5d4e1da6556 (net/mlx5e: Refactor eswitch attr flags to just attr flags)
  		(*i)++;
  	} else if (attr->dest_ft) {
  		esw_setup_ft_dest(dest, flow_act, esw, attr, spec, *i);
  		(*i)++;
++<<<<<<< HEAD
 +	} else if (attr->flags & MLX5_ESW_ATTR_FLAG_SLOW_PATH) {
++=======
+ 	} else if (mlx5e_tc_attr_flags_skip(attr->flags)) {
++>>>>>>> e5d4e1da6556 (net/mlx5e: Refactor eswitch attr flags to just attr flags)
  		esw_setup_slow_path_dest(dest, flow_act, chains, *i);
  		(*i)++;
  	} else if (attr->dest_chain) {
@@@ -499,7 -498,7 +508,11 @@@ esw_cleanup_dests(struct mlx5_eswitch *
  
  	if (attr->dest_ft) {
  		esw_cleanup_decap_indir(esw, attr);
++<<<<<<< HEAD
 +	} else if (!(attr->flags & MLX5_ESW_ATTR_FLAG_SLOW_PATH)) {
++=======
+ 	} else if (!mlx5e_tc_attr_flags_skip(attr->flags)) {
++>>>>>>> e5d4e1da6556 (net/mlx5e: Refactor eswitch attr flags to just attr flags)
  		if (attr->dest_chain)
  			esw_cleanup_chain_dest(chains, attr->dest_chain, 1, 0);
  		else if (esw_is_indir_table(esw, attr))
@@@ -722,7 -721,7 +735,11 @@@ __mlx5_eswitch_del_rule(struct mlx5_esw
  
  	mlx5_del_flow_rules(rule);
  
++<<<<<<< HEAD
 +	if (!(attr->flags & MLX5_ESW_ATTR_FLAG_SLOW_PATH)) {
++=======
+ 	if (!mlx5e_tc_attr_flags_skip(attr->flags)) {
++>>>>>>> e5d4e1da6556 (net/mlx5e: Refactor eswitch attr flags to just attr flags)
  		/* unref the term table */
  		for (i = 0; i < MLX5_MAX_FLOW_FWD_VPORTS; i++) {
  			if (esw_attr->dests[i].termtbl)
diff --cc drivers/net/ethernet/mellanox/mlx5/core/eswitch_offloads_termtbl.c
index 2fb3a984ba2d,4b354aed784a..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/eswitch_offloads_termtbl.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/eswitch_offloads_termtbl.c
@@@ -219,7 -219,7 +219,11 @@@ mlx5_eswitch_termtbl_required(struct ml
  
  	if (!MLX5_CAP_ESW_FLOWTABLE_FDB(esw->dev, termination_table) ||
  	    !MLX5_CAP_ESW_FLOWTABLE_FDB(esw->dev, ignore_flow_level) ||
++<<<<<<< HEAD
 +	    attr->flags & MLX5_ESW_ATTR_FLAG_SLOW_PATH ||
++=======
+ 	    mlx5e_tc_attr_flags_skip(attr->flags) ||
++>>>>>>> e5d4e1da6556 (net/mlx5e: Refactor eswitch attr flags to just attr flags)
  	    (!mlx5_eswitch_offload_is_uplink_port(esw, spec) && !esw_attr->int_port))
  		return false;
  
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en/tc/act/accept.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en/tc/act/trap.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en/tc/act/accept.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en/tc/act/trap.c
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en/tc/sample.c b/drivers/net/ethernet/mellanox/mlx5/core/en/tc/sample.c
index ff4b4f8a5a9d..f2e5c70d8509 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en/tc/sample.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en/tc/sample.c
@@ -403,7 +403,7 @@ add_post_rule(struct mlx5_eswitch *esw, struct mlx5e_sample_flow *sample_flow,
 	post_attr->chain = 0;
 	post_attr->prio = 0;
 	post_attr->ft = default_tbl;
-	post_attr->flags = MLX5_ESW_ATTR_FLAG_NO_IN_PORT;
+	post_attr->flags = MLX5_ATTR_FLAG_NO_IN_PORT;
 
 	/* When offloading sample and encap action, if there is no valid
 	 * neigh data struct, a slow path rule is offloaded first. Source
@@ -580,7 +580,7 @@ mlx5e_tc_sample_offload(struct mlx5e_tc_psample *tc_psample,
 	if (tunnel_id)
 		pre_attr->action |= MLX5_FLOW_CONTEXT_ACTION_DECAP;
 	pre_attr->modify_hdr = sample_flow->restore->modify_hdr;
-	pre_attr->flags = MLX5_ESW_ATTR_FLAG_SAMPLE;
+	pre_attr->flags = MLX5_ATTR_FLAG_SAMPLE;
 	pre_attr->inner_match_level = attr->inner_match_level;
 	pre_attr->outer_match_level = attr->outer_match_level;
 	pre_attr->chain = attr->chain;
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en/tc_ct.c b/drivers/net/ethernet/mellanox/mlx5/core/en/tc_ct.c
index bdde5fe4e17e..123d8bdbb17d 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en/tc_ct.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en/tc_ct.c
@@ -769,7 +769,7 @@ mlx5_tc_ct_entry_add_rule(struct mlx5_tc_ct_priv *ct_priv,
 	attr->ft = nat ? ct_priv->ct_nat : ct_priv->ct;
 	attr->outer_match_level = MLX5_MATCH_L4;
 	attr->counter = entry->counter->counter;
-	attr->flags |= MLX5_ESW_ATTR_FLAG_NO_IN_PORT;
+	attr->flags |= MLX5_ATTR_FLAG_NO_IN_PORT;
 	if (ct_priv->ns_type == MLX5_FLOW_NAMESPACE_FDB)
 		attr->esw_attr->in_mdev = priv->mdev;
 
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en_tc.c b/drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
index e11d6f95f302..57ed972d1771 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
@@ -1164,7 +1164,7 @@ mlx5e_tc_offload_fdb_rules(struct mlx5_eswitch *esw,
 	struct mlx5e_tc_mod_hdr_acts *mod_hdr_acts;
 	struct mlx5_flow_handle *rule;
 
-	if (attr->flags & MLX5_ESW_ATTR_FLAG_SLOW_PATH)
+	if (attr->flags & MLX5_ATTR_FLAG_SLOW_PATH)
 		return mlx5_eswitch_add_offloaded_rule(esw, spec, attr);
 
 	if (flow_flag_test(flow, CT)) {
@@ -1205,7 +1205,7 @@ void mlx5e_tc_unoffload_fdb_rules(struct mlx5_eswitch *esw,
 {
 	flow_flag_clear(flow, OFFLOADED);
 
-	if (attr->flags & MLX5_ESW_ATTR_FLAG_SLOW_PATH)
+	if (attr->flags & MLX5_ATTR_FLAG_SLOW_PATH)
 		goto offload_rule_0;
 
 	if (attr->esw_attr->split_count)
@@ -1237,7 +1237,7 @@ mlx5e_tc_offload_to_slow_path(struct mlx5_eswitch *esw,
 	memcpy(slow_attr, flow->attr, ESW_FLOW_ATTR_SZ);
 	slow_attr->action = MLX5_FLOW_CONTEXT_ACTION_FWD_DEST;
 	slow_attr->esw_attr->split_count = 0;
-	slow_attr->flags |= MLX5_ESW_ATTR_FLAG_SLOW_PATH;
+	slow_attr->flags |= MLX5_ATTR_FLAG_SLOW_PATH;
 
 	rule = mlx5e_tc_offload_fdb_rules(esw, flow, spec, slow_attr);
 	if (!IS_ERR(rule))
@@ -1262,7 +1262,7 @@ void mlx5e_tc_unoffload_from_slow_path(struct mlx5_eswitch *esw,
 	memcpy(slow_attr, flow->attr, ESW_FLOW_ATTR_SZ);
 	slow_attr->action = MLX5_FLOW_CONTEXT_ACTION_FWD_DEST;
 	slow_attr->esw_attr->split_count = 0;
-	slow_attr->flags |= MLX5_ESW_ATTR_FLAG_SLOW_PATH;
+	slow_attr->flags |= MLX5_ATTR_FLAG_SLOW_PATH;
 	mlx5e_tc_unoffload_fdb_rules(esw, flow, slow_attr);
 	flow_flag_clear(flow, SLOW);
 	kfree(slow_attr);
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en_tc.h b/drivers/net/ethernet/mellanox/mlx5/core/en_tc.h
index fb629ee12aff..3680308fa38d 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_tc.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_tc.h
@@ -90,6 +90,22 @@ struct mlx5_flow_attr {
 	};
 };
 
+enum {
+	MLX5_ATTR_FLAG_VLAN_HANDLED  = BIT(0),
+	MLX5_ATTR_FLAG_SLOW_PATH     = BIT(1),
+	MLX5_ATTR_FLAG_NO_IN_PORT    = BIT(2),
+	MLX5_ATTR_FLAG_SRC_REWRITE   = BIT(3),
+	MLX5_ATTR_FLAG_SAMPLE        = BIT(4),
+	MLX5_ATTR_FLAG_ACCEPT        = BIT(5),
+};
+
+/* Returns true if any of the flags that require skipping further TC/NF processing are set. */
+static inline bool
+mlx5e_tc_attr_flags_skip(u32 attr_flags)
+{
+	return attr_flags & (MLX5_ATTR_FLAG_SLOW_PATH | MLX5_ATTR_FLAG_ACCEPT);
+}
+
 struct mlx5_rx_tun_attr {
 	u16 decap_vport;
 	union {
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/esw/indir_table.c b/drivers/net/ethernet/mellanox/mlx5/core/esw/indir_table.c
index c275fe028b6d..0abef71cb839 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/esw/indir_table.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/esw/indir_table.c
@@ -86,7 +86,7 @@ mlx5_esw_indir_table_needed(struct mlx5_eswitch *esw,
 		mlx5_eswitch_is_vf_vport(esw, vport_num) &&
 		esw->dev == dest_mdev &&
 		attr->ip_version &&
-		attr->flags & MLX5_ESW_ATTR_FLAG_SRC_REWRITE;
+		attr->flags & MLX5_ATTR_FLAG_SRC_REWRITE;
 }
 
 u16
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/eswitch.h
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/eswitch_offloads.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/eswitch_offloads_termtbl.c
