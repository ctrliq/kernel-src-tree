net/mlx5: Use irq_set_affinity_and_hint()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-425.3.1.el8
commit-author Nitesh Narayan Lal <nitesh@redhat.com>
commit 7451e9ea8e2055af39afe7ff39a5f68d8ec6b98d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-425.3.1.el8/7451e9ea.failed

The driver uses irq_set_affinity_hint() to update the affinity_hint mask
that is consumed by the userspace to distribute the interrupts and to apply
the provided mask as the affinity for the mlx5 interrupts. However,
irq_set_affinity_hint() applying the provided cpumask as an affinity for
the interrupt is an undocumented side effect.

To remove this side effect irq_set_affinity_hint() has been marked
as deprecated and new interfaces have been introduced. Hence, replace the
irq_set_affinity_hint() with the new interface irq_set_affinity_and_hint()
where the provided mask needs to be applied as the affinity and
affinity_hint pointer needs to be set and replace with
irq_update_affinity_hint() where only affinity_hint needs to be updated.

	Signed-off-by: Nitesh Narayan Lal <nitesh@redhat.com>
	Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
	Reviewed-by: Leon Romanovsky <leonro@nvidia.com>
Link: https://lore.kernel.org/r/20210903152430.244937-14-nitesh@redhat.com

(cherry picked from commit 7451e9ea8e2055af39afe7ff39a5f68d8ec6b98d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/pci_irq.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/pci_irq.c
index 4a06fb0b287d,54fb67cec544..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/pci_irq.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/pci_irq.c
@@@ -297,7 -312,12 +297,16 @@@ static struct mlx5_irq *irq_pool_create
  		       GFP_KERNEL);
  	if (err)
  		return ERR_PTR(err);
++<<<<<<< HEAD
 +	return irq_request(pool, irq_index, affinity);
++=======
+ 	irq = irq_request(pool, irq_index);
+ 	if (IS_ERR(irq))
+ 		return irq;
+ 	cpumask_copy(irq->mask, affinity);
+ 	irq_set_affinity_and_hint(irq->irqn, irq->mask);
+ 	return irq;
++>>>>>>> 7451e9ea8e20 (net/mlx5: Use irq_set_affinity_and_hint())
  }
  
  /* looking for the irq with the smallest refcount and the same affinity */
@@@ -370,10 -389,17 +379,21 @@@ irq_pool_request_vector(struct mlx5_irq
  	mutex_lock(&pool->lock);
  	irq = xa_load(&pool->irqs, vecidx);
  	if (irq) {
 -		irq_get_locked(irq);
 +		kref_get(&irq->kref);
  		goto unlock;
  	}
++<<<<<<< HEAD
 +	irq = irq_request(pool, vecidx, affinity);
++=======
+ 	irq = irq_request(pool, vecidx);
+ 	if (IS_ERR(irq) || !affinity)
+ 		goto unlock;
+ 	cpumask_copy(irq->mask, affinity);
+ 	if (!irq_pool_is_sf_pool(pool) && !pool->xa_num_irqs.max &&
+ 	    cpumask_empty(irq->mask))
+ 		cpumask_set_cpu(0, irq->mask);
+ 	irq_set_affinity_and_hint(irq->irqn, irq->mask);
++>>>>>>> 7451e9ea8e20 (net/mlx5: Use irq_set_affinity_and_hint())
  unlock:
  	mutex_unlock(&pool->lock);
  	return irq;
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/pci_irq.c
