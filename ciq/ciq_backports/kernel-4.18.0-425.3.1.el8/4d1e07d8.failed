net/mlx5e: Fix matchall police parameters validation

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-425.3.1.el8
commit-author Vlad Buslov <vladbu@nvidia.com>
commit 4d1e07d83ccc87f210e5b852b0a5ea812a2f191c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-425.3.1.el8/4d1e07d8.failed

Referenced commit prepared the code for upcoming extension that allows mlx5
to offload police action attached to flower classifier. However, with
regard to existing matchall classifier offload validation should be
reversed as FLOW_ACTION_CONTINUE is the only supported notexceed police
action type. Fix the problem by allowing FLOW_ACTION_CONTINUE for police
action and extend scan_tc_matchall_fdb_actions() to only allow such actions
with matchall classifier.

Fixes: d97b4b105ce7 ("flow_offload: reject offload for all drivers with invalid police parameters")
	Signed-off-by: Vlad Buslov <vladbu@nvidia.com>
	Acked-by: Saeed Mahameed <saeedm@nvidia.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 4d1e07d83ccc87f210e5b852b0a5ea812a2f191c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
index fc4bc5950238,3a39a50146dd..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
@@@ -4920,6 -4519,39 +4920,42 @@@ static int apply_police_params(struct m
  	return err;
  }
  
++<<<<<<< HEAD
++=======
+ static int mlx5e_policer_validate(const struct flow_action *action,
+ 				  const struct flow_action_entry *act,
+ 				  struct netlink_ext_ack *extack)
+ {
+ 	if (act->police.exceed.act_id != FLOW_ACTION_DROP) {
+ 		NL_SET_ERR_MSG_MOD(extack,
+ 				   "Offload not supported when exceed action is not drop");
+ 		return -EOPNOTSUPP;
+ 	}
+ 
+ 	if (act->police.notexceed.act_id == FLOW_ACTION_ACCEPT &&
+ 	    !flow_action_is_last_entry(action, act)) {
+ 		NL_SET_ERR_MSG_MOD(extack,
+ 				   "Offload not supported when conform action is ok, but action is not last");
+ 		return -EOPNOTSUPP;
+ 	}
+ 
+ 	if (act->police.peakrate_bytes_ps ||
+ 	    act->police.avrate || act->police.overhead) {
+ 		NL_SET_ERR_MSG_MOD(extack,
+ 				   "Offload not supported when peakrate/avrate/overhead is configured");
+ 		return -EOPNOTSUPP;
+ 	}
+ 
+ 	if (act->police.rate_pkt_ps) {
+ 		NL_SET_ERR_MSG_MOD(extack,
+ 				   "QoS offload not support packets per second");
+ 		return -EOPNOTSUPP;
+ 	}
+ 
+ 	return 0;
+ }
+ 
++>>>>>>> 4d1e07d83ccc (net/mlx5e: Fix matchall police parameters validation)
  static int scan_tc_matchall_fdb_actions(struct mlx5e_priv *priv,
  					struct flow_action *flow_action,
  					struct netlink_ext_ack *extack)
@@@ -4945,10 -4579,16 +4981,23 @@@
  	flow_action_for_each(i, act, flow_action) {
  		switch (act->id) {
  		case FLOW_ACTION_POLICE:
++<<<<<<< HEAD
 +			if (act->police.rate_pkt_ps) {
 +				NL_SET_ERR_MSG_MOD(extack, "QoS offload not support packets per second");
 +				return -EOPNOTSUPP;
 +			}
++=======
+ 			if (act->police.notexceed.act_id != FLOW_ACTION_CONTINUE) {
+ 				NL_SET_ERR_MSG_MOD(extack,
+ 						   "Offload not supported when conform action is not continue");
+ 				return -EOPNOTSUPP;
+ 			}
+ 
+ 			err = mlx5e_policer_validate(flow_action, act, extack);
+ 			if (err)
+ 				return err;
+ 
++>>>>>>> 4d1e07d83ccc (net/mlx5e: Fix matchall police parameters validation)
  			err = apply_police_params(priv, act->police.rate_bytes_ps, extack);
  			if (err)
  				return err;
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
