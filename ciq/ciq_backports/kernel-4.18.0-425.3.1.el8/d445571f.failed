ACPI: fan: Optimize struct acpi_fan_fif

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-425.3.1.el8
commit-author Srinivas Pandruvada <srinivas.pandruvada@linux.intel.com>
commit d445571fa369cf08148dcd9bce563d5fae14fcd7
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-425.3.1.el8/d445571f.failed

We don't need u64 to store the information about _FIF. There are two
booleans (fine_grain_ctrl and low_speed_notification) and one field
step_size which can take value from 1-9. There are no internal users
of revision field. So convert all fields to u8, by not directly
extracting the _FIF info the struct. Use an intermediate buffer to
extract and assign.

This will help to do u32 math using these fields. No functional
changes are expected.

	Signed-off-by: Srinivas Pandruvada <srinivas.pandruvada@linux.intel.com>
	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
(cherry picked from commit d445571fa369cf08148dcd9bce563d5fae14fcd7)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/acpi/fan.h
diff --cc drivers/acpi/fan.h
index dd9bb8ca2244,6cbb4b028da0..000000000000
--- a/drivers/acpi/fan.h
+++ b/drivers/acpi/fan.h
@@@ -12,3 -16,34 +12,37 @@@
  	{"INTC1048", }, /* Fan for Alder Lake generation */ \
  	{"INTC10A2", }, /* Fan for Raptor Lake generation */ \
  	{"PNP0C0B", } /* Generic ACPI fan */
++<<<<<<< HEAD
++=======
+ 
+ #define ACPI_FPS_NAME_LEN	20
+ 
+ struct acpi_fan_fps {
+ 	u64 control;
+ 	u64 trip_point;
+ 	u64 speed;
+ 	u64 noise_level;
+ 	u64 power;
+ 	char name[ACPI_FPS_NAME_LEN];
+ 	struct device_attribute dev_attr;
+ };
+ 
+ struct acpi_fan_fif {
+ 	u8 revision;
+ 	u8 fine_grain_ctrl;
+ 	u8 step_size;
+ 	u8 low_speed_notification;
+ };
+ 
+ struct acpi_fan {
+ 	bool acpi4;
+ 	struct acpi_fan_fif fif;
+ 	struct acpi_fan_fps *fps;
+ 	int fps_count;
+ 	struct thermal_cooling_device *cdev;
+ };
+ 
+ int acpi_fan_create_attributes(struct acpi_device *device);
+ void acpi_fan_delete_attributes(struct acpi_device *device);
+ #endif
++>>>>>>> d445571fa369 (ACPI: fan: Optimize struct acpi_fan_fif)
diff --git a/drivers/acpi/fan.c b/drivers/acpi/fan.c
index 89d33a258449..ec791c72e4bb 100644
--- a/drivers/acpi/fan.c
+++ b/drivers/acpi/fan.c
@@ -250,7 +250,8 @@ static int acpi_fan_get_fif(struct acpi_device *device)
 	struct acpi_buffer buffer = { ACPI_ALLOCATE_BUFFER, NULL };
 	struct acpi_fan *fan = acpi_driver_data(device);
 	struct acpi_buffer format = { sizeof("NNNN"), "NNNN" };
-	struct acpi_buffer fif = { sizeof(fan->fif), &fan->fif };
+	u64 fields[4];
+	struct acpi_buffer fif = { sizeof(fields), fields };
 	union acpi_object *obj;
 	acpi_status status;
 
@@ -271,6 +272,11 @@ static int acpi_fan_get_fif(struct acpi_device *device)
 		status = -EINVAL;
 	}
 
+	fan->fif.revision = fields[0];
+	fan->fif.fine_grain_ctrl = fields[1];
+	fan->fif.step_size = fields[2];
+	fan->fif.low_speed_notification = fields[3];
+
 err:
 	kfree(obj);
 	return status;
* Unmerged path drivers/acpi/fan.h
