gve: Check TX QPL was actually assigned

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-425.3.1.el8
commit-author Catherine Sullivan <csully@google.com>
commit 5aec55b46c6238506cdf0c60cd0e42ab77a1e5e0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-425.3.1.el8/5aec55b4.failed

Correctly check the TX QPL was assigned and unassigned if
other steps in the allocation fail.

Fixes: f5cedc84a30d (gve: Add transmit and receive support)
	Signed-off-by: Catherine Sullivan <csully@google.com>
	Signed-off-by: David Awogbemila <awogbemila@google.com>
	Acked-by: Willem de Bruijn <willemb@google.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 5aec55b46c6238506cdf0c60cd0e42ab77a1e5e0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/google/gve/gve_tx.c
diff --cc drivers/net/ethernet/google/gve/gve_tx.c
index f4889431f9b7,bb57c42872b4..000000000000
--- a/drivers/net/ethernet/google/gve/gve_tx.c
+++ b/drivers/net/ethernet/google/gve/gve_tx.c
@@@ -206,11 -208,16 +206,24 @@@ static int gve_tx_alloc_ring(struct gve
  	if (!tx->desc)
  		goto abort_with_info;
  
++<<<<<<< HEAD
 +	tx->tx_fifo.qpl = gve_assign_tx_qpl(priv);
 +
 +	/* map Tx FIFO */
 +	if (gve_tx_fifo_init(priv, &tx->tx_fifo))
 +		goto abort_with_desc;
++=======
+ 	tx->raw_addressing = priv->raw_addressing;
+ 	tx->dev = &priv->pdev->dev;
+ 	if (!tx->raw_addressing) {
+ 		tx->tx_fifo.qpl = gve_assign_tx_qpl(priv);
+ 		if (!tx->tx_fifo.qpl)
+ 			goto abort_with_desc;
+ 		/* map Tx FIFO */
+ 		if (gve_tx_fifo_init(priv, &tx->tx_fifo))
+ 			goto abort_with_qpl;
+ 	}
++>>>>>>> 5aec55b46c62 (gve: Check TX QPL was actually assigned)
  
  	tx->q_resources =
  		dma_alloc_coherent(hdev,
@@@ -228,7 -235,11 +241,15 @@@
  	return 0;
  
  abort_with_fifo:
++<<<<<<< HEAD
 +	gve_tx_fifo_release(priv, &tx->tx_fifo);
++=======
+ 	if (!tx->raw_addressing)
+ 		gve_tx_fifo_release(priv, &tx->tx_fifo);
+ abort_with_qpl:
+ 	if (!tx->raw_addressing)
+ 		gve_unassign_qpl(priv, tx->tx_fifo.qpl->id);
++>>>>>>> 5aec55b46c62 (gve: Check TX QPL was actually assigned)
  abort_with_desc:
  	dma_free_coherent(hdev, bytes, tx->desc, tx->bus);
  	tx->desc = NULL;
* Unmerged path drivers/net/ethernet/google/gve/gve_tx.c
