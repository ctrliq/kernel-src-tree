ASoC: cs35l41: Create shared function for setting channels

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-425.3.1.el8
commit-author Lucas Tanure <tanureal@opensource.cirrus.com>
commit 3bc3e3da657f17c14df8ae8fab58183407bd7521
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-425.3.1.el8/3bc3e3da.failed

ASoC and HDA will use the same register to set channels
for the device

	Signed-off-by: Lucas Tanure <tanureal@opensource.cirrus.com>
Link: https://lore.kernel.org/r/20211217115708.882525-6-tanureal@opensource.cirrus.com
	Signed-off-by: Mark Brown <broonie@kernel.org>
(cherry picked from commit 3bc3e3da657f17c14df8ae8fab58183407bd7521)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/sound/cs35l41.h
#	sound/soc/codecs/cs35l41-tables.c
#	sound/soc/codecs/cs35l41.c
diff --cc include/sound/cs35l41.h
index 1f1e3c6c9be1,39d150f61382..000000000000
--- a/include/sound/cs35l41.h
+++ b/include/sound/cs35l41.h
@@@ -31,4 -745,27 +31,30 @@@ struct cs35l41_platform_data 
  	struct cs35l41_irq_cfg irq_config2;
  };
  
++<<<<<<< HEAD
++=======
+ struct cs35l41_otp_packed_element_t {
+ 	u32 reg;
+ 	u8 shift;
+ 	u8 size;
+ };
+ 
+ struct cs35l41_otp_map_element_t {
+ 	u32 id;
+ 	u32 num_elements;
+ 	const struct cs35l41_otp_packed_element_t *map;
+ 	u32 bit_offset;
+ 	u32 word_offset;
+ };
+ 
+ extern struct regmap_config cs35l41_regmap_i2c;
+ extern struct regmap_config cs35l41_regmap_spi;
+ 
+ int cs35l41_otp_unpack(struct device *dev, struct regmap *regmap);
+ int cs35l41_register_errata_patch(struct device *dev, struct regmap *reg, unsigned int reg_revid);
+ int cs35l41_set_channels(struct device *dev, struct regmap *reg,
+ 			 unsigned int tx_num, unsigned int *tx_slot,
+ 			 unsigned int rx_num, unsigned int *rx_slot);
+ 
++>>>>>>> 3bc3e3da657f (ASoC: cs35l41: Create shared function for setting channels)
  #endif /* __CS35L41_H */
diff --cc sound/soc/codecs/cs35l41-tables.c
index d1a4946ef8e0,afcec715374d..000000000000
--- a/sound/soc/codecs/cs35l41-tables.c
+++ b/sound/soc/codecs/cs35l41-tables.c
@@@ -626,3 -780,193 +626,196 @@@ struct regmap_config cs35l41_regmap_sp
  	.cache_type = REGCACHE_RBTREE,
  };
  EXPORT_SYMBOL_GPL(cs35l41_regmap_spi);
++<<<<<<< HEAD:sound/soc/codecs/cs35l41-tables.c
++=======
+ 
+ static const struct cs35l41_otp_map_element_t *cs35l41_find_otp_map(u32 otp_id)
+ {
+ 	int i;
+ 
+ 	for (i = 0; i < ARRAY_SIZE(cs35l41_otp_map_map); i++) {
+ 		if (cs35l41_otp_map_map[i].id == otp_id)
+ 			return &cs35l41_otp_map_map[i];
+ 	}
+ 
+ 	return NULL;
+ }
+ 
+ int cs35l41_otp_unpack(struct device *dev, struct regmap *regmap)
+ {
+ 	const struct cs35l41_otp_map_element_t *otp_map_match;
+ 	const struct cs35l41_otp_packed_element_t *otp_map;
+ 	int bit_offset, word_offset, ret, i;
+ 	unsigned int bit_sum = 8;
+ 	u32 otp_val, otp_id_reg;
+ 	u32 *otp_mem;
+ 
+ 	otp_mem = kmalloc_array(CS35L41_OTP_SIZE_WORDS, sizeof(*otp_mem), GFP_KERNEL);
+ 	if (!otp_mem)
+ 		return -ENOMEM;
+ 
+ 	ret = regmap_read(regmap, CS35L41_OTPID, &otp_id_reg);
+ 	if (ret) {
+ 		dev_err(dev, "Read OTP ID failed: %d\n", ret);
+ 		goto err_otp_unpack;
+ 	}
+ 
+ 	otp_map_match = cs35l41_find_otp_map(otp_id_reg);
+ 
+ 	if (!otp_map_match) {
+ 		dev_err(dev, "OTP Map matching ID %d not found\n", otp_id_reg);
+ 		ret = -EINVAL;
+ 		goto err_otp_unpack;
+ 	}
+ 
+ 	ret = regmap_bulk_read(regmap, CS35L41_OTP_MEM0, otp_mem, CS35L41_OTP_SIZE_WORDS);
+ 	if (ret) {
+ 		dev_err(dev, "Read OTP Mem failed: %d\n", ret);
+ 		goto err_otp_unpack;
+ 	}
+ 
+ 	otp_map = otp_map_match->map;
+ 
+ 	bit_offset = otp_map_match->bit_offset;
+ 	word_offset = otp_map_match->word_offset;
+ 
+ 	ret = regmap_write(regmap, CS35L41_TEST_KEY_CTL, 0x00000055);
+ 	if (ret) {
+ 		dev_err(dev, "Write Unlock key failed 1/2: %d\n", ret);
+ 		goto err_otp_unpack;
+ 	}
+ 	ret = regmap_write(regmap, CS35L41_TEST_KEY_CTL, 0x000000AA);
+ 	if (ret) {
+ 		dev_err(dev, "Write Unlock key failed 2/2: %d\n", ret);
+ 		goto err_otp_unpack;
+ 	}
+ 
+ 	for (i = 0; i < otp_map_match->num_elements; i++) {
+ 		dev_dbg(dev, "bitoffset= %d, word_offset=%d, bit_sum mod 32=%d\n",
+ 			bit_offset, word_offset, bit_sum % 32);
+ 		if (bit_offset + otp_map[i].size - 1 >= 32) {
+ 			otp_val = (otp_mem[word_offset] &
+ 					GENMASK(31, bit_offset)) >> bit_offset;
+ 			otp_val |= (otp_mem[++word_offset] &
+ 					GENMASK(bit_offset + otp_map[i].size - 33, 0)) <<
+ 					(32 - bit_offset);
+ 			bit_offset += otp_map[i].size - 32;
+ 		} else {
+ 			otp_val = (otp_mem[word_offset] &
+ 				   GENMASK(bit_offset + otp_map[i].size - 1, bit_offset)
+ 				  ) >> bit_offset;
+ 			bit_offset += otp_map[i].size;
+ 		}
+ 		bit_sum += otp_map[i].size;
+ 
+ 		if (bit_offset == 32) {
+ 			bit_offset = 0;
+ 			word_offset++;
+ 		}
+ 
+ 		if (otp_map[i].reg != 0) {
+ 			ret = regmap_update_bits(regmap, otp_map[i].reg,
+ 						 GENMASK(otp_map[i].shift + otp_map[i].size - 1,
+ 							 otp_map[i].shift),
+ 						 otp_val << otp_map[i].shift);
+ 			if (ret < 0) {
+ 				dev_err(dev, "Write OTP val failed: %d\n", ret);
+ 				goto err_otp_unpack;
+ 			}
+ 		}
+ 	}
+ 
+ 	ret = regmap_write(regmap, CS35L41_TEST_KEY_CTL, 0x000000CC);
+ 	if (ret) {
+ 		dev_err(dev, "Write Lock key failed 1/2: %d\n", ret);
+ 		goto err_otp_unpack;
+ 	}
+ 	ret = regmap_write(regmap, CS35L41_TEST_KEY_CTL, 0x00000033);
+ 	if (ret) {
+ 		dev_err(dev, "Write Lock key failed 2/2: %d\n", ret);
+ 		goto err_otp_unpack;
+ 	}
+ 	ret = 0;
+ 
+ err_otp_unpack:
+ 	kfree(otp_mem);
+ 
+ 	return ret;
+ }
+ EXPORT_SYMBOL_GPL(cs35l41_otp_unpack);
+ 
+ int cs35l41_register_errata_patch(struct device *dev, struct regmap *reg, unsigned int reg_revid)
+ {
+ 	char *rev;
+ 	int ret;
+ 
+ 	switch (reg_revid) {
+ 	case CS35L41_REVID_A0:
+ 		ret = regmap_register_patch(reg, cs35l41_reva0_errata_patch,
+ 					    ARRAY_SIZE(cs35l41_reva0_errata_patch));
+ 		rev = "A0";
+ 		break;
+ 	case CS35L41_REVID_B0:
+ 		ret = regmap_register_patch(reg, cs35l41_revb0_errata_patch,
+ 					    ARRAY_SIZE(cs35l41_revb0_errata_patch));
+ 		rev = "B0";
+ 		break;
+ 	case CS35L41_REVID_B2:
+ 		ret = regmap_register_patch(reg, cs35l41_revb2_errata_patch,
+ 					    ARRAY_SIZE(cs35l41_revb2_errata_patch));
+ 		rev = "B2";
+ 		break;
+ 	default:
+ 		ret = -EINVAL;
+ 		rev = "XX";
+ 		break;
+ 	}
+ 
+ 	if (ret)
+ 		dev_err(dev, "Failed to apply %s errata patch: %d\n", rev, ret);
+ 
+ 	ret = regmap_write(reg, CS35L41_DSP1_CCM_CORE_CTRL, 0);
+ 	if (ret < 0)
+ 		dev_err(dev, "Write CCM_CORE_CTRL failed: %d\n", ret);
+ 
+ 	return ret;
+ }
+ EXPORT_SYMBOL_GPL(cs35l41_register_errata_patch);
+ 
+ int cs35l41_set_channels(struct device *dev, struct regmap *reg,
+ 			 unsigned int tx_num, unsigned int *tx_slot,
+ 			 unsigned int rx_num, unsigned int *rx_slot)
+ {
+ 	unsigned int val, mask;
+ 	int i;
+ 
+ 	if (tx_num > 4 || rx_num > 2)
+ 		return -EINVAL;
+ 
+ 	val = 0;
+ 	mask = 0;
+ 	for (i = 0; i < rx_num; i++) {
+ 		dev_dbg(dev, "rx slot %d position = %d\n", i, rx_slot[i]);
+ 		val |= rx_slot[i] << (i * 8);
+ 		mask |= 0x3F << (i * 8);
+ 	}
+ 	regmap_update_bits(reg, CS35L41_SP_FRAME_RX_SLOT, mask, val);
+ 
+ 	val = 0;
+ 	mask = 0;
+ 	for (i = 0; i < tx_num; i++) {
+ 		dev_dbg(dev, "tx slot %d position = %d\n", i, tx_slot[i]);
+ 		val |= tx_slot[i] << (i * 8);
+ 		mask |= 0x3F << (i * 8);
+ 	}
+ 	regmap_update_bits(reg, CS35L41_SP_FRAME_TX_SLOT, mask, val);
+ 
+ 	return 0;
+ }
+ EXPORT_SYMBOL_GPL(cs35l41_set_channels);
+ 
+ MODULE_DESCRIPTION("CS35L41 library");
+ MODULE_AUTHOR("David Rhodes, Cirrus Logic Inc, <david.rhodes@cirrus.com>");
+ MODULE_AUTHOR("Lucas Tanure, Cirrus Logic Inc, <tanureal@opensource.cirrus.com>");
+ MODULE_LICENSE("GPL");
++>>>>>>> 3bc3e3da657f (ASoC: cs35l41: Create shared function for setting channels):sound/soc/codecs/cs35l41-lib.c
diff --cc sound/soc/codecs/cs35l41.c
index 56fe8f72bd6a,88d6e77fdb50..000000000000
--- a/sound/soc/codecs/cs35l41.c
+++ b/sound/soc/codecs/cs35l41.c
@@@ -681,36 -742,21 +681,26 @@@ static const struct snd_soc_dapm_route 
  	{"CLASS H", NULL, "PCM Source"},
  };
  
++<<<<<<< HEAD
 +static int cs35l41_set_channel_map(struct snd_soc_dai *dai, unsigned int tx_num,
 +				   unsigned int *tx_slot, unsigned int rx_num,
 +				   unsigned int *rx_slot)
++=======
+ static const struct cs_dsp_region cs35l41_dsp1_regions[] = {
+ 	{ .type = WMFW_HALO_PM_PACKED,	.base = CS35L41_DSP1_PMEM_0 },
+ 	{ .type = WMFW_HALO_XM_PACKED,	.base = CS35L41_DSP1_XMEM_PACK_0 },
+ 	{ .type = WMFW_HALO_YM_PACKED,	.base = CS35L41_DSP1_YMEM_PACK_0 },
+ 	{. type = WMFW_ADSP2_XM,	.base = CS35L41_DSP1_XMEM_UNPACK24_0},
+ 	{. type = WMFW_ADSP2_YM,	.base = CS35L41_DSP1_YMEM_UNPACK24_0},
+ };
+ 
+ static int cs35l41_set_channel_map(struct snd_soc_dai *dai, unsigned int tx_n,
+ 				   unsigned int *tx_slot, unsigned int rx_n, unsigned int *rx_slot)
++>>>>>>> 3bc3e3da657f (ASoC: cs35l41: Create shared function for setting channels)
  {
  	struct cs35l41_private *cs35l41 = snd_soc_component_get_drvdata(dai->component);
- 	unsigned int val, mask;
- 	int i;
- 
- 	if (tx_num > 4 || rx_num > 2)
- 		return -EINVAL;
- 
- 	val = 0;
- 	mask = 0;
- 	for (i = 0; i < rx_num; i++) {
- 		dev_dbg(cs35l41->dev, "rx slot %d position = %d\n", i, rx_slot[i]);
- 		val |= rx_slot[i] << (i * 8);
- 		mask |= 0x3F << (i * 8);
- 	}
- 	regmap_update_bits(cs35l41->regmap, CS35L41_SP_FRAME_RX_SLOT, mask, val);
- 
- 	val = 0;
- 	mask = 0;
- 	for (i = 0; i < tx_num; i++) {
- 		dev_dbg(cs35l41->dev, "tx slot %d position = %d\n", i, tx_slot[i]);
- 		val |= tx_slot[i] << (i * 8);
- 		mask |= 0x3F << (i * 8);
- 	}
- 	regmap_update_bits(cs35l41->regmap, CS35L41_SP_FRAME_TX_SLOT, mask, val);
  
- 	return 0;
+ 	return cs35l41_set_channels(cs35l41->dev, cs35l41->regmap, tx_n, tx_slot, rx_n, rx_slot);
  }
  
  static int cs35l41_set_dai_fmt(struct snd_soc_dai *dai, unsigned int fmt)
* Unmerged path include/sound/cs35l41.h
* Unmerged path sound/soc/codecs/cs35l41-tables.c
* Unmerged path sound/soc/codecs/cs35l41.c
