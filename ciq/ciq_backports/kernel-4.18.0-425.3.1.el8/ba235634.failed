ASoC: wm_adsp: Add support for "toggle" preloaders

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-425.3.1.el8
commit-author Charles Keepax <ckeepax@opensource.cirrus.com>
commit ba235634b138cd9d012dbe983e7920481211e132
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-425.3.1.el8/ba235634.failed

In the case a device can support retaining the firmware memory across
low power states it is useful for the preloader widget to only power up
whilst actually loading/unloading the core, as opposed to the normal
operation where the widget is powered for the entire time a firmware is
preloaded onto the core. Add support for this mode and a flag to enable
it.

	Signed-off-by: Charles Keepax <ckeepax@opensource.cirrus.com>
Link: https://lore.kernel.org/r/20220105113026.18955-7-ckeepax@opensource.cirrus.com
	Signed-off-by: Mark Brown <broonie@kernel.org>
(cherry picked from commit ba235634b138cd9d012dbe983e7920481211e132)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	sound/soc/codecs/wm_adsp.c
#	sound/soc/codecs/wm_adsp.h
diff --cc sound/soc/codecs/wm_adsp.c
index c1b5ea3b5718,f3672e3d1703..000000000000
--- a/sound/soc/codecs/wm_adsp.c
+++ b/sound/soc/codecs/wm_adsp.c
@@@ -3132,11 -896,12 +3132,16 @@@ int wm_adsp2_preloader_put(struct snd_k
  	struct wm_adsp *dsp = &dsps[mc->shift - 1];
  	char preload[32];
  
++<<<<<<< HEAD
 +	snprintf(preload, ARRAY_SIZE(preload), "%s Preload", dsp->name);
++=======
+ 	if (dsp->preloaded == ucontrol->value.integer.value[0])
+ 		return 0;
  
- 	dsp->preloaded = ucontrol->value.integer.value[0];
+ 	snprintf(preload, ARRAY_SIZE(preload), "%s Preload", dsp->cs_dsp.name);
++>>>>>>> ba235634b138 (ASoC: wm_adsp: Add support for "toggle" preloaders)
  
- 	if (ucontrol->value.integer.value[0])
+ 	if (ucontrol->value.integer.value[0] || dsp->toggle_preload)
  		snd_soc_component_force_enable_pin(component, preload);
  	else
  		snd_soc_component_disable_pin(component, preload);
diff --cc sound/soc/codecs/wm_adsp.h
index f22131d9cc29,7f4fabbc6ad3..000000000000
--- a/sound/soc/codecs/wm_adsp.h
+++ b/sound/soc/codecs/wm_adsp.h
@@@ -96,42 -42,13 +96,52 @@@ struct wm_adsp 
  	struct list_head compr_list;
  	struct list_head buffer_list;
  
++<<<<<<< HEAD
 +	struct mutex pwr_lock;
 +
 +	unsigned int lock_regions;
 +
 +#ifdef CONFIG_DEBUG_FS
 +	struct dentry *debugfs_root;
 +	char *wmfw_file_name;
 +	char *bin_file_name;
 +#endif
 +
 +};
 +
 +struct wm_adsp_ops {
 +	unsigned int sys_config_size;
 +
 +	bool (*validate_version)(struct wm_adsp *dsp, unsigned int version);
 +	unsigned int (*parse_sizes)(struct wm_adsp *dsp,
 +				    const char * const file,
 +				    unsigned int pos,
 +				    const struct firmware *firmware);
 +	int (*setup_algs)(struct wm_adsp *dsp);
 +	unsigned int (*region_to_reg)(struct wm_adsp_region const *mem,
 +				      unsigned int offset);
 +
 +	void (*show_fw_status)(struct wm_adsp *dsp);
 +	void (*stop_watchdog)(struct wm_adsp *dsp);
 +
 +	int (*enable_memory)(struct wm_adsp *dsp);
 +	void (*disable_memory)(struct wm_adsp *dsp);
 +	int (*lock_memory)(struct wm_adsp *dsp, unsigned int lock_regions);
 +
 +	int (*enable_core)(struct wm_adsp *dsp);
 +	void (*disable_core)(struct wm_adsp *dsp);
 +
 +	int (*start_core)(struct wm_adsp *dsp);
 +	void (*stop_core)(struct wm_adsp *dsp);
++=======
+ 	/*
+ 	 * Flag indicating the preloader widget only needs power toggled
+ 	 * on state change rather than held on for the duration of the
+ 	 * preload, useful for devices that can retain firmware memory
+ 	 * across power down.
+ 	 */
+ 	bool toggle_preload;
++>>>>>>> ba235634b138 (ASoC: wm_adsp: Add support for "toggle" preloaders)
  };
  
  #define WM_ADSP1(wname, num) \
* Unmerged path sound/soc/codecs/wm_adsp.c
* Unmerged path sound/soc/codecs/wm_adsp.h
