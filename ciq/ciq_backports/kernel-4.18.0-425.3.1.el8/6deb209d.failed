net: Print hashed skb addresses for all net and qdisc events

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-425.3.1.el8
commit-author Subash Abhinov Kasiviswanathan <quic_subashab@quicinc.com>
commit 6deb209dc6b0952a460da17ee61223ee3b3429d5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-425.3.1.el8/6deb209d.failed

The following commits added support for printing the real address-
65875073eddd ("net: use %px to print skb address in trace_netif_receive_skb")
70713dddf3d2 ("net_sched: introduce tracepoint trace_qdisc_enqueue()")
851f36e40962 ("net_sched: use %px to print skb address in trace_qdisc_dequeue()")

However, tracing the packet traversal shows a mix of hashes and real
addresses. Pasting a sample trace for reference-

ping-14249   [002] .....  3424.046612: netif_rx_entry: dev=lo napi_id=0x3 queue_mapping=0
skbaddr=00000000dcbed83e vlan_tagged=0 vlan_proto=0x0000 vlan_tci=0x0000 protocol=0x0800
ip_summed=0 hash=0x00000000 l4_hash=0 len=84 data_len=0 truesize=768 mac_header_valid=1
mac_header=-14 nr_frags=0 gso_size=0 gso_type=0x0
ping-14249   [002] .....  3424.046615: netif_rx: dev=lo skbaddr=ffffff888e5d1000 len=84

Switch the trace print formats to %p for all the events to have a
consistent format of printing the hashed addresses in all cases.

	Signed-off-by: Sean Tranchetti <quic_stranche@quicinc.com>
	Signed-off-by: Subash Abhinov Kasiviswanathan <quic_subashab@quicinc.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 6deb209dc6b0952a460da17ee61223ee3b3429d5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/trace/events/qdisc.h
diff --cc include/trace/events/qdisc.h
index 58209557cb3a,a3995925cb05..000000000000
--- a/include/trace/events/qdisc.h
+++ b/include/trace/events/qdisc.h
@@@ -46,6 -46,34 +46,37 @@@ TRACE_EVENT(qdisc_dequeue
  		  __entry->txq_state, __entry->packets, __entry->skbaddr )
  );
  
++<<<<<<< HEAD
++=======
+ TRACE_EVENT(qdisc_enqueue,
+ 
+ 	TP_PROTO(struct Qdisc *qdisc, const struct netdev_queue *txq, struct sk_buff *skb),
+ 
+ 	TP_ARGS(qdisc, txq, skb),
+ 
+ 	TP_STRUCT__entry(
+ 		__field(struct Qdisc *, qdisc)
+ 		__field(const struct netdev_queue *, txq)
+ 		__field(void *,	skbaddr)
+ 		__field(int, ifindex)
+ 		__field(u32, handle)
+ 		__field(u32, parent)
+ 	),
+ 
+ 	TP_fast_assign(
+ 		__entry->qdisc = qdisc;
+ 		__entry->txq	 = txq;
+ 		__entry->skbaddr = skb;
+ 		__entry->ifindex = txq->dev ? txq->dev->ifindex : 0;
+ 		__entry->handle	 = qdisc->handle;
+ 		__entry->parent	 = qdisc->parent;
+ 	),
+ 
+ 	TP_printk("enqueue ifindex=%d qdisc handle=0x%X parent=0x%X skbaddr=%p",
+ 		  __entry->ifindex, __entry->handle, __entry->parent, __entry->skbaddr)
+ );
+ 
++>>>>>>> 6deb209dc6b0 (net: Print hashed skb addresses for all net and qdisc events)
  TRACE_EVENT(qdisc_reset,
  
  	TP_PROTO(struct Qdisc *q),
diff --git a/include/trace/events/net.h b/include/trace/events/net.h
index 2928088bcf9e..bd10565114a5 100644
--- a/include/trace/events/net.h
+++ b/include/trace/events/net.h
@@ -136,7 +136,7 @@ DECLARE_EVENT_CLASS(net_dev_template,
 		__assign_str(name, skb->dev->name);
 	),
 
-	TP_printk("dev=%s skbaddr=%px len=%u",
+	TP_printk("dev=%s skbaddr=%p len=%u",
 		__get_str(name), __entry->skbaddr, __entry->len)
 )
 
* Unmerged path include/trace/events/qdisc.h
