drm/amdgpu/psp: move PSP memory alloc from hw_init to sw_init

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-425.3.1.el8
commit-author Alex Deucher <alexander.deucher@amd.com>
commit b95b5391684b39695887afb4a13cccee7820f5d6
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-425.3.1.el8/b95b5391.failed

Memory allocations should be done in sw_init.  hw_init should
just be hardware programming needed to initialize the IP block.
This is how most other IP blocks work.  Move the GPU memory
allocations from psp hw_init to psp sw_init and move the memory
free to sw_fini.  This also fixes a potential GPU memory leak
if psp hw_init fails.

	Reviewed-by: Hawking Zhang <Hawking.Zhang@amd.com>
	Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
(cherry picked from commit b95b5391684b39695887afb4a13cccee7820f5d6)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/amd/amdgpu/amdgpu_psp.c
diff --cc drivers/gpu/drm/amd/amdgpu/amdgpu_psp.c
index b33edfd276eb,0787f2e36f2a..000000000000
--- a/drivers/gpu/drm/amd/amdgpu/amdgpu_psp.c
+++ b/drivers/gpu/drm/amd/amdgpu/amdgpu_psp.c
@@@ -309,25 -394,41 +341,38 @@@ failed1
  static int psp_sw_fini(void *handle)
  {
  	struct amdgpu_device *adev = (struct amdgpu_device *)handle;
 -	struct psp_context *psp = &adev->psp;
 -	struct psp_gfx_cmd_resp *cmd = psp->cmd;
  
 -	psp_memory_training_fini(psp);
 -	if (psp->sos_fw) {
 -		release_firmware(psp->sos_fw);
 -		psp->sos_fw = NULL;
 -	}
 -	if (psp->asd_fw) {
 -		release_firmware(psp->asd_fw);
 -		psp->asd_fw = NULL;
 +	psp_memory_training_fini(&adev->psp);
 +	if (adev->psp.sos_fw) {
 +		release_firmware(adev->psp.sos_fw);
 +		adev->psp.sos_fw = NULL;
  	}
 -	if (psp->ta_fw) {
 -		release_firmware(psp->ta_fw);
 -		psp->ta_fw = NULL;
 +	if (adev->psp.asd_fw) {
 +		release_firmware(adev->psp.asd_fw);
 +		adev->psp.asd_fw = NULL;
  	}
 -	if (adev->psp.cap_fw) {
 -		release_firmware(psp->cap_fw);
 -		psp->cap_fw = NULL;
 +	if (adev->psp.ta_fw) {
 +		release_firmware(adev->psp.ta_fw);
 +		adev->psp.ta_fw = NULL;
  	}
  
 -	if (adev->ip_versions[MP0_HWIP][0] == IP_VERSION(11, 0, 0) ||
 -	    adev->ip_versions[MP0_HWIP][0] == IP_VERSION(11, 0, 7))
 +	if (adev->asic_type == CHIP_NAVI10 ||
 +	    adev->asic_type == CHIP_SIENNA_CICHLID)
  		psp_sysfs_fini(adev);
  
++<<<<<<< HEAD
++=======
+ 	kfree(cmd);
+ 	cmd = NULL;
+ 
+ 	amdgpu_bo_free_kernel(&psp->fw_pri_bo,
+ 			      &psp->fw_pri_mc_addr, &psp->fw_pri_buf);
+ 	amdgpu_bo_free_kernel(&psp->fence_buf_bo,
+ 			      &psp->fence_buf_mc_addr, &psp->fence_buf);
+ 	amdgpu_bo_free_kernel(&psp->cmd_buf_bo, &psp->cmd_buf_mc_addr,
+ 			      (void **)&psp->cmd_buf_mem);
+ 
++>>>>>>> b95b5391684b (drm/amdgpu/psp: move PSP memory alloc from hw_init to sw_init)
  	return 0;
  }
  
@@@ -2478,55 -2508,18 +2523,35 @@@ static int psp_load_fw(struct amdgpu_de
  	struct psp_context *psp = &adev->psp;
  
  	if (amdgpu_sriov_vf(adev) && amdgpu_in_reset(adev)) {
++<<<<<<< HEAD
 +		psp_ring_stop(psp, PSP_RING_TYPE__KM); /* should not destroy ring, only stop */
 +		goto skip_memalloc;
 +	}
 +
 +	psp->cmd = kzalloc(sizeof(struct psp_gfx_cmd_resp), GFP_KERNEL);
 +	if (!psp->cmd)
 +		return -ENOMEM;
 +
 +	if (amdgpu_sriov_vf(adev)) {
 +		ret = amdgpu_bo_create_kernel(adev, PSP_1_MEG, PSP_1_MEG,
 +						AMDGPU_GEM_DOMAIN_VRAM,
 +						&psp->fw_pri_bo,
 +						&psp->fw_pri_mc_addr,
 +						&psp->fw_pri_buf);
++=======
+ 		/* should not destroy ring, only stop */
+ 		psp_ring_stop(psp, PSP_RING_TYPE__KM);
++>>>>>>> b95b5391684b (drm/amdgpu/psp: move PSP memory alloc from hw_init to sw_init)
  	} else {
- 		ret = amdgpu_bo_create_kernel(adev, PSP_1_MEG, PSP_1_MEG,
- 						AMDGPU_GEM_DOMAIN_GTT,
- 						&psp->fw_pri_bo,
- 						&psp->fw_pri_mc_addr,
- 						&psp->fw_pri_buf);
- 	}
- 
- 	if (ret)
- 		goto failed;
- 
- 	ret = amdgpu_bo_create_kernel(adev, PSP_FENCE_BUFFER_SIZE, PAGE_SIZE,
- 					AMDGPU_GEM_DOMAIN_VRAM,
- 					&psp->fence_buf_bo,
- 					&psp->fence_buf_mc_addr,
- 					&psp->fence_buf);
- 	if (ret)
- 		goto failed;
+ 		memset(psp->fence_buf, 0, PSP_FENCE_BUFFER_SIZE);
  
- 	ret = amdgpu_bo_create_kernel(adev, PSP_CMD_BUFFER_SIZE, PAGE_SIZE,
- 				      AMDGPU_GEM_DOMAIN_VRAM,
- 				      &psp->cmd_buf_bo, &psp->cmd_buf_mc_addr,
- 				      (void **)&psp->cmd_buf_mem);
- 	if (ret)
- 		goto failed;
- 
- 	memset(psp->fence_buf, 0, PSP_FENCE_BUFFER_SIZE);
- 
- 	ret = psp_ring_init(psp, PSP_RING_TYPE__KM);
- 	if (ret) {
- 		DRM_ERROR("PSP ring init failed!\n");
- 		goto failed;
+ 		ret = psp_ring_init(psp, PSP_RING_TYPE__KM);
+ 		if (ret) {
+ 			DRM_ERROR("PSP ring init failed!\n");
+ 			goto failed;
+ 		}
  	}
  
- skip_memalloc:
  	ret = psp_hw_start(psp);
  	if (ret)
  		goto failed;
@@@ -2632,16 -2637,6 +2657,19 @@@ static int psp_hw_fini(void *handle
  	psp_tmr_terminate(psp);
  	psp_ring_destroy(psp, PSP_RING_TYPE__KM);
  
++<<<<<<< HEAD
 +	amdgpu_bo_free_kernel(&psp->fw_pri_bo,
 +			      &psp->fw_pri_mc_addr, &psp->fw_pri_buf);
 +	amdgpu_bo_free_kernel(&psp->fence_buf_bo,
 +			      &psp->fence_buf_mc_addr, &psp->fence_buf);
 +	amdgpu_bo_free_kernel(&psp->cmd_buf_bo, &psp->cmd_buf_mc_addr,
 +			      (void **)&psp->cmd_buf_mem);
 +
 +	kfree(psp->cmd);
 +	psp->cmd = NULL;
 +
++=======
++>>>>>>> b95b5391684b (drm/amdgpu/psp: move PSP memory alloc from hw_init to sw_init)
  	return 0;
  }
  
* Unmerged path drivers/gpu/drm/amd/amdgpu/amdgpu_psp.c
