cpufreq: Reuse cpufreq_driver_resolve_freq() in __cpufreq_driver_target()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-425.3.1.el8
commit-author Viresh Kumar <viresh.kumar@linaro.org>
commit f9ccdec24d91ffddf1c6f4173b0e191fc08c7d14
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-425.3.1.el8/f9ccdec2.failed

__cpufreq_driver_target() open codes cpufreq_driver_resolve_freq(), lets
make the former reuse the later.

Separate out __resolve_freq() to accept relation as well as an argument
and use it at both the locations.

	Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
(cherry picked from commit f9ccdec24d91ffddf1c6f4173b0e191fc08c7d14)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/cpufreq/cpufreq.c
diff --cc drivers/cpufreq/cpufreq.c
index 75540eb0e9fa,8271ed1a4947..000000000000
--- a/drivers/cpufreq/cpufreq.c
+++ b/drivers/cpufreq/cpufreq.c
@@@ -532,22 -559,7 +553,26 @@@ static unsigned int __resolve_freq(stru
  unsigned int cpufreq_driver_resolve_freq(struct cpufreq_policy *policy,
  					 unsigned int target_freq)
  {
++<<<<<<< HEAD
 +	target_freq = clamp_val(target_freq, policy->min, policy->max);
 +	policy->cached_target_freq = target_freq;
 +
 +	if (cpufreq_driver->target_index) {
 +		int idx;
 +
 +		idx = cpufreq_frequency_table_target(policy, target_freq,
 +						     CPUFREQ_RELATION_L);
 +		policy->cached_resolved_idx = idx;
 +		return policy->freq_table[idx].frequency;
 +	}
 +
 +	if (cpufreq_driver->resolve_freq)
 +		return cpufreq_driver->resolve_freq(policy, target_freq);
 +
 +	return target_freq;
++=======
+ 	return __resolve_freq(policy, target_freq, CPUFREQ_RELATION_L);
++>>>>>>> f9ccdec24d91 (cpufreq: Reuse cpufreq_driver_resolve_freq() in __cpufreq_driver_target())
  }
  EXPORT_SYMBOL_GPL(cpufreq_driver_resolve_freq);
  
* Unmerged path drivers/cpufreq/cpufreq.c
