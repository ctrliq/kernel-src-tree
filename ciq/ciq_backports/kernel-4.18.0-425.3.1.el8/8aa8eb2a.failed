objtool: Add support for intra-function calls

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-425.3.1.el8
commit-author Alexandre Chartre <alexandre.chartre@oracle.com>
commit 8aa8eb2a8f5b3305a95f39957dd2b715fa668e21
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-425.3.1.el8/8aa8eb2a.failed

Change objtool to support intra-function calls. On x86, an intra-function
call is represented in objtool as a push onto the stack (of the return
address), and a jump to the destination address. That way the stack
information is correctly updated and the call flow is still accurate.

	Signed-off-by: Alexandre Chartre <alexandre.chartre@oracle.com>
	Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
	Reviewed-by: Miroslav Benes <mbenes@suse.cz>
	Acked-by: Josh Poimboeuf <jpoimboe@redhat.com>
Link: https://lkml.kernel.org/r/20200414103618.12657-4-alexandre.chartre@oracle.com
(cherry picked from commit 8aa8eb2a8f5b3305a95f39957dd2b715fa668e21)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/objtool/check.c
diff --cc tools/objtool/check.c
index 0030956ed555,32dea5f3feed..000000000000
--- a/tools/objtool/check.c
+++ b/tools/objtool/check.c
@@@ -1304,6 -1373,104 +1320,107 @@@ static int read_retpoline_hints(struct 
  	return 0;
  }
  
++<<<<<<< HEAD
++=======
+ static int read_instr_hints(struct objtool_file *file)
+ {
+ 	struct section *sec;
+ 	struct instruction *insn;
+ 	struct rela *rela;
+ 
+ 	sec = find_section_by_name(file->elf, ".rela.discard.instr_end");
+ 	if (!sec)
+ 		return 0;
+ 
+ 	list_for_each_entry(rela, &sec->rela_list, list) {
+ 		if (rela->sym->type != STT_SECTION) {
+ 			WARN("unexpected relocation symbol type in %s", sec->name);
+ 			return -1;
+ 		}
+ 
+ 		insn = find_insn(file, rela->sym->sec, rela->addend);
+ 		if (!insn) {
+ 			WARN("bad .discard.instr_end entry");
+ 			return -1;
+ 		}
+ 
+ 		insn->instr--;
+ 	}
+ 
+ 	sec = find_section_by_name(file->elf, ".rela.discard.instr_begin");
+ 	if (!sec)
+ 		return 0;
+ 
+ 	list_for_each_entry(rela, &sec->rela_list, list) {
+ 		if (rela->sym->type != STT_SECTION) {
+ 			WARN("unexpected relocation symbol type in %s", sec->name);
+ 			return -1;
+ 		}
+ 
+ 		insn = find_insn(file, rela->sym->sec, rela->addend);
+ 		if (!insn) {
+ 			WARN("bad .discard.instr_begin entry");
+ 			return -1;
+ 		}
+ 
+ 		insn->instr++;
+ 	}
+ 
+ 	return 0;
+ }
+ 
+ static int read_intra_function_calls(struct objtool_file *file)
+ {
+ 	struct instruction *insn;
+ 	struct section *sec;
+ 	struct rela *rela;
+ 
+ 	sec = find_section_by_name(file->elf, ".rela.discard.intra_function_calls");
+ 	if (!sec)
+ 		return 0;
+ 
+ 	list_for_each_entry(rela, &sec->rela_list, list) {
+ 		unsigned long dest_off;
+ 
+ 		if (rela->sym->type != STT_SECTION) {
+ 			WARN("unexpected relocation symbol type in %s",
+ 			     sec->name);
+ 			return -1;
+ 		}
+ 
+ 		insn = find_insn(file, rela->sym->sec, rela->addend);
+ 		if (!insn) {
+ 			WARN("bad .discard.intra_function_call entry");
+ 			return -1;
+ 		}
+ 
+ 		if (insn->type != INSN_CALL) {
+ 			WARN_FUNC("intra_function_call not a direct call",
+ 				  insn->sec, insn->offset);
+ 			return -1;
+ 		}
+ 
+ 		/*
+ 		 * Treat intra-function CALLs as JMPs, but with a stack_op.
+ 		 * See add_call_destinations(), which strips stack_ops from
+ 		 * normal CALLs.
+ 		 */
+ 		insn->type = INSN_JUMP_UNCONDITIONAL;
+ 
+ 		dest_off = insn->offset + insn->len + insn->immediate;
+ 		insn->jump_dest = find_insn(file, insn->sec, dest_off);
+ 		if (!insn->jump_dest) {
+ 			WARN_FUNC("can't find call dest at %s+0x%lx",
+ 				  insn->sec, insn->offset,
+ 				  insn->sec->name, dest_off);
+ 			return -1;
+ 		}
+ 	}
+ 
+ 	return 0;
+ }
+ 
++>>>>>>> 8aa8eb2a8f5b (objtool: Add support for intra-function calls)
  static void mark_rodata(struct objtool_file *file)
  {
  	struct section *sec;
diff --git a/include/linux/objtool.h b/include/linux/objtool.h
index bc34d5399c6f..358175c9c2b5 100644
--- a/include/linux/objtool.h
+++ b/include/linux/objtool.h
@@ -15,9 +15,20 @@
 	static void __used __section(.discard.func_stack_frame_non_standard) \
 		*__func_stack_frame_non_standard_##func = func
 
+/*
+ * This macro indicates that the following intra-function call is valid.
+ * Any non-annotated intra-function call will cause objtool to issue a warning.
+ */
+#define ANNOTATE_INTRA_FUNCTION_CALL				\
+	999:							\
+	.pushsection .discard.intra_function_calls;		\
+	.long 999b;						\
+	.popsection;
+
 #else /* !CONFIG_STACK_VALIDATION */
 
 #define STACK_FRAME_NON_STANDARD(func)
+#define ANNOTATE_INTRA_FUNCTION_CALL
 
 #endif /* CONFIG_STACK_VALIDATION */
 
diff --git a/tools/objtool/Documentation/stack-validation.txt b/tools/objtool/Documentation/stack-validation.txt
index 8df526c80b65..8073cf7f88d2 100644
--- a/tools/objtool/Documentation/stack-validation.txt
+++ b/tools/objtool/Documentation/stack-validation.txt
@@ -290,6 +290,14 @@ they mean, and suggestions for how to fix them.
       https://gcc.gnu.org/bugzilla/show_bug.cgi?id=70646
 
 
+11. file.o: warning: unannotated intra-function call
+
+   This warning means that a direct call is done to a destination which
+   is not at the beginning of a function. If this is a legit call, you
+   can remove this warning by putting the ANNOTATE_INTRA_FUNCTION_CALL
+   directive right before the call.
+
+
 If the error doesn't seem to make sense, it could be a bug in objtool.
 Feel free to ask the objtool maintainer for help.
 
diff --git a/tools/objtool/arch/x86/decode.c b/tools/objtool/arch/x86/decode.c
index f90f0a167e68..cf5b9b9ad1a2 100644
--- a/tools/objtool/arch/x86/decode.c
+++ b/tools/objtool/arch/x86/decode.c
@@ -464,6 +464,14 @@ int arch_decode_instruction(struct elf *elf, struct section *sec,
 
 	case 0xe8:
 		*type = INSN_CALL;
+		/*
+		 * For the impact on the stack, a CALL behaves like
+		 * a PUSH of an immediate value (the return address).
+		 */
+		ADD_OP(op) {
+			op->src.type = OP_SRC_CONST;
+			op->dest.type = OP_DEST_PUSH;
+		}
 		break;
 
 	case 0xfc:
* Unmerged path tools/objtool/check.c
