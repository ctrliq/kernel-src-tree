arm64: entry: Add macro for reading symbol addresses from the trampoline

jira LE-1907
cve CVE-2022-23960
Rebuild_History Non-Buildable kernel-4.18.0-425.3.1.el8
Rebuild_CHGLOG: - arm64: entry: Add macro for reading symbol addresses from the trampolin (Chris von Recklinghausen) [2062287] {CVE-2022-23960}
Rebuild_FUZZ: 99.30%
commit-author James Morse <james.morse@arm.com>
commit b28a8eebe81c186fdb1a0078263b30576c8e1f42
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-425.3.1.el8/b28a8eeb.failed

The trampoline code needs to use the address of symbols in the wider
kernel, e.g. vectors. PC-relative addressing wouldn't work as the
trampoline code doesn't run at the address the linker expected.

tramp_ventry uses a literal pool, unless CONFIG_RANDOMIZE_BASE is
set, in which case it uses the data page as a literal pool because
the data page can be unmapped when running in user-space, which is
required for CPUs vulnerable to meltdown.

Pull this logic out as a macro, instead of adding a third copy
of it.

	Reviewed-by: Catalin Marinas <catalin.marinas@arm.com>
	Signed-off-by: James Morse <james.morse@arm.com>
(cherry picked from commit b28a8eebe81c186fdb1a0078263b30576c8e1f42)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/arm64/kernel/entry.S
diff --cc arch/arm64/kernel/entry.S
index af24e27e2389,8da732fefd8f..000000000000
--- a/arch/arm64/kernel/entry.S
+++ b/arch/arm64/kernel/entry.S
@@@ -800,7 -646,21 +800,25 @@@ alternative_else_nop_endi
  	sub	\dst, \dst, PAGE_SIZE
  	.endm
  
++<<<<<<< HEAD
 +	.macro tramp_ventry, vector_start, regsize, kpti
++=======
+ 	.macro tramp_data_read_var	dst, var
+ #ifdef CONFIG_RANDOMIZE_BASE
+ 	tramp_data_page		\dst
+ 	add	\dst, \dst, #:lo12:__entry_tramp_data_\var
+ 	ldr	\dst, [\dst]
+ #else
+ 	ldr	\dst, =\var
+ #endif
+ 	.endm
+ 
+ #define BHB_MITIGATION_NONE	0
+ #define BHB_MITIGATION_LOOP	1
+ #define BHB_MITIGATION_FW	2
+ 
+ 	.macro tramp_ventry, vector_start, regsize, kpti, bhb
++>>>>>>> b28a8eebe81c (arm64: entry: Add macro for reading symbol addresses from the trampoline)
  	.align	7
  1:
  	.if	\regsize == 64
@@@ -1000,18 -938,10 +1018,23 @@@ SYM_CODE_START(__sdei_asm_entry_trampol
  	mov	x4, xzr
  
  	/*
 -	 * Remember whether to unmap the kernel on exit.
 +	 * Use reg->interrupted_regs.addr_limit to remember whether to unmap
 +	 * the kernel on exit.
  	 */
++<<<<<<< HEAD
 +1:	str	x4, [x1, #(SDEI_EVENT_INTREGS + S_ORIG_ADDR_LIMIT)]
 +
 +#ifdef CONFIG_RANDOMIZE_BASE
 +	tramp_data_page		x4
 +	add	x4, x4, #:lo12:__sdei_asm_trampoline_next_handler
 +	ldr	x4, [x4]
 +#else
 +	ldr	x4, =__sdei_asm_handler
 +#endif
++=======
+ 1:	str	x4, [x1, #(SDEI_EVENT_INTREGS + S_SDEI_TTBR1)]
+ 	tramp_data_read_var     x4, __sdei_asm_handler
++>>>>>>> b28a8eebe81c (arm64: entry: Add macro for reading symbol addresses from the trampoline)
  	br	x4
  SYM_CODE_END(__sdei_asm_entry_trampoline)
  NOKPROBE(__sdei_asm_entry_trampoline)
* Unmerged path arch/arm64/kernel/entry.S
