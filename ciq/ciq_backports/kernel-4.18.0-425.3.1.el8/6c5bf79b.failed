arm64: entry: Allow tramp_alias to access symbols after the 4K boundary

jira LE-1907
cve CVE-2022-23960
Rebuild_History Non-Buildable kernel-4.18.0-425.3.1.el8
commit-author James Morse <james.morse@arm.com>
commit 6c5bf79b69f911560fbf82214c0971af6e58e682
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-425.3.1.el8/6c5bf79b.failed

Systems using kpti enter and exit the kernel through a trampoline mapping
that is always mapped, even when the kernel is not. tramp_valias is a macro
to find the address of a symbol in the trampoline mapping.

Adding extra sets of vectors will expand the size of the entry.tramp.text
section to beyond 4K. tramp_valias will be unable to generate addresses
for symbols beyond 4K as it uses the 12 bit immediate of the add
instruction.

As there are now two registers available when tramp_alias is called,
use the extra register to avoid the 4K limit of the 12 bit immediate.

	Reviewed-by: Russell King (Oracle) <rmk+kernel@armlinux.org.uk>
	Reviewed-by: Catalin Marinas <catalin.marinas@arm.com>
	Signed-off-by: James Morse <james.morse@arm.com>
(cherry picked from commit 6c5bf79b69f911560fbf82214c0971af6e58e682)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/arm64/kernel/entry.S
diff --cc arch/arm64/kernel/entry.S
index 3c4460a7309d,192cf77bd374..000000000000
--- a/arch/arm64/kernel/entry.S
+++ b/arch/arm64/kernel/entry.S
@@@ -132,12 -99,16 +132,15 @@@
  	sub	sp, sp, x0
  	mrs	x0, tpidrro_el0
  #endif
 -	b	el\el\ht\()_\regsize\()_\label
 -.org .Lventry_start\@ + 128	// Did we overflow the ventry slot?
 +	b	el\()\el\()_\label
  	.endm
  
- 	.macro tramp_alias, dst, sym
+ 	.macro tramp_alias, dst, sym, tmp
  	mov_q	\dst, TRAMP_VALIAS
- 	add	\dst, \dst, #(\sym - .entry.tramp.text)
+ 	adr_l	\tmp, \sym
+ 	add	\dst, \dst, \tmp
+ 	adr_l	\tmp, .entry.tramp.text
+ 	sub	\dst, \dst, \tmp
  	.endm
  
  	/*
@@@ -368,18 -422,20 +371,23 @@@ alternative_else_nop_endi
  	ldp	x24, x25, [sp, #16 * 12]
  	ldp	x26, x27, [sp, #16 * 13]
  	ldp	x28, x29, [sp, #16 * 14]
 +	ldr	lr, [sp, #S_LR]
 +	add	sp, sp, #S_FRAME_SIZE		// restore sp
  
  	.if	\el == 0
 -alternative_if_not ARM64_UNMAP_KERNEL_AT_EL0
 -	ldr	lr, [sp, #S_LR]
 -	add	sp, sp, #PT_REGS_SIZE		// restore sp
 -	eret
 -alternative_else_nop_endif
 +alternative_insn eret, nop, ARM64_UNMAP_KERNEL_AT_EL0
  #ifdef CONFIG_UNMAP_KERNEL_AT_EL0
  	bne	4f
++<<<<<<< HEAD
 +	msr	far_el1, x30
 +	tramp_alias	x30, tramp_exit_native
++=======
+ 	msr	far_el1, x29
+ 	tramp_alias	x30, tramp_exit_native, x29
++>>>>>>> 6c5bf79b69f9 (arm64: entry: Allow tramp_alias to access symbols after the 4K boundary)
  	br	x30
  4:
- 	tramp_alias	x30, tramp_exit_compat
+ 	tramp_alias	x30, tramp_exit_compat, x29
  	br	x30
  #endif
  	.else
* Unmerged path arch/arm64/kernel/entry.S
