net_sched: Use struct_size() and flex_array_size() helpers

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-425.3.1.el8
commit-author Gustavo A. R. Silva <gustavoars@kernel.org>
commit 69508d43334e3b09c344f662272bcf24a5b508ed
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-425.3.1.el8/69508d43.failed

Make use of the struct_size() and flex_array_size() helpers instead of
an open-coded version, in order to avoid any potential type mistakes
or integer overflows that, in the worse scenario, could lead to heap
overflows.

Link: https://github.com/KSPP/linux/issues/160
	Signed-off-by: Gustavo A. R. Silva <gustavoars@kernel.org>
Link: https://lore.kernel.org/r/20210928193107.GA262595@embeddedor
	Signed-off-by: Jakub Kicinski <kuba@kernel.org>
(cherry picked from commit 69508d43334e3b09c344f662272bcf24a5b508ed)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/sched/sch_api.c
diff --cc net/sched/sch_api.c
index f386e188d96d,e1a40d3b1ed0..000000000000
--- a/net/sched/sch_api.c
+++ b/net/sched/sch_api.c
@@@ -517,13 -514,7 +518,17 @@@ static struct qdisc_size_table *qdisc_g
  		return stab;
  	}
  
++<<<<<<< HEAD
 +	if (s->size_log > STAB_SIZE_LOG_MAX ||
 +	    s->cell_log > STAB_SIZE_LOG_MAX) {
 +		NL_SET_ERR_MSG(extack, "Invalid logarithmic size of size table");
 +		return ERR_PTR(-EINVAL);
 +	}
 +
 +	stab = kmalloc(sizeof(*stab) + tsize * sizeof(u16), GFP_KERNEL);
++=======
+ 	stab = kmalloc(struct_size(stab, data, tsize), GFP_KERNEL);
++>>>>>>> 69508d43334e (net_sched: Use struct_size() and flex_array_size() helpers)
  	if (!stab)
  		return ERR_PTR(-ENOMEM);
  
* Unmerged path net/sched/sch_api.c
