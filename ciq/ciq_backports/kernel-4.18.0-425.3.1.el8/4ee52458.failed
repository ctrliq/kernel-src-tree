Drivers: hv: Compare cpumasks and not their weights in init_vp_index()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-425.3.1.el8
commit-author Vitaly Kuznetsov <vkuznets@redhat.com>
commit 4ee524587105011ef43e5bd3ef5ed019715363dd
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-425.3.1.el8/4ee52458.failed

The condition is supposed to check whether 'allocated_mask' got fully
exhausted, i.e. there's no free CPU on the NUMA node left so we have
to use one of the already used CPUs. As only bits which correspond
to CPUs from 'cpumask_of_node(numa_node)' get set in 'allocated_mask',
checking for the equal weights is technically correct but not obvious.
Let's compare cpumasks directly.

No functional change intended.

	Suggested-by: Michael Kelley <mikelley@microsoft.com>
	Signed-off-by: Vitaly Kuznetsov <vkuznets@redhat.com>
	Reviewed-by: Michael Kelley <mikelley@microsoft.com>
Link: https://lore.kernel.org/r/20220128103412.3033736-3-vkuznets@redhat.com
	Signed-off-by: Wei Liu <wei.liu@kernel.org>
(cherry picked from commit 4ee524587105011ef43e5bd3ef5ed019715363dd)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/hv/channel_mgmt.c
diff --cc drivers/hv/channel_mgmt.c
index 661a53058a95,26d269ba947c..000000000000
--- a/drivers/hv/channel_mgmt.c
+++ b/drivers/hv/channel_mgmt.c
@@@ -772,18 -760,17 +772,22 @@@ static void init_vp_index(struct vmbus_
  				continue;
  			break;
  		}
 -		allocated_mask = &hv_context.hv_numa_map[numa_node];
 +		alloced_mask = &hv_context.hv_numa_map[numa_node];
  
++<<<<<<< HEAD
 +		if (cpumask_weight(alloced_mask) ==
 +		    cpumask_weight(cpumask_of_node(numa_node))) {
++=======
+ 		if (cpumask_equal(allocated_mask, cpumask_of_node(numa_node))) {
++>>>>>>> 4ee524587105 (Drivers: hv: Compare cpumasks and not their weights in init_vp_index())
  			/*
  			 * We have cycled through all the CPUs in the node;
 -			 * reset the allocated map.
 +			 * reset the alloced map.
  			 */
 -			cpumask_clear(allocated_mask);
 +			cpumask_clear(alloced_mask);
  		}
  
 -		cpumask_xor(available_mask, allocated_mask,
 +		cpumask_xor(available_mask, alloced_mask,
  			    cpumask_of_node(numa_node));
  
  		target_cpu = cpumask_first(available_mask);
* Unmerged path drivers/hv/channel_mgmt.c
