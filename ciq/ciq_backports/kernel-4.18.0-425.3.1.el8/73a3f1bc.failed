net/mlx5e: TC, Store mapped tunnel id on flow attr

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-425.3.1.el8
commit-author Roi Dayan <roid@nvidia.com>
commit 73a3f1bcab1e66206c2de4bf11083fb8ddd5f49c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-425.3.1.el8/73a3f1bc.failed

In preparation for multiple attr instances the tunnel_id should
be attr specific and not flow specific.

	Signed-off-by: Roi Dayan <roid@nvidia.com>
	Reviewed-by: Oz Shlomo <ozsh@nvidia.com>
	Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
(cherry picked from commit 73a3f1bcab1e66206c2de4bf11083fb8ddd5f49c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en/tc/sample.h
#	drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en/tc/sample.h
index db0146df9b30,a569367eae4d..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en/tc/sample.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en/tc/sample.h
@@@ -38,4 -39,28 +37,31 @@@ mlx5e_tc_sample_init(struct mlx5_eswitc
  void
  mlx5e_tc_sample_cleanup(struct mlx5e_tc_psample *tc_psample);
  
++<<<<<<< HEAD
++=======
+ #else /* CONFIG_MLX5_TC_SAMPLE */
+ 
+ static inline struct mlx5_flow_handle *
+ mlx5e_tc_sample_offload(struct mlx5e_tc_psample *tc_psample,
+ 			struct mlx5_flow_spec *spec,
+ 			struct mlx5_flow_attr *attr)
+ { return ERR_PTR(-EOPNOTSUPP); }
+ 
+ static inline void
+ mlx5e_tc_sample_unoffload(struct mlx5e_tc_psample *tc_psample,
+ 			  struct mlx5_flow_handle *rule,
+ 			  struct mlx5_flow_attr *attr) {}
+ 
+ static inline struct mlx5e_tc_psample *
+ mlx5e_tc_sample_init(struct mlx5_eswitch *esw, struct mlx5e_post_act *post_act)
+ { return ERR_PTR(-EOPNOTSUPP); }
+ 
+ static inline void
+ mlx5e_tc_sample_cleanup(struct mlx5e_tc_psample *tc_psample) {}
+ 
+ static inline void
+ mlx5e_tc_sample_skb(struct sk_buff *skb, struct mlx5_mapped_obj *mapped_obj) {}
+ 
+ #endif /* CONFIG_MLX5_TC_SAMPLE */
++>>>>>>> 73a3f1bcab1e (net/mlx5e: TC, Store mapped tunnel id on flow attr)
  #endif /* __MLX5_EN_TC_SAMPLE_H__ */
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
index e11d6f95f302,83ca036528bb..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
@@@ -309,6 -301,58 +309,61 @@@ mlx5_tc_rule_delete(struct mlx5e_priv *
  	mlx5e_del_offloaded_nic_rule(priv, rule, attr);
  }
  
++<<<<<<< HEAD
++=======
+ struct mlx5_flow_handle *
+ mlx5e_tc_rule_offload(struct mlx5e_priv *priv,
+ 		      struct mlx5e_tc_flow *flow,
+ 		      struct mlx5_flow_spec *spec,
+ 		      struct mlx5_flow_attr *attr)
+ {
+ 	struct mlx5_eswitch *esw = priv->mdev->priv.eswitch;
+ 
+ 	if (attr->flags & MLX5_ATTR_FLAG_CT) {
+ 		struct mlx5e_tc_mod_hdr_acts *mod_hdr_acts =
+ 			&attr->parse_attr->mod_hdr_acts;
+ 
+ 		return mlx5_tc_ct_flow_offload(get_ct_priv(priv), flow,
+ 					       spec, attr,
+ 					       mod_hdr_acts);
+ 	}
+ 
+ 	if (!is_mdev_switchdev_mode(priv->mdev))
+ 		return mlx5e_add_offloaded_nic_rule(priv, spec, attr);
+ 
+ 	if (attr->flags & MLX5_ATTR_FLAG_SAMPLE)
+ 		return mlx5e_tc_sample_offload(get_sample_priv(priv), spec, attr);
+ 
+ 	return mlx5_eswitch_add_offloaded_rule(esw, spec, attr);
+ }
+ 
+ void
+ mlx5e_tc_rule_unoffload(struct mlx5e_priv *priv,
+ 			struct mlx5e_tc_flow *flow,
+ 			struct mlx5_flow_attr *attr)
+ {
+ 	struct mlx5_eswitch *esw = priv->mdev->priv.eswitch;
+ 	struct mlx5_flow_handle *rule = flow->rule[0];
+ 
+ 	if (attr->flags & MLX5_ATTR_FLAG_CT) {
+ 		mlx5_tc_ct_delete_flow(get_ct_priv(priv), flow, attr);
+ 		return;
+ 	}
+ 
+ 	if (!is_mdev_switchdev_mode(priv->mdev)) {
+ 		mlx5e_del_offloaded_nic_rule(priv, rule, attr);
+ 		return;
+ 	}
+ 
+ 	if (attr->flags & MLX5_ATTR_FLAG_SAMPLE) {
+ 		mlx5e_tc_sample_unoffload(get_sample_priv(priv), rule, attr);
+ 		return;
+ 	}
+ 
+ 	mlx5_eswitch_del_offloaded_rule(esw, rule, attr);
+ }
+ 
++>>>>>>> 73a3f1bcab1e (net/mlx5e: TC, Store mapped tunnel id on flow attr)
  int
  mlx5e_tc_match_to_reg_set(struct mlx5_core_dev *mdev,
  			  struct mlx5e_tc_mod_hdr_acts *mod_hdr_acts,
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en/tc/sample.c b/drivers/net/ethernet/mellanox/mlx5/core/en/tc/sample.c
index ff4b4f8a5a9d..fb26b749455a 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en/tc/sample.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en/tc/sample.c
@@ -492,8 +492,7 @@ del_post_rule(struct mlx5_eswitch *esw, struct mlx5e_sample_flow *sample_flow,
 struct mlx5_flow_handle *
 mlx5e_tc_sample_offload(struct mlx5e_tc_psample *tc_psample,
 			struct mlx5_flow_spec *spec,
-			struct mlx5_flow_attr *attr,
-			u32 tunnel_id)
+			struct mlx5_flow_attr *attr)
 {
 	struct mlx5e_post_act_handle *post_act_handle = NULL;
 	struct mlx5_esw_flow_attr *esw_attr = attr->esw_attr;
@@ -502,6 +501,7 @@ mlx5e_tc_sample_offload(struct mlx5e_tc_psample *tc_psample,
 	struct mlx5e_sample_flow *sample_flow;
 	struct mlx5e_sample_attr *sample_attr;
 	struct mlx5_flow_attr *pre_attr;
+	u32 tunnel_id = attr->tunnel_id;
 	struct mlx5_eswitch *esw;
 	u32 default_tbl_id;
 	u32 obj_id;
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en/tc/sample.h
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en/tc_ct.c b/drivers/net/ethernet/mellanox/mlx5/core/en/tc_ct.c
index bdde5fe4e17e..463d50c09e28 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en/tc_ct.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en/tc_ct.c
@@ -1831,12 +1831,10 @@ __mlx5_tc_ct_flow_offload(struct mlx5_tc_ct_priv *ct_priv,
 	 */
 	if ((pre_ct_attr->action & MLX5_FLOW_CONTEXT_ACTION_DECAP) &&
 	    attr->chain == 0) {
-		u32 tun_id = mlx5e_tc_get_flow_tun_id(flow);
-
 		err = mlx5e_tc_match_to_reg_set(priv->mdev, &pre_mod_acts,
 						ct_priv->ns_type,
 						TUNNEL_TO_REG,
-						tun_id);
+						attr->tunnel_id);
 		if (err) {
 			ct_dbg("Failed to set tunnel register mapping");
 			goto err_mapping;
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en/tc_priv.h b/drivers/net/ethernet/mellanox/mlx5/core/en/tc_priv.h
index b689701ac7d8..e2898aaeefd3 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en/tc_priv.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en/tc_priv.h
@@ -103,7 +103,6 @@ struct mlx5e_tc_flow {
 	struct rcu_head rcu_head;
 	struct completion init_done;
 	struct completion del_hw_done;
-	int tunnel_id; /* the mapped tunnel id of this flow */
 	struct mlx5_flow_attr *attr;
 };
 
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en_tc.h b/drivers/net/ethernet/mellanox/mlx5/core/en_tc.h
index fb629ee12aff..87ab049b65ac 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_tc.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_tc.h
@@ -82,6 +82,7 @@ struct mlx5_flow_attr {
 	u8 outer_match_level;
 	u8 ip_version;
 	u8 tun_ip_version;
+	int tunnel_id; /* mapped tunnel id */
 	u32 flags;
 	bool ct_clear;
 	union {
@@ -248,9 +249,6 @@ int mlx5e_tc_add_flow_mod_hdr(struct mlx5e_priv *priv,
 			      struct mlx5e_tc_flow *flow,
 			      struct mlx5_flow_attr *attr);
 
-struct mlx5e_tc_flow;
-u32 mlx5e_tc_get_flow_tun_id(struct mlx5e_tc_flow *flow);
-
 void mlx5e_tc_set_ethertype(struct mlx5_core_dev *mdev,
 			    struct flow_match_basic *match, bool outer,
 			    void *headers_c, void *headers_v);
