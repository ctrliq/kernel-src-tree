drm/amd/pm: Prevent divide by zero

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-425.3.1.el8
commit-author Yefim Barashkin <mr.b34r@kolabnow.com>
commit 1e866f1fe528bc0158cdcd589053753032bdb52c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-425.3.1.el8/1e866f1f.failed

divide error: 0000 [#1] SMP PTI
CPU: 3 PID: 78925 Comm: tee Not tainted 5.15.50-1-lts #1
Hardware name: MSI MS-7A59/Z270 SLI PLUS (MS-7A59), BIOS 1.90 01/30/2018
RIP: 0010:smu_v11_0_set_fan_speed_rpm+0x11/0x110 [amdgpu]

Speed is user-configurable through a file.
I accidentally set it to zero, and the driver crashed.

	Reviewed-by: Evan Quan <evan.quan@amd.com>
	Reviewed-by: Andr√© Almeida <andrealmeid@igalia.com>
	Signed-off-by: Yefim Barashkin <mr.b34r@kolabnow.com>
	Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
(cherry picked from commit 1e866f1fe528bc0158cdcd589053753032bdb52c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/amd/pm/swsmu/smu11/smu_v11_0.c
diff --cc drivers/gpu/drm/amd/pm/swsmu/smu11/smu_v11_0.c
index 5047ee809aaf,6008450370e8..000000000000
--- a/drivers/gpu/drm/amd/pm/swsmu/smu11/smu_v11_0.c
+++ b/drivers/gpu/drm/amd/pm/swsmu/smu11/smu_v11_0.c
@@@ -1213,6 -1217,101 +1213,104 @@@ smu_v11_0_set_fan_speed_percent(struct 
  	return smu_v11_0_set_fan_static_mode(smu, FDO_PWM_MODE_STATIC);
  }
  
++<<<<<<< HEAD
++=======
+ int smu_v11_0_set_fan_speed_rpm(struct smu_context *smu,
+ 				uint32_t speed)
+ {
+ 	struct amdgpu_device *adev = smu->adev;
+ 	/*
+ 	 * crystal_clock_freq used for fan speed rpm calculation is
+ 	 * always 25Mhz. So, hardcode it as 2500(in 10K unit).
+ 	 */
+ 	uint32_t crystal_clock_freq = 2500;
+ 	uint32_t tach_period;
+ 
+ 	if (speed == 0)
+ 		return -EINVAL;
+ 	/*
+ 	 * To prevent from possible overheat, some ASICs may have requirement
+ 	 * for minimum fan speed:
+ 	 * - For some NV10 SKU, the fan speed cannot be set lower than
+ 	 *   700 RPM.
+ 	 * - For some Sienna Cichlid SKU, the fan speed cannot be set
+ 	 *   lower than 500 RPM.
+ 	 */
+ 	tach_period = 60 * crystal_clock_freq * 10000 / (8 * speed);
+ 	WREG32_SOC15(THM, 0, mmCG_TACH_CTRL,
+ 		     REG_SET_FIELD(RREG32_SOC15(THM, 0, mmCG_TACH_CTRL),
+ 				   CG_TACH_CTRL, TARGET_PERIOD,
+ 				   tach_period));
+ 
+ 	return smu_v11_0_set_fan_static_mode(smu, FDO_PWM_MODE_STATIC_RPM);
+ }
+ 
+ int smu_v11_0_get_fan_speed_pwm(struct smu_context *smu,
+ 				uint32_t *speed)
+ {
+ 	struct amdgpu_device *adev = smu->adev;
+ 	uint32_t duty100, duty;
+ 	uint64_t tmp64;
+ 
+ 	/*
+ 	 * For pre Sienna Cichlid ASICs, the 0 RPM may be not correctly
+ 	 * detected via register retrieving. To workaround this, we will
+ 	 * report the fan speed as 0 PWM if user just requested such.
+ 	 */
+ 	if ((smu->user_dpm_profile.flags & SMU_CUSTOM_FAN_SPEED_PWM)
+ 	     && !smu->user_dpm_profile.fan_speed_pwm) {
+ 		*speed = 0;
+ 		return 0;
+ 	}
+ 
+ 	duty100 = REG_GET_FIELD(RREG32_SOC15(THM, 0, mmCG_FDO_CTRL1),
+ 				CG_FDO_CTRL1, FMAX_DUTY100);
+ 	duty = REG_GET_FIELD(RREG32_SOC15(THM, 0, mmCG_THERMAL_STATUS),
+ 				CG_THERMAL_STATUS, FDO_PWM_DUTY);
+ 	if (!duty100)
+ 		return -EINVAL;
+ 
+ 	tmp64 = (uint64_t)duty * 255;
+ 	do_div(tmp64, duty100);
+ 	*speed = MIN((uint32_t)tmp64, 255);
+ 
+ 	return 0;
+ }
+ 
+ int smu_v11_0_get_fan_speed_rpm(struct smu_context *smu,
+ 				uint32_t *speed)
+ {
+ 	struct amdgpu_device *adev = smu->adev;
+ 	uint32_t crystal_clock_freq = 2500;
+ 	uint32_t tach_status;
+ 	uint64_t tmp64;
+ 
+ 	/*
+ 	 * For pre Sienna Cichlid ASICs, the 0 RPM may be not correctly
+ 	 * detected via register retrieving. To workaround this, we will
+ 	 * report the fan speed as 0 RPM if user just requested such.
+ 	 */
+ 	if ((smu->user_dpm_profile.flags & SMU_CUSTOM_FAN_SPEED_RPM)
+ 	     && !smu->user_dpm_profile.fan_speed_rpm) {
+ 		*speed = 0;
+ 		return 0;
+ 	}
+ 
+ 	tmp64 = (uint64_t)crystal_clock_freq * 60 * 10000;
+ 
+ 	tach_status = RREG32_SOC15(THM, 0, mmCG_TACH_STATUS);
+ 	if (tach_status) {
+ 		do_div(tmp64, tach_status);
+ 		*speed = (uint32_t)tmp64;
+ 	} else {
+ 		dev_warn_once(adev->dev, "Got zero output on CG_TACH_STATUS reading!\n");
+ 		*speed = 0;
+ 	}
+ 
+ 	return 0;
+ }
+ 
++>>>>>>> 1e866f1fe528 (drm/amd/pm: Prevent divide by zero)
  int
  smu_v11_0_set_fan_control_mode(struct smu_context *smu,
  			       uint32_t mode)
* Unmerged path drivers/gpu/drm/amd/pm/swsmu/smu11/smu_v11_0.c
