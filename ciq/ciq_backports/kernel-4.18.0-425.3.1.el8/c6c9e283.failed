irqdomain/msi: Provide DOMAIN_BUS_VMD_MSI

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-425.3.1.el8
commit-author Thomas Gleixner <tglx@linutronix.de>
commit c6c9e2838c5f0b94773511586123bcb125757f2a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-425.3.1.el8/c6c9e283.failed

PCI devices behind a VMD bus are not subject to interrupt remapping, but
the irq domain for VMD MSI cannot be distinguished from a regular PCI/MSI
irq domain.

Add a new domain bus token and allow it in the bus token check in
msi_check_reservation_mode() to keep the functionality the same once VMD
uses this token.

	Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
	Acked-by: Marc Zyngier <maz@kernel.org>
	Acked-by: Jon Derrick <jonathan.derrick@intel.com>
Link: https://lore.kernel.org/r/20200826112332.954409970@linutronix.de

(cherry picked from commit c6c9e2838c5f0b94773511586123bcb125757f2a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/irqdomain.h
diff --cc include/linux/irqdomain.h
index d48700d2c3e5,44445d9de881..000000000000
--- a/include/linux/irqdomain.h
+++ b/include/linux/irqdomain.h
@@@ -82,6 -82,9 +82,12 @@@ enum irq_domain_bus_token 
  	DOMAIN_BUS_NEXUS,
  	DOMAIN_BUS_IPI,
  	DOMAIN_BUS_FSL_MC_MSI,
++<<<<<<< HEAD
++=======
+ 	DOMAIN_BUS_TI_SCI_INTA_MSI,
+ 	DOMAIN_BUS_WAKEUP,
+ 	DOMAIN_BUS_VMD_MSI,
++>>>>>>> c6c9e2838c5f (irqdomain/msi: Provide DOMAIN_BUS_VMD_MSI)
  };
  
  /**
* Unmerged path include/linux/irqdomain.h
diff --git a/kernel/irq/msi.c b/kernel/irq/msi.c
index 28df8599bb15..6c229e5d3fcb 100644
--- a/kernel/irq/msi.c
+++ b/kernel/irq/msi.c
@@ -379,8 +379,13 @@ static bool msi_check_reservation_mode(struct irq_domain *domain,
 {
 	struct msi_desc *desc;
 
-	if (domain->bus_token != DOMAIN_BUS_PCI_MSI)
+	switch(domain->bus_token) {
+	case DOMAIN_BUS_PCI_MSI:
+	case DOMAIN_BUS_VMD_MSI:
+		break;
+	default:
 		return false;
+	}
 
 	if (!(info->flags & MSI_FLAG_MUST_REACTIVATE))
 		return false;
