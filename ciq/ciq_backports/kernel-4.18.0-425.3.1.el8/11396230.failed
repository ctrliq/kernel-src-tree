spi: Add API to count spi acpi resources

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-425.3.1.el8
commit-author Stefan Binding <sbinding@opensource.cirrus.com>
commit 113962301d2d9a5c11381d9c25ddea7af71be2ff
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-425.3.1.el8/11396230.failed

Some ACPI nodes may have more than one Spi Resource.
To be able to handle these case, its necessary to have
a way of counting these resources.

	Signed-off-by: Stefan Binding <sbinding@opensource.cirrus.com>
	Reviewed-by: Hans de Goede <hdegoede@redhat.com>
Link: https://lore.kernel.org/r/20220121172431.6876-5-sbinding@opensource.cirrus.com
	Signed-off-by: Mark Brown <broonie@kernel.org>
(cherry picked from commit 113962301d2d9a5c11381d9c25ddea7af71be2ff)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/spi/spi.h
diff --cc include/linux/spi/spi.h
index 79184c5b5147,394b4241d989..000000000000
--- a/include/linux/spi/spi.h
+++ b/include/linux/spi/spi.h
@@@ -660,7 -760,12 +660,16 @@@ extern int devm_spi_register_controller
  					struct spi_controller *ctlr);
  extern void spi_unregister_controller(struct spi_controller *ctlr);
  
++<<<<<<< HEAD
 +extern struct spi_controller *spi_busnum_to_master(u16 busnum);
++=======
+ #if IS_ENABLED(CONFIG_ACPI)
+ extern struct spi_device *acpi_spi_device_alloc(struct spi_controller *ctlr,
+ 						struct acpi_device *adev,
+ 						int index);
+ int acpi_spi_count_resources(struct acpi_device *adev);
+ #endif
++>>>>>>> 113962301d2d (spi: Add API to count spi acpi resources)
  
  /*
   * SPI resource management while processing a SPI message
diff --git a/drivers/spi/spi.c b/drivers/spi/spi.c
index 1b9b6e0668b9..d3ad295d198b 100644
--- a/drivers/spi/spi.c
+++ b/drivers/spi/spi.c
@@ -1808,6 +1808,46 @@ struct acpi_spi_lookup {
 	u8			chip_select;
 };
 
+static int acpi_spi_count(struct acpi_resource *ares, void *data)
+{
+	struct acpi_resource_spi_serialbus *sb;
+	int *count = data;
+
+	if (ares->type != ACPI_RESOURCE_TYPE_SERIAL_BUS)
+		return 1;
+
+	sb = &ares->data.spi_serial_bus;
+	if (sb->type != ACPI_RESOURCE_SERIAL_TYPE_SPI)
+		return 1;
+
+	*count = *count + 1;
+
+	return 1;
+}
+
+/**
+ * acpi_spi_count_resources - Count the number of SpiSerialBus resources
+ * @adev:	ACPI device
+ *
+ * Returns the number of SpiSerialBus resources in the ACPI-device's
+ * resource-list; or a negative error code.
+ */
+int acpi_spi_count_resources(struct acpi_device *adev)
+{
+	LIST_HEAD(r);
+	int count = 0;
+	int ret;
+
+	ret = acpi_dev_get_resources(adev, &r, acpi_spi_count, &count);
+	if (ret < 0)
+		return ret;
+
+	acpi_dev_free_resource_list(&r);
+
+	return count;
+}
+EXPORT_SYMBOL_GPL(acpi_spi_count_resources);
+
 static void acpi_spi_parse_apple_properties(struct acpi_device *dev,
 					    struct acpi_spi_lookup *lookup)
 {
* Unmerged path include/linux/spi/spi.h
