PCI: vmd: Create IRQ allocation helper

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-425.3.1.el8
commit-author Jon Derrick <jonathan.derrick@intel.com>
commit 875b4e2a93bb2c3ddefb4dcb292c4bfd46ccc464
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-425.3.1.el8/875b4e2a.failed

Move the IRQ allocation and SRCU initialization code to a new helper.  No
functional changes.

Link: https://lore.kernel.org/r/20200728194945.14126-5-jonathan.derrick@intel.com
	Signed-off-by: Jon Derrick <jonathan.derrick@intel.com>
	Signed-off-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
	Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
	Reviewed-by: Andy Shevchenko <andriy.shevchenko@intel.com>
(cherry picked from commit 875b4e2a93bb2c3ddefb4dcb292c4bfd46ccc464)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/pci/controller/vmd.c
diff --cc drivers/pci/controller/vmd.c
index c9d11101290f,3214d785fa5d..000000000000
--- a/drivers/pci/controller/vmd.c
+++ b/drivers/pci/controller/vmd.c
@@@ -737,40 -738,9 +772,46 @@@ static int vmd_probe(struct pci_dev *de
  	    dma_set_mask_and_coherent(&dev->dev, DMA_BIT_MASK(32)))
  		return -ENODEV;
  
++<<<<<<< HEAD
 +	vmd->msix_count = pci_msix_vec_count(dev);
 +	if (vmd->msix_count < 0)
 +		return -ENODEV;
 +
 +	vmd->msix_count = pci_alloc_irq_vectors(dev, 1, vmd->msix_count,
 +					PCI_IRQ_MSIX);
 +	if (vmd->msix_count < 0)
 +		return vmd->msix_count;
 +
 +	vmd->irqs = devm_kcalloc(&dev->dev, vmd->msix_count, sizeof(*vmd->irqs),
 +				 GFP_KERNEL);
 +	if (!vmd->irqs)
 +		return -ENOMEM;
 +
 +	for (i = 0; i < vmd->msix_count; i++) {
 +		vmd->irqs[i] = devm_kzalloc(&dev->dev, sizeof(**vmd->irqs),
 +					    GFP_KERNEL);
 +		if (!vmd->irqs[i])
 +			return -ENOMEM;
 +	}
 +
 +	for (i = 0; i < vmd->msix_count; i++) {
 +		err = init_srcu_struct(&vmd->irqs[i]->srcu);
 +		if (err)
 +			return err;
 +
 +		INIT_LIST_HEAD(&vmd->irqs[i]->irq_list);
 +		vmd->irqs[i]->index = i;
 +		err = devm_request_irq(&dev->dev, pci_irq_vector(dev, i),
 +				       vmd_irq, IRQF_NO_THREAD,
 +				       "vmd", vmd->irqs[i]);
 +		if (err)
 +			return err;
 +	}
++=======
+ 	err = vmd_alloc_irqs(vmd);
+ 	if (err)
+ 		return err;
++>>>>>>> 875b4e2a93bb (PCI: vmd: Create IRQ allocation helper)
  
  	spin_lock_init(&vmd->cfg_lock);
  	pci_set_drvdata(dev, vmd);
* Unmerged path drivers/pci/controller/vmd.c
