ice: Refactor spoofcheck configuration functions

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-425.3.1.el8
commit-author Brett Creeley <brett.creeley@intel.com>
commit daf4dd16438b897a44929771c85b9512c2c20412
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-425.3.1.el8/daf4dd16.failed

Add functions to configure Tx VLAN antispoof based on iproute
configuration and/or VLAN mode and VF driver support. This is needed
later so the driver can control when it can be configured. Also, add
functions that can be used to enable and disable MAC and VLAN
spoofcheck. Move spoofchk configuration during VSI setup into the
SR-IOV initialization path and into the post VSI rebuild flow for VF
VSIs.

	Signed-off-by: Brett Creeley <brett.creeley@intel.com>
	Tested-by: Gurucharan G <gurucharanx.g@intel.com>
	Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
(cherry picked from commit daf4dd16438b897a44929771c85b9512c2c20412)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/intel/ice/ice_lib.c
#	drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c
diff --cc drivers/net/ethernet/intel/ice/ice_lib.c
index 1f620e3adb32,5b5480c3d254..000000000000
--- a/drivers/net/ethernet/intel/ice/ice_lib.c
+++ b/drivers/net/ethernet/intel/ice/ice_lib.c
@@@ -1168,21 -1168,6 +1168,24 @@@ static int ice_vsi_init(struct ice_vsi 
  				cpu_to_le16(ICE_AQ_VSI_PROP_RXQ_MAP_VALID);
  	}
  
++<<<<<<< HEAD
 +	/* enable/disable MAC and VLAN anti-spoof when spoofchk is on/off
 +	 * respectively
 +	 */
 +	if (vsi->type == ICE_VSI_VF) {
 +		ctxt->info.valid_sections |=
 +			cpu_to_le16(ICE_AQ_VSI_PROP_SECURITY_VALID);
 +		if (pf->vf[vsi->vf_id].spoofchk) {
 +			ctxt->info.sec_flags |=
 +				ICE_AQ_VSI_SEC_FLAG_ENA_MAC_ANTI_SPOOF;
 +		} else {
 +			ctxt->info.sec_flags &=
 +				~(ICE_AQ_VSI_SEC_FLAG_ENA_MAC_ANTI_SPOOF);
 +		}
 +	}
 +
++=======
++>>>>>>> daf4dd16438b (ice: Refactor spoofcheck configuration functions)
  	/* Allow control frames out of main VSI */
  	if (vsi->type == ICE_VSI_PF) {
  		ctxt->info.sec_flags |= ICE_AQ_VSI_SEC_FLAG_ALLOW_DEST_OVRD;
diff --cc drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c
index cd72efd1967d,81974dbc1625..000000000000
--- a/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c
+++ b/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c
@@@ -2919,33 -3043,16 +3037,42 @@@ int ice_set_vf_spoofchk(struct net_devi
  		return 0;
  	}
  
- 	ctx = kzalloc(sizeof(*ctx), GFP_KERNEL);
- 	if (!ctx)
- 		return -ENOMEM;
+ 	if (ena)
+ 		ret = ice_vsi_ena_spoofchk(vf_vsi);
+ 	else
+ 		ret = ice_vsi_dis_spoofchk(vf_vsi);
+ 	if (ret)
+ 		dev_err(dev, "Failed to set spoofchk %s for VF %d VSI %d\n error %d\n",
+ 			ena ? "ON" : "OFF", vf->vf_id, vf_vsi->vsi_num, ret);
+ 	else
+ 		vf->spoofchk = ena;
  
++<<<<<<< HEAD
 +	ctx->info.sec_flags = vf_vsi->info.sec_flags;
 +	ctx->info.valid_sections = cpu_to_le16(ICE_AQ_VSI_PROP_SECURITY_VALID);
 +	if (ena) {
 +		ctx->info.sec_flags |=
 +			ICE_AQ_VSI_SEC_FLAG_ENA_MAC_ANTI_SPOOF;
 +	} else {
 +		ctx->info.sec_flags &=
 +			~(ICE_AQ_VSI_SEC_FLAG_ENA_MAC_ANTI_SPOOF);
 +	}
 +
 +	ret = ice_update_vsi(&pf->hw, vf_vsi->idx, ctx, NULL);
 +	if (ret) {
 +		dev_err(dev, "Failed to %sable spoofchk on VF %d VSI %d\n error %d\n",
 +			ena ? "en" : "dis", vf->vf_id, vf_vsi->vsi_num, ret);
 +		goto out;
 +	}
 +
 +	/* only update spoofchk state and VSI context on success */
 +	vf_vsi->info.sec_flags = ctx->info.sec_flags;
 +	vf->spoofchk = ena;
 +
 +out:
 +	kfree(ctx);
++=======
++>>>>>>> daf4dd16438b (ice: Refactor spoofcheck configuration functions)
  	return ret;
  }
  
* Unmerged path drivers/net/ethernet/intel/ice/ice_lib.c
* Unmerged path drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c
