NFSv4.1 mark qualified async operations as MOVEABLE tasks

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-425.3.1.el8
commit-author Olga Kornievskaia <kolga@netapp.com>
commit 118f09eda21d392e1eeb9f8a4bee044958cccf20
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-425.3.1.el8/118f09ed.failed

Mark async operations such as RENAME, REMOVE, COMMIT MOVEABLE
for the nfsv4.1+ sessions.

Fixes: 85e39feead948 ("NFSv4.1 identify and mark RPC tasks that can move between transports")
	Signed-off-by: Olga Kornievskaia <kolga@netapp.com>
	Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
(cherry picked from commit 118f09eda21d392e1eeb9f8a4bee044958cccf20)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/nfs/nfs4proc.c
#	include/linux/nfs_fs_sb.h
diff --cc fs/nfs/nfs4proc.c
index 322c820db36f,c0fdcf8c0032..000000000000
--- a/fs/nfs/nfs4proc.c
+++ b/fs/nfs/nfs4proc.c
@@@ -6574,7 -6643,10 +6574,14 @@@ static int _nfs4_proc_delegreturn(struc
  	};
  	int status = 0;
  
++<<<<<<< HEAD
 +	data = kzalloc(sizeof(*data), GFP_NOFS);
++=======
+ 	if (nfs_server_capable(inode, NFS_CAP_MOVEABLE))
+ 		task_setup_data.flags |= RPC_TASK_MOVEABLE;
+ 
+ 	data = kzalloc(sizeof(*data), GFP_KERNEL);
++>>>>>>> 118f09eda21d (NFSv4.1 mark qualified async operations as MOVEABLE tasks)
  	if (data == NULL)
  		return -ENOMEM;
  
@@@ -10366,7 -10502,9 +10371,13 @@@ static const struct nfs4_minor_version_
  		| NFS_CAP_SEEK
  		| NFS_CAP_LAYOUTSTATS
  		| NFS_CAP_CLONE
++<<<<<<< HEAD
 +		| NFS_CAP_LAYOUTERROR,
++=======
+ 		| NFS_CAP_LAYOUTERROR
+ 		| NFS_CAP_READ_PLUS
+ 		| NFS_CAP_MOVEABLE,
++>>>>>>> 118f09eda21d (NFSv4.1 mark qualified async operations as MOVEABLE tasks)
  	.init_client = nfs41_init_client,
  	.shutdown_client = nfs41_shutdown_client,
  	.match_stateid = nfs41_match_stateid,
diff --cc include/linux/nfs_fs_sb.h
index 4f63ec040318,ea2f7e6b1b0b..000000000000
--- a/include/linux/nfs_fs_sb.h
+++ b/include/linux/nfs_fs_sb.h
@@@ -284,7 -283,9 +284,11 @@@ struct nfs_server 
  #define NFS_CAP_COPY		(1U << 24)
  #define NFS_CAP_OFFLOAD_CANCEL	(1U << 25)
  #define NFS_CAP_LAYOUTERROR	(1U << 26)
 -#define NFS_CAP_COPY_NOTIFY	(1U << 27)
  #define NFS_CAP_XATTR		(1U << 28)
 -#define NFS_CAP_READ_PLUS	(1U << 29)
  #define NFS_CAP_FS_LOCATIONS	(1U << 30)
++<<<<<<< HEAD
 +
++=======
+ #define NFS_CAP_MOVEABLE	(1U << 31)
++>>>>>>> 118f09eda21d (NFSv4.1 mark qualified async operations as MOVEABLE tasks)
  #endif
* Unmerged path fs/nfs/nfs4proc.c
diff --git a/fs/nfs/pagelist.c b/fs/nfs/pagelist.c
index 591e2ecc6466..37c6fb48d330 100644
--- a/fs/nfs/pagelist.c
+++ b/fs/nfs/pagelist.c
@@ -766,6 +766,9 @@ int nfs_initiate_pgio(struct rpc_clnt *clnt, struct nfs_pgio_header *hdr,
 		.flags = RPC_TASK_ASYNC | flags,
 	};
 
+	if (nfs_server_capable(hdr->inode, NFS_CAP_MOVEABLE))
+		task_setup_data.flags |= RPC_TASK_MOVEABLE;
+
 	hdr->rw_ops->rw_initiate(hdr, &msg, rpc_ops, &task_setup_data, how);
 
 	dprintk("NFS: initiated pgio call "
diff --git a/fs/nfs/unlink.c b/fs/nfs/unlink.c
index 9bc652fe91bc..b7d302fceeb1 100644
--- a/fs/nfs/unlink.c
+++ b/fs/nfs/unlink.c
@@ -102,6 +102,10 @@ static void nfs_do_call_unlink(struct inode *inode, struct nfs_unlinkdata *data)
 	};
 	struct rpc_task *task;
 	struct inode *dir = d_inode(data->dentry->d_parent);
+
+	if (nfs_server_capable(inode, NFS_CAP_MOVEABLE))
+		task_setup_data.flags |= RPC_TASK_MOVEABLE;
+
 	nfs_sb_active(dir->i_sb);
 	data->args.fh = NFS_FH(dir);
 	nfs_fattr_init(data->res.dir_attr);
@@ -344,6 +348,10 @@ nfs_async_rename(struct inode *old_dir, struct inode *new_dir,
 		.flags = RPC_TASK_ASYNC | RPC_TASK_CRED_NOREF,
 	};
 
+	if (nfs_server_capable(old_dir, NFS_CAP_MOVEABLE) &&
+	    nfs_server_capable(new_dir, NFS_CAP_MOVEABLE))
+		task_setup_data.flags |= RPC_TASK_MOVEABLE;
+
 	data = kzalloc(sizeof(*data), GFP_KERNEL);
 	if (data == NULL)
 		return ERR_PTR(-ENOMEM);
diff --git a/fs/nfs/write.c b/fs/nfs/write.c
index 5387ab3ac0cd..69ea6cf508b1 100644
--- a/fs/nfs/write.c
+++ b/fs/nfs/write.c
@@ -1701,6 +1701,10 @@ int nfs_initiate_commit(struct rpc_clnt *clnt, struct nfs_commit_data *data,
 		.flags = RPC_TASK_ASYNC | flags,
 		.priority = priority,
 	};
+
+	if (nfs_server_capable(data->inode, NFS_CAP_MOVEABLE))
+		task_setup_data.flags |= RPC_TASK_MOVEABLE;
+
 	/* Set up the initial task struct.  */
 	nfs_ops->commit_setup(data, &msg, &task_setup_data.rpc_client);
 	trace_nfs_initiate_commit(data);
* Unmerged path include/linux/nfs_fs_sb.h
