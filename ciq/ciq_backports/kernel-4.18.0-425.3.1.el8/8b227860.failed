ASoC: cs35l41: Create shared function for errata patches

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-425.3.1.el8
commit-author Lucas Tanure <tanureal@opensource.cirrus.com>
commit 8b2278604b6de27329ec7ed82ca696c4751111b6
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-425.3.1.el8/8b227860.failed

ASoC and HDA systems require the same errata patches, so
move it to the shared code using a function the correctly
applies the patches by revision

Also, move CS35L41_DSP1_CCM_CORE_CTRL write to errata
patch function as is required to be written at boot,
but not in regmap_register_patch sequence as will affect
waking up from hibernation

	Signed-off-by: Lucas Tanure <tanureal@opensource.cirrus.com>
Link: https://lore.kernel.org/r/20211217115708.882525-5-tanureal@opensource.cirrus.com
	Signed-off-by: Mark Brown <broonie@kernel.org>
(cherry picked from commit 8b2278604b6de27329ec7ed82ca696c4751111b6)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/sound/cs35l41.h
#	sound/soc/codecs/cs35l41-tables.c
#	sound/soc/codecs/cs35l41.c
diff --cc include/sound/cs35l41.h
index 1f1e3c6c9be1,ad2e32a12b8c..000000000000
--- a/include/sound/cs35l41.h
+++ b/include/sound/cs35l41.h
@@@ -31,4 -745,24 +31,27 @@@ struct cs35l41_platform_data 
  	struct cs35l41_irq_cfg irq_config2;
  };
  
++<<<<<<< HEAD
++=======
+ struct cs35l41_otp_packed_element_t {
+ 	u32 reg;
+ 	u8 shift;
+ 	u8 size;
+ };
+ 
+ struct cs35l41_otp_map_element_t {
+ 	u32 id;
+ 	u32 num_elements;
+ 	const struct cs35l41_otp_packed_element_t *map;
+ 	u32 bit_offset;
+ 	u32 word_offset;
+ };
+ 
+ extern struct regmap_config cs35l41_regmap_i2c;
+ extern struct regmap_config cs35l41_regmap_spi;
+ 
+ int cs35l41_otp_unpack(struct device *dev, struct regmap *regmap);
+ int cs35l41_register_errata_patch(struct device *dev, struct regmap *reg, unsigned int reg_revid);
+ 
++>>>>>>> 8b2278604b6d (ASoC: cs35l41: Create shared function for errata patches)
  #endif /* __CS35L41_H */
diff --cc sound/soc/codecs/cs35l41-tables.c
index d1a4946ef8e0,5e382eaea340..000000000000
--- a/sound/soc/codecs/cs35l41-tables.c
+++ b/sound/soc/codecs/cs35l41-tables.c
@@@ -556,7 -659,58 +556,62 @@@ static const struct cs35l41_otp_packed_
  	{ 0x00017044,	0,	24 }, /*LOT_NUMBER*/
  };
  
++<<<<<<< HEAD:sound/soc/codecs/cs35l41-tables.c
 +const struct cs35l41_otp_map_element_t cs35l41_otp_map_map[CS35L41_NUM_OTP_MAPS] = {
++=======
+ static const struct reg_sequence cs35l41_reva0_errata_patch[] = {
+ 	{ 0x00000040,			 0x00005555 },
+ 	{ 0x00000040,			 0x0000AAAA },
+ 	{ 0x00003854,			 0x05180240 },
+ 	{ CS35L41_VIMON_SPKMON_RESYNC,	 0x00000000 },
+ 	{ 0x00004310,			 0x00000000 },
+ 	{ CS35L41_VPVBST_FS_SEL,	 0x00000000 },
+ 	{ CS35L41_OTP_TRIM_30,		 0x9091A1C8 },
+ 	{ 0x00003014,			 0x0200EE0E },
+ 	{ CS35L41_BSTCVRT_DCM_CTRL,	 0x00000051 },
+ 	{ 0x00000054,			 0x00000004 },
+ 	{ CS35L41_IRQ1_DB3,		 0x00000000 },
+ 	{ CS35L41_IRQ2_DB3,		 0x00000000 },
+ 	{ CS35L41_DSP1_YM_ACCEL_PL0_PRI, 0x00000000 },
+ 	{ CS35L41_DSP1_XM_ACCEL_PL0_PRI, 0x00000000 },
+ 	{ 0x00000040,			 0x0000CCCC },
+ 	{ 0x00000040,			 0x00003333 },
+ 	{ CS35L41_PWR_CTRL2,		 0x00000000 },
+ 	{ CS35L41_AMP_GAIN_CTRL,	 0x00000000 },
+ };
+ 
+ static const struct reg_sequence cs35l41_revb0_errata_patch[] = {
+ 	{ 0x00000040,			 0x00005555 },
+ 	{ 0x00000040,			 0x0000AAAA },
+ 	{ CS35L41_VIMON_SPKMON_RESYNC,	 0x00000000 },
+ 	{ 0x00004310,			 0x00000000 },
+ 	{ CS35L41_VPVBST_FS_SEL,	 0x00000000 },
+ 	{ CS35L41_BSTCVRT_DCM_CTRL,	 0x00000051 },
+ 	{ CS35L41_DSP1_YM_ACCEL_PL0_PRI, 0x00000000 },
+ 	{ CS35L41_DSP1_XM_ACCEL_PL0_PRI, 0x00000000 },
+ 	{ 0x00000040,			 0x0000CCCC },
+ 	{ 0x00000040,			 0x00003333 },
+ 	{ CS35L41_PWR_CTRL2,		 0x00000000 },
+ 	{ CS35L41_AMP_GAIN_CTRL,	 0x00000000 },
+ };
+ 
+ static const struct reg_sequence cs35l41_revb2_errata_patch[] = {
+ 	{ 0x00000040,			 0x00005555 },
+ 	{ 0x00000040,			 0x0000AAAA },
+ 	{ CS35L41_VIMON_SPKMON_RESYNC,	 0x00000000 },
+ 	{ 0x00004310,			 0x00000000 },
+ 	{ CS35L41_VPVBST_FS_SEL,	 0x00000000 },
+ 	{ CS35L41_BSTCVRT_DCM_CTRL,	 0x00000051 },
+ 	{ CS35L41_DSP1_YM_ACCEL_PL0_PRI, 0x00000000 },
+ 	{ CS35L41_DSP1_XM_ACCEL_PL0_PRI, 0x00000000 },
+ 	{ 0x00000040,			 0x0000CCCC },
+ 	{ 0x00000040,			 0x00003333 },
+ 	{ CS35L41_PWR_CTRL2,		 0x00000000 },
+ 	{ CS35L41_AMP_GAIN_CTRL,	 0x00000000 },
+ };
+ 
+ static const struct cs35l41_otp_map_element_t cs35l41_otp_map_map[] = {
++>>>>>>> 8b2278604b6d (ASoC: cs35l41: Create shared function for errata patches):sound/soc/codecs/cs35l41-lib.c
  	{
  		.id = 0x01,
  		.map = otp_map_1,
@@@ -626,3 -780,161 +681,164 @@@ struct regmap_config cs35l41_regmap_sp
  	.cache_type = REGCACHE_RBTREE,
  };
  EXPORT_SYMBOL_GPL(cs35l41_regmap_spi);
++<<<<<<< HEAD:sound/soc/codecs/cs35l41-tables.c
++=======
+ 
+ static const struct cs35l41_otp_map_element_t *cs35l41_find_otp_map(u32 otp_id)
+ {
+ 	int i;
+ 
+ 	for (i = 0; i < ARRAY_SIZE(cs35l41_otp_map_map); i++) {
+ 		if (cs35l41_otp_map_map[i].id == otp_id)
+ 			return &cs35l41_otp_map_map[i];
+ 	}
+ 
+ 	return NULL;
+ }
+ 
+ int cs35l41_otp_unpack(struct device *dev, struct regmap *regmap)
+ {
+ 	const struct cs35l41_otp_map_element_t *otp_map_match;
+ 	const struct cs35l41_otp_packed_element_t *otp_map;
+ 	int bit_offset, word_offset, ret, i;
+ 	unsigned int bit_sum = 8;
+ 	u32 otp_val, otp_id_reg;
+ 	u32 *otp_mem;
+ 
+ 	otp_mem = kmalloc_array(CS35L41_OTP_SIZE_WORDS, sizeof(*otp_mem), GFP_KERNEL);
+ 	if (!otp_mem)
+ 		return -ENOMEM;
+ 
+ 	ret = regmap_read(regmap, CS35L41_OTPID, &otp_id_reg);
+ 	if (ret) {
+ 		dev_err(dev, "Read OTP ID failed: %d\n", ret);
+ 		goto err_otp_unpack;
+ 	}
+ 
+ 	otp_map_match = cs35l41_find_otp_map(otp_id_reg);
+ 
+ 	if (!otp_map_match) {
+ 		dev_err(dev, "OTP Map matching ID %d not found\n", otp_id_reg);
+ 		ret = -EINVAL;
+ 		goto err_otp_unpack;
+ 	}
+ 
+ 	ret = regmap_bulk_read(regmap, CS35L41_OTP_MEM0, otp_mem, CS35L41_OTP_SIZE_WORDS);
+ 	if (ret) {
+ 		dev_err(dev, "Read OTP Mem failed: %d\n", ret);
+ 		goto err_otp_unpack;
+ 	}
+ 
+ 	otp_map = otp_map_match->map;
+ 
+ 	bit_offset = otp_map_match->bit_offset;
+ 	word_offset = otp_map_match->word_offset;
+ 
+ 	ret = regmap_write(regmap, CS35L41_TEST_KEY_CTL, 0x00000055);
+ 	if (ret) {
+ 		dev_err(dev, "Write Unlock key failed 1/2: %d\n", ret);
+ 		goto err_otp_unpack;
+ 	}
+ 	ret = regmap_write(regmap, CS35L41_TEST_KEY_CTL, 0x000000AA);
+ 	if (ret) {
+ 		dev_err(dev, "Write Unlock key failed 2/2: %d\n", ret);
+ 		goto err_otp_unpack;
+ 	}
+ 
+ 	for (i = 0; i < otp_map_match->num_elements; i++) {
+ 		dev_dbg(dev, "bitoffset= %d, word_offset=%d, bit_sum mod 32=%d\n",
+ 			bit_offset, word_offset, bit_sum % 32);
+ 		if (bit_offset + otp_map[i].size - 1 >= 32) {
+ 			otp_val = (otp_mem[word_offset] &
+ 					GENMASK(31, bit_offset)) >> bit_offset;
+ 			otp_val |= (otp_mem[++word_offset] &
+ 					GENMASK(bit_offset + otp_map[i].size - 33, 0)) <<
+ 					(32 - bit_offset);
+ 			bit_offset += otp_map[i].size - 32;
+ 		} else {
+ 			otp_val = (otp_mem[word_offset] &
+ 				   GENMASK(bit_offset + otp_map[i].size - 1, bit_offset)
+ 				  ) >> bit_offset;
+ 			bit_offset += otp_map[i].size;
+ 		}
+ 		bit_sum += otp_map[i].size;
+ 
+ 		if (bit_offset == 32) {
+ 			bit_offset = 0;
+ 			word_offset++;
+ 		}
+ 
+ 		if (otp_map[i].reg != 0) {
+ 			ret = regmap_update_bits(regmap, otp_map[i].reg,
+ 						 GENMASK(otp_map[i].shift + otp_map[i].size - 1,
+ 							 otp_map[i].shift),
+ 						 otp_val << otp_map[i].shift);
+ 			if (ret < 0) {
+ 				dev_err(dev, "Write OTP val failed: %d\n", ret);
+ 				goto err_otp_unpack;
+ 			}
+ 		}
+ 	}
+ 
+ 	ret = regmap_write(regmap, CS35L41_TEST_KEY_CTL, 0x000000CC);
+ 	if (ret) {
+ 		dev_err(dev, "Write Lock key failed 1/2: %d\n", ret);
+ 		goto err_otp_unpack;
+ 	}
+ 	ret = regmap_write(regmap, CS35L41_TEST_KEY_CTL, 0x00000033);
+ 	if (ret) {
+ 		dev_err(dev, "Write Lock key failed 2/2: %d\n", ret);
+ 		goto err_otp_unpack;
+ 	}
+ 	ret = 0;
+ 
+ err_otp_unpack:
+ 	kfree(otp_mem);
+ 
+ 	return ret;
+ }
+ EXPORT_SYMBOL_GPL(cs35l41_otp_unpack);
+ 
+ int cs35l41_register_errata_patch(struct device *dev, struct regmap *reg, unsigned int reg_revid)
+ {
+ 	char *rev;
+ 	int ret;
+ 
+ 	switch (reg_revid) {
+ 	case CS35L41_REVID_A0:
+ 		ret = regmap_register_patch(reg, cs35l41_reva0_errata_patch,
+ 					    ARRAY_SIZE(cs35l41_reva0_errata_patch));
+ 		rev = "A0";
+ 		break;
+ 	case CS35L41_REVID_B0:
+ 		ret = regmap_register_patch(reg, cs35l41_revb0_errata_patch,
+ 					    ARRAY_SIZE(cs35l41_revb0_errata_patch));
+ 		rev = "B0";
+ 		break;
+ 	case CS35L41_REVID_B2:
+ 		ret = regmap_register_patch(reg, cs35l41_revb2_errata_patch,
+ 					    ARRAY_SIZE(cs35l41_revb2_errata_patch));
+ 		rev = "B2";
+ 		break;
+ 	default:
+ 		ret = -EINVAL;
+ 		rev = "XX";
+ 		break;
+ 	}
+ 
+ 	if (ret)
+ 		dev_err(dev, "Failed to apply %s errata patch: %d\n", rev, ret);
+ 
+ 	ret = regmap_write(reg, CS35L41_DSP1_CCM_CORE_CTRL, 0);
+ 	if (ret < 0)
+ 		dev_err(dev, "Write CCM_CORE_CTRL failed: %d\n", ret);
+ 
+ 	return ret;
+ }
+ EXPORT_SYMBOL_GPL(cs35l41_register_errata_patch);
+ 
+ MODULE_DESCRIPTION("CS35L41 library");
+ MODULE_AUTHOR("David Rhodes, Cirrus Logic Inc, <david.rhodes@cirrus.com>");
+ MODULE_AUTHOR("Lucas Tanure, Cirrus Logic Inc, <tanureal@opensource.cirrus.com>");
+ MODULE_LICENSE("GPL");
++>>>>>>> 8b2278604b6d (ASoC: cs35l41: Create shared function for errata patches):sound/soc/codecs/cs35l41-lib.c
diff --cc sound/soc/codecs/cs35l41.c
index 56fe8f72bd6a,afc10f7ca65e..000000000000
--- a/sound/soc/codecs/cs35l41.c
+++ b/sound/soc/codecs/cs35l41.c
@@@ -1185,56 -1271,89 +1185,142 @@@ static int cs35l41_handle_pdata(struct 
  	return 0;
  }
  
++<<<<<<< HEAD
 +static const struct reg_sequence cs35l41_reva0_errata_patch[] = {
 +	{ 0x00000040,			 0x00005555 },
 +	{ 0x00000040,			 0x0000AAAA },
 +	{ 0x00003854,			 0x05180240 },
 +	{ CS35L41_VIMON_SPKMON_RESYNC,	 0x00000000 },
 +	{ 0x00004310,			 0x00000000 },
 +	{ CS35L41_VPVBST_FS_SEL,	 0x00000000 },
 +	{ CS35L41_OTP_TRIM_30,		 0x9091A1C8 },
 +	{ 0x00003014,			 0x0200EE0E },
 +	{ CS35L41_BSTCVRT_DCM_CTRL,	 0x00000051 },
 +	{ 0x00000054,			 0x00000004 },
 +	{ CS35L41_IRQ1_DB3,		 0x00000000 },
 +	{ CS35L41_IRQ2_DB3,		 0x00000000 },
 +	{ CS35L41_DSP1_YM_ACCEL_PL0_PRI, 0x00000000 },
 +	{ CS35L41_DSP1_XM_ACCEL_PL0_PRI, 0x00000000 },
 +	{ 0x00000040,			 0x0000CCCC },
 +	{ 0x00000040,			 0x00003333 },
 +	{ CS35L41_PWR_CTRL2,		 0x00000000 },
 +	{ CS35L41_AMP_GAIN_CTRL,	 0x00000000 },
 +};
 +
 +static const struct reg_sequence cs35l41_revb0_errata_patch[] = {
 +	{ 0x00000040,			 0x00005555 },
 +	{ 0x00000040,			 0x0000AAAA },
 +	{ CS35L41_VIMON_SPKMON_RESYNC,	 0x00000000 },
 +	{ 0x00004310,			 0x00000000 },
 +	{ CS35L41_VPVBST_FS_SEL,	 0x00000000 },
 +	{ CS35L41_BSTCVRT_DCM_CTRL,	 0x00000051 },
 +	{ CS35L41_DSP1_YM_ACCEL_PL0_PRI, 0x00000000 },
 +	{ CS35L41_DSP1_XM_ACCEL_PL0_PRI, 0x00000000 },
 +	{ 0x00000040,			 0x0000CCCC },
 +	{ 0x00000040,			 0x00003333 },
 +	{ CS35L41_PWR_CTRL2,		 0x00000000 },
 +	{ CS35L41_AMP_GAIN_CTRL,	 0x00000000 },
 +};
 +
 +static const struct reg_sequence cs35l41_revb2_errata_patch[] = {
 +	{ 0x00000040,			 0x00005555 },
 +	{ 0x00000040,			 0x0000AAAA },
 +	{ CS35L41_VIMON_SPKMON_RESYNC,	 0x00000000 },
 +	{ 0x00004310,			 0x00000000 },
 +	{ CS35L41_VPVBST_FS_SEL,	 0x00000000 },
 +	{ CS35L41_BSTCVRT_DCM_CTRL,	 0x00000051 },
 +	{ CS35L41_DSP1_YM_ACCEL_PL0_PRI, 0x00000000 },
 +	{ CS35L41_DSP1_XM_ACCEL_PL0_PRI, 0x00000000 },
 +	{ 0x00000040,			 0x0000CCCC },
 +	{ 0x00000040,			 0x00003333 },
 +	{ CS35L41_PWR_CTRL2,		 0x00000000 },
 +	{ CS35L41_AMP_GAIN_CTRL,	 0x00000000 },
 +};
++=======
+ static const struct reg_sequence cs35l41_fs_errata_patch[] = {
+ 	{ CS35L41_DSP1_RX1_RATE,	0x00000001 },
+ 	{ CS35L41_DSP1_RX2_RATE,	0x00000001 },
+ 	{ CS35L41_DSP1_RX3_RATE,	0x00000001 },
+ 	{ CS35L41_DSP1_RX4_RATE,	0x00000001 },
+ 	{ CS35L41_DSP1_RX5_RATE,	0x00000001 },
+ 	{ CS35L41_DSP1_RX6_RATE,	0x00000001 },
+ 	{ CS35L41_DSP1_RX7_RATE,	0x00000001 },
+ 	{ CS35L41_DSP1_RX8_RATE,	0x00000001 },
+ 	{ CS35L41_DSP1_TX1_RATE,	0x00000001 },
+ 	{ CS35L41_DSP1_TX2_RATE,	0x00000001 },
+ 	{ CS35L41_DSP1_TX3_RATE,	0x00000001 },
+ 	{ CS35L41_DSP1_TX4_RATE,	0x00000001 },
+ 	{ CS35L41_DSP1_TX5_RATE,	0x00000001 },
+ 	{ CS35L41_DSP1_TX6_RATE,	0x00000001 },
+ 	{ CS35L41_DSP1_TX7_RATE,	0x00000001 },
+ 	{ CS35L41_DSP1_TX8_RATE,	0x00000001 },
+ };
+ 
+ static int cs35l41_dsp_init(struct cs35l41_private *cs35l41)
+ {
+ 	struct wm_adsp *dsp;
+ 	int ret;
+ 
+ 	dsp = &cs35l41->dsp;
+ 	dsp->part = "cs35l41";
+ 	dsp->cs_dsp.num = 1;
+ 	dsp->cs_dsp.type = WMFW_HALO;
+ 	dsp->cs_dsp.rev = 0;
+ 	dsp->fw = 9; /* 9 is WM_ADSP_FW_SPK_PROT in wm_adsp.c */
+ 	dsp->cs_dsp.dev = cs35l41->dev;
+ 	dsp->cs_dsp.regmap = cs35l41->regmap;
+ 	dsp->cs_dsp.base = CS35L41_DSP1_CTRL_BASE;
+ 	dsp->cs_dsp.base_sysinfo = CS35L41_DSP1_SYS_ID;
+ 	dsp->cs_dsp.mem = cs35l41_dsp1_regions;
+ 	dsp->cs_dsp.num_mems = ARRAY_SIZE(cs35l41_dsp1_regions);
+ 	dsp->cs_dsp.lock_regions = 0xFFFFFFFF;
+ 
+ 	ret = regmap_multi_reg_write(cs35l41->regmap, cs35l41_fs_errata_patch,
+ 				     ARRAY_SIZE(cs35l41_fs_errata_patch));
+ 	if (ret < 0) {
+ 		dev_err(cs35l41->dev, "Failed to write fs errata: %d\n", ret);
+ 		return ret;
+ 	}
+ 
+ 	ret = wm_halo_init(dsp);
+ 	if (ret) {
+ 		dev_err(cs35l41->dev, "wm_halo_init failed: %d\n", ret);
+ 		return ret;
+ 	}
+ 
+ 	ret = regmap_write(cs35l41->regmap, CS35L41_DSP1_RX5_SRC,
+ 			   CS35L41_INPUT_SRC_VPMON);
+ 	if (ret < 0) {
+ 		dev_err(cs35l41->dev, "Write INPUT_SRC_VPMON failed: %d\n", ret);
+ 		goto err_dsp;
+ 	}
+ 	ret = regmap_write(cs35l41->regmap, CS35L41_DSP1_RX6_SRC,
+ 			   CS35L41_INPUT_SRC_CLASSH);
+ 	if (ret < 0) {
+ 		dev_err(cs35l41->dev, "Write INPUT_SRC_CLASSH failed: %d\n", ret);
+ 		goto err_dsp;
+ 	}
+ 	ret = regmap_write(cs35l41->regmap, CS35L41_DSP1_RX7_SRC,
+ 			   CS35L41_INPUT_SRC_TEMPMON);
+ 	if (ret < 0) {
+ 		dev_err(cs35l41->dev, "Write INPUT_SRC_TEMPMON failed: %d\n", ret);
+ 		goto err_dsp;
+ 	}
+ 	ret = regmap_write(cs35l41->regmap, CS35L41_DSP1_RX8_SRC,
+ 			   CS35L41_INPUT_SRC_RSVD);
+ 	if (ret < 0) {
+ 		dev_err(cs35l41->dev, "Write INPUT_SRC_RSVD failed: %d\n", ret);
+ 		goto err_dsp;
+ 	}
+ 
+ 	return 0;
+ 
+ err_dsp:
+ 	wm_adsp2_remove(dsp);
+ 
+ 	return ret;
+ }
++>>>>>>> 8b2278604b6d (ASoC: cs35l41: Create shared function for errata patches)
  
  int cs35l41_probe(struct cs35l41_private *cs35l41,
  		  struct cs35l41_platform_data *pdata)
* Unmerged path include/sound/cs35l41.h
* Unmerged path sound/soc/codecs/cs35l41-tables.c
* Unmerged path sound/soc/codecs/cs35l41.c
