ASoC: SOF: topology: Make effect widget parsing IPC agnostic

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-425.3.1.el8
commit-author Ranjani Sridharan <ranjani.sridharan@linux.intel.com>
commit f2cf24a1afa836be44dd2abdf7896b236df8d9a2
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-425.3.1.el8/f2cf24a1.failed

Define the list of tokens pertaining to effect type widgets, parse and
save them as part of the swidget tuples array. Once topology parsing is
complete, these tokens will be applied to create the IPC structure for the
process component based on the topology widget_setup op in ipc3_tplg_ops.

	Signed-off-by: Ranjani Sridharan <ranjani.sridharan@linux.intel.com>
	Reviewed-by: Bard Liao <yung-chuan.liao@linux.intel.com>
	Reviewed-by: PÃ©ter Ujfalusi <peter.ujfalusi@linux.intel.com>
	Reviewed-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
Link: https://lore.kernel.org/r/20220314200520.1233427-15-ranjani.sridharan@linux.intel.com
	Signed-off-by: Mark Brown <broonie@kernel.org>
(cherry picked from commit f2cf24a1afa836be44dd2abdf7896b236df8d9a2)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	sound/soc/sof/ipc3-topology.c
#	sound/soc/sof/topology.c
diff --cc sound/soc/sof/topology.c
index a127d3d2eab7,187f7c46a42b..000000000000
--- a/sound/soc/sof/topology.c
+++ b/sound/soc/sof/topology.c
@@@ -603,22 -554,6 +554,25 @@@ int get_token_dai_type(void *elem, voi
  	return 0;
  }
  
++<<<<<<< HEAD
 +static int get_token_process_type(void *elem, void *object, u32 offset)
 +{
 +	u32 *val = (u32 *)((u8 *)object + offset);
 +
 +	*val = find_process((const char *)elem);
 +	return 0;
 +}
 +
 +/* Buffers */
 +static const struct sof_topology_token buffer_tokens[] = {
 +	{SOF_TKN_BUF_SIZE, SND_SOC_TPLG_TUPLE_TYPE_WORD, get_token_u32,
 +		offsetof(struct sof_ipc_buffer, size)},
 +	{SOF_TKN_BUF_CAPS, SND_SOC_TPLG_TUPLE_TYPE_WORD, get_token_u32,
 +		offsetof(struct sof_ipc_buffer, caps)},
 +};
 +
++=======
++>>>>>>> f2cf24a1afa8 (ASoC: SOF: topology: Make effect widget parsing IPC agnostic)
  /* DAI */
  static const struct sof_topology_token dai_tokens[] = {
  	{SOF_TKN_DAI_TYPE, SND_SOC_TPLG_TUPLE_TYPE_STRING, get_token_dai_type,
@@@ -637,76 -572,6 +591,79 @@@ static const struct sof_topology_token 
  		offsetof(struct sof_ipc_dai_config, dai_index)},
  };
  
++<<<<<<< HEAD
 +/* scheduling */
 +static const struct sof_topology_token sched_tokens[] = {
 +	{SOF_TKN_SCHED_PERIOD, SND_SOC_TPLG_TUPLE_TYPE_WORD, get_token_u32,
 +		offsetof(struct sof_ipc_pipe_new, period)},
 +	{SOF_TKN_SCHED_PRIORITY, SND_SOC_TPLG_TUPLE_TYPE_WORD, get_token_u32,
 +		offsetof(struct sof_ipc_pipe_new, priority)},
 +	{SOF_TKN_SCHED_MIPS, SND_SOC_TPLG_TUPLE_TYPE_WORD, get_token_u32,
 +		offsetof(struct sof_ipc_pipe_new, period_mips)},
 +	{SOF_TKN_SCHED_CORE, SND_SOC_TPLG_TUPLE_TYPE_WORD, get_token_u32,
 +		offsetof(struct sof_ipc_pipe_new, core)},
 +	{SOF_TKN_SCHED_FRAMES, SND_SOC_TPLG_TUPLE_TYPE_WORD, get_token_u32,
 +		offsetof(struct sof_ipc_pipe_new, frames_per_sched)},
 +	{SOF_TKN_SCHED_TIME_DOMAIN, SND_SOC_TPLG_TUPLE_TYPE_WORD, get_token_u32,
 +		offsetof(struct sof_ipc_pipe_new, time_domain)},
 +};
 +
 +static const struct sof_topology_token pipeline_tokens[] = {
 +	{SOF_TKN_SCHED_DYNAMIC_PIPELINE, SND_SOC_TPLG_TUPLE_TYPE_BOOL, get_token_u16,
 +		offsetof(struct snd_sof_widget, dynamic_pipeline_widget)},
 +
 +};
 +
 +/* volume */
 +static const struct sof_topology_token volume_tokens[] = {
 +	{SOF_TKN_VOLUME_RAMP_STEP_TYPE, SND_SOC_TPLG_TUPLE_TYPE_WORD,
 +		get_token_u32, offsetof(struct sof_ipc_comp_volume, ramp)},
 +	{SOF_TKN_VOLUME_RAMP_STEP_MS,
 +		SND_SOC_TPLG_TUPLE_TYPE_WORD, get_token_u32,
 +		offsetof(struct sof_ipc_comp_volume, initial_ramp)},
 +};
 +
 +/* SRC */
 +static const struct sof_topology_token src_tokens[] = {
 +	{SOF_TKN_SRC_RATE_IN, SND_SOC_TPLG_TUPLE_TYPE_WORD, get_token_u32,
 +		offsetof(struct sof_ipc_comp_src, source_rate)},
 +	{SOF_TKN_SRC_RATE_OUT, SND_SOC_TPLG_TUPLE_TYPE_WORD, get_token_u32,
 +		offsetof(struct sof_ipc_comp_src, sink_rate)},
 +};
 +
 +/* ASRC */
 +static const struct sof_topology_token asrc_tokens[] = {
 +	{SOF_TKN_ASRC_RATE_IN, SND_SOC_TPLG_TUPLE_TYPE_WORD, get_token_u32,
 +		offsetof(struct sof_ipc_comp_asrc, source_rate)},
 +	{SOF_TKN_ASRC_RATE_OUT, SND_SOC_TPLG_TUPLE_TYPE_WORD, get_token_u32,
 +		offsetof(struct sof_ipc_comp_asrc, sink_rate)},
 +	{SOF_TKN_ASRC_ASYNCHRONOUS_MODE, SND_SOC_TPLG_TUPLE_TYPE_WORD,
 +		get_token_u32,
 +		offsetof(struct sof_ipc_comp_asrc, asynchronous_mode)},
 +	{SOF_TKN_ASRC_OPERATION_MODE, SND_SOC_TPLG_TUPLE_TYPE_WORD,
 +		get_token_u32,
 +		offsetof(struct sof_ipc_comp_asrc, operation_mode)},
 +};
 +
 +/* Tone */
 +static const struct sof_topology_token tone_tokens[] = {
 +};
 +
 +/* EFFECT */
 +static const struct sof_topology_token process_tokens[] = {
 +	{SOF_TKN_PROCESS_TYPE, SND_SOC_TPLG_TUPLE_TYPE_STRING,
 +		get_token_process_type,
 +		offsetof(struct sof_ipc_comp_process, type)},
 +};
 +
++=======
++>>>>>>> f2cf24a1afa8 (ASoC: SOF: topology: Make effect widget parsing IPC agnostic)
 +/* PCM */
 +static const struct sof_topology_token pcm_tokens[] = {
 +	{SOF_TKN_PCM_DMAC_CONFIG, SND_SOC_TPLG_TUPLE_TYPE_WORD, get_token_u32,
 +		offsetof(struct sof_ipc_comp_host, dmac_config)},
 +};
 +
  /* PCM */
  static const struct sof_topology_token stream_tokens[] = {
  	{SOF_TKN_STREAM_PLAYBACK_COMPATIBLE_D0I3,
@@@ -2435,42 -1815,36 +2191,66 @@@ static int sof_widget_ready(struct snd_
  		list_add(&dai->list, &sdev->dai_list);
  		swidget->private = dai;
  		break;
++<<<<<<< HEAD
++=======
+ 	case snd_soc_dapm_effect:
+ 		/* check we have some tokens - we need at least process type */
+ 		if (le32_to_cpu(tw->priv.size) == 0) {
+ 			dev_err(scomp->dev, "error: process tokens not found\n");
+ 			ret = -EINVAL;
+ 			break;
+ 		}
+ 		ret = sof_widget_parse_tokens(scomp, swidget, tw, token_list, token_list_size);
+ 		break;
+ 	case snd_soc_dapm_pga:
+ 		if (!le32_to_cpu(tw->num_kcontrols)) {
+ 			dev_err(scomp->dev, "invalid kcontrol count %d for volume\n",
+ 				tw->num_kcontrols);
+ 			ret = -EINVAL;
+ 			break;
+ 		}
+ 
+ 		fallthrough;
++>>>>>>> f2cf24a1afa8 (ASoC: SOF: topology: Make effect widget parsing IPC agnostic)
  	case snd_soc_dapm_mixer:
 +		ret = sof_widget_load_mixer(scomp, index, swidget, tw);
 +		break;
 +	case snd_soc_dapm_pga:
 +		ret = sof_widget_load_pga(scomp, index, swidget, tw);
 +		break;
  	case snd_soc_dapm_buffer:
 +		ret = sof_widget_load_buffer(scomp, index, swidget, tw);
 +		break;
  	case snd_soc_dapm_scheduler:
 +		ret = sof_widget_load_pipeline(scomp, index, swidget, tw);
 +		break;
  	case snd_soc_dapm_aif_out:
 +		ret = sof_widget_load_pcm(scomp, index, swidget,
 +					  SOF_IPC_STREAM_CAPTURE, tw);
 +		break;
  	case snd_soc_dapm_aif_in:
 +		ret = sof_widget_load_pcm(scomp, index, swidget,
 +					  SOF_IPC_STREAM_PLAYBACK, tw);
 +		break;
  	case snd_soc_dapm_src:
 +		ret = sof_widget_load_src(scomp, index, swidget, tw);
 +		break;
  	case snd_soc_dapm_asrc:
 +		ret = sof_widget_load_asrc(scomp, index, swidget, tw);
 +		break;
  	case snd_soc_dapm_siggen:
 +		ret = sof_widget_load_siggen(scomp, index, swidget, tw);
 +		break;
++<<<<<<< HEAD
 +	case snd_soc_dapm_effect:
 +		ret = sof_widget_load_process(scomp, index, swidget, tw);
 +		break;
  	case snd_soc_dapm_mux:
  	case snd_soc_dapm_demux:
 -		ret = sof_widget_parse_tokens(scomp, swidget, tw,  token_list, token_list_size);
 +		ret = sof_widget_load_mux(scomp, index, swidget, tw);
  		break;
++=======
++>>>>>>> f2cf24a1afa8 (ASoC: SOF: topology: Make effect widget parsing IPC agnostic)
  	case snd_soc_dapm_switch:
  	case snd_soc_dapm_dai_link:
  	case snd_soc_dapm_kcontrol:
* Unmerged path sound/soc/sof/ipc3-topology.c
* Unmerged path sound/soc/sof/ipc3-topology.c
* Unmerged path sound/soc/sof/topology.c
