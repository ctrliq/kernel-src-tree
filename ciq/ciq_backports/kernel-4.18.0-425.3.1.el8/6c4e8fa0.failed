net/mlx5e: CT: Use own workqueue instead of mlx5e priv

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-425.3.1.el8
commit-author Roi Dayan <roid@nvidia.com>
commit 6c4e8fa03fde7e5b304594294e397a9ba92feaf6
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-425.3.1.el8/6c4e8fa0.failed

Allocate a ct priv workqueue instead of using mlx5e priv one
so flushing will only be of related CT entries.
Also move flushing of the workqueue before rhashtable destroy
otherwise entries won't be valid.

Fixes: b069e14fff46 ("net/mlx5e: CT: Fix queued up restore put() executing after relevant ft release")
	Signed-off-by: Roi Dayan <roid@nvidia.com>
	Reviewed-by: Oz Shlomo <ozsh@nvidia.com>
	Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
(cherry picked from commit 6c4e8fa03fde7e5b304594294e397a9ba92feaf6)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en/tc_ct.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en/tc_ct.c
index 7dfa645682c8,ba171c7f0a67..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en/tc_ct.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en/tc_ct.c
@@@ -61,7 -73,12 +61,13 @@@ struct mlx5_tc_ct_priv 
  	struct mapping_ctx *labels_mapping;
  	enum mlx5_flow_namespace_type ns_type;
  	struct mlx5_fs_chains *chains;
 -	struct mlx5_ct_fs *fs;
 -	struct mlx5_ct_fs_ops *fs_ops;
  	spinlock_t ht_lock; /* protects ft entries */
++<<<<<<< HEAD
++=======
+ 	struct workqueue_struct *wq;
+ 
+ 	struct mlx5_tc_ct_debugfs debugfs;
++>>>>>>> 6c4e8fa03fde (net/mlx5e: CT: Use own workqueue instead of mlx5e priv)
  };
  
  struct mlx5_ct_flow {
@@@ -2162,8 -2171,23 +2162,28 @@@ mlx5_tc_ct_init(struct mlx5e_priv *priv
  	if (rhashtable_init(&ct_priv->ct_tuples_nat_ht, &tuples_nat_ht_params))
  		goto err_ct_tuples_nat_ht;
  
++<<<<<<< HEAD
++	return ct_priv;
++
++=======
+ 	ct_priv->wq = alloc_ordered_workqueue("mlx5e_ct_priv_wq", 0);
+ 	if (!ct_priv->wq) {
+ 		err = -ENOMEM;
+ 		goto err_wq;
+ 	}
+ 
+ 	err = mlx5_tc_ct_fs_init(ct_priv);
+ 	if (err)
+ 		goto err_init_fs;
+ 
+ 	mlx5_ct_tc_create_dbgfs(ct_priv);
  	return ct_priv;
  
+ err_init_fs:
+ 	destroy_workqueue(ct_priv->wq);
+ err_wq:
+ 	rhashtable_destroy(&ct_priv->ct_tuples_nat_ht);
++>>>>>>> 6c4e8fa03fde (net/mlx5e: CT: Use own workqueue instead of mlx5e priv)
  err_ct_tuples_nat_ht:
  	rhashtable_destroy(&ct_priv->ct_tuples_ht);
  err_ct_tuples_ht:
@@@ -2192,8 -2216,13 +2212,13 @@@ mlx5_tc_ct_clean(struct mlx5_tc_ct_pri
  	if (!ct_priv)
  		return;
  
++<<<<<<< HEAD
++=======
+ 	destroy_workqueue(ct_priv->wq);
+ 	mlx5_ct_tc_remove_dbgfs(ct_priv);
++>>>>>>> 6c4e8fa03fde (net/mlx5e: CT: Use own workqueue instead of mlx5e priv)
  	chains = ct_priv->chains;
  
 -	ct_priv->fs_ops->destroy(ct_priv->fs);
 -	kfree(ct_priv->fs);
 -
  	mlx5_chains_destroy_global_table(chains, ct_priv->ct_nat);
  	mlx5_chains_destroy_global_table(chains, ct_priv->ct);
  	mapping_destroy(ct_priv->zone_mapping);
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en/tc_ct.c
