mm: sparse: pass section_nr to find_memory_block

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-425.3.1.el8
commit-author Ohhoon Kwon <ohoono.kwon@samsung.com>
commit fc1f5e980a463325cf41d39ac6a69aa3cca73995
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-425.3.1.el8/fc1f5e98.failed

With CONFIG_SPARSEMEM_EXTREME enabled, __section_nr() which converts
mem_section to section_nr could be costly since it iterates all section
roots to check if the given mem_section is in its range.

On the other hand, __nr_to_section() which converts section_nr to
mem_section can be done in O(1).

Let's pass section_nr instead of mem_section ptr to find_memory_block() in
order to reduce needless iterations.

Link: https://lkml.kernel.org/r/20210707150212.855-3-ohoono.kwon@samsung.com
	Signed-off-by: Ohhoon Kwon <ohoono.kwon@samsung.com>
	Acked-by: Michal Hocko <mhocko@suse.com>
	Acked-by: Mike Rapoport <rppt@linux.ibm.com>
	Reviewed-by: David Hildenbrand <david@redhat.com>
	Cc: Baoquan He <bhe@redhat.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit fc1f5e980a463325cf41d39ac6a69aa3cca73995)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/base/memory.c
diff --cc drivers/base/memory.c
index 1bbe4fdbf860,e3fd2dbf4eea..000000000000
--- a/drivers/base/memory.c
+++ b/drivers/base/memory.c
@@@ -510,9 -578,9 +510,13 @@@ static struct memory_block *find_memory
  /*
   * Called under device_hotplug_lock.
   */
- struct memory_block *find_memory_block(struct mem_section *section)
+ struct memory_block *find_memory_block(unsigned long section_nr)
  {
++<<<<<<< HEAD
 +	unsigned long block_id = base_memory_block_id(__section_nr(section));
++=======
+ 	unsigned long block_id = memory_block_id(section_nr);
++>>>>>>> fc1f5e980a46 (mm: sparse: pass section_nr to find_memory_block)
  
  	return find_memory_block_by_id(block_id);
  }
diff --git a/arch/powerpc/platforms/pseries/hotplug-memory.c b/arch/powerpc/platforms/pseries/hotplug-memory.c
index a2bcd3bd6b4e..6288406d3b85 100644
--- a/arch/powerpc/platforms/pseries/hotplug-memory.c
+++ b/arch/powerpc/platforms/pseries/hotplug-memory.c
@@ -216,13 +216,11 @@ static int update_lmb_associativity_index(struct drmem_lmb *lmb)
 static struct memory_block *lmb_to_memblock(struct drmem_lmb *lmb)
 {
 	unsigned long section_nr;
-	struct mem_section *mem_sect;
 	struct memory_block *mem_block;
 
 	section_nr = pfn_to_section_nr(PFN_DOWN(lmb->base_addr));
-	mem_sect = __nr_to_section(section_nr);
 
-	mem_block = find_memory_block(mem_sect);
+	mem_block = find_memory_block(section_nr);
 	return mem_block;
 }
 
* Unmerged path drivers/base/memory.c
diff --git a/include/linux/memory.h b/include/linux/memory.h
index b01c2c56d418..58e22ecc9aca 100644
--- a/include/linux/memory.h
+++ b/include/linux/memory.h
@@ -86,7 +86,7 @@ int create_memory_block_devices(unsigned long start, unsigned long size);
 void remove_memory_block_devices(unsigned long start, unsigned long size);
 extern void memory_dev_init(void);
 extern int memory_notify(unsigned long val, void *v);
-extern struct memory_block *find_memory_block(struct mem_section *);
+extern struct memory_block *find_memory_block(unsigned long section_nr);
 typedef int (*walk_memory_blocks_func_t)(struct memory_block *, void *);
 extern int walk_memory_blocks(unsigned long start, unsigned long size,
 			      void *arg, walk_memory_blocks_func_t func);
