KVM: arm64: Move kvm_arch_vcpu_run_pid_change() out of line

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-425.3.1.el8
commit-author Marc Zyngier <maz@kernel.org>
commit 052f064d42b7bac87cbcd140710f262c5f1c3c8b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-425.3.1.el8/052f064d.failed

Having kvm_arch_vcpu_run_pid_change() inline doesn't bring anything
to the table. Move it next to kvm_vcpu_first_run_init(), which will
be convenient for what is next to come.

	Reviewed-by: Andrew Jones <drjones@redhat.com>
	Signed-off-by: Marc Zyngier <maz@kernel.org>
(cherry picked from commit 052f064d42b7bac87cbcd140710f262c5f1c3c8b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/arm64/include/asm/kvm_host.h
diff --cc arch/arm64/include/asm/kvm_host.h
index a469c4a7a671,f464e1530985..000000000000
--- a/arch/arm64/include/asm/kvm_host.h
+++ b/arch/arm64/include/asm/kvm_host.h
@@@ -609,12 -745,11 +609,20 @@@ static inline bool kvm_pmu_counter_defe
  	return (!has_vhe() && attr->exclude_host);
  }
  
++<<<<<<< HEAD
 +#ifdef CONFIG_KVM /* Avoid conflicts with core headers if CONFIG_KVM=n */
 +static inline int kvm_arch_vcpu_run_pid_change(struct kvm_vcpu *vcpu)
 +{
 +	return kvm_arch_vcpu_run_map_fp(vcpu);
 +}
 +
++=======
+ /* Flags for host debug state */
+ void kvm_arch_vcpu_load_debug_state_flags(struct kvm_vcpu *vcpu);
+ void kvm_arch_vcpu_put_debug_state_flags(struct kvm_vcpu *vcpu);
+ 
+ #ifdef CONFIG_KVM
++>>>>>>> 052f064d42b7 (KVM: arm64: Move kvm_arch_vcpu_run_pid_change() out of line)
  void kvm_set_pmu_events(u32 set, struct perf_event_attr *attr);
  void kvm_clr_pmu_events(u32 clr);
  
* Unmerged path arch/arm64/include/asm/kvm_host.h
diff --git a/arch/arm64/kvm/arm.c b/arch/arm64/kvm/arm.c
index 7bf8be0c4f22..6cc16af24d4a 100644
--- a/arch/arm64/kvm/arm.c
+++ b/arch/arm64/kvm/arm.c
@@ -527,6 +527,11 @@ static void update_vmid(struct kvm_vmid *vmid)
 	spin_unlock(&kvm_vmid_lock);
 }
 
+int kvm_arch_vcpu_run_pid_change(struct kvm_vcpu *vcpu)
+{
+	return kvm_arch_vcpu_run_map_fp(vcpu);
+}
+
 static int kvm_vcpu_first_run_init(struct kvm_vcpu *vcpu)
 {
 	struct kvm *kvm = vcpu->kvm;
