net/mlx5e: Enable TC offload for ingress MACVLAN

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-425.3.1.el8
commit-author Dima Chumak <dchumak@nvidia.com>
commit 05000bbba1e93d9915a5ea8c7faf4086f58a5fb9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-425.3.1.el8/05000bbb.failed

Support offloading of TC rules that filter ingress traffic from a MACVLAN
device, which is attached to uplink representor.

	Signed-off-by: Dima Chumak <dchumak@nvidia.com>
	Reviewed-by: Vlad Buslov <vladbu@nvidia.com>
	Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
(cherry picked from commit 05000bbba1e93d9915a5ea8c7faf4086f58a5fb9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en/rep/tc.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en/rep/tc.c
index b5f11b59d3f7,398c6761eeb3..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en/rep/tc.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en/rep/tc.c
@@@ -433,18 -430,16 +441,29 @@@ mlx5e_rep_indr_setup_block(struct net_d
  	struct flow_block_cb *block_cb;
  
  	if (!mlx5e_tc_tun_device_to_offload(priv, netdev) &&
++<<<<<<< HEAD
 +	    !(is_vlan_dev(netdev) && vlan_dev_real_dev(netdev) == rpriv->netdev) &&
 +	    !is_ovs_int_port)
 +		return -EOPNOTSUPP;
++=======
+ 	    !(is_vlan_dev(netdev) && vlan_dev_real_dev(netdev) == rpriv->netdev)) {
+ 		if (!(netif_is_macvlan(netdev) && macvlan_dev_real_dev(netdev) == rpriv->netdev))
+ 			return -EOPNOTSUPP;
+ 		if (!mlx5e_rep_macvlan_mode_supported(netdev)) {
+ 			netdev_warn(netdev, "Offloading ingress filter is supported only with macvlan passthru mode");
+ 			return -EOPNOTSUPP;
+ 		}
+ 	}
++>>>>>>> 05000bbba1e9 (net/mlx5e: Enable TC offload for ingress MACVLAN)
 +
 +	if (f->binder_type != FLOW_BLOCK_BINDER_TYPE_CLSACT_INGRESS &&
 +	    f->binder_type != FLOW_BLOCK_BINDER_TYPE_CLSACT_EGRESS)
 +		return -EOPNOTSUPP;
  
 -	if (f->binder_type != FLOW_BLOCK_BINDER_TYPE_CLSACT_INGRESS)
 +	if (f->binder_type == FLOW_BLOCK_BINDER_TYPE_CLSACT_EGRESS && !is_ovs_int_port)
 +		return -EOPNOTSUPP;
 +
 +	if (is_ovs_int_port && !mlx5e_tc_int_port_supported(esw))
  		return -EOPNOTSUPP;
  
  	f->unlocked_driver_cb = true;
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en/rep/tc.c
