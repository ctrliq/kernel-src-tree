x86/insn: Add an insn_decode() API

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-425.3.1.el8
commit-author Borislav Petkov <bp@suse.de>
commit 93281c4a96572a34504244969b938e035204778d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-425.3.1.el8/93281c4a.failed

Users of the instruction decoder should use this to decode instruction
bytes. For that, have insn*() helpers return an int value to denote
success/failure. When there's an error fetching the next insn byte and
the insn falls short, return -ENODATA to denote that.

While at it, make insn_get_opcode() more stricter as to whether what has
seen so far is a valid insn and if not.

Copy linux/kconfig.h for the tools-version of the decoder so that it can
use IS_ENABLED().

Also, cast the INSN_MODE_KERN dummy define value to (enum insn_mode)
for tools use of the decoder because perf tool builds with -Werror and
errors out with -Werror=sign-compare otherwise.

	Signed-off-by: Borislav Petkov <bp@suse.de>
	Acked-by: Masami Hiramatsu <mhiramat@kernel.org>
Link: https://lkml.kernel.org/r/20210304174237.31945-5-bp@alien8.de
(cherry picked from commit 93281c4a96572a34504244969b938e035204778d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/lib/insn.c
#	tools/arch/x86/lib/insn.c
diff --cc arch/x86/lib/insn.c
index d58b56309ac2,bb58004497f8..000000000000
--- a/arch/x86/lib/insn.c
+++ b/arch/x86/lib/insn.c
@@@ -23,10 -11,26 +23,30 @@@
  #else
  #include <string.h>
  #endif
 -#include <asm/inat.h> /*__ignore_sync_check__ */
 -#include <asm/insn.h> /* __ignore_sync_check__ */
 +#include <asm/inat.h>
 +#include <asm/insn.h>
  
++<<<<<<< HEAD
 +#include <asm/emulate_prefix.h>
++=======
+ #include <linux/errno.h>
+ #include <linux/kconfig.h>
+ 
+ #include <asm/emulate_prefix.h> /* __ignore_sync_check__ */
+ 
+ #define leXX_to_cpu(t, r)						\
+ ({									\
+ 	__typeof__(t) v;						\
+ 	switch (sizeof(t)) {						\
+ 	case 4: v = le32_to_cpu(r); break;				\
+ 	case 2: v = le16_to_cpu(r); break;				\
+ 	case 1:	v = r; break;						\
+ 	default:							\
+ 		BUILD_BUG(); break;					\
+ 	}								\
+ 	v;								\
+ })
++>>>>>>> 93281c4a9657 (x86/insn: Add an insn_decode() API)
  
  /* Verify next sizeof(t) bytes can be on the same instruction */
  #define validate_next(t, insn, n)	\
@@@ -356,21 -403,31 +420,31 @@@ int insn_rip_relative(struct insn *insn
   *
   * If necessary, first collects the instruction up to and including the
   * ModRM byte.
+  *
+  * Returns:
+  * 0: if decoding succeeded
+  * < 0: otherwise.
   */
- void insn_get_sib(struct insn *insn)
+ int insn_get_sib(struct insn *insn)
  {
  	insn_byte_t modrm;
+ 	int ret;
  
  	if (insn->sib.got)
- 		return;
- 	if (!insn->modrm.got)
- 		insn_get_modrm(insn);
+ 		return 0;
+ 
+ 	if (!insn->modrm.got) {
+ 		ret = insn_get_modrm(insn);
+ 		if (ret)
+ 			return ret;
+ 	}
+ 
  	if (insn->modrm.nbytes) {
 -		modrm = insn->modrm.bytes[0];
 +		modrm = (insn_byte_t)insn->modrm.value;
  		if (insn->addr_bytes != 2 &&
  		    X86_MODRM_MOD(modrm) != 3 && X86_MODRM_RM(modrm) == 4) {
 -			insn_field_set(&insn->sib,
 -				       get_next(insn_byte_t, insn), 1);
 +			insn->sib.value = get_next(insn_byte_t, insn);
 +			insn->sib.nbytes = 1;
  		}
  	}
  	insn->sib.got = 1;
diff --cc tools/arch/x86/lib/insn.c
index 0f1ec7f4681e,be2b057f91d4..000000000000
--- a/tools/arch/x86/lib/insn.c
+++ b/tools/arch/x86/lib/insn.c
@@@ -23,10 -11,26 +23,33 @@@
  #else
  #include <string.h>
  #endif
++<<<<<<< HEAD
 +#include "../include/asm/inat.h"
 +#include "../include/asm/insn.h"
 +
 +#include "../include/asm/emulate_prefix.h"
++=======
+ #include <asm/inat.h> /*__ignore_sync_check__ */
+ #include <asm/insn.h> /* __ignore_sync_check__ */
+ 
+ #include <linux/errno.h>
+ #include <linux/kconfig.h>
+ 
+ #include <asm/emulate_prefix.h> /* __ignore_sync_check__ */
+ 
+ #define leXX_to_cpu(t, r)						\
+ ({									\
+ 	__typeof__(t) v;						\
+ 	switch (sizeof(t)) {						\
+ 	case 4: v = le32_to_cpu(r); break;				\
+ 	case 2: v = le16_to_cpu(r); break;				\
+ 	case 1:	v = r; break;						\
+ 	default:							\
+ 		BUILD_BUG(); break;					\
+ 	}								\
+ 	v;								\
+ })
++>>>>>>> 93281c4a9657 (x86/insn: Add an insn_decode() API)
  
  /* Verify next sizeof(t) bytes can be on the same instruction */
  #define validate_next(t, insn, n)	\
@@@ -356,21 -403,31 +423,31 @@@ int insn_rip_relative(struct insn *insn
   *
   * If necessary, first collects the instruction up to and including the
   * ModRM byte.
+  *
+  * Returns:
+  * 0: if decoding succeeded
+  * < 0: otherwise.
   */
- void insn_get_sib(struct insn *insn)
+ int insn_get_sib(struct insn *insn)
  {
  	insn_byte_t modrm;
+ 	int ret;
  
  	if (insn->sib.got)
- 		return;
- 	if (!insn->modrm.got)
- 		insn_get_modrm(insn);
+ 		return 0;
+ 
+ 	if (!insn->modrm.got) {
+ 		ret = insn_get_modrm(insn);
+ 		if (ret)
+ 			return ret;
+ 	}
+ 
  	if (insn->modrm.nbytes) {
 -		modrm = insn->modrm.bytes[0];
 +		modrm = (insn_byte_t)insn->modrm.value;
  		if (insn->addr_bytes != 2 &&
  		    X86_MODRM_MOD(modrm) != 3 && X86_MODRM_RM(modrm) == 4) {
 -			insn_field_set(&insn->sib,
 -				       get_next(insn_byte_t, insn), 1);
 +			insn->sib.value = get_next(insn_byte_t, insn);
 +			insn->sib.nbytes = 1;
  		}
  	}
  	insn->sib.got = 1;
diff --git a/arch/x86/include/asm/insn.h b/arch/x86/include/asm/insn.h
index 3f8c5780b9d4..ce1f3723d3e1 100644
--- a/arch/x86/include/asm/insn.h
+++ b/arch/x86/include/asm/insn.h
@@ -100,13 +100,23 @@ struct insn {
 #define X86_VEX_M_MAX	0x1f			/* VEX3.M Maximum value */
 
 extern void insn_init(struct insn *insn, const void *kaddr, int buf_len, int x86_64);
-extern void insn_get_prefixes(struct insn *insn);
-extern void insn_get_opcode(struct insn *insn);
-extern void insn_get_modrm(struct insn *insn);
-extern void insn_get_sib(struct insn *insn);
-extern void insn_get_displacement(struct insn *insn);
-extern void insn_get_immediate(struct insn *insn);
-extern void insn_get_length(struct insn *insn);
+extern int insn_get_prefixes(struct insn *insn);
+extern int insn_get_opcode(struct insn *insn);
+extern int insn_get_modrm(struct insn *insn);
+extern int insn_get_sib(struct insn *insn);
+extern int insn_get_displacement(struct insn *insn);
+extern int insn_get_immediate(struct insn *insn);
+extern int insn_get_length(struct insn *insn);
+
+enum insn_mode {
+	INSN_MODE_32,
+	INSN_MODE_64,
+	/* Mode is determined by the current kernel build. */
+	INSN_MODE_KERN,
+	INSN_NUM_MODES,
+};
+
+extern int insn_decode(struct insn *insn, const void *kaddr, int buf_len, enum insn_mode m);
 
 /* Attribute will be determined after getting ModRM (for opcode groups) */
 static inline void insn_get_attribute(struct insn *insn)
* Unmerged path arch/x86/lib/insn.c
diff --git a/tools/arch/x86/include/asm/insn.h b/tools/arch/x86/include/asm/insn.h
index 18137418a5d4..1426d22f7b72 100644
--- a/tools/arch/x86/include/asm/insn.h
+++ b/tools/arch/x86/include/asm/insn.h
@@ -100,13 +100,23 @@ struct insn {
 #define X86_VEX_M_MAX	0x1f			/* VEX3.M Maximum value */
 
 extern void insn_init(struct insn *insn, const void *kaddr, int buf_len, int x86_64);
-extern void insn_get_prefixes(struct insn *insn);
-extern void insn_get_opcode(struct insn *insn);
-extern void insn_get_modrm(struct insn *insn);
-extern void insn_get_sib(struct insn *insn);
-extern void insn_get_displacement(struct insn *insn);
-extern void insn_get_immediate(struct insn *insn);
-extern void insn_get_length(struct insn *insn);
+extern int insn_get_prefixes(struct insn *insn);
+extern int insn_get_opcode(struct insn *insn);
+extern int insn_get_modrm(struct insn *insn);
+extern int insn_get_sib(struct insn *insn);
+extern int insn_get_displacement(struct insn *insn);
+extern int insn_get_immediate(struct insn *insn);
+extern int insn_get_length(struct insn *insn);
+
+enum insn_mode {
+	INSN_MODE_32,
+	INSN_MODE_64,
+	/* Mode is determined by the current kernel build. */
+	INSN_MODE_KERN,
+	INSN_NUM_MODES,
+};
+
+extern int insn_decode(struct insn *insn, const void *kaddr, int buf_len, enum insn_mode m);
 
 /* Attribute will be determined after getting ModRM (for opcode groups) */
 static inline void insn_get_attribute(struct insn *insn)
* Unmerged path tools/arch/x86/lib/insn.c
diff --git a/tools/include/linux/kconfig.h b/tools/include/linux/kconfig.h
new file mode 100644
index 000000000000..1555a0c4f345
--- /dev/null
+++ b/tools/include/linux/kconfig.h
@@ -0,0 +1,73 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+#ifndef _TOOLS_LINUX_KCONFIG_H
+#define _TOOLS_LINUX_KCONFIG_H
+
+/* CONFIG_CC_VERSION_TEXT (Do not delete this comment. See help in Kconfig) */
+
+#ifdef CONFIG_CPU_BIG_ENDIAN
+#define __BIG_ENDIAN 4321
+#else
+#define __LITTLE_ENDIAN 1234
+#endif
+
+#define __ARG_PLACEHOLDER_1 0,
+#define __take_second_arg(__ignored, val, ...) val
+
+/*
+ * The use of "&&" / "||" is limited in certain expressions.
+ * The following enable to calculate "and" / "or" with macro expansion only.
+ */
+#define __and(x, y)			___and(x, y)
+#define ___and(x, y)			____and(__ARG_PLACEHOLDER_##x, y)
+#define ____and(arg1_or_junk, y)	__take_second_arg(arg1_or_junk y, 0)
+
+#define __or(x, y)			___or(x, y)
+#define ___or(x, y)			____or(__ARG_PLACEHOLDER_##x, y)
+#define ____or(arg1_or_junk, y)		__take_second_arg(arg1_or_junk 1, y)
+
+/*
+ * Helper macros to use CONFIG_ options in C/CPP expressions. Note that
+ * these only work with boolean and tristate options.
+ */
+
+/*
+ * Getting something that works in C and CPP for an arg that may or may
+ * not be defined is tricky.  Here, if we have "#define CONFIG_BOOGER 1"
+ * we match on the placeholder define, insert the "0," for arg1 and generate
+ * the triplet (0, 1, 0).  Then the last step cherry picks the 2nd arg (a one).
+ * When CONFIG_BOOGER is not defined, we generate a (... 1, 0) pair, and when
+ * the last step cherry picks the 2nd arg, we get a zero.
+ */
+#define __is_defined(x)			___is_defined(x)
+#define ___is_defined(val)		____is_defined(__ARG_PLACEHOLDER_##val)
+#define ____is_defined(arg1_or_junk)	__take_second_arg(arg1_or_junk 1, 0)
+
+/*
+ * IS_BUILTIN(CONFIG_FOO) evaluates to 1 if CONFIG_FOO is set to 'y', 0
+ * otherwise. For boolean options, this is equivalent to
+ * IS_ENABLED(CONFIG_FOO).
+ */
+#define IS_BUILTIN(option) __is_defined(option)
+
+/*
+ * IS_MODULE(CONFIG_FOO) evaluates to 1 if CONFIG_FOO is set to 'm', 0
+ * otherwise.
+ */
+#define IS_MODULE(option) __is_defined(option##_MODULE)
+
+/*
+ * IS_REACHABLE(CONFIG_FOO) evaluates to 1 if the currently compiled
+ * code can call a function defined in code compiled based on CONFIG_FOO.
+ * This is similar to IS_ENABLED(), but returns false when invoked from
+ * built-in code when CONFIG_FOO is set to 'm'.
+ */
+#define IS_REACHABLE(option) __or(IS_BUILTIN(option), \
+				__and(IS_MODULE(option), __is_defined(MODULE)))
+
+/*
+ * IS_ENABLED(CONFIG_FOO) evaluates to 1 if CONFIG_FOO is set to 'y' or 'm',
+ * 0 otherwise.
+ */
+#define IS_ENABLED(option) __or(IS_BUILTIN(option), IS_MODULE(option))
+
+#endif /* _TOOLS_LINUX_KCONFIG_H */
