gpu: Bulk conversion to generic_handle_domain_irq()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-425.3.1.el8
Rebuild_CHGLOG: - Revert "gpu: Bulk conversion to generic_handle_domain_irq()" (Michel DÃ¤nzer) [2041811]
Rebuild_FUZZ: 91.89%
commit-author Marc Zyngier <maz@kernel.org>
commit 66c6594b6dd66e04909d35dd5281c67cb81ecd2c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-425.3.1.el8/66c6594b.failed

Wherever possible, replace constructs that match either
generic_handle_irq(irq_find_mapping()) or
generic_handle_irq(irq_linear_revmap()) to a single call to
generic_handle_domain_irq().

	Signed-off-by: Marc Zyngier <maz@kernel.org>
(cherry picked from commit 66c6594b6dd66e04909d35dd5281c67cb81ecd2c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/msm/disp/dpu1/dpu_mdss.c
#	drivers/gpu/drm/msm/disp/mdp5/mdp5_mdss.c
diff --cc drivers/gpu/drm/msm/disp/mdp5/mdp5_mdss.c
index f2a0db7a8a03,2f4895bcb0b0..000000000000
--- a/drivers/gpu/drm/msm/disp/mdp5/mdp5_mdss.c
+++ b/drivers/gpu/drm/msm/disp/mdp5/mdp5_mdss.c
@@@ -63,8 -50,7 +63,12 @@@ static irqreturn_t mdss_irq(int irq, vo
  	while (intr) {
  		irq_hw_number_t hwirq = fls(intr) - 1;
  
++<<<<<<< HEAD
 +		generic_handle_irq(irq_find_mapping(
 +				mdss->irqcontroller.domain, hwirq));
++=======
+ 		generic_handle_domain_irq(mdp5_mdss->irqcontroller.domain, hwirq);
++>>>>>>> 66c6594b6dd6 (gpu: Bulk conversion to generic_handle_domain_irq())
  		intr &= ~(1 << hwirq);
  	}
  
* Unmerged path drivers/gpu/drm/msm/disp/dpu1/dpu_mdss.c
diff --git a/drivers/gpu/drm/amd/amdgpu/amdgpu_irq.c b/drivers/gpu/drm/amd/amdgpu/amdgpu_irq.c
index a74c42ad1b0c..fb57f69429d0 100644
--- a/drivers/gpu/drm/amd/amdgpu/amdgpu_irq.c
+++ b/drivers/gpu/drm/amd/amdgpu/amdgpu_irq.c
@@ -501,7 +501,7 @@ void amdgpu_irq_dispatch(struct amdgpu_device *adev,
 
 	} else if ((client_id == AMDGPU_IRQ_CLIENTID_LEGACY) &&
 		   adev->irq.virq[src_id]) {
-		generic_handle_irq(irq_find_mapping(adev->irq.domain, src_id));
+		generic_handle_domain_irq(adev->irq.domain, src_id);
 
 	} else if (!adev->irq.client[client_id].sources) {
 		DRM_DEBUG("Unregistered interrupt client_id: %d src_id: %d\n",
* Unmerged path drivers/gpu/drm/msm/disp/dpu1/dpu_mdss.c
* Unmerged path drivers/gpu/drm/msm/disp/mdp5/mdp5_mdss.c
diff --git a/drivers/gpu/ipu-v3/ipu-common.c b/drivers/gpu/ipu-v3/ipu-common.c
index 48685cddbad1..668a94537bef 100644
--- a/drivers/gpu/ipu-v3/ipu-common.c
+++ b/drivers/gpu/ipu-v3/ipu-common.c
@@ -1069,19 +1069,16 @@ static int ipu_submodules_init(struct ipu_soc *ipu,
 static void ipu_irq_handle(struct ipu_soc *ipu, const int *regs, int num_regs)
 {
 	unsigned long status;
-	int i, bit, irq;
+	int i, bit;
 
 	for (i = 0; i < num_regs; i++) {
 
 		status = ipu_cm_read(ipu, IPU_INT_STAT(regs[i]));
 		status &= ipu_cm_read(ipu, IPU_INT_CTRL(regs[i]));
 
-		for_each_set_bit(bit, &status, 32) {
-			irq = irq_linear_revmap(ipu->domain,
-						regs[i] * 32 + bit);
-			if (irq)
-				generic_handle_irq(irq);
-		}
+		for_each_set_bit(bit, &status, 32)
+			generic_handle_domain_irq(ipu->domain,
+						  regs[i] * 32 + bit);
 	}
 }
 
