PCI: Fix indentation

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-425.3.1.el8
commit-author Krzysztof Kozlowski <krzk@kernel.org>
commit 36533f355b1ad14ec4352f7e254a5bfd4f4923d5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-425.3.1.el8/36533f35.failed

Adjust indentation from spaces to tab (+optional two spaces) as in
coding style with command like:

  $ sed -e 's/^        /\t/' -i */Kconfig

[bhelgaas: do same in vmd.c]
Link: https://lore.kernel.org/r/20191120134036.14502-1-krzk@kernel.org
	Signed-off-by: Krzysztof Kozlowski <krzk@kernel.org>
	Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
(cherry picked from commit 36533f355b1ad14ec4352f7e254a5bfd4f4923d5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/pci/Kconfig
#	drivers/pci/controller/vmd.c
diff --cc drivers/pci/Kconfig
index bd8ab0ee0c49,bd50765f30cd..000000000000
--- a/drivers/pci/Kconfig
+++ b/drivers/pci/Kconfig
@@@ -80,14 -106,14 +80,20 @@@ config PCI_PF_STU
  	  When in doubt, say N.
  
  config XEN_PCIDEV_FRONTEND
++<<<<<<< HEAD
 +        tristate "Xen PCI Frontend"
 +        depends on PCI && X86 && XEN
 +        select PCI_XEN
++=======
+ 	tristate "Xen PCI Frontend"
+ 	depends on X86 && XEN
+ 	select PCI_XEN
++>>>>>>> 36533f355b1a (PCI: Fix indentation)
  	select XEN_XENBUS_FRONTEND
-         default y
-         help
-           The PCI device frontend driver allows the kernel to import arbitrary
-           PCI devices from a PCI backend to support PCI driver domains.
+ 	default y
+ 	help
+ 	  The PCI device frontend driver allows the kernel to import arbitrary
+ 	  PCI devices from a PCI backend to support PCI driver domains.
  
  config PCI_ATS
  	bool
@@@ -156,93 -181,12 +162,97 @@@ config PCI_LABE
  
  config PCI_HYPERV
  	tristate "Hyper-V PCI Frontend"
++<<<<<<< HEAD
 +	depends on ((X86 && X86_64) || ARM64) && HYPERV && PCI_MSI && PCI_MSI_IRQ_DOMAIN && SYSFS
++=======
+ 	depends on X86_64 && HYPERV && PCI_MSI && PCI_MSI_IRQ_DOMAIN && SYSFS
++>>>>>>> 36533f355b1a (PCI: Fix indentation)
  	select PCI_HYPERV_INTERFACE
-         help
-           The PCI device frontend driver allows the kernel to import arbitrary
-           PCI devices from a PCI backend to support PCI driver domains.
+ 	help
+ 	  The PCI device frontend driver allows the kernel to import arbitrary
+ 	  PCI devices from a PCI backend to support PCI driver domains.
  
 +choice
 +	prompt "PCI Express hierarchy optimization setting"
 +	default PCIE_BUS_DEFAULT
 +	depends on PCI && EXPERT
 +	help
 +	  MPS (Max Payload Size) and MRRS (Max Read Request Size) are PCIe
 +	  device parameters that affect performance and the ability to
 +	  support hotplug and peer-to-peer DMA.
 +
 +	  The following choices set the MPS and MRRS optimization strategy
 +	  at compile-time.  The choices are the same as those offered for
 +	  the kernel command-line parameter 'pci', i.e.,
 +	  'pci=pcie_bus_tune_off', 'pci=pcie_bus_safe',
 +	  'pci=pcie_bus_perf', and 'pci=pcie_bus_peer2peer'.
 +
 +	  This is a compile-time setting and can be overridden by the above
 +	  command-line parameters.  If unsure, choose PCIE_BUS_DEFAULT.
 +
 +config PCIE_BUS_TUNE_OFF
 +	bool "Tune Off"
 +	depends on PCI
 +	help
 +	  Use the BIOS defaults; don't touch MPS at all.  This is the same
 +	  as booting with 'pci=pcie_bus_tune_off'.
 +
 +config PCIE_BUS_DEFAULT
 +	bool "Default"
 +	depends on PCI
 +	help
 +	  Default choice; ensure that the MPS matches upstream bridge.
 +
 +config PCIE_BUS_SAFE
 +	bool "Safe"
 +	depends on PCI
 +	help
 +	  Use largest MPS that boot-time devices support.  If you have a
 +	  closed system with no possibility of adding new devices, this
 +	  will use the largest MPS that's supported by all devices.  This
 +	  is the same as booting with 'pci=pcie_bus_safe'.
 +
 +config PCIE_BUS_PERFORMANCE
 +	bool "Performance"
 +	depends on PCI
 +	help
 +	  Use MPS and MRRS for best performance.  Ensure that a given
 +	  device's MPS is no larger than its parent MPS, which allows us to
 +	  keep all switches/bridges to the max MPS supported by their
 +	  parent.  This is the same as booting with 'pci=pcie_bus_perf'.
 +
 +config PCIE_BUS_PEER2PEER
 +	bool "Peer2peer"
 +	depends on PCI
 +	help
 +	  Set MPS = 128 for all devices.  MPS configuration effected by the
 +	  other options could cause the MPS on one root port to be
 +	  different than that of the MPS on another, which may cause
 +	  hot-added devices or peer-to-peer DMA to fail.  Set MPS to the
 +	  smallest possible value (128B) system-wide to avoid these issues.
 +	  This is the same as booting with 'pci=pcie_bus_peer2peer'.
 +
 +endchoice
 +
 +config VGA_ARB
 +	bool "VGA Arbitration" if EXPERT
 +	default y
 +	depends on (PCI && !S390)
 +	help
 +	  Some "legacy" VGA devices implemented on PCI typically have the same
 +	  hard-decoded addresses as they did on ISA. When multiple PCI devices
 +	  are accessed at same time they need some kind of coordination. Please
 +	  see Documentation/gpu/vgaarbiter.rst for more details. Select this to
 +	  enable VGA arbiter.
 +
 +config VGA_ARB_MAX_GPUS
 +	int "Maximum number of GPUs"
 +	default 16
 +	depends on VGA_ARB
 +	help
 +	  Reserves space in the kernel to maintain resource locking for
 +	  multiple GPUS.  The overhead for each GPU is very small.
 +
  source "drivers/pci/hotplug/Kconfig"
  source "drivers/pci/controller/Kconfig"
  source "drivers/pci/endpoint/Kconfig"
diff --cc drivers/pci/controller/vmd.c
index a7c1abb7aa35,5d21c9c73336..000000000000
--- a/drivers/pci/controller/vmd.c
+++ b/drivers/pci/controller/vmd.c
@@@ -746,7 -823,7 +746,11 @@@ static int vmd_suspend(struct device *d
  	int i;
  
  	for (i = 0; i < vmd->msix_count; i++)
++<<<<<<< HEAD
 +                devm_free_irq(dev, pci_irq_vector(pdev, i), vmd->irqs[i]);
++=======
+ 		devm_free_irq(dev, pci_irq_vector(pdev, i), &vmd->irqs[i]);
++>>>>>>> 36533f355b1a (PCI: Fix indentation)
  
  	pci_save_state(pdev);
  	return 0;
* Unmerged path drivers/pci/Kconfig
diff --git a/drivers/pci/controller/dwc/Kconfig b/drivers/pci/controller/dwc/Kconfig
index 91b0194240a5..355ba26e77a8 100644
--- a/drivers/pci/controller/dwc/Kconfig
+++ b/drivers/pci/controller/dwc/Kconfig
@@ -7,9 +7,9 @@ config PCIE_DW
 	bool
 
 config PCIE_DW_HOST
-        bool
+	bool
 	depends on PCI_MSI_IRQ_DOMAIN
-        select PCIE_DW
+	select PCIE_DW
 
 config PCIE_DW_EP
 	bool
@@ -191,6 +191,6 @@ config PCIE_HISI_STB
 	depends on PCI_MSI_IRQ_DOMAIN
 	select PCIE_DW_HOST
 	help
-          Say Y here if you want PCIe controller support on HiSilicon STB SoCs
+	  Say Y here if you want PCIe controller support on HiSilicon STB SoCs
 
 endmenu
* Unmerged path drivers/pci/controller/vmd.c
diff --git a/drivers/pci/hotplug/Kconfig b/drivers/pci/hotplug/Kconfig
index e9f78eb390d2..dad20d83e436 100644
--- a/drivers/pci/hotplug/Kconfig
+++ b/drivers/pci/hotplug/Kconfig
@@ -83,7 +83,7 @@ config HOTPLUG_PCI_CPCI_ZT5550
 	depends on HOTPLUG_PCI_CPCI && X86
 	help
 	  Say Y here if you have an Performance Technologies (formerly Intel,
-          formerly just Ziatech) Ziatech ZT5550 CompactPCI system card.
+	  formerly just Ziatech) Ziatech ZT5550 CompactPCI system card.
 
 	  To compile this driver as a module, choose M here: the
 	  module will be called cpcihp_zt5550.
