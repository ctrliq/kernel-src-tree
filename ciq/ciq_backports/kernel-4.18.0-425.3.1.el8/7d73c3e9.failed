Makefile: remove stale cc-option checks

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-425.3.1.el8
commit-author Nick Desaulniers <ndesaulniers@google.com>
commit 7d73c3e9c51400d3e0e755488050804e4d44737a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-425.3.1.el8/7d73c3e9.failed

cc-option, cc-option-yn, and cc-disable-warning all invoke the compiler
during build time, and can slow down the build when these checks become
stale for our supported compilers, whose minimally supported versions
increases over time. See Documentation/process/changes.rst for the
current supported minimal versions (GCC 4.9+, clang 10.0.1+). Compiler
version support for these flags may be verified on godbolt.org.

The following flags are GCC only and supported since at least GCC 4.9.
Remove cc-option and cc-disable-warning tests.
* -fno-tree-loop-im
* -Wno-maybe-uninitialized
* -fno-reorder-blocks
* -fno-ipa-cp-clone
* -fno-partial-inlining
* -femit-struct-debug-baseonly
* -fno-inline-functions-called-once
* -fconserve-stack

The following flags are supported by all supported versions of GCC and
Clang. Remove their cc-option, cc-option-yn, and cc-disable-warning tests.
* -fno-delete-null-pointer-checks
* -fno-var-tracking
* -Wno-array-bounds

The following configs are made dependent on GCC, since they use GCC
specific flags.
* READABLE_ASM
* DEBUG_SECTION_MISMATCH

-mfentry was not supported by s390-linux-gnu-gcc until gcc-9+, add a
comment.

--param=allow-store-data-races=0 was renamed to -fno-allow-store-data-races
in the GCC 10 release; add a comment.

-Wmaybe-uninitialized (GCC specific) was being added for CONFIG_GCOV,
then again unconditionally; add it only once.

Also, base RETPOLINE_CFLAGS and RETPOLINE_VDSO_CFLAGS on CONFIC_CC_IS_*
then remove cc-option tests for Clang.

Link: https://github.com/ClangBuiltLinux/linux/issues/1436
	Acked-by: Miguel Ojeda <ojeda@kernel.org>
	Reviewed-by: Nathan Chancellor <nathan@kernel.org>
	Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>
	Signed-off-by: Masahiro Yamada <masahiroy@kernel.org>
(cherry picked from commit 7d73c3e9c51400d3e0e755488050804e4d44737a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	Makefile
diff --cc Makefile
index d19eb4028fc8,ce5a297ecd7c..000000000000
--- a/Makefile
+++ b/Makefile
@@@ -613,15 -680,21 +614,28 @@@ ifdef CONFIG_FUNCTION_TRACE
    CC_FLAGS_FTRACE := -pg
  endif
  
++<<<<<<< HEAD
 +# The arch Makefile can set ARCH_{CPP,A,C}FLAGS to override the default
 +# values of the respective KBUILD_* variables
 +ARCH_CPPFLAGS :=
 +ARCH_AFLAGS :=
 +ARCH_CFLAGS :=
 +include arch/$(SRCARCH)/Makefile
++=======
+ ifdef CONFIG_CC_IS_GCC
+ RETPOLINE_CFLAGS	:= $(call cc-option,-mindirect-branch=thunk-extern -mindirect-branch-register)
+ RETPOLINE_VDSO_CFLAGS	:= $(call cc-option,-mindirect-branch=thunk-inline -mindirect-branch-register)
+ endif
+ ifdef CONFIG_CC_IS_CLANG
+ RETPOLINE_CFLAGS	:= -mretpoline-external-thunk
+ RETPOLINE_VDSO_CFLAGS	:= -mretpoline
+ endif
+ export RETPOLINE_CFLAGS
+ export RETPOLINE_VDSO_CFLAGS
++>>>>>>> 7d73c3e9c514 (Makefile: remove stale cc-option checks)
  
 -include $(srctree)/arch/$(SRCARCH)/Makefile
 -
 -ifdef need-config
 -ifdef may-sync-config
 +ifeq ($(dot-config),1)
 +ifeq ($(KBUILD_EXTMOD),)
  # Read in dependencies to all Kconfig* files, make sure to run syncconfig if
  # changes are detected. This should be included after arch/$(SRCARCH)/Makefile
  # because some architectures define CROSS_COMPILE there.
@@@ -649,14 -737,10 +663,14 @@@ include/config/auto.conf
  	echo >&2 ;							\
  	/bin/false)
  
 -endif # may-sync-config
 -endif # need-config
 +endif # KBUILD_EXTMOD
 +
 +else
 +# Dummy target needed, because used as prerequisite
 +include/config/auto.conf: ;
 +endif # $(dot-config)
  
- KBUILD_CFLAGS	+= $(call cc-option,-fno-delete-null-pointer-checks,)
+ KBUILD_CFLAGS	+= -fno-delete-null-pointer-checks
  KBUILD_CFLAGS	+= $(call cc-disable-warning,frame-address,)
  KBUILD_CFLAGS	+= $(call cc-disable-warning, format-truncation)
  KBUILD_CFLAGS	+= $(call cc-disable-warning, format-overflow)
@@@ -692,12 -755,13 +706,16 @@@ endi
  endif
  
  # Tell gcc to never replace conditional load with a non-conditional one
+ ifdef CONFIG_CC_IS_GCC
+ # gcc-10 renamed --param=allow-store-data-races=0 to
+ # -fno-allow-store-data-races.
  KBUILD_CFLAGS	+= $(call cc-option,--param=allow-store-data-races=0)
  KBUILD_CFLAGS	+= $(call cc-option,-fno-allow-store-data-races)
+ endif
  
 +include scripts/Makefile.kcov
 +include scripts/Makefile.gcc-plugins
 +
  ifdef CONFIG_READABLE_ASM
  # Disable optimizations that make assembler listings hard to read.
  # reorder blocks reorders the control in the function
@@@ -764,16 -859,40 +780,23 @@@ KBUILD_CFLAGS	+= $(call cc-option, -gdw
  endif
  
  ifdef CONFIG_DEBUG_INFO_REDUCED
++<<<<<<< HEAD
 +KBUILD_CFLAGS 	+= $(call cc-option, -femit-struct-debug-baseonly) \
 +		   $(call cc-option,-fno-var-tracking)
++=======
+ DEBUG_CFLAGS	+= -fno-var-tracking
+ ifdef CONFIG_CC_IS_GCC
+ DEBUG_CFLAGS	+= -femit-struct-debug-baseonly
+ endif
++>>>>>>> 7d73c3e9c514 (Makefile: remove stale cc-option checks)
  endif
  
 -ifdef CONFIG_DEBUG_INFO_COMPRESSED
 -DEBUG_CFLAGS	+= -gz=zlib
 -KBUILD_AFLAGS	+= -gz=zlib
 -KBUILD_LDFLAGS	+= --compress-debug-sections=zlib
 -endif
 -
 -endif # CONFIG_DEBUG_INFO
 -
 -KBUILD_CFLAGS += $(DEBUG_CFLAGS)
 -export DEBUG_CFLAGS
 -
  ifdef CONFIG_FUNCTION_TRACER
 -ifdef CONFIG_FTRACE_MCOUNT_USE_CC
 -  CC_FLAGS_FTRACE	+= -mrecord-mcount
 -  ifdef CONFIG_HAVE_NOP_MCOUNT
 -    ifeq ($(call cc-option-yn, -mnop-mcount),y)
 -      CC_FLAGS_FTRACE	+= -mnop-mcount
 -      CC_FLAGS_USING	+= -DCC_USING_NOP_MCOUNT
 -    endif
 -  endif
 -endif
 -ifdef CONFIG_FTRACE_MCOUNT_USE_OBJTOOL
 -  CC_FLAGS_USING	+= -DCC_USING_NOP_MCOUNT
 -endif
 -ifdef CONFIG_FTRACE_MCOUNT_USE_RECORDMCOUNT
 -  ifdef CONFIG_HAVE_C_RECORDMCOUNT
 -    BUILD_C_RECORDMCOUNT := y
 -    export BUILD_C_RECORDMCOUNT
 +ifdef CONFIG_FTRACE_MCOUNT_RECORD
 +  # gcc 5 supports generating the mcount tables directly
 +  ifeq ($(call cc-option-yn,-mrecord-mcount),y)
 +    CC_FLAGS_FTRACE	+= -mrecord-mcount
 +    export CC_USING_RECORD_MCOUNT := 1
    endif
  endif
  ifdef CONFIG_HAVE_FENTRY
@@@ -821,35 -986,32 +845,50 @@@ KBUILD_CFLAGS += $(call cc-disable-warn
  # disable stringop warnings in gcc 8+
  KBUILD_CFLAGS += $(call cc-disable-warning, stringop-truncation)
  
++<<<<<<< HEAD
++=======
+ # We'll want to enable this eventually, but it's not going away for 5.7 at least
+ KBUILD_CFLAGS += $(call cc-disable-warning, zero-length-bounds)
+ KBUILD_CFLAGS += -Wno-array-bounds
+ KBUILD_CFLAGS += $(call cc-disable-warning, stringop-overflow)
+ 
+ # Another good warning that we'll want to enable eventually
+ KBUILD_CFLAGS += $(call cc-disable-warning, restrict)
+ 
++>>>>>>> 7d73c3e9c514 (Makefile: remove stale cc-option checks)
  # Enabled with W=2, disabled by default as noisy
- KBUILD_CFLAGS += $(call cc-disable-warning, maybe-uninitialized)
+ ifdef CONFIG_CC_IS_GCC
+ KBUILD_CFLAGS += -Wno-maybe-uninitialized
+ endif
  
  # disable invalid "can't wrap" optimizations for signed / pointers
 -KBUILD_CFLAGS	+= -fno-strict-overflow
 +KBUILD_CFLAGS	+= $(call cc-option,-fno-strict-overflow)
 +
 +# clang sets -fmerge-all-constants by default as optimization, but this
 +# is non-conforming behavior for C and in fact breaks the kernel, so we
 +# need to disable it here generally.
 +KBUILD_CFLAGS	+= $(call cc-option,-fno-merge-all-constants)
 +
 +# for gcc -fno-merge-all-constants disables everything, but it is fine
 +# to have actual conforming behavior enabled.
 +KBUILD_CFLAGS	+= $(call cc-option,-fmerge-constants)
  
  # Make sure -fstack-check isn't enabled (like gentoo apparently did)
 -KBUILD_CFLAGS  += -fno-stack-check
 +KBUILD_CFLAGS  += $(call cc-option,-fno-stack-check,)
  
  # conserve stack if available
- KBUILD_CFLAGS   += $(call cc-option,-fconserve-stack)
+ ifdef CONFIG_CC_IS_GCC
+ KBUILD_CFLAGS   += -fconserve-stack
+ endif
  
 +# disallow errors like 'EXPORT_GPL(foo);' with missing header
 +KBUILD_CFLAGS   += $(call cc-option,-Werror=implicit-int)
 +
 +# require functions to have arguments in prototypes, not empty 'int foo()'
 +KBUILD_CFLAGS   += $(call cc-option,-Werror=strict-prototypes)
 +
  # Prohibit date/time macros, which would make the build non-deterministic
 -KBUILD_CFLAGS   += -Werror=date-time
 +KBUILD_CFLAGS   += $(call cc-option,-Werror=date-time)
  
  # enforce correct pointer usage
  KBUILD_CFLAGS   += $(call cc-option,-Werror=incompatible-pointer-types)
* Unmerged path Makefile
diff --git a/lib/Kconfig.debug b/lib/Kconfig.debug
index 905c5c3a3f5c..ce0f63928ee5 100644
--- a/lib/Kconfig.debug
+++ b/lib/Kconfig.debug
@@ -286,6 +286,7 @@ config STRIP_ASM_SYMS
 config READABLE_ASM
 	bool "Generate readable assembler code"
 	depends on DEBUG_KERNEL
+	depends on CC_IS_GCC
 	help
 	  Disable some compiler optimizations that tend to generate human unreadable
 	  assembler output. This may make the kernel slightly slower, but it helps
@@ -353,6 +354,7 @@ config HEADERS_CHECK
 
 config DEBUG_SECTION_MISMATCH
 	bool "Enable full Section mismatch analysis"
+	depends on CC_IS_GCC
 	help
 	  The section mismatch analysis checks if there are illegal
 	  references from one section to another section.
