ASoC: SOF: Add a new dai_get_clk topology IPC op

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-425.3.1.el8
commit-author Ranjani Sridharan <ranjani.sridharan@linux.intel.com>
commit 85f7a8b6e1bea0ad494fb786a5dd7d9715a976d2
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-425.3.1.el8/85f7a8b6.failed

This will help make the code for getting the mclk and bclk IPC specific.
Add the implementation for IPC3 as well.

	Signed-off-by: Ranjani Sridharan <ranjani.sridharan@linux.intel.com>
	Reviewed-by: Rander Wang <rander.wang@intel.com>
	Reviewed-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
	Reviewed-by: Bard Liao <yung-chuan.liao@linux.intel.com>
Link: https://lore.kernel.org/r/20220317175044.1752400-20-ranjani.sridharan@linux.intel.com
	Signed-off-by: Mark Brown <broonie@kernel.org>
(cherry picked from commit 85f7a8b6e1bea0ad494fb786a5dd7d9715a976d2)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	sound/soc/sof/ipc3-topology.c
#	sound/soc/sof/sof-audio.h
diff --cc sound/soc/sof/sof-audio.h
index d620c73a2a23,7f15b3bc8196..000000000000
--- a/sound/soc/sof/sof-audio.h
+++ b/sound/soc/sof/sof-audio.h
@@@ -30,13 -30,46 +30,34 @@@
  
  #define WIDGET_IS_DAI(id) ((id) == snd_soc_dapm_dai_in || (id) == snd_soc_dapm_dai_out)
  
++<<<<<<< HEAD
 +struct snd_sof_widget;
 +struct snd_sof_route;
++=======
+ #define SOF_DAI_CLK_INTEL_SSP_MCLK	0
+ #define SOF_DAI_CLK_INTEL_SSP_BCLK	1
+ 
+ /*
+  * Volume fractional word length define to 16 sets
+  * the volume linear gain value to use Qx.16 format
+  */
+ #define VOLUME_FWL	16
+ 
+ struct snd_sof_widget;
+ struct snd_sof_route;
+ struct snd_sof_control;
+ struct snd_sof_dai;
+ 
+ struct snd_sof_dai_config_data {
+ 	int dai_index;
+ 	int dai_data; /* contains DAI-specific information */
+ };
++>>>>>>> 85f7a8b6e1be (ASoC: SOF: Add a new dai_get_clk topology IPC op)
  
  /**
 - * struct sof_ipc_pcm_ops - IPC-specific PCM ops
 - * @hw_params: Function pointer for hw_params
 - * @hw_free: Function pointer for hw_free
 - * @trigger: Function pointer for trigger
 - * @dai_link_fixup: Function pointer for DAI link fixup
 + * struct ipc_tplg_control_ops - IPC-specific ops for topology kcontrol IO
   */
 -struct sof_ipc_pcm_ops {
 -	int (*hw_params)(struct snd_soc_component *component, struct snd_pcm_substream *substream,
 -			 struct snd_pcm_hw_params *params,
 -			 struct snd_sof_platform_stream_params *platform_params);
 -	int (*hw_free)(struct snd_soc_component *component, struct snd_pcm_substream *substream);
 -	int (*trigger)(struct snd_soc_component *component,  struct snd_pcm_substream *substream,
 -		       int cmd);
 -	int (*dai_link_fixup)(struct snd_soc_pcm_runtime *rtd, struct snd_pcm_hw_params *params);
 -};
 -
 -/**
 - * struct sof_ipc_tplg_control_ops - IPC-specific ops for topology kcontrol IO
 - */
 -struct sof_ipc_tplg_control_ops {
 +struct ipc_tplg_control_ops {
  	bool (*volume_put)(struct snd_sof_control *scontrol, struct snd_ctl_elem_value *ucontrol);
  	int (*volume_get)(struct snd_sof_control *scontrol, struct snd_ctl_elem_value *ucontrol);
  	bool (*switch_put)(struct snd_sof_control *scontrol, struct snd_ctl_elem_value *ucontrol);
@@@ -82,12 -115,31 +103,37 @@@ struct sof_ipc_tplg_widget_ops 
   * @token_list: List of all tokens supported by the IPC version. The size of the token_list
   *		array should be SOF_TOKEN_COUNT. The unused elements in the array will be
   *		initialized to 0.
++<<<<<<< HEAD
++=======
+  * @control_setup: Function pointer for setting up kcontrol IPC-specific data
+  * @control_free: Function pointer for freeing kcontrol IPC-specific data
+  * @pipeline_complete: Function pointer for pipeline complete IPC
+  * @widget_setup: Function pointer for setting up setup in the DSP
+  * @widget_free: Function pointer for freeing widget in the DSP
+  * @dai_config: Function pointer for sending DAI config IPC to the DSP
+  * @dai_get_clk: Function pointer for getting the DAI clock setting
+  * @set_up_all_pipelines: Function pointer for setting up all topology pipelines
+  * @tear_down_all_pipelines: Function pointer for tearing down all topology pipelines
++>>>>>>> 85f7a8b6e1be (ASoC: SOF: Add a new dai_get_clk topology IPC op)
   */
  struct sof_ipc_tplg_ops {
  	const struct sof_ipc_tplg_widget_ops *widget;
 -	const struct sof_ipc_tplg_control_ops *control;
 +	const struct ipc_tplg_control_ops *control;
  	int (*route_setup)(struct snd_sof_dev *sdev, struct snd_sof_route *sroute);
  	const struct sof_token_info *token_list;
++<<<<<<< HEAD
++=======
+ 	int (*control_setup)(struct snd_sof_dev *sdev, struct snd_sof_control *scontrol);
+ 	int (*control_free)(struct snd_sof_dev *sdev, struct snd_sof_control *scontrol);
+ 	int (*pipeline_complete)(struct snd_sof_dev *sdev, struct snd_sof_widget *swidget);
+ 	int (*widget_setup)(struct snd_sof_dev *sdev, struct snd_sof_widget *swidget);
+ 	int (*widget_free)(struct snd_sof_dev *sdev, struct snd_sof_widget *swidget);
+ 	int (*dai_config)(struct snd_sof_dev *sdev, struct snd_sof_widget *swidget,
+ 			  unsigned int flags, struct snd_sof_dai_config_data *data);
+ 	int (*dai_get_clk)(struct snd_sof_dev *sdev, struct snd_sof_dai *dai, int clk_type);
+ 	int (*set_up_all_pipelines)(struct snd_sof_dev *sdev, bool verify);
+ 	int (*tear_down_all_pipelines)(struct snd_sof_dev *sdev, bool verify);
++>>>>>>> 85f7a8b6e1be (ASoC: SOF: Add a new dai_get_clk topology IPC op)
  };
  
  /** struct snd_sof_tuple - Tuple info
* Unmerged path sound/soc/sof/ipc3-topology.c
* Unmerged path sound/soc/sof/ipc3-topology.c
diff --git a/sound/soc/sof/sof-audio.c b/sound/soc/sof/sof-audio.c
index 59867de987af..c3e3e2446855 100644
--- a/sound/soc/sof/sof-audio.c
+++ b/sound/soc/sof/sof-audio.c
@@ -915,40 +915,23 @@ struct snd_sof_dai *snd_sof_find_dai(struct snd_soc_component *scomp,
 	return NULL;
 }
 
-#define SOF_DAI_CLK_INTEL_SSP_MCLK	0
-#define SOF_DAI_CLK_INTEL_SSP_BCLK	1
-
 static int sof_dai_get_clk(struct snd_soc_pcm_runtime *rtd, int clk_type)
 {
 	struct snd_soc_component *component =
 		snd_soc_rtdcom_lookup(rtd, SOF_AUDIO_PCM_DRV_NAME);
 	struct snd_sof_dai *dai =
 		snd_sof_find_dai(component, (char *)rtd->dai_link->name);
-	struct sof_dai_private_data *private = dai->private;
+	struct snd_sof_dev *sdev = snd_soc_component_get_drvdata(component);
+	const struct sof_ipc_tplg_ops *tplg_ops = sdev->ipc->ops->tplg;
 
 	/* use the tplg configured mclk if existed */
-	if (!dai || !private || !private->dai_config)
+	if (!dai)
 		return 0;
 
-	switch (private->dai_config->type) {
-	case SOF_DAI_INTEL_SSP:
-		switch (clk_type) {
-		case SOF_DAI_CLK_INTEL_SSP_MCLK:
-			return private->dai_config->ssp.mclk_rate;
-		case SOF_DAI_CLK_INTEL_SSP_BCLK:
-			return private->dai_config->ssp.bclk_rate;
-		default:
-			dev_err(rtd->dev, "fail to get SSP clk %d rate\n",
-				clk_type);
-			return -EINVAL;
-		}
-		break;
-	default:
-		/* not yet implemented for platforms other than the above */
-		dev_err(rtd->dev, "DAI type %d not supported yet!\n",
-			private->dai_config->type);
-		return -EINVAL;
-	}
+	if (tplg_ops->dai_get_clk)
+		return tplg_ops->dai_get_clk(sdev, dai, clk_type);
+
+	return 0;
 }
 
 /*
* Unmerged path sound/soc/sof/sof-audio.h
