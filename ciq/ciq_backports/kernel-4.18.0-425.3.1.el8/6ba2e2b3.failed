net/mlx5e: Support accept action

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-425.3.1.el8
commit-author Vlad Buslov <vladbu@nvidia.com>
commit 6ba2e2b33df853b73c8494758a1da7067d144f7e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-425.3.1.el8/6ba2e2b3.failed

Support TC generic 'accept' action in mlx5 by introducing
MLX5_ESW_ATTR_FLAG_ACCEPT attribute flag. Flag has similar semantics to
existing MLX5_ESW_ATTR_FLAG_SLOW_PATH flag, however, dedicated flag is
required because existing 'slow path' flag can be flipped by tunneling
subsystem when neighbor changes state.

Introduce new helper function mlx5_esw_attr_flags_skip() to check whether
attribute flags for 'slow path' or 'accept' action are set and use it in
eswitch code instead of direct bit manipulation.

	Signed-off-by: Vlad Buslov <vladbu@nvidia.com>
	Reviewed-by: Paul Blakey <paulb@nvidia.com>
	Reviewed-by: Roi Dayan <roid@nvidia.com>
	Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
(cherry picked from commit 6ba2e2b33df853b73c8494758a1da7067d144f7e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
#	drivers/net/ethernet/mellanox/mlx5/core/eswitch_offloads_termtbl.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
index 60b9ee0e8add,d92ee2f37c22..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
@@@ -3940,14 -3810,10 +3940,21 @@@ static int parse_tc_fdb_actions(struct 
  
  	flow_action_for_each(i, act, flow_action) {
  		switch (act->id) {
++<<<<<<< HEAD
 +		case FLOW_ACTION_PTYPE:
 +			if (act->ptype != PACKET_HOST) {
 +				NL_SET_ERR_MSG_MOD(extack,
 +						   "skbedit ptype is only supported with type host");
 +				return -EOPNOTSUPP;
 +			}
 +
 +			ptype_host = true;
++=======
+ 		case FLOW_ACTION_ACCEPT:
+ 			action |= MLX5_FLOW_CONTEXT_ACTION_FWD_DEST |
+ 				MLX5_FLOW_CONTEXT_ACTION_COUNT;
+ 			attr->flags |= MLX5_ESW_ATTR_FLAG_ACCEPT;
++>>>>>>> 6ba2e2b33df8 (net/mlx5e: Support accept action)
  			break;
  		case FLOW_ACTION_DROP:
  			action |= MLX5_FLOW_CONTEXT_ACTION_DROP |
diff --cc drivers/net/ethernet/mellanox/mlx5/core/eswitch_offloads_termtbl.c
index 2fb3a984ba2d,879d78e46e47..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/eswitch_offloads_termtbl.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/eswitch_offloads_termtbl.c
@@@ -219,8 -219,8 +219,13 @@@ mlx5_eswitch_termtbl_required(struct ml
  
  	if (!MLX5_CAP_ESW_FLOWTABLE_FDB(esw->dev, termination_table) ||
  	    !MLX5_CAP_ESW_FLOWTABLE_FDB(esw->dev, ignore_flow_level) ||
++<<<<<<< HEAD
 +	    attr->flags & MLX5_ESW_ATTR_FLAG_SLOW_PATH ||
 +	    (!mlx5_eswitch_offload_is_uplink_port(esw, spec) && !esw_attr->int_port))
++=======
+ 	    mlx5_esw_attr_flags_skip(attr->flags) ||
+ 	    !mlx5_eswitch_offload_is_uplink_port(esw, spec))
++>>>>>>> 6ba2e2b33df8 (net/mlx5e: Support accept action)
  		return false;
  
  	/* push vlan on RX */
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/eswitch.h b/drivers/net/ethernet/mellanox/mlx5/core/eswitch.h
index eadb54a94616..9a219fde57b9 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/eswitch.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/eswitch.h
@@ -453,8 +453,16 @@ enum {
 	MLX5_ESW_ATTR_FLAG_NO_IN_PORT    = BIT(2),
 	MLX5_ESW_ATTR_FLAG_SRC_REWRITE   = BIT(3),
 	MLX5_ESW_ATTR_FLAG_SAMPLE        = BIT(4),
+	MLX5_ESW_ATTR_FLAG_ACCEPT        = BIT(5),
 };
 
+/* Returns true if any of the flags that require skipping further TC/NF processing are set. */
+static inline bool
+mlx5_esw_attr_flags_skip(u32 attr_flags)
+{
+	return attr_flags & (MLX5_ESW_ATTR_FLAG_SLOW_PATH | MLX5_ESW_ATTR_FLAG_ACCEPT);
+}
+
 struct mlx5_esw_flow_attr {
 	struct mlx5_eswitch_rep *in_rep;
 	struct mlx5_core_dev	*in_mdev;
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/eswitch_offloads.c b/drivers/net/ethernet/mellanox/mlx5/core/eswitch_offloads.c
index 2599eaee6da3..462533adb73f 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/eswitch_offloads.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/eswitch_offloads.c
@@ -470,7 +470,7 @@ esw_setup_dests(struct mlx5_flow_destination *dest,
 	} else if (attr->dest_ft) {
 		esw_setup_ft_dest(dest, flow_act, esw, attr, spec, *i);
 		(*i)++;
-	} else if (attr->flags & MLX5_ESW_ATTR_FLAG_SLOW_PATH) {
+	} else if (mlx5_esw_attr_flags_skip(attr->flags)) {
 		esw_setup_slow_path_dest(dest, flow_act, chains, *i);
 		(*i)++;
 	} else if (attr->dest_chain) {
@@ -497,7 +497,7 @@ esw_cleanup_dests(struct mlx5_eswitch *esw,
 
 	if (attr->dest_ft) {
 		esw_cleanup_decap_indir(esw, attr);
-	} else if (!(attr->flags & MLX5_ESW_ATTR_FLAG_SLOW_PATH)) {
+	} else if (!mlx5_esw_attr_flags_skip(attr->flags)) {
 		if (attr->dest_chain)
 			esw_cleanup_chain_dest(chains, attr->dest_chain, 1, 0);
 		else if (esw_is_indir_table(esw, attr))
@@ -708,7 +708,7 @@ __mlx5_eswitch_del_rule(struct mlx5_eswitch *esw,
 
 	mlx5_del_flow_rules(rule);
 
-	if (!(attr->flags & MLX5_ESW_ATTR_FLAG_SLOW_PATH)) {
+	if (!mlx5_esw_attr_flags_skip(attr->flags)) {
 		/* unref the term table */
 		for (i = 0; i < MLX5_MAX_FLOW_FWD_VPORTS; i++) {
 			if (esw_attr->dests[i].termtbl)
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/eswitch_offloads_termtbl.c
