efi: Introduce EFI_FIRMWARE_MANAGEMENT_CAPSULE_HEADER and corresponding structures

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-425.3.1.el8
commit-author Chen Yu <yu.c.chen@intel.com>
commit 1882de7fc56c2b0ea91dd9fd9922d434fc3feb15
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-425.3.1.el8/1882de7f.failed

Platform Firmware Runtime Update image starts with UEFI headers, and the
headers are defined in UEFI specification, but some of them have not been
defined in the kernel yet.

For example, the header layout of a capsule file looks like this:

EFI_CAPSULE_HEADER
EFI_FIRMWARE_MANAGEMENT_CAPSULE_HEADER
EFI_FIRMWARE_MANAGEMENT_CAPSULE_IMAGE_HEADER
EFI_FIRMWARE_IMAGE_AUTHENTICATION

These structures would be used by the Platform Firmware Runtime Update
driver to parse the format of capsule file to verify if the corresponding
version number is valid. In this way, if the user provides an invalid
capsule image, the kernel could be used as a guard to reject it, without
switching to the Management Mode (which might be costly).

EFI_CAPSULE_HEADER has been defined in the kernel, but the other
structures have not been defined yet, so do that. Besides,
EFI_FIRMWARE_MANAGEMENT_CAPSULE_HEADER and
EFI_FIRMWARE_MANAGEMENT_CAPSULE_IMAGE_HEADER are required to be packed
in the uefi specification. For this reason, use the __packed attribute
to indicate to the compiler that the entire structure can appear
misaligned in memory (as suggested by Ard) in case one of them follows
the other directly in a capsule header.

	Acked-by: Ard Biesheuvel <ardb@kernel.org>
	Signed-off-by: Chen Yu <yu.c.chen@intel.com>
	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
(cherry picked from commit 1882de7fc56c2b0ea91dd9fd9922d434fc3feb15)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/efi.h
diff --cc include/linux/efi.h
index 87f30fc4c480,80e970f7e6f8..000000000000
--- a/include/linux/efi.h
+++ b/include/linux/efi.h
@@@ -149,13 -148,50 +149,60 @@@ typedef struct 
  	u32 imagesize;
  } efi_capsule_header_t;
  
++<<<<<<< HEAD
 +struct efi_boot_memmap {
 +	efi_memory_desc_t	**map;
 +	unsigned long		*map_size;
 +	unsigned long		*desc_size;
 +	u32			*desc_ver;
 +	unsigned long		*key_ptr;
 +	unsigned long		*buff_size;
++=======
+ /* EFI_FIRMWARE_MANAGEMENT_CAPSULE_HEADER */
+ struct efi_manage_capsule_header {
+ 	u32 ver;
+ 	u16 emb_drv_cnt;
+ 	u16 payload_cnt;
+ 	/*
+ 	 * Variable-size array of the size given by the sum of
+ 	 * emb_drv_cnt and payload_cnt.
+ 	 */
+ 	u64 offset_list[];
+ } __packed;
+ 
+ /* EFI_FIRMWARE_MANAGEMENT_CAPSULE_IMAGE_HEADER */
+ struct efi_manage_capsule_image_header {
+ 	u32 ver;
+ 	efi_guid_t image_type_id;
+ 	u8 image_index;
+ 	u8 reserved_bytes[3];
+ 	u32 image_size;
+ 	u32 vendor_code_size;
+ 	/* hw_ins was introduced in version 2 */
+ 	u64 hw_ins;
+ 	/* capsule_support was introduced in version 3 */
+ 	u64 capsule_support;
+ } __packed;
+ 
+ /* WIN_CERTIFICATE */
+ struct win_cert {
+ 	u32 len;
+ 	u16 rev;
+ 	u16 cert_type;
+ };
+ 
+ /* WIN_CERTIFICATE_UEFI_GUID */
+ struct win_cert_uefi_guid {
+ 	struct win_cert	hdr;
+ 	efi_guid_t cert_type;
+ 	u8 cert_data[];
+ };
+ 
+ /* EFI_FIRMWARE_IMAGE_AUTHENTICATION */
+ struct efi_image_auth {
+ 	u64 mon_count;
+ 	struct win_cert_uefi_guid auth_info;
++>>>>>>> 1882de7fc56c (efi: Introduce EFI_FIRMWARE_MANAGEMENT_CAPSULE_HEADER and corresponding structures)
  };
  
  /*
* Unmerged path include/linux/efi.h
