ASoC: wm_adsp: Introduce cs_dsp logging macros

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-425.3.1.el8
commit-author Simon Trimmer <simont@opensource.cirrus.com>
commit 6ab1d0cc8470100cc8e0b478d94ff00b44df1625
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-425.3.1.el8/6ab1d0cc.failed

In preparation for moving the generic DSP support out of ASoC, add
some new logging macros that will be used from the generic code.

	Signed-off-by: Simon Trimmer <simont@opensource.cirrus.com>
	Signed-off-by: Charles Keepax <ckeepax@opensource.cirrus.com>
Link: https://lore.kernel.org/r/20210913160057.103842-7-simont@opensource.cirrus.com
	Signed-off-by: Mark Brown <broonie@kernel.org>
(cherry picked from commit 6ab1d0cc8470100cc8e0b478d94ff00b44df1625)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	sound/soc/codecs/wm_adsp.c
diff --cc sound/soc/codecs/wm_adsp.c
index c1b5ea3b5718,cfa8f1476c00..000000000000
--- a/sound/soc/codecs/wm_adsp.c
+++ b/sound/soc/codecs/wm_adsp.c
@@@ -895,33 -904,33 +904,33 @@@ static void wm_adsp2_show_fw_status(str
  		ADSP2_SCRATCH0, ADSP2_SCRATCH1, ADSP2_SCRATCH2, ADSP2_SCRATCH3,
  	};
  
 -	cs_dsp_read_fw_status(dsp, ARRAY_SIZE(offs), offs);
 +	wm_adsp_read_fw_status(dsp, ARRAY_SIZE(offs), offs);
  
- 	adsp_dbg(dsp, "FW SCRATCH 0:0x%x 1:0x%x 2:0x%x 3:0x%x\n",
- 		 offs[0], offs[1], offs[2], offs[3]);
+ 	cs_dsp_dbg(dsp, "FW SCRATCH 0:0x%x 1:0x%x 2:0x%x 3:0x%x\n",
+ 		   offs[0], offs[1], offs[2], offs[3]);
  }
  
 -static void cs_dsp_adsp2v2_show_fw_status(struct wm_adsp *dsp)
 +static void wm_adsp2v2_show_fw_status(struct wm_adsp *dsp)
  {
  	unsigned int offs[] = { ADSP2V2_SCRATCH0_1, ADSP2V2_SCRATCH2_3 };
  
 -	cs_dsp_read_fw_status(dsp, ARRAY_SIZE(offs), offs);
 +	wm_adsp_read_fw_status(dsp, ARRAY_SIZE(offs), offs);
  
- 	adsp_dbg(dsp, "FW SCRATCH 0:0x%x 1:0x%x 2:0x%x 3:0x%x\n",
- 		 offs[0] & 0xFFFF, offs[0] >> 16,
- 		 offs[1] & 0xFFFF, offs[1] >> 16);
+ 	cs_dsp_dbg(dsp, "FW SCRATCH 0:0x%x 1:0x%x 2:0x%x 3:0x%x\n",
+ 		   offs[0] & 0xFFFF, offs[0] >> 16,
+ 		   offs[1] & 0xFFFF, offs[1] >> 16);
  }
  
 -static void cs_dsp_halo_show_fw_status(struct wm_adsp *dsp)
 +static void wm_halo_show_fw_status(struct wm_adsp *dsp)
  {
  	unsigned int offs[] = {
  		HALO_SCRATCH1, HALO_SCRATCH2, HALO_SCRATCH3, HALO_SCRATCH4,
  	};
  
 -	cs_dsp_read_fw_status(dsp, ARRAY_SIZE(offs), offs);
 +	wm_adsp_read_fw_status(dsp, ARRAY_SIZE(offs), offs);
  
- 	adsp_dbg(dsp, "FW SCRATCH 0:0x%x 1:0x%x 2:0x%x 3:0x%x\n",
- 		 offs[0], offs[1], offs[2], offs[3]);
+ 	cs_dsp_dbg(dsp, "FW SCRATCH 0:0x%x 1:0x%x 2:0x%x 3:0x%x\n",
+ 		   offs[0], offs[1], offs[2], offs[3]);
  }
  
  static inline struct wm_coeff_ctl *bytes_ext_to_ctl(struct soc_bytes_ext *ext)
@@@ -929,16 -938,16 +938,16 @@@
  	return container_of(ext, struct wm_coeff_ctl, bytes_ext);
  }
  
 -static int cs_dsp_coeff_base_reg(struct wm_coeff_ctl *ctl, unsigned int *reg)
 +static int wm_coeff_base_reg(struct wm_coeff_ctl *ctl, unsigned int *reg)
  {
 -	const struct cs_dsp_alg_region *alg_region = &ctl->alg_region;
 +	const struct wm_adsp_alg_region *alg_region = &ctl->alg_region;
  	struct wm_adsp *dsp = ctl->dsp;
 -	const struct cs_dsp_region *mem;
 +	const struct wm_adsp_region *mem;
  
 -	mem = cs_dsp_find_region(dsp, alg_region->type);
 +	mem = wm_adsp_find_region(dsp, alg_region->type);
  	if (!mem) {
- 		adsp_err(dsp, "No base for region %x\n",
- 			 alg_region->type);
+ 		cs_dsp_err(dsp, "No base for region %x\n",
+ 			   alg_region->type);
  		return -EINVAL;
  	}
  
@@@ -983,9 -992,9 +992,15 @@@ static int wm_coeff_write_acked_control
  	if (ret)
  		return ret;
  
++<<<<<<< HEAD
 +	adsp_dbg(dsp, "Sending 0x%x to acked control alg 0x%x %s:0x%x\n",
 +		 event_id, ctl->alg_region.alg,
 +		 wm_adsp_mem_region_name(ctl->alg_region.type), ctl->offset);
++=======
+ 	cs_dsp_dbg(dsp, "Sending 0x%x to acked control alg 0x%x %s:0x%x\n",
+ 		   event_id, ctl->alg_region.alg,
+ 		   cs_dsp_mem_region_name(ctl->alg_region.type), ctl->offset);
++>>>>>>> 6ab1d0cc8470 (ASoC: wm_adsp: Introduce cs_dsp logging macros)
  
  	ret = regmap_raw_write(dsp->regmap, reg, &val, sizeof(val));
  	if (ret) {
@@@ -1023,10 -1032,10 +1038,17 @@@
  		}
  	}
  
++<<<<<<< HEAD
 +	adsp_warn(dsp, "Acked control @0x%x alg:0x%x %s:0x%x timed out\n",
 +		  reg, ctl->alg_region.alg,
 +		  wm_adsp_mem_region_name(ctl->alg_region.type),
 +		  ctl->offset);
++=======
+ 	cs_dsp_warn(dsp, "Acked control @0x%x alg:0x%x %s:0x%x timed out\n",
+ 		    reg, ctl->alg_region.alg,
+ 		    cs_dsp_mem_region_name(ctl->alg_region.type),
+ 		    ctl->offset);
++>>>>>>> 6ab1d0cc8470 (ASoC: wm_adsp: Introduce cs_dsp logging macros)
  
  	return -ETIMEDOUT;
  }
@@@ -1379,11 -1388,11 +1401,11 @@@ static void wm_adsp_signal_event_contro
  		if (!ctl->enabled)
  			continue;
  
 -		ret = cs_dsp_coeff_write_acked_control(ctl, event);
 +		ret = wm_coeff_write_acked_control(ctl, event);
  		if (ret)
- 			adsp_warn(dsp,
- 				  "Failed to send 0x%x event to alg 0x%x (%d)\n",
- 				  event, ctl->alg_region.alg, ret);
+ 			cs_dsp_warn(dsp,
+ 				    "Failed to send 0x%x event to alg 0x%x (%d)\n",
+ 				    event, ctl->alg_region.alg, ret);
  	}
  }
  
@@@ -1430,9 -1439,9 +1452,9 @@@ static int wm_adsp_create_control(struc
  		}
  	}
  
 -	region_name = cs_dsp_mem_region_name(alg_region->type);
 +	region_name = wm_adsp_mem_region_name(alg_region->type);
  	if (!region_name) {
- 		adsp_err(dsp, "Unknown region type: %d\n", alg_region->type);
+ 		cs_dsp_err(dsp, "Unknown region type: %d\n", alg_region->type);
  		return -EINVAL;
  	}
  
@@@ -1608,13 -1617,13 +1630,13 @@@ static inline void wm_coeff_parse_alg(s
  		break;
  	}
  
- 	adsp_dbg(dsp, "Algorithm ID: %#x\n", blk->id);
- 	adsp_dbg(dsp, "Algorithm name: %.*s\n", blk->name_len, blk->name);
- 	adsp_dbg(dsp, "# of coefficient descriptors: %#x\n", blk->ncoeff);
+ 	cs_dsp_dbg(dsp, "Algorithm ID: %#x\n", blk->id);
+ 	cs_dsp_dbg(dsp, "Algorithm name: %.*s\n", blk->name_len, blk->name);
+ 	cs_dsp_dbg(dsp, "# of coefficient descriptors: %#x\n", blk->ncoeff);
  }
  
 -static inline void cs_dsp_coeff_parse_coeff(struct wm_adsp *dsp, const u8 **data,
 -					    struct cs_dsp_coeff_parsed_coeff *blk)
 +static inline void wm_coeff_parse_coeff(struct wm_adsp *dsp, const u8 **data,
 +					struct wm_coeff_parsed_coeff *blk)
  {
  	const struct wmfw_adsp_coeff_data *raw;
  	const u8 *tmp;
@@@ -1651,18 -1660,18 +1673,18 @@@
  		break;
  	}
  
- 	adsp_dbg(dsp, "\tCoefficient type: %#x\n", blk->mem_type);
- 	adsp_dbg(dsp, "\tCoefficient offset: %#x\n", blk->offset);
- 	adsp_dbg(dsp, "\tCoefficient name: %.*s\n", blk->name_len, blk->name);
- 	adsp_dbg(dsp, "\tCoefficient flags: %#x\n", blk->flags);
- 	adsp_dbg(dsp, "\tALSA control type: %#x\n", blk->ctl_type);
- 	adsp_dbg(dsp, "\tALSA control len: %#x\n", blk->len);
+ 	cs_dsp_dbg(dsp, "\tCoefficient type: %#x\n", blk->mem_type);
+ 	cs_dsp_dbg(dsp, "\tCoefficient offset: %#x\n", blk->offset);
+ 	cs_dsp_dbg(dsp, "\tCoefficient name: %.*s\n", blk->name_len, blk->name);
+ 	cs_dsp_dbg(dsp, "\tCoefficient flags: %#x\n", blk->flags);
+ 	cs_dsp_dbg(dsp, "\tALSA control type: %#x\n", blk->ctl_type);
+ 	cs_dsp_dbg(dsp, "\tALSA control len: %#x\n", blk->len);
  }
  
 -static int cs_dsp_check_coeff_flags(struct wm_adsp *dsp,
 -				    const struct cs_dsp_coeff_parsed_coeff *coeff_blk,
 -				    unsigned int f_required,
 -				    unsigned int f_illegal)
 +static int wm_adsp_check_coeff_flags(struct wm_adsp *dsp,
 +				const struct wm_coeff_parsed_coeff *coeff_blk,
 +				unsigned int f_required,
 +				unsigned int f_illegal)
  {
  	if ((coeff_blk->flags & f_illegal) ||
  	    ((coeff_blk->flags & f_required) != f_required)) {
@@@ -1730,16 -1739,16 +1752,16 @@@ static int wm_adsp_parse_coeff(struct w
  		alg_region.type = coeff_blk.mem_type;
  		alg_region.alg = alg_blk.id;
  
 -		ret = cs_dsp_create_control(dsp, &alg_region,
 -					    coeff_blk.offset,
 -					    coeff_blk.len,
 -					    coeff_blk.name,
 -					    coeff_blk.name_len,
 -					    coeff_blk.flags,
 -					    coeff_blk.ctl_type);
 +		ret = wm_adsp_create_control(dsp, &alg_region,
 +					     coeff_blk.offset,
 +					     coeff_blk.len,
 +					     coeff_blk.name,
 +					     coeff_blk.name_len,
 +					     coeff_blk.flags,
 +					     coeff_blk.ctl_type);
  		if (ret < 0)
- 			adsp_err(dsp, "Failed to create control: %.*s, %d\n",
- 				 coeff_blk.name_len, coeff_blk.name, ret);
+ 			cs_dsp_err(dsp, "Failed to create control: %.*s, %d\n",
+ 				   coeff_blk.name_len, coeff_blk.name, ret);
  	}
  
  	return 0;
@@@ -1916,9 -1925,9 +1938,9 @@@ static int wm_adsp_load(struct wm_adsp 
  		case WMFW_HALO_PM_PACKED:
  		case WMFW_HALO_XM_PACKED:
  		case WMFW_HALO_YM_PACKED:
 -			mem = cs_dsp_find_region(dsp, type);
 +			mem = wm_adsp_find_region(dsp, type);
  			if (!mem) {
- 				adsp_err(dsp, "No region of type: %x\n", type);
+ 				cs_dsp_err(dsp, "No region of type: %x\n", type);
  				ret = -EINVAL;
  				goto out_fw;
  			}
@@@ -1955,11 -1964,11 +1977,11 @@@
  		}
  
  		if (reg) {
 -			buf = cs_dsp_buf_alloc(region->data,
 -					       le32_to_cpu(region->len),
 -					       &buf_list);
 +			buf = wm_adsp_buf_alloc(region->data,
 +						le32_to_cpu(region->len),
 +						&buf_list);
  			if (!buf) {
- 				adsp_err(dsp, "Out of memory\n");
+ 				cs_dsp_err(dsp, "Out of memory\n");
  				ret = -ENOMEM;
  				goto out_fw;
  			}
@@@ -1987,10 -1996,10 +2009,10 @@@
  	}
  
  	if (pos > firmware->size)
- 		adsp_warn(dsp, "%s.%d: %zu bytes at end of file\n",
- 			  file, regions, pos - firmware->size);
+ 		cs_dsp_warn(dsp, "%s.%d: %zu bytes at end of file\n",
+ 			    file, regions, pos - firmware->size);
  
 -	cs_dsp_debugfs_save_wmfwname(dsp, file);
 +	wm_adsp_debugfs_save_wmfwname(dsp, file);
  
  out_fw:
  	regmap_async_complete(regmap);
@@@ -2207,30 -2216,30 +2229,30 @@@ static void wmfw_parse_id_header(struc
  	dsp->fw_id = be32_to_cpu(fw->id);
  	dsp->fw_id_version = be32_to_cpu(fw->ver);
  
- 	adsp_info(dsp, "Firmware: %x v%d.%d.%d, %d algorithms\n",
- 		  dsp->fw_id, (dsp->fw_id_version & 0xff0000) >> 16,
- 		  (dsp->fw_id_version & 0xff00) >> 8, dsp->fw_id_version & 0xff,
- 		  nalgs);
+ 	cs_dsp_info(dsp, "Firmware: %x v%d.%d.%d, %d algorithms\n",
+ 		    dsp->fw_id, (dsp->fw_id_version & 0xff0000) >> 16,
+ 		    (dsp->fw_id_version & 0xff00) >> 8, dsp->fw_id_version & 0xff,
+ 		    nalgs);
  }
  
 -static void cs_dsp_parse_wmfw_v3_id_header(struct wm_adsp *dsp,
 -					   struct wmfw_v3_id_hdr *fw, int nalgs)
 +static void wmfw_v3_parse_id_header(struct wm_adsp *dsp,
 +				    struct wmfw_v3_id_hdr *fw, int nalgs)
  {
  	dsp->fw_id = be32_to_cpu(fw->id);
  	dsp->fw_id_version = be32_to_cpu(fw->ver);
  	dsp->fw_vendor_id = be32_to_cpu(fw->vendor_id);
  
- 	adsp_info(dsp, "Firmware: %x vendor: 0x%x v%d.%d.%d, %d algorithms\n",
- 		  dsp->fw_id, dsp->fw_vendor_id,
- 		  (dsp->fw_id_version & 0xff0000) >> 16,
- 		  (dsp->fw_id_version & 0xff00) >> 8, dsp->fw_id_version & 0xff,
- 		  nalgs);
+ 	cs_dsp_info(dsp, "Firmware: %x vendor: 0x%x v%d.%d.%d, %d algorithms\n",
+ 		    dsp->fw_id, dsp->fw_vendor_id,
+ 		    (dsp->fw_id_version & 0xff0000) >> 16,
+ 		    (dsp->fw_id_version & 0xff00) >> 8, dsp->fw_id_version & 0xff,
+ 		    nalgs);
  }
  
 -static int cs_dsp_create_regions(struct wm_adsp *dsp, __be32 id, int nregions,
 -				 const int *type, __be32 *base)
 +static int wm_adsp_create_regions(struct wm_adsp *dsp, __be32 id, int nregions,
 +				const int *type, __be32 *base)
  {
 -	struct cs_dsp_alg_region *alg_region;
 +	struct wm_adsp_alg_region *alg_region;
  	int i;
  
  	for (i = 0; i < nregions; i++) {
@@@ -2287,17 -2296,17 +2309,17 @@@ static int wm_adsp1_setup_algs(struct w
  		return PTR_ERR(adsp1_alg);
  
  	for (i = 0; i < n_algs; i++) {
- 		adsp_info(dsp, "%d: ID %x v%d.%d.%d DM@%x ZM@%x\n",
- 			  i, be32_to_cpu(adsp1_alg[i].alg.id),
- 			  (be32_to_cpu(adsp1_alg[i].alg.ver) & 0xff0000) >> 16,
- 			  (be32_to_cpu(adsp1_alg[i].alg.ver) & 0xff00) >> 8,
- 			  be32_to_cpu(adsp1_alg[i].alg.ver) & 0xff,
- 			  be32_to_cpu(adsp1_alg[i].dm),
- 			  be32_to_cpu(adsp1_alg[i].zm));
+ 		cs_dsp_info(dsp, "%d: ID %x v%d.%d.%d DM@%x ZM@%x\n",
+ 			    i, be32_to_cpu(adsp1_alg[i].alg.id),
+ 			    (be32_to_cpu(adsp1_alg[i].alg.ver) & 0xff0000) >> 16,
+ 			    (be32_to_cpu(adsp1_alg[i].alg.ver) & 0xff00) >> 8,
+ 			    be32_to_cpu(adsp1_alg[i].alg.ver) & 0xff,
+ 			    be32_to_cpu(adsp1_alg[i].dm),
+ 			    be32_to_cpu(adsp1_alg[i].zm));
  
 -		alg_region = cs_dsp_create_region(dsp, WMFW_ADSP1_DM,
 -						  adsp1_alg[i].alg.id,
 -						  adsp1_alg[i].dm);
 +		alg_region = wm_adsp_create_region(dsp, WMFW_ADSP1_DM,
 +						   adsp1_alg[i].alg.id,
 +						   adsp1_alg[i].dm);
  		if (IS_ERR(alg_region)) {
  			ret = PTR_ERR(alg_region);
  			goto out;
@@@ -2307,12 -2316,12 +2329,12 @@@
  				len = be32_to_cpu(adsp1_alg[i + 1].dm);
  				len -= be32_to_cpu(adsp1_alg[i].dm);
  				len *= 4;
 -				cs_dsp_create_control(dsp, alg_region, 0,
 -						      len, NULL, 0, 0,
 -						      WMFW_CTL_TYPE_BYTES);
 +				wm_adsp_create_control(dsp, alg_region, 0,
 +						     len, NULL, 0, 0,
 +						     WMFW_CTL_TYPE_BYTES);
  			} else {
- 				adsp_warn(dsp, "Missing length info for region DM with ID %x\n",
- 					  be32_to_cpu(adsp1_alg[i].alg.id));
+ 				cs_dsp_warn(dsp, "Missing length info for region DM with ID %x\n",
+ 					    be32_to_cpu(adsp1_alg[i].alg.id));
  			}
  		}
  
@@@ -2328,12 -2337,12 +2350,12 @@@
  				len = be32_to_cpu(adsp1_alg[i + 1].zm);
  				len -= be32_to_cpu(adsp1_alg[i].zm);
  				len *= 4;
 -				cs_dsp_create_control(dsp, alg_region, 0,
 -						      len, NULL, 0, 0,
 -						      WMFW_CTL_TYPE_BYTES);
 +				wm_adsp_create_control(dsp, alg_region, 0,
 +						     len, NULL, 0, 0,
 +						     WMFW_CTL_TYPE_BYTES);
  			} else {
- 				adsp_warn(dsp, "Missing length info for region ZM with ID %x\n",
- 					  be32_to_cpu(adsp1_alg[i].alg.id));
+ 				cs_dsp_warn(dsp, "Missing length info for region ZM with ID %x\n",
+ 					    be32_to_cpu(adsp1_alg[i].alg.id));
  			}
  		}
  	}
@@@ -2393,19 -2402,19 +2415,19 @@@ static int wm_adsp2_setup_algs(struct w
  		return PTR_ERR(adsp2_alg);
  
  	for (i = 0; i < n_algs; i++) {
- 		adsp_info(dsp,
- 			  "%d: ID %x v%d.%d.%d XM@%x YM@%x ZM@%x\n",
- 			  i, be32_to_cpu(adsp2_alg[i].alg.id),
- 			  (be32_to_cpu(adsp2_alg[i].alg.ver) & 0xff0000) >> 16,
- 			  (be32_to_cpu(adsp2_alg[i].alg.ver) & 0xff00) >> 8,
- 			  be32_to_cpu(adsp2_alg[i].alg.ver) & 0xff,
- 			  be32_to_cpu(adsp2_alg[i].xm),
- 			  be32_to_cpu(adsp2_alg[i].ym),
- 			  be32_to_cpu(adsp2_alg[i].zm));
+ 		cs_dsp_info(dsp,
+ 			    "%d: ID %x v%d.%d.%d XM@%x YM@%x ZM@%x\n",
+ 			    i, be32_to_cpu(adsp2_alg[i].alg.id),
+ 			    (be32_to_cpu(adsp2_alg[i].alg.ver) & 0xff0000) >> 16,
+ 			    (be32_to_cpu(adsp2_alg[i].alg.ver) & 0xff00) >> 8,
+ 			    be32_to_cpu(adsp2_alg[i].alg.ver) & 0xff,
+ 			    be32_to_cpu(adsp2_alg[i].xm),
+ 			    be32_to_cpu(adsp2_alg[i].ym),
+ 			    be32_to_cpu(adsp2_alg[i].zm));
  
 -		alg_region = cs_dsp_create_region(dsp, WMFW_ADSP2_XM,
 -						  adsp2_alg[i].alg.id,
 -						  adsp2_alg[i].xm);
 +		alg_region = wm_adsp_create_region(dsp, WMFW_ADSP2_XM,
 +						   adsp2_alg[i].alg.id,
 +						   adsp2_alg[i].xm);
  		if (IS_ERR(alg_region)) {
  			ret = PTR_ERR(alg_region);
  			goto out;
@@@ -2415,12 -2424,12 +2437,12 @@@
  				len = be32_to_cpu(adsp2_alg[i + 1].xm);
  				len -= be32_to_cpu(adsp2_alg[i].xm);
  				len *= 4;
 -				cs_dsp_create_control(dsp, alg_region, 0,
 -						      len, NULL, 0, 0,
 -						      WMFW_CTL_TYPE_BYTES);
 +				wm_adsp_create_control(dsp, alg_region, 0,
 +						     len, NULL, 0, 0,
 +						     WMFW_CTL_TYPE_BYTES);
  			} else {
- 				adsp_warn(dsp, "Missing length info for region XM with ID %x\n",
- 					  be32_to_cpu(adsp2_alg[i].alg.id));
+ 				cs_dsp_warn(dsp, "Missing length info for region XM with ID %x\n",
+ 					    be32_to_cpu(adsp2_alg[i].alg.id));
  			}
  		}
  
@@@ -2436,12 -2445,12 +2458,12 @@@
  				len = be32_to_cpu(adsp2_alg[i + 1].ym);
  				len -= be32_to_cpu(adsp2_alg[i].ym);
  				len *= 4;
 -				cs_dsp_create_control(dsp, alg_region, 0,
 -						      len, NULL, 0, 0,
 -						      WMFW_CTL_TYPE_BYTES);
 +				wm_adsp_create_control(dsp, alg_region, 0,
 +						     len, NULL, 0, 0,
 +						     WMFW_CTL_TYPE_BYTES);
  			} else {
- 				adsp_warn(dsp, "Missing length info for region YM with ID %x\n",
- 					  be32_to_cpu(adsp2_alg[i].alg.id));
+ 				cs_dsp_warn(dsp, "Missing length info for region YM with ID %x\n",
+ 					    be32_to_cpu(adsp2_alg[i].alg.id));
  			}
  		}
  
@@@ -2457,12 -2466,12 +2479,12 @@@
  				len = be32_to_cpu(adsp2_alg[i + 1].zm);
  				len -= be32_to_cpu(adsp2_alg[i].zm);
  				len *= 4;
 -				cs_dsp_create_control(dsp, alg_region, 0,
 -						      len, NULL, 0, 0,
 -						      WMFW_CTL_TYPE_BYTES);
 +				wm_adsp_create_control(dsp, alg_region, 0,
 +						     len, NULL, 0, 0,
 +						     WMFW_CTL_TYPE_BYTES);
  			} else {
- 				adsp_warn(dsp, "Missing length info for region ZM with ID %x\n",
- 					  be32_to_cpu(adsp2_alg[i].alg.id));
+ 				cs_dsp_warn(dsp, "Missing length info for region ZM with ID %x\n",
+ 					    be32_to_cpu(adsp2_alg[i].alg.id));
  			}
  		}
  	}
@@@ -2523,18 -2532,18 +2545,18 @@@ static int wm_halo_setup_algs(struct wm
  		return PTR_ERR(halo_alg);
  
  	for (i = 0; i < n_algs; i++) {
- 		adsp_info(dsp,
- 			  "%d: ID %x v%d.%d.%d XM@%x YM@%x\n",
- 			  i, be32_to_cpu(halo_alg[i].alg.id),
- 			  (be32_to_cpu(halo_alg[i].alg.ver) & 0xff0000) >> 16,
- 			  (be32_to_cpu(halo_alg[i].alg.ver) & 0xff00) >> 8,
- 			  be32_to_cpu(halo_alg[i].alg.ver) & 0xff,
- 			  be32_to_cpu(halo_alg[i].xm_base),
- 			  be32_to_cpu(halo_alg[i].ym_base));
+ 		cs_dsp_info(dsp,
+ 			    "%d: ID %x v%d.%d.%d XM@%x YM@%x\n",
+ 			    i, be32_to_cpu(halo_alg[i].alg.id),
+ 			    (be32_to_cpu(halo_alg[i].alg.ver) & 0xff0000) >> 16,
+ 			    (be32_to_cpu(halo_alg[i].alg.ver) & 0xff00) >> 8,
+ 			    be32_to_cpu(halo_alg[i].alg.ver) & 0xff,
+ 			    be32_to_cpu(halo_alg[i].xm_base),
+ 			    be32_to_cpu(halo_alg[i].ym_base));
  
 -		ret = cs_dsp_halo_create_regions(dsp, halo_alg[i].alg.id,
 -						 halo_alg[i].xm_base,
 -						 halo_alg[i].ym_base);
 +		ret = wm_halo_create_regions(dsp, halo_alg[i].alg.id,
 +					     halo_alg[i].xm_base,
 +					     halo_alg[i].ym_base);
  		if (ret)
  			goto out;
  	}
@@@ -2634,9 -2643,9 +2656,9 @@@ static int wm_adsp_load_coeff(struct wm
  			if (le32_to_cpu(blk->id) == dsp->fw_id &&
  			    offset == 0) {
  				region_name = "global coefficients";
 -				mem = cs_dsp_find_region(dsp, type);
 +				mem = wm_adsp_find_region(dsp, type);
  				if (!mem) {
- 					adsp_err(dsp, "No ZM\n");
+ 					cs_dsp_err(dsp, "No ZM\n");
  					break;
  				}
  				reg = dsp->ops->region_to_reg(mem, 0);
@@@ -2654,13 -2663,13 +2676,13 @@@
  		case WMFW_HALO_XM_PACKED:
  		case WMFW_HALO_YM_PACKED:
  		case WMFW_HALO_PM_PACKED:
- 			adsp_dbg(dsp, "%s.%d: %d bytes in %x for %x\n",
- 				 file, blocks, le32_to_cpu(blk->len),
- 				 type, le32_to_cpu(blk->id));
+ 			cs_dsp_dbg(dsp, "%s.%d: %d bytes in %x for %x\n",
+ 				   file, blocks, le32_to_cpu(blk->len),
+ 				   type, le32_to_cpu(blk->id));
  
 -			mem = cs_dsp_find_region(dsp, type);
 +			mem = wm_adsp_find_region(dsp, type);
  			if (!mem) {
- 				adsp_err(dsp, "No base for region %x\n", type);
+ 				cs_dsp_err(dsp, "No base for region %x\n", type);
  				break;
  			}
  
@@@ -2694,11 -2703,11 +2716,11 @@@
  				goto out_fw;
  			}
  
 -			buf = cs_dsp_buf_alloc(blk->data,
 -					       le32_to_cpu(blk->len),
 -					       &buf_list);
 +			buf = wm_adsp_buf_alloc(blk->data,
 +						le32_to_cpu(blk->len),
 +						&buf_list);
  			if (!buf) {
- 				adsp_err(dsp, "Out of memory\n");
+ 				cs_dsp_err(dsp, "Out of memory\n");
  				ret = -ENOMEM;
  				goto out_fw;
  			}
@@@ -2721,13 -2730,13 +2743,13 @@@
  
  	ret = regmap_async_complete(regmap);
  	if (ret != 0)
- 		adsp_err(dsp, "Failed to complete async write: %d\n", ret);
+ 		cs_dsp_err(dsp, "Failed to complete async write: %d\n", ret);
  
  	if (pos > firmware->size)
- 		adsp_warn(dsp, "%s.%d: %zu bytes at end of file\n",
- 			  file, blocks, pos - firmware->size);
+ 		cs_dsp_warn(dsp, "%s.%d: %zu bytes at end of file\n",
+ 			    file, blocks, pos - firmware->size);
  
 -	cs_dsp_debugfs_save_binname(dsp, file);
 +	wm_adsp_debugfs_save_binname(dsp, file);
  
  out_fw:
  	regmap_async_complete(regmap);
* Unmerged path sound/soc/codecs/wm_adsp.c
