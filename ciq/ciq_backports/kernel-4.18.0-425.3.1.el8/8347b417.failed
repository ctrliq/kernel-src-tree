of: fdt: Aggregate the processing of "linux,usable-memory-range"

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-425.3.1.el8
commit-author Zhen Lei <thunder.leizhen@huawei.com>
commit 8347b41748c3019157312fbe7f8a6792ae396eb7
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-425.3.1.el8/8347b417.failed

Currently, we parse the "linux,usable-memory-range" property in
early_init_dt_scan_chosen(), to obtain the specified memory range of the
crash kernel. We then reserve the required memory after
early_init_dt_scan_memory() has identified all available physical memory.
Because the two pieces of code are separated far, the readability and
maintainability are reduced. So bring them together.

	Suggested-by: Rob Herring <robh@kernel.org>
	Signed-off-by: Zhen Lei <thunder.leizhen@huawei.com>
(change the prototype of early_init_dt_check_for_usable_mem_range(), in
order to use it outside)
	Signed-off-by: Pingfan Liu <kernelfans@gmail.com>
	Tested-by: Dave Kleikamp <dave.kleikamp@oracle.com>
	Acked-by: John Donnelly <john.p.donnelly@oracle.com>
	Reviewed-by: Rob Herring <robh@kernel.org>
	Cc: Catalin Marinas <catalin.marinas@arm.com>
	Cc: Will Deacon <will@kernel.org>
	Cc: linux-arm-kernel@lists.infradead.org
To: devicetree@vger.kernel.org
To: linux-efi@vger.kernel.org
	Signed-off-by: Rob Herring <robh@kernel.org>
(cherry picked from commit 8347b41748c3019157312fbe7f8a6792ae396eb7)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/of/fdt.c
diff --cc drivers/of/fdt.c
index 3a485143751f,5a238a933eb2..000000000000
--- a/drivers/of/fdt.c
+++ b/drivers/of/fdt.c
@@@ -924,15 -933,69 +924,67 @@@ static void __init early_init_dt_check_
  	end = of_read_number(prop, len/4);
  
  	__early_init_dt_declare_initrd(start, end);
 -	phys_initrd_start = start;
 -	phys_initrd_size = end - start;
  
 -	pr_debug("initrd_start=0x%llx  initrd_end=0x%llx\n", start, end);
 +	pr_debug("initrd_start=0x%llx  initrd_end=0x%llx\n",
 +		 (unsigned long long)start, (unsigned long long)end);
  }
 -
 -/**
 - * early_init_dt_check_for_elfcorehdr - Decode elfcorehdr location from flat
 - * tree
 - * @node: reference to node containing elfcorehdr location ('chosen')
 - */
 -static void __init early_init_dt_check_for_elfcorehdr(unsigned long node)
 +#else
 +static inline void early_init_dt_check_for_initrd(unsigned long node)
  {
++<<<<<<< HEAD
++=======
+ 	const __be32 *prop;
+ 	int len;
+ 
+ 	if (!IS_ENABLED(CONFIG_CRASH_DUMP))
+ 		return;
+ 
+ 	pr_debug("Looking for elfcorehdr property... ");
+ 
+ 	prop = of_get_flat_dt_prop(node, "linux,elfcorehdr", &len);
+ 	if (!prop || (len < (dt_root_addr_cells + dt_root_size_cells)))
+ 		return;
+ 
+ 	elfcorehdr_addr = dt_mem_next_cell(dt_root_addr_cells, &prop);
+ 	elfcorehdr_size = dt_mem_next_cell(dt_root_size_cells, &prop);
+ 
+ 	pr_debug("elfcorehdr_start=0x%llx elfcorehdr_size=0x%llx\n",
+ 		 elfcorehdr_addr, elfcorehdr_size);
+ }
+ 
+ static unsigned long chosen_node_offset = -FDT_ERR_NOTFOUND;
+ 
+ /**
+  * early_init_dt_check_for_usable_mem_range - Decode usable memory range
+  * location from flat tree
+  */
+ static void __init early_init_dt_check_for_usable_mem_range(void)
+ {
+ 	const __be32 *prop;
+ 	int len;
+ 	phys_addr_t cap_mem_addr;
+ 	phys_addr_t cap_mem_size;
+ 	unsigned long node = chosen_node_offset;
+ 
+ 	if ((long)node < 0)
+ 		return;
+ 
+ 	pr_debug("Looking for usable-memory-range property... ");
+ 
+ 	prop = of_get_flat_dt_prop(node, "linux,usable-memory-range", &len);
+ 	if (!prop || (len < (dt_root_addr_cells + dt_root_size_cells)))
+ 		return;
+ 
+ 	cap_mem_addr = dt_mem_next_cell(dt_root_addr_cells, &prop);
+ 	cap_mem_size = dt_mem_next_cell(dt_root_size_cells, &prop);
+ 
+ 	pr_debug("cap_mem_start=%pa cap_mem_size=%pa\n", &cap_mem_addr,
+ 		 &cap_mem_size);
+ 
+ 	memblock_cap_memory_range(cap_mem_addr, cap_mem_size);
++>>>>>>> 8347b41748c3 (of: fdt: Aggregate the processing of "linux,usable-memory-range")
  }
 +#endif /* CONFIG_BLK_DEV_INITRD */
  
  #ifdef CONFIG_SERIAL_EARLYCON
  
@@@ -1090,7 -1143,10 +1142,13 @@@ int __init early_init_dt_scan_chosen(un
  	    (strcmp(uname, "chosen") != 0 && strcmp(uname, "chosen@0") != 0))
  		return 0;
  
+ 	chosen_node_offset = node;
+ 
  	early_init_dt_check_for_initrd(node);
++<<<<<<< HEAD
++=======
+ 	early_init_dt_check_for_elfcorehdr(node);
++>>>>>>> 8347b41748c3 (of: fdt: Aggregate the processing of "linux,usable-memory-range")
  
  	/* Retrieve command line */
  	p = of_get_flat_dt_prop(node, "bootargs", &l);
@@@ -1220,6 -1280,9 +1278,12 @@@ void __init early_init_dt_scan_nodes(vo
  
  	/* Setup memory, calling early_init_dt_add_memory_arch */
  	of_scan_flat_dt(early_init_dt_scan_memory, NULL);
++<<<<<<< HEAD
++=======
+ 
+ 	/* Handle linux,usable-memory-range property */
+ 	early_init_dt_check_for_usable_mem_range();
++>>>>>>> 8347b41748c3 (of: fdt: Aggregate the processing of "linux,usable-memory-range")
  }
  
  bool __init early_init_dt_scan(void *params)
* Unmerged path drivers/of/fdt.c
