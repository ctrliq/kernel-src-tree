Bluetooth: mgmt: Use the correct print format

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-528.el8
commit-author Kai Ye <yekai13@huawei.com>
commit 85d6728421c9b2797dea3a20f213dd44d9f8d7cd
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-528.el8/85d67284.failed

According to Documentation/core-api/printk-formats.rst,
Use the correct print format. Printing an unsigned int value should use %u
instead of %d. Otherwise printk() might end up displaying negative numbers.

	Signed-off-by: Kai Ye <yekai13@huawei.com>
	Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
(cherry picked from commit 85d6728421c9b2797dea3a20f213dd44d9f8d7cd)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/bluetooth/mgmt.c
diff --cc net/bluetooth/mgmt.c
index 571df4b44339,22f9f52c5ae6..000000000000
--- a/net/bluetooth/mgmt.c
+++ b/net/bluetooth/mgmt.c
@@@ -4237,24 -4246,80 +4237,66 @@@ static int read_adv_mon_features(struc
  	return err;
  }
  
++<<<<<<< HEAD
++=======
+ int mgmt_add_adv_patterns_monitor_complete(struct hci_dev *hdev, u8 status)
+ {
+ 	struct mgmt_rp_add_adv_patterns_monitor rp;
+ 	struct mgmt_pending_cmd *cmd;
+ 	struct adv_monitor *monitor;
+ 	int err = 0;
+ 
+ 	hci_dev_lock(hdev);
+ 
+ 	cmd = pending_find(MGMT_OP_ADD_ADV_PATTERNS_MONITOR_RSSI, hdev);
+ 	if (!cmd) {
+ 		cmd = pending_find(MGMT_OP_ADD_ADV_PATTERNS_MONITOR, hdev);
+ 		if (!cmd)
+ 			goto done;
+ 	}
+ 
+ 	monitor = cmd->user_data;
+ 	rp.monitor_handle = cpu_to_le16(monitor->handle);
+ 
+ 	if (!status) {
+ 		mgmt_adv_monitor_added(cmd->sk, hdev, monitor->handle);
+ 		hdev->adv_monitors_cnt++;
+ 		if (monitor->state == ADV_MONITOR_STATE_NOT_REGISTERED)
+ 			monitor->state = ADV_MONITOR_STATE_REGISTERED;
+ 		hci_update_background_scan(hdev);
+ 	}
+ 
+ 	err = mgmt_cmd_complete(cmd->sk, cmd->index, cmd->opcode,
+ 				mgmt_status(status), &rp, sizeof(rp));
+ 	mgmt_pending_remove(cmd);
+ 
+ done:
+ 	hci_dev_unlock(hdev);
+ 	bt_dev_dbg(hdev, "add monitor %d complete, status %u",
+ 		   rp.monitor_handle, status);
+ 
+ 	return err;
+ }
+ 
++>>>>>>> 85d6728421c9 (Bluetooth: mgmt: Use the correct print format)
  static int __add_adv_patterns_monitor(struct sock *sk, struct hci_dev *hdev,
 -				      struct adv_monitor *m, u8 status,
 -				      void *data, u16 len, u16 op)
 +				      struct adv_monitor *m, u8 status, u16 op)
  {
  	struct mgmt_rp_add_adv_patterns_monitor rp;
 -	struct mgmt_pending_cmd *cmd;
 +	unsigned int prev_adv_monitors_cnt;
  	int err;
 -	bool pending;
 -
 -	hci_dev_lock(hdev);
  
  	if (status)
 -		goto unlock;
 +		goto failed;
  
 -	if (pending_find(MGMT_OP_SET_LE, hdev) ||
 -	    pending_find(MGMT_OP_ADD_ADV_PATTERNS_MONITOR, hdev) ||
 -	    pending_find(MGMT_OP_ADD_ADV_PATTERNS_MONITOR_RSSI, hdev) ||
 -	    pending_find(MGMT_OP_REMOVE_ADV_MONITOR, hdev)) {
 -		status = MGMT_STATUS_BUSY;
 -		goto unlock;
 -	}
 +	hci_dev_lock(hdev);
  
 -	cmd = mgmt_pending_add(sk, op, hdev, data, len);
 -	if (!cmd) {
 -		status = MGMT_STATUS_NO_RESOURCES;
 -		goto unlock;
 -	}
 +	prev_adv_monitors_cnt = hdev->adv_monitors_cnt;
  
 -	cmd->user_data = m;
 -	pending = hci_add_adv_monitor(hdev, m, &err);
 +	err = hci_add_adv_monitor(hdev, m);
  	if (err) {
 -		if (err == -ENOSPC || err == -ENOMEM)
 +		if (err == -ENOSPC)
  			status = MGMT_STATUS_NO_RESOURCES;
 -		else if (err == -EINVAL)
 -			status = MGMT_STATUS_INVALID_PARAMS;
  		else
  			status = MGMT_STATUS_FAILED;
  
@@@ -4416,6 -4479,37 +4458,40 @@@ done
  					 MGMT_OP_ADD_ADV_PATTERNS_MONITOR_RSSI);
  }
  
++<<<<<<< HEAD
++=======
+ int mgmt_remove_adv_monitor_complete(struct hci_dev *hdev, u8 status)
+ {
+ 	struct mgmt_rp_remove_adv_monitor rp;
+ 	struct mgmt_cp_remove_adv_monitor *cp;
+ 	struct mgmt_pending_cmd *cmd;
+ 	int err = 0;
+ 
+ 	hci_dev_lock(hdev);
+ 
+ 	cmd = pending_find(MGMT_OP_REMOVE_ADV_MONITOR, hdev);
+ 	if (!cmd)
+ 		goto done;
+ 
+ 	cp = cmd->param;
+ 	rp.monitor_handle = cp->monitor_handle;
+ 
+ 	if (!status)
+ 		hci_update_background_scan(hdev);
+ 
+ 	err = mgmt_cmd_complete(cmd->sk, cmd->index, cmd->opcode,
+ 				mgmt_status(status), &rp, sizeof(rp));
+ 	mgmt_pending_remove(cmd);
+ 
+ done:
+ 	hci_dev_unlock(hdev);
+ 	bt_dev_dbg(hdev, "remove monitor %d complete, status %u",
+ 		   rp.monitor_handle, status);
+ 
+ 	return err;
+ }
+ 
++>>>>>>> 85d6728421c9 (Bluetooth: mgmt: Use the correct print format)
  static int remove_adv_monitor(struct sock *sk, struct hci_dev *hdev,
  			      void *data, u16 len)
  {
@@@ -4713,7 -4834,7 +4789,11 @@@ void mgmt_start_discovery_complete(stru
  {
  	struct mgmt_pending_cmd *cmd;
  
++<<<<<<< HEAD
 +	BT_DBG("status %d", status);
++=======
+ 	bt_dev_dbg(hdev, "status %u", status);
++>>>>>>> 85d6728421c9 (Bluetooth: mgmt: Use the correct print format)
  
  	hci_dev_lock(hdev);
  
@@@ -4969,7 -5090,7 +5049,11 @@@ void mgmt_stop_discovery_complete(struc
  {
  	struct mgmt_pending_cmd *cmd;
  
++<<<<<<< HEAD
 +	BT_DBG("status %d", status);
++=======
+ 	bt_dev_dbg(hdev, "status %u", status);
++>>>>>>> 85d6728421c9 (Bluetooth: mgmt: Use the correct print format)
  
  	hci_dev_lock(hdev);
  
@@@ -5182,7 -5303,7 +5266,11 @@@ static int set_device_id(struct sock *s
  static void enable_advertising_instance(struct hci_dev *hdev, u8 status,
  					u16 opcode)
  {
++<<<<<<< HEAD
 +	BT_DBG("status %d", status);
++=======
+ 	bt_dev_dbg(hdev, "status %u", status);
++>>>>>>> 85d6728421c9 (Bluetooth: mgmt: Use the correct print format)
  }
  
  static void set_advertising_complete(struct hci_dev *hdev, u8 status,
@@@ -7533,7 -7654,7 +7621,11 @@@ static void add_advertising_complete(st
  	struct adv_info *adv_instance, *n;
  	u8 instance;
  
++<<<<<<< HEAD
 +	BT_DBG("status %d", status);
++=======
+ 	bt_dev_dbg(hdev, "status %u", status);
++>>>>>>> 85d6728421c9 (Bluetooth: mgmt: Use the correct print format)
  
  	hci_dev_lock(hdev);
  
@@@ -8063,7 -8184,7 +8155,11 @@@ static void remove_advertising_complete
  	struct mgmt_cp_remove_advertising *cp;
  	struct mgmt_rp_remove_advertising rp;
  
++<<<<<<< HEAD
 +	BT_DBG("status %d", status);
++=======
+ 	bt_dev_dbg(hdev, "status %u", status);
++>>>>>>> 85d6728421c9 (Bluetooth: mgmt: Use the correct print format)
  
  	hci_dev_lock(hdev);
  
* Unmerged path net/bluetooth/mgmt.c
diff --git a/net/bluetooth/mgmt_config.c b/net/bluetooth/mgmt_config.c
index 1deb0ca7a929..6ef701c27da4 100644
--- a/net/bluetooth/mgmt_config.c
+++ b/net/bluetooth/mgmt_config.c
@@ -146,7 +146,7 @@ int set_def_system_config(struct sock *sk, struct hci_dev *hdev, void *data,
 		const u16 type = le16_to_cpu(TO_TLV(buffer)->type);
 
 		if (buffer_left < exp_len) {
-			bt_dev_warn(hdev, "invalid len left %d, exp >= %d",
+			bt_dev_warn(hdev, "invalid len left %u, exp >= %u",
 				    buffer_left, exp_len);
 
 			return mgmt_cmd_status(sk, hdev->id,
@@ -198,7 +198,7 @@ int set_def_system_config(struct sock *sk, struct hci_dev *hdev, void *data,
 		}
 
 		if (exp_type_len && len != exp_type_len) {
-			bt_dev_warn(hdev, "invalid length %d, exp %zu for type %d",
+			bt_dev_warn(hdev, "invalid length %d, exp %zu for type %u",
 				    len, exp_type_len, type);
 
 			return mgmt_cmd_status(sk, hdev->id,
