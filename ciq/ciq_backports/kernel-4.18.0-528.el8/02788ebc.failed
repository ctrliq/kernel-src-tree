lib: stackinit: Convert to KUnit

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-528.el8
commit-author Kees Cook <keescook@chromium.org>
commit 02788ebcf521fe78c24eb221fd1ed7f86792c330
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-528.el8/02788ebc.failed

Convert stackinit unit tests to KUnit, for better integration
into the kernel self test framework. Includes a rename of
test_stackinit.c to stackinit_kunit.c, and CONFIG_TEST_STACKINIT to
CONFIG_STACKINIT_KUNIT_TEST.

Adjust expected test results based on which stack initialization method
was chosen:

 $ CMD="./tools/testing/kunit/kunit.py run stackinit --raw_output \
        --arch=x86_64 --kconfig_add"

 $ $CMD | grep stackinit:
 # stackinit: pass:36 fail:0 skip:29 total:65

 $ $CMD CONFIG_GCC_PLUGIN_STRUCTLEAK_USER=y | grep stackinit:
 # stackinit: pass:37 fail:0 skip:28 total:65

 $ $CMD CONFIG_GCC_PLUGIN_STRUCTLEAK_BYREF=y | grep stackinit:
 # stackinit: pass:55 fail:0 skip:10 total:65

 $ $CMD CONFIG_GCC_PLUGIN_STRUCTLEAK_BYREF_ALL=y | grep stackinit:
 # stackinit: pass:62 fail:0 skip:3 total:65

 $ $CMD CONFIG_INIT_STACK_ALL_PATTERN=y --make_option LLVM=1 | grep stackinit:
 # stackinit: pass:60 fail:0 skip:5 total:65

 $ $CMD CONFIG_INIT_STACK_ALL_ZERO=y --make_option LLVM=1 | grep stackinit:
 # stackinit: pass:60 fail:0 skip:5 total:65

Temporarily remove the userspace-build mode, which will be restored in a
later patch.

Expand the size of the pre-case switch variable so it doesn't get
accidentally cleared.

	Cc: David Gow <davidgow@google.com>
	Cc: Daniel Latypov <dlatypov@google.com>
	Cc: Arnd Bergmann <arnd@arndb.de>
	Signed-off-by: Kees Cook <keescook@chromium.org>
---
v1: https://lore.kernel.org/lkml/20220224055145.1853657-1-keescook@chromium.org
v2:
 - split "userspace KUnit stub" into separate header and patch (Daniel)
 - Improve commit log and comments (David)
 - Provide mapping of expected XFAIL tests to CONFIGs (David)
(cherry picked from commit 02788ebcf521fe78c24eb221fd1ed7f86792c330)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	lib/Kconfig.debug
#	lib/Makefile
#	lib/stackinit_kunit.c
diff --cc lib/Kconfig.debug
index e5ffc07d15db,a5556ab05240..000000000000
--- a/lib/Kconfig.debug
+++ b/lib/Kconfig.debug
@@@ -2211,9 -2487,43 +2211,47 @@@ config RATIONAL_KUNIT_TES
  
  	  If unsure, say N.
  
++<<<<<<< HEAD
++=======
+ config MEMCPY_KUNIT_TEST
+ 	tristate "Test memcpy(), memmove(), and memset() functions at runtime" if !KUNIT_ALL_TESTS
+ 	depends on KUNIT
+ 	default KUNIT_ALL_TESTS
+ 	help
+ 	  Builds unit tests for memcpy(), memmove(), and memset() functions.
+ 	  For more information on KUnit and unit tests in general please refer
+ 	  to the KUnit documentation in Documentation/dev-tools/kunit/.
+ 
+ 	  If unsure, say N.
+ 
+ config OVERFLOW_KUNIT_TEST
+ 	tristate "Test check_*_overflow() functions at runtime" if !KUNIT_ALL_TESTS
+ 	depends on KUNIT
+ 	default KUNIT_ALL_TESTS
+ 	help
+ 	  Builds unit tests for the check_*_overflow(), size_*(), allocation, and
+ 	  related functions.
+ 
+ 	  For more information on KUnit and unit tests in general please refer
+ 	  to the KUnit documentation in Documentation/dev-tools/kunit/.
+ 
+ 	  If unsure, say N.
+ 
+ config STACKINIT_KUNIT_TEST
+ 	tristate "Test level of stack variable initialization" if !KUNIT_ALL_TESTS
+ 	depends on KUNIT
+ 	default KUNIT_ALL_TESTS
+ 	help
+ 	  Test if the kernel is zero-initializing stack variables and
+ 	  padding. Coverage is controlled by compiler flags,
+ 	  CONFIG_INIT_STACK_ALL_PATTERN, CONFIG_INIT_STACK_ALL_ZERO,
+ 	  CONFIG_GCC_PLUGIN_STRUCTLEAK, CONFIG_GCC_PLUGIN_STRUCTLEAK_BYREF,
+ 	  or CONFIG_GCC_PLUGIN_STRUCTLEAK_BYREF_ALL.
+ 
++>>>>>>> 02788ebcf521 (lib: stackinit: Convert to KUnit)
  config TEST_UDELAY
  	tristate "udelay test driver"
 +	default n
  	help
  	  This builds the "udelay_test" module that helps to make sure
  	  that udelay() is working properly.
@@@ -2293,22 -2605,32 +2331,30 @@@ config TEST_LIVEPATC
  
  	  If unsure, say N.
  
 -config TEST_OBJAGG
 -	tristate "Perform selftest on object aggreration manager"
 -	default n
 -	depends on OBJAGG
 +config TEST_MEMCAT_P
 +	tristate "Test memcat_p() helper function"
  	help
++<<<<<<< HEAD
 +	  Test the memcat_p() helper for correctly merging two
 +	  pointer arrays together.
 +
 +	  If unsure, say N.
 +
 +config TEST_FPU
 +	tristate "Test floating point operations in kernel space"
 +	depends on X86 && !KCOV_INSTRUMENT_ALL
++=======
+ 	  Enable this option to test object aggregation manager on boot
+ 	  (or module load).
+ 
+ config TEST_MEMINIT
+ 	tristate "Test heap/page initialization"
++>>>>>>> 02788ebcf521 (lib: stackinit: Convert to KUnit)
  	help
 -	  Test if the kernel is zero-initializing heap and page allocations.
 -	  This can be useful to test init_on_alloc and init_on_free features.
 -
 -	  If unsure, say N.
 -
 -config TEST_HMM
 -	tristate "Test HMM (Heterogeneous Memory Management)"
 -	depends on TRANSPARENT_HUGEPAGE
 -	depends on DEVICE_PRIVATE
 -	select HMM_MIRROR
 -	select MMU_NOTIFIER
 -	help
 -	  This is a pseudo device driver solely for testing HMM.
 -	  Say M here if you want to build the HMM test module.
 -	  Doing so will allow you to run tools/testing/selftest/vm/hmm-tests.
 +	  Enable this option to add /sys/kernel/debug/selftest_helpers/test_fpu
 +	  which will trigger a sequence of floating point operations. This is used
 +	  for self-testing floating point control register setting in
 +	  kernel_fpu_begin().
  
  	  If unsure, say N.
  
diff --cc lib/Makefile
index 83b51bd6948f,353bc09ce38d..000000000000
--- a/lib/Makefile
+++ b/lib/Makefile
@@@ -90,10 -91,15 +90,15 @@@ obj-$(CONFIG_TEST_XARRAY) += test_xarra
  obj-$(CONFIG_TEST_PARMAN) += test_parman.o
  obj-$(CONFIG_TEST_KMOD) += test_kmod.o
  obj-$(CONFIG_TEST_DEBUG_VIRTUAL) += test_debug_virtual.o
 -obj-$(CONFIG_TEST_MEMCAT_P) += test_memcat_p.o
  obj-$(CONFIG_TEST_OBJAGG) += test_objagg.o
++<<<<<<< HEAD
++=======
+ obj-$(CONFIG_TEST_BLACKHOLE_DEV) += test_blackhole_dev.o
+ obj-$(CONFIG_TEST_MEMINIT) += test_meminit.o
++>>>>>>> 02788ebcf521 (lib: stackinit: Convert to KUnit)
  obj-$(CONFIG_TEST_LOCKUP) += test_lockup.o
  obj-$(CONFIG_TEST_HMM) += test_hmm.o
 -obj-$(CONFIG_TEST_FREE_PAGES) += test_free_pages.o
 -obj-$(CONFIG_KPROBES_SANITY_TEST) += test_kprobes.o
 -obj-$(CONFIG_TEST_REF_TRACKER) += test_ref_tracker.o
 +
  #
  # CFLAGS for compiling floating point code inside the kernel. x86/Makefile turns
  # off the generation of FPU/SSE* instructions for kernel proper but FPU_FLAGS
@@@ -331,6 -360,11 +336,14 @@@ obj-$(CONFIG_BITS_KUNIT_TEST) += test_b
  obj-$(CONFIG_CMDLINE_KUNIT_TEST) += cmdline_kunit.o
  obj-$(CONFIG_SLUB_KUNIT_TEST) += slub_kunit.o
  obj-$(CONFIG_MEMCPY_KUNIT_TEST) += memcpy_kunit.o
++<<<<<<< HEAD
++=======
+ obj-$(CONFIG_OVERFLOW_KUNIT_TEST) += overflow_kunit.o
+ CFLAGS_stackinit_kunit.o += $(call cc-disable-warning, switch-unreachable)
+ obj-$(CONFIG_STACKINIT_KUNIT_TEST) += stackinit_kunit.o
+ 
+ obj-$(CONFIG_GENERIC_LIB_DEVMEM_IS_ALLOWED) += devmem_is_allowed.o
++>>>>>>> 02788ebcf521 (lib: stackinit: Convert to KUnit)
  
  # FORTIFY_SOURCE compile-time behavior tests
  TEST_FORTIFY_SRCS = $(wildcard $(srctree)/$(src)/test_fortify/*-*.c)
* Unmerged path lib/stackinit_kunit.c
* Unmerged path lib/Kconfig.debug
* Unmerged path lib/Makefile
* Unmerged path lib/stackinit_kunit.c
