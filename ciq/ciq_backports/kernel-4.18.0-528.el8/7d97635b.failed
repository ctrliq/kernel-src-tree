kunit: no longer call module_info(test, "Y") for kunit modules

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-528.el8
commit-author Joe Fradley <joefradley@google.com>
commit 7d97635b72813d80f909ad24d7a64b2fe9a29c0b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-528.el8/7d97635b.failed

Because KUnit test execution is not a guarantee with the kunit.enable
parameter we want to be careful to only taint the kernel when actual
tests run. Calling module_info(test, "Y") for every KUnit module
automatically causes the kernel to be tainted upon module load. Therefore,
we're removing this call and relying on the KUnit framework to taint the
kernel or not.

	Signed-off-by: Joe Fradley <joefradley@google.com>
	Reviewed-by: David Gow <davidgow@google.com>
	Reviewed-by: Brendan Higgins <brendanhiggins@google.com>
	Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>
(cherry picked from commit 7d97635b72813d80f909ad24d7a64b2fe9a29c0b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/kunit/test.h
diff --cc include/kunit/test.h
index 4ee4bb73f10e,20cc4770cb3f..000000000000
--- a/include/kunit/test.h
+++ b/include/kunit/test.h
@@@ -240,44 -252,10 +240,51 @@@ static inline int kunit_run_all_tests(v
  }
  #endif /* IS_BUILTIN(CONFIG_KUNIT) */
  
++<<<<<<< HEAD
 +#ifdef MODULE
 +/**
 + * kunit_test_suites_for_module() - used to register one or more
 + *			 &struct kunit_suite with KUnit.
 + *
 + * @__suites: a statically allocated list of &struct kunit_suite.
 + *
 + * Registers @__suites with the test framework. See &struct kunit_suite for
 + * more information.
 + *
 + * If a test suite is built-in, module_init() gets translated into
 + * an initcall which we don't want as the idea is that for builtins
 + * the executor will manage execution.  So ensure we do not define
 + * module_{init|exit} functions for the builtin case when registering
 + * suites via kunit_test_suites() below.
 + */
 +#define kunit_test_suites_for_module(__suites)				\
 +	static int __init kunit_test_suites_init(void)			\
 +	{								\
 +		return __kunit_test_suites_init(__suites);		\
 +	}								\
 +	module_init(kunit_test_suites_init);				\
 +									\
 +	static void __exit kunit_test_suites_exit(void)			\
 +	{								\
 +		return __kunit_test_suites_exit(__suites);		\
 +	}								\
 +	module_exit(kunit_test_suites_exit)				\
 +	MODULE_INFO(test, "Y");
 +#else
 +#define kunit_test_suites_for_module(__suites)
 +#endif /* MODULE */
 +
 +#define __kunit_test_suites(unique_array, unique_suites, ...)		       \
 +	static struct kunit_suite *unique_array[] = { __VA_ARGS__, NULL };     \
 +	kunit_test_suites_for_module(unique_array);			       \
 +	static struct kunit_suite **unique_suites			       \
 +	__used __section(.kunit_test_suites) = unique_array
++=======
+ #define __kunit_test_suites(unique_array, ...)				       \
+ 	static struct kunit_suite *unique_array[]			       \
+ 	__aligned(sizeof(struct kunit_suite *))				       \
+ 	__used __section(".kunit_test_suites") = { __VA_ARGS__ }
++>>>>>>> 7d97635b7281 (kunit: no longer call module_info(test, "Y") for kunit modules)
  
  /**
   * kunit_test_suites() - used to register one or more &struct kunit_suite
* Unmerged path include/kunit/test.h
