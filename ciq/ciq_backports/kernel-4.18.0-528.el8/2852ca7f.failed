panic: Taint kernel if tests are run

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-528.el8
commit-author David Gow <davidgow@google.com>
commit 2852ca7fba9f77b204f0fe953b31fadd0057c936
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-528.el8/2852ca7f.failed

Most in-kernel tests (such as KUnit tests) are not supposed to run on
production systems: they may do deliberately illegal things to trigger
errors, and have security implications (for example, KUnit assertions
will often deliberately leak kernel addresses).

Add a new taint type, TAINT_TEST to signal that a test has been run.
This will be printed as 'N' (originally for kuNit, as every other
sensible letter was taken.)

This should discourage people from running these tests on production
systems, and to make it easier to tell if tests have been run
accidentally (by loading the wrong configuration, etc.)

	Acked-by: Luis Chamberlain <mcgrof@kernel.org>
	Reviewed-by: Brendan Higgins <brendanhiggins@google.com>
	Signed-off-by: David Gow <davidgow@google.com>
	Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>
(cherry picked from commit 2852ca7fba9f77b204f0fe953b31fadd0057c936)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	Documentation/admin-guide/tainted-kernels.rst
#	include/linux/panic.h
#	kernel/panic.c
diff --cc Documentation/admin-guide/tainted-kernels.rst
index 28a869c509a0,7d80e8c307d1..000000000000
--- a/Documentation/admin-guide/tainted-kernels.rst
+++ b/Documentation/admin-guide/tainted-kernels.rst
@@@ -1,12 -1,115 +1,116 @@@
  Tainted kernels
  ---------------
  
 -The kernel will mark itself as 'tainted' when something occurs that might be
 -relevant later when investigating problems. Don't worry too much about this,
 -most of the time it's not a problem to run a tainted kernel; the information is
 -mainly of interest once someone wants to investigate some problem, as its real
 -cause might be the event that got the kernel tainted. That's why bug reports
 -from tainted kernels will often be ignored by developers, hence try to reproduce
 -problems with an untainted kernel.
 -
 +Some oops reports contain the string **'Tainted: '** after the program
 +counter. This indicates that the kernel has been tainted by some
 +mechanism.  The string is followed by a series of position-sensitive
 +characters, each representing a particular tainted value.
 +
++<<<<<<< HEAD
 + 1)  ``G`` if all modules loaded have a GPL or compatible license, ``P`` if
++=======
+ Note the kernel will remain tainted even after you undo what caused the taint
+ (i.e. unload a proprietary kernel module), to indicate the kernel remains not
+ trustworthy. That's also why the kernel will print the tainted state when it
+ notices an internal problem (a 'kernel bug'), a recoverable error
+ ('kernel oops') or a non-recoverable error ('kernel panic') and writes debug
+ information about this to the logs ``dmesg`` outputs. It's also possible to
+ check the tainted state at runtime through a file in ``/proc/``.
+ 
+ 
+ Tainted flag in bugs, oops or panics messages
+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+ 
+ You find the tainted state near the top in a line starting with 'CPU:'; if or
+ why the kernel was tainted is shown after the Process ID ('PID:') and a shortened
+ name of the command ('Comm:') that triggered the event::
+ 
+ 	BUG: unable to handle kernel NULL pointer dereference at 0000000000000000
+ 	Oops: 0002 [#1] SMP PTI
+ 	CPU: 0 PID: 4424 Comm: insmod Tainted: P        W  O      4.20.0-0.rc6.fc30 #1
+ 	Hardware name: Red Hat KVM, BIOS 0.5.1 01/01/2011
+ 	RIP: 0010:my_oops_init+0x13/0x1000 [kpanic]
+ 	[...]
+ 
+ You'll find a 'Not tainted: ' there if the kernel was not tainted at the
+ time of the event; if it was, then it will print 'Tainted: ' and characters
+ either letters or blanks. In above example it looks like this::
+ 
+ 	Tainted: P        W  O
+ 
+ The meaning of those characters is explained in the table below. In this case
+ the kernel got tainted earlier because a proprietary Module (``P``) was loaded,
+ a warning occurred (``W``), and an externally-built module was loaded (``O``).
+ To decode other letters use the table below.
+ 
+ 
+ Decoding tainted state at runtime
+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+ 
+ At runtime, you can query the tainted state by reading
+ ``cat /proc/sys/kernel/tainted``. If that returns ``0``, the kernel is not
+ tainted; any other number indicates the reasons why it is. The easiest way to
+ decode that number is the script ``tools/debugging/kernel-chktaint``, which your
+ distribution might ship as part of a package called ``linux-tools`` or
+ ``kernel-tools``; if it doesn't you can download the script from
+ `git.kernel.org <https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/plain/tools/debugging/kernel-chktaint>`_
+ and execute it with ``sh kernel-chktaint``, which would print something like
+ this on the machine that had the statements in the logs that were quoted earlier::
+ 
+ 	Kernel is Tainted for following reasons:
+ 	 * Proprietary module was loaded (#0)
+ 	 * Kernel issued warning (#9)
+ 	 * Externally-built ('out-of-tree') module was loaded  (#12)
+ 	See Documentation/admin-guide/tainted-kernels.rst in the Linux kernel or
+ 	 https://www.kernel.org/doc/html/latest/admin-guide/tainted-kernels.html for
+ 	 a more details explanation of the various taint flags.
+ 	Raw taint value as int/string: 4609/'P        W  O     '
+ 
+ You can try to decode the number yourself. That's easy if there was only one
+ reason that got your kernel tainted, as in this case you can find the number
+ with the table below. If there were multiple reasons you need to decode the
+ number, as it is a bitfield, where each bit indicates the absence or presence of
+ a particular type of taint. It's best to leave that to the aforementioned
+ script, but if you need something quick you can use this shell command to check
+ which bits are set::
+ 
+ 	$ for i in $(seq 18); do echo $(($i-1)) $(($(cat /proc/sys/kernel/tainted)>>($i-1)&1));done
+ 
+ Table for decoding tainted state
+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+ 
+ ===  ===  ======  ========================================================
+ Bit  Log  Number  Reason that got the kernel tainted
+ ===  ===  ======  ========================================================
+   0  G/P       1  proprietary module was loaded
+   1  _/F       2  module was force loaded
+   2  _/S       4  kernel running on an out of specification system
+   3  _/R       8  module was force unloaded
+   4  _/M      16  processor reported a Machine Check Exception (MCE)
+   5  _/B      32  bad page referenced or some unexpected page flags
+   6  _/U      64  taint requested by userspace application
+   7  _/D     128  kernel died recently, i.e. there was an OOPS or BUG
+   8  _/A     256  ACPI table overridden by user
+   9  _/W     512  kernel issued warning
+  10  _/C    1024  staging driver was loaded
+  11  _/I    2048  workaround for bug in platform firmware applied
+  12  _/O    4096  externally-built ("out-of-tree") module was loaded
+  13  _/E    8192  unsigned module was loaded
+  14  _/L   16384  soft lockup occurred
+  15  _/K   32768  kernel has been live patched
+  16  _/X   65536  auxiliary taint, defined for and used by distros
+  17  _/T  131072  kernel was built with the struct randomization plugin
+  18  _/N  262144  an in-kernel test has been run
+ ===  ===  ======  ========================================================
+ 
+ Note: The character ``_`` is representing a blank in this table to make reading
+ easier.
+ 
+ More detailed explanation for tainting
+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+ 
+  0)  ``G`` if all modules loaded have a GPL or compatible license, ``P`` if
++>>>>>>> 2852ca7fba9f (panic: Taint kernel if tests are run)
       any proprietary module has been loaded.  Modules without a
       MODULE_LICENSE or with a MODULE_LICENSE that is not recognised by
       insmod as GPL compatible are assumed to be proprietary.
diff --cc kernel/panic.c
index 6e306a2427cc,6b3369e21026..000000000000
--- a/kernel/panic.c
+++ b/kernel/panic.c
@@@ -363,20 -428,7 +363,24 @@@ const struct taint_flag taint_flags[TAI
  	[ TAINT_LIVEPATCH ]		= { 'K', ' ', true },
  	[ TAINT_AUX ]			= { 'X', ' ', true },
  	[ TAINT_RANDSTRUCT ]		= { 'T', ' ', true },
++<<<<<<< HEAD
 +	[ TAINT_18 ]			= { '?', '-', false },
 +	[ TAINT_19 ]			= { '?', '-', false },
 +	[ TAINT_20 ]			= { '?', '-', false },
 +	[ TAINT_21 ]			= { '?', '-', false },
 +	[ TAINT_22 ]			= { '?', '-', false },
 +	[ TAINT_23 ]			= { '?', '-', false },
 +	[ TAINT_24 ]			= { '?', '-', false },
 +	[ TAINT_25 ]			= { '?', '-', false },
 +	[ TAINT_26 ]			= { '?', '-', false },
 +	[ TAINT_SUPPORT_REMOVED ]	= { 'r', ' ', false },
 +	[ TAINT_28 ]			= { '?', '-', false },
 +	[ TAINT_TECH_PREVIEW ]		= { 't', ' ', true },
 +	[ TAINT_UNPRIVILEGED_BPF ]	= { 'u', ' ', false },
 +	[ TAINT_31 ]			= { '?', '-', false },
++=======
+ 	[ TAINT_TEST ]			= { 'N', ' ', true },
++>>>>>>> 2852ca7fba9f (panic: Taint kernel if tests are run)
  };
  
  /**
* Unmerged path include/linux/panic.h
* Unmerged path Documentation/admin-guide/tainted-kernels.rst
* Unmerged path include/linux/panic.h
* Unmerged path kernel/panic.c
