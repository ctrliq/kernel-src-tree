kunit: add kunit.enable to enable/disable KUnit test

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-528.el8
commit-author Joe Fradley <joefradley@google.com>
commit d20a6ba5e3be5f8d9002c6c5a5d4dfecc5dc48f9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-528.el8/d20a6ba5.failed

This patch adds the kunit.enable module parameter that will need to be
set to true in addition to KUNIT being enabled for KUnit tests to run.
The default value is true giving backwards compatibility. However, for
the production+testing use case the new config option
KUNIT_DEFAULT_ENABLED can be set to N requiring the tester to opt-in
by passing kunit.enable=1 to the kernel.

	Signed-off-by: Joe Fradley <joefradley@google.com>
	Reviewed-by: David Gow <davidgow@google.com>
	Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>
(cherry picked from commit d20a6ba5e3be5f8d9002c6c5a5d4dfecc5dc48f9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	lib/kunit/test.c
diff --cc lib/kunit/test.c
index ee37631c8bdf,1e54373309a4..000000000000
--- a/lib/kunit/test.c
+++ b/lib/kunit/test.c
@@@ -585,11 -597,21 +596,29 @@@ static void kunit_init_suite(struct kun
  	suite->suite_init_err = 0;
  }
  
++<<<<<<< HEAD
 +int __kunit_test_suites_init(struct kunit_suite * const * const suites)
 +{
 +	unsigned int i;
 +
 +	for (i = 0; suites[i] != NULL; i++) {
++=======
+ bool kunit_enabled(void)
+ {
+ 	return enable_param;
+ }
+ 
+ int __kunit_test_suites_init(struct kunit_suite * const * const suites, int num_suites)
+ {
+ 	unsigned int i;
+ 
+ 	if (!kunit_enabled() && num_suites > 0) {
+ 		pr_info("kunit: disabled\n");
+ 		return 0;
+ 	}
+ 
+ 	for (i = 0; i < num_suites; i++) {
++>>>>>>> d20a6ba5e3be (kunit: add kunit.enable to enable/disable KUnit test)
  		kunit_init_suite(suites[i]);
  		kunit_run_tests(suites[i]);
  	}
@@@ -606,7 -628,10 +635,14 @@@ void __kunit_test_suites_exit(struct ku
  {
  	unsigned int i;
  
++<<<<<<< HEAD
 +	for (i = 0; suites[i] != NULL; i++)
++=======
+ 	if (!kunit_enabled())
+ 		return;
+ 
+ 	for (i = 0; i < num_suites; i++)
++>>>>>>> d20a6ba5e3be (kunit: add kunit.enable to enable/disable KUnit test)
  		kunit_exit_suite(suites[i]);
  
  	kunit_suite_counter = 1;
diff --git a/Documentation/admin-guide/kernel-parameters.txt b/Documentation/admin-guide/kernel-parameters.txt
index 6e23890d9af0..cbd8b762dc71 100644
--- a/Documentation/admin-guide/kernel-parameters.txt
+++ b/Documentation/admin-guide/kernel-parameters.txt
@@ -2168,6 +2168,12 @@
 			0: force disabled
 			1: force enabled
 
+	kunit.enable=	[KUNIT] Enable executing KUnit tests. Requires
+			CONFIG_KUNIT to be set to be fully enabled. The
+			default value can be overridden via
+			KUNIT_DEFAULT_ENABLED.
+			Default is 1 (enabled)
+
 	kvm.ignore_msrs=[KVM] Ignore guest accesses to unhandled MSRs.
 			Default is 0 (don't ignore, but inject #GP)
 
diff --git a/include/kunit/test.h b/include/kunit/test.h
index 4ee4bb73f10e..0ac24ea3d26b 100644
--- a/include/kunit/test.h
+++ b/include/kunit/test.h
@@ -218,6 +218,8 @@ static inline void kunit_set_failure(struct kunit *test)
 	WRITE_ONCE(test->status, KUNIT_FAILURE);
 }
 
+bool kunit_enabled(void);
+
 void kunit_init_test(struct kunit *test, const char *name, char *log);
 
 int kunit_run_tests(struct kunit_suite *suite);
diff --git a/lib/kunit/Kconfig b/lib/kunit/Kconfig
index 0b5dfb001bac..626719b95bad 100644
--- a/lib/kunit/Kconfig
+++ b/lib/kunit/Kconfig
@@ -59,4 +59,15 @@ config KUNIT_ALL_TESTS
 
 	  If unsure, say N.
 
+config KUNIT_DEFAULT_ENABLED
+	bool "Default value of kunit.enable"
+	default y
+	help
+	  Sets the default value of kunit.enable. If set to N then KUnit
+	  tests will not execute unless kunit.enable=1 is passed to the
+	  kernel command line.
+
+	  In most cases this should be left as Y. Only if additional opt-in
+	  behavior is needed should this be set to N.
+
 endif # KUNIT
diff --git a/lib/kunit/executor.c b/lib/kunit/executor.c
index 7ce5aabb617d..f9a7af2c870e 100644
--- a/lib/kunit/executor.c
+++ b/lib/kunit/executor.c
@@ -248,6 +248,10 @@ int kunit_run_all_tests(void)
 		.end = __kunit_suites_end,
 	};
 	int err = 0;
+	if (!kunit_enabled()) {
+		pr_info("kunit: disabled\n");
+		goto out;
+	}
 
 	if (filter_glob_param) {
 		suite_set = kunit_filter_suites(&suite_set, filter_glob_param, &err);
* Unmerged path lib/kunit/test.c
diff --git a/tools/testing/kunit/kunit_kernel.py b/tools/testing/kunit/kunit_kernel.py
index f5c26ea89714..ef794da420d7 100644
--- a/tools/testing/kunit/kunit_kernel.py
+++ b/tools/testing/kunit/kunit_kernel.py
@@ -359,6 +359,7 @@ class LinuxSourceTree:
 			args = []
 		if filter_glob:
 			args.append('kunit.filter_glob='+filter_glob)
+		args.append('kunit.enable=1')
 
 		process = self._ops.start(args, build_dir)
 		assert process.stdout is not None  # tell mypy it's set
