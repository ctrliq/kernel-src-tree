Documentation: KUnit: Reword start guide for selecting tests

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-528.el8
commit-author Tales Aparecida <tales.aparecida@gmail.com>
commit 7a79b7df4e5122ae3b5b5f2bd5b52ecb1295398a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-528.el8/7a79b7df.failed

Reword "Creating a ``.kunitconfig``" into "Selecting which tests to run"
covering the current alternatives for editing configs and glob-filtering

	Signed-off-by: Tales Aparecida <tales.aparecida@gmail.com>
	Reviewed-by: Ma√≠ra Canal <mairacanal@riseup.net>
	Reviewed-by:Sadiya Kazi <Sadiyakazi@google.com>
	Reviewed-by: David Gow <davidgow@google.com>
	Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>
(cherry picked from commit 7a79b7df4e5122ae3b5b5f2bd5b52ecb1295398a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	Documentation/dev-tools/kunit/start.rst
diff --cc Documentation/dev-tools/kunit/start.rst
index 7d5888f4194e,adf782507999..000000000000
--- a/Documentation/dev-tools/kunit/start.rst
+++ b/Documentation/dev-tools/kunit/start.rst
@@@ -84,25 -77,69 +77,76 @@@ If you didn't run ``kunit.py run`` yet
     ``.kunitconfig`` lives in the ``--build_dir`` used by kunit.py, which is
     ``.kunit`` by default.
  
+ Before running the tests, kunit_tool ensures that all config options
+ set in ``.kunitconfig`` are set in the kernel ``.config``. It will warn
+ you if you have not included dependencies for the options used.
+ 
++<<<<<<< HEAD
 +.. note ::
++   The configuration is only updated if the ``.kunitconfig`` is not a
++   subset of ``.config``. You can use tools (for example:
++   make menuconfig) to adjust other config options.
++=======
+ There are many ways to customize the configurations:
+ 
+ a. Edit ``.kunit/.kunitconfig``. The file should contain the list of kconfig
+    options required to run the desired tests, including their dependencies.
     You may want to remove CONFIG_KUNIT_ALL_TESTS from the ``.kunitconfig`` as
     it will enable a number of additional tests that you may not want.
+    If you need to run on an architecture other than UML see :ref:`kunit-on-qemu`.
  
- 2. You can then add any other Kconfig options, for example:
+ b. Enable additional kconfig options on top of ``.kunit/.kunitconfig``.
+    For example, to include the kernel's linked-list test you can run::
  
- .. code-block:: none
+ 	./tools/testing/kunit/kunit.py run \
+ 		--kconfig_add CONFIG_LIST_KUNIT_TEST=y
  
- 	CONFIG_LIST_KUNIT_TEST=y
+ c. Provide the path of one or more .kunitconfig files from the tree.
+    For example, to run only ``FAT_FS`` and ``EXT4`` tests you can run::
+ 
+ 	./tools/testing/kunit/kunit.py run \
+ 		--kunitconfig ./fs/fat/.kunitconfig \
+ 		--kunitconfig ./fs/ext4/.kunitconfig
+ 
+ d. If you change the ``.kunitconfig``, kunit.py will trigger a rebuild of the
+    ``.config`` file. But you can edit the ``.config`` file directly or with
+    tools like ``make menuconfig O=.kunit``. As long as its a superset of
+    ``.kunitconfig``, kunit.py won't overwrite your changes.
++>>>>>>> 7a79b7df4e51 (Documentation: KUnit: Reword start guide for selecting tests)
  
- Before running the tests, kunit_tool ensures that all config options
- set in ``.kunitconfig`` are set in the kernel ``.config``. It will warn
- you if you have not included dependencies for the options used.
  
  .. note ::
-    The configuration is only updated if the ``.kunitconfig`` is not a
-    subset of ``.config``. You can use tools (for example:
-    make menuconfig) to adjust other config options.
  
+ 	To save a .kunitconfig after finding a satisfactory configuration::
+ 
+ 		make savedefconfig O=.kunit
+ 		cp .kunit/defconfig .kunit/.kunitconfig
+ 
+ Filtering tests by name
+ ~~~~~~~~~~~~~~~~~~~~~~~
+ If you want to be more specific than Kconfig can provide, it is also possible
+ to select which tests to execute at boot-time by passing a glob filter
+ (read instructions regarding the pattern in the manpage :manpage:`glob(7)`).
+ If there is a ``"."`` (period) in the filter, it will be interpreted as a
+ separator between the name of the test suite and the test case,
+ otherwise, it will be interpreted as the name of the test suite.
+ For example, let's assume we are using the default config:
+ 
+ a. inform the name of a test suite, like ``"kunit_executor_test"``,
+    to run every test case it contains::
+ 
+ 	./tools/testing/kunit/kunit.py run "kunit_executor_test"
+ 
+ b. inform the name of a test case prefixed by its test suite,
+    like ``"example.example_simple_test"``, to run specifically that test case::
+ 
+ 	./tools/testing/kunit/kunit.py run "example.example_simple_test"
+ 
+ c. use wildcard characters (``*?[``) to run any test case that matches the pattern,
+    like ``"*.*64*"`` to run test cases containing ``"64"`` in the name inside
+    any test suite::
+ 
+ 	./tools/testing/kunit/kunit.py run "*.*64*"
  
  Running Tests without the KUnit Wrapper
  =======================================
* Unmerged path Documentation/dev-tools/kunit/start.rst
