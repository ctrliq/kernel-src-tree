ice: refactor ice_lib to make functions static

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-535.el8
commit-author Jan Sokolowski <jan.sokolowski@intel.com>
commit 45f5478c039c104c03c698c18ac30f21a728208f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-535.el8/45f5478c.failed

As following methods are not used outside of ice_lib,
they can be made static:
ice_vsi_is_vlan_pruning_ena
ice_vsi_cfg_frame_size

	Signed-off-by: Jan Sokolowski <jan.sokolowski@intel.com>
	Reviewed-by: Jacob Keller <jacob.e.keller@intel.com>
	Reviewed-by: Przemek Kitszel <przemyslaw.kitszel@intel.com>
	Reviewed-by: Leon Romanovsky <leonro@nvidia.com>
	Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
(cherry picked from commit 45f5478c039c104c03c698c18ac30f21a728208f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/intel/ice/ice_lib.c
diff --cc drivers/net/ethernet/intel/ice/ice_lib.c
index 77eb6cc5cf05,d3fb2b7535e7..000000000000
--- a/drivers/net/ethernet/intel/ice/ice_lib.c
+++ b/drivers/net/ethernet/intel/ice/ice_lib.c
@@@ -1957,31 -1794,6 +1992,34 @@@ void ice_update_eth_stats(struct ice_vs
  }
  
  /**
++<<<<<<< HEAD
 + * ice_vsi_cfg_frame_size - setup max frame size and Rx buffer length
 + * @vsi: VSI
 + */
 +void ice_vsi_cfg_frame_size(struct ice_vsi *vsi)
 +{
 +	if (!vsi->netdev || test_bit(ICE_FLAG_LEGACY_RX, vsi->back->flags)) {
 +		vsi->max_frame = ICE_AQ_SET_MAC_FRAME_SIZE_MAX;
 +		vsi->rx_buf_len = ICE_RXBUF_2048;
 +#if (PAGE_SIZE < 8192)
 +	} else if (!ICE_2K_TOO_SMALL_WITH_PADDING &&
 +		   (vsi->netdev->mtu <= ETH_DATA_LEN)) {
 +		vsi->max_frame = ICE_RXBUF_1536 - NET_IP_ALIGN;
 +		vsi->rx_buf_len = ICE_RXBUF_1536 - NET_IP_ALIGN;
 +#endif
 +	} else {
 +		vsi->max_frame = ICE_AQ_SET_MAC_FRAME_SIZE_MAX;
 +#if (PAGE_SIZE < 8192)
 +		vsi->rx_buf_len = ICE_RXBUF_3072;
 +#else
 +		vsi->rx_buf_len = ICE_RXBUF_2048;
 +#endif
 +	}
 +}
 +
 +/**
++=======
++>>>>>>> 45f5478c039c (ice: refactor ice_lib to make functions static)
   * ice_write_qrxflxp_cntxt - write/configure QRXFLXP_CNTXT register
   * @hw: HW pointer
   * @pf_q: index of the Rx queue in the PF's queue space
* Unmerged path drivers/net/ethernet/intel/ice/ice_lib.c
diff --git a/drivers/net/ethernet/intel/ice/ice_lib.h b/drivers/net/ethernet/intel/ice/ice_lib.h
index dcf159fa2e9c..5813acf2329d 100644
--- a/drivers/net/ethernet/intel/ice/ice_lib.h
+++ b/drivers/net/ethernet/intel/ice/ice_lib.h
@@ -76,8 +76,6 @@ int ice_vsi_cfg_xdp_txqs(struct ice_vsi *vsi);
 
 int ice_vsi_stop_xdp_tx_rings(struct ice_vsi *vsi);
 
-bool ice_vsi_is_vlan_pruning_ena(struct ice_vsi *vsi);
-
 void ice_cfg_sw_lldp(struct ice_vsi *vsi, bool tx, bool create);
 
 int ice_set_link(struct ice_vsi *vsi, bool ena);
@@ -133,7 +131,6 @@ void ice_update_tx_ring_stats(struct ice_tx_ring *ring, u64 pkts, u64 bytes);
 
 void ice_update_rx_ring_stats(struct ice_rx_ring *ring, u64 pkts, u64 bytes);
 
-void ice_vsi_cfg_frame_size(struct ice_vsi *vsi);
 void ice_write_intrl(struct ice_q_vector *q_vector, u8 intrl);
 void ice_write_itr(struct ice_ring_container *rc, u16 itr);
 void ice_set_q_vector_intrl(struct ice_q_vector *q_vector);
