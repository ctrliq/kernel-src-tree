scsi: core: Introduce {init,exit}_cmd_priv()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-535.el8
commit-author Bart Van Assche <bvanassche@acm.org>
commit 65ca846a53149a1a72cd8d02e7b2e73dd545b834
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-535.el8/65ca846a.failed

The current behavior of the SCSI core is to clear driver-private data
before preparing a request for submission to the SCSI LLD. Make it possible
for SCSI LLDs to disable clearing of driver-private data.

These hooks will be used by a later patch, namely "scsi: ufs: Let the SCSI
core allocate per-command UFS data".

Link: https://lore.kernel.org/r/20200123035637.21848-2-bvanassche@acm.org
	Cc: Tomas Winkler <tomas.winkler@intel.com>
	Cc: Stanley Chu <stanley.chu@mediatek.com>
	Cc: Bean Huo <beanhuo@micron.com>
	Cc: Avri Altman <avri.altman@wdc.com>
	Cc: Can Guo <cang@codeaurora.org>
	Cc: Ming Lei <ming.lei@redhat.com>
	Cc: Johannes Thumshirn <jth@kernel.org>
	Cc: Hannes Reinecke <hare@suse.com>
	Cc: Christoph Hellwig <hch@lst.de>
	Signed-off-by: Bart Van Assche <bvanassche@acm.org>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit 65ca846a53149a1a72cd8d02e7b2e73dd545b834)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/scsi_lib.c
diff --cc drivers/scsi/scsi_lib.c
index 92ad98121f6b,9f201194c46a..000000000000
--- a/drivers/scsi/scsi_lib.c
+++ b/drivers/scsi/scsi_lib.c
@@@ -1103,46 -1097,16 +1103,50 @@@ static void scsi_cleanup_rq(struct requ
  	}
  }
  
++<<<<<<< HEAD
 +/* Add a command to the list used by the aacraid and dpt_i2o drivers */
 +void scsi_add_cmd_to_list(struct scsi_cmnd *cmd)
 +{
 +	struct scsi_device *sdev = cmd->device;
 +	struct Scsi_Host *shost = sdev->host;
 +	unsigned long flags;
 +
 +	if (shost->use_cmd_list) {
 +		spin_lock_irqsave(&sdev->list_lock, flags);
 +		list_add_tail(&cmd->list, &sdev->cmd_list);
 +		spin_unlock_irqrestore(&sdev->list_lock, flags);
 +	}
 +}
 +
 +/* Remove a command from the list used by the aacraid and dpt_i2o drivers */
 +void scsi_del_cmd_from_list(struct scsi_cmnd *cmd)
 +{
 +	struct scsi_device *sdev = cmd->device;
 +	struct Scsi_Host *shost = sdev->host;
 +	unsigned long flags;
 +
 +	if (shost->use_cmd_list) {
 +		spin_lock_irqsave(&sdev->list_lock, flags);
 +		BUG_ON(list_empty(&cmd->list));
 +		list_del_init(&cmd->list);
 +		spin_unlock_irqrestore(&sdev->list_lock, flags);
 +	}
 +}
 +
 +/* Called after a request has been started. */
++=======
+ /* Called before a request is prepared. See also scsi_mq_prep_fn(). */
++>>>>>>> 65ca846a5314 (scsi: core: Introduce {init,exit}_cmd_priv())
  void scsi_init_command(struct scsi_device *dev, struct scsi_cmnd *cmd)
  {
  	void *buf = cmd->sense_buffer;
  	void *prot = cmd->prot_sdb;
 -	struct request *rq = blk_mq_rq_from_pdu(cmd);
 +	struct request *rq = scsi_cmd_to_rq(cmd);
  	unsigned int flags = cmd->flags & SCMD_PRESERVED_FLAGS;
  	unsigned long jiffies_at_alloc;
- 	int retries;
+ 	int retries, to_clear;
  	bool in_flight;
 +	int budget_token = cmd->budget_token;
  
  	if (!blk_rq_is_scsi(rq) && !(flags & SCMD_INITIALIZED)) {
  		flags |= SCMD_INITIALIZED;
* Unmerged path drivers/scsi/scsi_lib.c
diff --git a/include/scsi/scsi_host.h b/include/scsi/scsi_host.h
index 95722cfe1120..cadc95966c08 100644
--- a/include/scsi/scsi_host.h
+++ b/include/scsi/scsi_host.h
@@ -63,6 +63,9 @@ struct scsi_host_template {
 	int (* compat_ioctl)(struct scsi_device *dev, int cmd, void __user *arg);
 #endif
 
+	int (*init_cmd_priv)(struct Scsi_Host *shost, struct scsi_cmnd *cmd);
+	int (*exit_cmd_priv)(struct Scsi_Host *shost, struct scsi_cmnd *cmd);
+
 	/*
 	 * The queuecommand function is used to queue up a scsi
 	 * command block to the LLDD.  When the driver finished
