lib/group_cpus.c: avoid acquiring cpu hotplug lock in group_cpus_evenly

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-535.el8
commit-author Ming Lei <ming.lei@redhat.com>
commit 0263f92fadbb9d294d5971ac57743f882c93b2b3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-535.el8/0263f92f.failed

group_cpus_evenly() could be part of storage driver's error handler, such
as nvme driver, when may happen during CPU hotplug, in which storage queue
has to drain its pending IOs because all CPUs associated with the queue
are offline and the queue is becoming inactive.  And handling IO needs
error handler to provide forward progress.

Then deadlock is caused:

1) inside CPU hotplug handler, CPU hotplug lock is held, and blk-mq's
   handler is waiting for inflight IO

2) error handler is waiting for CPU hotplug lock

3) inflight IO can't be completed in blk-mq's CPU hotplug handler
   because error handling can't provide forward progress.

Solve the deadlock by not holding CPU hotplug lock in group_cpus_evenly(),
in which two stage spreads are taken: 1) the 1st stage is over all present
CPUs; 2) the end stage is over all other CPUs.

Turns out the two stage spread just needs consistent 'cpu_present_mask',
and remove the CPU hotplug lock by storing it into one local cache.  This
way doesn't change correctness, because all CPUs are still covered.

Link: https://lkml.kernel.org/r/20231120083559.285174-1-ming.lei@redhat.com
	Signed-off-by: Ming Lei <ming.lei@redhat.com>
	Reported-by: Yi Zhang <yi.zhang@redhat.com>
	Reported-by: Guangwu Zhang <guazhang@redhat.com>
	Tested-by: Guangwu Zhang <guazhang@redhat.com>
	Reviewed-by: Chengming Zhou <zhouchengming@bytedance.com>
	Reviewed-by: Jens Axboe <axboe@kernel.dk>
	Cc: Keith Busch <kbusch@kernel.org>
	Cc: <stable@vger.kernel.org>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
(cherry picked from commit 0263f92fadbb9d294d5971ac57743f882c93b2b3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	lib/group_cpus.c
* Unmerged path lib/group_cpus.c
* Unmerged path lib/group_cpus.c
