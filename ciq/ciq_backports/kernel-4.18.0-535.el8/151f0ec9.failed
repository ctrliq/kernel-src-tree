scsi: scsi_debug: Drop sdebug_dev_info.num_in_q

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-535.el8
commit-author John Garry <john.g.garry@oracle.com>
commit 151f0ec9ddb539c403a17c86da092e751736c121
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-535.el8/151f0ec9.failed

In schedule_resp(), under certain conditions we check whether the
per-device queue is full (num_in_q == queue depth - 1) and we may inject a
"task set full" (TSF) error if it is.

However how we read num_in_q is racy - many threads may see the same "queue
is full" value (and also issue a TSF).

There is per-queue locking in reading per-device num_in_q, but that would
not help.

Replace how we read num_in_q at this location with a call to
scsi_device_busy(). Calling scsi_device_busy() is likewise racy (as reading
num_in_q), so nothing lost or gained. Calling scsi_device_busy() is also
slow as it needs to read all bits in the per-device budget bitmap, but we
can live with that since we're just a simulator and it's only under a
certain configs which we would see this.

Also move the "task set full" print earlier as it would only be called now
under this condition. However, previously it may not have been called -
like returning early - but keep it simple and always call it.

At this point we can drop sdebug_dev_info.num_in_q - it is difficult to
maintain properly and adds extra normal case command processing.

	Signed-off-by: John Garry <john.g.garry@oracle.com>
	Acked-by: Douglas Gilbert <dgilbert@interlog.com>
Link: https://lore.kernel.org/r/20230313093114.1498305-10-john.g.garry@oracle.com
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit 151f0ec9ddb539c403a17c86da092e751736c121)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/scsi_debug.c
diff --cc drivers/scsi/scsi_debug.c
index 11c773f222f0,9061ff55322a..000000000000
--- a/drivers/scsi/scsi_debug.c
+++ b/drivers/scsi/scsi_debug.c
@@@ -5588,9 -5548,8 +5571,14 @@@ static int schedule_resp(struct scsi_cm
  			 int delta_jiff, int ndelay)
  {
  	bool new_sd_dp;
++<<<<<<< HEAD
 +	bool inject = false;
 +	bool hipri = scsi_cmd_to_rq(cmnd)->cmd_flags & REQ_HIPRI;
 +	int k, num_in_q, qdepth;
++=======
+ 	bool polled = scsi_cmd_to_rq(cmnd)->cmd_flags & REQ_POLLED;
+ 	int k;
++>>>>>>> 151f0ec9ddb5 (scsi: scsi_debug: Drop sdebug_dev_info.num_in_q)
  	unsigned long iflags;
  	u64 ns_from_boot = 0;
  	struct sdebug_queue *sqp;
@@@ -7548,13 -7505,8 +7528,8 @@@ static int sdebug_blk_mq_poll(struct Sc
  			if (kt_from_boot < sd_dp->cmpl_ts)
  				continue;
  
 -		} else		/* ignoring non REQ_POLLED requests */
 +		} else		/* ignoring non REQ_HIPRI requests */
  			continue;
- 		devip = (struct sdebug_dev_info *)scp->device->hostdata;
- 		if (likely(devip))
- 			atomic_dec(&devip->num_in_q);
- 		else
- 			pr_err("devip=NULL from %s\n", __func__);
  		if (unlikely(atomic_read(&retired_max_queue) > 0))
  			retiring = true;
  
* Unmerged path drivers/scsi/scsi_debug.c
