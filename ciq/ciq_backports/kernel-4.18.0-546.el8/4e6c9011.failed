scsi: core: Move scsi_host_busy() out of host lock if it is for per-command

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-546.el8
commit-author Ming Lei <ming.lei@redhat.com>
commit 4e6c9011990726f4d175e2cdfebe5b0b8cce4839
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-546.el8/4e6c9011.failed

Commit 4373534a9850 ("scsi: core: Move scsi_host_busy() out of host lock
for waking up EH handler") intended to fix a hard lockup issue triggered by
EH. The core idea was to move scsi_host_busy() out of the host lock when
processing individual commands for EH. However, a suggested style change
inadvertently caused scsi_host_busy() to remain under the host lock. Fix
this by calling scsi_host_busy() outside the lock.

Fixes: 4373534a9850 ("scsi: core: Move scsi_host_busy() out of host lock for waking up EH handler")
	Cc: Sathya Prakash Veerichetty <safhya.prakash@broadcom.com>
	Cc: Bart Van Assche <bvanassche@acm.org>
	Cc: Ewan D. Milne <emilne@redhat.com>
	Signed-off-by: Ming Lei <ming.lei@redhat.com>
Link: https://lore.kernel.org/r/20240203024521.2006455-1-ming.lei@redhat.com
	Reviewed-by: Bart Van Assche <bvanassche@acm.org>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit 4e6c9011990726f4d175e2cdfebe5b0b8cce4839)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/scsi_error.c
#	drivers/scsi/scsi_lib.c
diff --cc drivers/scsi/scsi_error.c
index c4a96fcf91f9,612489afe8d2..000000000000
--- a/drivers/scsi/scsi_error.c
+++ b/drivers/scsi/scsi_error.c
@@@ -283,7 -287,7 +284,11 @@@ static void scsi_eh_inc_host_failed(str
  
  	spin_lock_irqsave(shost->host_lock, flags);
  	shost->host_failed++;
++<<<<<<< HEAD
 +	scsi_eh_wakeup(shost);
++=======
+ 	scsi_eh_wakeup(shost, busy);
++>>>>>>> 4e6c90119907 (scsi: core: Move scsi_host_busy() out of host lock if it is for per-command)
  	spin_unlock_irqrestore(shost->host_lock, flags);
  }
  
diff --cc drivers/scsi/scsi_lib.c
index c7fd268fbca2,df5ac03d5d6c..000000000000
--- a/drivers/scsi/scsi_lib.c
+++ b/drivers/scsi/scsi_lib.c
@@@ -309,9 -278,11 +309,15 @@@ static void scsi_dec_host_busy(struct S
  	rcu_read_lock();
  	__clear_bit(SCMD_STATE_INFLIGHT, &cmd->state);
  	if (unlikely(scsi_host_in_recovery(shost))) {
+ 		unsigned int busy = scsi_host_busy(shost);
+ 
  		spin_lock_irqsave(shost->host_lock, flags);
  		if (shost->host_failed || shost->host_eh_scheduled)
++<<<<<<< HEAD
 +			scsi_eh_wakeup(shost);
++=======
+ 			scsi_eh_wakeup(shost, busy);
++>>>>>>> 4e6c90119907 (scsi: core: Move scsi_host_busy() out of host lock if it is for per-command)
  		spin_unlock_irqrestore(shost->host_lock, flags);
  	}
  	rcu_read_unlock();
* Unmerged path drivers/scsi/scsi_error.c
* Unmerged path drivers/scsi/scsi_lib.c
