x86/cpu: Load microcode during restore_processor_state()

jira LE-1907
cve CVE-2023-20593
Rebuild_History Non-Buildable kernel-4.18.0-477.27.1.el8_8
commit-author Borislav Petkov <bp@suse.de>
commit f9e14dbbd454581061c736bf70bf5cbb15ac927c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-477.27.1.el8_8/f9e14dbb.failed

When resuming from system sleep state, restore_processor_state()
restores the boot CPU MSRs. These MSRs could be emulated by microcode.
If microcode is not loaded yet, writing to emulated MSRs leads to
unchecked MSR access error:

  ...
  PM: Calling lapic_suspend+0x0/0x210
  unchecked MSR access error: WRMSR to 0x10f (tried to write 0x0...0) at rIP: ... (native_write_msr)
  Call Trace:
    <TASK>
    ? restore_processor_state
    x86_acpi_suspend_lowlevel
    acpi_suspend_enter
    suspend_devices_and_enter
    pm_suspend.cold
    state_store
    kobj_attr_store
    sysfs_kf_write
    kernfs_fop_write_iter
    new_sync_write
    vfs_write
    ksys_write
    __x64_sys_write
    do_syscall_64
    entry_SYSCALL_64_after_hwframe
   RIP: 0033:0x7fda13c260a7

To ensure microcode emulated MSRs are available for restoration, load
the microcode on the boot CPU before restoring these MSRs.

  [ Pawan: write commit message and productize it. ]

Fixes: e2a1256b17b1 ("x86/speculation: Restore speculation related MSRs during S3 resume")
	Reported-by: Kyle D. Pelton <kyle.d.pelton@intel.com>
	Signed-off-by: Borislav Petkov <bp@suse.de>
	Signed-off-by: Pawan Gupta <pawan.kumar.gupta@linux.intel.com>
	Tested-by: Kyle D. Pelton <kyle.d.pelton@intel.com>
	Cc: stable@vger.kernel.org
Link: https://bugzilla.kernel.org/show_bug.cgi?id=215841
Link: https://lore.kernel.org/r/4350dfbf785cd482d3fafa72b2b49c83102df3ce.1650386317.git.pawan.kumar.gupta@linux.intel.com
(cherry picked from commit f9e14dbbd454581061c736bf70bf5cbb15ac927c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/include/asm/microcode.h
#	arch/x86/power/cpu.c
diff --cc arch/x86/include/asm/microcode.h
index 2b7cc5397f80,0c3d3440fe27..000000000000
--- a/arch/x86/include/asm/microcode.h
+++ b/arch/x86/include/asm/microcode.h
@@@ -131,15 -130,13 +131,20 @@@ int __init microcode_init(void)
  extern void __init load_ucode_bsp(void);
  extern void load_ucode_ap(void);
  void reload_early_microcode(void);
 +extern bool get_builtin_firmware(struct cpio_data *cd, const char *name);
  extern bool initrd_gone;
+ void microcode_bsp_resume(void);
  #else
 +static inline int __init microcode_init(void)			{ return 0; };
  static inline void __init load_ucode_bsp(void)			{ }
  static inline void load_ucode_ap(void)				{ }
  static inline void reload_early_microcode(void)			{ }
++<<<<<<< HEAD
 +static inline bool
 +get_builtin_firmware(struct cpio_data *cd, const char *name)	{ return false; }
++=======
+ static inline void microcode_bsp_resume(void)			{ }
++>>>>>>> f9e14dbbd454 (x86/cpu: Load microcode during restore_processor_state())
  #endif
  
  #endif /* _ASM_X86_MICROCODE_H */
diff --cc arch/x86/power/cpu.c
index f48756c903d4,bb176c72891c..000000000000
--- a/arch/x86/power/cpu.c
+++ b/arch/x86/power/cpu.c
@@@ -24,7 -24,8 +24,12 @@@
  #include <asm/debugreg.h>
  #include <asm/cpu.h>
  #include <asm/mmu_context.h>
++<<<<<<< HEAD
 +#include <linux/dmi.h>
++=======
+ #include <asm/cpu_device_id.h>
+ #include <asm/microcode.h>
++>>>>>>> f9e14dbbd454 (x86/cpu: Load microcode during restore_processor_state())
  
  #ifdef CONFIG_X86_32
  __visible unsigned long saved_context_ebx;
@@@ -266,6 -263,17 +271,20 @@@ static void notrace __restore_processor
  	x86_platform.restore_sched_clock_state();
  	mtrr_bp_restore();
  	perf_restore_debug_store();
++<<<<<<< HEAD
++=======
+ 
+ 	c = &cpu_data(smp_processor_id());
+ 	if (cpu_has(c, X86_FEATURE_MSR_IA32_FEAT_CTL))
+ 		init_ia32_feat_ctl(c);
+ 
+ 	microcode_bsp_resume();
+ 
+ 	/*
+ 	 * This needs to happen after the microcode has been updated upon resume
+ 	 * because some of the MSRs are "emulated" in microcode.
+ 	 */
++>>>>>>> f9e14dbbd454 (x86/cpu: Load microcode during restore_processor_state())
  	msr_restore_context(ctxt);
  }
  
* Unmerged path arch/x86/include/asm/microcode.h
diff --git a/arch/x86/kernel/cpu/microcode/core.c b/arch/x86/kernel/cpu/microcode/core.c
index e263da7247af..f0946658f885 100644
--- a/arch/x86/kernel/cpu/microcode/core.c
+++ b/arch/x86/kernel/cpu/microcode/core.c
@@ -778,9 +778,9 @@ static struct subsys_interface mc_cpu_interface = {
 };
 
 /**
- * mc_bp_resume - Update boot CPU microcode during resume.
+ * microcode_bsp_resume - Update boot CPU microcode during resume.
  */
-static void mc_bp_resume(void)
+void microcode_bsp_resume(void)
 {
 	int cpu = smp_processor_id();
 	struct ucode_cpu_info *uci = ucode_cpu_info + cpu;
@@ -792,7 +792,7 @@ static void mc_bp_resume(void)
 }
 
 static struct syscore_ops mc_syscore_ops = {
-	.resume			= mc_bp_resume,
+	.resume			= microcode_bsp_resume,
 };
 
 static int mc_cpu_starting(unsigned int cpu)
* Unmerged path arch/x86/power/cpu.c
