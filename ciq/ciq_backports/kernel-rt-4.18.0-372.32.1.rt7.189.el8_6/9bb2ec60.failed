objtool: Update Retpoline validation

jira LE-1907
cve CVE-2022-23825
cve CVE-2022-29901
cve CVE-2022-29900
cve CVE-2022-23816
Rebuild_History Non-Buildable kernel-rt-4.18.0-372.32.1.rt7.189.el8_6
commit-author Peter Zijlstra <peterz@infradead.org>
commit 9bb2ec608a209018080ca262f771e6a9ff203b6f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-rt-4.18.0-372.32.1.rt7.189.el8_6/9bb2ec60.failed

Update retpoline validation with the new CONFIG_RETPOLINE requirement of
not having bare naked RET instructions.

	Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
	Signed-off-by: Borislav Petkov <bp@suse.de>
	Reviewed-by: Josh Poimboeuf <jpoimboe@kernel.org>
	Signed-off-by: Borislav Petkov <bp@suse.de>
(cherry picked from commit 9bb2ec608a209018080ca262f771e6a9ff203b6f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/include/asm/nospec-branch.h
#	arch/x86/mm/mem_encrypt_boot.S
#	arch/x86/xen/xen-head.S
diff --cc arch/x86/include/asm/nospec-branch.h
index 12722d2e7709,455d79c6c2f3..000000000000
--- a/arch/x86/include/asm/nospec-branch.h
+++ b/arch/x86/include/asm/nospec-branch.h
@@@ -84,32 -76,10 +84,39 @@@
  .endm
  
  /*
++<<<<<<< HEAD
 + * These are the bare retpoline primitives for indirect jmp and call.
 + * Do not use these directly; they only exist to make the ALTERNATIVE
 + * invocation below less ugly.
 + */
 +.macro RETPOLINE_JMP reg:req
 +	call	.Ldo_rop_\@
 +.Lspec_trap_\@:
 +	pause
 +	lfence
 +	jmp	.Lspec_trap_\@
 +.Ldo_rop_\@:
 +	mov	\reg, (%_ASM_SP)
 +	ret
 +.endm
 +
 +/*
 + * This is a wrapper around RETPOLINE_JMP so the called function in reg
 + * returns to the instruction after the macro.
 + */
 +.macro RETPOLINE_CALL reg:req
 +	jmp	.Ldo_call_\@
 +.Ldo_retpoline_jmp_\@:
 +	RETPOLINE_JMP \reg
 +.Ldo_call_\@:
 +	call	.Ldo_retpoline_jmp_\@
 +.endm
++=======
+  * (ab)use RETPOLINE_SAFE on RET to annotate away 'bare' RET instructions
+  * vs RETBleed validation.
+  */
+ #define ANNOTATE_UNRET_SAFE ANNOTATE_RETPOLINE_SAFE
++>>>>>>> 9bb2ec608a20 (objtool: Update Retpoline validation)
  
  /*
   * JMP_NOSPEC and CALL_NOSPEC macros can be used instead of a simple
diff --cc arch/x86/mm/mem_encrypt_boot.S
index 2c0a6fbd4fe8,9de3d900bc92..000000000000
--- a/arch/x86/mm/mem_encrypt_boot.S
+++ b/arch/x86/mm/mem_encrypt_boot.S
@@@ -68,7 -65,10 +68,12 @@@ SYM_FUNC_START(sme_encrypt_execute
  	movq	%rbp, %rsp		/* Restore original stack pointer */
  	pop	%rbp
  
++<<<<<<< HEAD
++=======
+ 	/* Offset to __x86_return_thunk would be wrong here */
+ 	ANNOTATE_UNRET_SAFE
++>>>>>>> 9bb2ec608a20 (objtool: Update Retpoline validation)
  	ret
 -	int3
  SYM_FUNC_END(sme_encrypt_execute)
  
  SYM_FUNC_START(__enc_copy)
@@@ -154,6 -154,9 +159,11 @@@
  	pop	%r12
  	pop	%r15
  
++<<<<<<< HEAD
++=======
+ 	/* Offset to __x86_return_thunk would be wrong here */
+ 	ANNOTATE_UNRET_SAFE
++>>>>>>> 9bb2ec608a20 (objtool: Update Retpoline validation)
  	ret
 -	int3
  .L__enc_copy_end:
  SYM_FUNC_END(__enc_copy)
diff --cc arch/x86/xen/xen-head.S
index 1d0cee3163e4,fa884fc73e07..000000000000
--- a/arch/x86/xen/xen-head.S
+++ b/arch/x86/xen/xen-head.S
@@@ -20,6 -20,28 +20,31 @@@
  #include <xen/interface/xen-mca.h>
  #include <asm/xen/interface.h>
  
++<<<<<<< HEAD
++=======
+ .pushsection .noinstr.text, "ax"
+ 	.balign PAGE_SIZE
+ SYM_CODE_START(hypercall_page)
+ 	.rept (PAGE_SIZE / 32)
+ 		UNWIND_HINT_FUNC
+ 		ANNOTATE_NOENDBR
+ 		ANNOTATE_UNRET_SAFE
+ 		ret
+ 		/*
+ 		 * Xen will write the hypercall page, and sort out ENDBR.
+ 		 */
+ 		.skip 31, 0xcc
+ 	.endr
+ 
+ #define HYPERCALL(n) \
+ 	.equ xen_hypercall_##n, hypercall_page + __HYPERVISOR_##n * 32; \
+ 	.type xen_hypercall_##n, @function; .size xen_hypercall_##n, 32
+ #include <asm/xen-hypercalls.h>
+ #undef HYPERCALL
+ SYM_CODE_END(hypercall_page)
+ .popsection
+ 
++>>>>>>> 9bb2ec608a20 (objtool: Update Retpoline validation)
  #ifdef CONFIG_XEN_PV
  	__INIT
  SYM_CODE_START(startup_xen)
* Unmerged path arch/x86/include/asm/nospec-branch.h
* Unmerged path arch/x86/mm/mem_encrypt_boot.S
* Unmerged path arch/x86/xen/xen-head.S
diff --git a/tools/objtool/check.c b/tools/objtool/check.c
index 2178cad40b84..58d2aed7103e 100644
--- a/tools/objtool/check.c
+++ b/tools/objtool/check.c
@@ -1292,8 +1292,9 @@ static int read_retpoline_hints(struct objtool_file *file)
 		}
 
 		if (insn->type != INSN_JUMP_DYNAMIC &&
-		    insn->type != INSN_CALL_DYNAMIC) {
-			WARN_FUNC("retpoline_safe hint not an indirect jump/call",
+		    insn->type != INSN_CALL_DYNAMIC &&
+		    insn->type != INSN_RETURN) {
+			WARN_FUNC("retpoline_safe hint not an indirect jump/call/ret",
 				  insn->sec, insn->offset);
 			return -1;
 		}
@@ -2301,7 +2302,8 @@ static int validate_retpoline(struct objtool_file *file)
 
 	for_each_insn(file, insn) {
 		if (insn->type != INSN_JUMP_DYNAMIC &&
-		    insn->type != INSN_CALL_DYNAMIC)
+		    insn->type != INSN_CALL_DYNAMIC &&
+		    insn->type != INSN_RETURN)
 			continue;
 
 		if (insn->retpoline_safe)
@@ -2316,9 +2318,14 @@ static int validate_retpoline(struct objtool_file *file)
 		if (!strcmp(insn->sec->name, ".init.text") && !module)
 			continue;
 
-		WARN_FUNC("indirect %s found in RETPOLINE build",
-			  insn->sec, insn->offset,
-			  insn->type == INSN_JUMP_DYNAMIC ? "jump" : "call");
+		if (insn->type == INSN_RETURN) {
+			WARN_FUNC("'naked' return found in RETPOLINE build",
+				  insn->sec, insn->offset);
+		} else {
+			WARN_FUNC("indirect %s found in RETPOLINE build",
+				  insn->sec, insn->offset,
+				  insn->type == INSN_JUMP_DYNAMIC ? "jump" : "call");
+		}
 
 		warnings++;
 	}
