x86/retpoline: Cleanup some #ifdefery

jira LE-1907
cve CVE-2022-23825
cve CVE-2022-29901
cve CVE-2022-29900
cve CVE-2022-23816
Rebuild_History Non-Buildable kernel-rt-4.18.0-372.32.1.rt7.189.el8_6
commit-author Peter Zijlstra <peterz@infradead.org>
commit 369ae6ffc41a3c1137cab697635a84d0cc7cdcea
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-rt-4.18.0-372.32.1.rt7.189.el8_6/369ae6ff.failed

On it's own not much of a cleanup but it prepares for more/similar
code.

	Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
	Signed-off-by: Borislav Petkov <bp@suse.de>
	Reviewed-by: Borislav Petkov <bp@suse.de>
	Reviewed-by: Josh Poimboeuf <jpoimboe@kernel.org>
	Signed-off-by: Borislav Petkov <bp@suse.de>
(cherry picked from commit 369ae6ffc41a3c1137cab697635a84d0cc7cdcea)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/include/asm/disabled-features.h
#	arch/x86/include/asm/nospec-branch.h
#	arch/x86/net/bpf_jit_comp.c
diff --cc arch/x86/include/asm/disabled-features.h
index 8ca9a5833aa4,4061f4907c92..000000000000
--- a/arch/x86/include/asm/disabled-features.h
+++ b/arch/x86/include/asm/disabled-features.h
@@@ -56,8 -50,18 +56,23 @@@
  # define DISABLE_PTI		(1 << (X86_FEATURE_PTI & 31))
  #endif
  
++<<<<<<< HEAD
 +/* Force disable because it's broken beyond repair */
 +#define DISABLE_ENQCMD		(1 << (X86_FEATURE_ENQCMD & 31))
++=======
+ #ifdef CONFIG_RETPOLINE
+ # define DISABLE_RETPOLINE	0
+ #else
+ # define DISABLE_RETPOLINE	((1 << (X86_FEATURE_RETPOLINE & 31)) | \
+ 				 (1 << (X86_FEATURE_RETPOLINE_LFENCE & 31)))
+ #endif
+ 
+ #ifdef CONFIG_INTEL_IOMMU_SVM
+ # define DISABLE_ENQCMD		0
+ #else
+ # define DISABLE_ENQCMD		(1 << (X86_FEATURE_ENQCMD & 31))
+ #endif
++>>>>>>> 369ae6ffc41a (x86/retpoline: Cleanup some #ifdefery)
  
  #ifdef CONFIG_X86_SGX
  # define DISABLE_SGX	0
@@@ -76,10 -86,10 +91,10 @@@
  #define DISABLED_MASK5	0
  #define DISABLED_MASK6	0
  #define DISABLED_MASK7	(DISABLE_PTI)
 -#define DISABLED_MASK8	(DISABLE_TDX_GUEST)
 -#define DISABLED_MASK9	(DISABLE_SGX)
 +#define DISABLED_MASK8	0
 +#define DISABLED_MASK9	(DISABLE_MPX|DISABLE_SGX)
  #define DISABLED_MASK10	0
- #define DISABLED_MASK11	0
+ #define DISABLED_MASK11	(DISABLE_RETPOLINE)
  #define DISABLED_MASK12	0
  #define DISABLED_MASK13	0
  #define DISABLED_MASK14	0
diff --cc arch/x86/include/asm/nospec-branch.h
index 12722d2e7709,5728539a3e77..000000000000
--- a/arch/x86/include/asm/nospec-branch.h
+++ b/arch/x86/include/asm/nospec-branch.h
@@@ -158,7 -120,16 +158,20 @@@
  	_ASM_PTR " 999b\n\t"					\
  	".popsection\n\t"
  
++<<<<<<< HEAD
 +#ifdef CONFIG_RETPOLINE
++=======
+ typedef u8 retpoline_thunk_t[RETPOLINE_THUNK_SIZE];
+ extern retpoline_thunk_t __x86_indirect_thunk_array[];
+ 
+ #ifdef CONFIG_RETPOLINE
+ 
+ #define GEN(reg) \
+ 	extern retpoline_thunk_t __x86_indirect_thunk_ ## reg;
+ #include <asm/GEN-for-each-reg.h>
+ #undef GEN
+ 
++>>>>>>> 369ae6ffc41a (x86/retpoline: Cleanup some #ifdefery)
  #ifdef CONFIG_X86_64
  
  /*
diff --cc arch/x86/net/bpf_jit_comp.c
index 6a8e83bee0d7,79d26908c143..000000000000
--- a/arch/x86/net/bpf_jit_comp.c
+++ b/arch/x86/net/bpf_jit_comp.c
@@@ -385,23 -396,33 +385,35 @@@ int bpf_arch_text_poke(void *ip, enum b
  		/* BPF poking in modules is not supported */
  		return -EINVAL;
  
 -	/*
 -	 * See emit_prologue(), for IBT builds the trampoline hook is preceded
 -	 * with an ENDBR instruction.
 -	 */
 -	if (is_endbr(*(u32 *)ip))
 -		ip += ENDBR_INSN_SIZE;
 -
 -	return __bpf_arch_text_poke(ip, t, old_addr, new_addr);
 +	return __bpf_arch_text_poke(ip, t, old_addr, new_addr, true);
  }
  
 -#define EMIT_LFENCE()	EMIT3(0x0F, 0xAE, 0xE8)
 -
 -static void emit_indirect_jump(u8 **pprog, int reg, u8 *ip)
 +static int get_pop_bytes(bool *callee_regs_used)
  {
 -	u8 *prog = *pprog;
 +	int bytes = 0;
  
++<<<<<<< HEAD
 +	if (callee_regs_used[3])
 +		bytes += 2;
 +	if (callee_regs_used[2])
 +		bytes += 2;
 +	if (callee_regs_used[1])
 +		bytes += 2;
 +	if (callee_regs_used[0])
 +		bytes += 1;
++=======
+ 	if (cpu_feature_enabled(X86_FEATURE_RETPOLINE_LFENCE)) {
+ 		EMIT_LFENCE();
+ 		EMIT2(0xFF, 0xE0 + reg);
+ 	} else if (cpu_feature_enabled(X86_FEATURE_RETPOLINE)) {
+ 		OPTIMIZER_HIDE_VAR(reg);
+ 		emit_jump(&prog, &__x86_indirect_thunk_array[reg], ip);
+ 	} else {
+ 		EMIT2(0xFF, 0xE0 + reg);
+ 	}
++>>>>>>> 369ae6ffc41a (x86/retpoline: Cleanup some #ifdefery)
  
 -	*pprog = prog;
 +	return bytes;
  }
  
  /*
* Unmerged path arch/x86/include/asm/disabled-features.h
* Unmerged path arch/x86/include/asm/nospec-branch.h
* Unmerged path arch/x86/net/bpf_jit_comp.c
