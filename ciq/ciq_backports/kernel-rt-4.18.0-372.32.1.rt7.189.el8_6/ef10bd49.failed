qed: use msleep() in qed_mcp_cmd() and add qed_mcp_cmd_nosleep() for udelay.

jira LE-1907
Rebuild_History Non-Buildable kernel-rt-4.18.0-372.32.1.rt7.189.el8_6
commit-author Venkata Sudheer Kumar Bhavaraju <vbhavaraju@marvell.com>
commit ef10bd49df234aadd4e0ab693e151c10e5338c65
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-rt-4.18.0-372.32.1.rt7.189.el8_6/ef10bd49.failed

Change qed_mcp_cmd() to use msleep() (by setting QED_MB_FLAG_CAN_SLEEP
flag) and add new nosleep() version of the api. These api are used to
issue cmds to management fw and the change affects how driver
behaves while waiting for a response/resource.

All sleepable callers of the existing api now use msleep() version. For
non-sleepable callers, the new nosleep() version is explicitly used.

	Signed-off-by: Venkata Sudheer Kumar Bhavaraju <vbhavaraju@marvell.com>
	Signed-off-by: Alok Prasad <palok@marvell.com>
	Signed-off-by: Ariel Elior <aelior@marvell.com>
Link: https://lore.kernel.org/r/20220131005235.1647881-1-vbhavaraju@marvell.com
	Signed-off-by: Jakub Kicinski <kuba@kernel.org>
(cherry picked from commit ef10bd49df234aadd4e0ab693e151c10e5338c65)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/qlogic/qed/qed_mcp.h
diff --cc drivers/net/ethernet/qlogic/qed/qed_mcp.h
index 8edb450d0abf,2f26bee54e6c..000000000000
--- a/drivers/net/ethernet/qlogic/qed/qed_mcp.h
+++ b/drivers/net/ethernet/qlogic/qed/qed_mcp.h
@@@ -393,21 -393,22 +393,30 @@@ int qed_mcp_get_board_config(struct qed
  			     struct qed_ptt *p_ptt, u32 *p_board_config);
  
  /**
++<<<<<<< HEAD
 + * @brief General function for sending commands to the MCP
 + *        mailbox. It acquire mutex lock for the entire
 + *        operation, from sending the request until the MCP
 + *        response. Waiting for MCP response will be checked up
 + *        to 5 seconds every 5ms.
++=======
+  * qed_mcp_cmd(): Sleepable function for sending commands to the MCP
+  *                mailbox. It acquire mutex lock for the entire
+  *                operation, from sending the request until the MCP
+  *                response. Waiting for MCP response will be checked up
+  *                to 5 seconds every 10ms. Should not be called from atomic
+  *                context.
 - *
 - * @p_hwfn: HW device data.
 - * @p_ptt: PTT required for register access.
 - * @cmd: command to be sent to the MCP.
 - * @param: Optional param
 - * @o_mcp_resp: The MCP response code (exclude sequence).
 - * @o_mcp_param: Optional parameter provided by the MCP
++>>>>>>> ef10bd49df23 (qed: use msleep() in qed_mcp_cmd() and add qed_mcp_cmd_nosleep() for udelay.)
 + *
 + * @param p_hwfn     - hw function
 + * @param p_ptt      - PTT required for register access
 + * @param cmd        - command to be sent to the MCP.
 + * @param param      - Optional param
 + * @param o_mcp_resp - The MCP response code (exclude sequence).
 + * @param o_mcp_param- Optional parameter provided by the MCP
   *                     response
 - *
 - * Return: Int - 0 - Operation was successul.
 + * @return int - 0 - operation
 + * was successul.
   */
  int qed_mcp_cmd(struct qed_hwfn *p_hwfn,
  		struct qed_ptt *p_ptt,
@@@ -417,11 -418,39 +426,42 @@@
  		u32 *o_mcp_param);
  
  /**
++<<<<<<< HEAD
 + * @brief - drains the nig, allowing completion to pass in case of pauses.
 + *          (Should be called only from sleepable context)
++=======
+  * qed_mcp_cmd_nosleep(): Function for sending commands to the MCP
+  *                        mailbox. It acquire mutex lock for the entire
+  *                        operation, from sending the request until the MCP
+  *                        response. Waiting for MCP response will be checked up
+  *                        to 5 seconds every 10us. Should be called when sleep
+  *                        is not allowed.
+  *
+  * @p_hwfn: HW device data.
+  * @p_ptt: PTT required for register access.
+  * @cmd: command to be sent to the MCP.
+  * @param: Optional param
+  * @o_mcp_resp: The MCP response code (exclude sequence).
+  * @o_mcp_param: Optional parameter provided by the MCP
+  *                     response
+  *
+  * Return: Int - 0 - Operation was successul.
+  */
+ int qed_mcp_cmd_nosleep(struct qed_hwfn *p_hwfn,
+ 			struct qed_ptt *p_ptt,
+ 			u32 cmd,
+ 			u32 param,
+ 			u32 *o_mcp_resp,
+ 			u32 *o_mcp_param);
+ 
+ /**
+  * qed_mcp_drain(): drains the nig, allowing completion to pass in
+  *                  case of pauses.
+  *                  (Should be called only from sleepable context)
++>>>>>>> ef10bd49df23 (qed: use msleep() in qed_mcp_cmd() and add qed_mcp_cmd_nosleep() for udelay.)
   *
 - * @p_hwfn: HW device data.
 - * @p_ptt: PTT required for register access.
 - *
 - * Return: Int.
 + * @param p_hwfn
 + * @param p_ptt
   */
  int qed_mcp_drain(struct qed_hwfn *p_hwfn,
  		  struct qed_ptt *p_ptt);
diff --git a/drivers/net/ethernet/qlogic/qed/qed_mcp.c b/drivers/net/ethernet/qlogic/qed/qed_mcp.c
index 4669ad24bc05..f0683c37dd59 100644
--- a/drivers/net/ethernet/qlogic/qed/qed_mcp.c
+++ b/drivers/net/ethernet/qlogic/qed/qed_mcp.c
@@ -613,12 +613,13 @@ static int qed_mcp_cmd_and_union(struct qed_hwfn *p_hwfn,
 				      usecs);
 }
 
-int qed_mcp_cmd(struct qed_hwfn *p_hwfn,
-		struct qed_ptt *p_ptt,
-		u32 cmd,
-		u32 param,
-		u32 *o_mcp_resp,
-		u32 *o_mcp_param)
+static int _qed_mcp_cmd(struct qed_hwfn *p_hwfn,
+			struct qed_ptt *p_ptt,
+			u32 cmd,
+			u32 param,
+			u32 *o_mcp_resp,
+			u32 *o_mcp_param,
+			bool can_sleep)
 {
 	struct qed_mcp_mb_params mb_params;
 	int rc;
@@ -626,6 +627,7 @@ int qed_mcp_cmd(struct qed_hwfn *p_hwfn,
 	memset(&mb_params, 0, sizeof(mb_params));
 	mb_params.cmd = cmd;
 	mb_params.param = param;
+	mb_params.flags = can_sleep ? QED_MB_FLAG_CAN_SLEEP : 0;
 
 	rc = qed_mcp_cmd_and_union(p_hwfn, p_ptt, &mb_params);
 	if (rc)
@@ -637,6 +639,28 @@ int qed_mcp_cmd(struct qed_hwfn *p_hwfn,
 	return 0;
 }
 
+int qed_mcp_cmd(struct qed_hwfn *p_hwfn,
+		struct qed_ptt *p_ptt,
+		u32 cmd,
+		u32 param,
+		u32 *o_mcp_resp,
+		u32 *o_mcp_param)
+{
+	return (_qed_mcp_cmd(p_hwfn, p_ptt, cmd, param,
+			     o_mcp_resp, o_mcp_param, true));
+}
+
+int qed_mcp_cmd_nosleep(struct qed_hwfn *p_hwfn,
+			struct qed_ptt *p_ptt,
+			u32 cmd,
+			u32 param,
+			u32 *o_mcp_resp,
+			u32 *o_mcp_param)
+{
+	return (_qed_mcp_cmd(p_hwfn, p_ptt, cmd, param,
+			     o_mcp_resp, o_mcp_param, false));
+}
+
 static int
 qed_mcp_nvm_wr_cmd(struct qed_hwfn *p_hwfn,
 		   struct qed_ptt *p_ptt,
@@ -1730,8 +1754,8 @@ static void qed_mcp_update_bw(struct qed_hwfn *p_hwfn, struct qed_ptt *p_ptt)
 	qed_configure_pf_max_bandwidth(p_hwfn->cdev, p_info->bandwidth_max);
 
 	/* Acknowledge the MFW */
-	qed_mcp_cmd(p_hwfn, p_ptt, DRV_MSG_CODE_BW_UPDATE_ACK, 0, &resp,
-		    &param);
+	qed_mcp_cmd_nosleep(p_hwfn, p_ptt, DRV_MSG_CODE_BW_UPDATE_ACK, 0, &resp,
+			    &param);
 }
 
 static void qed_mcp_update_stag(struct qed_hwfn *p_hwfn, struct qed_ptt *p_ptt)
@@ -1768,8 +1792,8 @@ static void qed_mcp_update_stag(struct qed_hwfn *p_hwfn, struct qed_ptt *p_ptt)
 		   p_hwfn->mcp_info->func_info.ovlan, p_hwfn->hw_info.hw_mode);
 
 	/* Acknowledge the MFW */
-	qed_mcp_cmd(p_hwfn, p_ptt, DRV_MSG_CODE_S_TAG_UPDATE_ACK, 0,
-		    &resp, &param);
+	qed_mcp_cmd_nosleep(p_hwfn, p_ptt, DRV_MSG_CODE_S_TAG_UPDATE_ACK, 0,
+			    &resp, &param);
 }
 
 static void qed_mcp_handle_fan_failure(struct qed_hwfn *p_hwfn,
@@ -3677,8 +3701,8 @@ static int qed_mcp_resource_cmd(struct qed_hwfn *p_hwfn,
 {
 	int rc;
 
-	rc = qed_mcp_cmd(p_hwfn, p_ptt, DRV_MSG_CODE_RESOURCE_CMD, param,
-			 p_mcp_resp, p_mcp_param);
+	rc = qed_mcp_cmd_nosleep(p_hwfn, p_ptt, DRV_MSG_CODE_RESOURCE_CMD,
+				 param, p_mcp_resp, p_mcp_param);
 	if (rc)
 		return rc;
 
* Unmerged path drivers/net/ethernet/qlogic/qed/qed_mcp.h
