KVM: VMX: Fix IBRS handling after vmexit

jira LE-1907
cve CVE-2022-23825
cve CVE-2022-29901
cve CVE-2022-29900
cve CVE-2022-23816
Rebuild_History Non-Buildable kernel-rt-4.18.0-372.32.1.rt7.189.el8_6
commit-author Josh Poimboeuf <jpoimboe@kernel.org>
commit bea7e31a5caccb6fe8ed989c065072354f0ecb52
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-rt-4.18.0-372.32.1.rt7.189.el8_6/bea7e31a.failed

For legacy IBRS to work, the IBRS bit needs to be always re-written
after vmexit, even if it's already on.

	Signed-off-by: Josh Poimboeuf <jpoimboe@kernel.org>
	Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
	Signed-off-by: Borislav Petkov <bp@suse.de>
(cherry picked from commit bea7e31a5caccb6fe8ed989c065072354f0ecb52)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kvm/vmx/vmx.c
diff --cc arch/x86/kvm/vmx/vmx.c
index e42640520968,421db354b1ab..000000000000
--- a/arch/x86/kvm/vmx/vmx.c
+++ b/arch/x86/kvm/vmx/vmx.c
@@@ -6704,6 -6831,31 +6704,34 @@@ void noinstr vmx_update_host_rsp(struc
  	}
  }
  
++<<<<<<< HEAD
++=======
+ void noinstr vmx_spec_ctrl_restore_host(struct vcpu_vmx *vmx,
+ 					unsigned int flags)
+ {
+ 	u64 hostval = this_cpu_read(x86_spec_ctrl_current);
+ 
+ 	if (!cpu_feature_enabled(X86_FEATURE_MSR_SPEC_CTRL))
+ 		return;
+ 
+ 	if (flags & VMX_RUN_SAVE_SPEC_CTRL)
+ 		vmx->spec_ctrl = __rdmsr(MSR_IA32_SPEC_CTRL);
+ 
+ 	/*
+ 	 * If the guest/host SPEC_CTRL values differ, restore the host value.
+ 	 *
+ 	 * For legacy IBRS, the IBRS bit always needs to be written after
+ 	 * transitioning from a less privileged predictor mode, regardless of
+ 	 * whether the guest/host values differ.
+ 	 */
+ 	if (cpu_feature_enabled(X86_FEATURE_KERNEL_IBRS) ||
+ 	    vmx->spec_ctrl != hostval)
+ 		native_wrmsrl(MSR_IA32_SPEC_CTRL, hostval);
+ 
+ 	barrier_nospec();
+ }
+ 
++>>>>>>> bea7e31a5cac (KVM: VMX: Fix IBRS handling after vmexit)
  static fastpath_t vmx_exit_handlers_fastpath(struct kvm_vcpu *vcpu)
  {
  	switch (to_vmx(vcpu)->exit_reason.basic) {
* Unmerged path arch/x86/kvm/vmx/vmx.c
