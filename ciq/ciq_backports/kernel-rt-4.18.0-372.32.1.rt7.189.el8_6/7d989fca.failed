objtool: Rework allocating stack_ops on decode

jira LE-1907
cve CVE-2022-23825
cve CVE-2022-29901
cve CVE-2022-29900
cve CVE-2022-23816
Rebuild_History Non-Buildable kernel-rt-4.18.0-372.32.1.rt7.189.el8_6
commit-author Peter Zijlstra <peterz@infradead.org>
commit 7d989fcadd6e225a61d6490dd15bdbdfc8a53d5c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-rt-4.18.0-372.32.1.rt7.189.el8_6/7d989fca.failed

Wrap each stack_op in a macro that allocates and adds it to the list.
This simplifies trying to figure out what to do with the pre-allocated
stack_op at the end.

	Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
	Reviewed-by: Alexandre Chartre <alexandre.chartre@oracle.com>
	Reviewed-by: Miroslav Benes <mbenes@suse.cz>
	Acked-by: Josh Poimboeuf <jpoimboe@redhat.com>
Link: https://lkml.kernel.org/r/20200428191659.736151601@infradead.org
(cherry picked from commit 7d989fcadd6e225a61d6490dd15bdbdfc8a53d5c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/objtool/arch/x86/decode.c
diff --cc tools/objtool/arch/x86/decode.c
index 5a300ab584c8,97e66c779520..000000000000
--- a/tools/objtool/arch/x86/decode.c
+++ b/tools/objtool/arch/x86/decode.c
@@@ -78,7 -67,22 +78,26 @@@ bool arch_callee_saved_reg(unsigned cha
  	}
  }
  
++<<<<<<< HEAD
 +int arch_decode_instruction(struct elf *elf, struct section *sec,
++=======
+ unsigned long arch_dest_rela_offset(int addend)
+ {
+ 	return addend + 4;
+ }
+ 
+ unsigned long arch_jump_destination(struct instruction *insn)
+ {
+ 	return insn->offset + insn->len + insn->immediate;
+ }
+ 
+ #define ADD_OP(op) \
+ 	if (!(op = calloc(1, sizeof(*op)))) \
+ 		return -1; \
+ 	else for (list_add_tail(&op->list, ops_list); op; op = NULL)
+ 
+ int arch_decode_instruction(const struct elf *elf, const struct section *sec,
++>>>>>>> 7d989fcadd6e (objtool: Rework allocating stack_ops on decode)
  			    unsigned long offset, unsigned int maxlen,
  			    unsigned int *len, enum insn_type *type,
  			    unsigned long *immediate,
@@@ -447,9 -490,21 +505,25 @@@
  		*type = INSN_RETURN;
  		break;
  
++<<<<<<< HEAD
++=======
+ 	case 0xcf: /* iret */
+ 		*type = INSN_EXCEPTION_RETURN;
+ 
+ 		ADD_OP(op) {
+ 			/* add $40, %rsp */
+ 			op->src.type = OP_SRC_ADD;
+ 			op->src.reg = CFI_SP;
+ 			op->src.offset = 5*8;
+ 			op->dest.type = OP_DEST_REG;
+ 			op->dest.reg = CFI_SP;
+ 		}
+ 		break;
+ 
++>>>>>>> 7d989fcadd6e (objtool: Rework allocating stack_ops on decode)
  	case 0xca: /* retf */
  	case 0xcb: /* retf */
 +	case 0xcf: /* iret */
  		*type = INSN_CONTEXT_SWITCH;
  		break;
  
@@@ -495,11 -552,6 +571,14 @@@
  
  	*immediate = insn.immediate.nbytes ? insn.immediate.value : 0;
  
++<<<<<<< HEAD
 +	if (*type == INSN_STACK)
 +		list_add_tail(&op->list, ops_list);
 +	else
 +		free(op);
 +
++=======
++>>>>>>> 7d989fcadd6e (objtool: Rework allocating stack_ops on decode)
  	return 0;
  }
  
* Unmerged path tools/objtool/arch/x86/decode.c
