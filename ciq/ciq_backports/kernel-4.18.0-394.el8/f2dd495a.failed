netfilter: nf_conntrack_tcp: preserve liberal flag in tcp options

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-394.el8
commit-author Pablo Neira Ayuso <pablo@netfilter.org>
commit f2dd495a8d589371289981d5ed33e6873df94ecc
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-394.el8/f2dd495a.failed

Do not reset IP_CT_TCP_FLAG_BE_LIBERAL flag in out-of-sync scenarios
coming before the TCP window tracking, otherwise such connections will
fail in the window check.

Update tcp_options() to leave this flag in place and add a new helper
function to reset the tcp window state.

Based on patch from Sven Auhagen.

Fixes: c4832c7bbc3f ("netfilter: nf_ct_tcp: improve out-of-sync situation in TCP tracking")
	Tested-by: Sven Auhagen <sven.auhagen@voleatech.de>
	Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
(cherry picked from commit f2dd495a8d589371289981d5ed33e6873df94ecc)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/netfilter/nf_conntrack_proto_tcp.c
diff --cc net/netfilter/nf_conntrack_proto_tcp.c
index afddcaa38fca,8ec55cd72572..000000000000
--- a/net/netfilter/nf_conntrack_proto_tcp.c
+++ b/net/netfilter/nf_conntrack_proto_tcp.c
@@@ -355,10 -338,11 +355,10 @@@ static void tcp_options(const struct sk
  
  	ptr = skb_header_pointer(skb, dataoff + sizeof(struct tcphdr),
  				 length, buff);
 -	if (!ptr)
 -		return;
 +	BUG_ON(ptr == NULL);
  
- 	state->td_scale =
- 	state->flags = 0;
+ 	state->td_scale = 0;
+ 	state->flags &= IP_CT_TCP_FLAG_BE_LIBERAL;
  
  	while (length > 0) {
  		int opcode=*ptr++;
@@@ -860,6 -846,32 +860,35 @@@ static noinline bool tcp_new(struct nf_
  	return true;
  }
  
++<<<<<<< HEAD
++=======
+ static bool tcp_can_early_drop(const struct nf_conn *ct)
+ {
+ 	switch (ct->proto.tcp.state) {
+ 	case TCP_CONNTRACK_FIN_WAIT:
+ 	case TCP_CONNTRACK_LAST_ACK:
+ 	case TCP_CONNTRACK_TIME_WAIT:
+ 	case TCP_CONNTRACK_CLOSE:
+ 	case TCP_CONNTRACK_CLOSE_WAIT:
+ 		return true;
+ 	default:
+ 		break;
+ 	}
+ 
+ 	return false;
+ }
+ 
+ static void nf_ct_tcp_state_reset(struct ip_ct_tcp_state *state)
+ {
+ 	state->td_end		= 0;
+ 	state->td_maxend	= 0;
+ 	state->td_maxwin	= 0;
+ 	state->td_maxack	= 0;
+ 	state->td_scale		= 0;
+ 	state->flags		&= IP_CT_TCP_FLAG_BE_LIBERAL;
+ }
+ 
++>>>>>>> f2dd495a8d58 (netfilter: nf_conntrack_tcp: preserve liberal flag in tcp options)
  /* Returns verdict for packet, or -1 for invalid. */
  int nf_conntrack_tcp_packet(struct nf_conn *ct,
  			    struct sk_buff *skb,
* Unmerged path net/netfilter/nf_conntrack_proto_tcp.c
