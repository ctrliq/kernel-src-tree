s390/kexec: fix memory leak of ipl report buffer

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-394.el8
commit-author Baoquan He <bhe@redhat.com>
commit 4aa9340584e37debef06fa99b56d064beb723891
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-394.el8/4aa93405.failed

unreferenced object 0x38000195000 (size 4096):
  comm "kexec", pid 8548, jiffies 4294953647 (age 32443.270s)
  hex dump (first 32 bytes):
    00 00 00 c8 20 00 00 00 00 00 00 c0 02 80 00 00  .... ...........
    40 40 40 40 40 40 40 40 00 00 00 00 00 00 00 00  @@@@@@@@........
  backtrace:
    [<0000000011a2f199>] __vmalloc_node_range+0xc0/0x140
    [<0000000081fa2752>] vzalloc+0x5a/0x70
    [<0000000063a4c92d>] ipl_report_finish+0x2c/0x180
    [<00000000553304da>] kexec_file_add_ipl_report+0xf4/0x150
    [<00000000862d033f>] kexec_file_add_components+0x124/0x160
    [<000000000d2717bb>] arch_kexec_kernel_image_load+0x62/0x90
    [<000000002e0373b6>] kimage_file_alloc_init+0x1aa/0x2e0
    [<0000000060f2d14f>] __do_sys_kexec_file_load+0x17c/0x2c0
    [<000000008c86fe5a>] __s390x_sys_kexec_file_load+0x40/0x50
    [<000000001fdb9dac>] __do_syscall+0x1bc/0x1f0
    [<000000003ee4258d>] system_call+0x78/0xa0

	Signed-off-by: Baoquan He <bhe@redhat.com>
	Reviewed-by: Philipp Rudo <prudo@redhat.com>
Fixes: 99feaa717e55 ("s390/kexec_file: Create ipl report and pass to next kernel")
	Cc: <stable@vger.kernel.org> # v5.2: 20c76e242e70: s390/kexec: fix return code handling
	Cc: <stable@vger.kernel.org> # v5.2
Link: https://lore.kernel.org/r/20211116033101.GD21646@MiWiFi-R3L-srv
	Signed-off-by: Heiko Carstens <hca@linux.ibm.com>
(cherry picked from commit 4aa9340584e37debef06fa99b56d064beb723891)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/s390/kernel/machine_kexec_file.c
diff --cc arch/s390/kernel/machine_kexec_file.c
index c1090f0b1f6a,9975ad200d74..000000000000
--- a/arch/s390/kernel/machine_kexec_file.c
+++ b/arch/s390/kernel/machine_kexec_file.c
@@@ -314,16 -331,10 +316,25 @@@ int arch_kexec_apply_relocations_add(st
  	return 0;
  }
  
++<<<<<<< HEAD
 +int arch_kexec_kernel_image_probe(struct kimage *image, void *buf,
 +				  unsigned long buf_len)
 +{
 +	/* A kernel must be at least large enough to contain head.S. During
 +	 * load memory in head.S will be accessed, e.g. to register the next
 +	 * command line. If the next kernel were smaller the current kernel
 +	 * will panic at load.
 +	 */
 +	if (buf_len < HEAD_END)
 +		return -ENOEXEC;
 +
 +	return kexec_image_probe_default(image, buf, buf_len);
++=======
+ int arch_kimage_file_post_load_cleanup(struct kimage *image)
+ {
+ 	vfree(image->arch.ipl_buf);
+ 	image->arch.ipl_buf = NULL;
+ 
+ 	return kexec_image_post_load_cleanup_default(image);
++>>>>>>> 4aa9340584e3 (s390/kexec: fix memory leak of ipl report buffer)
  }
diff --git a/arch/s390/include/asm/kexec.h b/arch/s390/include/asm/kexec.h
index ea398a05f643..7f3c9ac34bd8 100644
--- a/arch/s390/include/asm/kexec.h
+++ b/arch/s390/include/asm/kexec.h
@@ -74,6 +74,12 @@ void *kexec_file_add_components(struct kimage *image,
 int arch_kexec_do_relocs(int r_type, void *loc, unsigned long val,
 			 unsigned long addr);
 
+#define ARCH_HAS_KIMAGE_ARCH
+
+struct kimage_arch {
+	void *ipl_buf;
+};
+
 extern const struct kexec_file_ops s390_kexec_image_ops;
 extern const struct kexec_file_ops s390_kexec_elf_ops;
 
* Unmerged path arch/s390/kernel/machine_kexec_file.c
