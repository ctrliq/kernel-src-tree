xfs: move the di_extsize field to struct xfs_inode

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-394.el8
commit-author Christoph Hellwig <hch@lst.de>
commit 031474c28a3a9a2772a715d1ec9770f9068ea5a4
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-394.el8/031474c2.failed

In preparation of removing the historic icinode struct, move the extsize
field into the containing xfs_inode structure.

	Signed-off-by: Christoph Hellwig <hch@lst.de>
	Reviewed-by: Darrick J. Wong <djwong@kernel.org>
	Signed-off-by: Darrick J. Wong <djwong@kernel.org>
(cherry picked from commit 031474c28a3a9a2772a715d1ec9770f9068ea5a4)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/xfs/libxfs/xfs_inode_buf.c
#	fs/xfs/libxfs/xfs_inode_buf.h
#	fs/xfs/xfs_inode_item.c
diff --cc fs/xfs/libxfs/xfs_inode_buf.c
index 671aeb012e3f,bb709584921d..000000000000
--- a/fs/xfs/libxfs/xfs_inode_buf.c
+++ b/fs/xfs/libxfs/xfs_inode_buf.c
@@@ -226,9 -226,9 +226,15 @@@ xfs_inode_from_disk
  	inode->i_mtime = xfs_inode_from_disk_ts(from, from->di_mtime);
  	inode->i_ctime = xfs_inode_from_disk_ts(from, from->di_ctime);
  
++<<<<<<< HEAD
 +	to->di_size = be64_to_cpu(from->di_size);
 +	to->di_nblocks = be64_to_cpu(from->di_nblocks);
 +	to->di_extsize = be32_to_cpu(from->di_extsize);
++=======
+ 	ip->i_disk_size = be64_to_cpu(from->di_size);
+ 	ip->i_nblocks = be64_to_cpu(from->di_nblocks);
+ 	ip->i_extsize = be32_to_cpu(from->di_extsize);
++>>>>>>> 031474c28a3a (xfs: move the di_extsize field to struct xfs_inode)
  	to->di_forkoff = from->di_forkoff;
  	to->di_flags	= be16_to_cpu(from->di_flags);
  
@@@ -305,9 -305,9 +311,15 @@@ xfs_inode_to_disk
  	to->di_gen = cpu_to_be32(inode->i_generation);
  	to->di_mode = cpu_to_be16(inode->i_mode);
  
++<<<<<<< HEAD
 +	to->di_size = cpu_to_be64(from->di_size);
 +	to->di_nblocks = cpu_to_be64(from->di_nblocks);
 +	to->di_extsize = cpu_to_be32(from->di_extsize);
++=======
+ 	to->di_size = cpu_to_be64(ip->i_disk_size);
+ 	to->di_nblocks = cpu_to_be64(ip->i_nblocks);
+ 	to->di_extsize = cpu_to_be32(ip->i_extsize);
++>>>>>>> 031474c28a3a (xfs: move the di_extsize field to struct xfs_inode)
  	to->di_nextents = cpu_to_be32(xfs_ifork_nextents(&ip->i_df));
  	to->di_anextents = cpu_to_be16(xfs_ifork_nextents(ip->i_afp));
  	to->di_forkoff = from->di_forkoff;
diff --cc fs/xfs/libxfs/xfs_inode_buf.h
index 406f66799288,6bc78856373e..000000000000
--- a/fs/xfs/libxfs/xfs_inode_buf.h
+++ b/fs/xfs/libxfs/xfs_inode_buf.h
@@@ -17,9 -17,6 +17,12 @@@ struct xfs_dinode
   */
  struct xfs_icdinode {
  	uint16_t	di_flushiter;	/* incremented on flush */
++<<<<<<< HEAD
 +	xfs_fsize_t	di_size;	/* number of bytes in file */
 +	xfs_rfsblock_t	di_nblocks;	/* # of direct & btree blocks used */
 +	xfs_extlen_t	di_extsize;	/* basic/minimum extent size for file */
++=======
++>>>>>>> 031474c28a3a (xfs: move the di_extsize field to struct xfs_inode)
  	uint8_t		di_forkoff;	/* attr fork offs, <<3 for 64b align */
  	uint16_t	di_flags;	/* random flags, XFS_DIFLAG_... */
  
diff --cc fs/xfs/xfs_inode_item.c
index 342023fbc07e,a0136fe771f0..000000000000
--- a/fs/xfs/xfs_inode_item.c
+++ b/fs/xfs/xfs_inode_item.c
@@@ -383,9 -369,9 +383,15 @@@ xfs_inode_to_log_dinode
  	to->di_gen = inode->i_generation;
  	to->di_mode = inode->i_mode;
  
++<<<<<<< HEAD
 +	to->di_size = from->di_size;
 +	to->di_nblocks = from->di_nblocks;
 +	to->di_extsize = from->di_extsize;
++=======
+ 	to->di_size = ip->i_disk_size;
+ 	to->di_nblocks = ip->i_nblocks;
+ 	to->di_extsize = ip->i_extsize;
++>>>>>>> 031474c28a3a (xfs: move the di_extsize field to struct xfs_inode)
  	to->di_nextents = xfs_ifork_nextents(&ip->i_df);
  	to->di_anextents = xfs_ifork_nextents(ip->i_afp);
  	to->di_forkoff = from->di_forkoff;
diff --git a/fs/xfs/libxfs/xfs_bmap.c b/fs/xfs/libxfs/xfs_bmap.c
index 09b89e8dc50f..f63be14e5e8a 100644
--- a/fs/xfs/libxfs/xfs_bmap.c
+++ b/fs/xfs/libxfs/xfs_bmap.c
@@ -2938,7 +2938,7 @@ xfs_bmap_add_extent_hole_real(
  */
 
 /*
- * Adjust the size of the new extent based on di_extsize and rt extsize.
+ * Adjust the size of the new extent based on i_extsize and rt extsize.
  */
 int
 xfs_bmap_extsize_align(
* Unmerged path fs/xfs/libxfs/xfs_inode_buf.c
* Unmerged path fs/xfs/libxfs/xfs_inode_buf.h
diff --git a/fs/xfs/xfs_inode.c b/fs/xfs/xfs_inode.c
index d856a2225b9c..95d414fa912a 100644
--- a/fs/xfs/xfs_inode.c
+++ b/fs/xfs/xfs_inode.c
@@ -60,8 +60,8 @@ xfs_get_extsz_hint(
 	 */
 	if (xfs_is_always_cow_inode(ip))
 		return 0;
-	if ((ip->i_d.di_flags & XFS_DIFLAG_EXTSIZE) && ip->i_d.di_extsize)
-		return ip->i_d.di_extsize;
+	if ((ip->i_d.di_flags & XFS_DIFLAG_EXTSIZE) && ip->i_extsize)
+		return ip->i_extsize;
 	if (XFS_IS_REALTIME_INODE(ip))
 		return ip->i_mount->m_sb.sb_rextsize;
 	return 0;
@@ -712,7 +712,7 @@ xfs_inode_inherit_flags(
 			di_flags |= XFS_DIFLAG_RTINHERIT;
 		if (pip->i_d.di_flags & XFS_DIFLAG_EXTSZINHERIT) {
 			di_flags |= XFS_DIFLAG_EXTSZINHERIT;
-			ip->i_d.di_extsize = pip->i_d.di_extsize;
+			ip->i_extsize = pip->i_extsize;
 		}
 		if (pip->i_d.di_flags & XFS_DIFLAG_PROJINHERIT)
 			di_flags |= XFS_DIFLAG_PROJINHERIT;
@@ -722,7 +722,7 @@ xfs_inode_inherit_flags(
 			di_flags |= XFS_DIFLAG_REALTIME;
 		if (pip->i_d.di_flags & XFS_DIFLAG_EXTSZINHERIT) {
 			di_flags |= XFS_DIFLAG_EXTSIZE;
-			ip->i_d.di_extsize = pip->i_d.di_extsize;
+			ip->i_extsize = pip->i_extsize;
 		}
 	}
 	if ((pip->i_d.di_flags & XFS_DIFLAG_NOATIME) &&
@@ -836,7 +836,7 @@ xfs_init_new_inode(
 	inode->i_atime = tv;
 	inode->i_ctime = tv;
 
-	ip->i_d.di_extsize = 0;
+	ip->i_extsize = 0;
 	ip->i_d.di_flags = 0;
 
 	if (xfs_sb_version_has_v3inode(&mp->m_sb)) {
diff --git a/fs/xfs/xfs_inode.h b/fs/xfs/xfs_inode.h
index ab59fceed361..3978df410d88 100644
--- a/fs/xfs/xfs_inode.h
+++ b/fs/xfs/xfs_inode.h
@@ -55,6 +55,7 @@ typedef struct xfs_inode {
 	unsigned long		i_flags;	/* see defined flags below */
 	uint64_t		i_delayed_blks;	/* count of delay alloc blks */
 	prid_t			i_projid;	/* owner's project id */
+	xfs_extlen_t		i_extsize;	/* basic/minimum extent size */
 
 	struct xfs_icdinode	i_d;		/* most of ondisk inode */
 
* Unmerged path fs/xfs/xfs_inode_item.c
diff --git a/fs/xfs/xfs_ioctl.c b/fs/xfs/xfs_ioctl.c
index 0b05f7dd7822..b6130be20fdb 100644
--- a/fs/xfs/xfs_ioctl.c
+++ b/fs/xfs/xfs_ioctl.c
@@ -1116,7 +1116,7 @@ xfs_fill_fsxattr(
 	struct xfs_ifork	*ifp = attr ? ip->i_afp : &ip->i_df;
 
 	simple_fill_fsxattr(fa, xfs_ip2xflags(ip));
-	fa->fsx_extsize = ip->i_d.di_extsize << ip->i_mount->m_sb.sb_blocklog;
+	fa->fsx_extsize = ip->i_extsize << ip->i_mount->m_sb.sb_blocklog;
 	fa->fsx_cowextsize = ip->i_d.di_cowextsize <<
 			ip->i_mount->m_sb.sb_blocklog;
 	fa->fsx_projid = ip->i_projid;
@@ -1219,7 +1219,7 @@ xfs_ioctl_setattr_xflags(
 	/* If realtime flag is set then must have realtime device */
 	if (fa->fsx_xflags & FS_XFLAG_REALTIME) {
 		if (mp->m_sb.sb_rblocks == 0 || mp->m_sb.sb_rextsize == 0 ||
-		    (ip->i_d.di_extsize % mp->m_sb.sb_rextsize))
+		    (ip->i_extsize % mp->m_sb.sb_rextsize))
 			return -EINVAL;
 	}
 
@@ -1342,7 +1342,7 @@ xfs_ioctl_setattr_check_extsize(
 	xfs_fsblock_t		extsize_fsb;
 
 	if (S_ISREG(VFS_I(ip)->i_mode) && ip->i_df.if_nextents &&
-	    ((ip->i_d.di_extsize << mp->m_sb.sb_blocklog) != fa->fsx_extsize))
+	    ((ip->i_extsize << mp->m_sb.sb_blocklog) != fa->fsx_extsize))
 		return -EINVAL;
 
 	if (fa->fsx_extsize == 0)
@@ -1512,9 +1512,9 @@ xfs_ioctl_setattr(
 	 * are set on the inode then unconditionally clear the extent size hint.
 	 */
 	if (ip->i_d.di_flags & (XFS_DIFLAG_EXTSIZE | XFS_DIFLAG_EXTSZINHERIT))
-		ip->i_d.di_extsize = fa->fsx_extsize >> mp->m_sb.sb_blocklog;
+		ip->i_extsize = fa->fsx_extsize >> mp->m_sb.sb_blocklog;
 	else
-		ip->i_d.di_extsize = 0;
+		ip->i_extsize = 0;
 	if (xfs_sb_version_has_v3inode(&mp->m_sb) &&
 	    (ip->i_d.di_flags2 & XFS_DIFLAG2_COWEXTSIZE))
 		ip->i_d.di_cowextsize = fa->fsx_cowextsize >>
diff --git a/fs/xfs/xfs_itable.c b/fs/xfs/xfs_itable.c
index 434d70c7cd93..0f8373e6b0f4 100644
--- a/fs/xfs/xfs_itable.c
+++ b/fs/xfs/xfs_itable.c
@@ -101,7 +101,7 @@ xfs_bulkstat_one_int(
 	buf->bs_mode = inode->i_mode;
 
 	buf->bs_xflags = xfs_ip2xflags(ip);
-	buf->bs_extsize_blks = dic->di_extsize;
+	buf->bs_extsize_blks = ip->i_extsize;
 	buf->bs_extents = xfs_ifork_nextents(&ip->i_df);
 	xfs_bulkstat_health(ip, buf);
 	buf->bs_aextents = xfs_ifork_nextents(ip->i_afp);
