RDMA/rxe: Replace pool key by rxe->mcg_tree

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-394.el8
commit-author Bob Pearson <rpearsonhpe@gmail.com>
commit 8a0a5fe0c462438a8c423ebaa0fbb7af5055a155
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-394.el8/8a0a5fe0.failed

Continuing to decouple mcg from rxe pools. Create red-black tree code in
rxe_mcast.c to hold mcg index. Replace pool key calls by calls to local
red-black routines.

Link: https://lore.kernel.org/r/20220208211644.123457-6-rpearsonhpe@gmail.com
	Signed-off-by: Bob Pearson <rpearsonhpe@gmail.com>
	Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
(cherry picked from commit 8a0a5fe0c462438a8c423ebaa0fbb7af5055a155)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/sw/rxe/rxe.c
#	drivers/infiniband/sw/rxe/rxe_loc.h
#	drivers/infiniband/sw/rxe/rxe_mcast.c
#	drivers/infiniband/sw/rxe/rxe_verbs.h
diff --cc drivers/infiniband/sw/rxe/rxe.c
index 1eb33c81b99d,dc36148272dd..000000000000
--- a/drivers/infiniband/sw/rxe/rxe.c
+++ b/drivers/infiniband/sw/rxe/rxe.c
@@@ -213,6 -203,10 +213,13 @@@ static int rxe_init(struct rxe_dev *rxe
  	spin_lock_init(&rxe->pending_lock);
  	INIT_LIST_HEAD(&rxe->pending_mmaps);
  
++<<<<<<< HEAD
++=======
+ 	/* init multicast support */
+ 	spin_lock_init(&rxe->mcg_lock);
+ 	rxe->mcg_tree = RB_ROOT;
+ 
++>>>>>>> 8a0a5fe0c462 (RDMA/rxe: Replace pool key by rxe->mcg_tree)
  	mutex_init(&rxe->usdev_lock);
  
  	return 0;
diff --cc drivers/infiniband/sw/rxe/rxe_loc.h
index 9b2391b4090f,d41831878fa6..000000000000
--- a/drivers/infiniband/sw/rxe/rxe_loc.h
+++ b/drivers/infiniband/sw/rxe/rxe_loc.h
@@@ -37,21 -37,13 +37,28 @@@ int rxe_cq_post(struct rxe_cq *cq, stru
  
  void rxe_cq_disable(struct rxe_cq *cq);
  
 -void rxe_cq_cleanup(struct rxe_pool_elem *arg);
 +void rxe_cq_cleanup(struct rxe_pool_entry *arg);
  
  /* rxe_mcast.c */
++<<<<<<< HEAD
 +int rxe_mcast_get_grp(struct rxe_dev *rxe, union ib_gid *mgid,
 +		      struct rxe_mc_grp **grp_p);
 +
 +int rxe_mcast_add_grp_elem(struct rxe_dev *rxe, struct rxe_qp *qp,
 +			   struct rxe_mc_grp *grp);
 +
 +int rxe_mcast_drop_grp_elem(struct rxe_dev *rxe, struct rxe_qp *qp,
 +			    union ib_gid *mgid);
 +
 +void rxe_drop_all_mcast_groups(struct rxe_qp *qp);
 +
 +void rxe_mc_cleanup(struct rxe_pool_entry *arg);
++=======
+ struct rxe_mcg *rxe_lookup_mcg(struct rxe_dev *rxe, union ib_gid *mgid);
+ int rxe_attach_mcast(struct ib_qp *ibqp, union ib_gid *mgid, u16 mlid);
+ int rxe_detach_mcast(struct ib_qp *ibqp, union ib_gid *mgid, u16 mlid);
+ void rxe_mc_cleanup(struct rxe_pool_elem *elem);
++>>>>>>> 8a0a5fe0c462 (RDMA/rxe: Replace pool key by rxe->mcg_tree)
  
  /* rxe_mmap.c */
  struct rxe_mmap_info {
diff --cc drivers/infiniband/sw/rxe/rxe_mcast.c
index 5f1c72c1473c,8585521169b6..000000000000
--- a/drivers/infiniband/sw/rxe/rxe_mcast.c
+++ b/drivers/infiniband/sw/rxe/rxe_mcast.c
@@@ -25,74 -25,258 +25,300 @@@ static int rxe_mcast_delete(struct rxe_
  	return dev_mc_del(rxe->ndev, ll_addr);
  }
  
++<<<<<<< HEAD
 +/* caller should hold mc_grp_pool->pool_lock */
 +static struct rxe_mc_grp *create_grp(struct rxe_dev *rxe,
 +				     struct rxe_pool *pool,
 +				     union ib_gid *mgid)
 +{
 +	int err;
 +	struct rxe_mc_grp *grp;
 +
 +	grp = rxe_alloc_locked(&rxe->mc_grp_pool);
 +	if (!grp)
 +		return ERR_PTR(-ENOMEM);
 +
 +	INIT_LIST_HEAD(&grp->qp_list);
 +	spin_lock_init(&grp->mcg_lock);
 +	grp->rxe = rxe;
 +	rxe_add_key_locked(grp, mgid);
 +
 +	err = rxe_mcast_add(rxe, mgid);
 +	if (unlikely(err)) {
 +		rxe_drop_key_locked(grp);
 +		rxe_drop_ref(grp);
 +		return ERR_PTR(err);
 +	}
 +
 +	return grp;
 +}
 +
 +int rxe_mcast_get_grp(struct rxe_dev *rxe, union ib_gid *mgid,
 +		      struct rxe_mc_grp **grp_p)
 +{
 +	int err;
 +	struct rxe_mc_grp *grp;
 +	struct rxe_pool *pool = &rxe->mc_grp_pool;
 +	unsigned long flags;
 +
 +	if (rxe->attr.max_mcast_qp_attach == 0)
 +		return -EINVAL;
 +
 +	write_lock_irqsave(&pool->pool_lock, flags);
 +
 +	grp = rxe_pool_get_key_locked(pool, mgid);
 +	if (grp)
 +		goto done;
 +
 +	grp = create_grp(rxe, pool, mgid);
 +	if (IS_ERR(grp)) {
 +		write_unlock_irqrestore(&pool->pool_lock, flags);
 +		err = PTR_ERR(grp);
 +		return err;
 +	}
 +
 +done:
 +	write_unlock_irqrestore(&pool->pool_lock, flags);
 +	*grp_p = grp;
++	return 0;
++=======
+ /**
+  * __rxe_insert_mcg - insert an mcg into red-black tree (rxe->mcg_tree)
+  * @mcg: mcg object with an embedded red-black tree node
+  *
+  * Context: caller must hold a reference to mcg and rxe->mcg_lock and
+  * is responsible to avoid adding the same mcg twice to the tree.
+  */
+ static void __rxe_insert_mcg(struct rxe_mcg *mcg)
+ {
+ 	struct rb_root *tree = &mcg->rxe->mcg_tree;
+ 	struct rb_node **link = &tree->rb_node;
+ 	struct rb_node *node = NULL;
+ 	struct rxe_mcg *tmp;
+ 	int cmp;
+ 
+ 	while (*link) {
+ 		node = *link;
+ 		tmp = rb_entry(node, struct rxe_mcg, node);
+ 
+ 		cmp = memcmp(&tmp->mgid, &mcg->mgid, sizeof(mcg->mgid));
+ 		if (cmp > 0)
+ 			link = &(*link)->rb_left;
+ 		else
+ 			link = &(*link)->rb_right;
+ 	}
+ 
+ 	rb_link_node(&mcg->node, node, link);
+ 	rb_insert_color(&mcg->node, tree);
+ }
+ 
+ /**
+  * __rxe_remove_mcg - remove an mcg from red-black tree holding lock
+  * @mcg: mcast group object with an embedded red-black tree node
+  *
+  * Context: caller must hold a reference to mcg and rxe->mcg_lock
+  */
+ static void __rxe_remove_mcg(struct rxe_mcg *mcg)
+ {
+ 	rb_erase(&mcg->node, &mcg->rxe->mcg_tree);
+ }
+ 
+ /**
+  * __rxe_lookup_mcg - lookup mcg in rxe->mcg_tree while holding lock
+  * @rxe: rxe device object
+  * @mgid: multicast IP address
+  *
+  * Context: caller must hold rxe->mcg_lock
+  * Returns: mcg on success and takes a ref to mcg else NULL
+  */
+ static struct rxe_mcg *__rxe_lookup_mcg(struct rxe_dev *rxe,
+ 					union ib_gid *mgid)
+ {
+ 	struct rb_root *tree = &rxe->mcg_tree;
+ 	struct rxe_mcg *mcg;
+ 	struct rb_node *node;
+ 	int cmp;
+ 
+ 	node = tree->rb_node;
+ 
+ 	while (node) {
+ 		mcg = rb_entry(node, struct rxe_mcg, node);
+ 
+ 		cmp = memcmp(&mcg->mgid, mgid, sizeof(*mgid));
+ 
+ 		if (cmp > 0)
+ 			node = node->rb_left;
+ 		else if (cmp < 0)
+ 			node = node->rb_right;
+ 		else
+ 			break;
+ 	}
+ 
+ 	if (node) {
+ 		rxe_add_ref(mcg);
+ 		return mcg;
+ 	}
+ 
+ 	return NULL;
+ }
+ 
+ /**
+  * rxe_lookup_mcg - lookup up mcg in red-back tree
+  * @rxe: rxe device object
+  * @mgid: multicast IP address
+  *
+  * Returns: mcg if found else NULL
+  */
+ struct rxe_mcg *rxe_lookup_mcg(struct rxe_dev *rxe, union ib_gid *mgid)
+ {
+ 	struct rxe_mcg *mcg;
+ 	unsigned long flags;
+ 
+ 	spin_lock_irqsave(&rxe->mcg_lock, flags);
+ 	mcg = __rxe_lookup_mcg(rxe, mgid);
+ 	spin_unlock_irqrestore(&rxe->mcg_lock, flags);
+ 
+ 	return mcg;
+ }
+ 
+ /**
+  * __rxe_init_mcg - initialize a new mcg
+  * @rxe: rxe device
+  * @mgid: multicast address as a gid
+  * @mcg: new mcg object
+  *
+  * Context: caller should hold rxe->mcg lock
+  * Returns: 0 on success else an error
+  */
+ static int __rxe_init_mcg(struct rxe_dev *rxe, union ib_gid *mgid,
+ 			  struct rxe_mcg *mcg)
+ {
+ 	int err;
+ 
+ 	err = rxe_mcast_add(rxe, mgid);
+ 	if (unlikely(err))
+ 		return err;
+ 
+ 	memcpy(&mcg->mgid, mgid, sizeof(mcg->mgid));
+ 	INIT_LIST_HEAD(&mcg->qp_list);
+ 	mcg->rxe = rxe;
+ 
+ 	/* caller holds a ref on mcg but that will be
+ 	 * dropped when mcg goes out of scope. We need to take a ref
+ 	 * on the pointer that will be saved in the red-black tree
+ 	 * by __rxe_insert_mcg and used to lookup mcg from mgid later.
+ 	 * Inserting mcg makes it visible to outside so this should
+ 	 * be done last after the object is ready.
+ 	 */
+ 	rxe_add_ref(mcg);
+ 	__rxe_insert_mcg(mcg);
+ 
  	return 0;
  }
  
+ /**
+  * rxe_get_mcg - lookup or allocate a mcg
+  * @rxe: rxe device object
+  * @mgid: multicast IP address as a gid
+  *
+  * Returns: mcg on success else ERR_PTR(error)
+  */
+ static struct rxe_mcg *rxe_get_mcg(struct rxe_dev *rxe, union ib_gid *mgid)
+ {
+ 	struct rxe_pool *pool = &rxe->mc_grp_pool;
+ 	struct rxe_mcg *mcg, *tmp;
+ 	unsigned long flags;
+ 	int err;
+ 
+ 	if (rxe->attr.max_mcast_grp == 0)
+ 		return ERR_PTR(-EINVAL);
+ 
+ 	/* check to see if mcg already exists */
+ 	mcg = rxe_lookup_mcg(rxe, mgid);
+ 	if (mcg)
+ 		return mcg;
+ 
+ 	/* speculative alloc of new mcg */
+ 	mcg = rxe_alloc(pool);
+ 	if (!mcg)
+ 		return ERR_PTR(-ENOMEM);
+ 
+ 	spin_lock_irqsave(&rxe->mcg_lock, flags);
+ 	/* re-check to see if someone else just added it */
+ 	tmp = __rxe_lookup_mcg(rxe, mgid);
+ 	if (tmp) {
+ 		rxe_drop_ref(mcg);
+ 		mcg = tmp;
+ 		goto out;
+ 	}
+ 
+ 	if (atomic_inc_return(&rxe->mcg_num) > rxe->attr.max_mcast_grp) {
+ 		err = -ENOMEM;
+ 		goto err_dec;
+ 	}
+ 
+ 	err = __rxe_init_mcg(rxe, mgid, mcg);
+ 	if (err)
+ 		goto err_dec;
+ out:
+ 	spin_unlock_irqrestore(&rxe->mcg_lock, flags);
+ 	return mcg;
+ 
+ err_dec:
+ 	atomic_dec(&rxe->mcg_num);
+ 	spin_unlock_irqrestore(&rxe->mcg_lock, flags);
+ 	rxe_drop_ref(mcg);
+ 	return ERR_PTR(err);
+ }
+ 
+ /**
+  * __rxe_destroy_mcg - destroy mcg object holding rxe->mcg_lock
+  * @mcg: the mcg object
+  *
+  * Context: caller is holding rxe->mcg_lock
+  * no qp's are attached to mcg
+  */
+ static void __rxe_destroy_mcg(struct rxe_mcg *mcg)
+ {
+ 	/* remove mcg from red-black tree then drop ref */
+ 	__rxe_remove_mcg(mcg);
+ 	rxe_drop_ref(mcg);
+ 
+ 	rxe_mcast_delete(mcg->rxe, &mcg->mgid);
+ }
+ 
+ /**
+  * rxe_destroy_mcg - destroy mcg object
+  * @mcg: the mcg object
+  *
+  * Context: no qp's are attached to mcg
+  */
+ static void rxe_destroy_mcg(struct rxe_mcg *mcg)
+ {
+ 	unsigned long flags;
+ 
+ 	spin_lock_irqsave(&mcg->rxe->mcg_lock, flags);
+ 	__rxe_destroy_mcg(mcg);
+ 	spin_unlock_irqrestore(&mcg->rxe->mcg_lock, flags);
+ }
+ 
+ void rxe_mc_cleanup(struct rxe_pool_elem *elem)
+ {
+ 	/* nothing left to do for now */
++>>>>>>> 8a0a5fe0c462 (RDMA/rxe: Replace pool key by rxe->mcg_tree)
+ }
+ 
 -static int rxe_attach_mcg(struct rxe_dev *rxe, struct rxe_qp *qp,
 -				  struct rxe_mcg *mcg)
 +int rxe_mcast_add_grp_elem(struct rxe_dev *rxe, struct rxe_qp *qp,
 +			   struct rxe_mc_grp *grp)
  {
 -	struct rxe_mca *mca, *tmp;
 -	unsigned long flags;
  	int err;
 +	struct rxe_mc_elem *elem;
  
 -	/* check to see if the qp is already a member of the group */
 -	spin_lock_irqsave(&rxe->mcg_lock, flags);
 -	list_for_each_entry(mca, &mcg->qp_list, qp_list) {
 -		if (mca->qp == qp) {
 -			spin_unlock_irqrestore(&rxe->mcg_lock, flags);
 -			return 0;
 -		}
 -	}
 -	spin_unlock_irqrestore(&rxe->mcg_lock, flags);
 -
 -	/* speculative alloc new mca without using GFP_ATOMIC */
 -	mca = kzalloc(sizeof(*mca), GFP_KERNEL);
 -	if (!mca)
 -		return -ENOMEM;
 -
 -	spin_lock_irqsave(&rxe->mcg_lock, flags);
 -	/* re-check to see if someone else just attached qp */
 -	list_for_each_entry(tmp, &mcg->qp_list, qp_list) {
 -		if (tmp->qp == qp) {
 -			kfree(mca);
 +	/* check to see of the qp is already a member of the group */
 +	spin_lock_bh(&qp->grp_lock);
 +	spin_lock_bh(&grp->mcg_lock);
 +	list_for_each_entry(elem, &grp->qp_list, qp_list) {
 +		if (elem->qp == qp) {
  			err = 0;
  			goto out;
  		}
@@@ -126,31 -303,41 +352,69 @@@ out
  	return err;
  }
  
++<<<<<<< HEAD
 +int rxe_mcast_drop_grp_elem(struct rxe_dev *rxe, struct rxe_qp *qp,
 +			    union ib_gid *mgid)
 +{
 +	struct rxe_mc_grp *grp;
 +	struct rxe_mc_elem *elem, *tmp;
 +
 +	grp = rxe_pool_get_key(&rxe->mc_grp_pool, mgid);
 +	if (!grp)
 +		goto err1;
 +
 +	spin_lock_bh(&qp->grp_lock);
 +	spin_lock_bh(&grp->mcg_lock);
 +
 +	list_for_each_entry_safe(elem, tmp, &grp->qp_list, qp_list) {
 +		if (elem->qp == qp) {
 +			list_del(&elem->qp_list);
 +			list_del(&elem->grp_list);
 +			grp->num_qp--;
 +
 +			spin_unlock_bh(&grp->mcg_lock);
 +			spin_unlock_bh(&qp->grp_lock);
 +			rxe_drop_ref(elem);
 +			rxe_drop_ref(grp);	/* ref held by QP */
 +			rxe_drop_ref(grp);	/* ref from get_key */
 +			return 0;
++=======
+ static int rxe_detach_mcg(struct rxe_dev *rxe, struct rxe_qp *qp,
+ 				   union ib_gid *mgid)
+ {
+ 	struct rxe_mcg *mcg;
+ 	struct rxe_mca *mca, *tmp;
+ 	unsigned long flags;
+ 	int err;
+ 
+ 	mcg = rxe_lookup_mcg(rxe, mgid);
+ 	if (!mcg)
+ 		return -EINVAL;
+ 
+ 	spin_lock_irqsave(&rxe->mcg_lock, flags);
+ 	list_for_each_entry_safe(mca, tmp, &mcg->qp_list, qp_list) {
+ 		if (mca->qp == qp) {
+ 			list_del(&mca->qp_list);
+ 			atomic_dec(&qp->mcg_num);
+ 			rxe_drop_ref(qp);
+ 
+ 			/* if the number of qp's attached to the
+ 			 * mcast group falls to zero go ahead and
+ 			 * tear it down. This will not free the
+ 			 * object since we are still holding a ref
+ 			 * from the get key above.
+ 			 */
+ 			if (atomic_dec_return(&mcg->qp_num) <= 0)
+ 				__rxe_destroy_mcg(mcg);
+ 
+ 			/* drop the ref from get key. This will free the
+ 			 * object if qp_num is zero.
+ 			 */
+ 			rxe_drop_ref(mcg);
+ 			kfree(mca);
+ 			err = 0;
+ 			goto out_unlock;
++>>>>>>> 8a0a5fe0c462 (RDMA/rxe: Replace pool key by rxe->mcg_tree)
  		}
  	}
  
diff --cc drivers/infiniband/sw/rxe/rxe_verbs.h
index 2fd73c878e17,caa5b1b05019..000000000000
--- a/drivers/infiniband/sw/rxe/rxe_verbs.h
+++ b/drivers/infiniband/sw/rxe/rxe_verbs.h
@@@ -354,9 -351,9 +354,15 @@@ struct rxe_mw 
  	u64			length;
  };
  
++<<<<<<< HEAD
 +struct rxe_mc_grp {
 +	struct rxe_pool_entry	pelem;
 +	spinlock_t		mcg_lock; /* guard group */
++=======
+ struct rxe_mcg {
+ 	struct rxe_pool_elem	elem;
+ 	struct rb_node		node;
++>>>>>>> 8a0a5fe0c462 (RDMA/rxe: Replace pool key by rxe->mcg_tree)
  	struct rxe_dev		*rxe;
  	struct list_head	qp_list;
  	union ib_gid		mgid;
@@@ -402,7 -396,11 +408,15 @@@ struct rxe_dev 
  	struct rxe_pool		mr_pool;
  	struct rxe_pool		mw_pool;
  	struct rxe_pool		mc_grp_pool;
++<<<<<<< HEAD
 +	struct rxe_pool		mc_elem_pool;
++=======
+ 
+ 	/* multicast support */
+ 	spinlock_t		mcg_lock;
+ 	struct rb_root		mcg_tree;
+ 	atomic_t		mcg_num;
++>>>>>>> 8a0a5fe0c462 (RDMA/rxe: Replace pool key by rxe->mcg_tree)
  
  	spinlock_t		pending_lock; /* guard pending_mmaps */
  	struct list_head	pending_mmaps;
@@@ -483,6 -481,4 +497,9 @@@ static inline struct rxe_pd *rxe_mw_pd(
  
  int rxe_register_device(struct rxe_dev *rxe, const char *ibdev_name);
  
++<<<<<<< HEAD
 +void rxe_mc_cleanup(struct rxe_pool_entry *arg);
 +
++=======
++>>>>>>> 8a0a5fe0c462 (RDMA/rxe: Replace pool key by rxe->mcg_tree)
  #endif /* RXE_VERBS_H */
* Unmerged path drivers/infiniband/sw/rxe/rxe.c
* Unmerged path drivers/infiniband/sw/rxe/rxe_loc.h
* Unmerged path drivers/infiniband/sw/rxe/rxe_mcast.c
diff --git a/drivers/infiniband/sw/rxe/rxe_recv.c b/drivers/infiniband/sw/rxe/rxe_recv.c
index 6a6cc1fa90e4..a3d31c2eb5f3 100644
--- a/drivers/infiniband/sw/rxe/rxe_recv.c
+++ b/drivers/infiniband/sw/rxe/rxe_recv.c
@@ -246,7 +246,7 @@ static void rxe_rcv_mcast_pkt(struct rxe_dev *rxe, struct sk_buff *skb)
 		memcpy(&dgid, &ipv6_hdr(skb)->daddr, sizeof(dgid));
 
 	/* lookup mcast group corresponding to mgid, takes a ref */
-	mcg = rxe_pool_get_key(&rxe->mc_grp_pool, &dgid);
+	mcg = rxe_lookup_mcg(rxe, &dgid);
 	if (!mcg)
 		goto drop;	/* mcast group not registered */
 
@@ -300,7 +300,7 @@ static void rxe_rcv_mcast_pkt(struct rxe_dev *rxe, struct sk_buff *skb)
 
 	spin_unlock_bh(&mcg->mcg_lock);
 
-	rxe_drop_ref(mcg);	/* drop ref from rxe_pool_get_key. */
+	rxe_drop_ref(mcg);
 
 	if (likely(!skb))
 		return;
* Unmerged path drivers/infiniband/sw/rxe/rxe_verbs.h
