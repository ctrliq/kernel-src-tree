NFS: Remove --> and <-- dprintk call sites

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-394.el8
commit-author Chuck Lever <chuck.lever@oracle.com>
commit 86882c75464920684d39b747d7f52a75200cc24f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-394.el8/86882c75.failed

dprintk call sites that display no other information than the
function name can be replaced with use of the trace "function" or
"function_graph" plug-ins.

	Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
	Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
(cherry picked from commit 86882c75464920684d39b747d7f52a75200cc24f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/nfs/nfs4proc.c
diff --cc fs/nfs/nfs4proc.c
index 05195d95e5d8,979665a91e80..000000000000
--- a/fs/nfs/nfs4proc.c
+++ b/fs/nfs/nfs4proc.c
@@@ -5294,11 -5325,24 +5291,14 @@@ static bool nfs4_read_stateid_changed(s
  	return true;
  }
  
 -static bool nfs4_read_plus_not_supported(struct rpc_task *task,
 -					 struct nfs_pgio_header *hdr)
 +static int nfs4_read_done(struct rpc_task *task, struct nfs_pgio_header *hdr)
  {
 -	struct nfs_server *server = NFS_SERVER(hdr->inode);
 -	struct rpc_message *msg = &task->tk_msg;
++<<<<<<< HEAD
  
 -	if (msg->rpc_proc == &nfs4_procedures[NFSPROC4_CLNT_READ_PLUS] &&
 -	    server->caps & NFS_CAP_READ_PLUS && task->tk_status == -ENOTSUPP) {
 -		server->caps &= ~NFS_CAP_READ_PLUS;
 -		msg->rpc_proc = &nfs4_procedures[NFSPROC4_CLNT_READ];
 -		rpc_restart_call_prepare(task);
 -		return true;
 -	}
 -	return false;
 -}
 +	dprintk("--> %s\n", __func__);
  
 -static int nfs4_read_done(struct rpc_task *task, struct nfs_pgio_header *hdr)
 -{
++=======
++>>>>>>> 86882c754649 (NFS: Remove --> and <-- dprintk call sites)
  	if (!nfs4_sequence_done(task, &hdr->res.seq_res))
  		return -EAGAIN;
  	if (nfs4_read_stateid_changed(task, &hdr->args))
@@@ -7077,8 -7137,11 +7072,7 @@@ static int _nfs4_do_setlk(struct nfs4_s
  		.flags = RPC_TASK_ASYNC | RPC_TASK_CRED_NOREF,
  	};
  	int ret;
 -	struct nfs_client *client = NFS_SERVER(state->inode)->nfs_client;
 -
 -	if (client->cl_minorversion)
 -		task_setup_data.flags |= RPC_TASK_MOVEABLE;
  
- 	dprintk("%s: begin!\n", __func__);
  	data = nfs4_alloc_lockdata(fl, nfs_file_open_context(fl->fl_file),
  			fl->fl_u.nfs4_fl.owner,
  			recovery_type == NFS_LOCK_NEW ? GFP_KERNEL : GFP_NOFS);
@@@ -8765,10 -8865,9 +8756,9 @@@ static void nfs4_get_lease_time_done(st
  	switch (task->tk_status) {
  	case -NFS4ERR_DELAY:
  	case -NFS4ERR_GRACE:
- 		dprintk("%s Retry: tk_status %d\n", __func__, task->tk_status);
  		rpc_delay(task, NFS4_POLL_RETRY_MIN);
  		task->tk_status = 0;
 -		fallthrough;
 +		/* fall through */
  	case -NFS4ERR_RETRY_UNCACHED_REP:
  		rpc_restart_call_prepare(task);
  		return;
* Unmerged path fs/nfs/nfs4proc.c
