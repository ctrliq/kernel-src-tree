RDMA/rxe: Do not call  dev_mc_add/del() under a spinlock

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-394.el8
Rebuild_CHGLOG: - RDMA/rxe: Do not call dev_mc_add/del() under a spinlock (Kamal Heib) [2056500]
Rebuild_FUZZ: 99.10%
commit-author Bob Pearson <rpearsonhpe@gmail.com>
commit a926a903b7dc39a8a949150258c09290998dd812
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-394.el8/a926a903.failed

These routines were not intended to be called under a spinlock and will
throw debugging warnings:

   raw_local_irq_restore() called with IRQs enabled
   WARNING: CPU: 13 PID: 3107 at kernel/locking/irqflag-debug.c:10 warn_bogus_irq_restore+0x2f/0x50
   CPU: 13 PID: 3107 Comm: python3 Tainted: G            E     5.18.0-rc1+ #7
   Hardware name: innotek GmbH VirtualBox/VirtualBox, BIOS VirtualBox 12/01/2006
   RIP: 0010:warn_bogus_irq_restore+0x2f/0x50
   Call Trace:
    <TASK>
    _raw_spin_unlock_irqrestore+0x75/0x80
    rxe_attach_mcast+0x304/0x480 [rdma_rxe]
    ib_attach_mcast+0x88/0xa0 [ib_core]
    ib_uverbs_attach_mcast+0x186/0x1e0 [ib_uverbs]
    ib_uverbs_handler_UVERBS_METHOD_INVOKE_WRITE+0xcd/0x140 [ib_uverbs]
    ib_uverbs_cmd_verbs+0xdb0/0xea0 [ib_uverbs]
    ib_uverbs_ioctl+0xd2/0x160 [ib_uverbs]
    do_syscall_64+0x5c/0x80
    entry_SYSCALL_64_after_hwframe+0x44/0xae

Move them out of the spinlock, it is OK if there is some races setting up
the MC reception at the ethernet layer with rbtree lookups.

Fixes: 6090a0c4c7c6 ("RDMA/rxe: Cleanup rxe_mcast.c")
Link: https://lore.kernel.org/r/20220504202817.98247-1-rpearsonhpe@gmail.com
	Signed-off-by: Bob Pearson <rpearsonhpe@gmail.com>
	Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
(cherry picked from commit a926a903b7dc39a8a949150258c09290998dd812)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/sw/rxe/rxe_mcast.c
diff --cc drivers/infiniband/sw/rxe/rxe_mcast.c
index 5f1c72c1473c,77e45cabd8ea..000000000000
--- a/drivers/infiniband/sw/rxe/rxe_mcast.c
+++ b/drivers/infiniband/sw/rxe/rxe_mcast.c
@@@ -16,7 -37,14 +16,18 @@@ static int rxe_mcast_add(struct rxe_de
  	return dev_mc_add(rxe->ndev, ll_addr);
  }
  
++<<<<<<< HEAD
 +static int rxe_mcast_delete(struct rxe_dev *rxe, union ib_gid *mgid)
++=======
+ /**
+  * rxe_mcast_del - delete multicast address from rxe device
+  * @rxe: rxe device object
+  * @mgid: multicast address as a gid
+  *
+  * Returns 0 on success else an error
+  */
+ static int rxe_mcast_del(struct rxe_dev *rxe, union ib_gid *mgid)
++>>>>>>> a926a903b7dc (RDMA/rxe: Do not call  dev_mc_add/del() under a spinlock)
  {
  	unsigned char ll_addr[ETH_ALEN];
  
@@@ -25,60 -53,272 +36,291 @@@
  	return dev_mc_del(rxe->ndev, ll_addr);
  }
  
++<<<<<<< HEAD
 +/* caller should hold mc_grp_pool->pool_lock */
 +static struct rxe_mc_grp *create_grp(struct rxe_dev *rxe,
 +				     struct rxe_pool *pool,
 +				     union ib_gid *mgid)
 +{
 +	int err;
 +	struct rxe_mc_grp *grp;
 +
 +	grp = rxe_alloc_locked(&rxe->mc_grp_pool);
 +	if (!grp)
 +		return ERR_PTR(-ENOMEM);
 +
 +	INIT_LIST_HEAD(&grp->qp_list);
 +	spin_lock_init(&grp->mcg_lock);
 +	grp->rxe = rxe;
 +	rxe_add_key_locked(grp, mgid);
 +
 +	err = rxe_mcast_add(rxe, mgid);
 +	if (unlikely(err)) {
 +		rxe_drop_key_locked(grp);
 +		rxe_drop_ref(grp);
 +		return ERR_PTR(err);
 +	}
 +
 +	return grp;
 +}
 +
 +int rxe_mcast_get_grp(struct rxe_dev *rxe, union ib_gid *mgid,
 +		      struct rxe_mc_grp **grp_p)
++=======
+ /**
+  * __rxe_insert_mcg - insert an mcg into red-black tree (rxe->mcg_tree)
+  * @mcg: mcg object with an embedded red-black tree node
+  *
+  * Context: caller must hold a reference to mcg and rxe->mcg_lock and
+  * is responsible to avoid adding the same mcg twice to the tree.
+  */
+ static void __rxe_insert_mcg(struct rxe_mcg *mcg)
+ {
+ 	struct rb_root *tree = &mcg->rxe->mcg_tree;
+ 	struct rb_node **link = &tree->rb_node;
+ 	struct rb_node *node = NULL;
+ 	struct rxe_mcg *tmp;
+ 	int cmp;
+ 
+ 	while (*link) {
+ 		node = *link;
+ 		tmp = rb_entry(node, struct rxe_mcg, node);
+ 
+ 		cmp = memcmp(&tmp->mgid, &mcg->mgid, sizeof(mcg->mgid));
+ 		if (cmp > 0)
+ 			link = &(*link)->rb_left;
+ 		else
+ 			link = &(*link)->rb_right;
+ 	}
+ 
+ 	rb_link_node(&mcg->node, node, link);
+ 	rb_insert_color(&mcg->node, tree);
+ }
+ 
+ /**
+  * __rxe_remove_mcg - remove an mcg from red-black tree holding lock
+  * @mcg: mcast group object with an embedded red-black tree node
+  *
+  * Context: caller must hold a reference to mcg and rxe->mcg_lock
+  */
+ static void __rxe_remove_mcg(struct rxe_mcg *mcg)
+ {
+ 	rb_erase(&mcg->node, &mcg->rxe->mcg_tree);
+ }
+ 
+ /**
+  * __rxe_lookup_mcg - lookup mcg in rxe->mcg_tree while holding lock
+  * @rxe: rxe device object
+  * @mgid: multicast IP address
+  *
+  * Context: caller must hold rxe->mcg_lock
+  * Returns: mcg on success and takes a ref to mcg else NULL
+  */
+ static struct rxe_mcg *__rxe_lookup_mcg(struct rxe_dev *rxe,
+ 					union ib_gid *mgid)
+ {
+ 	struct rb_root *tree = &rxe->mcg_tree;
+ 	struct rxe_mcg *mcg;
+ 	struct rb_node *node;
+ 	int cmp;
+ 
+ 	node = tree->rb_node;
+ 
+ 	while (node) {
+ 		mcg = rb_entry(node, struct rxe_mcg, node);
+ 
+ 		cmp = memcmp(&mcg->mgid, mgid, sizeof(*mgid));
+ 
+ 		if (cmp > 0)
+ 			node = node->rb_left;
+ 		else if (cmp < 0)
+ 			node = node->rb_right;
+ 		else
+ 			break;
+ 	}
+ 
+ 	if (node) {
+ 		kref_get(&mcg->ref_cnt);
+ 		return mcg;
+ 	}
+ 
+ 	return NULL;
+ }
+ 
+ /**
+  * rxe_lookup_mcg - lookup up mcg in red-back tree
+  * @rxe: rxe device object
+  * @mgid: multicast IP address
+  *
+  * Returns: mcg if found else NULL
+  */
+ struct rxe_mcg *rxe_lookup_mcg(struct rxe_dev *rxe, union ib_gid *mgid)
+ {
+ 	struct rxe_mcg *mcg;
+ 	unsigned long flags;
+ 
+ 	spin_lock_irqsave(&rxe->mcg_lock, flags);
+ 	mcg = __rxe_lookup_mcg(rxe, mgid);
+ 	spin_unlock_irqrestore(&rxe->mcg_lock, flags);
+ 
+ 	return mcg;
+ }
+ 
+ /**
+  * __rxe_init_mcg - initialize a new mcg
+  * @rxe: rxe device
+  * @mgid: multicast address as a gid
+  * @mcg: new mcg object
+  *
+  * Context: caller should hold rxe->mcg lock
+  */
+ static void __rxe_init_mcg(struct rxe_dev *rxe, union ib_gid *mgid,
+ 			   struct rxe_mcg *mcg)
+ {
+ 	kref_init(&mcg->ref_cnt);
+ 	memcpy(&mcg->mgid, mgid, sizeof(mcg->mgid));
+ 	INIT_LIST_HEAD(&mcg->qp_list);
+ 	mcg->rxe = rxe;
+ 
+ 	/* caller holds a ref on mcg but that will be
+ 	 * dropped when mcg goes out of scope. We need to take a ref
+ 	 * on the pointer that will be saved in the red-black tree
+ 	 * by __rxe_insert_mcg and used to lookup mcg from mgid later.
+ 	 * Inserting mcg makes it visible to outside so this should
+ 	 * be done last after the object is ready.
+ 	 */
+ 	kref_get(&mcg->ref_cnt);
+ 	__rxe_insert_mcg(mcg);
+ }
+ 
+ /**
+  * rxe_get_mcg - lookup or allocate a mcg
+  * @rxe: rxe device object
+  * @mgid: multicast IP address as a gid
+  *
+  * Returns: mcg on success else ERR_PTR(error)
+  */
+ static struct rxe_mcg *rxe_get_mcg(struct rxe_dev *rxe, union ib_gid *mgid)
+ {
+ 	struct rxe_mcg *mcg, *tmp;
+ 	unsigned long flags;
+ 	int err;
+ 
+ 	if (rxe->attr.max_mcast_grp == 0)
+ 		return ERR_PTR(-EINVAL);
+ 
+ 	/* check to see if mcg already exists */
+ 	mcg = rxe_lookup_mcg(rxe, mgid);
+ 	if (mcg)
+ 		return mcg;
+ 
+ 	/* check to see if we have reached limit */
+ 	if (atomic_inc_return(&rxe->mcg_num) > rxe->attr.max_mcast_grp) {
+ 		err = -ENOMEM;
+ 		goto err_dec;
+ 	}
+ 
+ 	/* speculative alloc of new mcg */
+ 	mcg = kzalloc(sizeof(*mcg), GFP_KERNEL);
+ 	if (!mcg)
+ 		return ERR_PTR(-ENOMEM);
+ 
+ 	spin_lock_irqsave(&rxe->mcg_lock, flags);
+ 	/* re-check to see if someone else just added it */
+ 	tmp = __rxe_lookup_mcg(rxe, mgid);
+ 	if (tmp) {
+ 		spin_unlock_irqrestore(&rxe->mcg_lock, flags);
+ 		atomic_dec(&rxe->mcg_num);
+ 		kfree(mcg);
+ 		return tmp;
+ 	}
+ 
+ 	__rxe_init_mcg(rxe, mgid, mcg);
+ 	spin_unlock_irqrestore(&rxe->mcg_lock, flags);
+ 
+ 	/* add mcast address outside of lock */
+ 	err = rxe_mcast_add(rxe, mgid);
+ 	if (!err)
+ 		return mcg;
+ 
+ 	kfree(mcg);
+ err_dec:
+ 	atomic_dec(&rxe->mcg_num);
+ 	return ERR_PTR(err);
+ }
+ 
+ /**
+  * rxe_cleanup_mcg - cleanup mcg for kref_put
+  * @kref: struct kref embnedded in mcg
+  */
+ void rxe_cleanup_mcg(struct kref *kref)
+ {
+ 	struct rxe_mcg *mcg = container_of(kref, typeof(*mcg), ref_cnt);
+ 
+ 	kfree(mcg);
+ }
+ 
+ /**
+  * __rxe_destroy_mcg - destroy mcg object holding rxe->mcg_lock
+  * @mcg: the mcg object
+  *
+  * Context: caller is holding rxe->mcg_lock
+  * no qp's are attached to mcg
+  */
+ static void __rxe_destroy_mcg(struct rxe_mcg *mcg)
+ {
+ 	struct rxe_dev *rxe = mcg->rxe;
+ 
+ 	/* remove mcg from red-black tree then drop ref */
+ 	__rxe_remove_mcg(mcg);
+ 	kref_put(&mcg->ref_cnt, rxe_cleanup_mcg);
+ 
+ 	atomic_dec(&rxe->mcg_num);
+ }
+ 
+ /**
+  * rxe_destroy_mcg - destroy mcg object
+  * @mcg: the mcg object
+  *
+  * Context: no qp's are attached to mcg
+  */
+ static void rxe_destroy_mcg(struct rxe_mcg *mcg)
++>>>>>>> a926a903b7dc (RDMA/rxe: Do not call  dev_mc_add/del() under a spinlock)
  {
 +	int err;
 +	struct rxe_mc_grp *grp;
 +	struct rxe_pool *pool = &rxe->mc_grp_pool;
  	unsigned long flags;
  
++<<<<<<< HEAD
 +	if (rxe->attr.max_mcast_qp_attach == 0)
 +		return -EINVAL;
++=======
+ 	/* delete mcast address outside of lock */
+ 	rxe_mcast_del(mcg->rxe, &mcg->mgid);
+ 
+ 	spin_lock_irqsave(&mcg->rxe->mcg_lock, flags);
+ 	__rxe_destroy_mcg(mcg);
+ 	spin_unlock_irqrestore(&mcg->rxe->mcg_lock, flags);
+ }
++>>>>>>> a926a903b7dc (RDMA/rxe: Do not call  dev_mc_add/del() under a spinlock)
  
 -/**
 - * __rxe_init_mca - initialize a new mca holding lock
 - * @qp: qp object
 - * @mcg: mcg object
 - * @mca: empty space for new mca
 - *
 - * Context: caller must hold references on qp and mcg, rxe->mcg_lock
 - * and pass memory for new mca
 - *
 - * Returns: 0 on success else an error
 - */
 -static int __rxe_init_mca(struct rxe_qp *qp, struct rxe_mcg *mcg,
 -			  struct rxe_mca *mca)
 -{
 -	struct rxe_dev *rxe = to_rdev(qp->ibqp.device);
 -	int n;
 +	write_lock_irqsave(&pool->pool_lock, flags);
  
 -	n = atomic_inc_return(&rxe->mcg_attach);
 -	if (n > rxe->attr.max_total_mcast_qp_attach) {
 -		atomic_dec(&rxe->mcg_attach);
 -		return -ENOMEM;
 -	}
 +	grp = rxe_pool_get_key_locked(pool, mgid);
 +	if (grp)
 +		goto done;
  
 -	n = atomic_inc_return(&mcg->qp_num);
 -	if (n > rxe->attr.max_mcast_qp_attach) {
 -		atomic_dec(&mcg->qp_num);
 -		atomic_dec(&rxe->mcg_attach);
 -		return -ENOMEM;
 +	grp = create_grp(rxe, pool, mgid);
 +	if (IS_ERR(grp)) {
 +		write_unlock_irqrestore(&pool->pool_lock, flags);
 +		err = PTR_ERR(grp);
 +		return err;
  	}
  
 -	atomic_inc(&qp->mcg_num);
 -
 -	rxe_get(qp);
 -	mca->qp = qp;
 -
 -	list_add_tail(&mca->qp_list, &mcg->qp_list);
 -
 +done:
 +	write_unlock_irqrestore(&pool->pool_lock, flags);
 +	*grp_p = grp;
  	return 0;
  }
  
* Unmerged path drivers/infiniband/sw/rxe/rxe_mcast.c
