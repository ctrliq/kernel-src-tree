NFS: Add a tracepoint to show the results of nfs_set_cache_invalid()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-394.el8
commit-author Benjamin Coddington <bcodding@redhat.com>
commit 93c2e5e0a9ecfc183ab1204e1ecaa7ee7eb2a61a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-394.el8/93c2e5e0.failed

This provides some insight into the client's invalidation behavior to show
both when the client uses the helper, and the results of calling the
helper which can vary depending on how the helper is called.

	Signed-off-by: Benjamin Coddington <bcodding@redhat.com>
	Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
(cherry picked from commit 93c2e5e0a9ecfc183ab1204e1ecaa7ee7eb2a61a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/nfs/inode.c
diff --cc fs/nfs/inode.c
index f9c9b5107815,fda530d5e764..000000000000
--- a/fs/nfs/inode.c
+++ b/fs/nfs/inode.c
@@@ -226,9 -210,16 +226,17 @@@ void nfs_set_cache_invalid(struct inod
  		flags &= ~NFS_INO_INVALID_XATTR;
  	if (flags & NFS_INO_INVALID_DATA)
  		nfs_fscache_invalidate(inode);
 -	flags &= ~(NFS_INO_REVAL_PAGECACHE | NFS_INO_REVAL_FORCED);
 -
 -	nfsi->cache_validity |= flags;
 -
  	if (inode->i_mapping->nrpages == 0)
++<<<<<<< HEAD
 +		flags &= ~(NFS_INO_INVALID_DATA|NFS_INO_DATA_INVAL_DEFER);
 +	nfsi->cache_validity |= flags;
++=======
+ 		nfsi->cache_validity &= ~(NFS_INO_INVALID_DATA |
+ 					  NFS_INO_DATA_INVAL_DEFER);
+ 	else if (nfsi->cache_validity & NFS_INO_INVALID_DATA)
+ 		nfsi->cache_validity &= ~NFS_INO_DATA_INVAL_DEFER;
+ 	trace_nfs_set_cache_invalid(inode, 0);
++>>>>>>> 93c2e5e0a9ec (NFS: Add a tracepoint to show the results of nfs_set_cache_invalid())
  }
  EXPORT_SYMBOL_GPL(nfs_set_cache_invalid);
  
* Unmerged path fs/nfs/inode.c
diff --git a/fs/nfs/nfstrace.h b/fs/nfs/nfstrace.h
index 549010ee1c4a..0d949d9c24bd 100644
--- a/fs/nfs/nfstrace.h
+++ b/fs/nfs/nfstrace.h
@@ -205,6 +205,7 @@ DEFINE_NFS_INODE_EVENT_DONE(nfs_writeback_inode_exit);
 DEFINE_NFS_INODE_EVENT(nfs_fsync_enter);
 DEFINE_NFS_INODE_EVENT_DONE(nfs_fsync_exit);
 DEFINE_NFS_INODE_EVENT(nfs_access_enter);
+DEFINE_NFS_INODE_EVENT_DONE(nfs_set_cache_invalid);
 
 TRACE_EVENT(nfs_access_exit,
 		TP_PROTO(
