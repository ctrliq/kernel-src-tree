arm64: sysreg: Remove unused and rotting SCTLR_ELx field definitions

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-394.el8
commit-author Will Deacon <will@kernel.org>
commit 73961dc1182ed7e1eb80a90ee28871ab3547af7e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-394.el8/73961dc1.failed

Our SCTLR_ELx field definitions are somewhat over-engineered in that
they carefully define masks describing the RES0/RES1 bits and then use
these to construct further masks representing bits to be set/cleared for
the _EL1 and _EL2 registers.

However, most of the resulting definitions aren't actually used by
anybody and have subsequently started to bit-rot when new fields have
been added by the architecture, resulting in fields being part of the
RES0 mask despite being defined and used elsewhere.

Rather than fix up these masks, simply remove the unused parts entirely
so that we can drop the maintenance burden. We can always add things
back if we need them in the future.

	Acked-by: Mark Rutland <mark.rutland@arm.com>
	Signed-off-by: Will Deacon <will@kernel.org>
(cherry picked from commit 73961dc1182ed7e1eb80a90ee28871ab3547af7e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/arm64/include/asm/sysreg.h
diff --cc arch/arm64/include/asm/sysreg.h
index ad1da29a5100,1df45c7ffcf7..000000000000
--- a/arch/arm64/include/asm/sysreg.h
+++ b/arch/arm64/include/asm/sysreg.h
@@@ -579,14 -496,9 +579,20 @@@
  			 SCTLR_ELx_SA | SCTLR_ELx_I | SCTLR_ELx_IESB)
  
  /* SCTLR_EL2 specific flags. */
++<<<<<<< HEAD
 +#define SCTLR_EL2_RES1	((1 << 4)  | (1 << 5)  | (1 << 11) | (1 << 16) | \
 +			 (1 << 18) | (1 << 22) | (1 << 23) | (1 << 28) | \
 +			 (1 << 29))
 +#define SCTLR_EL2_RES0	((1 << 6)  | (1 << 7)  | (1 << 8)  | (1 << 9)  | \
 +			 (1 << 10) | (1 << 13) | (1 << 14) | (1 << 15) | \
 +			 (1 << 17) | (1 << 20) | (1 << 24) | (1 << 26) | \
 +			 (1 << 27) | (1 << 30) | (1 << 31) | \
 +			 (0xffffefffUL << 32))
++=======
+ #define SCTLR_EL2_RES1	((BIT(4))  | (BIT(5))  | (BIT(11)) | (BIT(16)) | \
+ 			 (BIT(18)) | (BIT(22)) | (BIT(23)) | (BIT(28)) | \
+ 			 (BIT(29)))
++>>>>>>> 73961dc1182e (arm64: sysreg: Remove unused and rotting SCTLR_ELx field definitions)
  
  #ifdef CONFIG_CPU_BIG_ENDIAN
  #define ENDIAN_SET_EL2		SCTLR_ELx_EE
@@@ -596,43 -507,21 +601,37 @@@
  #endif
  
  /* SCTLR_EL1 specific flags. */
 -#define SCTLR_EL1_UCI		(BIT(26))
 -#define SCTLR_EL1_E0E		(BIT(24))
 -#define SCTLR_EL1_SPAN		(BIT(23))
 -#define SCTLR_EL1_NTWE		(BIT(18))
 -#define SCTLR_EL1_NTWI		(BIT(16))
 -#define SCTLR_EL1_UCT		(BIT(15))
 -#define SCTLR_EL1_DZE		(BIT(14))
 -#define SCTLR_EL1_UMA		(BIT(9))
 -#define SCTLR_EL1_SED		(BIT(8))
 -#define SCTLR_EL1_ITD		(BIT(7))
 -#define SCTLR_EL1_CP15BEN	(BIT(5))
 -#define SCTLR_EL1_SA0		(BIT(4))
 -
 +#define SCTLR_EL1_ATA0		(BIT(42))
 +
++<<<<<<< HEAD
 +#define SCTLR_EL1_TCF0_SHIFT	38
 +#define SCTLR_EL1_TCF0_NONE	(UL(0x0) << SCTLR_EL1_TCF0_SHIFT)
 +#define SCTLR_EL1_TCF0_SYNC	(UL(0x1) << SCTLR_EL1_TCF0_SHIFT)
 +#define SCTLR_EL1_TCF0_ASYNC	(UL(0x2) << SCTLR_EL1_TCF0_SHIFT)
 +#define SCTLR_EL1_TCF0_MASK	(UL(0x3) << SCTLR_EL1_TCF0_SHIFT)
 +
 +#define SCTLR_EL1_UCI		(1 << 26)
 +#define SCTLR_EL1_E0E		(1 << 24)
 +#define SCTLR_EL1_SPAN		(1 << 23)
 +#define SCTLR_EL1_NTWE		(1 << 18)
 +#define SCTLR_EL1_NTWI		(1 << 16)
 +#define SCTLR_EL1_UCT		(1 << 15)
 +#define SCTLR_EL1_DZE		(1 << 14)
 +#define SCTLR_EL1_UMA		(1 << 9)
 +#define SCTLR_EL1_SED		(1 << 8)
 +#define SCTLR_EL1_ITD		(1 << 7)
 +#define SCTLR_EL1_CP15BEN	(1 << 5)
 +#define SCTLR_EL1_SA0		(1 << 4)
 +
 +#define SCTLR_EL1_RES1	((1 << 11) | (1 << 20) | (1 << 22) | (1 << 28) | \
 +			 (1 << 29))
 +#define SCTLR_EL1_RES0  ((1 << 6)  | (1 << 10) | (1 << 13) | (1 << 17) | \
 +			 (1 << 27) | (1 << 30) | (1 << 31) | \
 +			 (0xffffefffUL << 32))
++=======
+ #define SCTLR_EL1_RES1	((BIT(11)) | (BIT(20)) | (BIT(22)) | (BIT(28)) | \
+ 			 (BIT(29)))
++>>>>>>> 73961dc1182e (arm64: sysreg: Remove unused and rotting SCTLR_ELx field definitions)
  
  #ifdef CONFIG_CPU_BIG_ENDIAN
  #define ENDIAN_SET_EL1		(SCTLR_EL1_E0E | SCTLR_ELx_EE)
@@@ -647,18 -534,8 +644,21 @@@
  			 SCTLR_EL1_DZE  | SCTLR_EL1_UCT                   |\
  			 SCTLR_EL1_NTWE | SCTLR_ELx_IESB | SCTLR_EL1_SPAN |\
  			 ENDIAN_SET_EL1 | SCTLR_EL1_UCI  | SCTLR_EL1_RES1)
++<<<<<<< HEAD
 +#define SCTLR_EL1_CLEAR	(SCTLR_ELx_A   | SCTLR_EL1_CP15BEN | SCTLR_EL1_ITD    |\
 +			 SCTLR_EL1_UMA | SCTLR_ELx_WXN     | ENDIAN_CLEAR_EL1 |\
 +			 SCTLR_ELx_DSSBS | SCTLR_EL1_NTWI  | SCTLR_EL1_RES0)
 +
 +#if (SCTLR_EL1_SET ^ SCTLR_EL1_CLEAR) != 0xffffffffffffffffUL
 +#error "Inconsistent SCTLR_EL1 set/clear bits"
 +#endif
 +#define MAIR_ATTR_NORMAL_TAGGED			UL(0xf0)
++=======
++>>>>>>> 73961dc1182e (arm64: sysreg: Remove unused and rotting SCTLR_ELx field definitions)
  
  /* id_aa64isar0 */
 +#define ID_AA64ISAR0_RNDR_SHIFT		60
 +#define ID_AA64ISAR0_TLB_SHIFT		56
  #define ID_AA64ISAR0_TS_SHIFT		52
  #define ID_AA64ISAR0_FHM_SHIFT		48
  #define ID_AA64ISAR0_DP_SHIFT		44
* Unmerged path arch/arm64/include/asm/sysreg.h
