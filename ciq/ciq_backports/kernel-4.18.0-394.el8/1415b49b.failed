locking/ww-mutex: Fix uninitialized use of ret in test_aa()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-394.el8
commit-author Nathan Chancellor <nathan@kernel.org>
commit 1415b49bcd321bca7347f43f8b269c91ec46d1dc
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-394.el8/1415b49b.failed

Clang warns:

kernel/locking/test-ww_mutex.c:138:7: error: variable 'ret' is used uninitialized whenever 'if' condition is true [-Werror,-Wsometimes-uninitialized]
                if (!ww_mutex_trylock(&mutex, &ctx)) {
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
kernel/locking/test-ww_mutex.c:172:9: note: uninitialized use occurs here
        return ret;
               ^~~
kernel/locking/test-ww_mutex.c:138:3: note: remove the 'if' if its condition is always false
                if (!ww_mutex_trylock(&mutex, &ctx)) {
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
kernel/locking/test-ww_mutex.c:125:9: note: initialize the variable 'ret' to silence this warning
        int ret;
               ^
                = 0
1 error generated.

Assign !ww_mutex_trylock(...) to ret so that it is always initialized.

Fixes: 12235da8c80a ("kernel/locking: Add context to ww_mutex_trylock()")
	Reported-by: "kernelci.org bot" <bot@kernelci.org>
	Reported-by: Stephen Rothwell <sfr@canb.auug.org.au>
	Signed-off-by: Nathan Chancellor <nathan@kernel.org>
	Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
	Acked-by: Waiman Long <longman@redhat.com>
Link: https://lore.kernel.org/r/20210922145822.3935141-1-nathan@kernel.org
(cherry picked from commit 1415b49bcd321bca7347f43f8b269c91ec46d1dc)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/locking/test-ww_mutex.c
diff --cc kernel/locking/test-ww_mutex.c
index 5b915b370d5a,353004155d65..000000000000
--- a/kernel/locking/test-ww_mutex.c
+++ b/kernel/locking/test-ww_mutex.c
@@@ -131,10 -128,29 +131,26 @@@ static int test_aa(void
  	ww_mutex_init(&mutex, &ww_class);
  	ww_acquire_init(&ctx, &ww_class);
  
++<<<<<<< HEAD
 +	ww_mutex_lock(&mutex, &ctx);
++=======
+ 	if (!trylock) {
+ 		ret = ww_mutex_lock(&mutex, &ctx);
+ 		if (ret) {
+ 			pr_err("%s: initial lock failed!\n", __func__);
+ 			goto out;
+ 		}
+ 	} else {
+ 		ret = !ww_mutex_trylock(&mutex, &ctx);
+ 		if (ret) {
+ 			pr_err("%s: initial trylock failed!\n", __func__);
+ 			goto out;
+ 		}
+ 	}
++>>>>>>> 1415b49bcd32 (locking/ww-mutex: Fix uninitialized use of ret in test_aa())
  
 -	if (ww_mutex_trylock(&mutex, NULL))  {
 -		pr_err("%s: trylocked itself without context from %s!\n", __func__, from);
 -		ww_mutex_unlock(&mutex);
 -		ret = -EINVAL;
 -		goto out;
 -	}
 -
 -	if (ww_mutex_trylock(&mutex, &ctx))  {
 -		pr_err("%s: trylocked itself with context from %s!\n", __func__, from);
 +	if (ww_mutex_trylock(&mutex))  {
 +		pr_err("%s: trylocked itself!\n", __func__);
  		ww_mutex_unlock(&mutex);
  		ret = -EINVAL;
  		goto out;
* Unmerged path kernel/locking/test-ww_mutex.c
