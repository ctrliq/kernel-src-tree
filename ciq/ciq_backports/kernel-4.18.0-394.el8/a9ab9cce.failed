rcu-tasks: Don't delete holdouts within trc_wait_for_one_reader()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-394.el8
commit-author Paul E. McKenney <paulmck@kernel.org>
commit a9ab9cce9367a2cc02a3c7eb57a004dc0b8f380d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-394.el8/a9ab9cce.failed

Invoking trc_del_holdout() from within trc_wait_for_one_reader() is
only a performance optimization because the RCU Tasks Trace grace-period
kthread will eventually do this within check_all_holdout_tasks_trace().
But it is not a particularly important performance optimization because
it only applies to the grace-period kthread, of which there is but one.
This commit therefore removes this invocation of trc_del_holdout() in
favor of the one in check_all_holdout_tasks_trace() in the grace-period
kthread.

	Reported-by: "Xu, Yanfei" <yanfei.xu@windriver.com>
	Signed-off-by: Paul E. McKenney <paulmck@kernel.org>
(cherry picked from commit a9ab9cce9367a2cc02a3c7eb57a004dc0b8f380d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/rcu/tasks.h
diff --cc kernel/rcu/tasks.h
index d5009760436d,8536c55df514..000000000000
--- a/kernel/rcu/tasks.h
+++ b/kernel/rcu/tasks.h
@@@ -950,9 -981,8 +950,14 @@@ static void trc_wait_for_one_reader(str
  
  	// The current task had better be in a quiescent state.
  	if (t == current) {
++<<<<<<< HEAD
 +		t_rh->trc_reader_checked = true;
 +		trc_del_holdout(t);
 +		WARN_ON_ONCE(t_rh->trc_reader_nesting);
++=======
+ 		t->trc_reader_checked = true;
+ 		WARN_ON_ONCE(t->trc_reader_nesting);
++>>>>>>> a9ab9cce9367 (rcu-tasks: Don't delete holdouts within trc_wait_for_one_reader())
  		return;
  	}
  
* Unmerged path kernel/rcu/tasks.h
