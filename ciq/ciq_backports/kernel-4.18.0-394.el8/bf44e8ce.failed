vgaarb: don't pass a cookie to vga_client_register

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-394.el8
commit-author Christoph Hellwig <hch@lst.de>
commit bf44e8cecc03c9c6197c0b65d54703746a62fb35
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-394.el8/bf44e8ce.failed

The VGA arbitration is entirely based on pci_dev structures, so just pass
that back to the set_vga_decode callback.

	Signed-off-by: Christoph Hellwig <hch@lst.de>
Link: https://patchwork.freedesktop.org/patch/msgid/20210716061634.2446357-8-hch@lst.de
	Acked-by: Christian König <christian.koenig@amd.com>
	Signed-off-by: Christian König <christian.koenig@amd.com>
(cherry picked from commit bf44e8cecc03c9c6197c0b65d54703746a62fb35)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/amd/amdgpu/amdgpu_device.c
#	drivers/gpu/drm/i915/display/intel_vga.c
#	drivers/gpu/drm/nouveau/nouveau_vga.c
#	drivers/gpu/drm/radeon/radeon_device.c
#	drivers/gpu/vga/vgaarb.c
#	drivers/vfio/pci/vfio_pci.c
#	include/linux/vgaarb.h
diff --cc drivers/gpu/drm/amd/amdgpu/amdgpu_device.c
index 49d5053b1481,45c84e4413cb..000000000000
--- a/drivers/gpu/drm/amd/amdgpu/amdgpu_device.c
+++ b/drivers/gpu/drm/amd/amdgpu/amdgpu_device.c
@@@ -3724,7 -3680,7 +3725,11 @@@ fence_driver_init
  	/* this will fail for cards that aren't VGA class devices, just
  	 * ignore it */
  	if ((adev->pdev->class >> 8) == PCI_CLASS_DISPLAY_VGA)
++<<<<<<< HEAD
 +		vga_client_register(adev->pdev, adev, NULL, amdgpu_device_vga_set_decode);
++=======
+ 		vga_client_register(adev->pdev, amdgpu_device_vga_set_decode);
++>>>>>>> bf44e8cecc03 (vgaarb: don't pass a cookie to vga_client_register)
  
  	if (amdgpu_device_supports_px(ddev)) {
  		px = true;
diff --cc drivers/gpu/drm/i915/display/intel_vga.c
index f002b82ba9c0,16c250700985..000000000000
--- a/drivers/gpu/drm/i915/display/intel_vga.c
+++ b/drivers/gpu/drm/i915/display/intel_vga.c
@@@ -147,7 -148,7 +148,11 @@@ int intel_vga_register(struct drm_i915_
  	 * then we do not take part in VGA arbitration and the
  	 * vga_client_register() fails with -ENODEV.
  	 */
++<<<<<<< HEAD
 +	ret = vga_client_register(pdev, i915, NULL, intel_vga_set_decode);
++=======
+ 	ret = vga_client_register(pdev, intel_vga_set_decode);
++>>>>>>> bf44e8cecc03 (vgaarb: don't pass a cookie to vga_client_register)
  	if (ret && ret != -ENODEV)
  		return ret;
  
diff --cc drivers/gpu/drm/nouveau/nouveau_vga.c
index 7c4b374b3eca,60cd8c0463df..000000000000
--- a/drivers/gpu/drm/nouveau/nouveau_vga.c
+++ b/drivers/gpu/drm/nouveau/nouveau_vga.c
@@@ -94,7 -94,7 +94,11 @@@ nouveau_vga_init(struct nouveau_drm *dr
  		return;
  	pdev = to_pci_dev(dev->dev);
  
++<<<<<<< HEAD
 +	vga_client_register(pdev, dev, NULL, nouveau_vga_set_decode);
++=======
+ 	vga_client_register(pdev, nouveau_vga_set_decode);
++>>>>>>> bf44e8cecc03 (vgaarb: don't pass a cookie to vga_client_register)
  
  	/* don't register Thunderbolt eGPU with vga_switcheroo */
  	if (pci_is_thunderbolt_attached(pdev))
diff --cc drivers/gpu/drm/radeon/radeon_device.c
index 46eea01950cb,cec03238e14d..000000000000
--- a/drivers/gpu/drm/radeon/radeon_device.c
+++ b/drivers/gpu/drm/radeon/radeon_device.c
@@@ -1434,7 -1435,7 +1435,11 @@@ int radeon_device_init(struct radeon_de
  	/* if we have > 1 VGA cards, then disable the radeon VGA resources */
  	/* this will fail for cards that aren't VGA class devices, just
  	 * ignore it */
++<<<<<<< HEAD
 +	vga_client_register(rdev->pdev, rdev, NULL, radeon_vga_set_decode);
++=======
+ 	vga_client_register(rdev->pdev, radeon_vga_set_decode);
++>>>>>>> bf44e8cecc03 (vgaarb: don't pass a cookie to vga_client_register)
  
  	if (rdev->flags & RADEON_IS_PX)
  		runtime = true;
diff --cc drivers/gpu/vga/vgaarb.c
index 3ed3734f66d9,569930552957..000000000000
--- a/drivers/gpu/vga/vgaarb.c
+++ b/drivers/gpu/vga/vgaarb.c
@@@ -72,10 -72,7 +72,14 @@@ struct vga_device 
  	unsigned int io_norm_cnt;	/* normal IO count */
  	unsigned int mem_norm_cnt;	/* normal MEM count */
  	bool bridge_has_one_vga;
++<<<<<<< HEAD
 +	/* allow IRQ enable/disable hook */
 +	void *cookie;
 +	void (*irq_set_state)(void *cookie, bool enable);
 +	unsigned int (*set_vga_decode)(void *cookie, bool decode);
++=======
+ 	unsigned int (*set_decode)(struct pci_dev *pdev, bool decode);
++>>>>>>> bf44e8cecc03 (vgaarb: don't pass a cookie to vga_client_register)
  };
  
  static LIST_HEAD(vga_list);
@@@ -854,17 -839,11 +858,25 @@@ EXPORT_SYMBOL(vga_set_legacy_decoding)
  /**
   * vga_client_register - register or unregister a VGA arbitration client
   * @pdev: pci device of the VGA client
++<<<<<<< HEAD
 + * @cookie: client cookie to be used in callbacks
 + * @irq_set_state: irq state change callback
 + * @set_vga_decode: vga decode change callback
 + *
 + * Clients have two callback mechanisms they can use.
 + *
 + * @irq_set_state callback: If a client can't disable its GPUs VGA
 + * resources, then we need to be able to ask it to turn off its irqs when we
 + * turn off its mem and io decoding.
 + *
 + * @set_vga_decode callback: If a client can disable its GPU VGA resource, it
++=======
+  * @set_decode: vga decode change callback
+  *
+  * Clients have two callback mechanisms they can use.
+  *
+  * @set_decode callback: If a client can disable its GPU VGA resource, it
++>>>>>>> bf44e8cecc03 (vgaarb: don't pass a cookie to vga_client_register)
   * will get a callback from this to set the encode/decode state.
   *
   * Rationale: we cannot disable VGA decode resources unconditionally some single
@@@ -882,10 -860,8 +894,15 @@@
   *
   * Returns: 0 on success, -1 on failure
   */
++<<<<<<< HEAD
 +int vga_client_register(struct pci_dev *pdev, void *cookie,
 +			void (*irq_set_state)(void *cookie, bool state),
 +			unsigned int (*set_vga_decode)(void *cookie,
 +						       bool decode))
++=======
+ int vga_client_register(struct pci_dev *pdev,
+ 		unsigned int (*set_decode)(struct pci_dev *pdev, bool decode))
++>>>>>>> bf44e8cecc03 (vgaarb: don't pass a cookie to vga_client_register)
  {
  	int ret = -ENODEV;
  	struct vga_device *vgadev;
@@@ -896,9 -872,7 +913,13 @@@
  	if (!vgadev)
  		goto bail;
  
++<<<<<<< HEAD
 +	vgadev->irq_set_state = irq_set_state;
 +	vgadev->set_vga_decode = set_vga_decode;
 +	vgadev->cookie = cookie;
++=======
+ 	vgadev->set_decode = set_decode;
++>>>>>>> bf44e8cecc03 (vgaarb: don't pass a cookie to vga_client_register)
  	ret = 0;
  
  bail:
diff --cc drivers/vfio/pci/vfio_pci.c
index d8886dfae7ea,2a52244196db..000000000000
--- a/drivers/vfio/pci/vfio_pci.c
+++ b/drivers/vfio/pci/vfio_pci.c
@@@ -1943,6 -1907,68 +1942,71 @@@ static int vfio_pci_bus_notifier(struc
  	return 0;
  }
  
++<<<<<<< HEAD
++=======
+ static int vfio_pci_vf_init(struct vfio_pci_device *vdev)
+ {
+ 	struct pci_dev *pdev = vdev->pdev;
+ 	int ret;
+ 
+ 	if (!pdev->is_physfn)
+ 		return 0;
+ 
+ 	vdev->vf_token = kzalloc(sizeof(*vdev->vf_token), GFP_KERNEL);
+ 	if (!vdev->vf_token)
+ 		return -ENOMEM;
+ 
+ 	mutex_init(&vdev->vf_token->lock);
+ 	uuid_gen(&vdev->vf_token->uuid);
+ 
+ 	vdev->nb.notifier_call = vfio_pci_bus_notifier;
+ 	ret = bus_register_notifier(&pci_bus_type, &vdev->nb);
+ 	if (ret) {
+ 		kfree(vdev->vf_token);
+ 		return ret;
+ 	}
+ 	return 0;
+ }
+ 
+ static void vfio_pci_vf_uninit(struct vfio_pci_device *vdev)
+ {
+ 	if (!vdev->vf_token)
+ 		return;
+ 
+ 	bus_unregister_notifier(&pci_bus_type, &vdev->nb);
+ 	WARN_ON(vdev->vf_token->users);
+ 	mutex_destroy(&vdev->vf_token->lock);
+ 	kfree(vdev->vf_token);
+ }
+ 
+ static int vfio_pci_vga_init(struct vfio_pci_device *vdev)
+ {
+ 	struct pci_dev *pdev = vdev->pdev;
+ 	int ret;
+ 
+ 	if (!vfio_pci_is_vga(pdev))
+ 		return 0;
+ 
+ 	ret = vga_client_register(pdev, vfio_pci_set_decode);
+ 	if (ret)
+ 		return ret;
+ 	vga_set_legacy_decoding(pdev, vfio_pci_set_decode(pdev, false));
+ 	return 0;
+ }
+ 
+ static void vfio_pci_vga_uninit(struct vfio_pci_device *vdev)
+ {
+ 	struct pci_dev *pdev = vdev->pdev;
+ 
+ 	if (!vfio_pci_is_vga(pdev))
+ 		return;
+ 	vga_client_unregister(pdev);
+ 	vga_set_legacy_decoding(pdev, VGA_RSRC_NORMAL_IO | VGA_RSRC_NORMAL_MEM |
+ 					      VGA_RSRC_LEGACY_IO |
+ 					      VGA_RSRC_LEGACY_MEM);
+ }
+ 
++>>>>>>> bf44e8cecc03 (vgaarb: don't pass a cookie to vga_client_register)
  static int vfio_pci_probe(struct pci_dev *pdev, const struct pci_device_id *id)
  {
  	struct vfio_pci_device *vdev;
diff --cc include/linux/vgaarb.h
index 05171fc7e26a,b4b9137f9792..000000000000
--- a/include/linux/vgaarb.h
+++ b/include/linux/vgaarb.h
@@@ -51,9 -51,8 +51,14 @@@ void vga_put(struct pci_dev *pdev, unsi
  struct pci_dev *vga_default_device(void);
  void vga_set_default_device(struct pci_dev *pdev);
  int vga_remove_vgacon(struct pci_dev *pdev);
++<<<<<<< HEAD
 +int vga_client_register(struct pci_dev *pdev, void *cookie,
 +			void (*irq_set_state)(void *cookie, bool state),
 +			unsigned int (*set_vga_decode)(void *cookie, bool state));
++=======
+ int vga_client_register(struct pci_dev *pdev,
+ 		unsigned int (*set_decode)(struct pci_dev *pdev, bool state));
++>>>>>>> bf44e8cecc03 (vgaarb: don't pass a cookie to vga_client_register)
  #else /* CONFIG_VGA_ARB */
  static inline void vga_set_legacy_decoding(struct pci_dev *pdev,
  		unsigned int decodes)
@@@ -78,9 -77,8 +83,14 @@@ static inline int vga_remove_vgacon(str
  {
  	return 0;
  }
++<<<<<<< HEAD
 +static inline int vga_client_register(struct pci_dev *pdev, void *cookie,
 +				      void (*irq_set_state)(void *cookie, bool state),
 +				      unsigned int (*set_vga_decode)(void *cookie, bool state))
++=======
+ static inline int vga_client_register(struct pci_dev *pdev,
+ 		unsigned int (*set_decode)(struct pci_dev *pdev, bool state))
++>>>>>>> bf44e8cecc03 (vgaarb: don't pass a cookie to vga_client_register)
  {
  	return 0;
  }
@@@ -116,4 -114,9 +126,12 @@@ static inline int vga_get_uninterruptib
         return vga_get(pdev, rsrc, 0);
  }
  
++<<<<<<< HEAD
++=======
+ static inline void vga_client_unregister(struct pci_dev *pdev)
+ {
+ 	vga_client_register(pdev, NULL);
+ }
+ 
++>>>>>>> bf44e8cecc03 (vgaarb: don't pass a cookie to vga_client_register)
  #endif /* LINUX_VGA_H */
* Unmerged path drivers/gpu/drm/amd/amdgpu/amdgpu_device.c
* Unmerged path drivers/gpu/drm/i915/display/intel_vga.c
* Unmerged path drivers/gpu/drm/nouveau/nouveau_vga.c
* Unmerged path drivers/gpu/drm/radeon/radeon_device.c
* Unmerged path drivers/gpu/vga/vgaarb.c
* Unmerged path drivers/vfio/pci/vfio_pci.c
* Unmerged path include/linux/vgaarb.h
