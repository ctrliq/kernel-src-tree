xfs: move the di_cowextsize field to struct xfs_inode

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-394.el8
commit-author Christoph Hellwig <hch@lst.de>
commit b33ce57d3e61020328582ce6d7dbae1d694ac496
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-394.el8/b33ce57d.failed

In preparation of removing the historic icinode struct, move the
cowextsize field into the containing xfs_inode structure.  Also
switch to use the xfs_extlen_t instead of a uint32_t.

	Signed-off-by: Christoph Hellwig <hch@lst.de>
	Reviewed-by: Darrick J. Wong <djwong@kernel.org>
	Signed-off-by: Darrick J. Wong <djwong@kernel.org>
(cherry picked from commit b33ce57d3e61020328582ce6d7dbae1d694ac496)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/xfs/xfs_inode.h
#	fs/xfs/xfs_ioctl.c
diff --cc fs/xfs/xfs_inode.h
index ab59fceed361,0ca1d4dd90b5..000000000000
--- a/fs/xfs/xfs_inode.h
+++ b/fs/xfs/xfs_inode.h
@@@ -54,7 -54,11 +54,12 @@@ typedef struct xfs_inode 
  	/* Miscellaneous state. */
  	unsigned long		i_flags;	/* see defined flags below */
  	uint64_t		i_delayed_blks;	/* count of delay alloc blks */
 -	xfs_fsize_t		i_disk_size;	/* number of bytes in file */
 -	xfs_rfsblock_t		i_nblocks;	/* # of direct & btree blocks */
  	prid_t			i_projid;	/* owner's project id */
++<<<<<<< HEAD
++=======
+ 	xfs_extlen_t		i_extsize;	/* basic/minimum extent size */
+ 	xfs_extlen_t		i_cowextsize;	/* basic cow extent size */
++>>>>>>> b33ce57d3e61 (xfs: move the di_cowextsize field to struct xfs_inode)
  
  	struct xfs_icdinode	i_d;		/* most of ondisk inode */
  
diff --cc fs/xfs/xfs_ioctl.c
index 0b05f7dd7822,e45bce9b1108..000000000000
--- a/fs/xfs/xfs_ioctl.c
+++ b/fs/xfs/xfs_ioctl.c
@@@ -1116,9 -1120,8 +1116,14 @@@ xfs_fill_fsxattr
  	struct xfs_ifork	*ifp = attr ? ip->i_afp : &ip->i_df;
  
  	simple_fill_fsxattr(fa, xfs_ip2xflags(ip));
++<<<<<<< HEAD
 +	fa->fsx_extsize = ip->i_d.di_extsize << ip->i_mount->m_sb.sb_blocklog;
 +	fa->fsx_cowextsize = ip->i_d.di_cowextsize <<
 +			ip->i_mount->m_sb.sb_blocklog;
++=======
+ 	fa->fsx_extsize = ip->i_extsize << ip->i_mount->m_sb.sb_blocklog;
+ 	fa->fsx_cowextsize = ip->i_cowextsize << ip->i_mount->m_sb.sb_blocklog;
++>>>>>>> b33ce57d3e61 (xfs: move the di_cowextsize field to struct xfs_inode)
  	fa->fsx_projid = ip->i_projid;
  	if (ifp && (ifp->if_flags & XFS_IFEXTENTS))
  		fa->fsx_nextents = xfs_iext_count(ifp);
@@@ -1512,15 -1518,14 +1517,14 @@@ xfs_ioctl_setattr
  	 * are set on the inode then unconditionally clear the extent size hint.
  	 */
  	if (ip->i_d.di_flags & (XFS_DIFLAG_EXTSIZE | XFS_DIFLAG_EXTSZINHERIT))
 -		ip->i_extsize = fa->fsx_extsize >> mp->m_sb.sb_blocklog;
 +		ip->i_d.di_extsize = fa->fsx_extsize >> mp->m_sb.sb_blocklog;
  	else
 -		ip->i_extsize = 0;
 +		ip->i_d.di_extsize = 0;
  	if (xfs_sb_version_has_v3inode(&mp->m_sb) &&
  	    (ip->i_d.di_flags2 & XFS_DIFLAG2_COWEXTSIZE))
- 		ip->i_d.di_cowextsize = fa->fsx_cowextsize >>
- 				mp->m_sb.sb_blocklog;
+ 		ip->i_cowextsize = fa->fsx_cowextsize >> mp->m_sb.sb_blocklog;
  	else
- 		ip->i_d.di_cowextsize = 0;
+ 		ip->i_cowextsize = 0;
  
  	error = xfs_trans_commit(tp);
  
diff --git a/fs/xfs/libxfs/xfs_inode_buf.c b/fs/xfs/libxfs/xfs_inode_buf.c
index 671aeb012e3f..f03fe88096d6 100644
--- a/fs/xfs/libxfs/xfs_inode_buf.c
+++ b/fs/xfs/libxfs/xfs_inode_buf.c
@@ -240,7 +240,7 @@ xfs_inode_from_disk(
 					   be64_to_cpu(from->di_changecount));
 		to->di_crtime = xfs_inode_from_disk_ts(from, from->di_crtime);
 		to->di_flags2 = be64_to_cpu(from->di_flags2);
-		to->di_cowextsize = be32_to_cpu(from->di_cowextsize);
+		ip->i_cowextsize = be32_to_cpu(from->di_cowextsize);
 	}
 
 	error = xfs_iformat_data_fork(ip, from);
@@ -319,7 +319,7 @@ xfs_inode_to_disk(
 		to->di_changecount = cpu_to_be64(inode_peek_iversion(inode));
 		to->di_crtime = xfs_inode_to_disk_ts(ip, from->di_crtime);
 		to->di_flags2 = cpu_to_be64(from->di_flags2);
-		to->di_cowextsize = cpu_to_be32(from->di_cowextsize);
+		to->di_cowextsize = cpu_to_be32(ip->i_cowextsize);
 		to->di_ino = cpu_to_be64(ip->i_ino);
 		to->di_lsn = cpu_to_be64(lsn);
 		memset(to->di_pad2, 0, sizeof(to->di_pad2));
diff --git a/fs/xfs/libxfs/xfs_inode_buf.h b/fs/xfs/libxfs/xfs_inode_buf.h
index 406f66799288..ea35318bc7e9 100644
--- a/fs/xfs/libxfs/xfs_inode_buf.h
+++ b/fs/xfs/libxfs/xfs_inode_buf.h
@@ -24,7 +24,6 @@ struct xfs_icdinode {
 	uint16_t	di_flags;	/* random flags, XFS_DIFLAG_... */
 
 	uint64_t	di_flags2;	/* more random flags */
-	uint32_t	di_cowextsize;	/* basic cow extent size for file */
 
 	struct timespec64 di_crtime;	/* time created */
 };
diff --git a/fs/xfs/xfs_file.c b/fs/xfs/xfs_file.c
index d7d8b957f1f5..4a7b9c25a977 100644
--- a/fs/xfs/xfs_file.c
+++ b/fs/xfs/xfs_file.c
@@ -1153,7 +1153,7 @@ xfs_file_remap_range(
 	    (src->i_d.di_flags2 & XFS_DIFLAG2_COWEXTSIZE) &&
 	    pos_out == 0 && len >= i_size_read(inode_out) &&
 	    !(dest->i_d.di_flags2 & XFS_DIFLAG2_COWEXTSIZE))
-		cowextsize = src->i_d.di_cowextsize;
+		cowextsize = src->i_cowextsize;
 
 	ret = xfs_reflink_update_dest(dest, pos_out + len, cowextsize,
 			remap_flags);
diff --git a/fs/xfs/xfs_inode.c b/fs/xfs/xfs_inode.c
index d856a2225b9c..ffe6e833e8c2 100644
--- a/fs/xfs/xfs_inode.c
+++ b/fs/xfs/xfs_inode.c
@@ -81,7 +81,7 @@ xfs_get_cowextsz_hint(
 
 	a = 0;
 	if (ip->i_d.di_flags2 & XFS_DIFLAG2_COWEXTSIZE)
-		a = ip->i_d.di_cowextsize;
+		a = ip->i_cowextsize;
 	b = xfs_get_extsz_hint(ip);
 
 	a = max(a, b);
@@ -754,7 +754,7 @@ xfs_inode_inherit_flags2(
 {
 	if (pip->i_d.di_flags2 & XFS_DIFLAG2_COWEXTSIZE) {
 		ip->i_d.di_flags2 |= XFS_DIFLAG2_COWEXTSIZE;
-		ip->i_d.di_cowextsize = pip->i_d.di_cowextsize;
+		ip->i_cowextsize = pip->i_cowextsize;
 	}
 	if (pip->i_d.di_flags2 & XFS_DIFLAG2_DAX)
 		ip->i_d.di_flags2 |= XFS_DIFLAG2_DAX;
@@ -841,7 +841,7 @@ xfs_init_new_inode(
 
 	if (xfs_sb_version_has_v3inode(&mp->m_sb)) {
 		inode_set_iversion(inode, 1);
-		ip->i_d.di_cowextsize = 0;
+		ip->i_cowextsize = 0;
 		ip->i_d.di_crtime = tv;
 	}
 
* Unmerged path fs/xfs/xfs_inode.h
diff --git a/fs/xfs/xfs_inode_item.c b/fs/xfs/xfs_inode_item.c
index 342023fbc07e..6e83d309f045 100644
--- a/fs/xfs/xfs_inode_item.c
+++ b/fs/xfs/xfs_inode_item.c
@@ -402,7 +402,7 @@ xfs_inode_to_log_dinode(
 		to->di_changecount = inode_peek_iversion(inode);
 		to->di_crtime = xfs_inode_to_log_dinode_ts(ip, from->di_crtime);
 		to->di_flags2 = from->di_flags2;
-		to->di_cowextsize = from->di_cowextsize;
+		to->di_cowextsize = ip->i_cowextsize;
 		to->di_ino = ip->i_ino;
 		to->di_lsn = lsn;
 		memset(to->di_pad2, 0, sizeof(to->di_pad2));
* Unmerged path fs/xfs/xfs_ioctl.c
diff --git a/fs/xfs/xfs_itable.c b/fs/xfs/xfs_itable.c
index 434d70c7cd93..d99ff87b1dc9 100644
--- a/fs/xfs/xfs_itable.c
+++ b/fs/xfs/xfs_itable.c
@@ -112,7 +112,7 @@ xfs_bulkstat_one_int(
 		buf->bs_btime = dic->di_crtime.tv_sec;
 		buf->bs_btime_nsec = dic->di_crtime.tv_nsec;
 		if (dic->di_flags2 & XFS_DIFLAG2_COWEXTSIZE)
-			buf->bs_cowextsize_blks = dic->di_cowextsize;
+			buf->bs_cowextsize_blks = ip->i_cowextsize;
 	}
 
 	switch (ip->i_df.if_format) {
diff --git a/fs/xfs/xfs_reflink.c b/fs/xfs/xfs_reflink.c
index 64704535cdc3..1aaf9a951ea2 100644
--- a/fs/xfs/xfs_reflink.c
+++ b/fs/xfs/xfs_reflink.c
@@ -934,7 +934,7 @@ xfs_reflink_update_dest(
 	}
 
 	if (cowextsize) {
-		dest->i_d.di_cowextsize = cowextsize;
+		dest->i_cowextsize = cowextsize;
 		dest->i_d.di_flags2 |= XFS_DIFLAG2_COWEXTSIZE;
 	}
 
