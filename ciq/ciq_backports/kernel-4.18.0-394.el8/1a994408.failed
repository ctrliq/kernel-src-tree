NFSD: Replace READ* macros in nfsd4_decode_cb_sec()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-394.el8
commit-author Chuck Lever <chuck.lever@oracle.com>
commit 1a99440807bfc66597aaa2e0f0213c319b023e34
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-394.el8/1a994408.failed

	Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
(cherry picked from commit 1a99440807bfc66597aaa2e0f0213c319b023e34)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/nfsd/nfs4xdr.c
diff --cc fs/nfsd/nfs4xdr.c
index 4945fb7fd0ac,61f9186c8be4..000000000000
--- a/fs/nfsd/nfs4xdr.c
+++ b/fs/nfsd/nfs4xdr.c
@@@ -318,6 -207,73 +318,76 @@@ static char *savemem(struct nfsd4_compo
  	return ret;
  }
  
++<<<<<<< HEAD
++=======
+ 
+ /*
+  * NFSv4 basic data type decoders
+  */
+ 
+ /*
+  * This helper handles variable-length opaques which belong to protocol
+  * elements that this implementation does not support.
+  */
+ static __be32
+ nfsd4_decode_ignored_string(struct nfsd4_compoundargs *argp, u32 maxlen)
+ {
+ 	u32 len;
+ 
+ 	if (xdr_stream_decode_u32(argp->xdr, &len) < 0)
+ 		return nfserr_bad_xdr;
+ 	if (maxlen && len > maxlen)
+ 		return nfserr_bad_xdr;
+ 	if (!xdr_inline_decode(argp->xdr, len))
+ 		return nfserr_bad_xdr;
+ 
+ 	return nfs_ok;
+ }
+ 
+ static __be32
+ nfsd4_decode_opaque(struct nfsd4_compoundargs *argp, struct xdr_netobj *o)
+ {
+ 	__be32 *p;
+ 	u32 len;
+ 
+ 	if (xdr_stream_decode_u32(argp->xdr, &len) < 0)
+ 		return nfserr_bad_xdr;
+ 	if (len == 0 || len > NFS4_OPAQUE_LIMIT)
+ 		return nfserr_bad_xdr;
+ 	p = xdr_inline_decode(argp->xdr, len);
+ 	if (!p)
+ 		return nfserr_bad_xdr;
+ 	o->data = svcxdr_tmpalloc(argp, len);
+ 	if (!o->data)
+ 		return nfserr_jukebox;
+ 	o->len = len;
+ 	memcpy(o->data, p, len);
+ 
+ 	return nfs_ok;
+ }
+ 
+ static __be32
+ nfsd4_decode_component4(struct nfsd4_compoundargs *argp, char **namp, u32 *lenp)
+ {
+ 	__be32 *p, status;
+ 
+ 	if (xdr_stream_decode_u32(argp->xdr, lenp) < 0)
+ 		return nfserr_bad_xdr;
+ 	p = xdr_inline_decode(argp->xdr, *lenp);
+ 	if (!p)
+ 		return nfserr_bad_xdr;
+ 	status = check_filename((char *)p, *lenp);
+ 	if (status)
+ 		return status;
+ 	*namp = svcxdr_tmpalloc(argp, *lenp);
+ 	if (!*namp)
+ 		return nfserr_jukebox;
+ 	memcpy(*namp, p, *lenp);
+ 
+ 	return nfs_ok;
+ }
+ 
++>>>>>>> 1a99440807bf (NFSD: Replace READ* macros in nfsd4_decode_cb_sec())
  static __be32
  nfsd4_decode_time(struct nfsd4_compoundargs *argp, struct timespec64 *tv)
  {
* Unmerged path fs/nfsd/nfs4xdr.c
