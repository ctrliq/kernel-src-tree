RDMA/core: Set send and receive CQ before forwarding to the driver

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-394.el8
commit-author Leon Romanovsky <leonro@nvidia.com>
commit 6cd7397d01c4a3e09757840299e4f114f0aa5fa0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-394.el8/6cd7397d.failed

Preset both receive and send CQ pointers prior to call to the drivers and
overwrite it later again till the mlx4 is going to be changed do not
overwrite ibqp properties.

This change is needed for mlx5, because in case of QP creation failure, it
will go to the path of QP destroy which relies on proper CQ pointers.

 BUG: KASAN: use-after-free in create_qp.cold+0x164/0x16e [mlx5_ib]
 Write of size 8 at addr ffff8880064c55c0 by task a.out/246

 CPU: 0 PID: 246 Comm: a.out Not tainted 5.15.0+ #291
 Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS rel-1.13.0-0-gf21b5a4aeb02-prebuilt.qemu.org 04/01/2014
 Call Trace:
  dump_stack_lvl+0x45/0x59
  print_address_description.constprop.0+0x1f/0x140
  kasan_report.cold+0x83/0xdf
  create_qp.cold+0x164/0x16e [mlx5_ib]
  mlx5_ib_create_qp+0x358/0x28a0 [mlx5_ib]
  create_qp.part.0+0x45b/0x6a0 [ib_core]
  ib_create_qp_user+0x97/0x150 [ib_core]
  ib_uverbs_handler_UVERBS_METHOD_QP_CREATE+0x92c/0x1250 [ib_uverbs]
  ib_uverbs_cmd_verbs+0x1c38/0x3150 [ib_uverbs]
  ib_uverbs_ioctl+0x169/0x260 [ib_uverbs]
  __x64_sys_ioctl+0x866/0x14d0
  do_syscall_64+0x3d/0x90
  entry_SYSCALL_64_after_hwframe+0x44/0xae

 Allocated by task 246:
  kasan_save_stack+0x1b/0x40
  __kasan_kmalloc+0xa4/0xd0
  create_qp.part.0+0x92/0x6a0 [ib_core]
  ib_create_qp_user+0x97/0x150 [ib_core]
  ib_uverbs_handler_UVERBS_METHOD_QP_CREATE+0x92c/0x1250 [ib_uverbs]
  ib_uverbs_cmd_verbs+0x1c38/0x3150 [ib_uverbs]
  ib_uverbs_ioctl+0x169/0x260 [ib_uverbs]
  __x64_sys_ioctl+0x866/0x14d0
  do_syscall_64+0x3d/0x90
  entry_SYSCALL_64_after_hwframe+0x44/0xae

 Freed by task 246:
  kasan_save_stack+0x1b/0x40
  kasan_set_track+0x1c/0x30
  kasan_set_free_info+0x20/0x30
  __kasan_slab_free+0x10c/0x150
  slab_free_freelist_hook+0xb4/0x1b0
  kfree+0xe7/0x2a0
  create_qp.part.0+0x52b/0x6a0 [ib_core]
  ib_create_qp_user+0x97/0x150 [ib_core]
  ib_uverbs_handler_UVERBS_METHOD_QP_CREATE+0x92c/0x1250 [ib_uverbs]
  ib_uverbs_cmd_verbs+0x1c38/0x3150 [ib_uverbs]
  ib_uverbs_ioctl+0x169/0x260 [ib_uverbs]
  __x64_sys_ioctl+0x866/0x14d0
  do_syscall_64+0x3d/0x90
  entry_SYSCALL_64_after_hwframe+0x44/0xae

Fixes: 514aee660df4 ("RDMA: Globally allocate and release QP memory")
Link: https://lore.kernel.org/r/2dbb2e2cbb1efb188a500e5634be1d71956424ce.1636631035.git.leonro@nvidia.com
	Signed-off-by: Leon Romanovsky <leonro@nvidia.com>
	Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
(cherry picked from commit 6cd7397d01c4a3e09757840299e4f114f0aa5fa0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/core/verbs.c
diff --cc drivers/infiniband/core/verbs.c
index c88aaf2a63d3,c18634bec212..000000000000
--- a/drivers/infiniband/core/verbs.c
+++ b/drivers/infiniband/core/verbs.c
@@@ -1199,22 -1200,143 +1199,90 @@@ static struct ib_qp *create_xrc_qp_user
  	return qp;
  }
  
++<<<<<<< HEAD
++=======
+ static struct ib_qp *create_qp(struct ib_device *dev, struct ib_pd *pd,
+ 			       struct ib_qp_init_attr *attr,
+ 			       struct ib_udata *udata,
+ 			       struct ib_uqp_object *uobj, const char *caller)
+ {
+ 	struct ib_udata dummy = {};
+ 	struct ib_qp *qp;
+ 	int ret;
+ 
+ 	if (!dev->ops.create_qp)
+ 		return ERR_PTR(-EOPNOTSUPP);
+ 
+ 	qp = rdma_zalloc_drv_obj_numa(dev, ib_qp);
+ 	if (!qp)
+ 		return ERR_PTR(-ENOMEM);
+ 
+ 	qp->device = dev;
+ 	qp->pd = pd;
+ 	qp->uobject = uobj;
+ 	qp->real_qp = qp;
+ 
+ 	qp->qp_type = attr->qp_type;
+ 	qp->rwq_ind_tbl = attr->rwq_ind_tbl;
+ 	qp->srq = attr->srq;
+ 	qp->event_handler = attr->event_handler;
+ 	qp->port = attr->port_num;
+ 	qp->qp_context = attr->qp_context;
+ 
+ 	spin_lock_init(&qp->mr_lock);
+ 	INIT_LIST_HEAD(&qp->rdma_mrs);
+ 	INIT_LIST_HEAD(&qp->sig_mrs);
+ 
+ 	qp->send_cq = attr->send_cq;
+ 	qp->recv_cq = attr->recv_cq;
+ 
+ 	rdma_restrack_new(&qp->res, RDMA_RESTRACK_QP);
+ 	WARN_ONCE(!udata && !caller, "Missing kernel QP owner");
+ 	rdma_restrack_set_name(&qp->res, udata ? NULL : caller);
+ 	ret = dev->ops.create_qp(qp, attr, udata);
+ 	if (ret)
+ 		goto err_create;
+ 
+ 	/*
+ 	 * TODO: The mlx4 internally overwrites send_cq and recv_cq.
+ 	 * Unfortunately, it is not an easy task to fix that driver.
+ 	 */
+ 	qp->send_cq = attr->send_cq;
+ 	qp->recv_cq = attr->recv_cq;
+ 
+ 	ret = ib_create_qp_security(qp, dev);
+ 	if (ret)
+ 		goto err_security;
+ 
+ 	rdma_restrack_add(&qp->res);
+ 	return qp;
+ 
+ err_security:
+ 	qp->device->ops.destroy_qp(qp, udata ? &dummy : NULL);
+ err_create:
+ 	rdma_restrack_put(&qp->res);
+ 	kfree(qp);
+ 	return ERR_PTR(ret);
+ 
+ }
+ 
++>>>>>>> 6cd7397d01c4 (RDMA/core: Set send and receive CQ before forwarding to the driver)
  /**
 - * ib_create_qp_user - Creates a QP associated with the specified protection
 + * ib_create_named_qp - Creates a kernel QP associated with the specified protection
   *   domain.
 - * @dev: IB device
   * @pd: The protection domain associated with the QP.
 - * @attr: A list of initial attributes required to create the
 + * @qp_init_attr: A list of initial attributes required to create the
   *   QP.  If QP creation succeeds, then the attributes are updated to
   *   the actual capabilities of the created QP.
 - * @udata: User data
 - * @uobj: uverbs obect
   * @caller: caller's build-time module name
 + *
 + * NOTE: for user qp use ib_create_qp_user with valid udata!
   */
 -struct ib_qp *ib_create_qp_user(struct ib_device *dev, struct ib_pd *pd,
 -				struct ib_qp_init_attr *attr,
 -				struct ib_udata *udata,
 -				struct ib_uqp_object *uobj, const char *caller)
 -{
 -	struct ib_qp *qp, *xrc_qp;
 -
 -	if (attr->qp_type == IB_QPT_XRC_TGT)
 -		qp = create_qp(dev, pd, attr, NULL, NULL, caller);
 -	else
 -		qp = create_qp(dev, pd, attr, udata, uobj, NULL);
 -	if (attr->qp_type != IB_QPT_XRC_TGT || IS_ERR(qp))
 -		return qp;
 -
 -	xrc_qp = create_xrc_qp_user(qp, attr);
 -	if (IS_ERR(xrc_qp)) {
 -		ib_destroy_qp(qp);
 -		return xrc_qp;
 -	}
 -
 -	xrc_qp->uobject = uobj;
 -	return xrc_qp;
 -}
 -EXPORT_SYMBOL(ib_create_qp_user);
 -
 -void ib_qp_usecnt_inc(struct ib_qp *qp)
 +struct ib_qp *ib_create_named_qp(struct ib_pd *pd,
 +				 struct ib_qp_init_attr *qp_init_attr,
 +				 const char *caller)
  {
 -	if (qp->pd)
 -		atomic_inc(&qp->pd->usecnt);
 -	if (qp->send_cq)
 -		atomic_inc(&qp->send_cq->usecnt);
 -	if (qp->recv_cq)
 -		atomic_inc(&qp->recv_cq->usecnt);
 -	if (qp->srq)
 -		atomic_inc(&qp->srq->usecnt);
 -	if (qp->rwq_ind_tbl)
 -		atomic_inc(&qp->rwq_ind_tbl->usecnt);
 -}
 -EXPORT_SYMBOL(ib_qp_usecnt_inc);
 -
 -void ib_qp_usecnt_dec(struct ib_qp *qp)
 -{
 -	if (qp->rwq_ind_tbl)
 -		atomic_dec(&qp->rwq_ind_tbl->usecnt);
 -	if (qp->srq)
 -		atomic_dec(&qp->srq->usecnt);
 -	if (qp->recv_cq)
 -		atomic_dec(&qp->recv_cq->usecnt);
 -	if (qp->send_cq)
 -		atomic_dec(&qp->send_cq->usecnt);
 -	if (qp->pd)
 -		atomic_dec(&qp->pd->usecnt);
 -}
 -EXPORT_SYMBOL(ib_qp_usecnt_dec);
 -
 -struct ib_qp *ib_create_qp_kernel(struct ib_pd *pd,
 -				  struct ib_qp_init_attr *qp_init_attr,
 -				  const char *caller)
 -{
 -	struct ib_device *device = pd->device;
 +	struct ib_device *device = pd ? pd->device : qp_init_attr->xrcd->device;
  	struct ib_qp *qp;
  	int ret;
  
* Unmerged path drivers/infiniband/core/verbs.c
