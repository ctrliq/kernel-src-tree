sched/cpuacct: Optimize away RCU read lock

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-394.el8
commit-author Chengming Zhou <zhouchengming@bytedance.com>
commit dc6e0818bc9a0336d9accf3ea35d146d72aa7a18
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-394.el8/dc6e0818.failed

Since cpuacct_charge() is called from the scheduler update_curr(),
we must already have rq lock held, then the RCU read lock can
be optimized away.

And do the same thing in it's wrapper cgroup_account_cputime(),
but we can't use lockdep_assert_rq_held() there, which defined
in kernel/sched/sched.h.

	Suggested-by: Peter Zijlstra (Intel) <peterz@infradead.org>
	Signed-off-by: Chengming Zhou <zhouchengming@bytedance.com>
	Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
Link: https://lore.kernel.org/r/20220220051426.5274-2-zhouchengming@bytedance.com
(cherry picked from commit dc6e0818bc9a0336d9accf3ea35d146d72aa7a18)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/sched/cpuacct.c
diff --cc kernel/sched/cpuacct.c
index d66381bc98f2,f79f88456d72..000000000000
--- a/kernel/sched/cpuacct.c
+++ b/kernel/sched/cpuacct.c
@@@ -344,19 -334,13 +344,23 @@@ static struct cftype files[] = 
   */
  void cpuacct_charge(struct task_struct *tsk, u64 cputime)
  {
 -	unsigned int cpu = task_cpu(tsk);
  	struct cpuacct *ca;
 +	int index = CPUACCT_STAT_SYSTEM;
 +	struct pt_regs *regs = get_irq_regs() ? : task_pt_regs(tsk);
 +
 +	if (regs && user_mode(regs))
 +		index = CPUACCT_STAT_USER;
  
- 	rcu_read_lock();
+ 	lockdep_assert_rq_held(cpu_rq(cpu));
  
  	for (ca = task_ca(tsk); ca; ca = parent_ca(ca))
++<<<<<<< HEAD
 +		__this_cpu_add(ca->cpuusage->usages[index], cputime);
 +
 +	rcu_read_unlock();
++=======
+ 		*per_cpu_ptr(ca->cpuusage, cpu) += cputime;
++>>>>>>> dc6e0818bc9a (sched/cpuacct: Optimize away RCU read lock)
  }
  
  /*
diff --git a/include/linux/cgroup.h b/include/linux/cgroup.h
index efecacb246ac..617c4baf5857 100644
--- a/include/linux/cgroup.h
+++ b/include/linux/cgroup.h
@@ -777,11 +777,9 @@ static inline void cgroup_account_cputime(struct task_struct *task,
 
 	cpuacct_charge(task, delta_exec);
 
-	rcu_read_lock();
 	cgrp = task_dfl_cgroup(task);
 	if (cgroup_parent(cgrp))
 		__cgroup_account_cputime(cgrp, delta_exec);
-	rcu_read_unlock();
 }
 
 static inline void cgroup_account_cputime_field(struct task_struct *task,
* Unmerged path kernel/sched/cpuacct.c
