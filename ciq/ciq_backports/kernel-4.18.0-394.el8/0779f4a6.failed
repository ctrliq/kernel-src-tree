xfs: remove XFS_IFINLINE

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-394.el8
commit-author Christoph Hellwig <hch@lst.de>
commit 0779f4a68d4df539a7ea624f7e1560f48aa46ad9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-394.el8/0779f4a6.failed

Just check for an inline format fork instead of the using the equivalent
in-memory XFS_IFINLINE flag.

	Signed-off-by: Christoph Hellwig <hch@lst.de>
	Reviewed-by: Darrick J. Wong <djwong@kernel.org>
	Signed-off-by: Darrick J. Wong <djwong@kernel.org>
(cherry picked from commit 0779f4a68d4df539a7ea624f7e1560f48aa46ad9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/xfs/libxfs/xfs_attr.c
#	fs/xfs/libxfs/xfs_dir2_block.c
#	fs/xfs/libxfs/xfs_dir2_sf.c
#	fs/xfs/xfs_dir2_readdir.c
#	fs/xfs/xfs_iops.c
#	fs/xfs/xfs_symlink.c
diff --cc fs/xfs/libxfs/xfs_attr.c
index be7124728a01,96146f425e50..000000000000
--- a/fs/xfs/libxfs/xfs_attr.c
+++ b/fs/xfs/libxfs/xfs_attr.c
@@@ -342,12 -362,10 +342,10 @@@ xfs_has_attr
  	if (!xfs_inode_hasattr(dp))
  		return -ENOATTR;
  
- 	if (dp->i_afp->if_format == XFS_DINODE_FMT_LOCAL) {
- 		ASSERT(dp->i_afp->if_flags & XFS_IFINLINE);
+ 	if (dp->i_afp->if_format == XFS_DINODE_FMT_LOCAL)
  		return xfs_attr_sf_findname(args, NULL, NULL);
- 	}
  
 -	if (xfs_attr_is_leaf(dp)) {
 +	if (xfs_bmap_one_block(dp, XFS_ATTR_FORK)) {
  		error = xfs_attr_leaf_hasname(args, &bp);
  
  		if (bp)
@@@ -366,21 -384,14 +364,29 @@@ in
  xfs_attr_remove_args(
  	struct xfs_da_args      *args)
  {
 -	if (!xfs_inode_hasattr(args->dp))
 -		return -ENOATTR;
 +	struct xfs_inode	*dp = args->dp;
 +	int			error;
  
++<<<<<<< HEAD
 +	if (!xfs_inode_hasattr(dp)) {
 +		error = -ENOATTR;
 +	} else if (dp->i_afp->if_format == XFS_DINODE_FMT_LOCAL) {
 +		ASSERT(dp->i_afp->if_flags & XFS_IFINLINE);
 +		error = xfs_attr_shortform_remove(args);
 +	} else if (xfs_bmap_one_block(dp, XFS_ATTR_FORK)) {
 +		error = xfs_attr_leaf_removename(args);
 +	} else {
 +		error = xfs_attr_node_removename(args);
 +	}
 +
 +	return error;
++=======
+ 	if (args->dp->i_afp->if_format == XFS_DINODE_FMT_LOCAL)
+ 		return xfs_attr_shortform_remove(args);
+ 	if (xfs_attr_is_leaf(args->dp))
+ 		return xfs_attr_leaf_removename(args);
+ 	return xfs_attr_node_removename(args);
++>>>>>>> 0779f4a68d4d (xfs: remove XFS_IFINLINE)
  }
  
  /*
diff --cc fs/xfs/libxfs/xfs_dir2_block.c
index 5b59d3f7746b,75e1421f69c4..000000000000
--- a/fs/xfs/libxfs/xfs_dir2_block.c
+++ b/fs/xfs/libxfs/xfs_dir2_block.c
@@@ -1096,8 -1096,8 +1096,13 @@@ xfs_dir2_sf_to_block
  
  	trace_xfs_dir2_sf_to_block(args);
  
++<<<<<<< HEAD
 +	ASSERT(ifp->if_flags & XFS_IFINLINE);
 +	ASSERT(dp->i_d.di_size >= offsetof(struct xfs_dir2_sf_hdr, parent));
++=======
+ 	ASSERT(ifp->if_format == XFS_DINODE_FMT_LOCAL);
+ 	ASSERT(dp->i_disk_size >= offsetof(struct xfs_dir2_sf_hdr, parent));
++>>>>>>> 0779f4a68d4d (xfs: remove XFS_IFINLINE)
  
  	oldsfp = (xfs_dir2_sf_hdr_t *)ifp->if_u1.if_data;
  
diff --cc fs/xfs/libxfs/xfs_dir2_sf.c
index 8c4f76bba88b,b031be033838..000000000000
--- a/fs/xfs/libxfs/xfs_dir2_sf.c
+++ b/fs/xfs/libxfs/xfs_dir2_sf.c
@@@ -378,12 -378,12 +378,18 @@@ xfs_dir2_sf_addname
  
  	ASSERT(xfs_dir2_sf_lookup(args) == -ENOENT);
  	dp = args->dp;
++<<<<<<< HEAD
 +	ASSERT(dp->i_df.if_flags & XFS_IFINLINE);
 +	ASSERT(dp->i_d.di_size >= offsetof(struct xfs_dir2_sf_hdr, parent));
 +	ASSERT(dp->i_df.if_bytes == dp->i_d.di_size);
++=======
+ 	ASSERT(dp->i_df.if_format == XFS_DINODE_FMT_LOCAL);
+ 	ASSERT(dp->i_disk_size >= offsetof(struct xfs_dir2_sf_hdr, parent));
+ 	ASSERT(dp->i_df.if_bytes == dp->i_disk_size);
++>>>>>>> 0779f4a68d4d (xfs: remove XFS_IFINLINE)
  	ASSERT(dp->i_df.if_u1.if_data != NULL);
  	sfp = (xfs_dir2_sf_hdr_t *)dp->i_df.if_u1.if_data;
 -	ASSERT(dp->i_disk_size >= xfs_dir2_sf_hdr_size(sfp->i8count));
 +	ASSERT(dp->i_d.di_size >= xfs_dir2_sf_hdr_size(sfp->i8count));
  	/*
  	 * Compute entry (and change in) size.
  	 */
@@@ -877,12 -876,12 +882,18 @@@ xfs_dir2_sf_lookup
  
  	xfs_dir2_sf_check(args);
  
++<<<<<<< HEAD
 +	ASSERT(dp->i_df.if_flags & XFS_IFINLINE);
 +	ASSERT(dp->i_d.di_size >= offsetof(struct xfs_dir2_sf_hdr, parent));
 +	ASSERT(dp->i_df.if_bytes == dp->i_d.di_size);
++=======
+ 	ASSERT(dp->i_df.if_format == XFS_DINODE_FMT_LOCAL);
+ 	ASSERT(dp->i_disk_size >= offsetof(struct xfs_dir2_sf_hdr, parent));
+ 	ASSERT(dp->i_df.if_bytes == dp->i_disk_size);
++>>>>>>> 0779f4a68d4d (xfs: remove XFS_IFINLINE)
  	ASSERT(dp->i_df.if_u1.if_data != NULL);
  	sfp = (xfs_dir2_sf_hdr_t *)dp->i_df.if_u1.if_data;
 -	ASSERT(dp->i_disk_size >= xfs_dir2_sf_hdr_size(sfp->i8count));
 +	ASSERT(dp->i_d.di_size >= xfs_dir2_sf_hdr_size(sfp->i8count));
  	/*
  	 * Special case for .
  	 */
@@@ -954,8 -953,8 +965,13 @@@ xfs_dir2_sf_removename
  
  	trace_xfs_dir2_sf_removename(args);
  
++<<<<<<< HEAD
 +	ASSERT(dp->i_df.if_flags & XFS_IFINLINE);
 +	oldsize = (int)dp->i_d.di_size;
++=======
+ 	ASSERT(dp->i_df.if_format == XFS_DINODE_FMT_LOCAL);
+ 	oldsize = (int)dp->i_disk_size;
++>>>>>>> 0779f4a68d4d (xfs: remove XFS_IFINLINE)
  	ASSERT(oldsize >= offsetof(struct xfs_dir2_sf_hdr, parent));
  	ASSERT(dp->i_df.if_bytes == oldsize);
  	ASSERT(dp->i_df.if_u1.if_data != NULL);
@@@ -1053,12 -1052,12 +1069,18 @@@ xfs_dir2_sf_replace
  
  	trace_xfs_dir2_sf_replace(args);
  
++<<<<<<< HEAD
 +	ASSERT(dp->i_df.if_flags & XFS_IFINLINE);
 +	ASSERT(dp->i_d.di_size >= offsetof(struct xfs_dir2_sf_hdr, parent));
 +	ASSERT(dp->i_df.if_bytes == dp->i_d.di_size);
++=======
+ 	ASSERT(dp->i_df.if_format == XFS_DINODE_FMT_LOCAL);
+ 	ASSERT(dp->i_disk_size >= offsetof(struct xfs_dir2_sf_hdr, parent));
+ 	ASSERT(dp->i_df.if_bytes == dp->i_disk_size);
++>>>>>>> 0779f4a68d4d (xfs: remove XFS_IFINLINE)
  	ASSERT(dp->i_df.if_u1.if_data != NULL);
  	sfp = (xfs_dir2_sf_hdr_t *)dp->i_df.if_u1.if_data;
 -	ASSERT(dp->i_disk_size >= xfs_dir2_sf_hdr_size(sfp->i8count));
 +	ASSERT(dp->i_d.di_size >= xfs_dir2_sf_hdr_size(sfp->i8count));
  
  	/*
  	 * New inode number is large, and need to convert to 8-byte inodes.
diff --cc fs/xfs/xfs_dir2_readdir.c
index 477df4869d19,da1cc683560c..000000000000
--- a/fs/xfs/xfs_dir2_readdir.c
+++ b/fs/xfs/xfs_dir2_readdir.c
@@@ -57,8 -57,8 +57,13 @@@ xfs_dir2_sf_getdents
  	xfs_ino_t		ino;
  	struct xfs_da_geometry	*geo = args->geo;
  
++<<<<<<< HEAD
 +	ASSERT(dp->i_df.if_flags & XFS_IFINLINE);
 +	ASSERT(dp->i_df.if_bytes == dp->i_d.di_size);
++=======
+ 	ASSERT(dp->i_df.if_format == XFS_DINODE_FMT_LOCAL);
+ 	ASSERT(dp->i_df.if_bytes == dp->i_disk_size);
++>>>>>>> 0779f4a68d4d (xfs: remove XFS_IFINLINE)
  	ASSERT(dp->i_df.if_u1.if_data != NULL);
  
  	sfp = (xfs_dir2_sf_hdr_t *)dp->i_df.if_u1.if_data;
diff --cc fs/xfs/xfs_iops.c
index 1a5880c79e28,8f2f74a496bd..000000000000
--- a/fs/xfs/xfs_iops.c
+++ b/fs/xfs/xfs_iops.c
@@@ -469,6 -510,27 +469,30 @@@ xfs_vn_get_link
  	return ERR_PTR(error);
  }
  
++<<<<<<< HEAD
++=======
+ STATIC const char *
+ xfs_vn_get_link_inline(
+ 	struct dentry		*dentry,
+ 	struct inode		*inode,
+ 	struct delayed_call	*done)
+ {
+ 	struct xfs_inode	*ip = XFS_I(inode);
+ 	char			*link;
+ 
+ 	ASSERT(ip->i_df.if_format == XFS_DINODE_FMT_LOCAL);
+ 
+ 	/*
+ 	 * The VFS crashes on a NULL pointer, so return -EFSCORRUPTED if
+ 	 * if_data is junk.
+ 	 */
+ 	link = ip->i_df.if_u1.if_data;
+ 	if (XFS_IS_CORRUPT(ip->i_mount, !link))
+ 		return ERR_PTR(-EFSCORRUPTED);
+ 	return link;
+ }
+ 
++>>>>>>> 0779f4a68d4d (xfs: remove XFS_IFINLINE)
  static uint32_t
  xfs_stat_blksize(
  	struct xfs_inode	*ip)
@@@ -1326,7 -1401,10 +1350,14 @@@ xfs_setup_iops
  		inode->i_fop = &xfs_dir_file_operations;
  		break;
  	case S_IFLNK:
++<<<<<<< HEAD
 +		inode->i_op = &xfs_symlink_inode_operations;
++=======
+ 		if (ip->i_df.if_format == XFS_DINODE_FMT_LOCAL)
+ 			inode->i_op = &xfs_inline_symlink_inode_operations;
+ 		else
+ 			inode->i_op = &xfs_symlink_inode_operations;
++>>>>>>> 0779f4a68d4d (xfs: remove XFS_IFINLINE)
  		break;
  	default:
  		inode->i_op = &xfs_inode_operations;
diff --cc fs/xfs/xfs_symlink.c
index 6b6bafbb12c3,d4b3567d8794..000000000000
--- a/fs/xfs/xfs_symlink.c
+++ b/fs/xfs/xfs_symlink.c
@@@ -105,6 -104,8 +105,11 @@@ xfs_readlink
  
  	trace_xfs_readlink(ip);
  
++<<<<<<< HEAD
++=======
+ 	ASSERT(ip->i_df.if_format != XFS_DINODE_FMT_LOCAL);
+ 
++>>>>>>> 0779f4a68d4d (xfs: remove XFS_IFINLINE)
  	if (XFS_FORCED_SHUTDOWN(mp))
  		return -EIO;
  
* Unmerged path fs/xfs/libxfs/xfs_attr.c
diff --git a/fs/xfs/libxfs/xfs_attr_leaf.c b/fs/xfs/libxfs/xfs_attr_leaf.c
index d6ef69ab1c67..2de6ff2425a4 100644
--- a/fs/xfs/libxfs/xfs_attr_leaf.c
+++ b/fs/xfs/libxfs/xfs_attr_leaf.c
@@ -654,9 +654,6 @@ xfs_attr_shortform_create(
 	if (ifp->if_format == XFS_DINODE_FMT_EXTENTS) {
 		ifp->if_flags &= ~XFS_IFEXTENTS;	/* just in case */
 		ifp->if_format = XFS_DINODE_FMT_LOCAL;
-		ifp->if_flags |= XFS_IFINLINE;
-	} else {
-		ASSERT(ifp->if_flags & XFS_IFINLINE);
 	}
 	xfs_idata_realloc(dp, sizeof(*hdr), XFS_ATTR_FORK);
 	hdr = (struct xfs_attr_sf_hdr *)ifp->if_u1.if_data;
@@ -733,7 +730,7 @@ xfs_attr_shortform_add(
 	dp->i_d.di_forkoff = forkoff;
 
 	ifp = dp->i_afp;
-	ASSERT(ifp->if_flags & XFS_IFINLINE);
+	ASSERT(ifp->if_format == XFS_DINODE_FMT_LOCAL);
 	sf = (struct xfs_attr_shortform *)ifp->if_u1.if_data;
 	if (xfs_attr_sf_findname(args, &sfe, NULL) == -EEXIST)
 		ASSERT(0);
@@ -851,7 +848,7 @@ xfs_attr_shortform_lookup(xfs_da_args_t *args)
 	trace_xfs_attr_sf_lookup(args);
 
 	ifp = args->dp->i_afp;
-	ASSERT(ifp->if_flags & XFS_IFINLINE);
+	ASSERT(ifp->if_format == XFS_DINODE_FMT_LOCAL);
 	sf = (struct xfs_attr_shortform *)ifp->if_u1.if_data;
 	sfe = &sf->list[0];
 	for (i = 0; i < sf->hdr.count;
@@ -878,7 +875,7 @@ xfs_attr_shortform_getvalue(
 	struct xfs_attr_sf_entry *sfe;
 	int			i;
 
-	ASSERT(args->dp->i_afp->if_flags == XFS_IFINLINE);
+	ASSERT(args->dp->i_afp->if_format == XFS_DINODE_FMT_LOCAL);
 	sf = (struct xfs_attr_shortform *)args->dp->i_afp->if_u1.if_data;
 	sfe = &sf->list[0];
 	for (i = 0; i < sf->hdr.count;
diff --git a/fs/xfs/libxfs/xfs_bmap.c b/fs/xfs/libxfs/xfs_bmap.c
index a7275f2219c2..13ee231035b6 100644
--- a/fs/xfs/libxfs/xfs_bmap.c
+++ b/fs/xfs/libxfs/xfs_bmap.c
@@ -803,7 +803,6 @@ xfs_bmap_local_to_extents_empty(
 	ASSERT(ifp->if_nextents == 0);
 
 	xfs_bmap_forkoff_reset(ip, whichfork);
-	ifp->if_flags &= ~XFS_IFINLINE;
 	ifp->if_flags |= XFS_IFEXTENTS;
 	ifp->if_u1.if_root = NULL;
 	ifp->if_height = 0;
@@ -848,7 +847,7 @@ xfs_bmap_local_to_extents(
 
 	flags = 0;
 	error = 0;
-	ASSERT((ifp->if_flags & (XFS_IFINLINE|XFS_IFEXTENTS)) == XFS_IFINLINE);
+	ASSERT(!(ifp->if_flags & XFS_IFEXTENTS));
 	memset(&args, 0, sizeof(args));
 	args.tp = tp;
 	args.mp = ip->i_mount;
* Unmerged path fs/xfs/libxfs/xfs_dir2_block.c
* Unmerged path fs/xfs/libxfs/xfs_dir2_sf.c
diff --git a/fs/xfs/libxfs/xfs_inode_fork.c b/fs/xfs/libxfs/xfs_inode_fork.c
index d7590929c929..cf2a403392ec 100644
--- a/fs/xfs/libxfs/xfs_inode_fork.c
+++ b/fs/xfs/libxfs/xfs_inode_fork.c
@@ -61,7 +61,6 @@ xfs_init_local_fork(
 
 	ifp->if_bytes = size;
 	ifp->if_flags &= ~XFS_IFEXTENTS;
-	ifp->if_flags |= XFS_IFINLINE;
 }
 
 /*
diff --git a/fs/xfs/libxfs/xfs_inode_fork.h b/fs/xfs/libxfs/xfs_inode_fork.h
index 6b350307666e..54ef9c918ede 100644
--- a/fs/xfs/libxfs/xfs_inode_fork.h
+++ b/fs/xfs/libxfs/xfs_inode_fork.h
@@ -30,7 +30,6 @@ struct xfs_ifork {
 /*
  * Per-fork incore inode flags.
  */
-#define	XFS_IFINLINE	0x01	/* Inline data is read in */
 #define	XFS_IFEXTENTS	0x02	/* All extent pointers are read in */
 
 /*
diff --git a/fs/xfs/scrub/symlink.c b/fs/xfs/scrub/symlink.c
index 80184486e796..2cf725935fc4 100644
--- a/fs/xfs/scrub/symlink.c
+++ b/fs/xfs/scrub/symlink.c
@@ -51,7 +51,7 @@ xchk_symlink(
 	}
 
 	/* Inline symlink? */
-	if (ifp->if_flags & XFS_IFINLINE) {
+	if (ifp->if_format == XFS_DINODE_FMT_LOCAL) {
 		if (len > XFS_IFORK_DSIZE(ip) ||
 		    len > strnlen(ifp->if_u1.if_data, XFS_IFORK_DSIZE(ip)))
 			xchk_fblock_set_corrupt(sc, XFS_DATA_FORK, 0);
* Unmerged path fs/xfs/xfs_dir2_readdir.c
* Unmerged path fs/xfs/xfs_iops.c
* Unmerged path fs/xfs/xfs_symlink.c
