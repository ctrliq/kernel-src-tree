s390/mm: better annotate 2KB pagetable fragments handling

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-394.el8
commit-author Alexander Gordeev <agordeev@linux.ibm.com>
commit 1194372db6f3c917c9c6f6907e8378cf1076c557
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-394.el8/1194372d.failed

Explicitly encode immediate value of pending remove nibble
(bits 31-28) and tracking nibble (bits 27-24) of the page
refcount whenever these nibbles are tested or changed, for
better readability. Also, add some comments describing how
the fragments are handled.

	Reviewed-by: Gerald Schaefer <gerald.schaefer@linux.ibm.com>
	Signed-off-by: Alexander Gordeev <agordeev@linux.ibm.com>
	Signed-off-by: Heiko Carstens <hca@linux.ibm.com>
(cherry picked from commit 1194372db6f3c917c9c6f6907e8378cf1076c557)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/s390/mm/pgalloc.c
diff --cc arch/s390/mm/pgalloc.c
index 195c1827361f,5d5549843c5c..000000000000
--- a/arch/s390/mm/pgalloc.c
+++ b/arch/s390/mm/pgalloc.c
@@@ -265,13 -335,13 +347,13 @@@ void page_table_free(struct mm_struct *
  		spin_unlock_bh(&mm->context.lock);
  		mask = atomic_xor_bits(&page->_refcount, 0x10U << (bit + 24));
  		mask >>= 24;
- 		if (mask != 0)
+ 		if (mask != 0x00U)
  			return;
  	} else {
- 		atomic_xor_bits(&page->_refcount, 3U << 24);
+ 		atomic_xor_bits(&page->_refcount, 0x03U << 24);
  	}
  
 -	pgtable_pte_page_dtor(page);
 +	pgtable_page_dtor(page);
  	__free_page(page);
  }
  
@@@ -310,20 -385,20 +397,28 @@@ void __tlb_remove_table(void *_table
  	struct page *page = virt_to_page(table);
  
  	switch (mask) {
- 	case 0:		/* pmd, pud, or p4d */
+ 	case 0x00U:	/* pmd, pud, or p4d */
  		free_pages((unsigned long) table, 2);
  		break;
- 	case 1:		/* lower 2K of a 4K page table */
- 	case 2:		/* higher 2K of a 4K page table */
+ 	case 0x01U:	/* lower 2K of a 4K page table */
+ 	case 0x02U:	/* higher 2K of a 4K page table */
  		mask = atomic_xor_bits(&page->_refcount, mask << (4 + 24));
  		mask >>= 24;
- 		if (mask != 0)
+ 		if (mask != 0x00U)
  			break;
++<<<<<<< HEAD
 +		/* fallthrough */
 +	case 3:		/* 4K page table with pgstes */
 +		if (mask & 3)
 +			atomic_xor_bits(&page->_refcount, 3 << 24);
 +		pgtable_page_dtor(page);
++=======
+ 		fallthrough;
+ 	case 0x03U:	/* 4K page table with pgstes */
+ 		if (mask & 0x03U)
+ 			atomic_xor_bits(&page->_refcount, 0x03U << 24);
+ 		pgtable_pte_page_dtor(page);
++>>>>>>> 1194372db6f3 (s390/mm: better annotate 2KB pagetable fragments handling)
  		__free_page(page);
  		break;
  	}
* Unmerged path arch/s390/mm/pgalloc.c
