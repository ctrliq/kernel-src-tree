stacktrace: move filter_irq_stacks() to kernel/stacktrace.c

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-394.el8
commit-author Marco Elver <elver@google.com>
commit f39f21b3ddc7fc0f87eb6dc75ddc81b5bbfb7672
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-394.el8/f39f21b3.failed

filter_irq_stacks() has little to do with the stackdepot implementation,
except that it is usually used by users (such as KASAN) of stackdepot to
reduce the stack trace.

However, filter_irq_stacks() itself is not useful without a stack trace
as obtained by stack_trace_save() and friends.

Therefore, move filter_irq_stacks() to kernel/stacktrace.c, so that new
users of filter_irq_stacks() do not have to start depending on
STACKDEPOT only for filter_irq_stacks().

Link: https://lkml.kernel.org/r/20210923104803.2620285-1-elver@google.com
	Signed-off-by: Marco Elver <elver@google.com>
	Acked-by: Dmitry Vyukov <dvyukov@google.com>
	Cc: Alexander Potapenko <glider@google.com>
	Cc: Jann Horn <jannh@google.com>
	Cc: Aleksandr Nogikh <nogikh@google.com>
	Cc: Taras Madan <tarasmadan@google.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit f39f21b3ddc7fc0f87eb6dc75ddc81b5bbfb7672)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/stackdepot.h
diff --cc include/linux/stackdepot.h
index 93144d111c09,d29860966bc9..000000000000
--- a/include/linux/stackdepot.h
+++ b/include/linux/stackdepot.h
@@@ -33,6 -25,13 +33,17 @@@ depot_stack_handle_t stack_depot_save(u
  unsigned int stack_depot_fetch(depot_stack_handle_t handle,
  			       unsigned long **entries);
  
++<<<<<<< HEAD
 +unsigned int filter_irq_stacks(unsigned long *entries, unsigned int nr_entries);
++=======
+ #ifdef CONFIG_STACKDEPOT
+ int stack_depot_init(void);
+ #else
+ static inline int stack_depot_init(void)
+ {
+ 	return 0;
+ }
+ #endif	/* CONFIG_STACKDEPOT */
++>>>>>>> f39f21b3ddc7 (stacktrace: move filter_irq_stacks() to kernel/stacktrace.c)
  
  #endif
* Unmerged path include/linux/stackdepot.h
diff --git a/include/linux/stacktrace.h b/include/linux/stacktrace.h
index 1b64bc82201e..94668a0576f3 100644
--- a/include/linux/stacktrace.h
+++ b/include/linux/stacktrace.h
@@ -22,6 +22,7 @@ unsigned int stack_trace_save_tsk(struct task_struct *task,
 unsigned int stack_trace_save_regs(struct pt_regs *regs, unsigned long *store,
 				   unsigned int size, unsigned int skipnr);
 unsigned int stack_trace_save_user(unsigned long *store, unsigned int size);
+unsigned int filter_irq_stacks(unsigned long *entries, unsigned int nr_entries);
 
 /*
  * RHEL KABI whilelisted structure and functions.
diff --git a/kernel/stacktrace.c b/kernel/stacktrace.c
index 5cd5a23886de..e8534bbb5285 100644
--- a/kernel/stacktrace.c
+++ b/kernel/stacktrace.c
@@ -12,6 +12,7 @@
 #include <linux/export.h>
 #include <linux/kallsyms.h>
 #include <linux/stacktrace.h>
+#include <linux/interrupt.h>
 
 /**
  * stack_trace_print - Print the entries in the stack trace
@@ -389,3 +390,32 @@ unsigned int stack_trace_save_user(unsigned long *store, unsigned int size)
 #endif /* CONFIG_USER_STACKTRACE_SUPPORT */
 
 #endif /* !CONFIG_ARCH_STACKWALK */
+
+static inline bool in_irqentry_text(unsigned long ptr)
+{
+	return (ptr >= (unsigned long)&__irqentry_text_start &&
+		ptr < (unsigned long)&__irqentry_text_end) ||
+		(ptr >= (unsigned long)&__softirqentry_text_start &&
+		 ptr < (unsigned long)&__softirqentry_text_end);
+}
+
+/**
+ * filter_irq_stacks - Find first IRQ stack entry in trace
+ * @entries:	Pointer to stack trace array
+ * @nr_entries:	Number of entries in the storage array
+ *
+ * Return: Number of trace entries until IRQ stack starts.
+ */
+unsigned int filter_irq_stacks(unsigned long *entries, unsigned int nr_entries)
+{
+	unsigned int i;
+
+	for (i = 0; i < nr_entries; i++) {
+		if (in_irqentry_text(entries[i])) {
+			/* Include the irqentry function into the stack. */
+			return i + 1;
+		}
+	}
+	return nr_entries;
+}
+EXPORT_SYMBOL_GPL(filter_irq_stacks);
diff --git a/lib/stackdepot.c b/lib/stackdepot.c
index 4782850443d3..da5857903fa2 100644
--- a/lib/stackdepot.c
+++ b/lib/stackdepot.c
@@ -29,7 +29,6 @@
  */
 
 #include <linux/gfp.h>
-#include <linux/interrupt.h>
 #include <linux/jhash.h>
 #include <linux/kernel.h>
 #include <linux/mm.h>
@@ -357,26 +356,3 @@ depot_stack_handle_t stack_depot_save(unsigned long *entries,
 	return __stack_depot_save(entries, nr_entries, alloc_flags, true);
 }
 EXPORT_SYMBOL_GPL(stack_depot_save);
-
-static inline int in_irqentry_text(unsigned long ptr)
-{
-	return (ptr >= (unsigned long)&__irqentry_text_start &&
-		ptr < (unsigned long)&__irqentry_text_end) ||
-		(ptr >= (unsigned long)&__softirqentry_text_start &&
-		 ptr < (unsigned long)&__softirqentry_text_end);
-}
-
-unsigned int filter_irq_stacks(unsigned long *entries,
-					     unsigned int nr_entries)
-{
-	unsigned int i;
-
-	for (i = 0; i < nr_entries; i++) {
-		if (in_irqentry_text(entries[i])) {
-			/* Include the irqentry function into the stack. */
-			return i + 1;
-		}
-	}
-	return nr_entries;
-}
-EXPORT_SYMBOL_GPL(filter_irq_stacks);
