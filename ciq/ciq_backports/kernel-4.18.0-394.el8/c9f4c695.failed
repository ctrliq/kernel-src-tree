RDMA/rxe: Reverse the sense of RXE_POOL_NO_ALLOC

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-394.el8
commit-author Bob Pearson <rpearsonhpe@gmail.com>
commit c9f4c695835c9c2085065a3adc1b57d2005b508b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-394.el8/c9f4c695.failed

There is only one remaining object type that allocates its own memory,
that is mr. So the sense of RXE_POOL_NO_ALLOC is changed to
RXE_POOL_ALLOC. Add checks to rxe_alloc() and rxe_add_to_pool() to make
sure the correct call is used for the setting of this flag.

Link: https://lore.kernel.org/r/20220304000808.225811-4-rpearsonhpe@gmail.com
	Signed-off-by: Bob Pearson <rpearsonhpe@gmail.com>
	Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
(cherry picked from commit c9f4c695835c9c2085065a3adc1b57d2005b508b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/sw/rxe/rxe_pool.c
#	drivers/infiniband/sw/rxe/rxe_pool.h
diff --cc drivers/infiniband/sw/rxe/rxe_pool.c
index e7b233608b61,239c24544ff2..000000000000
--- a/drivers/infiniband/sw/rxe/rxe_pool.c
+++ b/drivers/infiniband/sw/rxe/rxe_pool.c
@@@ -22,28 -20,26 +22,46 @@@ static const struct rxe_type_info 
  	[RXE_TYPE_UC] = {
  		.name		= "rxe-uc",
  		.size		= sizeof(struct rxe_ucontext),
++<<<<<<< HEAD
 +		.elem_offset	= offsetof(struct rxe_ucontext, pelem),
 +		.flags          = RXE_POOL_NO_ALLOC,
++=======
+ 		.elem_offset	= offsetof(struct rxe_ucontext, elem),
++>>>>>>> c9f4c695835c (RDMA/rxe: Reverse the sense of RXE_POOL_NO_ALLOC)
  	},
  	[RXE_TYPE_PD] = {
  		.name		= "rxe-pd",
  		.size		= sizeof(struct rxe_pd),
++<<<<<<< HEAD
 +		.elem_offset	= offsetof(struct rxe_pd, pelem),
 +		.flags		= RXE_POOL_NO_ALLOC,
++=======
+ 		.elem_offset	= offsetof(struct rxe_pd, elem),
++>>>>>>> c9f4c695835c (RDMA/rxe: Reverse the sense of RXE_POOL_NO_ALLOC)
  	},
  	[RXE_TYPE_AH] = {
  		.name		= "rxe-ah",
  		.size		= sizeof(struct rxe_ah),
++<<<<<<< HEAD
 +		.elem_offset	= offsetof(struct rxe_ah, pelem),
 +		.flags		= RXE_POOL_INDEX | RXE_POOL_NO_ALLOC,
++=======
+ 		.elem_offset	= offsetof(struct rxe_ah, elem),
+ 		.flags		= RXE_POOL_INDEX,
++>>>>>>> c9f4c695835c (RDMA/rxe: Reverse the sense of RXE_POOL_NO_ALLOC)
  		.min_index	= RXE_MIN_AH_INDEX,
  		.max_index	= RXE_MAX_AH_INDEX,
  	},
  	[RXE_TYPE_SRQ] = {
  		.name		= "rxe-srq",
  		.size		= sizeof(struct rxe_srq),
++<<<<<<< HEAD
 +		.elem_offset	= offsetof(struct rxe_srq, pelem),
 +		.flags		= RXE_POOL_INDEX | RXE_POOL_NO_ALLOC,
++=======
+ 		.elem_offset	= offsetof(struct rxe_srq, elem),
+ 		.flags		= RXE_POOL_INDEX,
++>>>>>>> c9f4c695835c (RDMA/rxe: Reverse the sense of RXE_POOL_NO_ALLOC)
  		.min_index	= RXE_MIN_SRQ_INDEX,
  		.max_index	= RXE_MAX_SRQ_INDEX,
  	},
@@@ -59,25 -55,24 +77,29 @@@
  	[RXE_TYPE_CQ] = {
  		.name		= "rxe-cq",
  		.size		= sizeof(struct rxe_cq),
++<<<<<<< HEAD
 +		.elem_offset	= offsetof(struct rxe_cq, pelem),
 +		.flags          = RXE_POOL_NO_ALLOC,
++=======
+ 		.elem_offset	= offsetof(struct rxe_cq, elem),
++>>>>>>> c9f4c695835c (RDMA/rxe: Reverse the sense of RXE_POOL_NO_ALLOC)
  		.cleanup	= rxe_cq_cleanup,
  	},
  	[RXE_TYPE_MR] = {
  		.name		= "rxe-mr",
  		.size		= sizeof(struct rxe_mr),
 -		.elem_offset	= offsetof(struct rxe_mr, elem),
 +		.elem_offset	= offsetof(struct rxe_mr, pelem),
  		.cleanup	= rxe_mr_cleanup,
- 		.flags		= RXE_POOL_INDEX,
+ 		.flags		= RXE_POOL_INDEX | RXE_POOL_ALLOC,
  		.min_index	= RXE_MIN_MR_INDEX,
  		.max_index	= RXE_MAX_MR_INDEX,
  	},
  	[RXE_TYPE_MW] = {
  		.name		= "rxe-mw",
  		.size		= sizeof(struct rxe_mw),
 -		.elem_offset	= offsetof(struct rxe_mw, elem),
 +		.elem_offset	= offsetof(struct rxe_mw, pelem),
  		.cleanup	= rxe_mw_cleanup,
- 		.flags		= RXE_POOL_INDEX | RXE_POOL_NO_ALLOC,
+ 		.flags		= RXE_POOL_INDEX,
  		.min_index	= RXE_MIN_MW_INDEX,
  		.max_index	= RXE_MAX_MW_INDEX,
  	},
@@@ -358,10 -258,12 +380,13 @@@ out_cnt
  
  void *rxe_alloc(struct rxe_pool *pool)
  {
 -	struct rxe_pool_elem *elem;
 -	void *obj;
 +	const struct rxe_type_info *info = &rxe_type_info[pool->type];
 +	struct rxe_pool_entry *elem;
 +	u8 *obj;
  
+ 	if (WARN_ON(!(pool->flags & RXE_POOL_ALLOC)))
+ 		return NULL;
+ 
  	if (atomic_inc_return(&pool->num_elem) > pool->max_elem)
  		goto out_cnt;
  
@@@ -381,8 -284,11 +406,11 @@@ out_cnt
  	return NULL;
  }
  
 -int __rxe_add_to_pool(struct rxe_pool *pool, struct rxe_pool_elem *elem)
 +int __rxe_add_to_pool(struct rxe_pool *pool, struct rxe_pool_entry *elem)
  {
+ 	if (WARN_ON(pool->flags & RXE_POOL_ALLOC))
+ 		return -EINVAL;
+ 
  	if (atomic_inc_return(&pool->num_elem) > pool->max_elem)
  		goto out_cnt;
  
@@@ -407,8 -313,8 +435,13 @@@ void rxe_elem_release(struct kref *kref
  	if (pool->cleanup)
  		pool->cleanup(elem);
  
++<<<<<<< HEAD
 +	if (!(pool->flags & RXE_POOL_NO_ALLOC)) {
 +		obj = (u8 *)elem - info->elem_offset;
++=======
+ 	if (pool->flags & RXE_POOL_ALLOC) {
+ 		obj = elem->obj;
++>>>>>>> c9f4c695835c (RDMA/rxe: Reverse the sense of RXE_POOL_NO_ALLOC)
  		kfree(obj);
  	}
  
diff --cc drivers/infiniband/sw/rxe/rxe_pool.h
index 837585fdbc34,44b944c8c360..000000000000
--- a/drivers/infiniband/sw/rxe/rxe_pool.h
+++ b/drivers/infiniband/sw/rxe/rxe_pool.h
@@@ -9,8 -9,7 +9,12 @@@
  
  enum rxe_pool_flags {
  	RXE_POOL_INDEX		= BIT(1),
++<<<<<<< HEAD
 +	RXE_POOL_KEY		= BIT(2),
 +	RXE_POOL_NO_ALLOC	= BIT(4),
++=======
+ 	RXE_POOL_ALLOC		= BIT(2),
++>>>>>>> c9f4c695835c (RDMA/rxe: Reverse the sense of RXE_POOL_NO_ALLOC)
  };
  
  enum rxe_elem_type {
* Unmerged path drivers/infiniband/sw/rxe/rxe_pool.c
* Unmerged path drivers/infiniband/sw/rxe/rxe_pool.h
