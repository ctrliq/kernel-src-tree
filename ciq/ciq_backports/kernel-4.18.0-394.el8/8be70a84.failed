scsi: target: pscsi: Set SCF_TREAT_READ_AS_NORMAL flag only if there is valid data

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-394.el8
commit-author David Jeffery <djeffery@redhat.com>
commit 8be70a842f70c0fe8e00fd488b1966344fa10ff4
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-394.el8/8be70a84.failed

With tape devices, the SCF_TREAT_READ_AS_NORMAL flag is used by the target
subsystem to mark commands which have both data to return as well as sense
data. But with pscsi, SCF_TREAT_READ_AS_NORMAL can be set even if there is
no data to return. The SCF_TREAT_READ_AS_NORMAL flag causes the target core
to call iscsit data-in callbacks even if there is no data, which iscsit
does not support. This results in iscsit going into an error state
requiring recovery and being unable to complete the command to the
initiator.

This issue can be resolved by fixing pscsi to only set
SCF_TREAT_READ_AS_NORMAL if there is valid data to return alongside the
sense data.

Link: https://lore.kernel.org/r/20220427183250.291881-1-djeffery@redhat.com
Fixes: bd81372065fa ("scsi: target: transport should handle st FM/EOM/ILI reads")
	Reported-by: Scott Hamilton <scott.hamilton@atos.net>
	Tested-by: Laurence Oberman <loberman@redhat.com>
	Reviewed-by: Laurence Oberman <loberman@redhat.com>
	Signed-off-by: David Jeffery <djeffery@redhat.com>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit 8be70a842f70c0fe8e00fd488b1966344fa10ff4)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/target/target_core_pscsi.c
diff --cc drivers/target/target_core_pscsi.c
index 28cd0fe581a7,60dafe4c581b..000000000000
--- a/drivers/target/target_core_pscsi.c
+++ b/drivers/target/target_core_pscsi.c
@@@ -1057,22 -1030,21 +1057,37 @@@ static sector_t pscsi_get_blocks(struc
  static void pscsi_req_done(struct request *req, blk_status_t status)
  {
  	struct se_cmd *cmd = req->end_io_data;
++<<<<<<< HEAD
 +	struct pscsi_plugin_task *pt = cmd->priv;
 +	int result = scsi_req(req)->result;
 +	u8 scsi_status = result & 0xff;
++=======
+ 	struct scsi_cmnd *scmd = blk_mq_rq_to_pdu(req);
+ 	enum sam_status scsi_status = scmd->result & 0xff;
+ 	int valid_data = cmd->data_length - scmd->resid_len;
+ 	u8 *cdb = cmd->priv;
++>>>>>>> 8be70a842f70 (scsi: target: pscsi: Set SCF_TREAT_READ_AS_NORMAL flag only if there is valid data)
  
  	if (scsi_status != SAM_STAT_GOOD) {
  		pr_debug("PSCSI Status Byte exception at cmd: %p CDB:"
 -			" 0x%02x Result: 0x%08x\n", cmd, cdb[0], scmd->result);
 +			" 0x%02x Result: 0x%08x\n", cmd, pt->pscsi_cdb[0],
 +			result);
  	}
  
++<<<<<<< HEAD
 +	pscsi_complete_cmd(cmd, scsi_status, scsi_req(req)->sense);
++=======
+ 	pscsi_complete_cmd(cmd, scsi_status, scmd->sense_buffer, valid_data);
++>>>>>>> 8be70a842f70 (scsi: target: pscsi: Set SCF_TREAT_READ_AS_NORMAL flag only if there is valid data)
  
 -	switch (host_byte(scmd->result)) {
 +	switch (host_byte(result)) {
  	case DID_OK:
++<<<<<<< HEAD
 +		target_complete_cmd_with_length(cmd, scsi_status,
 +			cmd->data_length - scsi_req(req)->resid_len);
++=======
+ 		target_complete_cmd_with_length(cmd, scsi_status, valid_data);
++>>>>>>> 8be70a842f70 (scsi: target: pscsi: Set SCF_TREAT_READ_AS_NORMAL flag only if there is valid data)
  		break;
  	default:
  		pr_debug("PSCSI Host Byte exception at cmd: %p CDB:"
* Unmerged path drivers/target/target_core_pscsi.c
