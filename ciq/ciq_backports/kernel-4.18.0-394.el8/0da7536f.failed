ip: Fix SO_MARK in RST, ACK and ICMP packets

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-394.el8
commit-author Willem de Bruijn <willemb@google.com>
commit 0da7536fb47f51df89ccfcb1fa09f249d9accec5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-394.el8/0da7536f.failed

When no full socket is available, skbs are sent over a per-netns
control socket. Its sk_mark is temporarily adjusted to match that
of the real (request or timewait) socket or to reflect an incoming
skb, so that the outgoing skb inherits this in __ip_make_skb.

Introduction of the socket cookie mark field broke this. Now the
skb is set through the cookie and cork:

<caller>		# init sockc.mark from sk_mark or cmsg
ip_append_data
  ip_setup_cork		# convert sockc.mark to cork mark
ip_push_pending_frames
  ip_finish_skb
    __ip_make_skb	# set skb->mark to cork mark

But I missed these special control sockets. Update all callers of
__ip(6)_make_skb that were originally missed.

For IPv6, the same two icmp(v6) paths are affected. The third
case is not, as commit 92e55f412cff ("tcp: don't annotate
mark on control socket from tcp_v6_send_response()") replaced
the ctl_sk->sk_mark with passing the mark field directly as a
function argument. That commit predates the commit that
introduced the bug.

Fixes: c6af0c227a22 ("ip: support SO_MARK cmsg")
	Signed-off-by: Willem de Bruijn <willemb@google.com>
	Reported-by: Martin KaFai Lau <kafai@fb.com>
	Reviewed-by: Martin KaFai Lau <kafai@fb.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 0da7536fb47f51df89ccfcb1fa09f249d9accec5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/ipv4/icmp.c
#	net/ipv6/icmp.c
diff --cc net/ipv4/icmp.c
index cafe71040b9c,e30515f89802..000000000000
--- a/net/ipv4/icmp.c
+++ b/net/ipv4/icmp.c
@@@ -433,15 -425,11 +433,15 @@@ static void icmp_reply(struct icmp_bxm 
  
  	icmp_param->data.icmph.checksum = 0;
  
 -	ipcm_init(&ipc);
  	inet->tos = ip_hdr(skb)->tos;
- 	sk->sk_mark = mark;
+ 	ipc.sockc.mark = mark;
  	daddr = ipc.addr = ip_hdr(skb)->saddr;
  	saddr = fib_compute_spec_dst(skb);
 +	ipc.opt = NULL;
 +	ipc.tx_flags = 0;
 +	ipc.ttl = 0;
 +	ipc.tos = -1;
 +	ipc.sockc.transmit_time = 0;
  
  	if (icmp_param->replyopts.opt.opt.optlen) {
  		ipc.opt = &icmp_param->replyopts.opt;
@@@ -721,13 -710,10 +721,20 @@@ void __icmp_send(struct sk_buff *skb_in
  	icmp_param.skb	  = skb_in;
  	icmp_param.offset = skb_network_offset(skb_in);
  	inet_sk(sk)->tos = tos;
++<<<<<<< HEAD
 +	sk->sk_mark = mark;
 +	ipc.addr = iph->saddr;
 +	ipc.opt = &icmp_param.replyopts.opt;
 +	ipc.tx_flags = 0;
 +	ipc.ttl = 0;
 +	ipc.tos = -1;
 +	ipc.sockc.transmit_time = 0;
++=======
+ 	ipcm_init(&ipc);
+ 	ipc.addr = iph->saddr;
+ 	ipc.opt = &icmp_param.replyopts.opt;
+ 	ipc.sockc.mark = mark;
++>>>>>>> 0da7536fb47f (ip: Fix SO_MARK in RST, ACK and ICMP packets)
  
  	rt = icmp_route_lookup(net, &fl4, skb_in, iph, saddr, tos, mark,
  			       type, code, &icmp_param);
diff --cc net/ipv6/icmp.c
index 2b9631c2b2d2,9df8737ae0d3..000000000000
--- a/net/ipv6/icmp.c
+++ b/net/ipv6/icmp.c
@@@ -534,11 -566,6 +534,14 @@@ static void icmp6_send(struct sk_buff *
  	fl6.mp_hash = rt6_multipath_hash(net, &fl6, skb, NULL);
  	security_skb_classify_flow(skb, flowi6_to_flowi(&fl6));
  
++<<<<<<< HEAD
 +	sk = icmpv6_xmit_lock(net);
 +	if (!sk)
 +		goto out_bh_enable;
 +
 +	sk->sk_mark = mark;
++=======
++>>>>>>> 0da7536fb47f (ip: Fix SO_MARK in RST, ACK and ICMP packets)
  	np = inet6_sk(sk);
  
  	if (!icmpv6_xrlim_allow(sk, type, &fl6))
@@@ -554,7 -581,8 +557,12 @@@
  	else if (!fl6.flowi6_oif)
  		fl6.flowi6_oif = np->ucast_oif;
  
++<<<<<<< HEAD
 +	ipc6.tclass = np->tclass;
++=======
+ 	ipcm6_init_sk(&ipc6, np);
+ 	ipc6.sockc.mark = mark;
++>>>>>>> 0da7536fb47f (ip: Fix SO_MARK in RST, ACK and ICMP packets)
  	fl6.flowlabel = ip6_make_flowinfo(ipc6.tclass, fl6.flowlabel);
  
  	dst = icmpv6_route_lookup(net, skb, sk, &fl6);
@@@ -735,10 -775,10 +742,14 @@@ static void icmpv6_echo_reply(struct sk
  	msg.offset = 0;
  	msg.type = ICMPV6_ECHO_REPLY;
  
 -	ipcm6_init_sk(&ipc6, np);
  	ipc6.hlimit = ip6_sk_dst_hoplimit(np, &fl6, dst);
  	ipc6.tclass = ipv6_get_dsfield(ipv6_hdr(skb));
++<<<<<<< HEAD
 +	ipc6.dontfrag = np->dontfrag;
 +	ipc6.opt = NULL;
++=======
+ 	ipc6.sockc.mark = mark;
++>>>>>>> 0da7536fb47f (ip: Fix SO_MARK in RST, ACK and ICMP packets)
  
  	if (ip6_append_data(sk, icmpv6_getfrag, &msg,
  			    skb->len + sizeof(struct icmp6hdr),
* Unmerged path net/ipv4/icmp.c
diff --git a/net/ipv4/ip_output.c b/net/ipv4/ip_output.c
index e18239b9a992..f9eb917f8739 100644
--- a/net/ipv4/ip_output.c
+++ b/net/ipv4/ip_output.c
@@ -1613,7 +1613,7 @@ void ip_send_unicast_reply(struct sock *sk, struct sk_buff *skb,
 	sk->sk_protocol = ip_hdr(skb)->protocol;
 	sk->sk_bound_dev_if = arg->bound_dev_if;
 	sk->sk_sndbuf = sysctl_wmem_default;
-	sk->sk_mark = fl4.flowi4_mark;
+	ipc.sockc.mark = fl4.flowi4_mark;
 	err = ip_append_data(sk, &fl4, ip_reply_glue_bits, arg->iov->iov_base,
 			     len, 0, &ipc, &rt, MSG_DONTWAIT);
 	if (unlikely(err)) {
* Unmerged path net/ipv6/icmp.c
