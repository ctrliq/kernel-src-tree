NFS: Add a cache validity flag argument to nfs_revalidate_inode()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-394.el8
commit-author Trond Myklebust <trond.myklebust@hammerspace.com>
commit 1f3208b2d6975f31b9c7c6bf174b84fe9c97492f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-394.el8/1f3208b2.failed

Add an argument to nfs_revalidate_inode() to allow callers to specify
which attributes they need to check for validity.

	Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
(cherry picked from commit 1f3208b2d6975f31b9c7c6bf174b84fe9c97492f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/nfs/export.c
#	fs/nfs/inode.c
diff --cc fs/nfs/export.c
index 3430d6891e89,37a1a88df771..000000000000
--- a/fs/nfs/export.c
+++ b/fs/nfs/export.c
@@@ -167,6 -167,12 +167,15 @@@ out
  	return parent;
  }
  
++<<<<<<< HEAD
++=======
+ static u64 nfs_fetch_iversion(struct inode *inode)
+ {
+ 	nfs_revalidate_inode(inode, NFS_INO_INVALID_CHANGE);
+ 	return inode_peek_iversion_raw(inode);
+ }
+ 
++>>>>>>> 1f3208b2d697 (NFS: Add a cache validity flag argument to nfs_revalidate_inode())
  const struct export_operations nfs_export_ops = {
  	.encode_fh = nfs_encode_fh,
  	.fh_to_dentry = nfs_fh_to_dentry,
diff --cc fs/nfs/inode.c
index b46b42e1ef8c,b9aac408f03a..000000000000
--- a/fs/nfs/inode.c
+++ b/fs/nfs/inode.c
@@@ -800,18 -802,30 +800,45 @@@ static void nfs_readdirplus_parent_cach
  	dput(parent);
  }
  
++<<<<<<< HEAD
 +static bool nfs_need_revalidate_inode(struct inode *inode)
 +{
 +	if (NFS_I(inode)->cache_validity &
 +			(NFS_INO_INVALID_ATTR|NFS_INO_INVALID_LABEL))
 +		return true;
 +	if (nfs_attribute_cache_expired(inode))
 +		return true;
 +	return false;
 +}
 +
 +int nfs_getattr(const struct path *path, struct kstat *stat,
 +		u32 request_mask, unsigned int query_flags)
++=======
+ static u32 nfs_get_valid_attrmask(struct inode *inode)
+ {
+ 	unsigned long cache_validity = READ_ONCE(NFS_I(inode)->cache_validity);
+ 	u32 reply_mask = STATX_INO | STATX_TYPE;
+ 
+ 	if (!(cache_validity & NFS_INO_INVALID_ATIME))
+ 		reply_mask |= STATX_ATIME;
+ 	if (!(cache_validity & NFS_INO_REVAL_PAGECACHE)) {
+ 		if (!(cache_validity & NFS_INO_INVALID_CTIME))
+ 			reply_mask |= STATX_CTIME;
+ 		if (!(cache_validity & NFS_INO_INVALID_MTIME))
+ 			reply_mask |= STATX_MTIME;
+ 		if (!(cache_validity & NFS_INO_INVALID_SIZE))
+ 			reply_mask |= STATX_SIZE;
+ 	}
+ 	if (!(cache_validity & NFS_INO_INVALID_OTHER))
+ 		reply_mask |= STATX_UID | STATX_GID | STATX_MODE | STATX_NLINK;
+ 	if (!(cache_validity & NFS_INO_INVALID_BLOCKS))
+ 		reply_mask |= STATX_BLOCKS;
+ 	return reply_mask;
+ }
+ 
+ int nfs_getattr(struct user_namespace *mnt_userns, const struct path *path,
+ 		struct kstat *stat, u32 request_mask, unsigned int query_flags)
++>>>>>>> 1f3208b2d697 (NFS: Add a cache validity flag argument to nfs_revalidate_inode())
  {
  	struct inode *inode = d_inode(path->dentry);
  	struct nfs_server *server = NFS_SERVER(inode);
diff --git a/fs/nfs/dir.c b/fs/nfs/dir.c
index 5ac7490c4e59..e21bc9b06eec 100644
--- a/fs/nfs/dir.c
+++ b/fs/nfs/dir.c
@@ -2998,7 +2998,7 @@ int nfs_permission(struct inode *inode, int mask)
 	if (mask & MAY_NOT_BLOCK)
 		return -ECHILD;
 
-	res = nfs_revalidate_inode(NFS_SERVER(inode), inode);
+	res = nfs_revalidate_inode(inode, NFS_INO_INVALID_OTHER);
 	if (res == 0)
 		res = generic_permission(inode, mask);
 	goto out;
* Unmerged path fs/nfs/export.c
* Unmerged path fs/nfs/inode.c
diff --git a/fs/nfs/nfs3acl.c b/fs/nfs/nfs3acl.c
index 52f4fe2dfc0d..c30f662f8b35 100644
--- a/fs/nfs/nfs3acl.c
+++ b/fs/nfs/nfs3acl.c
@@ -65,7 +65,7 @@ struct posix_acl *nfs3_get_acl(struct inode *inode, int type)
 	if (!nfs_server_capable(inode, NFS_CAP_ACLS))
 		return ERR_PTR(-EOPNOTSUPP);
 
-	status = nfs_revalidate_inode(server, inode);
+	status = nfs_revalidate_inode(inode, NFS_INO_INVALID_CHANGE);
 	if (status < 0)
 		return ERR_PTR(status);
 
diff --git a/fs/nfs/nfs4proc.c b/fs/nfs/nfs4proc.c
index 906340a7f612..fb2498f52684 100644
--- a/fs/nfs/nfs4proc.c
+++ b/fs/nfs/nfs4proc.c
@@ -5839,7 +5839,7 @@ static ssize_t nfs4_proc_get_acl(struct inode *inode, void *buf, size_t buflen)
 
 	if (!nfs4_server_supports_acls(server))
 		return -EOPNOTSUPP;
-	ret = nfs_revalidate_inode(server, inode);
+	ret = nfs_revalidate_inode(inode, NFS_INO_INVALID_CHANGE);
 	if (ret < 0)
 		return ret;
 	if (NFS_I(inode)->cache_validity & NFS_INO_INVALID_ACL)
@@ -7601,7 +7601,7 @@ static int nfs4_xattr_get_nfs4_user(const struct xattr_handler *handler,
 			return -EACCES;
 	}
 
-	ret = nfs_revalidate_inode(NFS_SERVER(inode), inode);
+	ret = nfs_revalidate_inode(inode, NFS_INO_INVALID_CHANGE);
 	if (ret)
 		return ret;
 
@@ -7632,7 +7632,7 @@ nfs4_listxattr_nfs4_user(struct inode *inode, char *list, size_t list_len)
 			return 0;
 	}
 
-	ret = nfs_revalidate_inode(NFS_SERVER(inode), inode);
+	ret = nfs_revalidate_inode(inode, NFS_INO_INVALID_CHANGE);
 	if (ret)
 		return ret;
 
diff --git a/include/linux/nfs_fs.h b/include/linux/nfs_fs.h
index 469010ea1e47..7991aa3f7ea5 100644
--- a/include/linux/nfs_fs.h
+++ b/include/linux/nfs_fs.h
@@ -384,7 +384,7 @@ extern void nfs_access_set_mask(struct nfs_access_entry *, u32);
 extern int nfs_permission(struct inode *, int);
 extern int nfs_open(struct inode *, struct file *);
 extern int nfs_attribute_cache_expired(struct inode *inode);
-extern int nfs_revalidate_inode(struct nfs_server *server, struct inode *inode);
+extern int nfs_revalidate_inode(struct inode *inode, unsigned long flags);
 extern int __nfs_revalidate_inode(struct nfs_server *, struct inode *);
 extern int nfs_clear_invalid_mapping(struct address_space *mapping);
 extern bool nfs_mapping_need_revalidate_inode(struct inode *inode);
