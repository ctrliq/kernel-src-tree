NFS: Create an nfs4_server_set_init_caps() function

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-394.el8
commit-author Anna Schumaker <Anna.Schumaker@Netapp.com>
commit 01dde76e471229e3437a2686c572f4980b2c483e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-394.el8/01dde76e.failed

And call it before doing an FSINFO probe to reset to the baseline
capabilities before probing.

	Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
	Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
(cherry picked from commit 01dde76e471229e3437a2686c572f4980b2c483e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/nfs/nfs4client.c
diff --cc fs/nfs/nfs4client.c
index d6e3a1da187f,3fb0ca92377c..000000000000
--- a/fs/nfs/nfs4client.c
+++ b/fs/nfs/nfs4client.c
@@@ -1043,18 -1096,7 +1061,22 @@@ static int nfs4_server_common_setup(str
  	if (error < 0)
  		goto out;
  
++<<<<<<< HEAD
 +	/* Set the basic capabilities */
 +	server->caps |= server->nfs_client->cl_mvops->init_caps;
 +	if (server->flags & NFS_MOUNT_NORDIRPLUS)
 +			server->caps &= ~NFS_CAP_READDIRPLUS;
 +	/*
 +	 * Don't use NFS uid/gid mapping if we're using AUTH_SYS or lower
 +	 * authentication.
 +	 */
 +	if (nfs4_disable_idmapping &&
 +			server->client->cl_auth->au_flavor == RPC_AUTH_UNIX)
 +		server->caps |= NFS_CAP_UIDGID_NOMAP;
 +
++=======
+ 	nfs4_server_set_init_caps(server);
++>>>>>>> 01dde76e4712 (NFS: Create an nfs4_server_set_init_caps() function)
  
  	/* Probe the root fh to retrieve its FSID and filehandle */
  	error = nfs4_get_rootfh(server, mntfh, auth_probe);
diff --git a/fs/nfs/internal.h b/fs/nfs/internal.h
index 2e69da8056b3..13aef008440d 100644
--- a/fs/nfs/internal.h
+++ b/fs/nfs/internal.h
@@ -207,6 +207,7 @@ extern struct nfs_client *
 nfs4_find_client_sessionid(struct net *, const struct sockaddr *,
 				struct nfs4_sessionid *, u32);
 extern struct nfs_server *nfs_create_server(struct fs_context *);
+extern void nfs4_server_set_init_caps(struct nfs_server *);
 extern struct nfs_server *nfs4_create_server(struct fs_context *);
 extern struct nfs_server *nfs4_create_referral_server(struct fs_context *);
 extern int nfs4_update_server(struct nfs_server *server, const char *hostname,
* Unmerged path fs/nfs/nfs4client.c
diff --git a/fs/nfs/nfs4proc.c b/fs/nfs/nfs4proc.c
index 05195d95e5d8..2a605d552706 100644
--- a/fs/nfs/nfs4proc.c
+++ b/fs/nfs/nfs4proc.c
@@ -3913,6 +3913,8 @@ int nfs4_server_capabilities(struct nfs_server *server, struct nfs_fh *fhandle)
 		.interruptible = true,
 	};
 	int err;
+
+	nfs4_server_set_init_caps(server);
 	do {
 		err = nfs4_handle_exception(server,
 				_nfs4_server_capabilities(server, fhandle),
