block: update io_ticks when io hang

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-394.el8
commit-author Zhang Wensheng <zhangwensheng5@huawei.com>
commit 86d7331299fda7634b11c1b7c911432679d525a5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-394.el8/86d73312.failed

When the inflight IOs are slow and no new IOs are issued, we expect
iostat could manifest the IO hang problem. However after
commit 5b18b5a73760 ("block: delete part_round_stats and switch to less
precise counting"), io_tick and time_in_queue will not be updated until
the end of IO, and the avgqu-sz and %util columns of iostat will be zero.

Because it has using stat.nsecs accumulation to express time_in_queue
which is not suitable to change, and may %util will express the status
better when io hang occur. To fix io_ticks, we use update_io_ticks and
inflight to update io_ticks when diskstats_show and part_stat_show
been called.

Fixes: 5b18b5a73760 ("block: delete part_round_stats and switch to less precise counting")
	Signed-off-by: Zhang Wensheng <zhangwensheng5@huawei.com>
	Reviewed-by: Christoph Hellwig <hch@lst.de>
Link: https://lore.kernel.org/r/20220217064247.4041435-1-zhangwensheng5@huawei.com
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit 86d7331299fda7634b11c1b7c911432679d525a5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	block/genhd.c
diff --cc block/genhd.c
index 1618efb36ef3,54f60ded2ee6..000000000000
--- a/block/genhd.c
+++ b/block/genhd.c
@@@ -1309,12 -919,17 +1309,21 @@@ ssize_t part_stat_show(struct device *d
  	struct disk_stats stat;
  	unsigned int inflight;
  
++<<<<<<< HEAD
 +	part_stat_read_all(p, &stat);
++=======
++>>>>>>> 86d7331299fd (block: update io_ticks when io hang)
  	if (queue_is_mq(q))
 -		inflight = blk_mq_in_flight(q, bdev);
 +		inflight = blk_mq_in_flight(q, p);
  	else
 -		inflight = part_in_flight(bdev);
 +		inflight = part_in_flight(p);
  
+ 	if (inflight) {
+ 		part_stat_lock();
+ 		update_io_ticks(bdev, jiffies, true);
+ 		part_stat_unlock();
+ 	}
+ 	part_stat_read_all(bdev, &stat);
  	return sprintf(buf,
  		"%8lu %8lu %8llu %8u "
  		"%8lu %8lu %8llu %8u "
@@@ -1628,15 -1185,22 +1637,32 @@@ static int diskstats_show(struct seq_fi
  				"\n\n");
  	*/
  
++<<<<<<< HEAD
 +	disk_part_iter_init(&piter, gp, DISK_PITER_INCL_EMPTY_PART0);
 +	while ((hd = disk_part_iter_next(&piter))) {
 +		part_stat_read_all(hd, &stat);
++=======
+ 	rcu_read_lock();
+ 	xa_for_each(&gp->part_tbl, idx, hd) {
+ 		if (bdev_is_partition(hd) && !bdev_nr_sectors(hd))
+ 			continue;
++>>>>>>> 86d7331299fd (block: update io_ticks when io hang)
  		if (queue_is_mq(gp->queue))
  			inflight = blk_mq_in_flight(gp->queue, hd);
  		else
  			inflight = part_in_flight(hd);
  
++<<<<<<< HEAD
 +		seq_printf(seqf, "%4d %7d %s "
++=======
+ 		if (inflight) {
+ 			part_stat_lock();
+ 			update_io_ticks(hd, jiffies, true);
+ 			part_stat_unlock();
+ 		}
+ 		part_stat_read_all(hd, &stat);
+ 		seq_printf(seqf, "%4d %7d %pg "
++>>>>>>> 86d7331299fd (block: update io_ticks when io hang)
  			   "%lu %lu %lu %u "
  			   "%lu %lu %lu %u "
  			   "%u %u %u "
* Unmerged path block/genhd.c
