NFSD: Count bytes instead of pages in the NFSv2 READDIR encoder

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-394.el8
commit-author Chuck Lever <chuck.lever@oracle.com>
commit 8141d6a2bb6c655ff0c0b81ced80d9025f03e926
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-394.el8/8141d6a2.failed

Clean up: Counting the bytes used by each returned directory entry
seems less brittle to me than trying to measure consumed pages after
the fact.

	Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
(cherry picked from commit 8141d6a2bb6c655ff0c0b81ced80d9025f03e926)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/nfsd/nfsproc.c
diff --cc fs/nfsd/nfsproc.c
index ac1e929b2596,1acff9f4aaf1..000000000000
--- a/fs/nfsd/nfsproc.c
+++ b/fs/nfsd/nfsproc.c
@@@ -570,26 -583,15 +570,34 @@@ nfsd_proc_readdir(struct svc_rqst *rqst
  		SVCFH_fmt(&argp->fh),		
  		argp->count, argp->cookie);
  
++<<<<<<< HEAD
 +	/* Shrink to the client read size */
 +	count = (argp->count >> 2) - 2;
++=======
+ 	nfsd_init_dirlist_pages(rqstp, resp, argp->count);
++>>>>>>> 8141d6a2bb6c (NFSD: Count bytes instead of pages in the NFSv2 READDIR encoder)
 +
 +	/* Make sure we've room for the NULL ptr & eof flag */
 +	count -= 2;
 +	if (count < 0)
 +		count = 0;
  
 +	resp->buffer = argp->buffer;
  	resp->offset = NULL;
 +	resp->buflen = count;
  	resp->common.err = nfs_ok;
  	/* Read directory and encode entries on the fly */
  	offset = argp->cookie;
  	resp->status = nfsd_readdir(rqstp, &argp->fh, &offset,
  				    &resp->common, nfssvc_encode_entry);
++<<<<<<< HEAD
 +
 +	resp->count = resp->buffer - argp->buffer;
 +	if (resp->offset)
 +		*resp->offset = htonl(offset);
++=======
+ 	nfssvc_encode_nfscookie(resp, offset);
++>>>>>>> 8141d6a2bb6c (NFSD: Count bytes instead of pages in the NFSv2 READDIR encoder)
  
  	fh_put(&argp->fh);
  	return rpc_success;
* Unmerged path fs/nfsd/nfsproc.c
diff --git a/fs/nfsd/nfsxdr.c b/fs/nfsd/nfsxdr.c
index 0d6a28d055ec..66e3dbcf86d8 100644
--- a/fs/nfsd/nfsxdr.c
+++ b/fs/nfsd/nfsxdr.c
@@ -582,7 +582,7 @@ nfssvc_encode_readdirres(struct svc_rqst *rqstp, __be32 *p)
 	p = resp->buffer;
 	*p++ = 0;			/* no more entries */
 	*p++ = htonl((resp->common.err == nfserr_eof));
-	rqstp->rq_res.page_len = (((unsigned long)p-1) & ~PAGE_MASK)+1;
+	rqstp->rq_res.page_len = resp->count << 2;
 
 	return 1;
 }
@@ -651,6 +651,7 @@ nfssvc_encode_entry(void *ccdv, const char *name,
 	cd->offset = p;			/* remember pointer */
 	*p++ = htonl(~0U);		/* offset of next entry */
 
+	cd->count += p - cd->buffer;
 	cd->buflen = buflen;
 	cd->buffer = p;
 	cd->common.err = nfs_ok;
