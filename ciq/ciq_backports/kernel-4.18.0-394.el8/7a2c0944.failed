arm64: entry: cleanup el0 svc handler naming

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-394.el8
commit-author Mark Rutland <mark.rutland@arm.com>
commit 7a2c094464e39a54f5b9228cd78208cd43872bbd
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-394.el8/7a2c0944.failed

For most of the exception entry code, <foo>_handler() is the first C
function called from the entry assembly in entry-common.c, and external
functions handling the bulk of the logic are called do_<foo>().

For consistency, apply this scheme to el0_svc_handler and
el0_svc_compat_handler, renaming them to do_el0_svc and
do_el0_svc_compat respectively.

There should be no functional change as a result of this patch.

	Signed-off-by: Mark Rutland <mark.rutland@arm.com>
	Reviewed-by: Anshuman Khandual <anshuman.khandual@arm.com>
	Cc: Catalin Marinas <catalin.marinas@arm.com>
	Cc: James Morse <james.morse@arm.com>
	Cc: Will Deacon <will@kernel.org>
	Signed-off-by: Will Deacon <will@kernel.org>
(cherry picked from commit 7a2c094464e39a54f5b9228cd78208cd43872bbd)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/arm64/include/asm/exception.h
#	arch/arm64/kernel/entry-common.c
#	arch/arm64/kernel/syscall.c
diff --cc arch/arm64/include/asm/exception.h
index 55a461d97487,b87c6e276ab1..000000000000
--- a/arch/arm64/include/asm/exception.h
+++ b/arch/arm64/include/asm/exception.h
@@@ -42,5 -32,22 +42,25 @@@ static inline u32 disr_to_esr(u64 disr
  }
  
  asmlinkage void enter_from_user_mode(void);
++<<<<<<< HEAD
++=======
+ void do_mem_abort(unsigned long addr, unsigned int esr, struct pt_regs *regs);
+ void do_sp_pc_abort(unsigned long addr, unsigned int esr, struct pt_regs *regs);
+ void do_undefinstr(struct pt_regs *regs);
+ asmlinkage void bad_mode(struct pt_regs *regs, int reason, unsigned int esr);
+ void do_debug_exception(unsigned long addr_if_watchpoint, unsigned int esr,
+ 			struct pt_regs *regs);
+ void do_fpsimd_acc(unsigned int esr, struct pt_regs *regs);
+ void do_sve_acc(unsigned int esr, struct pt_regs *regs);
+ void do_fpsimd_exc(unsigned int esr, struct pt_regs *regs);
+ void do_sysinstr(unsigned int esr, struct pt_regs *regs);
+ void do_sp_pc_abort(unsigned long addr, unsigned int esr, struct pt_regs *regs);
+ void bad_el0_sync(struct pt_regs *regs, int reason, unsigned int esr);
+ void do_cp15instr(unsigned int esr, struct pt_regs *regs);
+ void do_el0_svc(struct pt_regs *regs);
+ void do_el0_svc_compat(struct pt_regs *regs);
+ void do_el0_ia_bp_hardening(unsigned long addr,  unsigned int esr,
+ 			    struct pt_regs *regs);
++>>>>>>> 7a2c094464e3 (arm64: entry: cleanup el0 svc handler naming)
  
  #endif	/* __ASM_EXCEPTION_H */
diff --cc arch/arm64/kernel/syscall.c
index 871c739f060a,a12c0c88d345..000000000000
--- a/arch/arm64/kernel/syscall.c
+++ b/arch/arm64/kernel/syscall.c
@@@ -154,14 -154,14 +154,22 @@@ static inline void sve_user_discard(voi
  	sve_user_disable();
  }
  
++<<<<<<< HEAD
 +asmlinkage void el0_svc_handler(struct pt_regs *regs)
++=======
+ void do_el0_svc(struct pt_regs *regs)
++>>>>>>> 7a2c094464e3 (arm64: entry: cleanup el0 svc handler naming)
  {
  	sve_user_discard();
  	el0_svc_common(regs, regs->regs[8], __NR_syscalls, sys_call_table);
  }
  
  #ifdef CONFIG_COMPAT
++<<<<<<< HEAD
 +asmlinkage void el0_svc_compat_handler(struct pt_regs *regs)
++=======
+ void do_el0_svc_compat(struct pt_regs *regs)
++>>>>>>> 7a2c094464e3 (arm64: entry: cleanup el0 svc handler naming)
  {
  	el0_svc_common(regs, regs->regs[7], __NR_compat_syscalls,
  		       compat_sys_call_table);
* Unmerged path arch/arm64/kernel/entry-common.c
* Unmerged path arch/arm64/include/asm/exception.h
* Unmerged path arch/arm64/kernel/entry-common.c
* Unmerged path arch/arm64/kernel/syscall.c
