driver core: add a helper to setup both the of_node and fwnode of a device

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-394.el8
commit-author Ioana Ciornei <ioana.ciornei@nxp.com>
commit 43e76d463c09a0272b84775bcc727c1eb8b384b2
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-394.el8/43e76d46.failed

There are many places where both the fwnode_handle and the of_node of a
device need to be populated. Add a function which does both so that we
have consistency.

	Suggested-by: Andrew Lunn <andrew@lunn.ch>
	Signed-off-by: Ioana Ciornei <ioana.ciornei@nxp.com>
	Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 43e76d463c09a0272b84775bcc727c1eb8b384b2)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/base/core.c
diff --cc drivers/base/core.c
index b6b55159b12d,b6836bfa985c..000000000000
--- a/drivers/base/core.c
+++ b/drivers/base/core.c
@@@ -4641,12 -4723,12 +4641,21 @@@ void device_set_of_node_from_dev(struc
  }
  EXPORT_SYMBOL_GPL(device_set_of_node_from_dev);
  
++<<<<<<< HEAD
 +
 +int device_match_acpi_dev(struct device *dev, const void *adev)
 +{
 +	return ACPI_COMPANION(dev) == adev;
 +}
 +EXPORT_SYMBOL(device_match_acpi_dev);
++=======
+ void device_set_node(struct device *dev, struct fwnode_handle *fwnode)
+ {
+ 	dev->fwnode = fwnode;
+ 	dev->of_node = to_of_node(fwnode);
+ }
+ EXPORT_SYMBOL_GPL(device_set_node);
++>>>>>>> 43e76d463c09 (driver core: add a helper to setup both the of_node and fwnode of a device)
  
  int device_match_name(struct device *dev, const void *name)
  {
* Unmerged path drivers/base/core.c
diff --git a/include/linux/device.h b/include/linux/device.h
index da6e1db2c903..ef146841563c 100644
--- a/include/linux/device.h
+++ b/include/linux/device.h
@@ -1619,6 +1619,7 @@ extern int device_online(struct device *dev);
 extern void set_primary_fwnode(struct device *dev, struct fwnode_handle *fwnode);
 extern void set_secondary_fwnode(struct device *dev, struct fwnode_handle *fwnode);
 void device_set_of_node_from_dev(struct device *dev, const struct device *dev2);
+void device_set_node(struct device *dev, struct fwnode_handle *fwnode);
 
 static inline int dev_num_vf(struct device *dev)
 {
