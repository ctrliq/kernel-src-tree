RDMA/rxe: Move max_elem into rxe_type_info

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-394.el8
commit-author Bob Pearson <rpearsonhpe@gmail.com>
commit 3ccffe8abf2febab4642033d4675a20bbade151b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-394.el8/3ccffe8a.failed

Move the maximum number of elements from a parameter in rxe_pool_init to a
member of the rxe_type_info array.

Link: https://lore.kernel.org/r/20220304000808.225811-7-rpearsonhpe@gmail.com
	Signed-off-by: Bob Pearson <rpearsonhpe@gmail.com>
	Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
(cherry picked from commit 3ccffe8abf2febab4642033d4675a20bbade151b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/sw/rxe/rxe_pool.c
diff --cc drivers/infiniband/sw/rxe/rxe_pool.c
index e7b233608b61,bc3ae64adba8..000000000000
--- a/drivers/infiniband/sw/rxe/rxe_pool.c
+++ b/drivers/infiniband/sw/rxe/rxe_pool.c
@@@ -16,36 -16,37 +16,52 @@@ static const struct rxe_type_info 
  	enum rxe_pool_flags flags;
  	u32 min_index;
  	u32 max_index;
++<<<<<<< HEAD
 +	size_t key_offset;
 +	size_t key_size;
++=======
+ 	u32 max_elem;
++>>>>>>> 3ccffe8abf2f (RDMA/rxe: Move max_elem into rxe_type_info)
  } rxe_type_info[RXE_NUM_TYPES] = {
  	[RXE_TYPE_UC] = {
  		.name		= "rxe-uc",
  		.size		= sizeof(struct rxe_ucontext),
++<<<<<<< HEAD
 +		.elem_offset	= offsetof(struct rxe_ucontext, pelem),
 +		.flags          = RXE_POOL_NO_ALLOC,
++=======
+ 		.elem_offset	= offsetof(struct rxe_ucontext, elem),
+ 		.max_elem	= UINT_MAX,
++>>>>>>> 3ccffe8abf2f (RDMA/rxe: Move max_elem into rxe_type_info)
  	},
  	[RXE_TYPE_PD] = {
  		.name		= "rxe-pd",
  		.size		= sizeof(struct rxe_pd),
++<<<<<<< HEAD
 +		.elem_offset	= offsetof(struct rxe_pd, pelem),
 +		.flags		= RXE_POOL_NO_ALLOC,
++=======
+ 		.elem_offset	= offsetof(struct rxe_pd, elem),
+ 		.max_elem	= UINT_MAX,
++>>>>>>> 3ccffe8abf2f (RDMA/rxe: Move max_elem into rxe_type_info)
  	},
  	[RXE_TYPE_AH] = {
  		.name		= "rxe-ah",
  		.size		= sizeof(struct rxe_ah),
 -		.elem_offset	= offsetof(struct rxe_ah, elem),
 -		.flags		= RXE_POOL_INDEX,
 +		.elem_offset	= offsetof(struct rxe_ah, pelem),
 +		.flags		= RXE_POOL_INDEX | RXE_POOL_NO_ALLOC,
  		.min_index	= RXE_MIN_AH_INDEX,
  		.max_index	= RXE_MAX_AH_INDEX,
+ 		.max_elem	= RXE_MAX_AH_INDEX - RXE_MIN_AH_INDEX + 1,
  	},
  	[RXE_TYPE_SRQ] = {
  		.name		= "rxe-srq",
  		.size		= sizeof(struct rxe_srq),
 -		.elem_offset	= offsetof(struct rxe_srq, elem),
 -		.flags		= RXE_POOL_INDEX,
 +		.elem_offset	= offsetof(struct rxe_srq, pelem),
 +		.flags		= RXE_POOL_INDEX | RXE_POOL_NO_ALLOC,
  		.min_index	= RXE_MIN_SRQ_INDEX,
  		.max_index	= RXE_MAX_SRQ_INDEX,
+ 		.max_elem	= RXE_MAX_SRQ_INDEX - RXE_MIN_SRQ_INDEX + 1,
  	},
  	[RXE_TYPE_QP] = {
  		.name		= "rxe-qp",
@@@ -59,49 -61,32 +76,52 @@@
  	[RXE_TYPE_CQ] = {
  		.name		= "rxe-cq",
  		.size		= sizeof(struct rxe_cq),
 -		.elem_offset	= offsetof(struct rxe_cq, elem),
 +		.elem_offset	= offsetof(struct rxe_cq, pelem),
 +		.flags          = RXE_POOL_NO_ALLOC,
  		.cleanup	= rxe_cq_cleanup,
+ 		.max_elem	= UINT_MAX,
  	},
  	[RXE_TYPE_MR] = {
  		.name		= "rxe-mr",
  		.size		= sizeof(struct rxe_mr),
 -		.elem_offset	= offsetof(struct rxe_mr, elem),
 +		.elem_offset	= offsetof(struct rxe_mr, pelem),
  		.cleanup	= rxe_mr_cleanup,
 -		.flags		= RXE_POOL_INDEX | RXE_POOL_ALLOC,
 +		.flags		= RXE_POOL_INDEX,
  		.min_index	= RXE_MIN_MR_INDEX,
  		.max_index	= RXE_MAX_MR_INDEX,
+ 		.max_elem	= RXE_MAX_MR_INDEX - RXE_MIN_MR_INDEX + 1,
  	},
  	[RXE_TYPE_MW] = {
  		.name		= "rxe-mw",
  		.size		= sizeof(struct rxe_mw),
 -		.elem_offset	= offsetof(struct rxe_mw, elem),
 +		.elem_offset	= offsetof(struct rxe_mw, pelem),
  		.cleanup	= rxe_mw_cleanup,
 -		.flags		= RXE_POOL_INDEX,
 +		.flags		= RXE_POOL_INDEX | RXE_POOL_NO_ALLOC,
  		.min_index	= RXE_MIN_MW_INDEX,
  		.max_index	= RXE_MAX_MW_INDEX,
+ 		.max_elem	= RXE_MAX_MW_INDEX - RXE_MIN_MW_INDEX + 1,
  	},
 +	[RXE_TYPE_MC_GRP] = {
 +		.name		= "rxe-mc_grp",
 +		.size		= sizeof(struct rxe_mc_grp),
 +		.elem_offset	= offsetof(struct rxe_mc_grp, pelem),
 +		.cleanup	= rxe_mc_cleanup,
 +		.flags		= RXE_POOL_KEY,
 +		.key_offset	= offsetof(struct rxe_mc_grp, mgid),
 +		.key_size	= sizeof(union ib_gid),
 +	},
 +	[RXE_TYPE_MC_ELEM] = {
 +		.name		= "rxe-mc_elem",
 +		.size		= sizeof(struct rxe_mc_elem),
 +		.elem_offset	= offsetof(struct rxe_mc_elem, pelem),
 +	},
  };
  
 +static inline const char *pool_name(struct rxe_pool *pool)
 +{
 +	return rxe_type_info[pool->type].name;
 +}
 +
  static int rxe_pool_init_index(struct rxe_pool *pool, u32 max, u32 min)
  {
  	int err = 0;
@@@ -128,22 -113,21 +148,29 @@@ out
  int rxe_pool_init(
  	struct rxe_dev		*rxe,
  	struct rxe_pool		*pool,
- 	enum rxe_elem_type	type,
- 	unsigned int		max_elem)
+ 	enum rxe_elem_type	type)
  {
 -	const struct rxe_type_info *info = &rxe_type_info[type];
  	int			err = 0;
 +	size_t			size = rxe_type_info[type].size;
  
  	memset(pool, 0, sizeof(*pool));
  
  	pool->rxe		= rxe;
 -	pool->name		= info->name;
  	pool->type		= type;
++<<<<<<< HEAD
 +	pool->max_elem		= max_elem;
 +	pool->elem_size		= ALIGN(size, RXE_POOL_ALIGN);
 +	pool->flags		= rxe_type_info[type].flags;
 +	pool->index.tree	= RB_ROOT;
 +	pool->key.tree		= RB_ROOT;
 +	pool->cleanup		= rxe_type_info[type].cleanup;
++=======
+ 	pool->max_elem		= info->max_elem;
+ 	pool->elem_size		= ALIGN(info->size, RXE_POOL_ALIGN);
+ 	pool->elem_offset	= info->elem_offset;
+ 	pool->flags		= info->flags;
+ 	pool->cleanup		= info->cleanup;
++>>>>>>> 3ccffe8abf2f (RDMA/rxe: Move max_elem into rxe_type_info)
  
  	atomic_set(&pool->num_elem, 0);
  
diff --git a/drivers/infiniband/sw/rxe/rxe.c b/drivers/infiniband/sw/rxe/rxe.c
index 71b5781d154b..846875f6ed87 100644
--- a/drivers/infiniband/sw/rxe/rxe.c
+++ b/drivers/infiniband/sw/rxe/rxe.c
@@ -122,43 +122,35 @@ static int rxe_init_pools(struct rxe_dev *rxe)
 {
 	int err;
 
-	err = rxe_pool_init(rxe, &rxe->uc_pool, RXE_TYPE_UC,
-			    rxe->max_ucontext);
+	err = rxe_pool_init(rxe, &rxe->uc_pool, RXE_TYPE_UC);
 	if (err)
 		goto err1;
 
-	err = rxe_pool_init(rxe, &rxe->pd_pool, RXE_TYPE_PD,
-			    rxe->attr.max_pd);
+	err = rxe_pool_init(rxe, &rxe->pd_pool, RXE_TYPE_PD);
 	if (err)
 		goto err2;
 
-	err = rxe_pool_init(rxe, &rxe->ah_pool, RXE_TYPE_AH,
-			    rxe->attr.max_ah);
+	err = rxe_pool_init(rxe, &rxe->ah_pool, RXE_TYPE_AH);
 	if (err)
 		goto err3;
 
-	err = rxe_pool_init(rxe, &rxe->srq_pool, RXE_TYPE_SRQ,
-			    rxe->attr.max_srq);
+	err = rxe_pool_init(rxe, &rxe->srq_pool, RXE_TYPE_SRQ);
 	if (err)
 		goto err4;
 
-	err = rxe_pool_init(rxe, &rxe->qp_pool, RXE_TYPE_QP,
-			    rxe->attr.max_qp);
+	err = rxe_pool_init(rxe, &rxe->qp_pool, RXE_TYPE_QP);
 	if (err)
 		goto err5;
 
-	err = rxe_pool_init(rxe, &rxe->cq_pool, RXE_TYPE_CQ,
-			    rxe->attr.max_cq);
+	err = rxe_pool_init(rxe, &rxe->cq_pool, RXE_TYPE_CQ);
 	if (err)
 		goto err6;
 
-	err = rxe_pool_init(rxe, &rxe->mr_pool, RXE_TYPE_MR,
-			    rxe->attr.max_mr);
+	err = rxe_pool_init(rxe, &rxe->mr_pool, RXE_TYPE_MR);
 	if (err)
 		goto err7;
 
-	err = rxe_pool_init(rxe, &rxe->mw_pool, RXE_TYPE_MW,
-			    rxe->attr.max_mw);
+	err = rxe_pool_init(rxe, &rxe->mw_pool, RXE_TYPE_MW);
 	if (err)
 		goto err8;
 
* Unmerged path drivers/infiniband/sw/rxe/rxe_pool.c
diff --git a/drivers/infiniband/sw/rxe/rxe_pool.h b/drivers/infiniband/sw/rxe/rxe_pool.h
index 837585fdbc34..2a83e3227090 100644
--- a/drivers/infiniband/sw/rxe/rxe_pool.h
+++ b/drivers/infiniband/sw/rxe/rxe_pool.h
@@ -75,7 +75,7 @@ struct rxe_pool {
  * pool elements will be allocated out of a slab cache
  */
 int rxe_pool_init(struct rxe_dev *rxe, struct rxe_pool *pool,
-		  enum rxe_elem_type type, u32 max_elem);
+		  enum rxe_elem_type type);
 
 /* free resources from object pool */
 void rxe_pool_cleanup(struct rxe_pool *pool);
