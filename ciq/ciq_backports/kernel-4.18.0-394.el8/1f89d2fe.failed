regmap: Add MDIO bus support

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-394.el8
commit-author Sander Vanheule <sander@svanheule.net>
commit 1f89d2fe16072a74b34bdb895160910091427891
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-394.el8/1f89d2fe.failed

Basic support for MDIO bus access. Support only includes clause-22
register access, with 5-bit addresses, and 16-bit wide registers.

	Signed-off-by: Sander Vanheule <sander@svanheule.net>
Link: https://lore.kernel.org/r/63b99a2fec2c4ea3c461d59d451af8d675ecf312.1621279162.git.sander@svanheule.net
	Signed-off-by: Mark Brown <broonie@kernel.org>
(cherry picked from commit 1f89d2fe16072a74b34bdb895160910091427891)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/base/regmap/Kconfig
#	drivers/base/regmap/Makefile
#	include/linux/regmap.h
diff --cc drivers/base/regmap/Kconfig
index 147e0af830ab,159bac6c5046..000000000000
--- a/drivers/base/regmap/Kconfig
+++ b/drivers/base/regmap/Kconfig
@@@ -4,8 -4,9 +4,13 @@@
  # subsystems should select the appropriate symbols.
  
  config REGMAP
++<<<<<<< HEAD
 +	default y if (REGMAP_I2C || REGMAP_SPI || REGMAP_SPMI || REGMAP_W1 || REGMAP_AC97 || REGMAP_MMIO || REGMAP_IRQ || REGMAP_SOUNDWIRE || REGMAP_SOUNDWIRE_MBQ)
++=======
+ 	default y if (REGMAP_I2C || REGMAP_SPI || REGMAP_SPMI || REGMAP_W1 || REGMAP_AC97 || REGMAP_MMIO || REGMAP_IRQ || REGMAP_SOUNDWIRE || REGMAP_SOUNDWIRE_MBQ || REGMAP_SCCB || REGMAP_I3C || REGMAP_SPI_AVMM || REGMAP_MDIO)
++>>>>>>> 1f89d2fe1607 (regmap: Add MDIO bus support)
  	select IRQ_DOMAIN if REGMAP_IRQ
+ 	select MDIO_BUS if REGMAP_MDIO
  	bool
  
  config REGCACHE_COMPRESSED
diff --cc drivers/base/regmap/Makefile
index 63da1926e412,11facb32a027..000000000000
--- a/drivers/base/regmap/Makefile
+++ b/drivers/base/regmap/Makefile
@@@ -16,3 -16,7 +16,10 @@@ obj-$(CONFIG_REGMAP_IRQ) += regmap-irq.
  obj-$(CONFIG_REGMAP_W1) += regmap-w1.o
  obj-$(CONFIG_REGMAP_SOUNDWIRE) += regmap-sdw.o
  obj-$(CONFIG_REGMAP_SOUNDWIRE_MBQ) += regmap-sdw-mbq.o
++<<<<<<< HEAD
++=======
+ obj-$(CONFIG_REGMAP_SCCB) += regmap-sccb.o
+ obj-$(CONFIG_REGMAP_I3C) += regmap-i3c.o
+ obj-$(CONFIG_REGMAP_SPI_AVMM) += regmap-spi-avmm.o
+ obj-$(CONFIG_REGMAP_MDIO) += regmap-mdio.o
++>>>>>>> 1f89d2fe1607 (regmap: Add MDIO bus support)
diff --cc include/linux/regmap.h
index 978a110b9d3e,e97dd05f7cdb..000000000000
--- a/include/linux/regmap.h
+++ b/include/linux/regmap.h
@@@ -25,8 -23,11 +25,9 @@@
  struct module;
  struct clk;
  struct device;
 -struct device_node;
  struct i2c_client;
 -struct i3c_device;
  struct irq_domain;
+ struct mdio_device;
  struct slim_device;
  struct spi_device;
  struct spmi_device;
@@@ -524,6 -539,14 +525,17 @@@ struct regmap *__regmap_init_i2c(struc
  				 const struct regmap_config *config,
  				 struct lock_class_key *lock_key,
  				 const char *lock_name);
++<<<<<<< HEAD
++=======
+ struct regmap *__regmap_init_mdio(struct mdio_device *mdio_dev,
+ 				 const struct regmap_config *config,
+ 				 struct lock_class_key *lock_key,
+ 				 const char *lock_name);
+ struct regmap *__regmap_init_sccb(struct i2c_client *i2c,
+ 				  const struct regmap_config *config,
+ 				  struct lock_class_key *lock_key,
+ 				  const char *lock_name);
++>>>>>>> 1f89d2fe1607 (regmap: Add MDIO bus support)
  struct regmap *__regmap_init_slimbus(struct slim_device *slimbus,
  				 const struct regmap_config *config,
  				 struct lock_class_key *lock_key,
@@@ -572,6 -599,14 +584,17 @@@ struct regmap *__devm_regmap_init_i2c(s
  				      const struct regmap_config *config,
  				      struct lock_class_key *lock_key,
  				      const char *lock_name);
++<<<<<<< HEAD
++=======
+ struct regmap *__devm_regmap_init_mdio(struct mdio_device *mdio_dev,
+ 				      const struct regmap_config *config,
+ 				      struct lock_class_key *lock_key,
+ 				      const char *lock_name);
+ struct regmap *__devm_regmap_init_sccb(struct i2c_client *i2c,
+ 				       const struct regmap_config *config,
+ 				       struct lock_class_key *lock_key,
+ 				       const char *lock_name);
++>>>>>>> 1f89d2fe1607 (regmap: Add MDIO bus support)
  struct regmap *__devm_regmap_init_spi(struct spi_device *dev,
  				      const struct regmap_config *config,
  				      struct lock_class_key *lock_key,
@@@ -664,6 -707,32 +687,35 @@@ int regmap_attach_dev(struct device *de
  				i2c, config)
  
  /**
++<<<<<<< HEAD
++=======
+  * regmap_init_mdio() - Initialise register map
+  *
+  * @mdio_dev: Device that will be interacted with
+  * @config: Configuration for register map
+  *
+  * The return value will be an ERR_PTR() on error or a valid pointer to
+  * a struct regmap.
+  */
+ #define regmap_init_mdio(mdio_dev, config)				\
+ 	__regmap_lockdep_wrapper(__regmap_init_mdio, #config,		\
+ 				mdio_dev, config)
+ 
+ /**
+  * regmap_init_sccb() - Initialise register map
+  *
+  * @i2c: Device that will be interacted with
+  * @config: Configuration for register map
+  *
+  * The return value will be an ERR_PTR() on error or a valid pointer to
+  * a struct regmap.
+  */
+ #define regmap_init_sccb(i2c, config)					\
+ 	__regmap_lockdep_wrapper(__regmap_init_sccb, #config,		\
+ 				i2c, config)
+ 
+ /**
++>>>>>>> 1f89d2fe1607 (regmap: Add MDIO bus support)
   * regmap_init_slimbus() - Initialise register map
   *
   * @slimbus: Device that will be interacted with
@@@ -829,6 -911,34 +881,37 @@@ bool regmap_ac97_default_volatile(struc
  				i2c, config)
  
  /**
++<<<<<<< HEAD
++=======
+  * devm_regmap_init_mdio() - Initialise managed register map
+  *
+  * @mdio_dev: Device that will be interacted with
+  * @config: Configuration for register map
+  *
+  * The return value will be an ERR_PTR() on error or a valid pointer
+  * to a struct regmap.  The regmap will be automatically freed by the
+  * device management code.
+  */
+ #define devm_regmap_init_mdio(mdio_dev, config)				\
+ 	__regmap_lockdep_wrapper(__devm_regmap_init_mdio, #config,	\
+ 				mdio_dev, config)
+ 
+ /**
+  * devm_regmap_init_sccb() - Initialise managed register map
+  *
+  * @i2c: Device that will be interacted with
+  * @config: Configuration for register map
+  *
+  * The return value will be an ERR_PTR() on error or a valid pointer
+  * to a struct regmap.  The regmap will be automatically freed by the
+  * device management code.
+  */
+ #define devm_regmap_init_sccb(i2c, config)				\
+ 	__regmap_lockdep_wrapper(__devm_regmap_init_sccb, #config,	\
+ 				i2c, config)
+ 
+ /**
++>>>>>>> 1f89d2fe1607 (regmap: Add MDIO bus support)
   * devm_regmap_init_spi() - Initialise register map
   *
   * @dev: Device that will be interacted with
* Unmerged path drivers/base/regmap/Kconfig
* Unmerged path drivers/base/regmap/Makefile
diff --git a/drivers/base/regmap/regmap-mdio.c b/drivers/base/regmap/regmap-mdio.c
new file mode 100644
index 000000000000..5f18fe409f56
--- /dev/null
+++ b/drivers/base/regmap/regmap-mdio.c
@@ -0,0 +1,57 @@
+// SPDX-License-Identifier: GPL-2.0
+
+#include <linux/errno.h>
+#include <linux/mdio.h>
+#include <linux/module.h>
+#include <linux/regmap.h>
+
+static int regmap_mdio_read(void *context, unsigned int reg, unsigned int *val)
+{
+	struct mdio_device *mdio_dev = context;
+	int ret;
+
+	ret = mdiobus_read(mdio_dev->bus, mdio_dev->addr, reg);
+	*val = ret & 0xffff;
+
+	return ret < 0 ? ret : 0;
+}
+
+static int regmap_mdio_write(void *context, unsigned int reg, unsigned int val)
+{
+	struct mdio_device *mdio_dev = context;
+
+	return mdiobus_write(mdio_dev->bus, mdio_dev->addr, reg, val);
+}
+
+static const struct regmap_bus regmap_mdio_bus = {
+	.reg_write = regmap_mdio_write,
+	.reg_read = regmap_mdio_read,
+};
+
+struct regmap *__regmap_init_mdio(struct mdio_device *mdio_dev,
+	const struct regmap_config *config, struct lock_class_key *lock_key,
+	const char *lock_name)
+{
+	if (config->reg_bits != 5 || config->val_bits != 16)
+		return ERR_PTR(-EOPNOTSUPP);
+
+	return __regmap_init(&mdio_dev->dev, &regmap_mdio_bus, mdio_dev, config,
+		lock_key, lock_name);
+}
+EXPORT_SYMBOL_GPL(__regmap_init_mdio);
+
+struct regmap *__devm_regmap_init_mdio(struct mdio_device *mdio_dev,
+	const struct regmap_config *config, struct lock_class_key *lock_key,
+	const char *lock_name)
+{
+	if (config->reg_bits != 5 || config->val_bits != 16)
+		return ERR_PTR(-EOPNOTSUPP);
+
+	return __devm_regmap_init(&mdio_dev->dev, &regmap_mdio_bus, mdio_dev,
+		config, lock_key, lock_name);
+}
+EXPORT_SYMBOL_GPL(__devm_regmap_init_mdio);
+
+MODULE_AUTHOR("Sander Vanheule <sander@svanheule.net>");
+MODULE_DESCRIPTION("Regmap MDIO Module");
+MODULE_LICENSE("GPL v2");
* Unmerged path include/linux/regmap.h
