devlink: Delete reload enable/disable interface

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-394.el8
commit-author Leon Romanovsky <leonro@nvidia.com>
commit 82465bec3e9713c395b0a02f5aaf7949443cb877
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-394.el8/82465bec.failed

Commit a0c76345e3d3 ("devlink: disallow reload operation during device
cleanup") added devlink_reload_{enable,disable}() APIs to prevent reload
operation from racing with device probe/dismantle.

After recent changes to move devlink_register() to the end of device
probe and devlink_unregister() to the beginning of device dismantle,
these races can no longer happen. Reload operations will be denied if
the devlink instance is unregistered and devlink_unregister() will block
until all in-flight operations are done.

Therefore, remove these devlink_reload_{enable,disable}() APIs.

	Signed-off-by: Leon Romanovsky <leonro@nvidia.com>
	Signed-off-by: Jakub Kicinski <kuba@kernel.org>
(cherry picked from commit 82465bec3e9713c395b0a02f5aaf7949443cb877)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_devlink.c
#	drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_devlink.c
#	drivers/net/ethernet/mellanox/mlx4/main.c
#	drivers/net/ethernet/mellanox/mlx5/core/main.c
#	drivers/net/ethernet/mellanox/mlx5/core/sf/dev/driver.c
#	drivers/net/ethernet/mellanox/mlxsw/core.c
#	drivers/net/netdevsim/dev.c
#	net/core/devlink.c
diff --cc drivers/net/ethernet/mellanox/mlx4/main.c
index 28ac4693da3c,b187c210d4d6..000000000000
--- a/drivers/net/ethernet/mellanox/mlx4/main.c
+++ b/drivers/net/ethernet/mellanox/mlx4/main.c
@@@ -4036,9 -4024,9 +4036,15 @@@ static int mlx4_init_one(struct pci_de
  	if (ret)
  		goto err_params_unregister;
  
++<<<<<<< HEAD
 +	devlink_params_publish(devlink);
 +	devlink_reload_enable(devlink);
 +	pci_save_state(pdev);
++=======
+ 	pci_save_state(pdev);
+ 	devlink_set_features(devlink, DEVLINK_F_RELOAD);
+ 	devlink_register(devlink);
++>>>>>>> 82465bec3e97 (devlink: Delete reload enable/disable interface)
  	return 0;
  
  err_params_unregister:
@@@ -4149,7 -4135,7 +4155,11 @@@ static void mlx4_remove_one(struct pci_
  	struct devlink *devlink = priv_to_devlink(priv);
  	int active_vfs = 0;
  
++<<<<<<< HEAD
 +	devlink_reload_disable(devlink);
++=======
+ 	devlink_unregister(devlink);
++>>>>>>> 82465bec3e97 (devlink: Delete reload enable/disable interface)
  
  	if (mlx4_is_slave(dev))
  		persist->interface_state |= MLX4_INTERFACE_STATE_NOWAIT;
diff --cc drivers/net/ethernet/mellanox/mlx5/core/main.c
index 02ae9868da1c,65313448a47c..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/main.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/main.c
@@@ -1505,8 -1537,7 +1505,12 @@@ static int probe_one(struct pci_dev *pd
  		dev_err(&pdev->dev, "mlx5_crdump_enable failed with error code %d\n", err);
  
  	pci_save_state(pdev);
++<<<<<<< HEAD
 +	if (!mlx5_core_is_mp_slave(dev))
 +		devlink_reload_enable(devlink);
++=======
+ 	devlink_register(devlink);
++>>>>>>> 82465bec3e97 (devlink: Delete reload enable/disable interface)
  	return 0;
  
  err_init_one:
@@@ -1526,7 -1557,7 +1530,11 @@@ static void remove_one(struct pci_dev *
  	struct mlx5_core_dev *dev  = pci_get_drvdata(pdev);
  	struct devlink *devlink = priv_to_devlink(dev);
  
++<<<<<<< HEAD
 +	devlink_reload_disable(devlink);
++=======
+ 	devlink_unregister(devlink);
++>>>>>>> 82465bec3e97 (devlink: Delete reload enable/disable interface)
  	mlx5_crdump_disable(dev);
  	mlx5_drain_health_wq(dev);
  	mlx5_uninit_one(dev);
diff --cc drivers/net/ethernet/mellanox/mlx5/core/sf/dev/driver.c
index 42c8ee03fe3e,7b4783ce213e..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/sf/dev/driver.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/sf/dev/driver.c
@@@ -46,7 -46,7 +46,11 @@@ static int mlx5_sf_dev_probe(struct aux
  		mlx5_core_warn(mdev, "mlx5_init_one err=%d\n", err);
  		goto init_one_err;
  	}
++<<<<<<< HEAD
 +	devlink_reload_enable(devlink);
++=======
+ 	devlink_register(devlink);
++>>>>>>> 82465bec3e97 (devlink: Delete reload enable/disable interface)
  	return 0;
  
  init_one_err:
@@@ -61,10 -61,9 +65,14 @@@ mdev_err
  static void mlx5_sf_dev_remove(struct auxiliary_device *adev)
  {
  	struct mlx5_sf_dev *sf_dev = container_of(adev, struct mlx5_sf_dev, adev);
- 	struct devlink *devlink;
+ 	struct devlink *devlink = priv_to_devlink(sf_dev->mdev);
  
++<<<<<<< HEAD
 +	devlink = priv_to_devlink(sf_dev->mdev);
 +	devlink_reload_disable(devlink);
++=======
+ 	devlink_unregister(devlink);
++>>>>>>> 82465bec3e97 (devlink: Delete reload enable/disable interface)
  	mlx5_uninit_one(sf_dev->mdev);
  	iounmap(sf_dev->mdev->iseg);
  	mlx5_mdev_uninit(sf_dev->mdev);
diff --cc drivers/net/ethernet/mellanox/mlxsw/core.c
index 7e9a7cb31720,3fd3812b8f31..000000000000
--- a/drivers/net/ethernet/mellanox/mlxsw/core.c
+++ b/drivers/net/ethernet/mellanox/mlxsw/core.c
@@@ -2009,14 -2001,20 +2009,21 @@@ __mlxsw_core_bus_device_register(const 
  	if (err)
  		goto err_env_init;
  
 -	if (mlxsw_driver->init) {
 -		err = mlxsw_driver->init(mlxsw_core, mlxsw_bus_info, extack);
 -		if (err)
 -			goto err_driver_init;
 -	}
 +	mlxsw_core->is_initialized = true;
 +	devlink_params_publish(devlink);
  
++<<<<<<< HEAD
 +	if (!reload)
 +		devlink_reload_enable(devlink);
 +
++=======
+ 	if (!reload) {
+ 		devlink_set_features(devlink, DEVLINK_F_RELOAD);
+ 		devlink_register(devlink);
+ 	}
++>>>>>>> 82465bec3e97 (devlink: Delete reload enable/disable interface)
  	return 0;
  
 -err_driver_init:
 -	mlxsw_env_fini(mlxsw_core->env);
  err_env_init:
  	mlxsw_thermal_fini(mlxsw_core->thermal);
  err_thermal_init:
@@@ -2083,7 -2075,8 +2090,12 @@@ void mlxsw_core_bus_device_unregister(s
  	struct devlink *devlink = priv_to_devlink(mlxsw_core);
  
  	if (!reload)
++<<<<<<< HEAD
 +		devlink_reload_disable(devlink);
++=======
+ 		devlink_unregister(devlink);
+ 
++>>>>>>> 82465bec3e97 (devlink: Delete reload enable/disable interface)
  	if (devlink_is_reload_failed(devlink)) {
  		if (!reload)
  			/* Only the parts that were not de-initialized in the
diff --cc drivers/net/netdevsim/dev.c
index a3dd545b2aec,9661aca35703..000000000000
--- a/drivers/net/netdevsim/dev.c
+++ b/drivers/net/netdevsim/dev.c
@@@ -1510,9 -1510,9 +1510,15 @@@ int nsim_dev_probe(struct nsim_bus_dev 
  	if (err)
  		goto err_psample_exit;
  
++<<<<<<< HEAD
 +	devlink_params_publish(devlink);
 +	devlink_reload_enable(devlink);
 +	nsim_dev->esw_mode = DEVLINK_ESWITCH_MODE_LEGACY;
++=======
+ 	nsim_dev->esw_mode = DEVLINK_ESWITCH_MODE_LEGACY;
+ 	devlink_set_features(devlink, DEVLINK_F_RELOAD);
+ 	devlink_register(devlink);
++>>>>>>> 82465bec3e97 (devlink: Delete reload enable/disable interface)
  	return 0;
  
  err_psample_exit:
@@@ -1568,8 -1566,7 +1574,12 @@@ void nsim_dev_remove(struct nsim_bus_de
  	struct nsim_dev *nsim_dev = dev_get_drvdata(&nsim_bus_dev->dev);
  	struct devlink *devlink = priv_to_devlink(nsim_dev);
  
++<<<<<<< HEAD
 +	devlink_reload_disable(devlink);
 +
++=======
+ 	devlink_unregister(devlink);
++>>>>>>> 82465bec3e97 (devlink: Delete reload enable/disable interface)
  	nsim_dev_reload_destroy(nsim_dev);
  
  	nsim_bpf_dev_exit(nsim_dev);
diff --cc net/core/devlink.c
index 3e56c892bf42,3ce6147a2fe8..000000000000
--- a/net/core/devlink.c
+++ b/net/core/devlink.c
@@@ -34,6 -30,63 +34,66 @@@
  #define CREATE_TRACE_POINTS
  #include <trace/events/devlink.h>
  
++<<<<<<< HEAD
++=======
+ #define DEVLINK_RELOAD_STATS_ARRAY_SIZE \
+ 	(__DEVLINK_RELOAD_LIMIT_MAX * __DEVLINK_RELOAD_ACTION_MAX)
+ 
+ struct devlink_dev_stats {
+ 	u32 reload_stats[DEVLINK_RELOAD_STATS_ARRAY_SIZE];
+ 	u32 remote_reload_stats[DEVLINK_RELOAD_STATS_ARRAY_SIZE];
+ };
+ 
+ struct devlink {
+ 	u32 index;
+ 	struct list_head port_list;
+ 	struct list_head rate_list;
+ 	struct list_head sb_list;
+ 	struct list_head dpipe_table_list;
+ 	struct list_head resource_list;
+ 	struct list_head param_list;
+ 	struct list_head region_list;
+ 	struct list_head reporter_list;
+ 	struct mutex reporters_lock; /* protects reporter_list */
+ 	struct devlink_dpipe_headers *dpipe_headers;
+ 	struct list_head trap_list;
+ 	struct list_head trap_group_list;
+ 	struct list_head trap_policer_list;
+ 	const struct devlink_ops *ops;
+ 	u64 features;
+ 	struct xarray snapshot_ids;
+ 	struct devlink_dev_stats stats;
+ 	struct device *dev;
+ 	possible_net_t _net;
+ 	/* Serializes access to devlink instance specific objects such as
+ 	 * port, sb, dpipe, resource, params, region, traps and more.
+ 	 */
+ 	struct mutex lock;
+ 	u8 reload_failed:1;
+ 	refcount_t refcount;
+ 	struct completion comp;
+ 	char priv[0] __aligned(NETDEV_ALIGN);
+ };
+ 
+ void *devlink_priv(struct devlink *devlink)
+ {
+ 	return &devlink->priv;
+ }
+ EXPORT_SYMBOL_GPL(devlink_priv);
+ 
+ struct devlink *priv_to_devlink(void *priv)
+ {
+ 	return container_of(priv, struct devlink, priv);
+ }
+ EXPORT_SYMBOL_GPL(priv_to_devlink);
+ 
+ struct device *devlink_to_dev(const struct devlink *devlink)
+ {
+ 	return devlink->dev;
+ }
+ EXPORT_SYMBOL_GPL(devlink_to_dev);
+ 
++>>>>>>> 82465bec3e97 (devlink: Delete reload enable/disable interface)
  static struct devlink_dpipe_field devlink_dpipe_fields_ethernet[] = {
  	{
  		.name = "destination mac",
@@@ -3947,9 -4032,6 +4007,12 @@@ static int devlink_reload(struct devlin
  	struct net *curr_net;
  	int err;
  
++<<<<<<< HEAD
 +	if (!devlink->reload_enabled)
 +		return -EOPNOTSUPP;
 +
++=======
++>>>>>>> 82465bec3e97 (devlink: Delete reload enable/disable interface)
  	memcpy(remote_reload_stats, devlink->stats.remote_reload_stats,
  	       sizeof(remote_reload_stats));
  
@@@ -8975,10 -9171,8 +9038,15 @@@ void devlink_unregister(struct devlink 
  	wait_for_completion(&devlink->comp);
  
  	mutex_lock(&devlink_mutex);
++<<<<<<< HEAD
 +	WARN_ON(devlink_reload_supported(devlink->ops) &&
 +		devlink->reload_enabled);
 +	devlink_notify(devlink, DEVLINK_CMD_DEL);
 +	list_del(&devlink->list);
++=======
+ 	devlink_notify_unregister(devlink);
+ 	xa_clear_mark(&devlinks, devlink->index, DEVLINK_REGISTERED);
++>>>>>>> 82465bec3e97 (devlink: Delete reload enable/disable interface)
  	mutex_unlock(&devlink_mutex);
  }
  EXPORT_SYMBOL_GPL(devlink_unregister);
* Unmerged path drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_devlink.c
* Unmerged path drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_devlink.c
* Unmerged path drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_devlink.c
* Unmerged path drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_devlink.c
* Unmerged path drivers/net/ethernet/mellanox/mlx4/main.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/main.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/sf/dev/driver.c
* Unmerged path drivers/net/ethernet/mellanox/mlxsw/core.c
* Unmerged path drivers/net/netdevsim/dev.c
diff --git a/include/net/devlink.h b/include/net/devlink.h
index f60a6c23bf25..1612f2802299 100644
--- a/include/net/devlink.h
+++ b/include/net/devlink.h
@@ -1557,8 +1557,6 @@ static inline struct devlink *devlink_alloc(const struct devlink_ops *ops,
 }
 int devlink_register(struct devlink *devlink, struct device *dev);
 void devlink_unregister(struct devlink *devlink);
-void devlink_reload_enable(struct devlink *devlink);
-void devlink_reload_disable(struct devlink *devlink);
 void devlink_free(struct devlink *devlink);
 int devlink_port_register(struct devlink *devlink,
 			  struct devlink_port *devlink_port,
* Unmerged path net/core/devlink.c
