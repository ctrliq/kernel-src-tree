devres: Enable trace events

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-394.el8
commit-author Andy Shevchenko <andriy.shevchenko@linux.intel.com>
commit 09705dcb63d269000595284b5dd7f5c938d647b9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-394.el8/09705dcb.failed

In some cases the printf() mechanism is too heavy and can't be used.
For example, when debugging a race condition involving devres API.
When CONFIG_DEBUG_DEVRES is enabled I can't reproduce an issue, and
otherwise it's quite visible with a useful information being collected.

Enable trace events for devres part of the driver core.

	Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Link: https://lore.kernel.org/r/20210517122946.53161-4-andriy.shevchenko@linux.intel.com
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit 09705dcb63d269000595284b5dd7f5c938d647b9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/base/devres.c
#	include/linux/device.h
diff --cc drivers/base/devres.c
index feb35688cc62,eaa9a5cd1db9..000000000000
--- a/drivers/base/devres.c
+++ b/drivers/base/devres.c
@@@ -118,9 -131,31 +123,37 @@@ static void add_dr(struct device *dev, 
  	list_add_tail(&node->entry, &dev->devres_head);
  }
  
++<<<<<<< HEAD
 +#ifdef CONFIG_DEBUG_DEVRES
 +void * __devres_alloc_node(dr_release_t release, size_t size, gfp_t gfp, int nid,
 +		      const char *name)
++=======
+ static void replace_dr(struct device *dev,
+ 		       struct devres_node *old, struct devres_node *new)
+ {
+ 	devres_log(dev, old, "REPLACE");
+ 	BUG_ON(!list_empty(&new->entry));
+ 	list_replace(&old->entry, &new->entry);
+ }
+ 
+ /**
+  * __devres_alloc_node - Allocate device resource data
+  * @release: Release function devres will be associated with
+  * @size: Allocation size
+  * @gfp: Allocation flags
+  * @nid: NUMA node
+  * @name: Name of the resource
+  *
+  * Allocate devres of @size bytes.  The allocated area is zeroed, then
+  * associated with @release.  The returned pointer can be passed to
+  * other devres_*() functions.
+  *
+  * RETURNS:
+  * Pointer to allocated devres on success, NULL on failure.
+  */
+ void *__devres_alloc_node(dr_release_t release, size_t size, gfp_t gfp, int nid,
+ 			  const char *name)
++>>>>>>> 09705dcb63d2 (devres: Enable trace events)
  {
  	struct devres *dr;
  
@@@ -131,32 -166,6 +164,35 @@@
  	return dr->data;
  }
  EXPORT_SYMBOL_GPL(__devres_alloc_node);
++<<<<<<< HEAD
 +#else
 +/**
 + * devres_alloc - Allocate device resource data
 + * @release: Release function devres will be associated with
 + * @size: Allocation size
 + * @gfp: Allocation flags
 + * @nid: NUMA node
 + *
 + * Allocate devres of @size bytes.  The allocated area is zeroed, then
 + * associated with @release.  The returned pointer can be passed to
 + * other devres_*() functions.
 + *
 + * RETURNS:
 + * Pointer to allocated devres on success, NULL on failure.
 + */
 +void * devres_alloc_node(dr_release_t release, size_t size, gfp_t gfp, int nid)
 +{
 +	struct devres *dr;
 +
 +	dr = alloc_dr(release, size, gfp | __GFP_ZERO, nid);
 +	if (unlikely(!dr))
 +		return NULL;
 +	return dr->data;
 +}
 +EXPORT_SYMBOL_GPL(devres_alloc_node);
 +#endif
++=======
++>>>>>>> 09705dcb63d2 (devres: Enable trace events)
  
  /**
   * devres_for_each_res - Resource iterator
diff --cc include/linux/device.h
index da6e1db2c903,b630f183f504..000000000000
--- a/include/linux/device.h
+++ b/include/linux/device.h
@@@ -891,53 -165,44 +891,61 @@@ extern void device_remove_bin_file(stru
  typedef void (*dr_release_t)(struct device *dev, void *res);
  typedef int (*dr_match_t)(struct device *dev, void *res, void *match_data);
  
++<<<<<<< HEAD
 +#ifdef CONFIG_DEBUG_DEVRES
 +extern void *__devres_alloc_node(dr_release_t release, size_t size, gfp_t gfp,
 +				 int nid, const char *name) __malloc;
++=======
+ void *__devres_alloc_node(dr_release_t release, size_t size, gfp_t gfp,
+ 			  int nid, const char *name) __malloc;
++>>>>>>> 09705dcb63d2 (devres: Enable trace events)
  #define devres_alloc(release, size, gfp) \
  	__devres_alloc_node(release, size, gfp, NUMA_NO_NODE, #release)
  #define devres_alloc_node(release, size, gfp, nid) \
  	__devres_alloc_node(release, size, gfp, nid, #release)
 -
 -void devres_for_each_res(struct device *dev, dr_release_t release,
 -			 dr_match_t match, void *match_data,
 -			 void (*fn)(struct device *, void *, void *),
 -			 void *data);
 -void devres_free(void *res);
 -void devres_add(struct device *dev, void *res);
 -void *devres_find(struct device *dev, dr_release_t release,
 -		  dr_match_t match, void *match_data);
 -void *devres_get(struct device *dev, void *new_res,
 -		 dr_match_t match, void *match_data);
 -void *devres_remove(struct device *dev, dr_release_t release,
 -		    dr_match_t match, void *match_data);
 -int devres_destroy(struct device *dev, dr_release_t release,
 -		   dr_match_t match, void *match_data);
 -int devres_release(struct device *dev, dr_release_t release,
 -		   dr_match_t match, void *match_data);
++<<<<<<< HEAD
 +#else
 +extern void *devres_alloc_node(dr_release_t release, size_t size, gfp_t gfp,
 +			       int nid) __malloc;
 +static inline void *devres_alloc(dr_release_t release, size_t size, gfp_t gfp)
 +{
 +	return devres_alloc_node(release, size, gfp, NUMA_NO_NODE);
 +}
 +#endif
++=======
++>>>>>>> 09705dcb63d2 (devres: Enable trace events)
 +
 +extern void devres_for_each_res(struct device *dev, dr_release_t release,
 +				dr_match_t match, void *match_data,
 +				void (*fn)(struct device *, void *, void *),
 +				void *data);
 +extern void devres_free(void *res);
 +extern void devres_add(struct device *dev, void *res);
 +extern void *devres_find(struct device *dev, dr_release_t release,
 +			 dr_match_t match, void *match_data);
 +extern void *devres_get(struct device *dev, void *new_res,
 +			dr_match_t match, void *match_data);
 +extern void *devres_remove(struct device *dev, dr_release_t release,
 +			   dr_match_t match, void *match_data);
 +extern int devres_destroy(struct device *dev, dr_release_t release,
 +			  dr_match_t match, void *match_data);
 +extern int devres_release(struct device *dev, dr_release_t release,
 +			  dr_match_t match, void *match_data);
  
  /* devres group */
 -void * __must_check devres_open_group(struct device *dev, void *id, gfp_t gfp);
 -void devres_close_group(struct device *dev, void *id);
 -void devres_remove_group(struct device *dev, void *id);
 -int devres_release_group(struct device *dev, void *id);
 +extern void * __must_check devres_open_group(struct device *dev, void *id,
 +					     gfp_t gfp);
 +extern void devres_close_group(struct device *dev, void *id);
 +extern void devres_remove_group(struct device *dev, void *id);
 +extern int devres_release_group(struct device *dev, void *id);
  
  /* managed devm_k.alloc/kfree for device drivers */
 -void *devm_kmalloc(struct device *dev, size_t size, gfp_t gfp) __malloc;
 -void *devm_krealloc(struct device *dev, void *ptr, size_t size,
 -		    gfp_t gfp) __must_check;
 -__printf(3, 0) char *devm_kvasprintf(struct device *dev, gfp_t gfp,
 -				     const char *fmt, va_list ap) __malloc;
 -__printf(3, 4) char *devm_kasprintf(struct device *dev, gfp_t gfp,
 -				    const char *fmt, ...) __malloc;
 +extern void *devm_kmalloc(struct device *dev, size_t size, gfp_t gfp) __malloc;
 +extern __printf(3, 0)
 +char *devm_kvasprintf(struct device *dev, gfp_t gfp, const char *fmt,
 +		      va_list ap) __malloc;
 +extern __printf(3, 4)
 +char *devm_kasprintf(struct device *dev, gfp_t gfp, const char *fmt, ...) __malloc;
  static inline void *devm_kzalloc(struct device *dev, size_t size, gfp_t gfp)
  {
  	return devm_kmalloc(dev, size, gfp | __GFP_ZERO);
diff --git a/drivers/base/Makefile b/drivers/base/Makefile
index 1611f64c4d30..69690fe9569a 100644
--- a/drivers/base/Makefile
+++ b/drivers/base/Makefile
@@ -30,3 +30,6 @@ obj-y			+= test/
 
 ccflags-$(CONFIG_DEBUG_DRIVER) := -DDEBUG
 
+# define_trace.h needs to know how to find our header
+CFLAGS_trace.o		:= -I$(src)
+obj-$(CONFIG_TRACING)	+= trace.o
* Unmerged path drivers/base/devres.c
diff --git a/drivers/base/trace.c b/drivers/base/trace.c
new file mode 100644
index 000000000000..b24b0a309c4a
--- /dev/null
+++ b/drivers/base/trace.c
@@ -0,0 +1,10 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/*
+ * Device core Trace Support
+ * Copyright (C) 2021, Intel Corporation
+ *
+ * Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
+ */
+
+#define CREATE_TRACE_POINTS
+#include "trace.h"
diff --git a/drivers/base/trace.h b/drivers/base/trace.h
new file mode 100644
index 000000000000..3192e18f877e
--- /dev/null
+++ b/drivers/base/trace.h
@@ -0,0 +1,56 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/*
+ * Device core Trace Support
+ * Copyright (C) 2021, Intel Corporation
+ *
+ * Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
+ */
+
+#undef TRACE_SYSTEM
+#define TRACE_SYSTEM dev
+
+#if !defined(__DEV_TRACE_H) || defined(TRACE_HEADER_MULTI_READ)
+#define __DEV_TRACE_H
+
+#include <linux/device.h>
+#include <linux/tracepoint.h>
+#include <linux/types.h>
+
+DECLARE_EVENT_CLASS(devres,
+	TP_PROTO(struct device *dev, const char *op, void *node, const char *name, size_t size),
+	TP_ARGS(dev, op, node, name, size),
+	TP_STRUCT__entry(
+		__string(devname, dev_name(dev))
+		__field(struct device *, dev)
+		__field(const char *, op)
+		__field(void *, node)
+		__field(const char *, name)
+		__field(size_t, size)
+	),
+	TP_fast_assign(
+		__assign_str(devname, dev_name(dev));
+		__entry->op = op;
+		__entry->node = node;
+		__entry->name = name;
+		__entry->size = size;
+	),
+	TP_printk("%s %3s %p %s (%zu bytes)", __get_str(devname),
+		  __entry->op, __entry->node, __entry->name, __entry->size)
+);
+
+DEFINE_EVENT(devres, devres_log,
+	TP_PROTO(struct device *dev, const char *op, void *node, const char *name, size_t size),
+	TP_ARGS(dev, op, node, name, size)
+);
+
+#endif /* __DEV_TRACE_H */
+
+/* this part has to be here */
+
+#undef TRACE_INCLUDE_PATH
+#define TRACE_INCLUDE_PATH .
+
+#undef TRACE_INCLUDE_FILE
+#define TRACE_INCLUDE_FILE trace
+
+#include <trace/define_trace.h>
* Unmerged path include/linux/device.h
