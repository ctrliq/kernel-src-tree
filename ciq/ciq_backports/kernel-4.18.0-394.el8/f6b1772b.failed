vgaarb: remove the unused irq_set_state argument to vga_client_register

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-394.el8
commit-author Christoph Hellwig <hch@lst.de>
commit f6b1772b255504e9666cb8b1beabfd00abb2da56
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-394.el8/f6b1772b.failed

All callers pass NULL as the irq_set_state argument, so remove it and
the ->irq_set_state member in struct vga_device.

	Signed-off-by: Christoph Hellwig <hch@lst.de>
Link: https://patchwork.freedesktop.org/patch/msgid/20210716061634.2446357-7-hch@lst.de
	Acked-by: Christian König <christian.koenig@amd.com>
	Signed-off-by: Christian König <christian.koenig@amd.com>
(cherry picked from commit f6b1772b255504e9666cb8b1beabfd00abb2da56)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/vfio/pci/vfio_pci.c
#	include/linux/vgaarb.h
diff --cc drivers/vfio/pci/vfio_pci.c
index d8886dfae7ea,b038900fee48..000000000000
--- a/drivers/vfio/pci/vfio_pci.c
+++ b/drivers/vfio/pci/vfio_pci.c
@@@ -1943,6 -1908,68 +1943,71 @@@ static int vfio_pci_bus_notifier(struc
  	return 0;
  }
  
++<<<<<<< HEAD
++=======
+ static int vfio_pci_vf_init(struct vfio_pci_device *vdev)
+ {
+ 	struct pci_dev *pdev = vdev->pdev;
+ 	int ret;
+ 
+ 	if (!pdev->is_physfn)
+ 		return 0;
+ 
+ 	vdev->vf_token = kzalloc(sizeof(*vdev->vf_token), GFP_KERNEL);
+ 	if (!vdev->vf_token)
+ 		return -ENOMEM;
+ 
+ 	mutex_init(&vdev->vf_token->lock);
+ 	uuid_gen(&vdev->vf_token->uuid);
+ 
+ 	vdev->nb.notifier_call = vfio_pci_bus_notifier;
+ 	ret = bus_register_notifier(&pci_bus_type, &vdev->nb);
+ 	if (ret) {
+ 		kfree(vdev->vf_token);
+ 		return ret;
+ 	}
+ 	return 0;
+ }
+ 
+ static void vfio_pci_vf_uninit(struct vfio_pci_device *vdev)
+ {
+ 	if (!vdev->vf_token)
+ 		return;
+ 
+ 	bus_unregister_notifier(&pci_bus_type, &vdev->nb);
+ 	WARN_ON(vdev->vf_token->users);
+ 	mutex_destroy(&vdev->vf_token->lock);
+ 	kfree(vdev->vf_token);
+ }
+ 
+ static int vfio_pci_vga_init(struct vfio_pci_device *vdev)
+ {
+ 	struct pci_dev *pdev = vdev->pdev;
+ 	int ret;
+ 
+ 	if (!vfio_pci_is_vga(pdev))
+ 		return 0;
+ 
+ 	ret = vga_client_register(pdev, vdev, vfio_pci_set_vga_decode);
+ 	if (ret)
+ 		return ret;
+ 	vga_set_legacy_decoding(pdev, vfio_pci_set_vga_decode(vdev, false));
+ 	return 0;
+ }
+ 
+ static void vfio_pci_vga_uninit(struct vfio_pci_device *vdev)
+ {
+ 	struct pci_dev *pdev = vdev->pdev;
+ 
+ 	if (!vfio_pci_is_vga(pdev))
+ 		return;
+ 	vga_client_unregister(pdev);
+ 	vga_set_legacy_decoding(pdev, VGA_RSRC_NORMAL_IO | VGA_RSRC_NORMAL_MEM |
+ 					      VGA_RSRC_LEGACY_IO |
+ 					      VGA_RSRC_LEGACY_MEM);
+ }
+ 
++>>>>>>> f6b1772b2555 (vgaarb: remove the unused irq_set_state argument to vga_client_register)
  static int vfio_pci_probe(struct pci_dev *pdev, const struct pci_device_id *id)
  {
  	struct vfio_pci_device *vdev;
diff --cc include/linux/vgaarb.h
index 05171fc7e26a,ea45d3e86fff..000000000000
--- a/include/linux/vgaarb.h
+++ b/include/linux/vgaarb.h
@@@ -116,4 -114,9 +114,12 @@@ static inline int vga_get_uninterruptib
         return vga_get(pdev, rsrc, 0);
  }
  
++<<<<<<< HEAD
++=======
+ static inline void vga_client_unregister(struct pci_dev *pdev)
+ {
+ 	vga_client_register(pdev, NULL, NULL);
+ }
+ 
++>>>>>>> f6b1772b2555 (vgaarb: remove the unused irq_set_state argument to vga_client_register)
  #endif /* LINUX_VGA_H */
diff --git a/drivers/gpu/drm/amd/amdgpu/amdgpu_device.c b/drivers/gpu/drm/amd/amdgpu/amdgpu_device.c
index 49d5053b1481..e70682029899 100644
--- a/drivers/gpu/drm/amd/amdgpu/amdgpu_device.c
+++ b/drivers/gpu/drm/amd/amdgpu/amdgpu_device.c
@@ -3724,7 +3724,7 @@ int amdgpu_device_init(struct amdgpu_device *adev,
 	/* this will fail for cards that aren't VGA class devices, just
 	 * ignore it */
 	if ((adev->pdev->class >> 8) == PCI_CLASS_DISPLAY_VGA)
-		vga_client_register(adev->pdev, adev, NULL, amdgpu_device_vga_set_decode);
+		vga_client_register(adev->pdev, adev, amdgpu_device_vga_set_decode);
 
 	if (amdgpu_device_supports_px(ddev)) {
 		px = true;
diff --git a/drivers/gpu/drm/i915/display/intel_vga.c b/drivers/gpu/drm/i915/display/intel_vga.c
index f002b82ba9c0..e4305674636d 100644
--- a/drivers/gpu/drm/i915/display/intel_vga.c
+++ b/drivers/gpu/drm/i915/display/intel_vga.c
@@ -147,7 +147,7 @@ int intel_vga_register(struct drm_i915_private *i915)
 	 * then we do not take part in VGA arbitration and the
 	 * vga_client_register() fails with -ENODEV.
 	 */
-	ret = vga_client_register(pdev, i915, NULL, intel_vga_set_decode);
+	ret = vga_client_register(pdev, i915, intel_vga_set_decode);
 	if (ret && ret != -ENODEV)
 		return ret;
 
diff --git a/drivers/gpu/drm/nouveau/nouveau_vga.c b/drivers/gpu/drm/nouveau/nouveau_vga.c
index 7c4b374b3eca..e967d8ef9048 100644
--- a/drivers/gpu/drm/nouveau/nouveau_vga.c
+++ b/drivers/gpu/drm/nouveau/nouveau_vga.c
@@ -94,7 +94,7 @@ nouveau_vga_init(struct nouveau_drm *drm)
 		return;
 	pdev = to_pci_dev(dev->dev);
 
-	vga_client_register(pdev, dev, NULL, nouveau_vga_set_decode);
+	vga_client_register(pdev, dev, nouveau_vga_set_decode);
 
 	/* don't register Thunderbolt eGPU with vga_switcheroo */
 	if (pci_is_thunderbolt_attached(pdev))
diff --git a/drivers/gpu/drm/radeon/radeon_device.c b/drivers/gpu/drm/radeon/radeon_device.c
index 46eea01950cb..708c841d4e53 100644
--- a/drivers/gpu/drm/radeon/radeon_device.c
+++ b/drivers/gpu/drm/radeon/radeon_device.c
@@ -1434,7 +1434,7 @@ int radeon_device_init(struct radeon_device *rdev,
 	/* if we have > 1 VGA cards, then disable the radeon VGA resources */
 	/* this will fail for cards that aren't VGA class devices, just
 	 * ignore it */
-	vga_client_register(rdev->pdev, rdev, NULL, radeon_vga_set_decode);
+	vga_client_register(rdev->pdev, rdev, radeon_vga_set_decode);
 
 	if (rdev->flags & RADEON_IS_PX)
 		runtime = true;
diff --git a/drivers/gpu/vga/vgaarb.c b/drivers/gpu/vga/vgaarb.c
index 3ed3734f66d9..88157e472210 100644
--- a/drivers/gpu/vga/vgaarb.c
+++ b/drivers/gpu/vga/vgaarb.c
@@ -72,9 +72,7 @@ struct vga_device {
 	unsigned int io_norm_cnt;	/* normal IO count */
 	unsigned int mem_norm_cnt;	/* normal MEM count */
 	bool bridge_has_one_vga;
-	/* allow IRQ enable/disable hook */
 	void *cookie;
-	void (*irq_set_state)(void *cookie, bool enable);
 	unsigned int (*set_vga_decode)(void *cookie, bool decode);
 };
 
@@ -218,13 +216,6 @@ int vga_remove_vgacon(struct pci_dev *pdev)
 #endif
 EXPORT_SYMBOL(vga_remove_vgacon);
 
-static inline void vga_irq_set_state(struct vga_device *vgadev, bool state)
-{
-	if (vgadev->irq_set_state)
-		vgadev->irq_set_state(vgadev->cookie, state);
-}
-
-
 /* If we don't ever use VGA arb we should avoid
    turning off anything anywhere due to old X servers getting
    confused about the boot device not being VGA */
@@ -325,10 +316,8 @@ static struct vga_device *__vga_tryget(struct vga_device *vgadev,
 			if ((match & conflict->decodes) & VGA_RSRC_LEGACY_IO)
 				pci_bits |= PCI_COMMAND_IO;
 
-			if (pci_bits) {
-				vga_irq_set_state(conflict, false);
+			if (pci_bits)
 				flags |= PCI_VGA_STATE_CHANGE_DECODES;
-			}
 		}
 
 		if (change_bridge)
@@ -365,9 +354,6 @@ static struct vga_device *__vga_tryget(struct vga_device *vgadev,
 
 	pci_set_vga_state(vgadev->pdev, true, pci_bits, flags);
 
-	if (!vgadev->bridge_has_one_vga)
-		vga_irq_set_state(vgadev, true);
-
 	vgadev->owns |= wants;
 lock_them:
 	vgadev->locks |= (rsrc & VGA_RSRC_LEGACY_MASK);
@@ -855,15 +841,10 @@ EXPORT_SYMBOL(vga_set_legacy_decoding);
  * vga_client_register - register or unregister a VGA arbitration client
  * @pdev: pci device of the VGA client
  * @cookie: client cookie to be used in callbacks
- * @irq_set_state: irq state change callback
  * @set_vga_decode: vga decode change callback
  *
  * Clients have two callback mechanisms they can use.
  *
- * @irq_set_state callback: If a client can't disable its GPUs VGA
- * resources, then we need to be able to ask it to turn off its irqs when we
- * turn off its mem and io decoding.
- *
  * @set_vga_decode callback: If a client can disable its GPU VGA resource, it
  * will get a callback from this to set the encode/decode state.
  *
@@ -883,7 +864,6 @@ EXPORT_SYMBOL(vga_set_legacy_decoding);
  * Returns: 0 on success, -1 on failure
  */
 int vga_client_register(struct pci_dev *pdev, void *cookie,
-			void (*irq_set_state)(void *cookie, bool state),
 			unsigned int (*set_vga_decode)(void *cookie,
 						       bool decode))
 {
@@ -896,7 +876,6 @@ int vga_client_register(struct pci_dev *pdev, void *cookie,
 	if (!vgadev)
 		goto bail;
 
-	vgadev->irq_set_state = irq_set_state;
 	vgadev->set_vga_decode = set_vga_decode;
 	vgadev->cookie = cookie;
 	ret = 0;
* Unmerged path drivers/vfio/pci/vfio_pci.c
* Unmerged path include/linux/vgaarb.h
