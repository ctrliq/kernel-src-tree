arm64: ptrace: nofpsimd: Fail FP/SIMD regset operations

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-394.el8
commit-author Suzuki K Poulose <suzuki.poulose@arm.com>
commit c9d66999f064947e6b577ceacc1eb2fbca6a8d3c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-394.el8/c9d66999.failed

When fp/simd is not supported on the system, fail the operations
of FP/SIMD regsets.

Fixes: 82e0191a1aa11abf ("arm64: Support systems without FP/ASIMD")
	Cc: Will Deacon <will@kernel.org>
	Cc: Mark Rutland <mark.rutland@arm.com>
	Reviewed-by: Ard Biesheuvel <ardb@kernel.org>
	Reviewed-by: Catalin Marinas <catalin.marinas@arm.com>
	Signed-off-by: Suzuki K Poulose <suzuki.poulose@arm.com>
	Signed-off-by: Will Deacon <will@kernel.org>
(cherry picked from commit c9d66999f064947e6b577ceacc1eb2fbca6a8d3c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/arm64/kernel/ptrace.c
diff --cc arch/arm64/kernel/ptrace.c
index 3c6b59196b0e,cd6e5fa48b9c..000000000000
--- a/arch/arm64/kernel/ptrace.c
+++ b/arch/arm64/kernel/ptrace.c
@@@ -613,8 -641,12 +620,11 @@@ static int __fpr_get(struct task_struc
  }
  
  static int fpr_get(struct task_struct *target, const struct user_regset *regset,
 -		   unsigned int pos, unsigned int count,
 -		   void *kbuf, void __user *ubuf)
 +		   struct membuf to)
  {
+ 	if (!system_supports_fpsimd())
+ 		return -EINVAL;
+ 
  	if (target == current)
  		fpsimd_preserve_current_state();
  
@@@ -1082,7 -1147,8 +1095,12 @@@ static const struct user_regset aarch64
  		 */
  		.size = sizeof(u32),
  		.align = sizeof(u32),
++<<<<<<< HEAD
 +		.regset_get = fpr_get,
++=======
+ 		.active = fpr_active,
+ 		.get = fpr_get,
++>>>>>>> c9d66999f064 (arm64: ptrace: nofpsimd: Fail FP/SIMD regset operations)
  		.set = fpr_set
  	},
  	[REGSET_TLS] = {
@@@ -1266,7 -1360,11 +1284,10 @@@ static int compat_vfp_get(struct task_s
  {
  	struct user_fpsimd_state *uregs;
  	compat_ulong_t fpscr;
 -	int ret, vregs_end_pos;
  
+ 	if (!system_supports_fpsimd())
+ 		return -EINVAL;
+ 
  	uregs = &target->thread.uw.fpsimd_state;
  
  	if (target == current)
@@@ -1347,7 -1458,8 +1371,12 @@@ static const struct user_regset aarch32
  		.n = VFP_STATE_SIZE / sizeof(compat_ulong_t),
  		.size = sizeof(compat_ulong_t),
  		.align = sizeof(compat_ulong_t),
++<<<<<<< HEAD
 +		.regset_get = compat_vfp_get,
++=======
+ 		.active = fpr_active,
+ 		.get = compat_vfp_get,
++>>>>>>> c9d66999f064 (arm64: ptrace: nofpsimd: Fail FP/SIMD regset operations)
  		.set = compat_vfp_set
  	},
  };
* Unmerged path arch/arm64/kernel/ptrace.c
