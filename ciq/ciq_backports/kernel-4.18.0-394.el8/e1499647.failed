driver core: Better distinguish probe errors in really_probe

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-394.el8
commit-author Christoph Hellwig <hch@lst.de>
commit e1499647c69c72c4583273e773d8c2786cb4bee9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-394.el8/e1499647.failed

really_probe tries to special case errors from ->probe, but due to all
other initialization added to the function over time now a lot of
internal errors hit that code path as well.  Untangle that by adding
a new probe_err local variable and apply the special casing only to
that.

	Signed-off-by: Christoph Hellwig <hch@lst.de>
	Reviewed-by: Cornelia Huck <cohuck@redhat.com>
	Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
	Reviewed-by: Kirti Wankhede <kwankhede@nvidia.com>
Link: https://lore.kernel.org/r/20210617142218.1877096-3-hch@lst.de
	Signed-off-by: Alex Williamson <alex.williamson@redhat.com>
(cherry picked from commit e1499647c69c72c4583273e773d8c2786cb4bee9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/base/dd.c
diff --cc drivers/base/dd.c
index 532d8dcbb5eb,fd83817240e6..000000000000
--- a/drivers/base/dd.c
+++ b/drivers/base/dd.c
@@@ -688,32 -682,27 +720,31 @@@ pinctrl_bind_failed
  		dev->pm_domain->dismiss(dev);
  	pm_runtime_reinit(dev);
  	dev_pm_set_driver_flags(dev, 0);
- 
- 	switch (ret) {
- 	case -EPROBE_DEFER:
- 		/* Driver requested deferred probing */
- 		dev_dbg(dev, "Driver %s requests probe deferral\n", drv->name);
+ 	if (probe_ret == -EPROBE_DEFER)
  		driver_deferred_probe_add_trigger(dev, local_trigger_count);
++<<<<<<< HEAD
 +		break;
 +	case -ENODEV:
 +	case -ENXIO:
 +		pr_debug("%s: probe of %s rejects match %d\n",
 +			 drv->name, dev_name(dev), ret);
 +		break;
 +	default:
 +		/* driver matched but the probe failed */
 +		printk(KERN_WARNING
 +		       "%s: probe of %s failed with error %d\n",
 +		       drv->name, dev_name(dev), ret);
 +	}
 +	/*
 +	 * Ignore errors returned by ->probe so that the next driver can try
 +	 * its luck.
 +	 */
 +	ret = 0;
++=======
++>>>>>>> e1499647c69c (driver core: Better distinguish probe errors in really_probe)
  done:
  	atomic_dec(&probe_count);
 -	wake_up_all(&probe_waitqueue);
 -	return ret;
 -}
 -
 -/*
 - * For initcall_debug, show the driver probe time.
 - */
 -static int really_probe_debug(struct device *dev, struct device_driver *drv)
 -{
 -	ktime_t calltime, rettime;
 -	int ret;
 -
 -	calltime = ktime_get();
 -	ret = really_probe(dev, drv);
 -	rettime = ktime_get();
 -	pr_debug("probe of %s returned %d after %lld usecs\n",
 -		 dev_name(dev), ret, ktime_us_delta(rettime, calltime));
 +	wake_up(&probe_waitqueue);
  	return ret;
  }
  
* Unmerged path drivers/base/dd.c
