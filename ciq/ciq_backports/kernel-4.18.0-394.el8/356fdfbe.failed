arm64/cpufeature: Add remaining feature bits in ID_AA64MMFR2 register

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-394.el8
commit-author Anshuman Khandual <anshuman.khandual@arm.com>
commit 356fdfbe8761da55c4100bd543259f349fc1ca3a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-394.el8/356fdfbe.failed

Enable EVT, BBM, TTL, IDS, ST, NV and CCIDX features bits in ID_AA64MMFR2
register as per ARM DDI 0487F.a specification.

	Suggested-by: Will Deacon <will@kernel.org>
	Signed-off-by: Anshuman Khandual <anshuman.khandual@arm.com>
	Reviewed-by: Suzuki K Poulose <suzuki.poulose@arm.com>
	Cc: Will Deacon <will@kernel.org>
	Cc: Mark Rutland <mark.rutland@arm.com>
	Cc: Suzuki K Poulose <suzuki.poulose@arm.com>
	Cc: linux-arm-kernel@lists.infradead.org
	Cc: linux-kernel@vger.kernel.org
Link: https://lore.kernel.org/r/1593748297-1965-4-git-send-email-anshuman.khandual@arm.com
	Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
(cherry picked from commit 356fdfbe8761da55c4100bd543259f349fc1ca3a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/arm64/include/asm/sysreg.h
#	arch/arm64/kernel/cpufeature.c
diff --cc arch/arm64/include/asm/sysreg.h
index 7b11f3be556e,9ee324936ea2..000000000000
--- a/arch/arm64/include/asm/sysreg.h
+++ b/arch/arm64/include/asm/sysreg.h
@@@ -832,9 -753,15 +832,18 @@@
  
  /* id_aa64mmfr2 */
  #define ID_AA64MMFR2_E0PD_SHIFT		60
++<<<<<<< HEAD
++=======
+ #define ID_AA64MMFR2_EVT_SHIFT		56
+ #define ID_AA64MMFR2_BBM_SHIFT		52
++>>>>>>> 356fdfbe8761 (arm64/cpufeature: Add remaining feature bits in ID_AA64MMFR2 register)
  #define ID_AA64MMFR2_TTL_SHIFT		48
  #define ID_AA64MMFR2_FWB_SHIFT		40
+ #define ID_AA64MMFR2_IDS_SHIFT		36
  #define ID_AA64MMFR2_AT_SHIFT		32
+ #define ID_AA64MMFR2_ST_SHIFT		28
+ #define ID_AA64MMFR2_NV_SHIFT		24
+ #define ID_AA64MMFR2_CCIDX_SHIFT	20
  #define ID_AA64MMFR2_LVA_SHIFT		16
  #define ID_AA64MMFR2_IESB_SHIFT		12
  #define ID_AA64MMFR2_LSM_SHIFT		8
diff --cc arch/arm64/kernel/cpufeature.c
index d6e77fbc1cf4,93797d9bb931..000000000000
--- a/arch/arm64/kernel/cpufeature.c
+++ b/arch/arm64/kernel/cpufeature.c
@@@ -281,9 -330,15 +281,18 @@@ static const struct arm64_ftr_bits ftr_
  
  static const struct arm64_ftr_bits ftr_id_aa64mmfr2[] = {
  	ARM64_FTR_BITS(FTR_HIDDEN, FTR_NONSTRICT, FTR_LOWER_SAFE, ID_AA64MMFR2_E0PD_SHIFT, 4, 0),
++<<<<<<< HEAD
++=======
+ 	ARM64_FTR_BITS(FTR_HIDDEN, FTR_STRICT, FTR_LOWER_SAFE, ID_AA64MMFR2_EVT_SHIFT, 4, 0),
+ 	ARM64_FTR_BITS(FTR_HIDDEN, FTR_STRICT, FTR_LOWER_SAFE, ID_AA64MMFR2_BBM_SHIFT, 4, 0),
++>>>>>>> 356fdfbe8761 (arm64/cpufeature: Add remaining feature bits in ID_AA64MMFR2 register)
  	ARM64_FTR_BITS(FTR_HIDDEN, FTR_STRICT, FTR_LOWER_SAFE, ID_AA64MMFR2_TTL_SHIFT, 4, 0),
  	ARM64_FTR_BITS(FTR_HIDDEN, FTR_STRICT, FTR_LOWER_SAFE, ID_AA64MMFR2_FWB_SHIFT, 4, 0),
+ 	ARM64_FTR_BITS(FTR_HIDDEN, FTR_STRICT, FTR_LOWER_SAFE, ID_AA64MMFR2_IDS_SHIFT, 4, 0),
  	ARM64_FTR_BITS(FTR_VISIBLE, FTR_STRICT, FTR_LOWER_SAFE, ID_AA64MMFR2_AT_SHIFT, 4, 0),
+ 	ARM64_FTR_BITS(FTR_HIDDEN, FTR_STRICT, FTR_LOWER_SAFE, ID_AA64MMFR2_ST_SHIFT, 4, 0),
+ 	ARM64_FTR_BITS(FTR_HIDDEN, FTR_STRICT, FTR_LOWER_SAFE, ID_AA64MMFR2_NV_SHIFT, 4, 0),
+ 	ARM64_FTR_BITS(FTR_HIDDEN, FTR_STRICT, FTR_LOWER_SAFE, ID_AA64MMFR2_CCIDX_SHIFT, 4, 0),
  	ARM64_FTR_BITS(FTR_HIDDEN, FTR_STRICT, FTR_LOWER_SAFE, ID_AA64MMFR2_LVA_SHIFT, 4, 0),
  	ARM64_FTR_BITS(FTR_HIDDEN, FTR_NONSTRICT, FTR_LOWER_SAFE, ID_AA64MMFR2_IESB_SHIFT, 4, 0),
  	ARM64_FTR_BITS(FTR_HIDDEN, FTR_STRICT, FTR_LOWER_SAFE, ID_AA64MMFR2_LSM_SHIFT, 4, 0),
* Unmerged path arch/arm64/include/asm/sysreg.h
* Unmerged path arch/arm64/kernel/cpufeature.c
