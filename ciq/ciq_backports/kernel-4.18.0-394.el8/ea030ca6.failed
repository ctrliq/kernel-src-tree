regmap-i2c: Set regmap max raw r/w from quirks

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-394.el8
commit-author Lucas Tanure <tanureal@opensource.cirrus.com>
commit ea030ca688193462b8d612c1628c37129aa30072
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-394.el8/ea030ca6.failed

Set regmap raw read/write from i2c quirks max read/write
so regmap_raw_read/write can split the access into chunks

	Signed-off-by: Lucas Tanure <tanureal@opensource.cirrus.com>
Link: https://lore.kernel.org/r/20210512135222.223203-1-tanureal@opensource.cirrus.com
	Signed-off-by: Mark Brown <broonie@kernel.org>
(cherry picked from commit ea030ca688193462b8d612c1628c37129aa30072)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/base/regmap/regmap-i2c.c
#	drivers/base/regmap/regmap.c
diff --cc drivers/base/regmap/regmap-i2c.c
index 056acde5e7d3,980e5ce6a3a3..000000000000
--- a/drivers/base/regmap/regmap-i2c.c
+++ b/drivers/base/regmap/regmap-i2c.c
@@@ -258,7 -316,11 +263,15 @@@ static const struct regmap_bus *regmap_
  	else if (config->val_bits == 8 && config->reg_bits == 8 &&
  		 i2c_check_functionality(i2c->adapter,
  					 I2C_FUNC_SMBUS_I2C_BLOCK))
++<<<<<<< HEAD
 +		return &regmap_i2c_smbus_i2c_block;
++=======
+ 		bus = &regmap_i2c_smbus_i2c_block;
+ 	else if (config->val_bits == 8 && config->reg_bits == 16 &&
+ 		i2c_check_functionality(i2c->adapter,
+ 					I2C_FUNC_SMBUS_I2C_BLOCK))
+ 		bus = &regmap_i2c_smbus_i2c_block_reg16;
++>>>>>>> ea030ca68819 (regmap-i2c: Set regmap max raw r/w from quirks)
  	else if (config->val_bits == 16 && config->reg_bits == 8 &&
  		 i2c_check_functionality(i2c->adapter,
  					 I2C_FUNC_SMBUS_WORD_DATA))
diff --cc drivers/base/regmap/regmap.c
index c61d85b7278f,0d185ec018a5..000000000000
--- a/drivers/base/regmap/regmap.c
+++ b/drivers/base/regmap/regmap.c
@@@ -1331,7 -1492,12 +1331,13 @@@ void regmap_exit(struct regmap *map
  	}
  	if (map->hwlock)
  		hwspin_lock_free(map->hwlock);
 -	if (map->lock == regmap_lock_mutex)
 -		mutex_destroy(&map->mutex);
  	kfree_const(map->name);
++<<<<<<< HEAD
++=======
+ 	kfree(map->patch);
+ 	if (map->bus && map->bus->free_on_exit)
+ 		kfree(map->bus);
++>>>>>>> ea030ca68819 (regmap-i2c: Set regmap max raw r/w from quirks)
  	kfree(map);
  }
  EXPORT_SYMBOL_GPL(regmap_exit);
* Unmerged path drivers/base/regmap/regmap-i2c.c
* Unmerged path drivers/base/regmap/regmap.c
diff --git a/include/linux/regmap.h b/include/linux/regmap.h
index 978a110b9d3e..bda567394c71 100644
--- a/include/linux/regmap.h
+++ b/include/linux/regmap.h
@@ -488,6 +488,7 @@ typedef void (*regmap_hw_free_context)(void *context);
  *     DEFAULT, BIG is assumed.
  * @max_raw_read: Max raw read size that can be used on the bus.
  * @max_raw_write: Max raw write size that can be used on the bus.
+ * @free_on_exit: kfree this on exit of regmap
  */
 struct regmap_bus {
 	bool fast_io;
@@ -505,6 +506,7 @@ struct regmap_bus {
 	enum regmap_endian val_format_endian_default;
 	size_t max_raw_read;
 	size_t max_raw_write;
+	bool free_on_exit;
 };
 
 /*
