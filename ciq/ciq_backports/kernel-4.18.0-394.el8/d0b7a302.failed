Revert "arm64: Remove unnecessary ISBs from set_{pte,pmd,pud}"

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-394.el8
commit-author Will Deacon <will@kernel.org>
commit d0b7a302d58abe24ed0f32a0672dd4c356bb73db
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-394.el8/d0b7a302.failed

This reverts commit 24fe1b0efad4fcdd32ce46cffeab297f22581707.

Commit 24fe1b0efad4fcdd ("arm64: Remove unnecessary ISBs from
set_{pte,pmd,pud}") removed ISB instructions immediately following updates
to the page table, on the grounds that they are not required by the
architecture and a DSB alone is sufficient to ensure that subsequent data
accesses use the new translation:

  DDI0487E_a, B2-128:

  | ... no instruction that appears in program order after the DSB
  | instruction can alter any state of the system or perform any part of
  | its functionality until the DSB completes other than:
  |
  | * Being fetched from memory and decoded
  | * Reading the general-purpose, SIMD and floating-point,
  |   Special-purpose, or System registers that are directly or indirectly
  |   read without causing side-effects.

However, the same document also states the following:

  DDI0487E_a, B2-125:

  | DMB and DSB instructions affect reads and writes to the memory system
  | generated by Load/Store instructions and data or unified cache
  | maintenance instructions being executed by the PE. Instruction fetches
  | or accesses caused by a hardware translation table access are not
  | explicit accesses.

which appears to claim that the DSB alone is insufficient.  Unfortunately,
some CPU designers have followed the second clause above, whereas in Linux
we've been relying on the first. This means that our mapping sequence:

	MOV	X0, <valid pte>
	STR	X0, [Xptep]	// Store new PTE to page table
	DSB	ISHST
	LDR	X1, [X2]	// Translates using the new PTE

can actually raise a translation fault on the load instruction because the
translation can be performed speculatively before the page table update and
then marked as "faulting" by the CPU. For user PTEs, this is ok because we
can handle the spurious fault, but for kernel PTEs and intermediate table
entries this results in a panic().

Revert the offending commit to reintroduce the missing barriers.

	Cc: <stable@vger.kernel.org>
Fixes: 24fe1b0efad4fcdd ("arm64: Remove unnecessary ISBs from set_{pte,pmd,pud}")
	Reviewed-by: Mark Rutland <mark.rutland@arm.com>
	Signed-off-by: Will Deacon <will@kernel.org>
(cherry picked from commit d0b7a302d58abe24ed0f32a0672dd4c356bb73db)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/arm64/include/asm/pgtable.h
diff --cc arch/arm64/include/asm/pgtable.h
index 785faded4722,feda7294320c..000000000000
--- a/arch/arm64/include/asm/pgtable.h
+++ b/arch/arm64/include/asm/pgtable.h
@@@ -492,7 -482,11 +494,15 @@@ static inline void set_pmd(pmd_t *pmdp
  #endif /* __PAGETABLE_PMD_FOLDED */
  
  	WRITE_ONCE(*pmdp, pmd);
++<<<<<<< HEAD
 +	dsb(ishst);
++=======
+ 
+ 	if (pmd_valid(pmd)) {
+ 		dsb(ishst);
+ 		isb();
+ 	}
++>>>>>>> d0b7a302d58a (Revert "arm64: Remove unnecessary ISBs from set_{pte,pmd,pud}")
  }
  
  static inline void pmd_clear(pmd_t *pmdp)
@@@ -549,7 -543,11 +559,15 @@@ static inline void set_pud(pud_t *pudp
  #endif /* __PAGETABLE_PUD_FOLDED */
  
  	WRITE_ONCE(*pudp, pud);
++<<<<<<< HEAD
 +	dsb(ishst);
++=======
+ 
+ 	if (pud_valid(pud)) {
+ 		dsb(ishst);
+ 		isb();
+ 	}
++>>>>>>> d0b7a302d58a (Revert "arm64: Remove unnecessary ISBs from set_{pte,pmd,pud}")
  }
  
  static inline void pud_clear(pud_t *pudp)
* Unmerged path arch/arm64/include/asm/pgtable.h
