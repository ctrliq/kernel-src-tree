NFS: Ensure the NFS_CAP_SECURITY_LABEL capability is set when appropriate

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-394.el8
commit-author Scott Mayhew <smayhew@redhat.com>
commit 0b4f132b15f988831dfca8f96af272e437eacf05
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-394.el8/0b4f132b.failed

Commit ce62b114bbad ("NFS: Split attribute support out from the server
capabilities") removed the logic from _nfs4_server_capabilities() that
sets the NFS_CAP_SECURITY_LABEL capability based on the presence of
FATTR4_WORD2_SECURITY_LABEL in the attr_bitmask of the server's response.
Now NFS_CAP_SECURITY_LABEL is never set, which breaks labelled NFS.

This was replaced with logic that clears the NFS_ATTR_FATTR_V4_SECURITY_LABEL
bit in the newly added fattr_valid field based on the absence of
FATTR4_WORD2_SECURITY_LABEL in the attr_bitmask of the server's response.
This essentially has no effect since there's nothing looks for that bit
in fattr_supported.

So revert that part of the commit, but adding the logic that sets
NFS_CAP_SECURITY_LABEL near where the other capabilities are set in
_nfs4_server_capabilities().

Fixes: ce62b114bbad ("NFS: Split attribute support out from the server capabilities")
	Signed-off-by: Scott Mayhew <smayhew@redhat.com>
	Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
(cherry picked from commit 0b4f132b15f988831dfca8f96af272e437eacf05)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/nfs/nfs4proc.c
diff --cc fs/nfs/nfs4proc.c
index 2b64b461b599,7e63fbe253f0..000000000000
--- a/fs/nfs/nfs4proc.c
+++ b/fs/nfs/nfs4proc.c
@@@ -3869,26 -3878,30 +3869,52 @@@ static int _nfs4_server_capabilities(st
  			server->caps |= NFS_CAP_HARDLINKS;
  		if (res.has_symlinks != 0)
  			server->caps |= NFS_CAP_SYMLINKS;
++<<<<<<< HEAD
 +		if (res.attr_bitmask[0] & FATTR4_WORD0_FILEID)
 +			server->caps |= NFS_CAP_FILEID;
 +		if (res.attr_bitmask[1] & FATTR4_WORD1_MODE)
 +			server->caps |= NFS_CAP_MODE;
 +		if (res.attr_bitmask[1] & FATTR4_WORD1_NUMLINKS)
 +			server->caps |= NFS_CAP_NLINK;
 +		if (res.attr_bitmask[1] & FATTR4_WORD1_OWNER)
 +			server->caps |= NFS_CAP_OWNER;
 +		if (res.attr_bitmask[1] & FATTR4_WORD1_OWNER_GROUP)
 +			server->caps |= NFS_CAP_OWNER_GROUP;
 +		if (res.attr_bitmask[1] & FATTR4_WORD1_TIME_ACCESS)
 +			server->caps |= NFS_CAP_ATIME;
 +		if (res.attr_bitmask[1] & FATTR4_WORD1_TIME_METADATA)
 +			server->caps |= NFS_CAP_CTIME;
 +		if (res.attr_bitmask[1] & FATTR4_WORD1_TIME_MODIFY)
 +			server->caps |= NFS_CAP_MTIME;
++=======
++>>>>>>> 0b4f132b15f9 (NFS: Ensure the NFS_CAP_SECURITY_LABEL capability is set when appropriate)
  #ifdef CONFIG_NFS_V4_SECURITY_LABEL
  		if (res.attr_bitmask[2] & FATTR4_WORD2_SECURITY_LABEL)
  			server->caps |= NFS_CAP_SECURITY_LABEL;
  #endif
++<<<<<<< HEAD
++=======
+ 		if (!(res.attr_bitmask[0] & FATTR4_WORD0_FILEID))
+ 			server->fattr_valid &= ~NFS_ATTR_FATTR_FILEID;
+ 		if (!(res.attr_bitmask[1] & FATTR4_WORD1_MODE))
+ 			server->fattr_valid &= ~NFS_ATTR_FATTR_MODE;
+ 		if (!(res.attr_bitmask[1] & FATTR4_WORD1_NUMLINKS))
+ 			server->fattr_valid &= ~NFS_ATTR_FATTR_NLINK;
+ 		if (!(res.attr_bitmask[1] & FATTR4_WORD1_OWNER))
+ 			server->fattr_valid &= ~(NFS_ATTR_FATTR_OWNER |
+ 				NFS_ATTR_FATTR_OWNER_NAME);
+ 		if (!(res.attr_bitmask[1] & FATTR4_WORD1_OWNER_GROUP))
+ 			server->fattr_valid &= ~(NFS_ATTR_FATTR_GROUP |
+ 				NFS_ATTR_FATTR_GROUP_NAME);
+ 		if (!(res.attr_bitmask[1] & FATTR4_WORD1_SPACE_USED))
+ 			server->fattr_valid &= ~NFS_ATTR_FATTR_SPACE_USED;
+ 		if (!(res.attr_bitmask[1] & FATTR4_WORD1_TIME_ACCESS))
+ 			server->fattr_valid &= ~NFS_ATTR_FATTR_ATIME;
+ 		if (!(res.attr_bitmask[1] & FATTR4_WORD1_TIME_METADATA))
+ 			server->fattr_valid &= ~NFS_ATTR_FATTR_CTIME;
+ 		if (!(res.attr_bitmask[1] & FATTR4_WORD1_TIME_MODIFY))
+ 			server->fattr_valid &= ~NFS_ATTR_FATTR_MTIME;
++>>>>>>> 0b4f132b15f9 (NFS: Ensure the NFS_CAP_SECURITY_LABEL capability is set when appropriate)
  		memcpy(server->attr_bitmask_nl, res.attr_bitmask,
  				sizeof(server->attr_bitmask));
  		server->attr_bitmask_nl[2] &= ~FATTR4_WORD2_SECURITY_LABEL;
* Unmerged path fs/nfs/nfs4proc.c
