arm64: mte: initialize RGSR_EL1.SEED in __cpu_setup

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-394.el8
commit-author Peter Collingbourne <pcc@google.com>
commit 37a8024d265564eba680575df6421f19db21dfce
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-394.el8/37a8024d.failed

A valid implementation choice for the ChooseRandomNonExcludedTag()
pseudocode function used by IRG is to behave in the same way as with
GCR_EL1.RRND=0. This would mean that RGSR_EL1.SEED is used as an LFSR
which must have a non-zero value in order for IRG to properly produce
pseudorandom numbers. However, RGSR_EL1 is reset to an UNKNOWN value
on soft reset and thus may reset to 0. Therefore we must initialize
RGSR_EL1.SEED to a non-zero value in order to ensure that IRG behaves
as expected.

	Signed-off-by: Peter Collingbourne <pcc@google.com>
Fixes: 3b714d24ef17 ("arm64: mte: CPU feature detection and initial sysreg configuration")
	Cc: <stable@vger.kernel.org> # 5.10
Link: https://linux-review.googlesource.com/id/I2b089b6c7d6f17ee37e2f0db7df5ad5bcc04526c
	Acked-by: Mark Rutland <mark.rutland@arm.com>
Link: https://lore.kernel.org/r/20210507185905.1745402-1-pcc@google.com
	Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
(cherry picked from commit 37a8024d265564eba680575df6421f19db21dfce)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/arm64/mm/proc.S
diff --cc arch/arm64/mm/proc.S
index 768b1405972d,97d7bcd8d4f2..000000000000
--- a/arch/arm64/mm/proc.S
+++ b/arch/arm64/mm/proc.S
@@@ -428,32 -409,66 +428,77 @@@ ENTRY(__cpu_setup
  	tlbi	vmalle1				// Invalidate local TLB
  	dsb	nsh
  
 -	mov	x1, #3 << 20
 -	msr	cpacr_el1, x1			// Enable FP/ASIMD
 -	mov	x1, #1 << 12			// Reset mdscr_el1 and disable
 -	msr	mdscr_el1, x1			// access to the DCC from EL0
 +	mov	x0, #3 << 20
 +	msr	cpacr_el1, x0			// Enable FP/ASIMD
 +	mov	x0, #1 << 12			// Reset mdscr_el1 and disable
 +	msr	mdscr_el1, x0			// access to the DCC from EL0
  	isb					// Unmask debug exceptions now,
  	enable_dbg				// since this is per-cpu
 -	reset_pmuserenr_el0 x1			// Disable PMU access from EL0
 -	reset_amuserenr_el0 x1			// Disable AMU access from EL0
 +	reset_pmuserenr_el0 x0			// Disable PMU access from EL0
 +	reset_amuserenr_el0 x0			// Disable AMU access from EL0
  
  	/*
 -	 * Default values for VMSA control registers. These will be adjusted
 -	 * below depending on detected CPU features.
 +	 * Memory region attributes
 +	 */
 +	mov_q	x5, MAIR_EL1_SET
 +	msr	mair_el1, x5
 +	/*
 +	 * Prepare SCTLR
 +	 */
 +	mov_q	x0, SCTLR_EL1_SET
 +	/*
 +	 * Set/prepare TCR and TTBR. We use 512GB (39-bit) address range for
 +	 * both user and kernel.
  	 */
 -	mair	.req	x17
 -	tcr	.req	x16
 -	mov_q	mair, MAIR_EL1_SET
 -	mov_q	tcr, TCR_TxSZ(VA_BITS) | TCR_CACHE_FLAGS | TCR_SMP_FLAGS | \
 +	mov_q	x10, TCR_TxSZ(VA_BITS) | TCR_CACHE_FLAGS | TCR_SMP_FLAGS | \
  			TCR_TG_FLAGS | TCR_KASLR_FLAGS | TCR_ASID16 | \
++<<<<<<< HEAD
 +			TCR_TBI0 | TCR_A1 | TCR_KASAN_FLAGS
 +	tcr_clear_errata_bits x10, x9, x5
++=======
+ 			TCR_TBI0 | TCR_A1 | TCR_KASAN_SW_FLAGS
+ 
+ #ifdef CONFIG_ARM64_MTE
+ 	/*
+ 	 * Update MAIR_EL1, GCR_EL1 and TFSR*_EL1 if MTE is supported
+ 	 * (ID_AA64PFR1_EL1[11:8] > 1).
+ 	 */
+ 	mrs	x10, ID_AA64PFR1_EL1
+ 	ubfx	x10, x10, #ID_AA64PFR1_MTE_SHIFT, #4
+ 	cmp	x10, #ID_AA64PFR1_MTE
+ 	b.lt	1f
+ 
+ 	/* Normal Tagged memory type at the corresponding MAIR index */
+ 	mov	x10, #MAIR_ATTR_NORMAL_TAGGED
+ 	bfi	mair, x10, #(8 *  MT_NORMAL_TAGGED), #8
+ 
+ 	/* initialize GCR_EL1: all non-zero tags excluded by default */
+ 	mov	x10, #(SYS_GCR_EL1_RRND | SYS_GCR_EL1_EXCL_MASK)
+ 	msr_s	SYS_GCR_EL1, x10
+ 
+ 	/*
+ 	 * If GCR_EL1.RRND=1 is implemented the same way as RRND=0, then
+ 	 * RGSR_EL1.SEED must be non-zero for IRG to produce
+ 	 * pseudorandom numbers. As RGSR_EL1 is UNKNOWN out of reset, we
+ 	 * must initialize it.
+ 	 */
+ 	mrs	x10, CNTVCT_EL0
+ 	ands	x10, x10, #SYS_RGSR_EL1_SEED_MASK
+ 	csinc	x10, x10, xzr, ne
+ 	lsl	x10, x10, #SYS_RGSR_EL1_SEED_SHIFT
+ 	msr_s	SYS_RGSR_EL1, x10
+ 
+ 	/* clear any pending tag check faults in TFSR*_EL1 */
+ 	msr_s	SYS_TFSR_EL1, xzr
+ 	msr_s	SYS_TFSRE0_EL1, xzr
+ 
+ 	/* set the TCR_EL1 bits */
+ 	mov_q	x10, TCR_KASAN_HW_FLAGS
+ 	orr	tcr, tcr, x10
+ 1:
+ #endif
+ 	tcr_clear_errata_bits tcr, x9, x5
++>>>>>>> 37a8024d2655 (arm64: mte: initialize RGSR_EL1.SEED in __cpu_setup)
  
  #ifdef CONFIG_ARM64_VA_BITS_52
  	ldr_l		x9, vabits_actual
* Unmerged path arch/arm64/mm/proc.S
