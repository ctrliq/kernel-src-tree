RDMA/rxe: Collect mca init code in a subroutine

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-394.el8
commit-author Bob Pearson <rpearsonhpe@gmail.com>
commit 4a4f1073475796bcb343998bb1eddf6844b77963
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-394.el8/4a4f1073.failed

Collect initialization code for struct rxe_mca into a subroutine,
__rxe_init_mca(), to cleanup rxe_attach_mcg() in rxe_mcast.c. Check
limit on total number of attached qp's.

Link: https://lore.kernel.org/r/20220223230706.50332-3-rpearsonhpe@gmail.com
	Signed-off-by: Bob Pearson <rpearsonhpe@gmail.com>
	Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
(cherry picked from commit 4a4f1073475796bcb343998bb1eddf6844b77963)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/sw/rxe/rxe_mcast.c
#	drivers/infiniband/sw/rxe/rxe_verbs.h
diff --cc drivers/infiniband/sw/rxe/rxe_mcast.c
index 5f1c72c1473c,a0a7f8720f95..000000000000
--- a/drivers/infiniband/sw/rxe/rxe_mcast.c
+++ b/drivers/infiniband/sw/rxe/rxe_mcast.c
@@@ -82,75 -160,221 +82,247 @@@ done
  	return 0;
  }
  
 -/**
 - * rxe_get_mcg - lookup or allocate a mcg
 - * @rxe: rxe device object
 - * @mgid: multicast IP address as a gid
 - *
 - * Returns: mcg on success else ERR_PTR(error)
 - */
 -static struct rxe_mcg *rxe_get_mcg(struct rxe_dev *rxe, union ib_gid *mgid)
 +int rxe_mcast_add_grp_elem(struct rxe_dev *rxe, struct rxe_qp *qp,
 +			   struct rxe_mc_grp *grp)
  {
 -	struct rxe_mcg *mcg, *tmp;
 -	unsigned long flags;
  	int err;
 -
 +	struct rxe_mc_elem *elem;
 +
++<<<<<<< HEAD
 +	/* check to see of the qp is already a member of the group */
 +	spin_lock_bh(&qp->grp_lock);
 +	spin_lock_bh(&grp->mcg_lock);
 +	list_for_each_entry(elem, &grp->qp_list, qp_list) {
 +		if (elem->qp == qp) {
++=======
+ 	if (rxe->attr.max_mcast_grp == 0)
+ 		return ERR_PTR(-EINVAL);
+ 
+ 	/* check to see if mcg already exists */
+ 	mcg = rxe_lookup_mcg(rxe, mgid);
+ 	if (mcg)
+ 		return mcg;
+ 
+ 	/* speculative alloc of new mcg */
+ 	mcg = kzalloc(sizeof(*mcg), GFP_KERNEL);
+ 	if (!mcg)
+ 		return ERR_PTR(-ENOMEM);
+ 
+ 	spin_lock_irqsave(&rxe->mcg_lock, flags);
+ 	/* re-check to see if someone else just added it */
+ 	tmp = __rxe_lookup_mcg(rxe, mgid);
+ 	if (tmp) {
+ 		kfree(mcg);
+ 		mcg = tmp;
+ 		goto out;
+ 	}
+ 
+ 	if (atomic_inc_return(&rxe->mcg_num) > rxe->attr.max_mcast_grp) {
+ 		err = -ENOMEM;
+ 		goto err_dec;
+ 	}
+ 
+ 	err = __rxe_init_mcg(rxe, mgid, mcg);
+ 	if (err)
+ 		goto err_dec;
+ out:
+ 	spin_unlock_irqrestore(&rxe->mcg_lock, flags);
+ 	return mcg;
+ 
+ err_dec:
+ 	atomic_dec(&rxe->mcg_num);
+ 	spin_unlock_irqrestore(&rxe->mcg_lock, flags);
+ 	kfree(mcg);
+ 	return ERR_PTR(err);
+ }
+ 
+ /**
+  * rxe_cleanup_mcg - cleanup mcg for kref_put
+  * @kref:
+  */
+ void rxe_cleanup_mcg(struct kref *kref)
+ {
+ 	struct rxe_mcg *mcg = container_of(kref, typeof(*mcg), ref_cnt);
+ 
+ 	kfree(mcg);
+ }
+ 
+ /**
+  * __rxe_destroy_mcg - destroy mcg object holding rxe->mcg_lock
+  * @mcg: the mcg object
+  *
+  * Context: caller is holding rxe->mcg_lock
+  * no qp's are attached to mcg
+  */
+ static void __rxe_destroy_mcg(struct rxe_mcg *mcg)
+ {
+ 	struct rxe_dev *rxe = mcg->rxe;
+ 
+ 	/* remove mcg from red-black tree then drop ref */
+ 	__rxe_remove_mcg(mcg);
+ 	kref_put(&mcg->ref_cnt, rxe_cleanup_mcg);
+ 
+ 	rxe_mcast_delete(mcg->rxe, &mcg->mgid);
+ 	atomic_dec(&rxe->mcg_num);
+ }
+ 
+ /**
+  * rxe_destroy_mcg - destroy mcg object
+  * @mcg: the mcg object
+  *
+  * Context: no qp's are attached to mcg
+  */
+ static void rxe_destroy_mcg(struct rxe_mcg *mcg)
+ {
+ 	unsigned long flags;
+ 
+ 	spin_lock_irqsave(&mcg->rxe->mcg_lock, flags);
+ 	__rxe_destroy_mcg(mcg);
+ 	spin_unlock_irqrestore(&mcg->rxe->mcg_lock, flags);
+ }
+ 
+ /**
+  * __rxe_init_mca - initialize a new mca holding lock
+  * @qp: qp object
+  * @mcg: mcg object
+  * @mca: empty space for new mca
+  *
+  * Context: caller must hold references on qp and mcg, rxe->mcg_lock
+  * and pass memory for new mca
+  *
+  * Returns: 0 on success else an error
+  */
+ static int __rxe_init_mca(struct rxe_qp *qp, struct rxe_mcg *mcg,
+ 			  struct rxe_mca *mca)
+ {
+ 	struct rxe_dev *rxe = to_rdev(qp->ibqp.device);
+ 	int n;
+ 
+ 	n = atomic_inc_return(&rxe->mcg_attach);
+ 	if (n > rxe->attr.max_total_mcast_qp_attach) {
+ 		atomic_dec(&rxe->mcg_attach);
+ 		return -ENOMEM;
+ 	}
+ 
+ 	n = atomic_inc_return(&mcg->qp_num);
+ 	if (n > rxe->attr.max_mcast_qp_attach) {
+ 		atomic_dec(&mcg->qp_num);
+ 		atomic_dec(&rxe->mcg_attach);
+ 		return -ENOMEM;
+ 	}
+ 
+ 	atomic_inc(&qp->mcg_num);
+ 
+ 	rxe_add_ref(qp);
+ 	mca->qp = qp;
+ 
+ 	list_add_tail(&mca->qp_list, &mcg->qp_list);
+ 
+ 	return 0;
+ }
+ 
+ static int rxe_attach_mcg(struct rxe_dev *rxe, struct rxe_qp *qp,
+ 				  struct rxe_mcg *mcg)
+ {
+ 	struct rxe_mca *mca, *tmp;
+ 	unsigned long flags;
+ 	int err;
+ 
+ 	/* check to see if the qp is already a member of the group */
+ 	spin_lock_irqsave(&rxe->mcg_lock, flags);
+ 	list_for_each_entry(mca, &mcg->qp_list, qp_list) {
+ 		if (mca->qp == qp) {
+ 			spin_unlock_irqrestore(&rxe->mcg_lock, flags);
+ 			return 0;
+ 		}
+ 	}
+ 	spin_unlock_irqrestore(&rxe->mcg_lock, flags);
+ 
+ 	/* speculative alloc new mca without using GFP_ATOMIC */
+ 	mca = kzalloc(sizeof(*mca), GFP_KERNEL);
+ 	if (!mca)
+ 		return -ENOMEM;
+ 
+ 	spin_lock_irqsave(&rxe->mcg_lock, flags);
+ 	/* re-check to see if someone else just attached qp */
+ 	list_for_each_entry(tmp, &mcg->qp_list, qp_list) {
+ 		if (tmp->qp == qp) {
+ 			kfree(mca);
++>>>>>>> 4a4f10734757 (RDMA/rxe: Collect mca init code in a subroutine)
  			err = 0;
  			goto out;
  		}
  	}
  
++<<<<<<< HEAD
 +	if (grp->num_qp >= rxe->attr.max_mcast_qp_attach) {
 +		err = -ENOMEM;
 +		goto out;
 +	}
 +
 +	elem = rxe_alloc_locked(&rxe->mc_elem_pool);
 +	if (!elem) {
 +		err = -ENOMEM;
 +		goto out;
 +	}
 +
 +	/* each qp holds a ref on the grp */
 +	rxe_add_ref(grp);
 +
 +	grp->num_qp++;
 +	elem->qp = qp;
 +	elem->grp = grp;
 +
 +	list_add(&elem->qp_list, &grp->qp_list);
 +	list_add(&elem->grp_list, &qp->grp_list);
 +
 +	err = 0;
++=======
+ 	err = __rxe_init_mca(qp, mcg, mca);
+ 	if (err)
+ 		kfree(mca);
++>>>>>>> 4a4f10734757 (RDMA/rxe: Collect mca init code in a subroutine)
  out:
 -	spin_unlock_irqrestore(&rxe->mcg_lock, flags);
 +	spin_unlock_bh(&grp->mcg_lock);
 +	spin_unlock_bh(&qp->grp_lock);
  	return err;
  }
  
 -static int rxe_detach_mcg(struct rxe_dev *rxe, struct rxe_qp *qp,
 -				   union ib_gid *mgid)
 +int rxe_mcast_drop_grp_elem(struct rxe_dev *rxe, struct rxe_qp *qp,
 +			    union ib_gid *mgid)
  {
 -	struct rxe_mcg *mcg;
 -	struct rxe_mca *mca, *tmp;
 -	unsigned long flags;
 -	int err;
 +	struct rxe_mc_grp *grp;
 +	struct rxe_mc_elem *elem, *tmp;
  
 -	mcg = rxe_lookup_mcg(rxe, mgid);
 -	if (!mcg)
 -		return -EINVAL;
 +	grp = rxe_pool_get_key(&rxe->mc_grp_pool, mgid);
 +	if (!grp)
 +		goto err1;
  
++<<<<<<< HEAD
 +	spin_lock_bh(&qp->grp_lock);
 +	spin_lock_bh(&grp->mcg_lock);
++=======
+ 	spin_lock_irqsave(&rxe->mcg_lock, flags);
+ 	list_for_each_entry_safe(mca, tmp, &mcg->qp_list, qp_list) {
+ 		if (mca->qp == qp) {
+ 			list_del(&mca->qp_list);
+ 			atomic_dec(&qp->mcg_num);
+ 			atomic_dec(&rxe->mcg_attach);
+ 			rxe_drop_ref(qp);
 -
 -			/* if the number of qp's attached to the
 -			 * mcast group falls to zero go ahead and
 -			 * tear it down. This will not free the
 -			 * object since we are still holding a ref
 -			 * from the get key above.
 -			 */
 -			if (atomic_dec_return(&mcg->qp_num) <= 0)
 -				__rxe_destroy_mcg(mcg);
 -
 -			/* drop the ref from get key. This will free the
 -			 * object if qp_num is zero.
 -			 */
 -			kref_put(&mcg->ref_cnt, rxe_cleanup_mcg);
 -			kfree(mca);
 -			err = 0;
 -			goto out_unlock;
++>>>>>>> 4a4f10734757 (RDMA/rxe: Collect mca init code in a subroutine)
 +
 +	list_for_each_entry_safe(elem, tmp, &grp->qp_list, qp_list) {
 +		if (elem->qp == qp) {
 +			list_del(&elem->qp_list);
 +			list_del(&elem->grp_list);
 +			grp->num_qp--;
 +
 +			spin_unlock_bh(&grp->mcg_lock);
 +			spin_unlock_bh(&qp->grp_lock);
 +			rxe_drop_ref(elem);
 +			rxe_drop_ref(grp);	/* ref held by QP */
 +			rxe_drop_ref(grp);	/* ref from get_key */
 +			return 0;
  		}
  	}
  
diff --cc drivers/infiniband/sw/rxe/rxe_verbs.h
index 2fd73c878e17,6b15251ff67a..000000000000
--- a/drivers/infiniband/sw/rxe/rxe_verbs.h
+++ b/drivers/infiniband/sw/rxe/rxe_verbs.h
@@@ -402,7 -396,12 +402,16 @@@ struct rxe_dev 
  	struct rxe_pool		mr_pool;
  	struct rxe_pool		mw_pool;
  	struct rxe_pool		mc_grp_pool;
++<<<<<<< HEAD
 +	struct rxe_pool		mc_elem_pool;
++=======
+ 
+ 	/* multicast support */
+ 	spinlock_t		mcg_lock;
+ 	struct rb_root		mcg_tree;
+ 	atomic_t		mcg_num;
+ 	atomic_t		mcg_attach;
++>>>>>>> 4a4f10734757 (RDMA/rxe: Collect mca init code in a subroutine)
  
  	spinlock_t		pending_lock; /* guard pending_mmaps */
  	struct list_head	pending_mmaps;
* Unmerged path drivers/infiniband/sw/rxe/rxe_mcast.c
* Unmerged path drivers/infiniband/sw/rxe/rxe_verbs.h
