liquidio: Overcome missing device lock protection in init/remove flows

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-394.el8
commit-author Leon Romanovsky <leonro@nvidia.com>
commit 8d44b5cf60602568f951fbff86f1e0e0435d2a57
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-394.el8/8d44b5cf.failed

The liquidio driver is broken by design. It initialize PCI devices
in separate delayed works. It causes to the situation where device lock
is dropped during initialize and remove sequences.

That lock is part of driver/core and needed to protect from races during
init, destroy and bus invocations.

In addition to lack of locking protection, it has incorrect order of
destroy flows and very questionable synchronization scheme based on
atomic_t.

This change doesn't fix that driver but makes sure that rest of the
netdev subsystem doesn't suffer from such basic protection by adding
device_lock over devlink_*() APIs and by moving devlink_register()
to be last command in setup_nic_devices().

	Signed-off-by: Leon Romanovsky <leonro@nvidia.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 8d44b5cf60602568f951fbff86f1e0e0435d2a57)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/cavium/liquidio/lio_main.c
diff --cc drivers/net/ethernet/cavium/liquidio/lio_main.c
index b2a985da79c9,dafc79bd34f4..000000000000
--- a/drivers/net/ethernet/cavium/liquidio/lio_main.c
+++ b/drivers/net/ethernet/cavium/liquidio/lio_main.c
@@@ -3677,27 -3742,32 +3679,34 @@@ static int setup_nic_devices(struct oct
  		}
  		octeon_dev->speed_boot = octeon_dev->speed_setting;
  
 -		/* don't read FEC setting if unsupported by f/w (see above) */
 -		if (octeon_dev->speed_boot == 25 &&
 -		    !octeon_dev->no_speed_setting) {
 -			liquidio_get_fec(lio);
 -			octeon_dev->props[lio->ifidx].fec_boot =
 -				octeon_dev->props[lio->ifidx].fec;
 -		}
  	}
  
+ 	device_lock(&octeon_dev->pci_dev->dev);
  	devlink = devlink_alloc(&liquidio_devlink_ops,
 -				sizeof(struct lio_devlink_priv),
 -				&octeon_dev->pci_dev->dev);
 +				sizeof(struct lio_devlink_priv));
  	if (!devlink) {
+ 		device_unlock(&octeon_dev->pci_dev->dev);
  		dev_err(&octeon_dev->pci_dev->dev, "devlink alloc failed\n");
 -		goto setup_nic_dev_free;
 +		goto setup_nic_wait_intr;
  	}
  
  	lio_devlink = devlink_priv(devlink);
  	lio_devlink->oct = octeon_dev;
  
++<<<<<<< HEAD
 +	if (devlink_register(devlink, &octeon_dev->pci_dev->dev)) {
 +		devlink_free(devlink);
 +		dev_err(&octeon_dev->pci_dev->dev,
 +			"devlink registration failed\n");
 +		goto setup_nic_wait_intr;
 +	}
 +
++=======
++>>>>>>> 8d44b5cf6060 (liquidio: Overcome missing device lock protection in init/remove flows)
  	octeon_dev->devlink = devlink;
  	octeon_dev->eswitch_mode = DEVLINK_ESWITCH_MODE_LEGACY;
+ 	devlink_register(devlink);
+ 	device_unlock(&octeon_dev->pci_dev->dev);
  
  	return 0;
  
* Unmerged path drivers/net/ethernet/cavium/liquidio/lio_main.c
