NFS: Fix up inode attribute revalidation timeouts

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-394.el8
commit-author Trond Myklebust <trond.myklebust@hammerspace.com>
commit 213bb58475b57786e4336bc8bfd5029e16257c49
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-394.el8/213bb584.failed

The inode is considered revalidated when we've checked the value of the
change attribute against our cached value since that suffices to
establish whether or not the other cached values are valid.

	Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
(cherry picked from commit 213bb58475b57786e4336bc8bfd5029e16257c49)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/nfs/inode.c
diff --cc fs/nfs/inode.c
index 5aab6b527a4e,327f9ae4dd3f..000000000000
--- a/fs/nfs/inode.c
+++ b/fs/nfs/inode.c
@@@ -2068,29 -2064,24 +2068,49 @@@ static int nfs_update_inode(struct inod
  			attr_changed = true;
  		}
  	} else {
++<<<<<<< HEAD
 +		nfsi->cache_validity |= save_cache_validity &
 +				(NFS_INO_INVALID_CHANGE
 +				| NFS_INO_REVAL_FORCED);
 +		cache_revalidated = false;
++=======
+ 		nfsi->cache_validity |=
+ 			save_cache_validity & NFS_INO_INVALID_CHANGE;
+ 		if (!have_delegation ||
+ 		    (nfsi->cache_validity & NFS_INO_INVALID_CHANGE) != 0)
+ 			cache_revalidated = false;
++>>>>>>> 213bb58475b5 (NFS: Fix up inode attribute revalidation timeouts)
  	}
  
- 	if (fattr->valid & NFS_ATTR_FATTR_MTIME) {
+ 	if (fattr->valid & NFS_ATTR_FATTR_MTIME)
  		inode->i_mtime = fattr->mtime;
++<<<<<<< HEAD
 +	} else if (server->caps & NFS_CAP_MTIME) {
 +		nfsi->cache_validity |= save_cache_validity &
 +				(NFS_INO_INVALID_MTIME
 +				| NFS_INO_REVAL_FORCED);
 +		cache_revalidated = false;
 +	}
++=======
+ 	else if (fattr_supported & NFS_ATTR_FATTR_MTIME)
+ 		nfsi->cache_validity |=
+ 			save_cache_validity & NFS_INO_INVALID_MTIME;
++>>>>>>> 213bb58475b5 (NFS: Fix up inode attribute revalidation timeouts)
  
- 	if (fattr->valid & NFS_ATTR_FATTR_CTIME) {
+ 	if (fattr->valid & NFS_ATTR_FATTR_CTIME)
  		inode->i_ctime = fattr->ctime;
++<<<<<<< HEAD
 +	} else if (server->caps & NFS_CAP_CTIME) {
 +		nfsi->cache_validity |= save_cache_validity &
 +				(NFS_INO_INVALID_CTIME
 +				| NFS_INO_REVAL_FORCED);
 +		cache_revalidated = false;
 +	}
++=======
+ 	else if (fattr_supported & NFS_ATTR_FATTR_CTIME)
+ 		nfsi->cache_validity |=
+ 			save_cache_validity & NFS_INO_INVALID_CTIME;
++>>>>>>> 213bb58475b5 (NFS: Fix up inode attribute revalidation timeouts)
  
  	/* Check if our cached file size is stale */
  	if (fattr->valid & NFS_ATTR_FATTR_SIZE) {
@@@ -2118,22 -2109,15 +2138,34 @@@
  			fattr->du.nfs3.used = 0;
  			fattr->valid |= NFS_ATTR_FATTR_SPACE_USED;
  		}
++<<<<<<< HEAD
 +	} else {
 +		nfsi->cache_validity |= save_cache_validity &
 +				(NFS_INO_INVALID_SIZE
 +				| NFS_INO_REVAL_FORCED);
 +		cache_revalidated = false;
 +	}
++=======
+ 	} else
+ 		nfsi->cache_validity |=
+ 			save_cache_validity & NFS_INO_INVALID_SIZE;
++>>>>>>> 213bb58475b5 (NFS: Fix up inode attribute revalidation timeouts)
 +
  
  	if (fattr->valid & NFS_ATTR_FATTR_ATIME)
  		inode->i_atime = fattr->atime;
++<<<<<<< HEAD
 +	else if (server->caps & NFS_CAP_ATIME) {
 +		nfsi->cache_validity |= save_cache_validity &
 +				(NFS_INO_INVALID_ATIME
 +				| NFS_INO_REVAL_FORCED);
 +		cache_revalidated = false;
 +	}
++=======
+ 	else if (fattr_supported & NFS_ATTR_FATTR_ATIME)
+ 		nfsi->cache_validity |=
+ 			save_cache_validity & NFS_INO_INVALID_ATIME;
++>>>>>>> 213bb58475b5 (NFS: Fix up inode attribute revalidation timeouts)
  
  	if (fattr->valid & NFS_ATTR_FATTR_MODE) {
  		if ((inode->i_mode & S_IALLUGO) != (fattr->mode & S_IALLUGO)) {
@@@ -2144,12 -2128,9 +2176,18 @@@
  				| NFS_INO_INVALID_ACL;
  			attr_changed = true;
  		}
++<<<<<<< HEAD
 +	} else if (server->caps & NFS_CAP_MODE) {
 +		nfsi->cache_validity |= save_cache_validity &
 +				(NFS_INO_INVALID_OTHER
 +				| NFS_INO_REVAL_FORCED);
 +		cache_revalidated = false;
 +	}
++=======
+ 	} else if (fattr_supported & NFS_ATTR_FATTR_MODE)
+ 		nfsi->cache_validity |=
+ 			save_cache_validity & NFS_INO_INVALID_MODE;
++>>>>>>> 213bb58475b5 (NFS: Fix up inode attribute revalidation timeouts)
  
  	if (fattr->valid & NFS_ATTR_FATTR_OWNER) {
  		if (!uid_eq(inode->i_uid, fattr->uid)) {
@@@ -2158,12 -2139,9 +2196,18 @@@
  			inode->i_uid = fattr->uid;
  			attr_changed = true;
  		}
++<<<<<<< HEAD
 +	} else if (server->caps & NFS_CAP_OWNER) {
 +		nfsi->cache_validity |= save_cache_validity &
 +				(NFS_INO_INVALID_OTHER
 +				| NFS_INO_REVAL_FORCED);
 +		cache_revalidated = false;
 +	}
++=======
+ 	} else if (fattr_supported & NFS_ATTR_FATTR_OWNER)
+ 		nfsi->cache_validity |=
+ 			save_cache_validity & NFS_INO_INVALID_OTHER;
++>>>>>>> 213bb58475b5 (NFS: Fix up inode attribute revalidation timeouts)
  
  	if (fattr->valid & NFS_ATTR_FATTR_GROUP) {
  		if (!gid_eq(inode->i_gid, fattr->gid)) {
@@@ -2172,12 -2150,9 +2216,18 @@@
  			inode->i_gid = fattr->gid;
  			attr_changed = true;
  		}
++<<<<<<< HEAD
 +	} else if (server->caps & NFS_CAP_OWNER_GROUP) {
 +		nfsi->cache_validity |= save_cache_validity &
 +				(NFS_INO_INVALID_OTHER
 +				| NFS_INO_REVAL_FORCED);
 +		cache_revalidated = false;
 +	}
++=======
+ 	} else if (fattr_supported & NFS_ATTR_FATTR_GROUP)
+ 		nfsi->cache_validity |=
+ 			save_cache_validity & NFS_INO_INVALID_OTHER;
++>>>>>>> 213bb58475b5 (NFS: Fix up inode attribute revalidation timeouts)
  
  	if (fattr->valid & NFS_ATTR_FATTR_NLINK) {
  		if (inode->i_nlink != fattr->nlink) {
@@@ -2186,26 -2161,24 +2236,44 @@@
  			set_nlink(inode, fattr->nlink);
  			attr_changed = true;
  		}
++<<<<<<< HEAD
 +	} else if (server->caps & NFS_CAP_NLINK) {
 +		nfsi->cache_validity |= save_cache_validity &
 +				(NFS_INO_INVALID_OTHER
 +				| NFS_INO_REVAL_FORCED);
 +		cache_revalidated = false;
 +	}
++=======
+ 	} else if (fattr_supported & NFS_ATTR_FATTR_NLINK)
+ 		nfsi->cache_validity |=
+ 			save_cache_validity & NFS_INO_INVALID_NLINK;
++>>>>>>> 213bb58475b5 (NFS: Fix up inode attribute revalidation timeouts)
  
  	if (fattr->valid & NFS_ATTR_FATTR_SPACE_USED) {
  		/*
  		 * report the blocks in 512byte units
  		 */
  		inode->i_blocks = nfs_calc_block_size(fattr->du.nfs3.used);
++<<<<<<< HEAD
 +	} else if (fattr->valid & NFS_ATTR_FATTR_BLOCKS_USED)
 +		inode->i_blocks = fattr->du.nfs2.blocks;
 +	else {
 +		nfsi->cache_validity |= save_cache_validity &
 +				(NFS_INO_INVALID_BLOCKS
 +				| NFS_INO_REVAL_FORCED);
 +		cache_revalidated = false;
 +	}
++=======
+ 	} else if (fattr_supported & NFS_ATTR_FATTR_SPACE_USED)
+ 		nfsi->cache_validity |=
+ 			save_cache_validity & NFS_INO_INVALID_BLOCKS;
+ 
+ 	if (fattr->valid & NFS_ATTR_FATTR_BLOCKS_USED)
+ 		inode->i_blocks = fattr->du.nfs2.blocks;
+ 	else if (fattr_supported & NFS_ATTR_FATTR_BLOCKS_USED)
+ 		nfsi->cache_validity |=
+ 			save_cache_validity & NFS_INO_INVALID_BLOCKS;
++>>>>>>> 213bb58475b5 (NFS: Fix up inode attribute revalidation timeouts)
  
  	/* Update attrtimeo value if we're out of the unstable period */
  	if (attr_changed) {
* Unmerged path fs/nfs/inode.c
