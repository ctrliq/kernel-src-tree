scsi: iscsi: Release endpoint ID when its freed

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-394.el8
commit-author Mike Christie <michael.christie@oracle.com>
commit 3c6ae371b8a1ffba1fc415989fd581ebf841ed0a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-394.el8/3c6ae371.failed

We can't release the endpoint ID until all references to the endpoint have
been dropped or it could be allocated while in use. This has us use an idr
instead of looping over all conns to find a free ID and then free the ID
when all references have been dropped instead of when the device is only
deleted.

Link: https://lore.kernel.org/r/20220408001314.5014-4-michael.christie@oracle.com
	Tested-by: Manish Rangankar <mrangankar@marvell.com>
	Reviewed-by: Lee Duncan <lduncan@suse.com>
	Reviewed-by: Chris Leech <cleech@redhat.com>
	Reviewed-by: Wu Bo <wubo40@huawei.com>
	Signed-off-by: Mike Christie <michael.christie@oracle.com>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit 3c6ae371b8a1ffba1fc415989fd581ebf841ed0a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/scsi_transport_iscsi.c
diff --cc drivers/scsi/scsi_transport_iscsi.c
index 46e03f51496a,1fc7c6bfbd67..000000000000
--- a/drivers/scsi/scsi_transport_iscsi.c
+++ b/drivers/scsi/scsi_transport_iscsi.c
@@@ -86,8 -86,10 +86,11 @@@ struct iscsi_internal 
  	struct transport_container session_cont;
  };
  
+ static DEFINE_IDR(iscsi_ep_idr);
+ static DEFINE_MUTEX(iscsi_ep_idr_mutex);
+ 
  static atomic_t iscsi_session_nr; /* sysfs session id for next new session */
 +static struct workqueue_struct *iscsi_eh_timer_workq;
  
  static struct workqueue_struct *iscsi_conn_cleanup_workq;
  
@@@ -181,7 -188,7 +189,11 @@@ static ssize_
  show_ep_handle(struct device *dev, struct device_attribute *attr, char *buf)
  {
  	struct iscsi_endpoint *ep = iscsi_dev_to_endpoint(dev);
++<<<<<<< HEAD
 +	return scnprintf(buf, PAGE_SIZE, "%llu\n", (unsigned long long) ep->id);
++=======
+ 	return sysfs_emit(buf, "%d\n", ep->id);
++>>>>>>> 3c6ae371b8a1 (scsi: iscsi: Release endpoint ID when its freed)
  }
  static ISCSI_ATTR(ep, handle, S_IRUGO, show_ep_handle, NULL);
  
* Unmerged path drivers/scsi/scsi_transport_iscsi.c
diff --git a/include/scsi/scsi_transport_iscsi.h b/include/scsi/scsi_transport_iscsi.h
index 13fc10453dc3..c5b14937a7bc 100644
--- a/include/scsi/scsi_transport_iscsi.h
+++ b/include/scsi/scsi_transport_iscsi.h
@@ -294,7 +294,7 @@ extern void iscsi_host_for_each_session(struct Scsi_Host *shost,
 struct iscsi_endpoint {
 	void *dd_data;			/* LLD private data */
 	struct device dev;
-	uint64_t id;
+	int id;
 	struct iscsi_cls_conn *conn;
 };
 
