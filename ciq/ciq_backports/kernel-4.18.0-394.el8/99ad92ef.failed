devlink: Delete obsolete parameters publish API

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-394.el8
commit-author Leon Romanovsky <leonro@nvidia.com>
commit 99ad92eff76491331a90d839dd6b7225cf8dd53e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-394.el8/99ad92ef.failed

The change of devlink_register() to be last devlink command together
with delayed notification logic made the publish API to be obsolete.

	Signed-off-by: Leon Romanovsky <leonro@nvidia.com>
	Signed-off-by: Jakub Kicinski <kuba@kernel.org>
(cherry picked from commit 99ad92eff76491331a90d839dd6b7225cf8dd53e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/core/devlink.c
diff --cc net/core/devlink.c
index 3e56c892bf42,e9802421ed50..000000000000
--- a/net/core/devlink.c
+++ b/net/core/devlink.c
@@@ -8946,6 -9058,90 +8944,93 @@@ struct devlink *devlink_alloc_ns(const 
  }
  EXPORT_SYMBOL_GPL(devlink_alloc_ns);
  
++<<<<<<< HEAD
++=======
+ static void
+ devlink_trap_policer_notify(struct devlink *devlink,
+ 			    const struct devlink_trap_policer_item *policer_item,
+ 			    enum devlink_command cmd);
+ static void
+ devlink_trap_group_notify(struct devlink *devlink,
+ 			  const struct devlink_trap_group_item *group_item,
+ 			  enum devlink_command cmd);
+ static void devlink_trap_notify(struct devlink *devlink,
+ 				const struct devlink_trap_item *trap_item,
+ 				enum devlink_command cmd);
+ 
+ static void devlink_notify_register(struct devlink *devlink)
+ {
+ 	struct devlink_trap_policer_item *policer_item;
+ 	struct devlink_trap_group_item *group_item;
+ 	struct devlink_param_item *param_item;
+ 	struct devlink_trap_item *trap_item;
+ 	struct devlink_port *devlink_port;
+ 	struct devlink_rate *rate_node;
+ 	struct devlink_region *region;
+ 
+ 	devlink_notify(devlink, DEVLINK_CMD_NEW);
+ 	list_for_each_entry(devlink_port, &devlink->port_list, list)
+ 		devlink_port_notify(devlink_port, DEVLINK_CMD_PORT_NEW);
+ 
+ 	list_for_each_entry(policer_item, &devlink->trap_policer_list, list)
+ 		devlink_trap_policer_notify(devlink, policer_item,
+ 					    DEVLINK_CMD_TRAP_POLICER_NEW);
+ 
+ 	list_for_each_entry(group_item, &devlink->trap_group_list, list)
+ 		devlink_trap_group_notify(devlink, group_item,
+ 					  DEVLINK_CMD_TRAP_GROUP_NEW);
+ 
+ 	list_for_each_entry(trap_item, &devlink->trap_list, list)
+ 		devlink_trap_notify(devlink, trap_item, DEVLINK_CMD_TRAP_NEW);
+ 
+ 	list_for_each_entry(rate_node, &devlink->rate_list, list)
+ 		devlink_rate_notify(rate_node, DEVLINK_CMD_RATE_NEW);
+ 
+ 	list_for_each_entry(region, &devlink->region_list, list)
+ 		devlink_nl_region_notify(region, NULL, DEVLINK_CMD_REGION_NEW);
+ 
+ 	list_for_each_entry(param_item, &devlink->param_list, list)
+ 		devlink_param_notify(devlink, 0, param_item,
+ 				     DEVLINK_CMD_PARAM_NEW);
+ }
+ 
+ static void devlink_notify_unregister(struct devlink *devlink)
+ {
+ 	struct devlink_trap_policer_item *policer_item;
+ 	struct devlink_trap_group_item *group_item;
+ 	struct devlink_param_item *param_item;
+ 	struct devlink_trap_item *trap_item;
+ 	struct devlink_port *devlink_port;
+ 	struct devlink_rate *rate_node;
+ 	struct devlink_region *region;
+ 
+ 	list_for_each_entry_reverse(param_item, &devlink->param_list, list)
+ 		devlink_param_notify(devlink, 0, param_item,
+ 				     DEVLINK_CMD_PARAM_DEL);
+ 
+ 	list_for_each_entry_reverse(region, &devlink->region_list, list)
+ 		devlink_nl_region_notify(region, NULL, DEVLINK_CMD_REGION_DEL);
+ 
+ 	list_for_each_entry_reverse(rate_node, &devlink->rate_list, list)
+ 		devlink_rate_notify(rate_node, DEVLINK_CMD_RATE_DEL);
+ 
+ 	list_for_each_entry_reverse(trap_item, &devlink->trap_list, list)
+ 		devlink_trap_notify(devlink, trap_item, DEVLINK_CMD_TRAP_DEL);
+ 
+ 	list_for_each_entry_reverse(group_item, &devlink->trap_group_list, list)
+ 		devlink_trap_group_notify(devlink, group_item,
+ 					  DEVLINK_CMD_TRAP_GROUP_DEL);
+ 	list_for_each_entry_reverse(policer_item, &devlink->trap_policer_list,
+ 				    list)
+ 		devlink_trap_policer_notify(devlink, policer_item,
+ 					    DEVLINK_CMD_TRAP_POLICER_DEL);
+ 
+ 	list_for_each_entry_reverse(devlink_port, &devlink->port_list, list)
+ 		devlink_port_notify(devlink_port, DEVLINK_CMD_PORT_DEL);
+ 	devlink_notify(devlink, DEVLINK_CMD_DEL);
+ }
+ 
++>>>>>>> 99ad92eff764 (devlink: Delete obsolete parameters publish API)
  /**
   *	devlink_register - Register devlink instance
   *
@@@ -10070,48 -10234,6 +10155,51 @@@ void devlink_param_unregister(struct de
  EXPORT_SYMBOL_GPL(devlink_param_unregister);
  
  /**
++<<<<<<< HEAD
 + *	devlink_params_publish - publish configuration parameters
 + *
 + *	@devlink: devlink
 + *
 + *	Publish previously registered configuration parameters.
 + */
 +void devlink_params_publish(struct devlink *devlink)
 +{
 +	struct devlink_param_item *param_item;
 +
 +	list_for_each_entry(param_item, &devlink->param_list, list) {
 +		if (param_item->published)
 +			continue;
 +		param_item->published = true;
 +		devlink_param_notify(devlink, 0, param_item,
 +				     DEVLINK_CMD_PARAM_NEW);
 +	}
 +}
 +EXPORT_SYMBOL_GPL(devlink_params_publish);
 +
 +/**
 + *	devlink_params_unpublish - unpublish configuration parameters
 + *
 + *	@devlink: devlink
 + *
 + *	Unpublish previously registered configuration parameters.
 + */
 +void devlink_params_unpublish(struct devlink *devlink)
 +{
 +	struct devlink_param_item *param_item;
 +
 +	list_for_each_entry(param_item, &devlink->param_list, list) {
 +		if (!param_item->published)
 +			continue;
 +		param_item->published = false;
 +		devlink_param_notify(devlink, 0, param_item,
 +				     DEVLINK_CMD_PARAM_DEL);
 +	}
 +}
 +EXPORT_SYMBOL_GPL(devlink_params_unpublish);
 +
 +/**
++=======
++>>>>>>> 99ad92eff764 (devlink: Delete obsolete parameters publish API)
   *	devlink_param_driverinit_value_get - get configuration parameter
   *					     value for driver initializing
   *
diff --git a/include/net/devlink.h b/include/net/devlink.h
index f60a6c23bf25..786b5e161463 100644
--- a/include/net/devlink.h
+++ b/include/net/devlink.h
@@ -510,7 +510,6 @@ struct devlink_param_item {
 	const struct devlink_param *param;
 	union devlink_param_value driverinit_value;
 	bool driverinit_value_valid;
-	bool published;
 };
 
 enum devlink_param_generic_id {
@@ -1640,8 +1639,6 @@ int devlink_param_register(struct devlink *devlink,
 			   const struct devlink_param *param);
 void devlink_param_unregister(struct devlink *devlink,
 			      const struct devlink_param *param);
-void devlink_params_publish(struct devlink *devlink);
-void devlink_params_unpublish(struct devlink *devlink);
 int devlink_param_driverinit_value_get(struct devlink *devlink, u32 param_id,
 				       union devlink_param_value *init_val);
 int devlink_param_driverinit_value_set(struct devlink *devlink, u32 param_id,
* Unmerged path net/core/devlink.c
