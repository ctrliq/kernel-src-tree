RDMA/rxe: Add kernel-doc comments to rxe_icrc.c

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-394.el8
commit-author Bob Pearson <rpearsonhpe@gmail.com>
commit e4f5c82fefa9bce9a5e010901c2d16f2654b1f18
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-394.el8/e4f5c82f.failed

This patch adds kernel-doc style comments to rxe_icrc.c

Link: https://lore.kernel.org/r/20210707040040.15434-9-rpearsonhpe@gmail.com
	Signed-off-by: Bob Pearson <rpearsonhpe@gmail.com>
	Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
(cherry picked from commit e4f5c82fefa9bce9a5e010901c2d16f2654b1f18)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/sw/rxe/rxe_icrc.c
diff --cc drivers/infiniband/sw/rxe/rxe_icrc.c
index 2edcc7327109,4473d38c171f..000000000000
--- a/drivers/infiniband/sw/rxe/rxe_icrc.c
+++ b/drivers/infiniband/sw/rxe/rxe_icrc.c
@@@ -7,7 -7,68 +7,70 @@@
  #include "rxe.h"
  #include "rxe_loc.h"
  
++<<<<<<< HEAD
 +/* Compute a partial ICRC for all the IB transport headers. */
++=======
+ /**
+  * rxe_icrc_init() - Initialize crypto function for computing crc32
+  * @rxe: rdma_rxe device object
+  *
+  * Return: 0 on success else an error
+  */
+ int rxe_icrc_init(struct rxe_dev *rxe)
+ {
+ 	struct crypto_shash *tfm;
+ 
+ 	tfm = crypto_alloc_shash("crc32", 0, 0);
+ 	if (IS_ERR(tfm)) {
+ 		pr_warn("failed to init crc32 algorithm err:%ld\n",
+ 			       PTR_ERR(tfm));
+ 		return PTR_ERR(tfm);
+ 	}
+ 
+ 	rxe->tfm = tfm;
+ 
+ 	return 0;
+ }
+ 
+ /**
+  * rxe_crc32() - Compute cumulative crc32 for a contiguous segment
+  * @rxe: rdma_rxe device object
+  * @crc: starting crc32 value from previous segments
+  * @next: starting address of current segment
+  * @len: length of current segment
+  *
+  * Return: the cumulative crc32 checksum
+  */
+ static u32 rxe_crc32(struct rxe_dev *rxe, u32 crc, void *next, size_t len)
+ {
+ 	u32 icrc;
+ 	int err;
+ 
+ 	SHASH_DESC_ON_STACK(shash, rxe->tfm);
+ 
+ 	shash->tfm = rxe->tfm;
+ 	*(u32 *)shash_desc_ctx(shash) = crc;
+ 	err = crypto_shash_update(shash, next, len);
+ 	if (unlikely(err)) {
+ 		pr_warn_ratelimited("failed crc calculation, err: %d\n", err);
+ 		return crc32_le(crc, next, len);
+ 	}
+ 
+ 	icrc = *(u32 *)shash_desc_ctx(shash);
+ 	barrier_data(shash_desc_ctx(shash));
+ 
+ 	return icrc;
+ }
+ 
+ /**
+  * rxe_icrc_hdr() - Compute the partial ICRC for the network and transport
+  *		  headers of a packet.
+  * @skb: packet buffer
+  * @pkt: packet information
+  *
+  * Return: the partial ICRC
+  */
++>>>>>>> e4f5c82fefa9 (RDMA/rxe: Add kernel-doc comments to rxe_icrc.c)
  static u32 rxe_icrc_hdr(struct sk_buff *skb, struct rxe_pkt_info *pkt)
  {
  	unsigned int bth_offset = 0;
* Unmerged path drivers/infiniband/sw/rxe/rxe_icrc.c
