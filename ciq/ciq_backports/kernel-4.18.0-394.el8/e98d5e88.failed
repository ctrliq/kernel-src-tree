xfs: move the di_crtime field to struct xfs_inode

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-394.el8
commit-author Christoph Hellwig <hch@lst.de>
commit e98d5e882b3ccb0f7f38d4e893fe60c1dd7934db
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-394.el8/e98d5e88.failed

Move the crtime field from struct xfs_icdinode into stuct xfs_inode and
remove the now entirely unused struct xfs_icdinode.

	Signed-off-by: Christoph Hellwig <hch@lst.de>
	Reviewed-by: Darrick J. Wong <djwong@kernel.org>
	Signed-off-by: Darrick J. Wong <djwong@kernel.org>
(cherry picked from commit e98d5e882b3ccb0f7f38d4e893fe60c1dd7934db)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/xfs/libxfs/xfs_inode_buf.c
#	fs/xfs/libxfs/xfs_inode_buf.h
#	fs/xfs/xfs_inode.c
#	fs/xfs/xfs_inode.h
#	fs/xfs/xfs_inode_item.c
#	fs/xfs/xfs_itable.c
diff --cc fs/xfs/libxfs/xfs_inode_buf.c
index 671aeb012e3f,5c9a7440d9e4..000000000000
--- a/fs/xfs/libxfs/xfs_inode_buf.c
+++ b/fs/xfs/libxfs/xfs_inode_buf.c
@@@ -238,9 -238,9 +237,15 @@@ xfs_inode_from_disk
  	if (xfs_sb_version_has_v3inode(&ip->i_mount->m_sb)) {
  		inode_set_iversion_queried(inode,
  					   be64_to_cpu(from->di_changecount));
++<<<<<<< HEAD
 +		to->di_crtime = xfs_inode_from_disk_ts(from, from->di_crtime);
 +		to->di_flags2 = be64_to_cpu(from->di_flags2);
 +		to->di_cowextsize = be32_to_cpu(from->di_cowextsize);
++=======
+ 		ip->i_crtime = xfs_inode_from_disk_ts(from, from->di_crtime);
+ 		ip->i_diflags2 = be64_to_cpu(from->di_flags2);
+ 		ip->i_cowextsize = be32_to_cpu(from->di_cowextsize);
++>>>>>>> e98d5e882b3c (xfs: move the di_crtime field to struct xfs_inode)
  	}
  
  	error = xfs_iformat_data_fork(ip, from);
@@@ -317,9 -316,9 +321,15 @@@ xfs_inode_to_disk
  	if (xfs_sb_version_has_v3inode(&ip->i_mount->m_sb)) {
  		to->di_version = 3;
  		to->di_changecount = cpu_to_be64(inode_peek_iversion(inode));
++<<<<<<< HEAD
 +		to->di_crtime = xfs_inode_to_disk_ts(ip, from->di_crtime);
 +		to->di_flags2 = cpu_to_be64(from->di_flags2);
 +		to->di_cowextsize = cpu_to_be32(from->di_cowextsize);
++=======
+ 		to->di_crtime = xfs_inode_to_disk_ts(ip, ip->i_crtime);
+ 		to->di_flags2 = cpu_to_be64(ip->i_diflags2);
+ 		to->di_cowextsize = cpu_to_be32(ip->i_cowextsize);
++>>>>>>> e98d5e882b3c (xfs: move the di_crtime field to struct xfs_inode)
  		to->di_ino = cpu_to_be64(ip->i_ino);
  		to->di_lsn = cpu_to_be64(lsn);
  		memset(to->di_pad2, 0, sizeof(to->di_pad2));
diff --cc fs/xfs/libxfs/xfs_inode_buf.h
index 406f66799288,7f865bb4df84..000000000000
--- a/fs/xfs/libxfs/xfs_inode_buf.h
+++ b/fs/xfs/libxfs/xfs_inode_buf.h
@@@ -10,26 -10,6 +10,29 @@@ struct xfs_inode
  struct xfs_dinode;
  
  /*
++<<<<<<< HEAD
 + * In memory representation of the XFS inode. This is held in the in-core struct
 + * xfs_inode and represents the current on disk values but the structure is not
 + * in on-disk format.  That is, this structure is always translated to on-disk
 + * format specific structures at the appropriate time.
 + */
 +struct xfs_icdinode {
 +	uint16_t	di_flushiter;	/* incremented on flush */
 +	xfs_fsize_t	di_size;	/* number of bytes in file */
 +	xfs_rfsblock_t	di_nblocks;	/* # of direct & btree blocks used */
 +	xfs_extlen_t	di_extsize;	/* basic/minimum extent size for file */
 +	uint8_t		di_forkoff;	/* attr fork offs, <<3 for 64b align */
 +	uint16_t	di_flags;	/* random flags, XFS_DIFLAG_... */
 +
 +	uint64_t	di_flags2;	/* more random flags */
 +	uint32_t	di_cowextsize;	/* basic cow extent size for file */
 +
 +	struct timespec64 di_crtime;	/* time created */
 +};
 +
 +/*
++=======
++>>>>>>> e98d5e882b3c (xfs: move the di_crtime field to struct xfs_inode)
   * Inode location information.  Stored in the inode and passed to
   * xfs_imap_to_bp() to get a buffer and dinode for a given inode.
   */
diff --cc fs/xfs/xfs_inode.c
index d856a2225b9c,3006cfbd0726..000000000000
--- a/fs/xfs/xfs_inode.c
+++ b/fs/xfs/xfs_inode.c
@@@ -841,8 -842,8 +841,13 @@@ xfs_init_new_inode
  
  	if (xfs_sb_version_has_v3inode(&mp->m_sb)) {
  		inode_set_iversion(inode, 1);
++<<<<<<< HEAD
 +		ip->i_d.di_cowextsize = 0;
 +		ip->i_d.di_crtime = tv;
++=======
+ 		ip->i_cowextsize = 0;
+ 		ip->i_crtime = tv;
++>>>>>>> e98d5e882b3c (xfs: move the di_crtime field to struct xfs_inode)
  	}
  
  	flags = XFS_ILOG_CORE;
diff --cc fs/xfs/xfs_inode.h
index ab59fceed361,ca826cfba91c..000000000000
--- a/fs/xfs/xfs_inode.h
+++ b/fs/xfs/xfs_inode.h
@@@ -54,9 -54,19 +54,22 @@@ typedef struct xfs_inode 
  	/* Miscellaneous state. */
  	unsigned long		i_flags;	/* see defined flags below */
  	uint64_t		i_delayed_blks;	/* count of delay alloc blks */
 -	xfs_fsize_t		i_disk_size;	/* number of bytes in file */
 -	xfs_rfsblock_t		i_nblocks;	/* # of direct & btree blocks */
  	prid_t			i_projid;	/* owner's project id */
++<<<<<<< HEAD
 +
 +	struct xfs_icdinode	i_d;		/* most of ondisk inode */
++=======
+ 	xfs_extlen_t		i_extsize;	/* basic/minimum extent size */
+ 	/* cowextsize is only used for v3 inodes, flushiter for v1/2 */
+ 	union {
+ 		xfs_extlen_t	i_cowextsize;	/* basic cow extent size */
+ 		uint16_t	i_flushiter;	/* incremented on flush */
+ 	};
+ 	uint8_t			i_forkoff;	/* attr fork offset >> 3 */
+ 	uint16_t		i_diflags;	/* XFS_DIFLAG_... */
+ 	uint64_t		i_diflags2;	/* XFS_DIFLAG2_... */
+ 	struct timespec64	i_crtime;	/* time created */
++>>>>>>> e98d5e882b3c (xfs: move the di_crtime field to struct xfs_inode)
  
  	/* VFS inode */
  	struct inode		i_vnode;	/* embedded VFS inode */
diff --cc fs/xfs/xfs_inode_item.c
index 342023fbc07e,c1b32680f71c..000000000000
--- a/fs/xfs/xfs_inode_item.c
+++ b/fs/xfs/xfs_inode_item.c
@@@ -400,9 -385,9 +399,15 @@@ xfs_inode_to_log_dinode
  	if (xfs_sb_version_has_v3inode(&ip->i_mount->m_sb)) {
  		to->di_version = 3;
  		to->di_changecount = inode_peek_iversion(inode);
++<<<<<<< HEAD
 +		to->di_crtime = xfs_inode_to_log_dinode_ts(ip, from->di_crtime);
 +		to->di_flags2 = from->di_flags2;
 +		to->di_cowextsize = from->di_cowextsize;
++=======
+ 		to->di_crtime = xfs_inode_to_log_dinode_ts(ip, ip->i_crtime);
+ 		to->di_flags2 = ip->i_diflags2;
+ 		to->di_cowextsize = ip->i_cowextsize;
++>>>>>>> e98d5e882b3c (xfs: move the di_crtime field to struct xfs_inode)
  		to->di_ino = ip->i_ino;
  		to->di_lsn = lsn;
  		memset(to->di_pad2, 0, sizeof(to->di_pad2));
diff --cc fs/xfs/xfs_itable.c
index 434d70c7cd93,f331975a16de..000000000000
--- a/fs/xfs/xfs_itable.c
+++ b/fs/xfs/xfs_itable.c
@@@ -58,7 -59,7 +58,11 @@@ xfs_bulkstat_one_int
  	xfs_ino_t		ino,
  	struct xfs_bstat_chunk	*bc)
  {
++<<<<<<< HEAD
 +	struct xfs_icdinode	*dic;		/* dinode core info pointer */
++=======
+ 	struct user_namespace	*sb_userns = mp->m_super->s_user_ns;
++>>>>>>> e98d5e882b3c (xfs: move the di_crtime field to struct xfs_inode)
  	struct xfs_inode	*ip;		/* incore inode pointer */
  	struct inode		*inode;
  	struct xfs_bulkstat	*buf = bc->buf;
@@@ -109,10 -108,10 +111,17 @@@
  	buf->bs_version = XFS_BULKSTAT_VERSION_V5;
  
  	if (xfs_sb_version_has_v3inode(&mp->m_sb)) {
++<<<<<<< HEAD
 +		buf->bs_btime = dic->di_crtime.tv_sec;
 +		buf->bs_btime_nsec = dic->di_crtime.tv_nsec;
 +		if (dic->di_flags2 & XFS_DIFLAG2_COWEXTSIZE)
 +			buf->bs_cowextsize_blks = dic->di_cowextsize;
++=======
+ 		buf->bs_btime = ip->i_crtime.tv_sec;
+ 		buf->bs_btime_nsec = ip->i_crtime.tv_nsec;
+ 		if (ip->i_diflags2 & XFS_DIFLAG2_COWEXTSIZE)
+ 			buf->bs_cowextsize_blks = ip->i_cowextsize;
++>>>>>>> e98d5e882b3c (xfs: move the di_crtime field to struct xfs_inode)
  	}
  
  	switch (ip->i_df.if_format) {
diff --git a/fs/xfs/libxfs/xfs_format.h b/fs/xfs/libxfs/xfs_format.h
index 40b6fa3b4e01..fb8227b632e3 100644
--- a/fs/xfs/libxfs/xfs_format.h
+++ b/fs/xfs/libxfs/xfs_format.h
@@ -947,9 +947,8 @@ static inline time64_t xfs_bigtime_to_unix(uint64_t ondisk_seconds)
  * attribute use the XFS_DFORK_DPTR, XFS_DFORK_APTR, and XFS_DFORK_PTR macros
  * below.
  *
- * There is a very similar struct icdinode in xfs_inode which matches the
- * layout of the first 96 bytes of this structure, but is kept in native
- * format instead of big endian.
+ * There is a very similar struct xfs_log_dinode which matches the layout of
+ * this structure, but is kept in native format instead of big endian.
  *
  * Note: di_flushiter is only used by v1/2 inodes - it's effectively a zeroed
  * padding field for v3 inodes.
* Unmerged path fs/xfs/libxfs/xfs_inode_buf.c
* Unmerged path fs/xfs/libxfs/xfs_inode_buf.h
diff --git a/fs/xfs/libxfs/xfs_trans_inode.c b/fs/xfs/libxfs/xfs_trans_inode.c
index 4f02cb439ab5..71bef8900f63 100644
--- a/fs/xfs/libxfs/xfs_trans_inode.c
+++ b/fs/xfs/libxfs/xfs_trans_inode.c
@@ -70,7 +70,7 @@ xfs_trans_ichgtime(
 	if (flags & XFS_ICHGTIME_CHG)
 		inode->i_ctime = tv;
 	if (flags & XFS_ICHGTIME_CREATE)
-		ip->i_d.di_crtime = tv;
+		ip->i_crtime = tv;
 }
 
 /*
* Unmerged path fs/xfs/xfs_inode.c
* Unmerged path fs/xfs/xfs_inode.h
* Unmerged path fs/xfs/xfs_inode_item.c
diff --git a/fs/xfs/xfs_iops.c b/fs/xfs/xfs_iops.c
index 1a5880c79e28..eeae7f07f6bb 100644
--- a/fs/xfs/xfs_iops.c
+++ b/fs/xfs/xfs_iops.c
@@ -537,7 +537,7 @@ xfs_vn_getattr(
 	if (xfs_sb_version_has_v3inode(&mp->m_sb)) {
 		if (request_mask & STATX_BTIME) {
 			stat->result_mask |= STATX_BTIME;
-			stat->btime = ip->i_d.di_crtime;
+			stat->btime = ip->i_crtime;
 		}
 	}
 
* Unmerged path fs/xfs/xfs_itable.c
