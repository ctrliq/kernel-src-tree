arm64: ptrace: Fix seccomp of traced syscall -1 (NO_SYSCALL)

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-394.el8
commit-author Timothy E Baldwin <T.E.Baldwin99@members.leeds.ac.uk>
commit df84fe94708985cdfb78a83148322bcd0a699472
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-394.el8/df84fe94.failed

Since commit f086f67485c5 ("arm64: ptrace: add support for syscall
emulation"), if system call number -1 is called and the process is being
traced with PTRACE_SYSCALL, for example by strace, the seccomp check is
skipped and -ENOSYS is returned unconditionally (unless altered by the
tracer) rather than carrying out action specified in the seccomp filter.

The consequence of this is that it is not possible to reliably strace
a seccomp based implementation of a foreign system call interface in
which r7/x8 is permitted to be -1 on entry to a system call.

Also trace_sys_enter and audit_syscall_entry are skipped if a system
call is skipped.

Fix by removing the in_syscall(regs) check restoring the previous
behaviour which is like AArch32, x86 (which uses generic code) and
everything else.

	Cc: Oleg Nesterov <oleg@redhat.com>
	Cc: Catalin Marinas<catalin.marinas@arm.com>
	Cc: <stable@vger.kernel.org>
Fixes: f086f67485c5 ("arm64: ptrace: add support for syscall emulation")
	Reviewed-by: Kees Cook <keescook@chromium.org>
	Reviewed-by: Sudeep Holla <sudeep.holla@arm.com>
	Tested-by: Sudeep Holla <sudeep.holla@arm.com>
	Signed-off-by: Timothy E Baldwin <T.E.Baldwin99@members.leeds.ac.uk>
Link: https://lore.kernel.org/r/90edd33b-6353-1228-791f-0336d94d5f8c@majoroak.me.uk
	Signed-off-by: Will Deacon <will@kernel.org>
(cherry picked from commit df84fe94708985cdfb78a83148322bcd0a699472)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/arm64/kernel/ptrace.c
diff --cc arch/arm64/kernel/ptrace.c
index e7125cb2c489,170f42fd6101..000000000000
--- a/arch/arm64/kernel/ptrace.c
+++ b/arch/arm64/kernel/ptrace.c
@@@ -1717,12 -1793,17 +1717,18 @@@ static void tracehook_report_syscall(st
  
  int syscall_trace_enter(struct pt_regs *regs)
  {
 -	unsigned long flags = READ_ONCE(current_thread_info()->flags);
 -
 -	if (flags & (_TIF_SYSCALL_EMU | _TIF_SYSCALL_TRACE)) {
 +	if (test_thread_flag(TIF_SYSCALL_TRACE))
  		tracehook_report_syscall(regs, PTRACE_SYSCALL_ENTER);
++<<<<<<< HEAD
++=======
+ 		if (flags & _TIF_SYSCALL_EMU)
+ 			return NO_SYSCALL;
+ 	}
++>>>>>>> df84fe947089 (arm64: ptrace: Fix seccomp of traced syscall -1 (NO_SYSCALL))
  
  	/* Do the secure computing after ptrace; failures should be fast. */
 -	if (secure_computing() == -1)
 -		return NO_SYSCALL;
 +	if (secure_computing(NULL) == -1)
 +		return -1;
  
  	if (test_thread_flag(TIF_SYSCALL_TRACEPOINT))
  		trace_sys_enter(regs, regs->syscallno);
* Unmerged path arch/arm64/kernel/ptrace.c
