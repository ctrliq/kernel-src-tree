NFS: Move generic FS show macros to global header

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-394.el8
commit-author Chuck Lever <chuck.lever@oracle.com>
commit 9d2d48bbbdabf7b2f029369c4f926d133c1d47ad
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-394.el8/9d2d48bb.failed

Refactor: Surface useful show_ macros for use by other trace
subsystems.

	Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
	Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
(cherry picked from commit 9d2d48bbbdabf7b2f029369c4f926d133c1d47ad)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/nfs/nfstrace.h
diff --cc fs/nfs/nfstrace.h
index 549010ee1c4a,331bcc0c0a75..000000000000
--- a/fs/nfs/nfstrace.h
+++ b/fs/nfs/nfstrace.h
@@@ -11,44 -11,9 +11,50 @@@
  #include <linux/tracepoint.h>
  #include <linux/iversion.h>
  
++<<<<<<< HEAD
 +TRACE_DEFINE_ENUM(DT_UNKNOWN);
 +TRACE_DEFINE_ENUM(DT_FIFO);
 +TRACE_DEFINE_ENUM(DT_CHR);
 +TRACE_DEFINE_ENUM(DT_DIR);
 +TRACE_DEFINE_ENUM(DT_BLK);
 +TRACE_DEFINE_ENUM(DT_REG);
 +TRACE_DEFINE_ENUM(DT_LNK);
 +TRACE_DEFINE_ENUM(DT_SOCK);
 +TRACE_DEFINE_ENUM(DT_WHT);
 +
 +#define nfs_show_file_type(ftype) \
 +	__print_symbolic(ftype, \
 +			{ DT_UNKNOWN, "UNKNOWN" }, \
 +			{ DT_FIFO, "FIFO" }, \
 +			{ DT_CHR, "CHR" }, \
 +			{ DT_DIR, "DIR" }, \
 +			{ DT_BLK, "BLK" }, \
 +			{ DT_REG, "REG" }, \
 +			{ DT_LNK, "LNK" }, \
 +			{ DT_SOCK, "SOCK" }, \
 +			{ DT_WHT, "WHT" })
 +
 +TRACE_DEFINE_ENUM(NFS_INO_INVALID_DATA);
 +TRACE_DEFINE_ENUM(NFS_INO_INVALID_ATIME);
 +TRACE_DEFINE_ENUM(NFS_INO_INVALID_ACCESS);
 +TRACE_DEFINE_ENUM(NFS_INO_INVALID_ACL);
 +TRACE_DEFINE_ENUM(NFS_INO_REVAL_PAGECACHE);
 +TRACE_DEFINE_ENUM(NFS_INO_REVAL_FORCED);
 +TRACE_DEFINE_ENUM(NFS_INO_INVALID_LABEL);
 +TRACE_DEFINE_ENUM(NFS_INO_INVALID_CHANGE);
 +TRACE_DEFINE_ENUM(NFS_INO_INVALID_CTIME);
 +TRACE_DEFINE_ENUM(NFS_INO_INVALID_MTIME);
 +TRACE_DEFINE_ENUM(NFS_INO_INVALID_SIZE);
 +TRACE_DEFINE_ENUM(NFS_INO_INVALID_OTHER);
 +TRACE_DEFINE_ENUM(NFS_INO_DATA_INVAL_DEFER);
 +TRACE_DEFINE_ENUM(NFS_INO_INVALID_BLOCKS);
 +TRACE_DEFINE_ENUM(NFS_INO_INVALID_XATTR);
 +
++=======
+ #include <trace/events/fs.h>
+ #include <trace/events/sunrpc_base.h>
+ 
++>>>>>>> 9d2d48bbbdab (NFS: Move generic FS show macros to global header)
  #define nfs_show_cache_validity(v) \
  	__print_flags(v, "|", \
  			{ NFS_INO_INVALID_DATA, "INVALID_DATA" }, \
@@@ -266,40 -222,56 +272,43 @@@ TRACE_EVENT(nfs_access_exit
  		)
  );
  
 -DECLARE_EVENT_CLASS(nfs_update_size_class,
 -		TP_PROTO(
 -			const struct inode *inode,
 -			loff_t new_size
 -		),
 -
 -		TP_ARGS(inode, new_size),
 -
 -		TP_STRUCT__entry(
 -			__field(dev_t, dev)
 -			__field(u32, fhandle)
 -			__field(u64, fileid)
 -			__field(u64, version)
 -			__field(loff_t, cur_size)
 -			__field(loff_t, new_size)
 -		),
 -
 -		TP_fast_assign(
 -			const struct nfs_inode *nfsi = NFS_I(inode);
 -
 -			__entry->dev = inode->i_sb->s_dev;
 -			__entry->fhandle = nfs_fhandle_hash(&nfsi->fh);
 -			__entry->fileid = nfsi->fileid;
 -			__entry->version = inode_peek_iversion_raw(inode);
 -			__entry->cur_size = i_size_read(inode);
 -			__entry->new_size = new_size;
 -		),
 -
 -		TP_printk(
 -			"fileid=%02x:%02x:%llu fhandle=0x%08x version=%llu cursize=%lld newsize=%lld",
 -			MAJOR(__entry->dev), MINOR(__entry->dev),
 -			(unsigned long long)__entry->fileid,
 -			__entry->fhandle, __entry->version,
 -			__entry->cur_size, __entry->new_size
 -		)
 -);
 -
 -#define DEFINE_NFS_UPDATE_SIZE_EVENT(name) \
 -	DEFINE_EVENT(nfs_update_size_class, nfs_size_##name, \
 -			TP_PROTO( \
 -				const struct inode *inode, \
 -				loff_t new_size \
 -			), \
 -			TP_ARGS(inode, new_size))
 -
 -DEFINE_NFS_UPDATE_SIZE_EVENT(truncate);
 -DEFINE_NFS_UPDATE_SIZE_EVENT(wcc);
 -DEFINE_NFS_UPDATE_SIZE_EVENT(update);
 -DEFINE_NFS_UPDATE_SIZE_EVENT(grow);
 -
 +TRACE_DEFINE_ENUM(LOOKUP_FOLLOW);
 +TRACE_DEFINE_ENUM(LOOKUP_DIRECTORY);
 +TRACE_DEFINE_ENUM(LOOKUP_AUTOMOUNT);
 +TRACE_DEFINE_ENUM(LOOKUP_PARENT);
 +TRACE_DEFINE_ENUM(LOOKUP_REVAL);
 +TRACE_DEFINE_ENUM(LOOKUP_RCU);
 +TRACE_DEFINE_ENUM(LOOKUP_NO_REVAL);
 +TRACE_DEFINE_ENUM(LOOKUP_OPEN);
 +TRACE_DEFINE_ENUM(LOOKUP_CREATE);
 +TRACE_DEFINE_ENUM(LOOKUP_EXCL);
 +TRACE_DEFINE_ENUM(LOOKUP_RENAME_TARGET);
 +TRACE_DEFINE_ENUM(LOOKUP_JUMPED);
 +TRACE_DEFINE_ENUM(LOOKUP_ROOT);
 +TRACE_DEFINE_ENUM(LOOKUP_EMPTY);
 +TRACE_DEFINE_ENUM(LOOKUP_DOWN);
 +
++<<<<<<< HEAD
 +#define show_lookup_flags(flags) \
 +	__print_flags(flags, "|", \
 +			{ LOOKUP_FOLLOW, "FOLLOW" }, \
 +			{ LOOKUP_DIRECTORY, "DIRECTORY" }, \
 +			{ LOOKUP_AUTOMOUNT, "AUTOMOUNT" }, \
 +			{ LOOKUP_PARENT, "PARENT" }, \
 +			{ LOOKUP_REVAL, "REVAL" }, \
 +			{ LOOKUP_RCU, "RCU" }, \
 +			{ LOOKUP_NO_REVAL, "NO_REVAL" }, \
 +			{ LOOKUP_OPEN, "OPEN" }, \
 +			{ LOOKUP_CREATE, "CREATE" }, \
 +			{ LOOKUP_EXCL, "EXCL" }, \
 +			{ LOOKUP_RENAME_TARGET, "RENAME_TARGET" }, \
 +			{ LOOKUP_JUMPED, "JUMPED" }, \
 +			{ LOOKUP_ROOT, "ROOT" }, \
 +			{ LOOKUP_EMPTY, "EMPTY" }, \
 +			{ LOOKUP_DOWN, "DOWN" })
 +
++=======
++>>>>>>> 9d2d48bbbdab (NFS: Move generic FS show macros to global header)
  DECLARE_EVENT_CLASS(nfs_lookup_event,
  		TP_PROTO(
  			const struct inode *dir,
@@@ -394,46 -366,6 +403,49 @@@ DEFINE_NFS_LOOKUP_EVENT_DONE(nfs_lookup
  DEFINE_NFS_LOOKUP_EVENT(nfs_lookup_revalidate_enter);
  DEFINE_NFS_LOOKUP_EVENT_DONE(nfs_lookup_revalidate_exit);
  
++<<<<<<< HEAD
 +TRACE_DEFINE_ENUM(O_WRONLY);
 +TRACE_DEFINE_ENUM(O_RDWR);
 +TRACE_DEFINE_ENUM(O_CREAT);
 +TRACE_DEFINE_ENUM(O_EXCL);
 +TRACE_DEFINE_ENUM(O_NOCTTY);
 +TRACE_DEFINE_ENUM(O_TRUNC);
 +TRACE_DEFINE_ENUM(O_APPEND);
 +TRACE_DEFINE_ENUM(O_NONBLOCK);
 +TRACE_DEFINE_ENUM(O_DSYNC);
 +TRACE_DEFINE_ENUM(O_DIRECT);
 +TRACE_DEFINE_ENUM(O_LARGEFILE);
 +TRACE_DEFINE_ENUM(O_DIRECTORY);
 +TRACE_DEFINE_ENUM(O_NOFOLLOW);
 +TRACE_DEFINE_ENUM(O_NOATIME);
 +TRACE_DEFINE_ENUM(O_CLOEXEC);
 +
 +#define show_open_flags(flags) \
 +	__print_flags(flags, "|", \
 +		{ O_WRONLY, "O_WRONLY" }, \
 +		{ O_RDWR, "O_RDWR" }, \
 +		{ O_CREAT, "O_CREAT" }, \
 +		{ O_EXCL, "O_EXCL" }, \
 +		{ O_NOCTTY, "O_NOCTTY" }, \
 +		{ O_TRUNC, "O_TRUNC" }, \
 +		{ O_APPEND, "O_APPEND" }, \
 +		{ O_NONBLOCK, "O_NONBLOCK" }, \
 +		{ O_DSYNC, "O_DSYNC" }, \
 +		{ O_DIRECT, "O_DIRECT" }, \
 +		{ O_LARGEFILE, "O_LARGEFILE" }, \
 +		{ O_DIRECTORY, "O_DIRECTORY" }, \
 +		{ O_NOFOLLOW, "O_NOFOLLOW" }, \
 +		{ O_NOATIME, "O_NOATIME" }, \
 +		{ O_CLOEXEC, "O_CLOEXEC" })
 +
 +#define show_fmode_flags(mode) \
 +	__print_flags(mode, "|", \
 +		{ ((__force unsigned long)FMODE_READ), "READ" }, \
 +		{ ((__force unsigned long)FMODE_WRITE), "WRITE" }, \
 +		{ ((__force unsigned long)FMODE_EXEC), "EXEC" })
 +
++=======
++>>>>>>> 9d2d48bbbdab (NFS: Move generic FS show macros to global header)
  TRACE_EVENT(nfs_atomic_open_enter,
  		TP_PROTO(
  			const struct inode *dir,
diff --git a/fs/nfs/nfs4trace.h b/fs/nfs/nfs4trace.h
index 2ef75caad6da..669b10bdcc14 100644
--- a/fs/nfs/nfs4trace.h
+++ b/fs/nfs/nfs4trace.h
@@ -10,6 +10,8 @@
 
 #include <linux/tracepoint.h>
 
+#include <trace/events/fs.h>
+
 TRACE_DEFINE_ENUM(EPERM);
 TRACE_DEFINE_ENUM(ENOENT);
 TRACE_DEFINE_ENUM(EIO);
@@ -313,19 +315,6 @@ TRACE_DEFINE_ENUM(NFS4ERR_RESET_TO_PNFS);
 		{ NFS4ERR_RESET_TO_MDS, "RESET_TO_MDS" }, \
 		{ NFS4ERR_RESET_TO_PNFS, "RESET_TO_PNFS" })
 
-#define show_open_flags(flags) \
-	__print_flags(flags, "|", \
-		{ O_CREAT, "O_CREAT" }, \
-		{ O_EXCL, "O_EXCL" }, \
-		{ O_TRUNC, "O_TRUNC" }, \
-		{ O_DIRECT, "O_DIRECT" })
-
-#define show_fmode_flags(mode) \
-	__print_flags(mode, "|", \
-		{ ((__force unsigned long)FMODE_READ), "READ" }, \
-		{ ((__force unsigned long)FMODE_WRITE), "WRITE" }, \
-		{ ((__force unsigned long)FMODE_EXEC), "EXEC" })
-
 #define show_nfs_fattr_flags(valid) \
 	__print_flags((unsigned long)valid, "|", \
 		{ NFS_ATTR_FATTR_TYPE, "TYPE" }, \
@@ -793,8 +782,8 @@ DECLARE_EVENT_CLASS(nfs4_open_event,
 
 		TP_STRUCT__entry(
 			__field(unsigned long, error)
-			__field(unsigned int, flags)
-			__field(unsigned int, fmode)
+			__field(unsigned long, flags)
+			__field(unsigned long, fmode)
 			__field(dev_t, dev)
 			__field(u32, fhandle)
 			__field(u64, fileid)
@@ -812,7 +801,7 @@ DECLARE_EVENT_CLASS(nfs4_open_event,
 
 			__entry->error = -error;
 			__entry->flags = flags;
-			__entry->fmode = (__force unsigned int)ctx->mode;
+			__entry->fmode = (__force unsigned long)ctx->mode;
 			__entry->dev = ctx->dentry->d_sb->s_dev;
 			if (!IS_ERR_OR_NULL(state)) {
 				inode = state->inode;
@@ -842,15 +831,15 @@ DECLARE_EVENT_CLASS(nfs4_open_event,
 		),
 
 		TP_printk(
-			"error=%ld (%s) flags=%d (%s) fmode=%s "
+			"error=%ld (%s) flags=%lu (%s) fmode=%s "
 			"fileid=%02x:%02x:%llu fhandle=0x%08x "
 			"name=%02x:%02x:%llu/%s stateid=%d:0x%08x "
 			"openstateid=%d:0x%08x",
 			 -__entry->error,
 			 show_nfsv4_errors(__entry->error),
 			 __entry->flags,
-			 show_open_flags(__entry->flags),
-			 show_fmode_flags(__entry->fmode),
+			 show_fs_fcntl_open_flags(__entry->flags),
+			 show_fs_fmode_flags(__entry->fmode),
 			 MAJOR(__entry->dev), MINOR(__entry->dev),
 			 (unsigned long long)__entry->fileid,
 			 __entry->fhandle,
@@ -904,7 +893,7 @@ TRACE_EVENT(nfs4_cached_open,
 		TP_printk(
 			"fmode=%s fileid=%02x:%02x:%llu "
 			"fhandle=0x%08x stateid=%d:0x%08x",
-			__entry->fmode ?  show_fmode_flags(__entry->fmode) :
+			__entry->fmode ?  show_fs_fmode_flags(__entry->fmode) :
 					  "closed",
 			MAJOR(__entry->dev), MINOR(__entry->dev),
 			(unsigned long long)__entry->fileid,
@@ -952,7 +941,7 @@ TRACE_EVENT(nfs4_close,
 			"fhandle=0x%08x openstateid=%d:0x%08x",
 			-__entry->error,
 			show_nfsv4_errors(__entry->error),
-			__entry->fmode ?  show_fmode_flags(__entry->fmode) :
+			__entry->fmode ?  show_fs_fmode_flags(__entry->fmode) :
 					  "closed",
 			MAJOR(__entry->dev), MINOR(__entry->dev),
 			(unsigned long long)__entry->fileid,
@@ -961,24 +950,6 @@ TRACE_EVENT(nfs4_close,
 		)
 );
 
-TRACE_DEFINE_ENUM(F_GETLK);
-TRACE_DEFINE_ENUM(F_SETLK);
-TRACE_DEFINE_ENUM(F_SETLKW);
-TRACE_DEFINE_ENUM(F_RDLCK);
-TRACE_DEFINE_ENUM(F_WRLCK);
-TRACE_DEFINE_ENUM(F_UNLCK);
-
-#define show_lock_cmd(type) \
-	__print_symbolic((int)type, \
-		{ F_GETLK, "GETLK" }, \
-		{ F_SETLK, "SETLK" }, \
-		{ F_SETLKW, "SETLKW" })
-#define show_lock_type(type) \
-	__print_symbolic((int)type, \
-		{ F_RDLCK, "RDLCK" }, \
-		{ F_WRLCK, "WRLCK" }, \
-		{ F_UNLCK, "UNLCK" })
-
 DECLARE_EVENT_CLASS(nfs4_lock_event,
 		TP_PROTO(
 			const struct file_lock *request,
@@ -991,8 +962,8 @@ DECLARE_EVENT_CLASS(nfs4_lock_event,
 
 		TP_STRUCT__entry(
 			__field(unsigned long, error)
-			__field(int, cmd)
-			__field(char, type)
+			__field(unsigned long, cmd)
+			__field(unsigned long, type)
 			__field(loff_t, start)
 			__field(loff_t, end)
 			__field(dev_t, dev)
@@ -1025,8 +996,8 @@ DECLARE_EVENT_CLASS(nfs4_lock_event,
 			"stateid=%d:0x%08x",
 			-__entry->error,
 			show_nfsv4_errors(__entry->error),
-			show_lock_cmd(__entry->cmd),
-			show_lock_type(__entry->type),
+			show_fs_fcntl_cmd(__entry->cmd),
+			show_fs_fcntl_lock_type(__entry->type),
 			(long long)__entry->start,
 			(long long)__entry->end,
 			MAJOR(__entry->dev), MINOR(__entry->dev),
@@ -1061,8 +1032,8 @@ TRACE_EVENT(nfs4_set_lock,
 
 		TP_STRUCT__entry(
 			__field(unsigned long, error)
-			__field(int, cmd)
-			__field(char, type)
+			__field(unsigned long, cmd)
+			__field(unsigned long, type)
 			__field(loff_t, start)
 			__field(loff_t, end)
 			__field(dev_t, dev)
@@ -1101,8 +1072,8 @@ TRACE_EVENT(nfs4_set_lock,
 			"stateid=%d:0x%08x lockstateid=%d:0x%08x",
 			-__entry->error,
 			show_nfsv4_errors(__entry->error),
-			show_lock_cmd(__entry->cmd),
-			show_lock_type(__entry->type),
+			show_fs_fcntl_cmd(__entry->cmd),
+			show_fs_fcntl_lock_type(__entry->type),
 			(long long)__entry->start,
 			(long long)__entry->end,
 			MAJOR(__entry->dev), MINOR(__entry->dev),
@@ -1219,7 +1190,7 @@ DECLARE_EVENT_CLASS(nfs4_set_delegation_event,
 
 		TP_printk(
 			"fmode=%s fileid=%02x:%02x:%llu fhandle=0x%08x",
-			show_fmode_flags(__entry->fmode),
+			show_fs_fmode_flags(__entry->fmode),
 			MAJOR(__entry->dev), MINOR(__entry->dev),
 			(unsigned long long)__entry->fileid,
 			__entry->fhandle
* Unmerged path fs/nfs/nfstrace.h
diff --git a/include/trace/events/fs.h b/include/trace/events/fs.h
new file mode 100644
index 000000000000..738b97f22f36
--- /dev/null
+++ b/include/trace/events/fs.h
@@ -0,0 +1,122 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/*
+ * Display helpers for generic filesystem items
+ *
+ * Author: Chuck Lever <chuck.lever@oracle.com>
+ *
+ * Copyright (c) 2020, Oracle and/or its affiliates.
+ */
+
+#include <linux/fs.h>
+
+#define show_fs_dirent_type(x) \
+	__print_symbolic(x, \
+		{ DT_UNKNOWN,		"UNKNOWN" }, \
+		{ DT_FIFO,		"FIFO" }, \
+		{ DT_CHR,		"CHR" }, \
+		{ DT_DIR,		"DIR" }, \
+		{ DT_BLK,		"BLK" }, \
+		{ DT_REG,		"REG" }, \
+		{ DT_LNK,		"LNK" }, \
+		{ DT_SOCK,		"SOCK" }, \
+		{ DT_WHT,		"WHT" })
+
+#define show_fs_fcntl_open_flags(x) \
+	__print_flags(x, "|", \
+		{ O_WRONLY,		"O_WRONLY" }, \
+		{ O_RDWR,		"O_RDWR" }, \
+		{ O_CREAT,		"O_CREAT" }, \
+		{ O_EXCL,		"O_EXCL" }, \
+		{ O_NOCTTY,		"O_NOCTTY" }, \
+		{ O_TRUNC,		"O_TRUNC" }, \
+		{ O_APPEND,		"O_APPEND" }, \
+		{ O_NONBLOCK,		"O_NONBLOCK" }, \
+		{ O_DSYNC,		"O_DSYNC" }, \
+		{ O_DIRECT,		"O_DIRECT" }, \
+		{ O_LARGEFILE,		"O_LARGEFILE" }, \
+		{ O_DIRECTORY,		"O_DIRECTORY" }, \
+		{ O_NOFOLLOW,		"O_NOFOLLOW" }, \
+		{ O_NOATIME,		"O_NOATIME" }, \
+		{ O_CLOEXEC,		"O_CLOEXEC" })
+
+#define __fmode_flag(x)	{ (__force unsigned long)FMODE_##x, #x }
+#define show_fs_fmode_flags(x) \
+	__print_flags(x, "|", \
+		__fmode_flag(READ), \
+		__fmode_flag(WRITE), \
+		__fmode_flag(EXEC))
+
+#ifdef CONFIG_64BIT
+#define show_fs_fcntl_cmd(x) \
+	__print_symbolic(x, \
+		{ F_DUPFD,		"DUPFD" }, \
+		{ F_GETFD,		"GETFD" }, \
+		{ F_SETFD,		"SETFD" }, \
+		{ F_GETFL,		"GETFL" }, \
+		{ F_SETFL,		"SETFL" }, \
+		{ F_GETLK,		"GETLK" }, \
+		{ F_SETLK,		"SETLK" }, \
+		{ F_SETLKW,		"SETLKW" }, \
+		{ F_SETOWN,		"SETOWN" }, \
+		{ F_GETOWN,		"GETOWN" }, \
+		{ F_SETSIG,		"SETSIG" }, \
+		{ F_GETSIG,		"GETSIG" }, \
+		{ F_SETOWN_EX,		"SETOWN_EX" }, \
+		{ F_GETOWN_EX,		"GETOWN_EX" }, \
+		{ F_GETOWNER_UIDS,	"GETOWNER_UIDS" }, \
+		{ F_OFD_GETLK,		"OFD_GETLK" }, \
+		{ F_OFD_SETLK,		"OFD_SETLK" }, \
+		{ F_OFD_SETLKW,		"OFD_SETLKW" })
+#else /* CONFIG_64BIT */
+#define show_fs_fcntl_cmd(x) \
+	__print_symbolic(x, \
+		{ F_DUPFD,		"DUPFD" }, \
+		{ F_GETFD,		"GETFD" }, \
+		{ F_SETFD,		"SETFD" }, \
+		{ F_GETFL,		"GETFL" }, \
+		{ F_SETFL,		"SETFL" }, \
+		{ F_GETLK,		"GETLK" }, \
+		{ F_SETLK,		"SETLK" }, \
+		{ F_SETLKW,		"SETLKW" }, \
+		{ F_SETOWN,		"SETOWN" }, \
+		{ F_GETOWN,		"GETOWN" }, \
+		{ F_SETSIG,		"SETSIG" }, \
+		{ F_GETSIG,		"GETSIG" }, \
+		{ F_GETLK64,		"GETLK64" }, \
+		{ F_SETLK64,		"SETLK64" }, \
+		{ F_SETLKW64,		"SETLKW64" }, \
+		{ F_SETOWN_EX,		"SETOWN_EX" }, \
+		{ F_GETOWN_EX,		"GETOWN_EX" }, \
+		{ F_GETOWNER_UIDS,	"GETOWNER_UIDS" }, \
+		{ F_OFD_GETLK,		"OFD_GETLK" }, \
+		{ F_OFD_SETLK,		"OFD_SETLK" }, \
+		{ F_OFD_SETLKW,		"OFD_SETLKW" })
+#endif /* CONFIG_64BIT */
+
+#define show_fs_fcntl_lock_type(x) \
+	__print_symbolic(x, \
+		{ F_RDLCK,		"RDLCK" }, \
+		{ F_WRLCK,		"WRLCK" }, \
+		{ F_UNLCK,		"UNLCK" })
+
+#define show_fs_lookup_flags(flags) \
+	__print_flags(flags, "|", \
+		{ LOOKUP_FOLLOW,	"FOLLOW" }, \
+		{ LOOKUP_DIRECTORY,	"DIRECTORY" }, \
+		{ LOOKUP_AUTOMOUNT,	"AUTOMOUNT" }, \
+		{ LOOKUP_EMPTY,		"EMPTY" }, \
+		{ LOOKUP_DOWN,		"DOWN" }, \
+		{ LOOKUP_MOUNTPOINT,	"MOUNTPOINT" }, \
+		{ LOOKUP_REVAL,		"REVAL" }, \
+		{ LOOKUP_RCU,		"RCU" }, \
+		{ LOOKUP_OPEN,		"OPEN" }, \
+		{ LOOKUP_CREATE,	"CREATE" }, \
+		{ LOOKUP_EXCL,		"EXCL" }, \
+		{ LOOKUP_RENAME_TARGET,	"RENAME_TARGET" }, \
+		{ LOOKUP_PARENT,	"PARENT" }, \
+		{ LOOKUP_NO_SYMLINKS,	"NO_SYMLINKS" }, \
+		{ LOOKUP_NO_MAGICLINKS,	"NO_MAGICLINKS" }, \
+		{ LOOKUP_NO_XDEV,	"NO_XDEV" }, \
+		{ LOOKUP_BENEATH,	"BENEATH" }, \
+		{ LOOKUP_IN_ROOT,	"IN_ROOT" }, \
+		{ LOOKUP_CACHED,	"CACHED" })
