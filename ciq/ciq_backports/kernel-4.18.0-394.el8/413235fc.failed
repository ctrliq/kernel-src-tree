arm64: Change the tagged_addr sysctl control semantics to only prevent the opt-in

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-394.el8
commit-author Catalin Marinas <catalin.marinas@arm.com>
commit 413235fcedc7f61e925fe9818bc3f5eff8ad2494
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-394.el8/413235fc.failed

First rename the sysctl control to abi.tagged_addr_disabled and make it
default off (zero). When abi.tagged_addr_disabled == 1, only block the
enabling of the TBI ABI via prctl(PR_SET_TAGGED_ADDR_CTRL, PR_TAGGED_ADDR_ENABLE).
Getting the status of the ABI or disabling it is still allowed.

	Acked-by: Andrey Konovalov <andreyknvl@google.com>
	Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
	Signed-off-by: Will Deacon <will@kernel.org>
(cherry picked from commit 413235fcedc7f61e925fe9818bc3f5eff8ad2494)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/arm64/kernel/process.c
diff --cc arch/arm64/kernel/process.c
index edf46401e230,03689c0beb34..000000000000
--- a/arch/arm64/kernel/process.c
+++ b/arch/arm64/kernel/process.c
@@@ -578,18 -575,69 +578,87 @@@ void arch_setup_new_exec(void
  	ptrauth_thread_init_user(current);
  }
  
++<<<<<<< HEAD
 +asmlinkage void __sched arm64_preempt_schedule_irq(void)
 +{
 +	lockdep_assert_irqs_disabled();
 +
 +	/*
 +	 * Preempting a task from an IRQ means we leave copies of PSTATE
 +	 * on the stack. cpufeature's enable calls may modify PSTATE, but
 +	 * resuming one of these preempted tasks would undo those changes.
 +	 *
 +	 * Only allow a task to be preempted once cpufeatures have been
 +	 * enabled.
 +	 */
 +	if (system_capabilities_finalized())
 +		preempt_schedule_irq();
 +}
++=======
+ #ifdef CONFIG_ARM64_TAGGED_ADDR_ABI
+ /*
+  * Control the relaxed ABI allowing tagged user addresses into the kernel.
+  */
+ static unsigned int tagged_addr_disabled;
+ 
+ long set_tagged_addr_ctrl(unsigned long arg)
+ {
+ 	if (is_compat_task())
+ 		return -EINVAL;
+ 	if (arg & ~PR_TAGGED_ADDR_ENABLE)
+ 		return -EINVAL;
+ 
+ 	/*
+ 	 * Do not allow the enabling of the tagged address ABI if globally
+ 	 * disabled via sysctl abi.tagged_addr_disabled.
+ 	 */
+ 	if (arg & PR_TAGGED_ADDR_ENABLE && tagged_addr_disabled)
+ 		return -EINVAL;
+ 
+ 	update_thread_flag(TIF_TAGGED_ADDR, arg & PR_TAGGED_ADDR_ENABLE);
+ 
+ 	return 0;
+ }
+ 
+ long get_tagged_addr_ctrl(void)
+ {
+ 	if (is_compat_task())
+ 		return -EINVAL;
+ 
+ 	if (test_thread_flag(TIF_TAGGED_ADDR))
+ 		return PR_TAGGED_ADDR_ENABLE;
+ 
+ 	return 0;
+ }
+ 
+ /*
+  * Global sysctl to disable the tagged user addresses support. This control
+  * only prevents the tagged address ABI enabling via prctl() and does not
+  * disable it for tasks that already opted in to the relaxed ABI.
+  */
+ static int zero;
+ static int one = 1;
+ 
+ static struct ctl_table tagged_addr_sysctl_table[] = {
+ 	{
+ 		.procname	= "tagged_addr_disabled",
+ 		.mode		= 0644,
+ 		.data		= &tagged_addr_disabled,
+ 		.maxlen		= sizeof(int),
+ 		.proc_handler	= proc_dointvec_minmax,
+ 		.extra1		= &zero,
+ 		.extra2		= &one,
+ 	},
+ 	{ }
+ };
+ 
+ static int __init tagged_addr_init(void)
+ {
+ 	if (!register_sysctl("abi", tagged_addr_sysctl_table))
+ 		return -EINVAL;
+ 	return 0;
+ }
+ 
+ core_initcall(tagged_addr_init);
+ #endif	/* CONFIG_ARM64_TAGGED_ADDR_ABI */
++>>>>>>> 413235fcedc7 (arm64: Change the tagged_addr sysctl control semantics to only prevent the opt-in)
* Unmerged path arch/arm64/kernel/process.c
