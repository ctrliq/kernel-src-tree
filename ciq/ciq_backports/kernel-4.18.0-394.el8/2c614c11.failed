arm64: use shared sysctl constants

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-394.el8
commit-author Matteo Croce <mcroce@redhat.com>
commit 2c614c1194f2803750c14b751871bd168dcc8054
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-394.el8/2c614c11.failed

Use shared sysctl variables for zero and one constants, as in
commit eec4844fae7c ("proc/sysctl: add shared variables for range check")

Fixes: 63f0c6037965 ("arm64: Introduce prctl() options to control the tagged user addresses ABI")
	Signed-off-by: Matteo Croce <mcroce@redhat.com>
	Signed-off-by: Will Deacon <will@kernel.org>
(cherry picked from commit 2c614c1194f2803750c14b751871bd168dcc8054)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/arm64/kernel/process.c
diff --cc arch/arm64/kernel/process.c
index edf46401e230,a480b6760808..000000000000
--- a/arch/arm64/kernel/process.c
+++ b/arch/arm64/kernel/process.c
@@@ -578,6 -567,71 +578,74 @@@ void arch_setup_new_exec(void
  	ptrauth_thread_init_user(current);
  }
  
++<<<<<<< HEAD
++=======
+ #ifdef CONFIG_ARM64_TAGGED_ADDR_ABI
+ /*
+  * Control the relaxed ABI allowing tagged user addresses into the kernel.
+  */
+ static unsigned int tagged_addr_disabled;
+ 
+ long set_tagged_addr_ctrl(unsigned long arg)
+ {
+ 	if (is_compat_task())
+ 		return -EINVAL;
+ 	if (arg & ~PR_TAGGED_ADDR_ENABLE)
+ 		return -EINVAL;
+ 
+ 	/*
+ 	 * Do not allow the enabling of the tagged address ABI if globally
+ 	 * disabled via sysctl abi.tagged_addr_disabled.
+ 	 */
+ 	if (arg & PR_TAGGED_ADDR_ENABLE && tagged_addr_disabled)
+ 		return -EINVAL;
+ 
+ 	update_thread_flag(TIF_TAGGED_ADDR, arg & PR_TAGGED_ADDR_ENABLE);
+ 
+ 	return 0;
+ }
+ 
+ long get_tagged_addr_ctrl(void)
+ {
+ 	if (is_compat_task())
+ 		return -EINVAL;
+ 
+ 	if (test_thread_flag(TIF_TAGGED_ADDR))
+ 		return PR_TAGGED_ADDR_ENABLE;
+ 
+ 	return 0;
+ }
+ 
+ /*
+  * Global sysctl to disable the tagged user addresses support. This control
+  * only prevents the tagged address ABI enabling via prctl() and does not
+  * disable it for tasks that already opted in to the relaxed ABI.
+  */
+ 
+ static struct ctl_table tagged_addr_sysctl_table[] = {
+ 	{
+ 		.procname	= "tagged_addr_disabled",
+ 		.mode		= 0644,
+ 		.data		= &tagged_addr_disabled,
+ 		.maxlen		= sizeof(int),
+ 		.proc_handler	= proc_dointvec_minmax,
+ 		.extra1		= SYSCTL_ZERO,
+ 		.extra2		= SYSCTL_ONE,
+ 	},
+ 	{ }
+ };
+ 
+ static int __init tagged_addr_init(void)
+ {
+ 	if (!register_sysctl("abi", tagged_addr_sysctl_table))
+ 		return -EINVAL;
+ 	return 0;
+ }
+ 
+ core_initcall(tagged_addr_init);
+ #endif	/* CONFIG_ARM64_TAGGED_ADDR_ABI */
+ 
++>>>>>>> 2c614c1194f2 (arm64: use shared sysctl constants)
  asmlinkage void __sched arm64_preempt_schedule_irq(void)
  {
  	lockdep_assert_irqs_disabled();
* Unmerged path arch/arm64/kernel/process.c
