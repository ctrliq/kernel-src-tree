component: Add common helper for compare/release functions

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-394.el8
commit-author Yong Wu <yong.wu@mediatek.com>
commit 2502960fba7e94e090112069694365295c32ccc5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-394.el8/2502960f.failed

The component requires the compare/release functions, there are so many
copies in current kernel. Just define four common helpers for them.

	Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
	Cc: "Rafael J. Wysocki" <rafael@kernel.org>
	Signed-off-by: Yong Wu <yong.wu@mediatek.com>
Link: https://lore.kernel.org/r/20220214060819.7334-2-yong.wu@mediatek.com
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit 2502960fba7e94e090112069694365295c32ccc5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/base/component.c
diff --cc drivers/base/component.c
index d9323f885e85,5eadeac6c532..000000000000
--- a/drivers/base/component.c
+++ b/drivers/base/component.c
@@@ -9,10 -4,9 +9,11 @@@
   */
  #include <linux/component.h>
  #include <linux/device.h>
 +#include <linux/kref.h>
  #include <linux/list.h>
 +#include <linux/module.h>
  #include <linux/mutex.h>
+ #include <linux/of.h>
  #include <linux/slab.h>
  #include <linux/debugfs.h>
  
@@@ -300,9 -284,66 +301,70 @@@ static void take_down_master(struct mas
  	}
  }
  
++<<<<<<< HEAD
 +static void component_match_release(struct device *master,
 +	struct component_match *match)
++=======
+ /**
+  * component_compare_of - A common component compare function for of_node
+  * @dev: component device
+  * @data: @compare_data from component_match_add_release()
+  *
+  * A common compare function when compare_data is device of_node. e.g.
+  * component_match_add_release(masterdev, &match, component_release_of,
+  * component_compare_of, component_dev_of_node)
+  */
+ int component_compare_of(struct device *dev, void *data)
+ {
+ 	return device_match_of_node(dev, data);
+ }
+ EXPORT_SYMBOL_GPL(component_compare_of);
+ 
+ /**
+  * component_release_of - A common component release function for of_node
+  * @dev: component device
+  * @data: @compare_data from component_match_add_release()
+  *
+  * About the example, Please see component_compare_of().
+  */
+ void component_release_of(struct device *dev, void *data)
+ {
+ 	of_node_put(data);
+ }
+ EXPORT_SYMBOL_GPL(component_release_of);
+ 
+ /**
+  * component_compare_dev - A common component compare function for dev
+  * @dev: component device
+  * @data: @compare_data from component_match_add_release()
+  *
+  * A common compare function when compare_data is struce device. e.g.
+  * component_match_add(masterdev, &match, component_compare_dev, component_dev)
+  */
+ int component_compare_dev(struct device *dev, void *data)
+ {
+ 	return dev == data;
+ }
+ EXPORT_SYMBOL_GPL(component_compare_dev);
+ 
+ /**
+  * component_compare_dev_name - A common component compare function for device name
+  * @dev: component device
+  * @data: @compare_data from component_match_add_release()
+  *
+  * A common compare function when compare_data is device name string. e.g.
+  * component_match_add(masterdev, &match, component_compare_dev_name,
+  * "component_dev_name")
+  */
+ int component_compare_dev_name(struct device *dev, void *data)
+ {
+ 	return device_match_name(dev, data);
+ }
+ EXPORT_SYMBOL_GPL(component_compare_dev_name);
+ 
+ static void devm_component_match_release(struct device *parent, void *res)
++>>>>>>> 2502960fba7e (component: Add common helper for compare/release functions)
  {
 -	struct component_match *match = res;
  	unsigned int i;
  
  	for (i = 0; i < match->num; i++) {
* Unmerged path drivers/base/component.c
diff --git a/include/linux/component.h b/include/linux/component.h
index 30bcc7e590eb..2e9055e6e29c 100644
--- a/include/linux/component.h
+++ b/include/linux/component.h
@@ -82,6 +82,12 @@ struct component_master_ops {
 	void (*unbind)(struct device *master);
 };
 
+/* A set helper functions for component compare/release */
+int component_compare_of(struct device *dev, void *data);
+void component_release_of(struct device *dev, void *data);
+int component_compare_dev(struct device *dev, void *data);
+int component_compare_dev_name(struct device *dev, void *data);
+
 void component_master_del(struct device *,
 	const struct component_master_ops *);
 
