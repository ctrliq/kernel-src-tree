NFS: Fix up statx() results

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-394.el8
commit-author Trond Myklebust <trond.myklebust@hammerspace.com>
commit 63cdd7edfd2871e63f4ca001ff6b8e1e166a74ae
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-394.el8/63cdd7ed.failed

If statx has valid attributes available that weren't asked for, then
return them and set the result mask appropriately.

	Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
(cherry picked from commit 63cdd7edfd2871e63f4ca001ff6b8e1e166a74ae)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/nfs/inode.c
diff --cc fs/nfs/inode.c
index c7716aef51f9,8c2d5f333e81..000000000000
--- a/fs/nfs/inode.c
+++ b/fs/nfs/inode.c
@@@ -804,8 -806,30 +804,35 @@@ static bool nfs_need_revalidate_inode(s
  	return false;
  }
  
++<<<<<<< HEAD
 +int nfs_getattr(const struct path *path, struct kstat *stat,
 +		u32 request_mask, unsigned int query_flags)
++=======
+ static u32 nfs_get_valid_attrmask(struct inode *inode)
+ {
+ 	unsigned long cache_validity = READ_ONCE(NFS_I(inode)->cache_validity);
+ 	u32 reply_mask = STATX_INO | STATX_TYPE;
+ 
+ 	if (!(cache_validity & NFS_INO_INVALID_ATIME))
+ 		reply_mask |= STATX_ATIME;
+ 	if (!(cache_validity & NFS_INO_REVAL_PAGECACHE)) {
+ 		if (!(cache_validity & NFS_INO_INVALID_CTIME))
+ 			reply_mask |= STATX_CTIME;
+ 		if (!(cache_validity & NFS_INO_INVALID_MTIME))
+ 			reply_mask |= STATX_MTIME;
+ 		if (!(cache_validity & NFS_INO_INVALID_SIZE))
+ 			reply_mask |= STATX_SIZE;
+ 	}
+ 	if (!(cache_validity & NFS_INO_INVALID_OTHER))
+ 		reply_mask |= STATX_UID | STATX_GID | STATX_MODE | STATX_NLINK;
+ 	if (!(cache_validity & NFS_INO_INVALID_BLOCKS))
+ 		reply_mask |= STATX_BLOCKS;
+ 	return reply_mask;
+ }
+ 
+ int nfs_getattr(struct user_namespace *mnt_userns, const struct path *path,
+ 		struct kstat *stat, u32 request_mask, unsigned int query_flags)
++>>>>>>> 63cdd7edfd28 (NFS: Fix up statx() results)
  {
  	struct inode *inode = d_inode(path->dentry);
  	struct nfs_server *server = NFS_SERVER(inode);
@@@ -881,9 -906,9 +909,15 @@@
  		nfs_readdirplus_parent_cache_hit(path->dentry);
  out_no_revalidate:
  	/* Only return attributes that were revalidated. */
++<<<<<<< HEAD
 +	stat->result_mask &= request_mask;
 +out_no_update:
 +	generic_fillattr(inode, stat);
++=======
+ 	stat->result_mask = nfs_get_valid_attrmask(inode) | request_mask;
+ 
+ 	generic_fillattr(&init_user_ns, inode, stat);
++>>>>>>> 63cdd7edfd28 (NFS: Fix up statx() results)
  	stat->ino = nfs_compat_user_ino64(NFS_FILEID(inode));
  	if (S_ISDIR(inode->i_mode))
  		stat->blksize = NFS_SERVER(inode)->dtsize;
* Unmerged path fs/nfs/inode.c
