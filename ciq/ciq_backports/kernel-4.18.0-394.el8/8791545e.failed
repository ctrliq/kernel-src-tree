NFS: Move NFS protocol display macros to global header

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-394.el8
commit-author Chuck Lever <chuck.lever@oracle.com>
commit 8791545eda52e8f3bc48e3cd902e38bf4ba4c9de
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-394.el8/8791545e.failed

Refactor: surface useful show_ macros so they can be shared between
the client and server trace code.

Additional clean up:
- Housekeeping: ensure the correct #include files are pulled in
  and add proper TRACE_DEFINE_ENUM where they are missing
- Use a consistent naming scheme for the helpers
- Store values to be displayed symbolically as unsigned long, as
  that is the type that the __print_yada() functions take

	Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
	Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
(cherry picked from commit 8791545eda52e8f3bc48e3cd902e38bf4ba4c9de)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/nfs/nfs4trace.h
#	fs/nfs/nfstrace.h
diff --cc fs/nfs/nfs4trace.h
index 2ef75caad6da,18f149f72160..000000000000
--- a/fs/nfs/nfs4trace.h
+++ b/fs/nfs/nfs4trace.h
@@@ -9,322 -9,10 +9,329 @@@
  #define _TRACE_NFS4_H
  
  #include <linux/tracepoint.h>
++<<<<<<< HEAD
 +
 +TRACE_DEFINE_ENUM(EPERM);
 +TRACE_DEFINE_ENUM(ENOENT);
 +TRACE_DEFINE_ENUM(EIO);
 +TRACE_DEFINE_ENUM(ENXIO);
 +TRACE_DEFINE_ENUM(EACCES);
 +TRACE_DEFINE_ENUM(EEXIST);
 +TRACE_DEFINE_ENUM(EXDEV);
 +TRACE_DEFINE_ENUM(ENOTDIR);
 +TRACE_DEFINE_ENUM(EISDIR);
 +TRACE_DEFINE_ENUM(EFBIG);
 +TRACE_DEFINE_ENUM(ENOSPC);
 +TRACE_DEFINE_ENUM(EROFS);
 +TRACE_DEFINE_ENUM(EMLINK);
 +TRACE_DEFINE_ENUM(ENAMETOOLONG);
 +TRACE_DEFINE_ENUM(ENOTEMPTY);
 +TRACE_DEFINE_ENUM(EDQUOT);
 +TRACE_DEFINE_ENUM(ESTALE);
 +TRACE_DEFINE_ENUM(EBADHANDLE);
 +TRACE_DEFINE_ENUM(EBADCOOKIE);
 +TRACE_DEFINE_ENUM(ENOTSUPP);
 +TRACE_DEFINE_ENUM(ETOOSMALL);
 +TRACE_DEFINE_ENUM(EREMOTEIO);
 +TRACE_DEFINE_ENUM(EBADTYPE);
 +TRACE_DEFINE_ENUM(EAGAIN);
 +TRACE_DEFINE_ENUM(ELOOP);
 +TRACE_DEFINE_ENUM(EOPNOTSUPP);
 +TRACE_DEFINE_ENUM(EDEADLK);
 +TRACE_DEFINE_ENUM(ENOMEM);
 +TRACE_DEFINE_ENUM(EKEYEXPIRED);
 +TRACE_DEFINE_ENUM(ETIMEDOUT);
 +TRACE_DEFINE_ENUM(ERESTARTSYS);
 +TRACE_DEFINE_ENUM(ECONNREFUSED);
 +TRACE_DEFINE_ENUM(ECONNRESET);
 +TRACE_DEFINE_ENUM(ENETUNREACH);
 +TRACE_DEFINE_ENUM(EHOSTUNREACH);
 +TRACE_DEFINE_ENUM(EHOSTDOWN);
 +TRACE_DEFINE_ENUM(EPIPE);
 +TRACE_DEFINE_ENUM(EPFNOSUPPORT);
 +TRACE_DEFINE_ENUM(EPROTONOSUPPORT);
 +
 +TRACE_DEFINE_ENUM(NFS4_OK);
 +TRACE_DEFINE_ENUM(NFS4ERR_ACCESS);
 +TRACE_DEFINE_ENUM(NFS4ERR_ATTRNOTSUPP);
 +TRACE_DEFINE_ENUM(NFS4ERR_ADMIN_REVOKED);
 +TRACE_DEFINE_ENUM(NFS4ERR_BACK_CHAN_BUSY);
 +TRACE_DEFINE_ENUM(NFS4ERR_BADCHAR);
 +TRACE_DEFINE_ENUM(NFS4ERR_BADHANDLE);
 +TRACE_DEFINE_ENUM(NFS4ERR_BADIOMODE);
 +TRACE_DEFINE_ENUM(NFS4ERR_BADLAYOUT);
 +TRACE_DEFINE_ENUM(NFS4ERR_BADLABEL);
 +TRACE_DEFINE_ENUM(NFS4ERR_BADNAME);
 +TRACE_DEFINE_ENUM(NFS4ERR_BADOWNER);
 +TRACE_DEFINE_ENUM(NFS4ERR_BADSESSION);
 +TRACE_DEFINE_ENUM(NFS4ERR_BADSLOT);
 +TRACE_DEFINE_ENUM(NFS4ERR_BADTYPE);
 +TRACE_DEFINE_ENUM(NFS4ERR_BADXDR);
 +TRACE_DEFINE_ENUM(NFS4ERR_BAD_COOKIE);
 +TRACE_DEFINE_ENUM(NFS4ERR_BAD_HIGH_SLOT);
 +TRACE_DEFINE_ENUM(NFS4ERR_BAD_RANGE);
 +TRACE_DEFINE_ENUM(NFS4ERR_BAD_SEQID);
 +TRACE_DEFINE_ENUM(NFS4ERR_BAD_SESSION_DIGEST);
 +TRACE_DEFINE_ENUM(NFS4ERR_BAD_STATEID);
 +TRACE_DEFINE_ENUM(NFS4ERR_CB_PATH_DOWN);
 +TRACE_DEFINE_ENUM(NFS4ERR_CLID_INUSE);
 +TRACE_DEFINE_ENUM(NFS4ERR_CLIENTID_BUSY);
 +TRACE_DEFINE_ENUM(NFS4ERR_COMPLETE_ALREADY);
 +TRACE_DEFINE_ENUM(NFS4ERR_CONN_NOT_BOUND_TO_SESSION);
 +TRACE_DEFINE_ENUM(NFS4ERR_DEADLOCK);
 +TRACE_DEFINE_ENUM(NFS4ERR_DEADSESSION);
 +TRACE_DEFINE_ENUM(NFS4ERR_DELAY);
 +TRACE_DEFINE_ENUM(NFS4ERR_DELEG_ALREADY_WANTED);
 +TRACE_DEFINE_ENUM(NFS4ERR_DELEG_REVOKED);
 +TRACE_DEFINE_ENUM(NFS4ERR_DENIED);
 +TRACE_DEFINE_ENUM(NFS4ERR_DIRDELEG_UNAVAIL);
 +TRACE_DEFINE_ENUM(NFS4ERR_DQUOT);
 +TRACE_DEFINE_ENUM(NFS4ERR_ENCR_ALG_UNSUPP);
 +TRACE_DEFINE_ENUM(NFS4ERR_EXIST);
 +TRACE_DEFINE_ENUM(NFS4ERR_EXPIRED);
 +TRACE_DEFINE_ENUM(NFS4ERR_FBIG);
 +TRACE_DEFINE_ENUM(NFS4ERR_FHEXPIRED);
 +TRACE_DEFINE_ENUM(NFS4ERR_FILE_OPEN);
 +TRACE_DEFINE_ENUM(NFS4ERR_GRACE);
 +TRACE_DEFINE_ENUM(NFS4ERR_HASH_ALG_UNSUPP);
 +TRACE_DEFINE_ENUM(NFS4ERR_INVAL);
 +TRACE_DEFINE_ENUM(NFS4ERR_IO);
 +TRACE_DEFINE_ENUM(NFS4ERR_ISDIR);
 +TRACE_DEFINE_ENUM(NFS4ERR_LAYOUTTRYLATER);
 +TRACE_DEFINE_ENUM(NFS4ERR_LAYOUTUNAVAILABLE);
 +TRACE_DEFINE_ENUM(NFS4ERR_LEASE_MOVED);
 +TRACE_DEFINE_ENUM(NFS4ERR_LOCKED);
 +TRACE_DEFINE_ENUM(NFS4ERR_LOCKS_HELD);
 +TRACE_DEFINE_ENUM(NFS4ERR_LOCK_RANGE);
 +TRACE_DEFINE_ENUM(NFS4ERR_MINOR_VERS_MISMATCH);
 +TRACE_DEFINE_ENUM(NFS4ERR_MLINK);
 +TRACE_DEFINE_ENUM(NFS4ERR_MOVED);
 +TRACE_DEFINE_ENUM(NFS4ERR_NAMETOOLONG);
 +TRACE_DEFINE_ENUM(NFS4ERR_NOENT);
 +TRACE_DEFINE_ENUM(NFS4ERR_NOFILEHANDLE);
 +TRACE_DEFINE_ENUM(NFS4ERR_NOMATCHING_LAYOUT);
 +TRACE_DEFINE_ENUM(NFS4ERR_NOSPC);
 +TRACE_DEFINE_ENUM(NFS4ERR_NOTDIR);
 +TRACE_DEFINE_ENUM(NFS4ERR_NOTEMPTY);
 +TRACE_DEFINE_ENUM(NFS4ERR_NOTSUPP);
 +TRACE_DEFINE_ENUM(NFS4ERR_NOT_ONLY_OP);
 +TRACE_DEFINE_ENUM(NFS4ERR_NOT_SAME);
 +TRACE_DEFINE_ENUM(NFS4ERR_NO_GRACE);
 +TRACE_DEFINE_ENUM(NFS4ERR_NXIO);
 +TRACE_DEFINE_ENUM(NFS4ERR_OLD_STATEID);
 +TRACE_DEFINE_ENUM(NFS4ERR_OPENMODE);
 +TRACE_DEFINE_ENUM(NFS4ERR_OP_ILLEGAL);
 +TRACE_DEFINE_ENUM(NFS4ERR_OP_NOT_IN_SESSION);
 +TRACE_DEFINE_ENUM(NFS4ERR_PERM);
 +TRACE_DEFINE_ENUM(NFS4ERR_PNFS_IO_HOLE);
 +TRACE_DEFINE_ENUM(NFS4ERR_PNFS_NO_LAYOUT);
 +TRACE_DEFINE_ENUM(NFS4ERR_RECALLCONFLICT);
 +TRACE_DEFINE_ENUM(NFS4ERR_RECLAIM_BAD);
 +TRACE_DEFINE_ENUM(NFS4ERR_RECLAIM_CONFLICT);
 +TRACE_DEFINE_ENUM(NFS4ERR_REJECT_DELEG);
 +TRACE_DEFINE_ENUM(NFS4ERR_REP_TOO_BIG);
 +TRACE_DEFINE_ENUM(NFS4ERR_REP_TOO_BIG_TO_CACHE);
 +TRACE_DEFINE_ENUM(NFS4ERR_REQ_TOO_BIG);
 +TRACE_DEFINE_ENUM(NFS4ERR_RESOURCE);
 +TRACE_DEFINE_ENUM(NFS4ERR_RESTOREFH);
 +TRACE_DEFINE_ENUM(NFS4ERR_RETRY_UNCACHED_REP);
 +TRACE_DEFINE_ENUM(NFS4ERR_RETURNCONFLICT);
 +TRACE_DEFINE_ENUM(NFS4ERR_ROFS);
 +TRACE_DEFINE_ENUM(NFS4ERR_SAME);
 +TRACE_DEFINE_ENUM(NFS4ERR_SHARE_DENIED);
 +TRACE_DEFINE_ENUM(NFS4ERR_SEQUENCE_POS);
 +TRACE_DEFINE_ENUM(NFS4ERR_SEQ_FALSE_RETRY);
 +TRACE_DEFINE_ENUM(NFS4ERR_SEQ_MISORDERED);
 +TRACE_DEFINE_ENUM(NFS4ERR_SERVERFAULT);
 +TRACE_DEFINE_ENUM(NFS4ERR_STALE);
 +TRACE_DEFINE_ENUM(NFS4ERR_STALE_CLIENTID);
 +TRACE_DEFINE_ENUM(NFS4ERR_STALE_STATEID);
 +TRACE_DEFINE_ENUM(NFS4ERR_SYMLINK);
 +TRACE_DEFINE_ENUM(NFS4ERR_TOOSMALL);
 +TRACE_DEFINE_ENUM(NFS4ERR_TOO_MANY_OPS);
 +TRACE_DEFINE_ENUM(NFS4ERR_UNKNOWN_LAYOUTTYPE);
 +TRACE_DEFINE_ENUM(NFS4ERR_UNSAFE_COMPOUND);
 +TRACE_DEFINE_ENUM(NFS4ERR_WRONGSEC);
 +TRACE_DEFINE_ENUM(NFS4ERR_WRONG_CRED);
 +TRACE_DEFINE_ENUM(NFS4ERR_WRONG_TYPE);
 +TRACE_DEFINE_ENUM(NFS4ERR_XDEV);
 +
 +TRACE_DEFINE_ENUM(NFS4ERR_RESET_TO_MDS);
 +TRACE_DEFINE_ENUM(NFS4ERR_RESET_TO_PNFS);
 +
 +#define show_nfsv4_errors(error) \
 +	__print_symbolic(error, \
 +		{ NFS4_OK, "OK" }, \
 +		/* Mapped by nfs4_stat_to_errno() */ \
 +		{ EPERM, "EPERM" }, \
 +		{ ENOENT, "ENOENT" }, \
 +		{ EIO, "EIO" }, \
 +		{ ENXIO, "ENXIO" }, \
 +		{ EACCES, "EACCES" }, \
 +		{ EEXIST, "EEXIST" }, \
 +		{ EXDEV, "EXDEV" }, \
 +		{ ENOTDIR, "ENOTDIR" }, \
 +		{ EISDIR, "EISDIR" }, \
 +		{ EFBIG, "EFBIG" }, \
 +		{ ENOSPC, "ENOSPC" }, \
 +		{ EROFS, "EROFS" }, \
 +		{ EMLINK, "EMLINK" }, \
 +		{ ENAMETOOLONG, "ENAMETOOLONG" }, \
 +		{ ENOTEMPTY, "ENOTEMPTY" }, \
 +		{ EDQUOT, "EDQUOT" }, \
 +		{ ESTALE, "ESTALE" }, \
 +		{ EBADHANDLE, "EBADHANDLE" }, \
 +		{ EBADCOOKIE, "EBADCOOKIE" }, \
 +		{ ENOTSUPP, "ENOTSUPP" }, \
 +		{ ETOOSMALL, "ETOOSMALL" }, \
 +		{ EREMOTEIO, "EREMOTEIO" }, \
 +		{ EBADTYPE, "EBADTYPE" }, \
 +		{ EAGAIN, "EAGAIN" }, \
 +		{ ELOOP, "ELOOP" }, \
 +		{ EOPNOTSUPP, "EOPNOTSUPP" }, \
 +		{ EDEADLK, "EDEADLK" }, \
 +		/* RPC errors */ \
 +		{ ENOMEM, "ENOMEM" }, \
 +		{ EKEYEXPIRED, "EKEYEXPIRED" }, \
 +		{ ETIMEDOUT, "ETIMEDOUT" }, \
 +		{ ERESTARTSYS, "ERESTARTSYS" }, \
 +		{ ECONNREFUSED, "ECONNREFUSED" }, \
 +		{ ECONNRESET, "ECONNRESET" }, \
 +		{ ENETUNREACH, "ENETUNREACH" }, \
 +		{ EHOSTUNREACH, "EHOSTUNREACH" }, \
 +		{ EHOSTDOWN, "EHOSTDOWN" }, \
 +		{ EPIPE, "EPIPE" }, \
 +		{ EPFNOSUPPORT, "EPFNOSUPPORT" }, \
 +		{ EPROTONOSUPPORT, "EPROTONOSUPPORT" }, \
 +		/* NFSv4 native errors */ \
 +		{ NFS4ERR_ACCESS, "ACCESS" }, \
 +		{ NFS4ERR_ATTRNOTSUPP, "ATTRNOTSUPP" }, \
 +		{ NFS4ERR_ADMIN_REVOKED, "ADMIN_REVOKED" }, \
 +		{ NFS4ERR_BACK_CHAN_BUSY, "BACK_CHAN_BUSY" }, \
 +		{ NFS4ERR_BADCHAR, "BADCHAR" }, \
 +		{ NFS4ERR_BADHANDLE, "BADHANDLE" }, \
 +		{ NFS4ERR_BADIOMODE, "BADIOMODE" }, \
 +		{ NFS4ERR_BADLAYOUT, "BADLAYOUT" }, \
 +		{ NFS4ERR_BADLABEL, "BADLABEL" }, \
 +		{ NFS4ERR_BADNAME, "BADNAME" }, \
 +		{ NFS4ERR_BADOWNER, "BADOWNER" }, \
 +		{ NFS4ERR_BADSESSION, "BADSESSION" }, \
 +		{ NFS4ERR_BADSLOT, "BADSLOT" }, \
 +		{ NFS4ERR_BADTYPE, "BADTYPE" }, \
 +		{ NFS4ERR_BADXDR, "BADXDR" }, \
 +		{ NFS4ERR_BAD_COOKIE, "BAD_COOKIE" }, \
 +		{ NFS4ERR_BAD_HIGH_SLOT, "BAD_HIGH_SLOT" }, \
 +		{ NFS4ERR_BAD_RANGE, "BAD_RANGE" }, \
 +		{ NFS4ERR_BAD_SEQID, "BAD_SEQID" }, \
 +		{ NFS4ERR_BAD_SESSION_DIGEST, "BAD_SESSION_DIGEST" }, \
 +		{ NFS4ERR_BAD_STATEID, "BAD_STATEID" }, \
 +		{ NFS4ERR_CB_PATH_DOWN, "CB_PATH_DOWN" }, \
 +		{ NFS4ERR_CLID_INUSE, "CLID_INUSE" }, \
 +		{ NFS4ERR_CLIENTID_BUSY, "CLIENTID_BUSY" }, \
 +		{ NFS4ERR_COMPLETE_ALREADY, "COMPLETE_ALREADY" }, \
 +		{ NFS4ERR_CONN_NOT_BOUND_TO_SESSION, \
 +			"CONN_NOT_BOUND_TO_SESSION" }, \
 +		{ NFS4ERR_DEADLOCK, "DEADLOCK" }, \
 +		{ NFS4ERR_DEADSESSION, "DEAD_SESSION" }, \
 +		{ NFS4ERR_DELAY, "DELAY" }, \
 +		{ NFS4ERR_DELEG_ALREADY_WANTED, \
 +			"DELEG_ALREADY_WANTED" }, \
 +		{ NFS4ERR_DELEG_REVOKED, "DELEG_REVOKED" }, \
 +		{ NFS4ERR_DENIED, "DENIED" }, \
 +		{ NFS4ERR_DIRDELEG_UNAVAIL, "DIRDELEG_UNAVAIL" }, \
 +		{ NFS4ERR_DQUOT, "DQUOT" }, \
 +		{ NFS4ERR_ENCR_ALG_UNSUPP, "ENCR_ALG_UNSUPP" }, \
 +		{ NFS4ERR_EXIST, "EXIST" }, \
 +		{ NFS4ERR_EXPIRED, "EXPIRED" }, \
 +		{ NFS4ERR_FBIG, "FBIG" }, \
 +		{ NFS4ERR_FHEXPIRED, "FHEXPIRED" }, \
 +		{ NFS4ERR_FILE_OPEN, "FILE_OPEN" }, \
 +		{ NFS4ERR_GRACE, "GRACE" }, \
 +		{ NFS4ERR_HASH_ALG_UNSUPP, "HASH_ALG_UNSUPP" }, \
 +		{ NFS4ERR_INVAL, "INVAL" }, \
 +		{ NFS4ERR_IO, "IO" }, \
 +		{ NFS4ERR_ISDIR, "ISDIR" }, \
 +		{ NFS4ERR_LAYOUTTRYLATER, "LAYOUTTRYLATER" }, \
 +		{ NFS4ERR_LAYOUTUNAVAILABLE, "LAYOUTUNAVAILABLE" }, \
 +		{ NFS4ERR_LEASE_MOVED, "LEASE_MOVED" }, \
 +		{ NFS4ERR_LOCKED, "LOCKED" }, \
 +		{ NFS4ERR_LOCKS_HELD, "LOCKS_HELD" }, \
 +		{ NFS4ERR_LOCK_RANGE, "LOCK_RANGE" }, \
 +		{ NFS4ERR_MINOR_VERS_MISMATCH, "MINOR_VERS_MISMATCH" }, \
 +		{ NFS4ERR_MLINK, "MLINK" }, \
 +		{ NFS4ERR_MOVED, "MOVED" }, \
 +		{ NFS4ERR_NAMETOOLONG, "NAMETOOLONG" }, \
 +		{ NFS4ERR_NOENT, "NOENT" }, \
 +		{ NFS4ERR_NOFILEHANDLE, "NOFILEHANDLE" }, \
 +		{ NFS4ERR_NOMATCHING_LAYOUT, "NOMATCHING_LAYOUT" }, \
 +		{ NFS4ERR_NOSPC, "NOSPC" }, \
 +		{ NFS4ERR_NOTDIR, "NOTDIR" }, \
 +		{ NFS4ERR_NOTEMPTY, "NOTEMPTY" }, \
 +		{ NFS4ERR_NOTSUPP, "NOTSUPP" }, \
 +		{ NFS4ERR_NOT_ONLY_OP, "NOT_ONLY_OP" }, \
 +		{ NFS4ERR_NOT_SAME, "NOT_SAME" }, \
 +		{ NFS4ERR_NO_GRACE, "NO_GRACE" }, \
 +		{ NFS4ERR_NXIO, "NXIO" }, \
 +		{ NFS4ERR_OLD_STATEID, "OLD_STATEID" }, \
 +		{ NFS4ERR_OPENMODE, "OPENMODE" }, \
 +		{ NFS4ERR_OP_ILLEGAL, "OP_ILLEGAL" }, \
 +		{ NFS4ERR_OP_NOT_IN_SESSION, "OP_NOT_IN_SESSION" }, \
 +		{ NFS4ERR_PERM, "PERM" }, \
 +		{ NFS4ERR_PNFS_IO_HOLE, "PNFS_IO_HOLE" }, \
 +		{ NFS4ERR_PNFS_NO_LAYOUT, "PNFS_NO_LAYOUT" }, \
 +		{ NFS4ERR_RECALLCONFLICT, "RECALLCONFLICT" }, \
 +		{ NFS4ERR_RECLAIM_BAD, "RECLAIM_BAD" }, \
 +		{ NFS4ERR_RECLAIM_CONFLICT, "RECLAIM_CONFLICT" }, \
 +		{ NFS4ERR_REJECT_DELEG, "REJECT_DELEG" }, \
 +		{ NFS4ERR_REP_TOO_BIG, "REP_TOO_BIG" }, \
 +		{ NFS4ERR_REP_TOO_BIG_TO_CACHE, \
 +			"REP_TOO_BIG_TO_CACHE" }, \
 +		{ NFS4ERR_REQ_TOO_BIG, "REQ_TOO_BIG" }, \
 +		{ NFS4ERR_RESOURCE, "RESOURCE" }, \
 +		{ NFS4ERR_RESTOREFH, "RESTOREFH" }, \
 +		{ NFS4ERR_RETRY_UNCACHED_REP, "RETRY_UNCACHED_REP" }, \
 +		{ NFS4ERR_RETURNCONFLICT, "RETURNCONFLICT" }, \
 +		{ NFS4ERR_ROFS, "ROFS" }, \
 +		{ NFS4ERR_SAME, "SAME" }, \
 +		{ NFS4ERR_SHARE_DENIED, "SHARE_DENIED" }, \
 +		{ NFS4ERR_SEQUENCE_POS, "SEQUENCE_POS" }, \
 +		{ NFS4ERR_SEQ_FALSE_RETRY, "SEQ_FALSE_RETRY" }, \
 +		{ NFS4ERR_SEQ_MISORDERED, "SEQ_MISORDERED" }, \
 +		{ NFS4ERR_SERVERFAULT, "SERVERFAULT" }, \
 +		{ NFS4ERR_STALE, "STALE" }, \
 +		{ NFS4ERR_STALE_CLIENTID, "STALE_CLIENTID" }, \
 +		{ NFS4ERR_STALE_STATEID, "STALE_STATEID" }, \
 +		{ NFS4ERR_SYMLINK, "SYMLINK" }, \
 +		{ NFS4ERR_TOOSMALL, "TOOSMALL" }, \
 +		{ NFS4ERR_TOO_MANY_OPS, "TOO_MANY_OPS" }, \
 +		{ NFS4ERR_UNKNOWN_LAYOUTTYPE, "UNKNOWN_LAYOUTTYPE" }, \
 +		{ NFS4ERR_UNSAFE_COMPOUND, "UNSAFE_COMPOUND" }, \
 +		{ NFS4ERR_WRONGSEC, "WRONGSEC" }, \
 +		{ NFS4ERR_WRONG_CRED, "WRONG_CRED" }, \
 +		{ NFS4ERR_WRONG_TYPE, "WRONG_TYPE" }, \
 +		{ NFS4ERR_XDEV, "XDEV" }, \
 +		/* ***** Internal to Linux NFS client ***** */ \
 +		{ NFS4ERR_RESET_TO_MDS, "RESET_TO_MDS" }, \
 +		{ NFS4ERR_RESET_TO_PNFS, "RESET_TO_PNFS" })
++=======
+ #include <trace/events/sunrpc_base.h>
+ 
+ #include <trace/events/fs.h>
+ #include <trace/events/nfs.h>
++>>>>>>> 8791545eda52 (NFS: Move NFS protocol display macros to global header)
 +
 +#define show_open_flags(flags) \
 +	__print_flags(flags, "|", \
 +		{ O_CREAT, "O_CREAT" }, \
 +		{ O_EXCL, "O_EXCL" }, \
 +		{ O_TRUNC, "O_TRUNC" }, \
 +		{ O_DIRECT, "O_DIRECT" })
 +
 +#define show_fmode_flags(mode) \
 +	__print_flags(mode, "|", \
 +		{ ((__force unsigned long)FMODE_READ), "READ" }, \
 +		{ ((__force unsigned long)FMODE_WRITE), "WRITE" }, \
 +		{ ((__force unsigned long)FMODE_EXEC), "EXEC" })
  
  #define show_nfs_fattr_flags(valid) \
  	__print_flags((unsigned long)valid, "|", \
@@@ -729,10 -394,10 +713,10 @@@ DECLARE_EVENT_CLASS(nfs4_xdr_event
  			__entry->error = error;
  		),
  
 -		TP_printk(SUNRPC_TRACE_TASK_SPECIFIER
 -			  " xid=0x%08x error=%ld (%s) operation=%u",
 +		TP_printk(
 +			"task:%u@%d xid=0x%08x error=%ld (%s) operation=%u",
  			__entry->task_id, __entry->client_id, __entry->xid,
- 			-__entry->error, show_nfsv4_errors(__entry->error),
+ 			-__entry->error, show_nfs4_status(__entry->error),
  			__entry->op
  		)
  );
@@@ -847,10 -512,10 +831,10 @@@ DECLARE_EVENT_CLASS(nfs4_open_event
  			"name=%02x:%02x:%llu/%s stateid=%d:0x%08x "
  			"openstateid=%d:0x%08x",
  			 -__entry->error,
- 			 show_nfsv4_errors(__entry->error),
+ 			 show_nfs4_status(__entry->error),
  			 __entry->flags,
 -			 show_fs_fcntl_open_flags(__entry->flags),
 -			 show_fs_fmode_flags(__entry->fmode),
 +			 show_open_flags(__entry->flags),
 +			 show_fmode_flags(__entry->fmode),
  			 MAJOR(__entry->dev), MINOR(__entry->dev),
  			 (unsigned long long)__entry->fileid,
  			 __entry->fhandle,
@@@ -951,8 -616,8 +935,13 @@@ TRACE_EVENT(nfs4_close
  			"error=%ld (%s) fmode=%s fileid=%02x:%02x:%llu "
  			"fhandle=0x%08x openstateid=%d:0x%08x",
  			-__entry->error,
++<<<<<<< HEAD
 +			show_nfsv4_errors(__entry->error),
 +			__entry->fmode ?  show_fmode_flags(__entry->fmode) :
++=======
+ 			show_nfs4_status(__entry->error),
+ 			__entry->fmode ?  show_fs_fmode_flags(__entry->fmode) :
++>>>>>>> 8791545eda52 (NFS: Move NFS protocol display macros to global header)
  					  "closed",
  			MAJOR(__entry->dev), MINOR(__entry->dev),
  			(unsigned long long)__entry->fileid,
@@@ -1024,9 -671,9 +1013,15 @@@ DECLARE_EVENT_CLASS(nfs4_lock_event
  			"fileid=%02x:%02x:%llu fhandle=0x%08x "
  			"stateid=%d:0x%08x",
  			-__entry->error,
++<<<<<<< HEAD
 +			show_nfsv4_errors(__entry->error),
 +			show_lock_cmd(__entry->cmd),
 +			show_lock_type(__entry->type),
++=======
+ 			show_nfs4_status(__entry->error),
+ 			show_fs_fcntl_cmd(__entry->cmd),
+ 			show_fs_fcntl_lock_type(__entry->type),
++>>>>>>> 8791545eda52 (NFS: Move NFS protocol display macros to global header)
  			(long long)__entry->start,
  			(long long)__entry->end,
  			MAJOR(__entry->dev), MINOR(__entry->dev),
@@@ -1100,9 -747,9 +1095,15 @@@ TRACE_EVENT(nfs4_set_lock
  			"fileid=%02x:%02x:%llu fhandle=0x%08x "
  			"stateid=%d:0x%08x lockstateid=%d:0x%08x",
  			-__entry->error,
++<<<<<<< HEAD
 +			show_nfsv4_errors(__entry->error),
 +			show_lock_cmd(__entry->cmd),
 +			show_lock_type(__entry->type),
++=======
+ 			show_nfs4_status(__entry->error),
+ 			show_fs_fcntl_cmd(__entry->cmd),
+ 			show_fs_fcntl_lock_type(__entry->type),
++>>>>>>> 8791545eda52 (NFS: Move NFS protocol display macros to global header)
  			(long long)__entry->start,
  			(long long)__entry->end,
  			MAJOR(__entry->dev), MINOR(__entry->dev),
diff --cc fs/nfs/nfstrace.h
index 549010ee1c4a,76f04aa3367c..000000000000
--- a/fs/nfs/nfstrace.h
+++ b/fs/nfs/nfstrace.h
@@@ -11,43 -11,9 +11,49 @@@
  #include <linux/tracepoint.h>
  #include <linux/iversion.h>
  
++<<<<<<< HEAD
 +TRACE_DEFINE_ENUM(DT_UNKNOWN);
 +TRACE_DEFINE_ENUM(DT_FIFO);
 +TRACE_DEFINE_ENUM(DT_CHR);
 +TRACE_DEFINE_ENUM(DT_DIR);
 +TRACE_DEFINE_ENUM(DT_BLK);
 +TRACE_DEFINE_ENUM(DT_REG);
 +TRACE_DEFINE_ENUM(DT_LNK);
 +TRACE_DEFINE_ENUM(DT_SOCK);
 +TRACE_DEFINE_ENUM(DT_WHT);
 +
 +#define nfs_show_file_type(ftype) \
 +	__print_symbolic(ftype, \
 +			{ DT_UNKNOWN, "UNKNOWN" }, \
 +			{ DT_FIFO, "FIFO" }, \
 +			{ DT_CHR, "CHR" }, \
 +			{ DT_DIR, "DIR" }, \
 +			{ DT_BLK, "BLK" }, \
 +			{ DT_REG, "REG" }, \
 +			{ DT_LNK, "LNK" }, \
 +			{ DT_SOCK, "SOCK" }, \
 +			{ DT_WHT, "WHT" })
 +
 +TRACE_DEFINE_ENUM(NFS_INO_INVALID_DATA);
 +TRACE_DEFINE_ENUM(NFS_INO_INVALID_ATIME);
 +TRACE_DEFINE_ENUM(NFS_INO_INVALID_ACCESS);
 +TRACE_DEFINE_ENUM(NFS_INO_INVALID_ACL);
 +TRACE_DEFINE_ENUM(NFS_INO_REVAL_PAGECACHE);
 +TRACE_DEFINE_ENUM(NFS_INO_REVAL_FORCED);
 +TRACE_DEFINE_ENUM(NFS_INO_INVALID_LABEL);
 +TRACE_DEFINE_ENUM(NFS_INO_INVALID_CHANGE);
 +TRACE_DEFINE_ENUM(NFS_INO_INVALID_CTIME);
 +TRACE_DEFINE_ENUM(NFS_INO_INVALID_MTIME);
 +TRACE_DEFINE_ENUM(NFS_INO_INVALID_SIZE);
 +TRACE_DEFINE_ENUM(NFS_INO_INVALID_OTHER);
 +TRACE_DEFINE_ENUM(NFS_INO_DATA_INVAL_DEFER);
 +TRACE_DEFINE_ENUM(NFS_INO_INVALID_BLOCKS);
 +TRACE_DEFINE_ENUM(NFS_INO_INVALID_XATTR);
++=======
+ #include <trace/events/fs.h>
+ #include <trace/events/nfs.h>
+ #include <trace/events/sunrpc_base.h>
++>>>>>>> 8791545eda52 (NFS: Move NFS protocol display macros to global header)
  
  #define nfs_show_cache_validity(v) \
  	__print_flags(v, "|", \
@@@ -370,9 -343,9 +376,9 @@@ DECLARE_EVENT_CLASS(nfs_lookup_event_do
  
  		TP_printk(
  			"error=%ld (%s) flags=0x%lx (%s) name=%02x:%02x:%llu/%s",
- 			-__entry->error, nfs_show_status(__entry->error),
+ 			-__entry->error, show_nfs_status(__entry->error),
  			__entry->flags,
 -			show_fs_lookup_flags(__entry->flags),
 +			show_lookup_flags(__entry->flags),
  			MAJOR(__entry->dev), MINOR(__entry->dev),
  			(unsigned long long)__entry->dir,
  			__get_str(name)
@@@ -501,10 -434,10 +507,10 @@@ TRACE_EVENT(nfs_atomic_open_exit
  		TP_printk(
  			"error=%ld (%s) flags=0x%lx (%s) fmode=%s "
  			"name=%02x:%02x:%llu/%s",
- 			-__entry->error, nfs_show_status(__entry->error),
+ 			-__entry->error, show_nfs_status(__entry->error),
  			__entry->flags,
 -			show_fs_fcntl_open_flags(__entry->flags),
 -			show_fs_fmode_flags(__entry->fmode),
 +			show_open_flags(__entry->flags),
 +			show_fmode_flags(__entry->fmode),
  			MAJOR(__entry->dev), MINOR(__entry->dev),
  			(unsigned long long)__entry->dir,
  			__get_str(name)
@@@ -572,9 -505,9 +578,9 @@@ TRACE_EVENT(nfs_create_exit
  
  		TP_printk(
  			"error=%ld (%s) flags=0x%lx (%s) name=%02x:%02x:%llu/%s",
- 			-__entry->error, nfs_show_status(__entry->error),
+ 			-__entry->error, show_nfs_status(__entry->error),
  			__entry->flags,
 -			show_fs_fcntl_open_flags(__entry->flags),
 +			show_open_flags(__entry->flags),
  			MAJOR(__entry->dev), MINOR(__entry->dev),
  			(unsigned long long)__entry->dir,
  			__get_str(name)
* Unmerged path fs/nfs/nfs4trace.h
* Unmerged path fs/nfs/nfstrace.h
diff --git a/fs/nfs/pnfs.h b/fs/nfs/pnfs.h
index a0f6ff094b3a..f4d7548d67b2 100644
--- a/fs/nfs/pnfs.h
+++ b/fs/nfs/pnfs.h
@@ -82,10 +82,6 @@ enum pnfs_try_status {
 	PNFS_TRY_AGAIN     = 2,
 };
 
-/* error codes for internal use */
-#define NFS4ERR_RESET_TO_MDS   12001
-#define NFS4ERR_RESET_TO_PNFS  12002
-
 #ifdef CONFIG_NFS_V4_1
 
 #define LAYOUT_NFSV4_1_MODULE_PREFIX "nfs-layouttype4"
diff --git a/fs/nfsd/trace.h b/fs/nfsd/trace.h
index e089e9018c24..e43a69781a55 100644
--- a/fs/nfsd/trace.h
+++ b/fs/nfsd/trace.h
@@ -9,6 +9,7 @@
 #define _NFSD_TRACE_H
 
 #include <linux/tracepoint.h>
+
 #include "export.h"
 #include "nfsfh.h"
 
diff --git a/include/linux/nfs4.h b/include/linux/nfs4.h
index 686d3a6ef63a..c4f451a331c3 100644
--- a/include/linux/nfs4.h
+++ b/include/linux/nfs4.h
@@ -291,6 +291,10 @@ enum nfsstat4 {
 	NFS4ERR_XATTR2BIG      = 10096,
 };
 
+/* error codes for internal client use */
+#define NFS4ERR_RESET_TO_MDS   12001
+#define NFS4ERR_RESET_TO_PNFS  12002
+
 static inline bool seqid_mutating_err(u32 err)
 {
 	/* See RFC 7530, section 9.1.7 */
diff --git a/include/trace/events/nfs.h b/include/trace/events/nfs.h
new file mode 100644
index 000000000000..09ffdbb04134
--- /dev/null
+++ b/include/trace/events/nfs.h
@@ -0,0 +1,375 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/*
+ * Display helpers for NFS protocol elements
+ *
+ * Author: Chuck Lever <chuck.lever@oracle.com>
+ *
+ * Copyright (c) 2020, Oracle and/or its affiliates.
+ */
+
+#include <linux/nfs.h>
+#include <linux/nfs4.h>
+#include <uapi/linux/nfs.h>
+
+TRACE_DEFINE_ENUM(NFS_OK);
+TRACE_DEFINE_ENUM(NFSERR_PERM);
+TRACE_DEFINE_ENUM(NFSERR_NOENT);
+TRACE_DEFINE_ENUM(NFSERR_IO);
+TRACE_DEFINE_ENUM(NFSERR_NXIO);
+TRACE_DEFINE_ENUM(NFSERR_EAGAIN);
+TRACE_DEFINE_ENUM(NFSERR_ACCES);
+TRACE_DEFINE_ENUM(NFSERR_EXIST);
+TRACE_DEFINE_ENUM(NFSERR_XDEV);
+TRACE_DEFINE_ENUM(NFSERR_NODEV);
+TRACE_DEFINE_ENUM(NFSERR_NOTDIR);
+TRACE_DEFINE_ENUM(NFSERR_ISDIR);
+TRACE_DEFINE_ENUM(NFSERR_INVAL);
+TRACE_DEFINE_ENUM(NFSERR_FBIG);
+TRACE_DEFINE_ENUM(NFSERR_NOSPC);
+TRACE_DEFINE_ENUM(NFSERR_ROFS);
+TRACE_DEFINE_ENUM(NFSERR_MLINK);
+TRACE_DEFINE_ENUM(NFSERR_OPNOTSUPP);
+TRACE_DEFINE_ENUM(NFSERR_NAMETOOLONG);
+TRACE_DEFINE_ENUM(NFSERR_NOTEMPTY);
+TRACE_DEFINE_ENUM(NFSERR_DQUOT);
+TRACE_DEFINE_ENUM(NFSERR_STALE);
+TRACE_DEFINE_ENUM(NFSERR_REMOTE);
+TRACE_DEFINE_ENUM(NFSERR_WFLUSH);
+TRACE_DEFINE_ENUM(NFSERR_BADHANDLE);
+TRACE_DEFINE_ENUM(NFSERR_NOT_SYNC);
+TRACE_DEFINE_ENUM(NFSERR_BAD_COOKIE);
+TRACE_DEFINE_ENUM(NFSERR_NOTSUPP);
+TRACE_DEFINE_ENUM(NFSERR_TOOSMALL);
+TRACE_DEFINE_ENUM(NFSERR_SERVERFAULT);
+TRACE_DEFINE_ENUM(NFSERR_BADTYPE);
+TRACE_DEFINE_ENUM(NFSERR_JUKEBOX);
+
+#define show_nfs_status(x) \
+	__print_symbolic(x, \
+		{ NFS_OK,			"OK" }, \
+		{ NFSERR_PERM,			"PERM" }, \
+		{ NFSERR_NOENT,			"NOENT" }, \
+		{ NFSERR_IO,			"IO" }, \
+		{ NFSERR_NXIO,			"NXIO" }, \
+		{ ECHILD,			"CHILD" }, \
+		{ NFSERR_EAGAIN,		"AGAIN" }, \
+		{ NFSERR_ACCES,			"ACCES" }, \
+		{ NFSERR_EXIST,			"EXIST" }, \
+		{ NFSERR_XDEV,			"XDEV" }, \
+		{ NFSERR_NODEV,			"NODEV" }, \
+		{ NFSERR_NOTDIR,		"NOTDIR" }, \
+		{ NFSERR_ISDIR,			"ISDIR" }, \
+		{ NFSERR_INVAL,			"INVAL" }, \
+		{ NFSERR_FBIG,			"FBIG" }, \
+		{ NFSERR_NOSPC,			"NOSPC" }, \
+		{ NFSERR_ROFS,			"ROFS" }, \
+		{ NFSERR_MLINK,			"MLINK" }, \
+		{ NFSERR_OPNOTSUPP,		"OPNOTSUPP" }, \
+		{ NFSERR_NAMETOOLONG,		"NAMETOOLONG" }, \
+		{ NFSERR_NOTEMPTY,		"NOTEMPTY" }, \
+		{ NFSERR_DQUOT,			"DQUOT" }, \
+		{ NFSERR_STALE,			"STALE" }, \
+		{ NFSERR_REMOTE,		"REMOTE" }, \
+		{ NFSERR_WFLUSH,		"WFLUSH" }, \
+		{ NFSERR_BADHANDLE,		"BADHANDLE" }, \
+		{ NFSERR_NOT_SYNC,		"NOTSYNC" }, \
+		{ NFSERR_BAD_COOKIE,		"BADCOOKIE" }, \
+		{ NFSERR_NOTSUPP,		"NOTSUPP" }, \
+		{ NFSERR_TOOSMALL,		"TOOSMALL" }, \
+		{ NFSERR_SERVERFAULT,		"REMOTEIO" }, \
+		{ NFSERR_BADTYPE,		"BADTYPE" }, \
+		{ NFSERR_JUKEBOX,		"JUKEBOX" })
+
+TRACE_DEFINE_ENUM(NFS_UNSTABLE);
+TRACE_DEFINE_ENUM(NFS_DATA_SYNC);
+TRACE_DEFINE_ENUM(NFS_FILE_SYNC);
+
+#define show_nfs_stable_how(x) \
+	__print_symbolic(x, \
+		{ NFS_UNSTABLE,			"UNSTABLE" }, \
+		{ NFS_DATA_SYNC,		"DATA_SYNC" }, \
+		{ NFS_FILE_SYNC,		"FILE_SYNC" })
+
+TRACE_DEFINE_ENUM(NFS4_OK);
+TRACE_DEFINE_ENUM(NFS4ERR_ACCESS);
+TRACE_DEFINE_ENUM(NFS4ERR_ATTRNOTSUPP);
+TRACE_DEFINE_ENUM(NFS4ERR_ADMIN_REVOKED);
+TRACE_DEFINE_ENUM(NFS4ERR_BACK_CHAN_BUSY);
+TRACE_DEFINE_ENUM(NFS4ERR_BADCHAR);
+TRACE_DEFINE_ENUM(NFS4ERR_BADHANDLE);
+TRACE_DEFINE_ENUM(NFS4ERR_BADIOMODE);
+TRACE_DEFINE_ENUM(NFS4ERR_BADLAYOUT);
+TRACE_DEFINE_ENUM(NFS4ERR_BADLABEL);
+TRACE_DEFINE_ENUM(NFS4ERR_BADNAME);
+TRACE_DEFINE_ENUM(NFS4ERR_BADOWNER);
+TRACE_DEFINE_ENUM(NFS4ERR_BADSESSION);
+TRACE_DEFINE_ENUM(NFS4ERR_BADSLOT);
+TRACE_DEFINE_ENUM(NFS4ERR_BADTYPE);
+TRACE_DEFINE_ENUM(NFS4ERR_BADXDR);
+TRACE_DEFINE_ENUM(NFS4ERR_BAD_COOKIE);
+TRACE_DEFINE_ENUM(NFS4ERR_BAD_HIGH_SLOT);
+TRACE_DEFINE_ENUM(NFS4ERR_BAD_RANGE);
+TRACE_DEFINE_ENUM(NFS4ERR_BAD_SEQID);
+TRACE_DEFINE_ENUM(NFS4ERR_BAD_SESSION_DIGEST);
+TRACE_DEFINE_ENUM(NFS4ERR_BAD_STATEID);
+TRACE_DEFINE_ENUM(NFS4ERR_CB_PATH_DOWN);
+TRACE_DEFINE_ENUM(NFS4ERR_CLID_INUSE);
+TRACE_DEFINE_ENUM(NFS4ERR_CLIENTID_BUSY);
+TRACE_DEFINE_ENUM(NFS4ERR_COMPLETE_ALREADY);
+TRACE_DEFINE_ENUM(NFS4ERR_CONN_NOT_BOUND_TO_SESSION);
+TRACE_DEFINE_ENUM(NFS4ERR_DEADLOCK);
+TRACE_DEFINE_ENUM(NFS4ERR_DEADSESSION);
+TRACE_DEFINE_ENUM(NFS4ERR_DELAY);
+TRACE_DEFINE_ENUM(NFS4ERR_DELEG_ALREADY_WANTED);
+TRACE_DEFINE_ENUM(NFS4ERR_DELEG_REVOKED);
+TRACE_DEFINE_ENUM(NFS4ERR_DENIED);
+TRACE_DEFINE_ENUM(NFS4ERR_DIRDELEG_UNAVAIL);
+TRACE_DEFINE_ENUM(NFS4ERR_DQUOT);
+TRACE_DEFINE_ENUM(NFS4ERR_ENCR_ALG_UNSUPP);
+TRACE_DEFINE_ENUM(NFS4ERR_EXIST);
+TRACE_DEFINE_ENUM(NFS4ERR_EXPIRED);
+TRACE_DEFINE_ENUM(NFS4ERR_FBIG);
+TRACE_DEFINE_ENUM(NFS4ERR_FHEXPIRED);
+TRACE_DEFINE_ENUM(NFS4ERR_FILE_OPEN);
+TRACE_DEFINE_ENUM(NFS4ERR_GRACE);
+TRACE_DEFINE_ENUM(NFS4ERR_HASH_ALG_UNSUPP);
+TRACE_DEFINE_ENUM(NFS4ERR_INVAL);
+TRACE_DEFINE_ENUM(NFS4ERR_IO);
+TRACE_DEFINE_ENUM(NFS4ERR_ISDIR);
+TRACE_DEFINE_ENUM(NFS4ERR_LAYOUTTRYLATER);
+TRACE_DEFINE_ENUM(NFS4ERR_LAYOUTUNAVAILABLE);
+TRACE_DEFINE_ENUM(NFS4ERR_LEASE_MOVED);
+TRACE_DEFINE_ENUM(NFS4ERR_LOCKED);
+TRACE_DEFINE_ENUM(NFS4ERR_LOCKS_HELD);
+TRACE_DEFINE_ENUM(NFS4ERR_LOCK_RANGE);
+TRACE_DEFINE_ENUM(NFS4ERR_MINOR_VERS_MISMATCH);
+TRACE_DEFINE_ENUM(NFS4ERR_MLINK);
+TRACE_DEFINE_ENUM(NFS4ERR_MOVED);
+TRACE_DEFINE_ENUM(NFS4ERR_NAMETOOLONG);
+TRACE_DEFINE_ENUM(NFS4ERR_NOENT);
+TRACE_DEFINE_ENUM(NFS4ERR_NOFILEHANDLE);
+TRACE_DEFINE_ENUM(NFS4ERR_NOMATCHING_LAYOUT);
+TRACE_DEFINE_ENUM(NFS4ERR_NOSPC);
+TRACE_DEFINE_ENUM(NFS4ERR_NOTDIR);
+TRACE_DEFINE_ENUM(NFS4ERR_NOTEMPTY);
+TRACE_DEFINE_ENUM(NFS4ERR_NOTSUPP);
+TRACE_DEFINE_ENUM(NFS4ERR_NOT_ONLY_OP);
+TRACE_DEFINE_ENUM(NFS4ERR_NOT_SAME);
+TRACE_DEFINE_ENUM(NFS4ERR_NO_GRACE);
+TRACE_DEFINE_ENUM(NFS4ERR_NXIO);
+TRACE_DEFINE_ENUM(NFS4ERR_OLD_STATEID);
+TRACE_DEFINE_ENUM(NFS4ERR_OPENMODE);
+TRACE_DEFINE_ENUM(NFS4ERR_OP_ILLEGAL);
+TRACE_DEFINE_ENUM(NFS4ERR_OP_NOT_IN_SESSION);
+TRACE_DEFINE_ENUM(NFS4ERR_PERM);
+TRACE_DEFINE_ENUM(NFS4ERR_PNFS_IO_HOLE);
+TRACE_DEFINE_ENUM(NFS4ERR_PNFS_NO_LAYOUT);
+TRACE_DEFINE_ENUM(NFS4ERR_RECALLCONFLICT);
+TRACE_DEFINE_ENUM(NFS4ERR_RECLAIM_BAD);
+TRACE_DEFINE_ENUM(NFS4ERR_RECLAIM_CONFLICT);
+TRACE_DEFINE_ENUM(NFS4ERR_REJECT_DELEG);
+TRACE_DEFINE_ENUM(NFS4ERR_REP_TOO_BIG);
+TRACE_DEFINE_ENUM(NFS4ERR_REP_TOO_BIG_TO_CACHE);
+TRACE_DEFINE_ENUM(NFS4ERR_REQ_TOO_BIG);
+TRACE_DEFINE_ENUM(NFS4ERR_RESOURCE);
+TRACE_DEFINE_ENUM(NFS4ERR_RESTOREFH);
+TRACE_DEFINE_ENUM(NFS4ERR_RETRY_UNCACHED_REP);
+TRACE_DEFINE_ENUM(NFS4ERR_RETURNCONFLICT);
+TRACE_DEFINE_ENUM(NFS4ERR_ROFS);
+TRACE_DEFINE_ENUM(NFS4ERR_SAME);
+TRACE_DEFINE_ENUM(NFS4ERR_SHARE_DENIED);
+TRACE_DEFINE_ENUM(NFS4ERR_SEQUENCE_POS);
+TRACE_DEFINE_ENUM(NFS4ERR_SEQ_FALSE_RETRY);
+TRACE_DEFINE_ENUM(NFS4ERR_SEQ_MISORDERED);
+TRACE_DEFINE_ENUM(NFS4ERR_SERVERFAULT);
+TRACE_DEFINE_ENUM(NFS4ERR_STALE);
+TRACE_DEFINE_ENUM(NFS4ERR_STALE_CLIENTID);
+TRACE_DEFINE_ENUM(NFS4ERR_STALE_STATEID);
+TRACE_DEFINE_ENUM(NFS4ERR_SYMLINK);
+TRACE_DEFINE_ENUM(NFS4ERR_TOOSMALL);
+TRACE_DEFINE_ENUM(NFS4ERR_TOO_MANY_OPS);
+TRACE_DEFINE_ENUM(NFS4ERR_UNKNOWN_LAYOUTTYPE);
+TRACE_DEFINE_ENUM(NFS4ERR_UNSAFE_COMPOUND);
+TRACE_DEFINE_ENUM(NFS4ERR_WRONGSEC);
+TRACE_DEFINE_ENUM(NFS4ERR_WRONG_CRED);
+TRACE_DEFINE_ENUM(NFS4ERR_WRONG_TYPE);
+TRACE_DEFINE_ENUM(NFS4ERR_XDEV);
+
+TRACE_DEFINE_ENUM(NFS4ERR_RESET_TO_MDS);
+TRACE_DEFINE_ENUM(NFS4ERR_RESET_TO_PNFS);
+
+#define show_nfs4_status(x) \
+	__print_symbolic(x, \
+		{ NFS4_OK,			"OK" }, \
+		{ EPERM,			"EPERM" }, \
+		{ ENOENT,			"ENOENT" }, \
+		{ EIO,				"EIO" }, \
+		{ ENXIO,			"ENXIO" }, \
+		{ EACCES,			"EACCES" }, \
+		{ EEXIST,			"EEXIST" }, \
+		{ EXDEV,			"EXDEV" }, \
+		{ ENOTDIR,			"ENOTDIR" }, \
+		{ EISDIR,			"EISDIR" }, \
+		{ EFBIG,			"EFBIG" }, \
+		{ ENOSPC,			"ENOSPC" }, \
+		{ EROFS,			"EROFS" }, \
+		{ EMLINK,			"EMLINK" }, \
+		{ ENAMETOOLONG,			"ENAMETOOLONG" }, \
+		{ ENOTEMPTY,			"ENOTEMPTY" }, \
+		{ EDQUOT,			"EDQUOT" }, \
+		{ ESTALE,			"ESTALE" }, \
+		{ EBADHANDLE,			"EBADHANDLE" }, \
+		{ EBADCOOKIE,			"EBADCOOKIE" }, \
+		{ ENOTSUPP,			"ENOTSUPP" }, \
+		{ ETOOSMALL,			"ETOOSMALL" }, \
+		{ EREMOTEIO,			"EREMOTEIO" }, \
+		{ EBADTYPE,			"EBADTYPE" }, \
+		{ EAGAIN,			"EAGAIN" }, \
+		{ ELOOP,			"ELOOP" }, \
+		{ EOPNOTSUPP,			"EOPNOTSUPP" }, \
+		{ EDEADLK,			"EDEADLK" }, \
+		{ ENOMEM,			"ENOMEM" }, \
+		{ EKEYEXPIRED,			"EKEYEXPIRED" }, \
+		{ ETIMEDOUT,			"ETIMEDOUT" }, \
+		{ ERESTARTSYS,			"ERESTARTSYS" }, \
+		{ ECONNREFUSED,			"ECONNREFUSED" }, \
+		{ ECONNRESET,			"ECONNRESET" }, \
+		{ ENETUNREACH,			"ENETUNREACH" }, \
+		{ EHOSTUNREACH,			"EHOSTUNREACH" }, \
+		{ EHOSTDOWN,			"EHOSTDOWN" }, \
+		{ EPIPE,			"EPIPE" }, \
+		{ EPFNOSUPPORT,			"EPFNOSUPPORT" }, \
+		{ EPROTONOSUPPORT,		"EPROTONOSUPPORT" }, \
+		{ NFS4ERR_ACCESS,		"ACCESS" }, \
+		{ NFS4ERR_ATTRNOTSUPP,		"ATTRNOTSUPP" }, \
+		{ NFS4ERR_ADMIN_REVOKED,	"ADMIN_REVOKED" }, \
+		{ NFS4ERR_BACK_CHAN_BUSY,	"BACK_CHAN_BUSY" }, \
+		{ NFS4ERR_BADCHAR,		"BADCHAR" }, \
+		{ NFS4ERR_BADHANDLE,		"BADHANDLE" }, \
+		{ NFS4ERR_BADIOMODE,		"BADIOMODE" }, \
+		{ NFS4ERR_BADLAYOUT,		"BADLAYOUT" }, \
+		{ NFS4ERR_BADLABEL,		"BADLABEL" }, \
+		{ NFS4ERR_BADNAME,		"BADNAME" }, \
+		{ NFS4ERR_BADOWNER,		"BADOWNER" }, \
+		{ NFS4ERR_BADSESSION,		"BADSESSION" }, \
+		{ NFS4ERR_BADSLOT,		"BADSLOT" }, \
+		{ NFS4ERR_BADTYPE,		"BADTYPE" }, \
+		{ NFS4ERR_BADXDR,		"BADXDR" }, \
+		{ NFS4ERR_BAD_COOKIE,		"BAD_COOKIE" }, \
+		{ NFS4ERR_BAD_HIGH_SLOT,	"BAD_HIGH_SLOT" }, \
+		{ NFS4ERR_BAD_RANGE,		"BAD_RANGE" }, \
+		{ NFS4ERR_BAD_SEQID,		"BAD_SEQID" }, \
+		{ NFS4ERR_BAD_SESSION_DIGEST,	"BAD_SESSION_DIGEST" }, \
+		{ NFS4ERR_BAD_STATEID,		"BAD_STATEID" }, \
+		{ NFS4ERR_CB_PATH_DOWN,		"CB_PATH_DOWN" }, \
+		{ NFS4ERR_CLID_INUSE,		"CLID_INUSE" }, \
+		{ NFS4ERR_CLIENTID_BUSY,	"CLIENTID_BUSY" }, \
+		{ NFS4ERR_COMPLETE_ALREADY,	"COMPLETE_ALREADY" }, \
+		{ NFS4ERR_CONN_NOT_BOUND_TO_SESSION, "CONN_NOT_BOUND_TO_SESSION" }, \
+		{ NFS4ERR_DEADLOCK,		"DEADLOCK" }, \
+		{ NFS4ERR_DEADSESSION,		"DEAD_SESSION" }, \
+		{ NFS4ERR_DELAY,		"DELAY" }, \
+		{ NFS4ERR_DELEG_ALREADY_WANTED,	"DELEG_ALREADY_WANTED" }, \
+		{ NFS4ERR_DELEG_REVOKED,	"DELEG_REVOKED" }, \
+		{ NFS4ERR_DENIED,		"DENIED" }, \
+		{ NFS4ERR_DIRDELEG_UNAVAIL,	"DIRDELEG_UNAVAIL" }, \
+		{ NFS4ERR_DQUOT,		"DQUOT" }, \
+		{ NFS4ERR_ENCR_ALG_UNSUPP,	"ENCR_ALG_UNSUPP" }, \
+		{ NFS4ERR_EXIST,		"EXIST" }, \
+		{ NFS4ERR_EXPIRED,		"EXPIRED" }, \
+		{ NFS4ERR_FBIG,			"FBIG" }, \
+		{ NFS4ERR_FHEXPIRED,		"FHEXPIRED" }, \
+		{ NFS4ERR_FILE_OPEN,		"FILE_OPEN" }, \
+		{ NFS4ERR_GRACE,		"GRACE" }, \
+		{ NFS4ERR_HASH_ALG_UNSUPP,	"HASH_ALG_UNSUPP" }, \
+		{ NFS4ERR_INVAL,		"INVAL" }, \
+		{ NFS4ERR_IO,			"IO" }, \
+		{ NFS4ERR_ISDIR,		"ISDIR" }, \
+		{ NFS4ERR_LAYOUTTRYLATER,	"LAYOUTTRYLATER" }, \
+		{ NFS4ERR_LAYOUTUNAVAILABLE,	"LAYOUTUNAVAILABLE" }, \
+		{ NFS4ERR_LEASE_MOVED,		"LEASE_MOVED" }, \
+		{ NFS4ERR_LOCKED,		"LOCKED" }, \
+		{ NFS4ERR_LOCKS_HELD,		"LOCKS_HELD" }, \
+		{ NFS4ERR_LOCK_RANGE,		"LOCK_RANGE" }, \
+		{ NFS4ERR_MINOR_VERS_MISMATCH,	"MINOR_VERS_MISMATCH" }, \
+		{ NFS4ERR_MLINK,		"MLINK" }, \
+		{ NFS4ERR_MOVED,		"MOVED" }, \
+		{ NFS4ERR_NAMETOOLONG,		"NAMETOOLONG" }, \
+		{ NFS4ERR_NOENT,		"NOENT" }, \
+		{ NFS4ERR_NOFILEHANDLE,		"NOFILEHANDLE" }, \
+		{ NFS4ERR_NOMATCHING_LAYOUT,	"NOMATCHING_LAYOUT" }, \
+		{ NFS4ERR_NOSPC,		"NOSPC" }, \
+		{ NFS4ERR_NOTDIR,		"NOTDIR" }, \
+		{ NFS4ERR_NOTEMPTY,		"NOTEMPTY" }, \
+		{ NFS4ERR_NOTSUPP,		"NOTSUPP" }, \
+		{ NFS4ERR_NOT_ONLY_OP,		"NOT_ONLY_OP" }, \
+		{ NFS4ERR_NOT_SAME,		"NOT_SAME" }, \
+		{ NFS4ERR_NO_GRACE,		"NO_GRACE" }, \
+		{ NFS4ERR_NXIO,			"NXIO" }, \
+		{ NFS4ERR_OLD_STATEID,		"OLD_STATEID" }, \
+		{ NFS4ERR_OPENMODE,		"OPENMODE" }, \
+		{ NFS4ERR_OP_ILLEGAL,		"OP_ILLEGAL" }, \
+		{ NFS4ERR_OP_NOT_IN_SESSION,	"OP_NOT_IN_SESSION" }, \
+		{ NFS4ERR_PERM,			"PERM" }, \
+		{ NFS4ERR_PNFS_IO_HOLE,		"PNFS_IO_HOLE" }, \
+		{ NFS4ERR_PNFS_NO_LAYOUT,	"PNFS_NO_LAYOUT" }, \
+		{ NFS4ERR_RECALLCONFLICT,	"RECALLCONFLICT" }, \
+		{ NFS4ERR_RECLAIM_BAD,		"RECLAIM_BAD" }, \
+		{ NFS4ERR_RECLAIM_CONFLICT,	"RECLAIM_CONFLICT" }, \
+		{ NFS4ERR_REJECT_DELEG,		"REJECT_DELEG" }, \
+		{ NFS4ERR_REP_TOO_BIG,		"REP_TOO_BIG" }, \
+		{ NFS4ERR_REP_TOO_BIG_TO_CACHE,	"REP_TOO_BIG_TO_CACHE" }, \
+		{ NFS4ERR_REQ_TOO_BIG,		"REQ_TOO_BIG" }, \
+		{ NFS4ERR_RESOURCE,		"RESOURCE" }, \
+		{ NFS4ERR_RESTOREFH,		"RESTOREFH" }, \
+		{ NFS4ERR_RETRY_UNCACHED_REP,	"RETRY_UNCACHED_REP" }, \
+		{ NFS4ERR_RETURNCONFLICT,	"RETURNCONFLICT" }, \
+		{ NFS4ERR_ROFS,			"ROFS" }, \
+		{ NFS4ERR_SAME,			"SAME" }, \
+		{ NFS4ERR_SHARE_DENIED,		"SHARE_DENIED" }, \
+		{ NFS4ERR_SEQUENCE_POS,		"SEQUENCE_POS" }, \
+		{ NFS4ERR_SEQ_FALSE_RETRY,	"SEQ_FALSE_RETRY" }, \
+		{ NFS4ERR_SEQ_MISORDERED,	"SEQ_MISORDERED" }, \
+		{ NFS4ERR_SERVERFAULT,		"SERVERFAULT" }, \
+		{ NFS4ERR_STALE,		"STALE" }, \
+		{ NFS4ERR_STALE_CLIENTID,	"STALE_CLIENTID" }, \
+		{ NFS4ERR_STALE_STATEID,	"STALE_STATEID" }, \
+		{ NFS4ERR_SYMLINK,		"SYMLINK" }, \
+		{ NFS4ERR_TOOSMALL,		"TOOSMALL" }, \
+		{ NFS4ERR_TOO_MANY_OPS,		"TOO_MANY_OPS" }, \
+		{ NFS4ERR_UNKNOWN_LAYOUTTYPE,	"UNKNOWN_LAYOUTTYPE" }, \
+		{ NFS4ERR_UNSAFE_COMPOUND,	"UNSAFE_COMPOUND" }, \
+		{ NFS4ERR_WRONGSEC,		"WRONGSEC" }, \
+		{ NFS4ERR_WRONG_CRED,		"WRONG_CRED" }, \
+		{ NFS4ERR_WRONG_TYPE,		"WRONG_TYPE" }, \
+		{ NFS4ERR_XDEV,			"XDEV" }, \
+		/* ***** Internal to Linux NFS client ***** */ \
+		{ NFS4ERR_RESET_TO_MDS,		"RESET_TO_MDS" }, \
+		{ NFS4ERR_RESET_TO_PNFS,	"RESET_TO_PNFS" })
+
+#define show_nfs4_verifier(x) \
+	__print_hex_str(x, NFS4_VERIFIER_SIZE)
+
+TRACE_DEFINE_ENUM(IOMODE_READ);
+TRACE_DEFINE_ENUM(IOMODE_RW);
+TRACE_DEFINE_ENUM(IOMODE_ANY);
+
+#define show_pnfs_layout_iomode(x) \
+	__print_symbolic(x, \
+		{ IOMODE_READ,			"READ" }, \
+		{ IOMODE_RW,			"RW" }, \
+		{ IOMODE_ANY,			"ANY" })
+
+#define show_nfs4_seq4_status(x) \
+	__print_flags(x, "|", \
+		{ SEQ4_STATUS_CB_PATH_DOWN,		"CB_PATH_DOWN" }, \
+		{ SEQ4_STATUS_CB_GSS_CONTEXTS_EXPIRING,	"CB_GSS_CONTEXTS_EXPIRING" }, \
+		{ SEQ4_STATUS_CB_GSS_CONTEXTS_EXPIRED,	"CB_GSS_CONTEXTS_EXPIRED" }, \
+		{ SEQ4_STATUS_EXPIRED_ALL_STATE_REVOKED, "EXPIRED_ALL_STATE_REVOKED" }, \
+		{ SEQ4_STATUS_EXPIRED_SOME_STATE_REVOKED, "EXPIRED_SOME_STATE_REVOKED" }, \
+		{ SEQ4_STATUS_ADMIN_STATE_REVOKED,	"ADMIN_STATE_REVOKED" }, \
+		{ SEQ4_STATUS_RECALLABLE_STATE_REVOKED,	"RECALLABLE_STATE_REVOKED" }, \
+		{ SEQ4_STATUS_LEASE_MOVED,		"LEASE_MOVED" }, \
+		{ SEQ4_STATUS_RESTART_RECLAIM_NEEDED,	"RESTART_RECLAIM_NEEDED" }, \
+		{ SEQ4_STATUS_CB_PATH_DOWN_SESSION,	"CB_PATH_DOWN_SESSION" }, \
+		{ SEQ4_STATUS_BACKCHANNEL_FAULT,	"BACKCHANNEL_FAULT" })
