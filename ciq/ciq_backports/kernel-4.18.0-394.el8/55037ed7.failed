uapi/linux/stddef.h: Add include guards

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-394.el8
commit-author Tadeusz Struk <tadeusz.struk@linaro.org>
commit 55037ed7bdc62151a726f5685f88afa6a82959b1
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-394.el8/55037ed7.failed

Add include guard wrapper define to uapi/linux/stddef.h to prevent macro
redefinition errors when stddef.h is included more than once. This was not
needed before since the only contents already used a redefinition test.

	Signed-off-by: Tadeusz Struk <tadeusz.struk@linaro.org>
Link: https://lore.kernel.org/r/20220329171252.57279-1-tadeusz.struk@linaro.org
Fixes: 50d7bd38c3aa ("stddef: Introduce struct_group() helper macro")
	Cc: stable@vger.kernel.org
	Signed-off-by: Kees Cook <keescook@chromium.org>
(cherry picked from commit 55037ed7bdc62151a726f5685f88afa6a82959b1)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/uapi/linux/stddef.h
diff --cc include/uapi/linux/stddef.h
index ee8220f8dcf5,7837ba4fe728..000000000000
--- a/include/uapi/linux/stddef.h
+++ b/include/uapi/linux/stddef.h
@@@ -4,3 -7,41 +7,44 @@@
  #ifndef __always_inline
  #define __always_inline inline
  #endif
++<<<<<<< HEAD
++=======
+ 
+ /**
+  * __struct_group() - Create a mirrored named and anonyomous struct
+  *
+  * @TAG: The tag name for the named sub-struct (usually empty)
+  * @NAME: The identifier name of the mirrored sub-struct
+  * @ATTRS: Any struct attributes (usually empty)
+  * @MEMBERS: The member declarations for the mirrored structs
+  *
+  * Used to create an anonymous union of two structs with identical layout
+  * and size: one anonymous and one named. The former's members can be used
+  * normally without sub-struct naming, and the latter can be used to
+  * reason about the start, end, and size of the group of struct members.
+  * The named struct can also be explicitly tagged for layer reuse, as well
+  * as both having struct attributes appended.
+  */
+ #define __struct_group(TAG, NAME, ATTRS, MEMBERS...) \
+ 	union { \
+ 		struct { MEMBERS } ATTRS; \
+ 		struct TAG { MEMBERS } ATTRS NAME; \
+ 	}
+ 
+ /**
+  * __DECLARE_FLEX_ARRAY() - Declare a flexible array usable in a union
+  *
+  * @TYPE: The type of each flexible array element
+  * @NAME: The name of the flexible array member
+  *
+  * In order to have a flexible array member in a union or alone in a
+  * struct, it needs to be wrapped in an anonymous struct with at least 1
+  * named member, but that member can be empty.
+  */
+ #define __DECLARE_FLEX_ARRAY(TYPE, NAME)	\
+ 	struct { \
+ 		struct { } __empty_ ## NAME; \
+ 		TYPE NAME[]; \
+ 	}
+ #endif
++>>>>>>> 55037ed7bdc6 (uapi/linux/stddef.h: Add include guards)
* Unmerged path include/uapi/linux/stddef.h
