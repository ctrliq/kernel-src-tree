context_tracking: Rename context_tracking_is_enabled() => context_tracking_enabled()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-394.el8
commit-author Frederic Weisbecker <frederic@kernel.org>
commit 74c578759f15cb5a0d0107759bdad671d7b52ab9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-394.el8/74c57875.failed

Remove the superfluous "is" in the middle of the name. We want to
standardize the naming so that it can be expanded through suffixes:

	context_tracking_enabled()
	context_tracking_enabled_cpu()
	context_tracking_enabled_this_cpu()

	Signed-off-by: Frederic Weisbecker <frederic@kernel.org>
	Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
	Cc: Jacek Anaszewski <jacek.anaszewski@gmail.com>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Pavel Machek <pavel@ucw.cz>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Rafael J . Wysocki <rjw@rjwysocki.net>
	Cc: Rik van Riel <riel@surriel.com>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: Viresh Kumar <viresh.kumar@linaro.org>
	Cc: Wanpeng Li <wanpengli@tencent.com>
	Cc: Yauheni Kaliuta <yauheni.kaliuta@redhat.com>
Link: https://lkml.kernel.org/r/20191016025700.31277-6-frederic@kernel.org
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit 74c578759f15cb5a0d0107759bdad671d7b52ab9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/entry/calling.h
#	include/linux/context_tracking_state.h
diff --cc arch/x86/entry/calling.h
index d7bba29aa91d,0789e13ece90..000000000000
--- a/arch/x86/entry/calling.h
+++ b/arch/x86/entry/calling.h
@@@ -347,8 -353,8 +347,13 @@@ For 32-bit we have the following conven
   */
  .macro CALL_enter_from_user_mode
  #ifdef CONFIG_CONTEXT_TRACKING
++<<<<<<< HEAD
 +#ifdef HAVE_JUMP_LABEL
 +	STATIC_JUMP_IF_FALSE .Lafter_call_\@, context_tracking_enabled, def=0
++=======
+ #ifdef CONFIG_JUMP_LABEL
+ 	STATIC_JUMP_IF_FALSE .Lafter_call_\@, context_tracking_key, def=0
++>>>>>>> 74c578759f15 (context_tracking: Rename context_tracking_is_enabled() => context_tracking_enabled())
  #endif
  	call enter_from_user_mode
  .Lafter_call_\@:
diff --cc include/linux/context_tracking_state.h
index 2be83328ef5b,91250bdf2060..000000000000
--- a/include/linux/context_tracking_state.h
+++ b/include/linux/context_tracking_state.h
@@@ -23,20 -23,15 +23,24 @@@ struct context_tracking 
  };
  
  #ifdef CONFIG_CONTEXT_TRACKING
- extern struct static_key_false context_tracking_enabled;
+ extern struct static_key_false context_tracking_key;
  DECLARE_PER_CPU(struct context_tracking, context_tracking);
  
++<<<<<<< HEAD
 +static inline bool context_tracking_enabled_cpu(int cpu)
 +{
 +	return per_cpu(context_tracking.active, cpu);
 +}
 +
 +static inline bool context_tracking_is_enabled(void)
++=======
+ static inline bool context_tracking_enabled(void)
++>>>>>>> 74c578759f15 (context_tracking: Rename context_tracking_is_enabled() => context_tracking_enabled())
  {
- 	return static_branch_unlikely(&context_tracking_enabled);
+ 	return static_branch_unlikely(&context_tracking_key);
  }
  
 -static inline bool context_tracking_cpu_is_enabled(void)
 +static inline bool context_tracking_enabled_this_cpu(void)
  {
  	return __this_cpu_read(context_tracking.active);
  }
@@@ -47,9 -42,8 +51,14 @@@ static inline bool context_tracking_in_
  }
  #else
  static inline bool context_tracking_in_user(void) { return false; }
++<<<<<<< HEAD
 +static inline bool context_tracking_is_enabled(void) { return false; }
 +static inline bool context_tracking_enabled_this_cpu(void) { return false; }
 +static inline bool context_tracking_enabled_cpu(int cpu) { return false; }
++=======
+ static inline bool context_tracking_enabled(void) { return false; }
+ static inline bool context_tracking_cpu_is_enabled(void) { return false; }
++>>>>>>> 74c578759f15 (context_tracking: Rename context_tracking_is_enabled() => context_tracking_enabled())
  #endif /* CONFIG_CONTEXT_TRACKING */
  
  #endif
* Unmerged path arch/x86/entry/calling.h
diff --git a/include/linux/context_tracking.h b/include/linux/context_tracking.h
index 9c0da60dc92a..6928a8fa632e 100644
--- a/include/linux/context_tracking.h
+++ b/include/linux/context_tracking.h
@@ -22,26 +22,26 @@ extern void context_tracking_user_exit(void);
 
 static inline void user_enter(void)
 {
-	if (context_tracking_is_enabled())
+	if (context_tracking_enabled())
 		context_tracking_enter(CONTEXT_USER);
 
 }
 static inline void user_exit(void)
 {
-	if (context_tracking_is_enabled())
+	if (context_tracking_enabled())
 		context_tracking_exit(CONTEXT_USER);
 }
 
 /* Called with interrupts disabled.  */
 static inline void user_enter_irqoff(void)
 {
-	if (context_tracking_is_enabled())
+	if (context_tracking_enabled())
 		__context_tracking_enter(CONTEXT_USER);
 
 }
 static inline void user_exit_irqoff(void)
 {
-	if (context_tracking_is_enabled())
+	if (context_tracking_enabled())
 		__context_tracking_exit(CONTEXT_USER);
 }
 
@@ -49,7 +49,7 @@ static inline enum ctx_state exception_enter(void)
 {
 	enum ctx_state prev_ctx;
 
-	if (!context_tracking_is_enabled())
+	if (!context_tracking_enabled())
 		return 0;
 
 	prev_ctx = this_cpu_read(context_tracking.state);
@@ -61,7 +61,7 @@ static inline enum ctx_state exception_enter(void)
 
 static inline void exception_exit(enum ctx_state prev_ctx)
 {
-	if (context_tracking_is_enabled()) {
+	if (context_tracking_enabled()) {
 		if (prev_ctx != CONTEXT_KERNEL)
 			context_tracking_enter(prev_ctx);
 	}
@@ -77,7 +77,7 @@ static inline void exception_exit(enum ctx_state prev_ctx)
  */
 static inline enum ctx_state ct_state(void)
 {
-	return context_tracking_is_enabled() ?
+	return context_tracking_enabled() ?
 		this_cpu_read(context_tracking.state) : CONTEXT_DISABLED;
 }
 #else
@@ -90,7 +90,7 @@ static inline void exception_exit(enum ctx_state prev_ctx) { }
 static inline enum ctx_state ct_state(void) { return CONTEXT_DISABLED; }
 #endif /* !CONFIG_CONTEXT_TRACKING */
 
-#define CT_WARN_ON(cond) WARN_ON(context_tracking_is_enabled() && (cond))
+#define CT_WARN_ON(cond) WARN_ON(context_tracking_enabled() && (cond))
 
 #ifdef CONFIG_CONTEXT_TRACKING_FORCE
 extern void context_tracking_init(void);
@@ -110,7 +110,7 @@ static __always_inline void guest_enter_irqoff(void)
 		current->flags |= PF_VCPU;
 	instrumentation_end();
 
-	if (context_tracking_is_enabled())
+	if (context_tracking_enabled())
 		__context_tracking_enter(CONTEXT_GUEST);
 
 	/* KVM does not hold any references to rcu protected data when it
@@ -129,7 +129,7 @@ static __always_inline void guest_enter_irqoff(void)
 
 static __always_inline void context_tracking_guest_exit(void)
 {
-	if (context_tracking_is_enabled())
+	if (context_tracking_enabled())
 		__context_tracking_exit(CONTEXT_GUEST);
 }
 
* Unmerged path include/linux/context_tracking_state.h
diff --git a/include/linux/tick.h b/include/linux/tick.h
index 86af147a921e..e20bb7ce3bbe 100644
--- a/include/linux/tick.h
+++ b/include/linux/tick.h
@@ -179,7 +179,7 @@ extern cpumask_var_t tick_nohz_full_mask;
 
 static inline bool tick_nohz_full_enabled(void)
 {
-	if (!context_tracking_is_enabled())
+	if (!context_tracking_enabled())
 		return false;
 
 	return tick_nohz_full_running;
diff --git a/include/linux/vtime.h b/include/linux/vtime.h
index 70fe7eb64f20..819cdd1f0275 100644
--- a/include/linux/vtime.h
+++ b/include/linux/vtime.h
@@ -24,7 +24,7 @@ static inline bool vtime_accounting_enabled_this_cpu(void) { return true; }
  */
 static inline bool vtime_accounting_enabled(void)
 {
-	return context_tracking_is_enabled();
+	return context_tracking_enabled();
 }
 
 static inline bool vtime_accounting_enabled_cpu(int cpu)
diff --git a/kernel/context_tracking.c b/kernel/context_tracking.c
index 9ad37b9e44a7..1533862bb738 100644
--- a/kernel/context_tracking.c
+++ b/kernel/context_tracking.c
@@ -24,8 +24,8 @@
 #define CREATE_TRACE_POINTS
 #include <trace/events/context_tracking.h>
 
-DEFINE_STATIC_KEY_FALSE(context_tracking_enabled);
-EXPORT_SYMBOL_GPL(context_tracking_enabled);
+DEFINE_STATIC_KEY_FALSE(context_tracking_key);
+EXPORT_SYMBOL_GPL(context_tracking_key);
 
 DEFINE_PER_CPU(struct context_tracking, context_tracking);
 EXPORT_SYMBOL_GPL(context_tracking);
@@ -191,7 +191,7 @@ void __init context_tracking_cpu_set(int cpu)
 
 	if (!per_cpu(context_tracking.active, cpu)) {
 		per_cpu(context_tracking.active, cpu) = true;
-		static_branch_inc(&context_tracking_enabled);
+		static_branch_inc(&context_tracking_key);
 	}
 
 	if (initialized)
