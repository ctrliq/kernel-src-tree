arm64: sysreg: Use _BITUL() when defining register bits

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-394.el8
commit-author Will Deacon <will.deacon@arm.com>
commit 97bebc5facf7d495e72df0b7c50be3699c7bdd73
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-394.el8/97bebc5f.failed

Using shifts directly is error-prone and can cause inadvertent sign
extensions or build problems with older versions of binutils.

Consistent use of the _BITUL() macro makes these problems disappear.

	Signed-off-by: Will Deacon <will.deacon@arm.com>
(cherry picked from commit 97bebc5facf7d495e72df0b7c50be3699c7bdd73)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/arm64/include/asm/sysreg.h
diff --cc arch/arm64/include/asm/sysreg.h
index ad1da29a5100,0e8104f6c660..000000000000
--- a/arch/arm64/include/asm/sysreg.h
+++ b/arch/arm64/include/asm/sysreg.h
@@@ -525,55 -449,20 +526,71 @@@
  #define SYS_ICH_LR14_EL2		__SYS__LR8_EL2(6)
  #define SYS_ICH_LR15_EL2		__SYS__LR8_EL2(7)
  
 +/* VHE encodings for architectural EL0/1 system registers */
 +#define SYS_SCTLR_EL12			sys_reg(3, 5, 1, 0, 0)
 +#define SYS_CPACR_EL12			sys_reg(3, 5, 1, 0, 2)
 +#define SYS_ZCR_EL12			sys_reg(3, 5, 1, 2, 0)
 +#define SYS_TTBR0_EL12			sys_reg(3, 5, 2, 0, 0)
 +#define SYS_TTBR1_EL12			sys_reg(3, 5, 2, 0, 1)
 +#define SYS_TCR_EL12			sys_reg(3, 5, 2, 0, 2)
 +#define SYS_SPSR_EL12			sys_reg(3, 5, 4, 0, 0)
 +#define SYS_ELR_EL12			sys_reg(3, 5, 4, 0, 1)
 +#define SYS_AFSR0_EL12			sys_reg(3, 5, 5, 1, 0)
 +#define SYS_AFSR1_EL12			sys_reg(3, 5, 5, 1, 1)
 +#define SYS_ESR_EL12			sys_reg(3, 5, 5, 2, 0)
 +#define SYS_TFSR_EL12			sys_reg(3, 5, 5, 6, 0)
 +#define SYS_FAR_EL12			sys_reg(3, 5, 6, 0, 0)
 +#define SYS_MAIR_EL12			sys_reg(3, 5, 10, 2, 0)
 +#define SYS_AMAIR_EL12			sys_reg(3, 5, 10, 3, 0)
 +#define SYS_VBAR_EL12			sys_reg(3, 5, 12, 0, 0)
 +#define SYS_CONTEXTIDR_EL12		sys_reg(3, 5, 13, 0, 1)
 +#define SYS_CNTKCTL_EL12		sys_reg(3, 5, 14, 1, 0)
 +#define SYS_CNTP_TVAL_EL02		sys_reg(3, 5, 14, 2, 0)
 +#define SYS_CNTP_CTL_EL02		sys_reg(3, 5, 14, 2, 1)
 +#define SYS_CNTP_CVAL_EL02		sys_reg(3, 5, 14, 2, 2)
 +#define SYS_CNTV_TVAL_EL02		sys_reg(3, 5, 14, 3, 0)
 +#define SYS_CNTV_CTL_EL02		sys_reg(3, 5, 14, 3, 1)
 +#define SYS_CNTV_CVAL_EL02		sys_reg(3, 5, 14, 3, 2)
 +
  /* Common SCTLR_ELx flags. */
++<<<<<<< HEAD
 +#define SCTLR_ELx_DSSBS	(1UL << 44)
 +#define SCTLR_ELx_ATA  (BIT(43))
 +
 +#define SCTLR_ELx_TCF_SHIFT	40
 +#define SCTLR_ELx_TCF_NONE	(UL(0x0) << SCTLR_ELx_TCF_SHIFT)
 +#define SCTLR_ELx_TCF_SYNC	(UL(0x1) << SCTLR_ELx_TCF_SHIFT)
 +#define SCTLR_ELx_TCF_ASYNC	(UL(0x2) << SCTLR_ELx_TCF_SHIFT)
 +#define SCTLR_ELx_TCF_MASK	(UL(0x3) << SCTLR_ELx_TCF_SHIFT)
 +
 +#define SCTLR_ELx_ITFSB        (BIT(37))
 +#define SCTLR_ELx_ENIA	(1U << 31)
 +#define SCTLR_ELx_ENIB	(1 << 30)
 +#define SCTLR_ELx_ENDA	(1 << 27)
 +#define SCTLR_ELx_EE    (1 << 25)
 +#define SCTLR_ELx_IESB	(1 << 21)
 +#define SCTLR_ELx_WXN	(1 << 19)
 +#define SCTLR_ELx_ENDB	(1 << 13)
 +#define SCTLR_ELx_I	(1 << 12)
 +#define SCTLR_ELx_SA	(1 << 3)
 +#define SCTLR_ELx_C	(1 << 2)
 +#define SCTLR_ELx_A	(1 << 1)
 +#define SCTLR_ELx_M	1
++=======
+ #define SCTLR_ELx_DSSBS	(_BITUL(44))
+ #define SCTLR_ELx_ENIA	(_BITUL(31))
+ #define SCTLR_ELx_ENIB	(_BITUL(30))
+ #define SCTLR_ELx_ENDA	(_BITUL(27))
+ #define SCTLR_ELx_EE    (_BITUL(25))
+ #define SCTLR_ELx_IESB	(_BITUL(21))
+ #define SCTLR_ELx_WXN	(_BITUL(19))
+ #define SCTLR_ELx_ENDB	(_BITUL(13))
+ #define SCTLR_ELx_I	(_BITUL(12))
+ #define SCTLR_ELx_SA	(_BITUL(3))
+ #define SCTLR_ELx_C	(_BITUL(2))
+ #define SCTLR_ELx_A	(_BITUL(1))
+ #define SCTLR_ELx_M	(_BITUL(0))
++>>>>>>> 97bebc5facf7 (arm64: sysreg: Use _BITUL() when defining register bits)
  
  #define SCTLR_ELx_FLAGS	(SCTLR_ELx_M  | SCTLR_ELx_A | SCTLR_ELx_C | \
  			 SCTLR_ELx_SA | SCTLR_ELx_I | SCTLR_ELx_IESB)
@@@ -607,31 -496,23 +624,46 @@@
  #endif
  
  /* SCTLR_EL1 specific flags. */
++<<<<<<< HEAD
 +#define SCTLR_EL1_ATA0		(BIT(42))
 +
 +#define SCTLR_EL1_TCF0_SHIFT	38
 +#define SCTLR_EL1_TCF0_NONE	(UL(0x0) << SCTLR_EL1_TCF0_SHIFT)
 +#define SCTLR_EL1_TCF0_SYNC	(UL(0x1) << SCTLR_EL1_TCF0_SHIFT)
 +#define SCTLR_EL1_TCF0_ASYNC	(UL(0x2) << SCTLR_EL1_TCF0_SHIFT)
 +#define SCTLR_EL1_TCF0_MASK	(UL(0x3) << SCTLR_EL1_TCF0_SHIFT)
 +
 +#define SCTLR_EL1_UCI		(1 << 26)
 +#define SCTLR_EL1_E0E		(1 << 24)
 +#define SCTLR_EL1_SPAN		(1 << 23)
 +#define SCTLR_EL1_NTWE		(1 << 18)
 +#define SCTLR_EL1_NTWI		(1 << 16)
 +#define SCTLR_EL1_UCT		(1 << 15)
 +#define SCTLR_EL1_DZE		(1 << 14)
 +#define SCTLR_EL1_UMA		(1 << 9)
 +#define SCTLR_EL1_SED		(1 << 8)
 +#define SCTLR_EL1_ITD		(1 << 7)
 +#define SCTLR_EL1_CP15BEN	(1 << 5)
 +#define SCTLR_EL1_SA0		(1 << 4)
- 
- #define SCTLR_EL1_RES1	((1 << 11) | (1 << 20) | (1 << 22) | (1 << 28) | \
- 			 (1 << 29))
- #define SCTLR_EL1_RES0  ((1 << 6)  | (1 << 10) | (1 << 13) | (1 << 17) | \
- 			 (1 << 27) | (1 << 30) | (1 << 31) | \
++=======
+ #define SCTLR_EL1_UCI		(_BITUL(26))
+ #define SCTLR_EL1_E0E		(_BITUL(24))
+ #define SCTLR_EL1_SPAN		(_BITUL(23))
+ #define SCTLR_EL1_NTWE		(_BITUL(18))
+ #define SCTLR_EL1_NTWI		(_BITUL(16))
+ #define SCTLR_EL1_UCT		(_BITUL(15))
+ #define SCTLR_EL1_DZE		(_BITUL(14))
+ #define SCTLR_EL1_UMA		(_BITUL(9))
+ #define SCTLR_EL1_SED		(_BITUL(8))
+ #define SCTLR_EL1_ITD		(_BITUL(7))
+ #define SCTLR_EL1_CP15BEN	(_BITUL(5))
+ #define SCTLR_EL1_SA0		(_BITUL(4))
++>>>>>>> 97bebc5facf7 (arm64: sysreg: Use _BITUL() when defining register bits)
+ 
+ #define SCTLR_EL1_RES1	((_BITUL(11)) | (_BITUL(20)) | (_BITUL(22)) | (_BITUL(28)) | \
+ 			 (_BITUL(29)))
+ #define SCTLR_EL1_RES0  ((_BITUL(6))  | (_BITUL(10)) | (_BITUL(13)) | (_BITUL(17)) | \
+ 			 (_BITUL(27)) | (_BITUL(30)) | (_BITUL(31)) | \
  			 (0xffffefffUL << 32))
  
  #ifdef CONFIG_CPU_BIG_ENDIAN
@@@ -898,104 -713,14 +930,104 @@@
  #define ZCR_ELx_LEN_SIZE	9
  #define ZCR_ELx_LEN_MASK	0x1ff
  
- #define CPACR_EL1_ZEN_EL1EN	(1 << 16) /* enable EL1 access */
- #define CPACR_EL1_ZEN_EL0EN	(1 << 17) /* enable EL0 access, if EL1EN set */
+ #define CPACR_EL1_ZEN_EL1EN	(_BITUL(16)) /* enable EL1 access */
+ #define CPACR_EL1_ZEN_EL0EN	(_BITUL(17)) /* enable EL0 access, if EL1EN set */
  #define CPACR_EL1_ZEN		(CPACR_EL1_ZEN_EL1EN | CPACR_EL1_ZEN_EL0EN)
  
 +/* TCR EL1 Bit Definitions */
 +#define SYS_TCR_EL1_TCMA1	(BIT(58))
 +#define SYS_TCR_EL1_TCMA0	(BIT(57))
 +
 +/* GCR_EL1 Definitions */
 +#define SYS_GCR_EL1_RRND	(BIT(16))
 +#define SYS_GCR_EL1_EXCL_MASK	0xffffUL
 +
 +/* RGSR_EL1 Definitions */
 +#define SYS_RGSR_EL1_TAG_MASK	0xfUL
 +#define SYS_RGSR_EL1_SEED_SHIFT	8
 +#define SYS_RGSR_EL1_SEED_MASK	0xffffUL
 +
 +/* GMID_EL1 field definitions */
 +#define SYS_GMID_EL1_BS_SHIFT	0
 +#define SYS_GMID_EL1_BS_SIZE	4
 +
 +/* TFSR{,E0}_EL1 bit definitions */
 +#define SYS_TFSR_EL1_TF0_SHIFT	0
 +#define SYS_TFSR_EL1_TF1_SHIFT	1
 +#define SYS_TFSR_EL1_TF0	(UL(1) << SYS_TFSR_EL1_TF0_SHIFT)
 +#define SYS_TFSR_EL1_TF1	(UL(1) << SYS_TFSR_EL1_TF1_SHIFT)
  
  /* Safe value for MPIDR_EL1: Bit31:RES1, Bit30:U:0, Bit24:MT:0 */
- #define SYS_MPIDR_SAFE_VAL		(1UL << 31)
+ #define SYS_MPIDR_SAFE_VAL	(_BITUL(31))
  
 +#define TRFCR_ELx_TS_SHIFT		5
 +#define TRFCR_ELx_TS_VIRTUAL		((0x1UL) << TRFCR_ELx_TS_SHIFT)
 +#define TRFCR_ELx_TS_GUEST_PHYSICAL	((0x2UL) << TRFCR_ELx_TS_SHIFT)
 +#define TRFCR_ELx_TS_PHYSICAL		((0x3UL) << TRFCR_ELx_TS_SHIFT)
 +#define TRFCR_EL2_CX			BIT(3)
 +#define TRFCR_ELx_ExTRE			BIT(1)
 +#define TRFCR_ELx_E0TRE			BIT(0)
 +
 +
 +/* GIC Hypervisor interface registers */
 +/* ICH_MISR_EL2 bit definitions */
 +#define ICH_MISR_EOI		(1 << 0)
 +#define ICH_MISR_U		(1 << 1)
 +
 +/* ICH_LR*_EL2 bit definitions */
 +#define ICH_LR_VIRTUAL_ID_MASK	((1ULL << 32) - 1)
 +
 +#define ICH_LR_EOI		(1ULL << 41)
 +#define ICH_LR_GROUP		(1ULL << 60)
 +#define ICH_LR_HW		(1ULL << 61)
 +#define ICH_LR_STATE		(3ULL << 62)
 +#define ICH_LR_PENDING_BIT	(1ULL << 62)
 +#define ICH_LR_ACTIVE_BIT	(1ULL << 63)
 +#define ICH_LR_PHYS_ID_SHIFT	32
 +#define ICH_LR_PHYS_ID_MASK	(0x3ffULL << ICH_LR_PHYS_ID_SHIFT)
 +#define ICH_LR_PRIORITY_SHIFT	48
 +#define ICH_LR_PRIORITY_MASK	(0xffULL << ICH_LR_PRIORITY_SHIFT)
 +
 +/* ICH_HCR_EL2 bit definitions */
 +#define ICH_HCR_EN		(1 << 0)
 +#define ICH_HCR_UIE		(1 << 1)
 +#define ICH_HCR_NPIE		(1 << 3)
 +#define ICH_HCR_TC		(1 << 10)
 +#define ICH_HCR_TALL0		(1 << 11)
 +#define ICH_HCR_TALL1		(1 << 12)
 +#define ICH_HCR_EOIcount_SHIFT	27
 +#define ICH_HCR_EOIcount_MASK	(0x1f << ICH_HCR_EOIcount_SHIFT)
 +
 +/* ICH_VMCR_EL2 bit definitions */
 +#define ICH_VMCR_ACK_CTL_SHIFT	2
 +#define ICH_VMCR_ACK_CTL_MASK	(1 << ICH_VMCR_ACK_CTL_SHIFT)
 +#define ICH_VMCR_FIQ_EN_SHIFT	3
 +#define ICH_VMCR_FIQ_EN_MASK	(1 << ICH_VMCR_FIQ_EN_SHIFT)
 +#define ICH_VMCR_CBPR_SHIFT	4
 +#define ICH_VMCR_CBPR_MASK	(1 << ICH_VMCR_CBPR_SHIFT)
 +#define ICH_VMCR_EOIM_SHIFT	9
 +#define ICH_VMCR_EOIM_MASK	(1 << ICH_VMCR_EOIM_SHIFT)
 +#define ICH_VMCR_BPR1_SHIFT	18
 +#define ICH_VMCR_BPR1_MASK	(7 << ICH_VMCR_BPR1_SHIFT)
 +#define ICH_VMCR_BPR0_SHIFT	21
 +#define ICH_VMCR_BPR0_MASK	(7 << ICH_VMCR_BPR0_SHIFT)
 +#define ICH_VMCR_PMR_SHIFT	24
 +#define ICH_VMCR_PMR_MASK	(0xffUL << ICH_VMCR_PMR_SHIFT)
 +#define ICH_VMCR_ENG0_SHIFT	0
 +#define ICH_VMCR_ENG0_MASK	(1 << ICH_VMCR_ENG0_SHIFT)
 +#define ICH_VMCR_ENG1_SHIFT	1
 +#define ICH_VMCR_ENG1_MASK	(1 << ICH_VMCR_ENG1_SHIFT)
 +
 +/* ICH_VTR_EL2 bit definitions */
 +#define ICH_VTR_PRI_BITS_SHIFT	29
 +#define ICH_VTR_PRI_BITS_MASK	(7 << ICH_VTR_PRI_BITS_SHIFT)
 +#define ICH_VTR_ID_BITS_SHIFT	23
 +#define ICH_VTR_ID_BITS_MASK	(7 << ICH_VTR_ID_BITS_SHIFT)
 +#define ICH_VTR_SEIS_SHIFT	22
 +#define ICH_VTR_SEIS_MASK	(1 << ICH_VTR_SEIS_SHIFT)
 +#define ICH_VTR_A3V_SHIFT	21
 +#define ICH_VTR_A3V_MASK	(1 << ICH_VTR_A3V_SHIFT)
 +
  #ifdef __ASSEMBLY__
  
  	.irp	num,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30
* Unmerged path arch/arm64/include/asm/sysreg.h
