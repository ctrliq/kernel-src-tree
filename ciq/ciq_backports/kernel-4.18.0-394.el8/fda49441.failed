SUNRPC: Replace the "__be32 *p" parameter to .pc_encode

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-394.el8
commit-author Chuck Lever <chuck.lever@oracle.com>
commit fda494411485aff91768842c532f90fb8eb54943
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-394.el8/fda49441.failed

The passed-in value of the "__be32 *p" parameter is now unused in
every server-side XDR encoder, and can be removed.

Note also that there is a line in each encoder that sets up a local
pointer to a struct xdr_stream. Passing that pointer from the
dispatcher instead saves one line per encoder function.

	Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
	Signed-off-by: J. Bruce Fields <bfields@redhat.com>
(cherry picked from commit fda494411485aff91768842c532f90fb8eb54943)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/lockd/svc.c
#	fs/nfsd/nfs4xdr.c
#	fs/nfsd/nfsd.h
#	fs/nfsd/nfssvc.c
#	fs/nfsd/xdr.h
#	fs/nfsd/xdr3.h
#	fs/nfsd/xdr4.h
#	include/linux/lockd/xdr.h
#	include/linux/lockd/xdr4.h
diff --cc fs/lockd/svc.c
index 7a4c2f9b1a50,b220e1b91726..000000000000
--- a/fs/lockd/svc.c
+++ b/fs/lockd/svc.c
@@@ -779,11 -780,9 +779,14 @@@ module_exit(exit_nlm)
  static int nlmsvc_dispatch(struct svc_rqst *rqstp, __be32 *statp)
  {
  	const struct svc_procedure *procp = rqstp->rq_procinfo;
++<<<<<<< HEAD
 +	struct kvec *argv = rqstp->rq_arg.head;
 +	struct kvec *resv = rqstp->rq_res.head;
++=======
++>>>>>>> fda494411485 (SUNRPC: Replace the "__be32 *p" parameter to .pc_encode)
  
  	svcxdr_init_decode(rqstp);
 -	if (!procp->pc_decode(rqstp, &rqstp->rq_arg_stream))
 +	if (!procp->pc_decode(rqstp, argv->iov_base))
  		goto out_decode_err;
  
  	*statp = procp->pc_func(rqstp);
diff --cc fs/nfsd/nfs4xdr.c
index cf0d08d4c2a7,fc77db35f2e7..000000000000
--- a/fs/nfsd/nfs4xdr.c
+++ b/fs/nfsd/nfs4xdr.c
@@@ -5036,19 -5427,25 +5036,30 @@@ nfs4svc_decode_compoundargs(struct svc_
  }
  
  int
- nfs4svc_encode_compoundres(struct svc_rqst *rqstp, __be32 *p)
+ nfs4svc_encode_compoundres(struct svc_rqst *rqstp, struct xdr_stream *xdr)
  {
  	struct nfsd4_compoundres *resp = rqstp->rq_resp;
++<<<<<<< HEAD
 +	struct xdr_buf *buf = resp->xdr.buf;
++=======
+ 	struct xdr_buf *buf = xdr->buf;
+ 	__be32 *p;
++>>>>>>> fda494411485 (SUNRPC: Replace the "__be32 *p" parameter to .pc_encode)
  
  	WARN_ON_ONCE(buf->len != buf->head[0].iov_len + buf->page_len +
  				 buf->tail[0].iov_len);
  
 -	/*
 -	 * Send buffer space for the following items is reserved
 -	 * at the top of nfsd4_proc_compound().
 -	 */
 -	p = resp->statusp;
 +	*p = resp->cstate.status;
  
++<<<<<<< HEAD
 +	rqstp->rq_next_page = resp->xdr.page_ptr + 1;
++=======
+ 	*p++ = resp->cstate.status;
+ 
+ 	rqstp->rq_next_page = xdr->page_ptr + 1;
++>>>>>>> fda494411485 (SUNRPC: Replace the "__be32 *p" parameter to .pc_encode)
  
 +	p = resp->tagp;
  	*p++ = htonl(resp->taglen);
  	memcpy(p, resp->tag, resp->taglen);
  	p += XDR_QUADLEN(resp->taglen);
diff --cc fs/nfsd/nfsd.h
index 6f7f06b891ab,345f8247d5da..000000000000
--- a/fs/nfsd/nfsd.h
+++ b/fs/nfsd/nfsd.h
@@@ -77,8 -78,10 +77,15 @@@ extern const struct seq_operations nfs_
   */
  struct nfsd_voidargs { };
  struct nfsd_voidres { };
++<<<<<<< HEAD
 +int		nfssvc_decode_voidarg(struct svc_rqst *rqstp, __be32 *p);
 +int		nfssvc_encode_voidres(struct svc_rqst *rqstp, __be32 *p);
++=======
+ bool		nfssvc_decode_voidarg(struct svc_rqst *rqstp,
+ 				      struct xdr_stream *xdr);
+ int		nfssvc_encode_voidres(struct svc_rqst *rqstp,
+ 				      struct xdr_stream *xdr);
++>>>>>>> fda494411485 (SUNRPC: Replace the "__be32 *p" parameter to .pc_encode)
  
  /*
   * Function prototypes.
diff --cc fs/nfsd/nfssvc.c
index 5e028e1a2313,ed6a28ecf278..000000000000
--- a/fs/nfsd/nfssvc.c
+++ b/fs/nfsd/nfssvc.c
@@@ -999,9 -1004,6 +999,12 @@@ out
  int nfsd_dispatch(struct svc_rqst *rqstp, __be32 *statp)
  {
  	const struct svc_procedure *proc = rqstp->rq_procinfo;
++<<<<<<< HEAD
 +	struct kvec *argv = &rqstp->rq_arg.head[0];
 +	struct kvec *resv = &rqstp->rq_res.head[0];
 +	__be32 *p;
++=======
++>>>>>>> fda494411485 (SUNRPC: Replace the "__be32 *p" parameter to .pc_encode)
  
  	/*
  	 * Give the xdr decoder a chance to change this if it wants
@@@ -1026,8 -1028,7 +1029,12 @@@
  	 * Need to grab the location to store the status, as
  	 * NFSv4 does some encoding while processing
  	 */
++<<<<<<< HEAD
 +	p = resv->iov_base + resv->iov_len;
 +	resv->iov_len += sizeof(__be32);
++=======
+ 	svcxdr_init_encode(rqstp);
++>>>>>>> fda494411485 (SUNRPC: Replace the "__be32 *p" parameter to .pc_encode)
  
  	*statp = proc->pc_func(rqstp);
  	if (*statp == rpc_drop_reply || test_bit(RQ_DROPME, &rqstp->rq_flags))
@@@ -1080,9 -1081,9 +1087,9 @@@ int nfssvc_decode_voidarg(struct svc_rq
   *   %0: Local error while encoding
   *   %1: Encoding was successful
   */
- int nfssvc_encode_voidres(struct svc_rqst *rqstp, __be32 *p)
+ int nfssvc_encode_voidres(struct svc_rqst *rqstp, struct xdr_stream *xdr)
  {
 -	return 1;
 +        return xdr_ressize_check(rqstp, p);
  }
  
  int nfsd_pool_stats_open(struct inode *inode, struct file *file)
diff --cc fs/nfsd/xdr.h
index 6f3851dc237e,1133fb3bf328..000000000000
--- a/fs/nfsd/xdr.h
+++ b/fs/nfsd/xdr.h
@@@ -140,26 -141,28 +140,47 @@@ union nfsd_xdrstore 
  #define NFS2_SVC_XDRSIZE	sizeof(union nfsd_xdrstore)
  
  
++<<<<<<< HEAD
 +int nfssvc_decode_fhandleargs(struct svc_rqst *, __be32 *);
 +int nfssvc_decode_sattrargs(struct svc_rqst *, __be32 *);
 +int nfssvc_decode_diropargs(struct svc_rqst *, __be32 *);
 +int nfssvc_decode_readargs(struct svc_rqst *, __be32 *);
 +int nfssvc_decode_writeargs(struct svc_rqst *, __be32 *);
 +int nfssvc_decode_createargs(struct svc_rqst *, __be32 *);
 +int nfssvc_decode_renameargs(struct svc_rqst *, __be32 *);
 +int nfssvc_decode_linkargs(struct svc_rqst *, __be32 *);
 +int nfssvc_decode_symlinkargs(struct svc_rqst *, __be32 *);
 +int nfssvc_decode_readdirargs(struct svc_rqst *, __be32 *);
 +int nfssvc_encode_statres(struct svc_rqst *, __be32 *);
 +int nfssvc_encode_attrstatres(struct svc_rqst *, __be32 *);
 +int nfssvc_encode_diropres(struct svc_rqst *, __be32 *);
 +int nfssvc_encode_readlinkres(struct svc_rqst *, __be32 *);
 +int nfssvc_encode_readres(struct svc_rqst *, __be32 *);
 +int nfssvc_encode_statfsres(struct svc_rqst *, __be32 *);
 +int nfssvc_encode_readdirres(struct svc_rqst *, __be32 *);
++=======
+ bool nfssvc_decode_fhandleargs(struct svc_rqst *rqstp, struct xdr_stream *xdr);
+ bool nfssvc_decode_sattrargs(struct svc_rqst *rqstp, struct xdr_stream *xdr);
+ bool nfssvc_decode_diropargs(struct svc_rqst *rqstp, struct xdr_stream *xdr);
+ bool nfssvc_decode_readargs(struct svc_rqst *rqstp, struct xdr_stream *xdr);
+ bool nfssvc_decode_writeargs(struct svc_rqst *rqstp, struct xdr_stream *xdr);
+ bool nfssvc_decode_createargs(struct svc_rqst *rqstp, struct xdr_stream *xdr);
+ bool nfssvc_decode_renameargs(struct svc_rqst *rqstp, struct xdr_stream *xdr);
+ bool nfssvc_decode_linkargs(struct svc_rqst *rqstp, struct xdr_stream *xdr);
+ bool nfssvc_decode_symlinkargs(struct svc_rqst *rqstp, struct xdr_stream *xdr);
+ bool nfssvc_decode_readdirargs(struct svc_rqst *rqstp, struct xdr_stream *xdr);
+ 
+ int nfssvc_encode_statres(struct svc_rqst *rqstp, struct xdr_stream *xdr);
+ int nfssvc_encode_attrstatres(struct svc_rqst *rqstp, struct xdr_stream *xdr);
+ int nfssvc_encode_diropres(struct svc_rqst *rqstp, struct xdr_stream *xdr);
+ int nfssvc_encode_readlinkres(struct svc_rqst *rqstp, struct xdr_stream *xdr);
+ int nfssvc_encode_readres(struct svc_rqst *rqstp, struct xdr_stream *xdr);
+ int nfssvc_encode_statfsres(struct svc_rqst *rqstp, struct xdr_stream *xdr);
+ int nfssvc_encode_readdirres(struct svc_rqst *rqstp, struct xdr_stream *xdr);
++>>>>>>> fda494411485 (SUNRPC: Replace the "__be32 *p" parameter to .pc_encode)
  
 -void nfssvc_encode_nfscookie(struct nfsd_readdirres *resp, u32 offset);
 -int nfssvc_encode_entry(void *data, const char *name, int namlen,
 -			loff_t offset, u64 ino, unsigned int d_type);
 +int nfssvc_encode_entry(void *, const char *name,
 +			int namlen, loff_t offset, u64 ino, unsigned int);
  
  void nfssvc_release_attrstat(struct svc_rqst *rqstp);
  void nfssvc_release_diropres(struct svc_rqst *rqstp);
diff --cc fs/nfsd/xdr3.h
index 05db8ca205b1,bb017fc7cba1..000000000000
--- a/fs/nfsd/xdr3.h
+++ b/fs/nfsd/xdr3.h
@@@ -266,36 -265,37 +266,70 @@@ union nfsd3_xdrstore 
  
  #define NFS3_SVC_XDRSIZE		sizeof(union nfsd3_xdrstore)
  
++<<<<<<< HEAD
 +int nfs3svc_decode_fhandleargs(struct svc_rqst *, __be32 *);
 +int nfs3svc_decode_sattrargs(struct svc_rqst *, __be32 *);
 +int nfs3svc_decode_diropargs(struct svc_rqst *, __be32 *);
 +int nfs3svc_decode_accessargs(struct svc_rqst *, __be32 *);
 +int nfs3svc_decode_readargs(struct svc_rqst *, __be32 *);
 +int nfs3svc_decode_writeargs(struct svc_rqst *, __be32 *);
 +int nfs3svc_decode_createargs(struct svc_rqst *, __be32 *);
 +int nfs3svc_decode_mkdirargs(struct svc_rqst *, __be32 *);
 +int nfs3svc_decode_mknodargs(struct svc_rqst *, __be32 *);
 +int nfs3svc_decode_renameargs(struct svc_rqst *, __be32 *);
 +int nfs3svc_decode_linkargs(struct svc_rqst *, __be32 *);
 +int nfs3svc_decode_symlinkargs(struct svc_rqst *, __be32 *);
 +int nfs3svc_decode_readdirargs(struct svc_rqst *, __be32 *);
 +int nfs3svc_decode_readdirplusargs(struct svc_rqst *, __be32 *);
 +int nfs3svc_decode_commitargs(struct svc_rqst *, __be32 *);
 +int nfs3svc_encode_getattrres(struct svc_rqst *, __be32 *);
 +int nfs3svc_encode_wccstat(struct svc_rqst *, __be32 *);
 +int nfs3svc_encode_lookupres(struct svc_rqst *, __be32 *);
 +int nfs3svc_encode_accessres(struct svc_rqst *, __be32 *);
 +int nfs3svc_encode_readlinkres(struct svc_rqst *, __be32 *);
 +int nfs3svc_encode_readres(struct svc_rqst *, __be32 *);
 +int nfs3svc_encode_writeres(struct svc_rqst *, __be32 *);
 +int nfs3svc_encode_createres(struct svc_rqst *, __be32 *);
 +int nfs3svc_encode_renameres(struct svc_rqst *, __be32 *);
 +int nfs3svc_encode_linkres(struct svc_rqst *, __be32 *);
 +int nfs3svc_encode_readdirres(struct svc_rqst *, __be32 *);
 +int nfs3svc_encode_fsstatres(struct svc_rqst *, __be32 *);
 +int nfs3svc_encode_fsinfores(struct svc_rqst *, __be32 *);
 +int nfs3svc_encode_pathconfres(struct svc_rqst *, __be32 *);
 +int nfs3svc_encode_commitres(struct svc_rqst *, __be32 *);
++=======
+ bool nfs3svc_decode_fhandleargs(struct svc_rqst *rqstp, struct xdr_stream *xdr);
+ bool nfs3svc_decode_sattrargs(struct svc_rqst *rqstp, struct xdr_stream *xdr);
+ bool nfs3svc_decode_diropargs(struct svc_rqst *rqstp, struct xdr_stream *xdr);
+ bool nfs3svc_decode_accessargs(struct svc_rqst *rqstp, struct xdr_stream *xdr);
+ bool nfs3svc_decode_readargs(struct svc_rqst *rqstp, struct xdr_stream *xdr);
+ bool nfs3svc_decode_writeargs(struct svc_rqst *rqstp, struct xdr_stream *xdr);
+ bool nfs3svc_decode_createargs(struct svc_rqst *rqstp, struct xdr_stream *xdr);
+ bool nfs3svc_decode_mkdirargs(struct svc_rqst *rqstp, struct xdr_stream *xdr);
+ bool nfs3svc_decode_mknodargs(struct svc_rqst *rqstp, struct xdr_stream *xdr);
+ bool nfs3svc_decode_renameargs(struct svc_rqst *rqstp, struct xdr_stream *xdr);
+ bool nfs3svc_decode_linkargs(struct svc_rqst *rqstp, struct xdr_stream *xdr);
+ bool nfs3svc_decode_symlinkargs(struct svc_rqst *rqstp, struct xdr_stream *xdr);
+ bool nfs3svc_decode_readdirargs(struct svc_rqst *rqstp, struct xdr_stream *xdr);
+ bool nfs3svc_decode_readdirplusargs(struct svc_rqst *rqstp, struct xdr_stream *xdr);
+ bool nfs3svc_decode_commitargs(struct svc_rqst *rqstp, struct xdr_stream *xdr);
+ 
+ int nfs3svc_encode_getattrres(struct svc_rqst *rqstp, struct xdr_stream *xdr);
+ int nfs3svc_encode_wccstat(struct svc_rqst *rqstp, struct xdr_stream *xdr);
+ int nfs3svc_encode_lookupres(struct svc_rqst *rqstp, struct xdr_stream *xdr);
+ int nfs3svc_encode_accessres(struct svc_rqst *rqstp, struct xdr_stream *xdr);
+ int nfs3svc_encode_readlinkres(struct svc_rqst *rqstp, struct xdr_stream *xdr);
+ int nfs3svc_encode_readres(struct svc_rqst *rqstp, struct xdr_stream *xdr);
+ int nfs3svc_encode_writeres(struct svc_rqst *rqstp, struct xdr_stream *xdr);
+ int nfs3svc_encode_createres(struct svc_rqst *rqstp, struct xdr_stream *xdr);
+ int nfs3svc_encode_renameres(struct svc_rqst *rqstp, struct xdr_stream *xdr);
+ int nfs3svc_encode_linkres(struct svc_rqst *rqstp, struct xdr_stream *xdr);
+ int nfs3svc_encode_readdirres(struct svc_rqst *rqstp, struct xdr_stream *xdr);
+ int nfs3svc_encode_fsstatres(struct svc_rqst *rqstp, struct xdr_stream *xdr);
+ int nfs3svc_encode_fsinfores(struct svc_rqst *rqstp, struct xdr_stream *xdr);
+ int nfs3svc_encode_pathconfres(struct svc_rqst *rqstp, struct xdr_stream *xdr);
+ int nfs3svc_encode_commitres(struct svc_rqst *rqstp, struct xdr_stream *xdr);
++>>>>>>> fda494411485 (SUNRPC: Replace the "__be32 *p" parameter to .pc_encode)
  
  void nfs3svc_release_fhandle(struct svc_rqst *);
  void nfs3svc_release_fhandle2(struct svc_rqst *);
diff --cc fs/nfsd/xdr4.h
index 4ef0f6d3f1d7,3bd553925c35..000000000000
--- a/fs/nfsd/xdr4.h
+++ b/fs/nfsd/xdr4.h
@@@ -750,8 -757,8 +750,13 @@@ set_change_info(struct nfsd4_change_inf
  
  
  bool nfsd4_mach_creds_match(struct nfs4_client *cl, struct svc_rqst *rqstp);
++<<<<<<< HEAD
 +int nfs4svc_decode_compoundargs(struct svc_rqst *, __be32 *);
 +int nfs4svc_encode_compoundres(struct svc_rqst *, __be32 *);
++=======
+ bool nfs4svc_decode_compoundargs(struct svc_rqst *rqstp, struct xdr_stream *xdr);
+ int nfs4svc_encode_compoundres(struct svc_rqst *rqstp, struct xdr_stream *xdr);
++>>>>>>> fda494411485 (SUNRPC: Replace the "__be32 *p" parameter to .pc_encode)
  __be32 nfsd4_check_resp_size(struct nfsd4_compoundres *, u32);
  void nfsd4_encode_operation(struct nfsd4_compoundres *, struct nfsd4_op *);
  void nfsd4_encode_replay(struct xdr_stream *xdr, struct nfsd4_op *op);
diff --cc include/linux/lockd/xdr.h
index a98309c0121c,d8bd26a5525e..000000000000
--- a/include/linux/lockd/xdr.h
+++ b/include/linux/lockd/xdr.h
@@@ -96,18 -96,19 +96,35 @@@ struct nlm_reboot 
   */
  #define NLMSVC_XDRSIZE		sizeof(struct nlm_args)
  
++<<<<<<< HEAD
 +int	nlmsvc_decode_testargs(struct svc_rqst *, __be32 *);
 +int	nlmsvc_encode_testres(struct svc_rqst *, __be32 *);
 +int	nlmsvc_decode_lockargs(struct svc_rqst *, __be32 *);
 +int	nlmsvc_decode_cancargs(struct svc_rqst *, __be32 *);
 +int	nlmsvc_decode_unlockargs(struct svc_rqst *, __be32 *);
 +int	nlmsvc_encode_res(struct svc_rqst *, __be32 *);
 +int	nlmsvc_decode_res(struct svc_rqst *, __be32 *);
 +int	nlmsvc_encode_void(struct svc_rqst *, __be32 *);
 +int	nlmsvc_decode_void(struct svc_rqst *, __be32 *);
 +int	nlmsvc_decode_shareargs(struct svc_rqst *, __be32 *);
 +int	nlmsvc_encode_shareres(struct svc_rqst *, __be32 *);
 +int	nlmsvc_decode_notify(struct svc_rqst *, __be32 *);
 +int	nlmsvc_decode_reboot(struct svc_rqst *, __be32 *);
++=======
+ bool	nlmsvc_decode_void(struct svc_rqst *rqstp, struct xdr_stream *xdr);
+ bool	nlmsvc_decode_testargs(struct svc_rqst *rqstp, struct xdr_stream *xdr);
+ bool	nlmsvc_decode_lockargs(struct svc_rqst *rqstp, struct xdr_stream *xdr);
+ bool	nlmsvc_decode_cancargs(struct svc_rqst *rqstp, struct xdr_stream *xdr);
+ bool	nlmsvc_decode_unlockargs(struct svc_rqst *rqstp, struct xdr_stream *xdr);
+ bool	nlmsvc_decode_res(struct svc_rqst *rqstp, struct xdr_stream *xdr);
+ bool	nlmsvc_decode_reboot(struct svc_rqst *rqstp, struct xdr_stream *xdr);
+ bool	nlmsvc_decode_shareargs(struct svc_rqst *rqstp, struct xdr_stream *xdr);
+ bool	nlmsvc_decode_notify(struct svc_rqst *rqstp, struct xdr_stream *xdr);
+ 
+ int	nlmsvc_encode_testres(struct svc_rqst *rqstp, struct xdr_stream *xdr);
+ int	nlmsvc_encode_res(struct svc_rqst *rqstp, struct xdr_stream *xdr);
+ int	nlmsvc_encode_void(struct svc_rqst *rqstp, struct xdr_stream *xdr);
+ int	nlmsvc_encode_shareres(struct svc_rqst *rqstp, struct xdr_stream *xdr);
++>>>>>>> fda494411485 (SUNRPC: Replace the "__be32 *p" parameter to .pc_encode)
  
  #endif /* LOCKD_XDR_H */
diff --cc include/linux/lockd/xdr4.h
index 5ae766f26e04,50677be3557d..000000000000
--- a/include/linux/lockd/xdr4.h
+++ b/include/linux/lockd/xdr4.h
@@@ -22,21 -22,20 +22,28 @@@
  #define	nlm4_fbig		cpu_to_be32(NLM_FBIG)
  #define	nlm4_failed		cpu_to_be32(NLM_FAILED)
  
 -bool	nlm4svc_decode_void(struct svc_rqst *rqstp, struct xdr_stream *xdr);
 -bool	nlm4svc_decode_testargs(struct svc_rqst *rqstp, struct xdr_stream *xdr);
 -bool	nlm4svc_decode_lockargs(struct svc_rqst *rqstp, struct xdr_stream *xdr);
 -bool	nlm4svc_decode_cancargs(struct svc_rqst *rqstp, struct xdr_stream *xdr);
 -bool	nlm4svc_decode_unlockargs(struct svc_rqst *rqstp, struct xdr_stream *xdr);
 -bool	nlm4svc_decode_res(struct svc_rqst *rqstp, struct xdr_stream *xdr);
 -bool	nlm4svc_decode_reboot(struct svc_rqst *rqstp, struct xdr_stream *xdr);
 -bool	nlm4svc_decode_shareargs(struct svc_rqst *rqstp, struct xdr_stream *xdr);
 -bool	nlm4svc_decode_notify(struct svc_rqst *rqstp, struct xdr_stream *xdr);
  
++<<<<<<< HEAD
 +
 +int	nlm4svc_decode_testargs(struct svc_rqst *, __be32 *);
 +int	nlm4svc_encode_testres(struct svc_rqst *, __be32 *);
 +int	nlm4svc_decode_lockargs(struct svc_rqst *, __be32 *);
 +int	nlm4svc_decode_cancargs(struct svc_rqst *, __be32 *);
 +int	nlm4svc_decode_unlockargs(struct svc_rqst *, __be32 *);
 +int	nlm4svc_encode_res(struct svc_rqst *, __be32 *);
 +int	nlm4svc_decode_res(struct svc_rqst *, __be32 *);
 +int	nlm4svc_encode_void(struct svc_rqst *, __be32 *);
 +int	nlm4svc_decode_void(struct svc_rqst *, __be32 *);
 +int	nlm4svc_decode_shareargs(struct svc_rqst *, __be32 *);
 +int	nlm4svc_encode_shareres(struct svc_rqst *, __be32 *);
 +int	nlm4svc_decode_notify(struct svc_rqst *, __be32 *);
 +int	nlm4svc_decode_reboot(struct svc_rqst *, __be32 *);
++=======
+ int	nlm4svc_encode_testres(struct svc_rqst *rqstp, struct xdr_stream *xdr);
+ int	nlm4svc_encode_res(struct svc_rqst *rqstp, struct xdr_stream *xdr);
+ int	nlm4svc_encode_void(struct svc_rqst *rqstp, struct xdr_stream *xdr);
+ int	nlm4svc_encode_shareres(struct svc_rqst *rqstp, struct xdr_stream *xdr);
++>>>>>>> fda494411485 (SUNRPC: Replace the "__be32 *p" parameter to .pc_encode)
  
  extern const struct rpc_version nlm_version4;
  
* Unmerged path fs/lockd/svc.c
diff --git a/fs/lockd/xdr.c b/fs/lockd/xdr.c
index 9235e60b1769..7c7f72651521 100644
--- a/fs/lockd/xdr.c
+++ b/fs/lockd/xdr.c
@@ -321,15 +321,14 @@ nlmsvc_decode_notify(struct svc_rqst *rqstp, __be32 *p)
  */
 
 int
-nlmsvc_encode_void(struct svc_rqst *rqstp, __be32 *p)
+nlmsvc_encode_void(struct svc_rqst *rqstp, struct xdr_stream *xdr)
 {
 	return 1;
 }
 
 int
-nlmsvc_encode_testres(struct svc_rqst *rqstp, __be32 *p)
+nlmsvc_encode_testres(struct svc_rqst *rqstp, struct xdr_stream *xdr)
 {
-	struct xdr_stream *xdr = &rqstp->rq_res_stream;
 	struct nlm_res *resp = rqstp->rq_resp;
 
 	return svcxdr_encode_cookie(xdr, &resp->cookie) &&
@@ -337,9 +336,8 @@ nlmsvc_encode_testres(struct svc_rqst *rqstp, __be32 *p)
 }
 
 int
-nlmsvc_encode_res(struct svc_rqst *rqstp, __be32 *p)
+nlmsvc_encode_res(struct svc_rqst *rqstp, struct xdr_stream *xdr)
 {
-	struct xdr_stream *xdr = &rqstp->rq_res_stream;
 	struct nlm_res *resp = rqstp->rq_resp;
 
 	return svcxdr_encode_cookie(xdr, &resp->cookie) &&
@@ -347,9 +345,8 @@ nlmsvc_encode_res(struct svc_rqst *rqstp, __be32 *p)
 }
 
 int
-nlmsvc_encode_shareres(struct svc_rqst *rqstp, __be32 *p)
+nlmsvc_encode_shareres(struct svc_rqst *rqstp, struct xdr_stream *xdr)
 {
-	struct xdr_stream *xdr = &rqstp->rq_res_stream;
 	struct nlm_res *resp = rqstp->rq_resp;
 
 	if (!svcxdr_encode_cookie(xdr, &resp->cookie))
diff --git a/fs/lockd/xdr4.c b/fs/lockd/xdr4.c
index 98e957e4566c..026d965c0dd1 100644
--- a/fs/lockd/xdr4.c
+++ b/fs/lockd/xdr4.c
@@ -319,15 +319,14 @@ nlm4svc_decode_notify(struct svc_rqst *rqstp, __be32 *p)
  */
 
 int
-nlm4svc_encode_void(struct svc_rqst *rqstp, __be32 *p)
+nlm4svc_encode_void(struct svc_rqst *rqstp, struct xdr_stream *xdr)
 {
 	return 1;
 }
 
 int
-nlm4svc_encode_testres(struct svc_rqst *rqstp, __be32 *p)
+nlm4svc_encode_testres(struct svc_rqst *rqstp, struct xdr_stream *xdr)
 {
-	struct xdr_stream *xdr = &rqstp->rq_res_stream;
 	struct nlm_res *resp = rqstp->rq_resp;
 
 	return svcxdr_encode_cookie(xdr, &resp->cookie) &&
@@ -335,9 +334,8 @@ nlm4svc_encode_testres(struct svc_rqst *rqstp, __be32 *p)
 }
 
 int
-nlm4svc_encode_res(struct svc_rqst *rqstp, __be32 *p)
+nlm4svc_encode_res(struct svc_rqst *rqstp, struct xdr_stream *xdr)
 {
-	struct xdr_stream *xdr = &rqstp->rq_res_stream;
 	struct nlm_res *resp = rqstp->rq_resp;
 
 	return svcxdr_encode_cookie(xdr, &resp->cookie) &&
@@ -345,9 +343,8 @@ nlm4svc_encode_res(struct svc_rqst *rqstp, __be32 *p)
 }
 
 int
-nlm4svc_encode_shareres(struct svc_rqst *rqstp, __be32 *p)
+nlm4svc_encode_shareres(struct svc_rqst *rqstp, struct xdr_stream *xdr)
 {
-	struct xdr_stream *xdr = &rqstp->rq_res_stream;
 	struct nlm_res *resp = rqstp->rq_resp;
 
 	if (!svcxdr_encode_cookie(xdr, &resp->cookie))
diff --git a/fs/nfs/callback_xdr.c b/fs/nfs/callback_xdr.c
index 4c48d85f6517..286d330488a7 100644
--- a/fs/nfs/callback_xdr.c
+++ b/fs/nfs/callback_xdr.c
@@ -67,9 +67,9 @@ static __be32 nfs4_callback_null(struct svc_rqst *rqstp)
  * svc_process_common() looks for an XDR encoder to know when
  * not to drop a Reply.
  */
-static int nfs4_encode_void(struct svc_rqst *rqstp, __be32 *p)
+static int nfs4_encode_void(struct svc_rqst *rqstp, struct xdr_stream *xdr)
 {
-	return xdr_ressize_check(rqstp, p);
+	return 1;
 }
 
 static __be32 decode_string(struct xdr_stream *xdr, unsigned int *len,
diff --git a/fs/nfsd/nfs2acl.c b/fs/nfsd/nfs2acl.c
index 8703326fc165..17c6e1820e76 100644
--- a/fs/nfsd/nfs2acl.c
+++ b/fs/nfsd/nfs2acl.c
@@ -238,9 +238,9 @@ static int nfsaclsvc_decode_accessargs(struct svc_rqst *rqstp, __be32 *p)
  */
 
 /* GETACL */
-static int nfsaclsvc_encode_getaclres(struct svc_rqst *rqstp, __be32 *p)
+static int
+nfsaclsvc_encode_getaclres(struct svc_rqst *rqstp, struct xdr_stream *xdr)
 {
-	struct xdr_stream *xdr = &rqstp->rq_res_stream;
 	struct nfsd3_getaclres *resp = rqstp->rq_resp;
 	struct dentry *dentry = resp->fh.fh_dentry;
 	struct inode *inode;
@@ -278,9 +278,9 @@ static int nfsaclsvc_encode_getaclres(struct svc_rqst *rqstp, __be32 *p)
 }
 
 /* ACCESS */
-static int nfsaclsvc_encode_accessres(struct svc_rqst *rqstp, __be32 *p)
+static int
+nfsaclsvc_encode_accessres(struct svc_rqst *rqstp, struct xdr_stream *xdr)
 {
-	struct xdr_stream *xdr = &rqstp->rq_res_stream;
 	struct nfsd3_accessres *resp = rqstp->rq_resp;
 
 	if (!svcxdr_encode_stat(xdr, resp->status))
diff --git a/fs/nfsd/nfs3acl.c b/fs/nfsd/nfs3acl.c
index bcb2fc5c7b99..3dfb7ff64d12 100644
--- a/fs/nfsd/nfs3acl.c
+++ b/fs/nfsd/nfs3acl.c
@@ -169,9 +169,9 @@ static int nfs3svc_decode_setaclargs(struct svc_rqst *rqstp, __be32 *p)
  */
 
 /* GETACL */
-static int nfs3svc_encode_getaclres(struct svc_rqst *rqstp, __be32 *p)
+static int
+nfs3svc_encode_getaclres(struct svc_rqst *rqstp, struct xdr_stream *xdr)
 {
-	struct xdr_stream *xdr = &rqstp->rq_res_stream;
 	struct nfsd3_getaclres *resp = rqstp->rq_resp;
 	struct dentry *dentry = resp->fh.fh_dentry;
 	struct kvec *head = rqstp->rq_res.head;
@@ -221,9 +221,9 @@ static int nfs3svc_encode_getaclres(struct svc_rqst *rqstp, __be32 *p)
 }
 
 /* SETACL */
-static int nfs3svc_encode_setaclres(struct svc_rqst *rqstp, __be32 *p)
+static int
+nfs3svc_encode_setaclres(struct svc_rqst *rqstp, struct xdr_stream *xdr)
 {
-	struct xdr_stream *xdr = &rqstp->rq_res_stream;
 	struct nfsd3_attrstat *resp = rqstp->rq_resp;
 
 	return svcxdr_encode_nfsstat3(xdr, resp->status) &&
diff --git a/fs/nfsd/nfs3xdr.c b/fs/nfsd/nfs3xdr.c
index 657ede6555bb..cfaa85667b4b 100644
--- a/fs/nfsd/nfs3xdr.c
+++ b/fs/nfsd/nfs3xdr.c
@@ -915,9 +915,8 @@ nfs3svc_decode_commitargs(struct svc_rqst *rqstp, __be32 *p)
 
 /* GETATTR */
 int
-nfs3svc_encode_getattrres(struct svc_rqst *rqstp, __be32 *p)
+nfs3svc_encode_getattrres(struct svc_rqst *rqstp, struct xdr_stream *xdr)
 {
-	struct xdr_stream *xdr = &rqstp->rq_res_stream;
 	struct nfsd3_attrstat *resp = rqstp->rq_resp;
 
 	if (!svcxdr_encode_nfsstat3(xdr, resp->status))
@@ -935,9 +934,8 @@ nfs3svc_encode_getattrres(struct svc_rqst *rqstp, __be32 *p)
 
 /* SETATTR, REMOVE, RMDIR */
 int
-nfs3svc_encode_wccstat(struct svc_rqst *rqstp, __be32 *p)
+nfs3svc_encode_wccstat(struct svc_rqst *rqstp, struct xdr_stream *xdr)
 {
-	struct xdr_stream *xdr = &rqstp->rq_res_stream;
 	struct nfsd3_attrstat *resp = rqstp->rq_resp;
 
 	return svcxdr_encode_nfsstat3(xdr, resp->status) &&
@@ -945,9 +943,9 @@ nfs3svc_encode_wccstat(struct svc_rqst *rqstp, __be32 *p)
 }
 
 /* LOOKUP */
-int nfs3svc_encode_lookupres(struct svc_rqst *rqstp, __be32 *p)
+int
+nfs3svc_encode_lookupres(struct svc_rqst *rqstp, struct xdr_stream *xdr)
 {
-	struct xdr_stream *xdr = &rqstp->rq_res_stream;
 	struct nfsd3_diropres *resp = rqstp->rq_resp;
 
 	if (!svcxdr_encode_nfsstat3(xdr, resp->status))
@@ -971,9 +969,8 @@ int nfs3svc_encode_lookupres(struct svc_rqst *rqstp, __be32 *p)
 
 /* ACCESS */
 int
-nfs3svc_encode_accessres(struct svc_rqst *rqstp, __be32 *p)
+nfs3svc_encode_accessres(struct svc_rqst *rqstp, struct xdr_stream *xdr)
 {
-	struct xdr_stream *xdr = &rqstp->rq_res_stream;
 	struct nfsd3_accessres *resp = rqstp->rq_resp;
 
 	if (!svcxdr_encode_nfsstat3(xdr, resp->status))
@@ -995,9 +992,8 @@ nfs3svc_encode_accessres(struct svc_rqst *rqstp, __be32 *p)
 
 /* READLINK */
 int
-nfs3svc_encode_readlinkres(struct svc_rqst *rqstp, __be32 *p)
+nfs3svc_encode_readlinkres(struct svc_rqst *rqstp, struct xdr_stream *xdr)
 {
-	struct xdr_stream *xdr = &rqstp->rq_res_stream;
 	struct nfsd3_readlinkres *resp = rqstp->rq_resp;
 	struct kvec *head = rqstp->rq_res.head;
 
@@ -1023,9 +1019,8 @@ nfs3svc_encode_readlinkres(struct svc_rqst *rqstp, __be32 *p)
 
 /* READ */
 int
-nfs3svc_encode_readres(struct svc_rqst *rqstp, __be32 *p)
+nfs3svc_encode_readres(struct svc_rqst *rqstp, struct xdr_stream *xdr)
 {
-	struct xdr_stream *xdr = &rqstp->rq_res_stream;
 	struct nfsd3_readres *resp = rqstp->rq_resp;
 	struct kvec *head = rqstp->rq_res.head;
 
@@ -1056,7 +1051,7 @@ nfs3svc_encode_readres(struct svc_rqst *rqstp, __be32 *p)
 
 /* WRITE */
 int
-nfs3svc_encode_writeres(struct svc_rqst *rqstp, __be32 *p)
+nfs3svc_encode_writeres(struct svc_rqst *rqstp, struct xdr_stream *xdr)
 {
 	struct nfsd3_writeres *resp = rqstp->rq_resp;
 	struct nfsd_net *nn = net_generic(SVC_NET(rqstp), nfsd_net_id);
@@ -1077,9 +1072,8 @@ nfs3svc_encode_writeres(struct svc_rqst *rqstp, __be32 *p)
 
 /* CREATE, MKDIR, SYMLINK, MKNOD */
 int
-nfs3svc_encode_createres(struct svc_rqst *rqstp, __be32 *p)
+nfs3svc_encode_createres(struct svc_rqst *rqstp, struct xdr_stream *xdr)
 {
-	struct xdr_stream *xdr = &rqstp->rq_res_stream;
 	struct nfsd3_diropres *resp = rqstp->rq_resp;
 
 	if (!svcxdr_encode_nfsstat3(xdr, resp->status))
@@ -1103,9 +1097,8 @@ nfs3svc_encode_createres(struct svc_rqst *rqstp, __be32 *p)
 
 /* RENAME */
 int
-nfs3svc_encode_renameres(struct svc_rqst *rqstp, __be32 *p)
+nfs3svc_encode_renameres(struct svc_rqst *rqstp, struct xdr_stream *xdr)
 {
-	struct xdr_stream *xdr = &rqstp->rq_res_stream;
 	struct nfsd3_renameres *resp = rqstp->rq_resp;
 
 	return svcxdr_encode_nfsstat3(xdr, resp->status) &&
@@ -1115,9 +1108,8 @@ nfs3svc_encode_renameres(struct svc_rqst *rqstp, __be32 *p)
 
 /* LINK */
 int
-nfs3svc_encode_linkres(struct svc_rqst *rqstp, __be32 *p)
+nfs3svc_encode_linkres(struct svc_rqst *rqstp, struct xdr_stream *xdr)
 {
-	struct xdr_stream *xdr = &rqstp->rq_res_stream;
 	struct nfsd3_linkres *resp = rqstp->rq_resp;
 
 	return svcxdr_encode_nfsstat3(xdr, resp->status) &&
@@ -1127,7 +1119,7 @@ nfs3svc_encode_linkres(struct svc_rqst *rqstp, __be32 *p)
 
 /* READDIR */
 int
-nfs3svc_encode_readdirres(struct svc_rqst *rqstp, __be32 *p)
+nfs3svc_encode_readdirres(struct svc_rqst *rqstp, struct xdr_stream *xdr)
 {
 	struct nfsd3_readdirres *resp = rqstp->rq_resp;
 
@@ -1415,9 +1407,8 @@ svcxdr_encode_fsstat3resok(struct xdr_stream *xdr,
 
 /* FSSTAT */
 int
-nfs3svc_encode_fsstatres(struct svc_rqst *rqstp, __be32 *p)
+nfs3svc_encode_fsstatres(struct svc_rqst *rqstp, struct xdr_stream *xdr)
 {
-	struct xdr_stream *xdr = &rqstp->rq_res_stream;
 	struct nfsd3_fsstatres *resp = rqstp->rq_resp;
 
 	if (!svcxdr_encode_nfsstat3(xdr, resp->status))
@@ -1462,9 +1453,8 @@ svcxdr_encode_fsinfo3resok(struct xdr_stream *xdr,
 
 /* FSINFO */
 int
-nfs3svc_encode_fsinfores(struct svc_rqst *rqstp, __be32 *p)
+nfs3svc_encode_fsinfores(struct svc_rqst *rqstp, struct xdr_stream *xdr)
 {
-	struct xdr_stream *xdr = &rqstp->rq_res_stream;
 	struct nfsd3_fsinfores *resp = rqstp->rq_resp;
 
 	if (!svcxdr_encode_nfsstat3(xdr, resp->status))
@@ -1505,9 +1495,8 @@ svcxdr_encode_pathconf3resok(struct xdr_stream *xdr,
 
 /* PATHCONF */
 int
-nfs3svc_encode_pathconfres(struct svc_rqst *rqstp, __be32 *p)
+nfs3svc_encode_pathconfres(struct svc_rqst *rqstp, struct xdr_stream *xdr)
 {
-	struct xdr_stream *xdr = &rqstp->rq_res_stream;
 	struct nfsd3_pathconfres *resp = rqstp->rq_resp;
 
 	if (!svcxdr_encode_nfsstat3(xdr, resp->status))
@@ -1529,7 +1518,7 @@ nfs3svc_encode_pathconfres(struct svc_rqst *rqstp, __be32 *p)
 
 /* COMMIT */
 int
-nfs3svc_encode_commitres(struct svc_rqst *rqstp, __be32 *p)
+nfs3svc_encode_commitres(struct svc_rqst *rqstp, struct xdr_stream *xdr)
 {
 	struct nfsd3_commitres *resp = rqstp->rq_resp;
 	struct nfsd_net *nn = net_generic(SVC_NET(rqstp), nfsd_net_id);
* Unmerged path fs/nfsd/nfs4xdr.c
* Unmerged path fs/nfsd/nfsd.h
* Unmerged path fs/nfsd/nfssvc.c
diff --git a/fs/nfsd/nfsxdr.c b/fs/nfsd/nfsxdr.c
index 1c01c0cb3914..bef60f2b0441 100644
--- a/fs/nfsd/nfsxdr.c
+++ b/fs/nfsd/nfsxdr.c
@@ -432,18 +432,16 @@ nfssvc_decode_readdirargs(struct svc_rqst *rqstp, __be32 *p)
  */
 
 int
-nfssvc_encode_statres(struct svc_rqst *rqstp, __be32 *p)
+nfssvc_encode_statres(struct svc_rqst *rqstp, struct xdr_stream *xdr)
 {
-	struct xdr_stream *xdr = &rqstp->rq_res_stream;
 	struct nfsd_stat *resp = rqstp->rq_resp;
 
 	return svcxdr_encode_stat(xdr, resp->status);
 }
 
 int
-nfssvc_encode_attrstatres(struct svc_rqst *rqstp, __be32 *p)
+nfssvc_encode_attrstatres(struct svc_rqst *rqstp, struct xdr_stream *xdr)
 {
-	struct xdr_stream *xdr = &rqstp->rq_res_stream;
 	struct nfsd_attrstat *resp = rqstp->rq_resp;
 
 	if (!svcxdr_encode_stat(xdr, resp->status))
@@ -459,9 +457,8 @@ nfssvc_encode_attrstatres(struct svc_rqst *rqstp, __be32 *p)
 }
 
 int
-nfssvc_encode_diropres(struct svc_rqst *rqstp, __be32 *p)
+nfssvc_encode_diropres(struct svc_rqst *rqstp, struct xdr_stream *xdr)
 {
-	struct xdr_stream *xdr = &rqstp->rq_res_stream;
 	struct nfsd_diropres *resp = rqstp->rq_resp;
 
 	if (!svcxdr_encode_stat(xdr, resp->status))
@@ -479,9 +476,8 @@ nfssvc_encode_diropres(struct svc_rqst *rqstp, __be32 *p)
 }
 
 int
-nfssvc_encode_readlinkres(struct svc_rqst *rqstp, __be32 *p)
+nfssvc_encode_readlinkres(struct svc_rqst *rqstp, struct xdr_stream *xdr)
 {
-	struct xdr_stream *xdr = &rqstp->rq_res_stream;
 	struct nfsd_readlinkres *resp = rqstp->rq_resp;
 	struct kvec *head = rqstp->rq_res.head;
 
@@ -501,9 +497,8 @@ nfssvc_encode_readlinkres(struct svc_rqst *rqstp, __be32 *p)
 }
 
 int
-nfssvc_encode_readres(struct svc_rqst *rqstp, __be32 *p)
+nfssvc_encode_readres(struct svc_rqst *rqstp, struct xdr_stream *xdr)
 {
-	struct xdr_stream *xdr = &rqstp->rq_res_stream;
 	struct nfsd_readres *resp = rqstp->rq_resp;
 	struct kvec *head = rqstp->rq_res.head;
 
@@ -526,7 +521,7 @@ nfssvc_encode_readres(struct svc_rqst *rqstp, __be32 *p)
 }
 
 int
-nfssvc_encode_readdirres(struct svc_rqst *rqstp, __be32 *p)
+nfssvc_encode_readdirres(struct svc_rqst *rqstp, struct xdr_stream *xdr)
 {
 	struct nfsd_readdirres *resp = rqstp->rq_resp;
 
@@ -544,11 +539,11 @@ nfssvc_encode_readdirres(struct svc_rqst *rqstp, __be32 *p)
 }
 
 int
-nfssvc_encode_statfsres(struct svc_rqst *rqstp, __be32 *p)
+nfssvc_encode_statfsres(struct svc_rqst *rqstp, struct xdr_stream *xdr)
 {
-	struct xdr_stream *xdr = &rqstp->rq_res_stream;
 	struct nfsd_statfsres *resp = rqstp->rq_resp;
 	struct kstatfs	*stat = &resp->stats;
+	__be32 *p;
 
 	if (!svcxdr_encode_stat(xdr, resp->status))
 		return 0;
* Unmerged path fs/nfsd/xdr.h
* Unmerged path fs/nfsd/xdr3.h
* Unmerged path fs/nfsd/xdr4.h
* Unmerged path include/linux/lockd/xdr.h
* Unmerged path include/linux/lockd/xdr4.h
diff --git a/include/linux/sunrpc/svc.h b/include/linux/sunrpc/svc.h
index 6940c6b319c7..59b39040e559 100644
--- a/include/linux/sunrpc/svc.h
+++ b/include/linux/sunrpc/svc.h
@@ -454,7 +454,8 @@ struct svc_procedure {
 	/* XDR decode args: */
 	int			(*pc_decode)(struct svc_rqst *, __be32 *data);
 	/* XDR encode result: */
-	int			(*pc_encode)(struct svc_rqst *, __be32 *data);
+	int			(*pc_encode)(struct svc_rqst *rqstp,
+					     struct xdr_stream *xdr);
 	/* XDR free result: */
 	void			(*pc_release)(struct svc_rqst *);
 	unsigned int		pc_argsize;	/* argument struct size */
