net/mlx5: Don't rely on always true registered field

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-394.el8
commit-author Leon Romanovsky <leonro@nvidia.com>
commit 35f6986743d78544779a892415c2edefa1f36a1c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-394.el8/35f69867.failed

Devlink is an integral part of mlx5 driver and all flows ensure that
devlink_*_register() will success. That makes the ->registered check
an obsolete.

	Signed-off-by: Leon Romanovsky <leonro@nvidia.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 35f6986743d78544779a892415c2edefa1f36a1c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en/devlink.c
#	drivers/net/ethernet/mellanox/mlx5/core/en_main.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en/devlink.c
index a25254d56055,86e079310ac3..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en/devlink.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en/devlink.c
@@@ -63,33 -54,16 +63,39 @@@ void mlx5e_devlink_port_type_eth_set(st
  void mlx5e_devlink_port_unregister(struct mlx5e_priv *priv)
  {
  	struct devlink_port *dl_port = mlx5e_devlink_get_dl_port(priv);
 +	struct mlx5_core_dev *mdev = priv->mdev;
 +
 +	if (!mlx5_core_is_sf(mdev))
 +		return; /* RHEL-only: Disable 'devlink port' support for non-switchdev mode*/
  
- 	if (dl_port->registered)
- 		devlink_port_unregister(dl_port);
+ 	devlink_port_unregister(dl_port);
  }
  
  struct devlink_port *mlx5e_get_devlink_port(struct net_device *dev)
  {
  	struct mlx5e_priv *priv = netdev_priv(dev);
++<<<<<<< HEAD
 +	struct mlx5e_rep_priv *rpriv = priv->ppriv;
 +	struct mlx5_core_dev *mdev = priv->mdev;
 +	struct devlink_port *port;
++=======
++>>>>>>> 35f6986743d7 (net/mlx5: Don't rely on always true registered field)
  
  	if (!netif_device_present(dev))
  		return NULL;
  
++<<<<<<< HEAD
 +	if (mdev->priv.eswitch && rpriv && rpriv->rep && rpriv->rep->vport)
 +		return mlx5_esw_offloads_devlink_port(mdev->priv.eswitch, rpriv->rep->vport);
 +
 +	if (!mlx5_core_is_sf(mdev))
 +		return NULL; /* RHEL-only: Disable 'devlink port' support for non-switchdev mode*/
 +
 +	port = mlx5e_devlink_get_dl_port(priv);
 +	if (port->registered)
 +		return port;
 +	return NULL;
++=======
+ 	return mlx5e_devlink_get_dl_port(priv);
++>>>>>>> 35f6986743d7 (net/mlx5: Don't rely on always true registered field)
  }
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_main.c
index ce0c72985a66,c663811f210b..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
@@@ -4691,30 -4791,15 +4690,38 @@@ static int mlx5e_nic_init(struct mlx5_c
  	if (err)
  		mlx5_core_err(mdev, "TLS initialization failed, %d\n", err);
  
++<<<<<<< HEAD
 +	err = mlx5e_devlink_port_register(priv);
 +	if (err)
 +		mlx5_core_err(mdev, "mlx5e_devlink_port_register failed, %d\n", err);
 +
 +	dl_port = mlx5e_devlink_get_dl_port(priv);
 +
 +	/* RHEL-only: Disable 'devlink port' support for non-switchdev mode*/
 +	if (!mlx5_core_is_sf(mdev) || dl_port->registered)
 +		mlx5e_health_create_reporters(priv);
 +
++=======
+ 	mlx5e_health_create_reporters(priv);
++>>>>>>> 35f6986743d7 (net/mlx5: Don't rely on always true registered field)
  	return 0;
  }
  
  static void mlx5e_nic_cleanup(struct mlx5e_priv *priv)
  {
++<<<<<<< HEAD
 +	struct devlink_port *dl_port = mlx5e_devlink_get_dl_port(priv);
 +
 +	/* RHEL-only: Disable 'devlink port' support for non-switchdev mode*/
 +	if (!mlx5_core_is_sf(priv->mdev) || dl_port->registered)
 +		mlx5e_health_destroy_reporters(priv);
 +	mlx5e_devlink_port_unregister(priv);
++=======
+ 	mlx5e_health_destroy_reporters(priv);
++>>>>>>> 35f6986743d7 (net/mlx5: Don't rely on always true registered field)
  	mlx5e_tls_cleanup(priv);
  	mlx5e_ipsec_cleanup(priv);
 +	mlx5e_fs_cleanup(priv);
  }
  
  static int mlx5e_init_nic_rx(struct mlx5e_priv *priv)
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en/devlink.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_main.c
