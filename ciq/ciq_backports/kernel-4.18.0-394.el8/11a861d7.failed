devlink: Use xarray to store devlink instances

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-394.el8
commit-author Leon Romanovsky <leonro@nvidia.com>
commit 11a861d767cdd87a34397821b0fd2095893b84b3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-394.el8/11a861d7.failed

We can use xarray instead of linearly organized linked lists for the
devlink instances. This will let us revise the locking scheme in favour
of internal xarray locking that protects database.

	Signed-off-by: Leon Romanovsky <leonro@nvidia.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 11a861d767cdd87a34397821b0fd2095893b84b3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/core/devlink.c
diff --cc net/core/devlink.c
index e08481ed35ba,d218f57ad8cf..000000000000
--- a/net/core/devlink.c
+++ b/net/core/devlink.c
@@@ -8908,19 -8912,29 +8925,33 @@@ static bool devlink_reload_actions_vali
   *	and name.
   */
  struct devlink *devlink_alloc_ns(const struct devlink_ops *ops,
 -				 size_t priv_size, struct net *net,
 -				 struct device *dev)
 +				 size_t priv_size, struct net *net)
  {
  	struct devlink *devlink;
+ 	static u32 last_id;
+ 	int ret;
  
 -	WARN_ON(!ops || !dev);
 +	if (WARN_ON(!ops))
 +		return NULL;
 +
  	if (!devlink_reload_actions_valid(ops))
  		return NULL;
  
  	devlink = kzalloc(sizeof(*devlink) + priv_size, GFP_KERNEL);
  	if (!devlink)
  		return NULL;
++<<<<<<< HEAD
++=======
+ 
+ 	ret = xa_alloc_cyclic(&devlinks, &devlink->index, devlink, xa_limit_31b,
+ 			      &last_id, GFP_KERNEL);
+ 	if (ret < 0) {
+ 		kfree(devlink);
+ 		return NULL;
+ 	}
+ 
+ 	devlink->dev = dev;
++>>>>>>> 11a861d767cd (devlink: Use xarray to store devlink instances)
  	devlink->ops = ops;
  	xa_init_flags(&devlink->snapshot_ids, XA_FLAGS_ALLOC);
  	write_pnet(&devlink->_net, net);
@@@ -8948,14 -8962,11 +8979,14 @@@ EXPORT_SYMBOL_GPL(devlink_alloc_ns)
   *	devlink_register - Register devlink instance
   *
   *	@devlink: devlink
 + *	@dev: parent device
   */
 -int devlink_register(struct devlink *devlink)
 +int devlink_register(struct devlink *devlink, struct device *dev)
  {
 +	WARN_ON(devlink->dev);
 +	devlink->dev = dev;
  	mutex_lock(&devlink_mutex);
- 	list_add_tail(&devlink->list, &devlink_list);
+ 	xa_set_mark(&devlinks, devlink->index, DEVLINK_REGISTERED);
  	devlink_notify(devlink, DEVLINK_CMD_NEW);
  	mutex_unlock(&devlink_mutex);
  	return 0;
diff --git a/include/net/devlink.h b/include/net/devlink.h
index 9f5811d67746..e897ba695d35 100644
--- a/include/net/devlink.h
+++ b/include/net/devlink.h
@@ -36,7 +36,7 @@ struct devlink_dev_stats {
 struct devlink_ops;
 
 struct devlink {
-	struct list_head list;
+	u32 index;
 	struct list_head port_list;
 	struct list_head rate_list;
 	struct list_head sb_list;
* Unmerged path net/core/devlink.c
