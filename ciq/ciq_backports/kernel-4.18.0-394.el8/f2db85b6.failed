driver core: Avoid pointless deferred probe attempts

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-394.el8
commit-author Saravana Kannan <saravanak@google.com>
commit f2db85b64f0af1410ccb8ebcc9d7fa38e99feee9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-394.el8/f2db85b6.failed

There's no point in adding a device to the deferred probe list if we
know for sure that it doesn't have a matching driver. So, check if a
device can match with a driver before adding it to the deferred probe
list.

	Signed-off-by: Saravana Kannan <saravanak@google.com>
Link: https://lore.kernel.org/r/20210302211133.2244281-2-saravanak@google.com
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit f2db85b64f0af1410ccb8ebcc9d7fa38e99feee9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/device.h
diff --cc include/linux/device.h
index da6e1db2c903,38a2071cf776..000000000000
--- a/include/linux/device.h
+++ b/include/linux/device.h
@@@ -1305,7 -547,8 +1308,12 @@@ struct device 
  	bool			offline_disabled:1;
  	bool			offline:1;
  	bool			of_node_reused:1;
++<<<<<<< HEAD
 +	RH_KABI_FILL_HOLE(bool state_synced:1)
++=======
+ 	bool			state_synced:1;
+ 	bool			can_match:1;
++>>>>>>> f2db85b64f0a (driver core: Avoid pointless deferred probe attempts)
  #if defined(CONFIG_ARCH_HAS_SYNC_DMA_FOR_DEVICE) || \
      defined(CONFIG_ARCH_HAS_SYNC_DMA_FOR_CPU) || \
      defined(CONFIG_ARCH_HAS_SYNC_DMA_FOR_CPU_ALL)
diff --git a/drivers/base/dd.c b/drivers/base/dd.c
index 808fdde458fe..84e0f69bc755 100644
--- a/drivers/base/dd.c
+++ b/drivers/base/dd.c
@@ -146,6 +146,9 @@ static DECLARE_WORK(deferred_probe_work, deferred_probe_work_func);
 
 void driver_deferred_probe_add(struct device *dev)
 {
+	if (!dev->can_match)
+		return;
+
 	mutex_lock(&deferred_probe_mutex);
 	if (list_empty(&dev->p->deferred_probe)) {
 		dev_dbg(dev, "Added to deferred list\n");
@@ -757,6 +760,7 @@ static int driver_probe_device(struct device_driver *drv, struct device *dev)
 	if (!device_is_registered(dev))
 		return -ENODEV;
 
+	dev->can_match = true;
 	pr_debug("bus: '%s': %s: matched device %s with driver %s\n",
 		 drv->bus->name, __func__, dev_name(dev), drv->name);
 
@@ -838,6 +842,7 @@ static int __device_attach_driver(struct device_driver *drv, void *_data)
 		return 0;
 	} else if (ret == -EPROBE_DEFER) {
 		dev_dbg(dev, "Device match requests probe deferral\n");
+		dev->can_match = true;
 		driver_deferred_probe_add(dev);
 	} else if (ret < 0) {
 		dev_dbg(dev, "Bus failed to match device: %d", ret);
@@ -1071,6 +1076,7 @@ static int __driver_attach(struct device *dev, void *data)
 		return 0;
 	} else if (ret == -EPROBE_DEFER) {
 		dev_dbg(dev, "Device match requests probe deferral\n");
+		dev->can_match = true;
 		driver_deferred_probe_add(dev);
 	} else if (ret < 0) {
 		dev_dbg(dev, "Bus failed to match device: %d", ret);
* Unmerged path include/linux/device.h
