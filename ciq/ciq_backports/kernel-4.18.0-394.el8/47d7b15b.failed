arm64: cpufeature: introduce helper cpu_has_hw_af()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-394.el8
commit-author Jia He <justin.he@arm.com>
commit 47d7b15b88f96a90694cfc607d0717d62dff6c45
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-394.el8/47d7b15b.failed

We unconditionally set the HW_AFDBM capability and only enable it on
CPUs which really have the feature. But sometimes we need to know
whether this cpu has the capability of HW AF. So decouple AF from
DBM by a new helper cpu_has_hw_af().

If later we noticed a potential performance issue on this path, we can
turn it into a static label as with other CPU features.

	Signed-off-by: Jia He <justin.he@arm.com>
	Suggested-by: Suzuki Poulose <Suzuki.Poulose@arm.com>
	Reviewed-by: Catalin Marinas <catalin.marinas@arm.com>
	Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
(cherry picked from commit 47d7b15b88f96a90694cfc607d0717d62dff6c45)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/arm64/include/asm/cpufeature.h
diff --cc arch/arm64/include/asm/cpufeature.h
index 650f8b001f11,4261d55e8506..000000000000
--- a/arch/arm64/include/asm/cpufeature.h
+++ b/arch/arm64/include/asm/cpufeature.h
@@@ -731,25 -660,19 +731,41 @@@ static inline u32 id_aa64mmfr0_parange_
  	}
  }
  
++<<<<<<< HEAD
 +static inline unsigned int get_vmid_bits(u64 mmfr1)
 +{
 +	int vmid_bits;
 +
 +	vmid_bits = cpuid_feature_extract_unsigned_field(mmfr1,
 +						ID_AA64MMFR1_VMIDBITS_SHIFT);
 +	if (vmid_bits == ID_AA64MMFR1_VMIDBITS_16)
 +		return 16;
 +
 +	/*
 +	 * Return the default here even if any reserved
 +	 * value is fetched from the system register.
 +	 */
 +	return 8;
 +}
 +
 +u32 get_kvm_ipa_limit(void);
 +
 +extern int do_emulate_mrs(struct pt_regs *regs, u32 sys_reg, u32 rt);
++=======
+ /* Check whether hardware update of the Access flag is supported */
+ static inline bool cpu_has_hw_af(void)
+ {
+ 	u64 mmfr1;
+ 
+ 	if (!IS_ENABLED(CONFIG_ARM64_HW_AFDBM))
+ 		return false;
+ 
+ 	mmfr1 = read_cpuid(ID_AA64MMFR1_EL1);
+ 	return cpuid_feature_extract_unsigned_field(mmfr1,
+ 						ID_AA64MMFR1_HADBS_SHIFT);
+ }
+ 
++>>>>>>> 47d7b15b88f9 (arm64: cpufeature: introduce helper cpu_has_hw_af())
  #endif /* __ASSEMBLY__ */
  
  #endif
* Unmerged path arch/arm64/include/asm/cpufeature.h
