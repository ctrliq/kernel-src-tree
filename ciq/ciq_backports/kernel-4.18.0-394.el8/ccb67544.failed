tracing/osnoise: Remove TIMERLAT ifdefs from inside functions

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-394.el8
commit-author Daniel Bristot de Oliveira <bristot@kernel.org>
commit ccb6754495ef253af5e1253434f0d21b6225c4ad
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-394.el8/ccb67544.failed

Remove CONFIG_TIMERLAT_TRACER from inside functions, avoiding
compilation problems in the future.

Link: https://lkml.kernel.org/r/8245abb5a112d249f5da6c1df499244ad9e647bc.1635702894.git.bristot@kernel.org

	Cc: Ingo Molnar <mingo@redhat.com>
	Cc: Tom Zanussi <zanussi@kernel.org>
	Cc: Masami Hiramatsu <mhiramat@kernel.org>
	Cc: Juri Lelli <juri.lelli@redhat.com>
	Cc: Clark Williams <williams@redhat.com>
	Cc: John Kacur <jkacur@redhat.com>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
	Cc: Daniel Bristot de Oliveira <bristot@kernel.org>
	Cc: linux-rt-users@vger.kernel.org
	Cc: linux-trace-devel@vger.kernel.org
	Cc: linux-kernel@vger.kernel.org
	Suggested-by: Steven Rostedt <rostedt@goodmis.org>
	Signed-off-by: Daniel Bristot de Oliveira <bristot@kernel.org>
	Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
(cherry picked from commit ccb6754495ef253af5e1253434f0d21b6225c4ad)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/trace/trace_osnoise.c
diff --cc kernel/trace/trace_osnoise.c
index 60adf8c7f9ff,5e832e3edf1f..000000000000
--- a/kernel/trace/trace_osnoise.c
+++ b/kernel/trace/trace_osnoise.c
@@@ -248,10 -321,56 +248,63 @@@ static struct osnoise_data 
  #endif
  };
  
++<<<<<<< HEAD
 +/*
 + * Boolean variable used to inform that the tracer is currently sampling.
 + */
 +static bool osnoise_busy;
++=======
+ #ifdef CONFIG_TIMERLAT_TRACER
+ static inline bool timerlat_enabled(void)
+ {
+ 	return osnoise_data.timerlat_tracer;
+ }
+ 
+ static inline int timerlat_softirq_exit(struct osnoise_variables *osn_var)
+ {
+ 	struct timerlat_variables *tlat_var = this_cpu_tmr_var();
+ 	/*
+ 	 * If the timerlat is enabled, but the irq handler did
+ 	 * not run yet enabling timerlat_tracer, do not trace.
+ 	 */
+ 	if (!tlat_var->tracing_thread) {
+ 		osn_var->softirq.arrival_time = 0;
+ 		osn_var->softirq.delta_start = 0;
+ 		return 0;
+ 	}
+ 	return 1;
+ }
+ 
+ static inline int timerlat_thread_exit(struct osnoise_variables *osn_var)
+ {
+ 	struct timerlat_variables *tlat_var = this_cpu_tmr_var();
+ 	/*
+ 	 * If the timerlat is enabled, but the irq handler did
+ 	 * not run yet enabling timerlat_tracer, do not trace.
+ 	 */
+ 	if (!tlat_var->tracing_thread) {
+ 		osn_var->thread.delta_start = 0;
+ 		osn_var->thread.arrival_time = 0;
+ 		return 0;
+ 	}
+ 	return 1;
+ }
+ #else /* CONFIG_TIMERLAT_TRACER */
+ static inline bool timerlat_enabled(void)
+ {
+ 	return false;
+ }
+ 
+ static inline int timerlat_softirq_exit(struct osnoise_variables *osn_var)
+ {
+ 	return 1;
+ }
+ static inline int timerlat_thread_exit(struct osnoise_variables *osn_var)
+ {
+ 	return 1;
+ }
+ #endif
++>>>>>>> ccb6754495ef (tracing/osnoise: Remove TIMERLAT ifdefs from inside functions)
  
  #ifdef CONFIG_PREEMPT_RT
  /*
@@@ -1524,20 -1675,17 +1562,24 @@@ static void stop_per_cpu_kthreads(void
  static int start_kthread(unsigned int cpu)
  {
  	struct task_struct *kthread;
 -	void *main = osnoise_main;
 +	void *func = osnoise_main;
  	char comm[24];
  
- #ifdef CONFIG_TIMERLAT_TRACER
- 	if (osnoise_data.timerlat_tracer) {
+ 	if (timerlat_enabled()) {
  		snprintf(comm, 24, "timerlat/%d", cpu);
 -		main = timerlat_main;
 +		func = timerlat_main;
  	} else {
  		snprintf(comm, 24, "osnoise/%d", cpu);
  	}
++<<<<<<< HEAD
 +#else
 +	snprintf(comm, 24, "osnoise/%d", cpu);
 +#endif
 +	kthread = kthread_create_on_cpu(func, NULL, cpu, comm);
++=======
+ 
+ 	kthread = kthread_create_on_cpu(main, NULL, cpu, comm);
++>>>>>>> ccb6754495ef (tracing/osnoise: Remove TIMERLAT ifdefs from inside functions)
  
  	if (IS_ERR(kthread)) {
  		pr_err(BANNER "could not start sampling thread\n");
@@@ -1871,22 -2048,13 +1942,27 @@@ static int init_tracefs(void
  	if (!tmp)
  		goto err;
  
 -	tmp = trace_create_file("cpus", TRACE_MODE_WRITE, top_dir, NULL, &cpus_fops);
 +	tmp = trace_create_file("cpus", 0644, top_dir, NULL, &cpus_fops);
  	if (!tmp)
  		goto err;
++<<<<<<< HEAD
 +#ifdef CONFIG_TIMERLAT_TRACER
 +#ifdef CONFIG_STACKTRACE
 +	tmp = tracefs_create_file("print_stack", 0640, top_dir,
 +				  &osnoise_print_stack, &trace_min_max_fops);
 +	if (!tmp)
 +		goto err;
 +#endif
 +
 +	tmp = tracefs_create_file("timerlat_period_us", 0640, top_dir,
 +				  &timerlat_period, &trace_min_max_fops);
 +	if (!tmp)
++=======
+ 
+ 	ret = init_timerlat_tracefs(top_dir);
+ 	if (ret)
++>>>>>>> ccb6754495ef (tracing/osnoise: Remove TIMERLAT ifdefs from inside functions)
  		goto err;
- #endif
  
  	return 0;
  
@@@ -2112,15 -2286,16 +2198,14 @@@ __init static int init_osnoise_tracer(v
  		return ret;
  	}
  
- #ifdef CONFIG_TIMERLAT_TRACER
- 	ret = register_tracer(&timerlat_tracer);
+ 	ret = init_timerlat_tracer();
  	if (ret) {
- 		pr_err(BANNER "Error registering timerlat\n");
+ 		pr_err(BANNER "Error registering timerlat!\n");
  		return ret;
  	}
- #endif
+ 
  	osnoise_init_hotplug_support();
  
 -	INIT_LIST_HEAD_RCU(&osnoise_instances);
 -
  	init_tracefs();
  
  	return 0;
* Unmerged path kernel/trace/trace_osnoise.c
