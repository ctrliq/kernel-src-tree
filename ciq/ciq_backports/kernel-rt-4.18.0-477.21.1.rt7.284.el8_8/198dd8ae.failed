xfs: punching delalloc extents on write failure is racy

jira LE-1907
Rebuild_History Non-Buildable kernel-rt-4.18.0-477.21.1.rt7.284.el8_8
commit-author Dave Chinner <dchinner@redhat.com>
commit 198dd8aedee6a7d2de0dfa739f9a008a938f6848
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-rt-4.18.0-477.21.1.rt7.284.el8_8/198dd8ae.failed

xfs_buffered_write_iomap_end() has a comment about the safety of
punching delalloc extents based holding the IOLOCK_EXCL. This
comment is wrong, and punching delalloc extents is not race free.

When we punch out a delalloc extent after a write failure in
xfs_buffered_write_iomap_end(), we punch out the page cache with
truncate_pagecache_range() before we punch out the delalloc extents.
At this point, we only hold the IOLOCK_EXCL, so there is nothing
stopping mmap() write faults racing with this cleanup operation,
reinstantiating a folio over the range we are about to punch and
hence requiring the delalloc extent to be kept.

If this race condition is hit, we can end up with a dirty page in
the page cache that has no delalloc extent or space reservation
backing it. This leads to bad things happening at writeback time.

To avoid this race condition, we need the page cache truncation to
be atomic w.r.t. the extent manipulation. We can do this by holding
the mapping->invalidate_lock exclusively across this operation -
this will prevent new pages from being inserted into the page cache
whilst we are removing the pages and the backing extent and space
reservation.

Taking the mapping->invalidate_lock exclusively in the buffered
write IO path is safe - it naturally nests inside the IOLOCK (see
truncate and fallocate paths). iomap_zero_range() can be called from
under the mapping->invalidate_lock (from the truncate path via
either xfs_zero_eof() or xfs_truncate_page(), but iomap_zero_iter()
will not instantiate new delalloc pages (because it skips holes) and
hence will not ever need to punch out delalloc extents on failure.

Fix the locking issue, and clean up the code logic a little to avoid
unnecessary work if we didn't allocate the delalloc extent or wrote
the entire region we allocated.

	Signed-off-by: Dave Chinner <dchinner@redhat.com>
	Reviewed-by: Christoph Hellwig <hch@lst.de>
	Reviewed-by: Darrick J. Wong <djwong@kernel.org>
(cherry picked from commit 198dd8aedee6a7d2de0dfa739f9a008a938f6848)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/xfs/xfs_iomap.c
diff --cc fs/xfs/xfs_iomap.c
index d8cd2583dedb,a2e45ea1b0cb..000000000000
--- a/fs/xfs/xfs_iomap.c
+++ b/fs/xfs/xfs_iomap.c
@@@ -1113,27 -1162,28 +1117,38 @@@ xfs_buffered_write_iomap_end
  		start_fsb = XFS_B_TO_FSB(mp, offset + written);
  	end_fsb = XFS_B_TO_FSB(mp, offset + length);
  
+ 	/* Nothing to do if we've written the entire delalloc extent */
+ 	if (start_fsb >= end_fsb)
+ 		return 0;
+ 
  	/*
- 	 * Trim delalloc blocks if they were allocated by this write and we
- 	 * didn't manage to write the whole range.
- 	 *
- 	 * We don't need to care about racing delalloc as we hold i_mutex
- 	 * across the reserve/allocate/unreserve calls. If there are delalloc
- 	 * blocks in the range, they are ours.
+ 	 * Lock the mapping to avoid races with page faults re-instantiating
+ 	 * folios and dirtying them via ->page_mkwrite between the page cache
+ 	 * truncation and the delalloc extent removal. Failing to do this can
+ 	 * leave dirty pages with no space reservation in the cache.
  	 */
- 	if ((iomap->flags & IOMAP_F_NEW) && start_fsb < end_fsb) {
- 		truncate_pagecache_range(VFS_I(ip), XFS_FSB_TO_B(mp, start_fsb),
- 					 XFS_FSB_TO_B(mp, end_fsb) - 1);
+ 	filemap_invalidate_lock(inode->i_mapping);
+ 	truncate_pagecache_range(VFS_I(ip), XFS_FSB_TO_B(mp, start_fsb),
+ 				 XFS_FSB_TO_B(mp, end_fsb) - 1);
  
++<<<<<<< HEAD
 +		error = xfs_bmap_punch_delalloc_range(ip, start_fsb,
 +					       end_fsb - start_fsb);
 +		if (error && !XFS_FORCED_SHUTDOWN(mp)) {
 +			xfs_alert(mp, "%s: unable to clean up ino %lld",
 +				__func__, ip->i_ino);
 +			return error;
 +		}
++=======
+ 	error = xfs_bmap_punch_delalloc_range(ip, start_fsb,
+ 				       end_fsb - start_fsb);
+ 	filemap_invalidate_unlock(inode->i_mapping);
+ 	if (error && !xfs_is_shutdown(mp)) {
+ 		xfs_alert(mp, "%s: unable to clean up ino %lld",
+ 			__func__, ip->i_ino);
+ 		return error;
++>>>>>>> 198dd8aedee6 (xfs: punching delalloc extents on write failure is racy)
  	}
- 
  	return 0;
  }
  
* Unmerged path fs/xfs/xfs_iomap.c
