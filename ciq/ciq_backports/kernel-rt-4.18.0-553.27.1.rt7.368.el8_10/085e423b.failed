gfs2: Randomize GLF_VERIFY_DELETE work delay

jira LE-3201
Rebuild_History Non-Buildable kernel-rt-4.18.0-553.27.1.rt7.368.el8_10
commit-author Andreas Gruenbacher <agruenba@redhat.com>
commit 085e423b4d51dfe71e1967c9e508d1cb845063d3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-rt-4.18.0-553.27.1.rt7.368.el8_10/085e423b.failed

Randomize the delay of GLF_VERIFY_DELETE work.  This avoids thundering
herd problems when multiple nodes schedule that kind of work in response
to an inode being unlinked remotely.

	Signed-off-by: Andreas Gruenbacher <agruenba@redhat.com>
(cherry picked from commit 085e423b4d51dfe71e1967c9e508d1cb845063d3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/gfs2/glock.c
diff --cc fs/gfs2/glock.c
index b399506f380a,46a6e97cd930..000000000000
--- a/fs/gfs2/glock.c
+++ b/fs/gfs2/glock.c
@@@ -36,6 -33,10 +36,13 @@@
  #include <linux/list_sort.h>
  #include <linux/lockref.h>
  #include <linux/rhashtable.h>
++<<<<<<< HEAD
++=======
+ #include <linux/pid_namespace.h>
+ #include <linux/fdtable.h>
+ #include <linux/file.h>
+ #include <linux/random.h>
++>>>>>>> 085e423b4d51 (gfs2: Randomize GLF_VERIFY_DELETE work delay)
  
  #include "gfs2.h"
  #include "incore.h"
@@@ -982,8 -1018,9 +989,13 @@@ static bool gfs2_queue_verify_delete(st
  
  	if (test_and_set_bit(GLF_VERIFY_DELETE, &gl->gl_flags))
  		return false;
++<<<<<<< HEAD
 +	return queue_delayed_work(sdp->sd_delete_wq,
 +				  &gl->gl_delete, 5 * HZ);
++=======
+ 	delay = later ? HZ + get_random_long() % (HZ * 9) : 0;
+ 	return queue_delayed_work(sdp->sd_delete_wq, &gl->gl_delete, delay);
++>>>>>>> 085e423b4d51 (gfs2: Randomize GLF_VERIFY_DELETE work delay)
  }
  
  static void delete_work_func(struct work_struct *work)
* Unmerged path fs/gfs2/glock.c
