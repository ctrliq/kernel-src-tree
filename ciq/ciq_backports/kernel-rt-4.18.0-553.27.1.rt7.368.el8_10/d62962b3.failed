loopback: fix lockdep splat

jira LE-3201
Rebuild_History Non-Buildable kernel-rt-4.18.0-553.27.1.rt7.368.el8_10
commit-author Mahesh Bandewar <maheshb@google.com>
commit d62962b37cebdc936e2bfcd69ea685da2c433727
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-rt-4.18.0-553.27.1.rt7.368.el8_10/d62962b3.failed

dev_init_scheduler() and dev_activate() expect the caller to
hold RTNL. Since we don't want blackhole device to be initialized
per ns, we are initializing at init.

[    3.855027] Call Trace:
[    3.855034]  dump_stack+0x67/0x95
[    3.855037]  lockdep_rcu_suspicious+0xd5/0x110
[    3.855044]  dev_init_scheduler+0xe3/0x120
[    3.855048]  ? net_olddevs_init+0x60/0x60
[    3.855050]  blackhole_netdev_init+0x45/0x6e
[    3.855052]  do_one_initcall+0x6c/0x2fa
[    3.855058]  ? rcu_read_lock_sched_held+0x8c/0xa0
[    3.855066]  kernel_init_freeable+0x1e5/0x288
[    3.855071]  ? rest_init+0x260/0x260
[    3.855074]  kernel_init+0xf/0x180
[    3.855076]  ? rest_init+0x260/0x260
[    3.855078]  ret_from_fork+0x24/0x30

Fixes: 4de83b88c66 ("loopback: create blackhole net device similar to loopack.")
	Reported-by: Geert Uytterhoeven <geert@linux-m68k.org>
	Cc: Eric Dumazet <edumazet@google.com>
	Signed-off-by: Mahesh Bandewar <maheshb@google.com>
	Tested-by: Geert Uytterhoeven <geert+renesas@glider.be>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit d62962b37cebdc936e2bfcd69ea685da2c433727)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/loopback.c
diff --cc drivers/net/loopback.c
index 2df7f60fe052,14545a8797a8..000000000000
--- a/drivers/net/loopback.c
+++ b/drivers/net/loopback.c
@@@ -229,3 -231,45 +229,48 @@@ out
  struct pernet_operations __net_initdata loopback_net_ops = {
  	.init = loopback_net_init,
  };
++<<<<<<< HEAD
++=======
+ 
+ /* blackhole netdevice */
+ static netdev_tx_t blackhole_netdev_xmit(struct sk_buff *skb,
+ 					 struct net_device *dev)
+ {
+ 	kfree_skb(skb);
+ 	net_warn_ratelimited("%s(): Dropping skb.\n", __func__);
+ 	return NETDEV_TX_OK;
+ }
+ 
+ static const struct net_device_ops blackhole_netdev_ops = {
+ 	.ndo_start_xmit = blackhole_netdev_xmit,
+ };
+ 
+ /* This is a dst-dummy device used specifically for invalidated
+  * DSTs and unlike loopback, this is not per-ns.
+  */
+ static void blackhole_netdev_setup(struct net_device *dev)
+ {
+ 	gen_lo_setup(dev, ETH_MIN_MTU, NULL, NULL, &blackhole_netdev_ops, NULL);
+ }
+ 
+ /* Setup and register the blackhole_netdev. */
+ static int __init blackhole_netdev_init(void)
+ {
+ 	blackhole_netdev = alloc_netdev(0, "blackhole_dev", NET_NAME_UNKNOWN,
+ 					blackhole_netdev_setup);
+ 	if (!blackhole_netdev)
+ 		return -ENOMEM;
+ 
+ 	rtnl_lock();
+ 	dev_init_scheduler(blackhole_netdev);
+ 	dev_activate(blackhole_netdev);
+ 	rtnl_unlock();
+ 
+ 	blackhole_netdev->flags |= IFF_UP | IFF_RUNNING;
+ 	dev_net_set(blackhole_netdev, &init_net);
+ 
+ 	return 0;
+ }
+ 
+ device_initcall(blackhole_netdev_init);
++>>>>>>> d62962b37ceb (loopback: fix lockdep splat)
* Unmerged path drivers/net/loopback.c
