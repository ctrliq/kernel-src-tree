gfs2: Return enum evict_behavior from gfs2_upgrade_iopen_glock

jira LE-3201
Rebuild_History Non-Buildable kernel-rt-4.18.0-553.27.1.rt7.368.el8_10
commit-author Andreas Gruenbacher <agruenba@redhat.com>
commit a94dafe87d5fdded799fc25b82b123fb93959421
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-rt-4.18.0-553.27.1.rt7.368.el8_10/a94dafe8.failed

In case an iopen glock cannot be upgraded, function
gfs2_upgrade_iopen_glock() needs to communicate to gfs2_evict_inode()
whether deleting the inode should be deferred or skipped altogether.
Change the function to return the appropriate enum evict_behavior value
to indicate that.

	Signed-off-by: Andreas Gruenbacher <agruenba@redhat.com>
(cherry picked from commit a94dafe87d5fdded799fc25b82b123fb93959421)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/gfs2/super.c
diff --cc fs/gfs2/super.c
index 0857964a90b5,46d325c2ab88..000000000000
--- a/fs/gfs2/super.c
+++ b/fs/gfs2/super.c
@@@ -1389,12 -1364,15 +1394,19 @@@ static enum dinode_demise evict_should_
  should_delete:
  	if (gfs2_holder_initialized(&ip->i_iopen_gh) &&
  	    test_bit(HIF_HOLDER, &ip->i_iopen_gh.gh_iflags)) {
- 		if (!gfs2_upgrade_iopen_glock(inode)) {
+ 		enum evict_behavior behavior =
+ 			gfs2_upgrade_iopen_glock(inode);
+ 
+ 		if (behavior != EVICT_SHOULD_DELETE) {
  			gfs2_holder_uninit(&ip->i_iopen_gh);
++<<<<<<< HEAD
 +			return SHOULD_NOT_DELETE_DINODE;
++=======
+ 			return behavior;
++>>>>>>> a94dafe87d5f (gfs2: Return enum evict_behavior from gfs2_upgrade_iopen_glock)
  		}
  	}
 -	return EVICT_SHOULD_DELETE;
 +	return SHOULD_DELETE_DINODE;
  }
  
  /**
* Unmerged path fs/gfs2/super.c
