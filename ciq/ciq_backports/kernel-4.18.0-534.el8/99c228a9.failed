fs: group frequently accessed fields of struct super_block together

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-534.el8
commit-author Amir Goldstein <amir73il@gmail.com>
commit 99c228a994ec8b1580c43631866fd2c5440f5bfd
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-534.el8/99c228a9.failed

Kernel test robot reported [1] a 6% performance regression in a
concurrent unlink(2) workload on commit 60f7ed8c7c4d ("fsnotify: send
path type events to group with super block marks").

The performance test was run with no fsnotify marks at all on the
data set, so the only extra instructions added by the offending
commit are tests of the super_block fields s_fsnotify_{marks,mask}
and these tests happen on almost every single inode access.

When adding those fields to the super_block struct, we did not give much
thought of placing them on a hot cache lines (we just placed them at the
end of the struct).

Re-organize struct super_block to try and keep some frequently accessed
fields on the same cache line.

Move the frequently accessed fields s_fsnotify_{marks,mask} near the
frequently accessed fields s_fs_info,s_time_gran, while filling a 64bit
alignment hole after s_time_gran.

Move the seldom accessed fields s_id,s_uuid,s_max_links,s_mode near the
seldom accessed fields s_vfs_rename_mutex,s_subtype.

Rong Chen confirmed that this patch solved the reported problem.

[1] https://lkml.org/lkml/2018/9/30/206

	Reported-by: kernel test robot <rong.a.chen@intel.com>
	Tested-by: kernel test robot <rong.a.chen@intel.com>
Fixes: 1e6cb72399 ("fsnotify: add super block object type")
	Signed-off-by: Amir Goldstein <amir73il@gmail.com>
	Signed-off-by: Jan Kara <jack@suse.cz>
(cherry picked from commit 99c228a994ec8b1580c43631866fd2c5440f5bfd)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/fs.h
diff --cc include/linux/fs.h
index 7e4e4441f3b5,6da94deb957f..000000000000
--- a/include/linux/fs.h
+++ b/include/linux/fs.h
@@@ -1545,10 -1473,6 +1554,13 @@@ struct super_block 
  
  	spinlock_t		s_inode_wblist_lock;
  	struct list_head	s_inodes_wb;	/* writeback inodes */
++<<<<<<< HEAD
 +
 +	/* Time limits for c/m/atime in seconds */
 +	RH_KABI_EXTEND(time64_t	s_time_min)
 +	RH_KABI_EXTEND(time64_t	s_time_max)
++=======
++>>>>>>> 99c228a994ec (fs: group frequently accessed fields of struct super_block together)
  } __randomize_layout;
  
  /* Helper functions so that in most cases filesystems will
* Unmerged path include/linux/fs.h
