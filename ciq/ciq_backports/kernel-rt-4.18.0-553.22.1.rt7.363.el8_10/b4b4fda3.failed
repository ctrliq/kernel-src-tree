ext4: fix uninitialized ratelimit_state->lock access in __ext4_fill_super()

jira LE-3201
cve CVE-2024-40998
Rebuild_History Non-Buildable kernel-rt-4.18.0-553.22.1.rt7.363.el8_10
commit-author Baokun Li <libaokun1@huawei.com>
commit b4b4fda34e535756f9e774fb2d09c4537b7dfd1c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-rt-4.18.0-553.22.1.rt7.363.el8_10/b4b4fda3.failed

In the following concurrency we will access the uninitialized rs->lock:

ext4_fill_super
  ext4_register_sysfs
   // sysfs registered msg_ratelimit_interval_ms
                             // Other processes modify rs->interval to
                             // non-zero via msg_ratelimit_interval_ms
  ext4_orphan_cleanup
    ext4_msg(sb, KERN_INFO, "Errors on filesystem, "
      __ext4_msg
        ___ratelimit(&(EXT4_SB(sb)->s_msg_ratelimit_state)
          if (!rs->interval)  // do nothing if interval is 0
            return 1;
          raw_spin_trylock_irqsave(&rs->lock, flags)
            raw_spin_trylock(lock)
              _raw_spin_trylock
                __raw_spin_trylock
                  spin_acquire(&lock->dep_map, 0, 1, _RET_IP_)
                    lock_acquire
                      __lock_acquire
                        register_lock_class
                          assign_lock_key
                            dump_stack();
  ratelimit_state_init(&sbi->s_msg_ratelimit_state, 5 * HZ, 10);
    raw_spin_lock_init(&rs->lock);
    // init rs->lock here

and get the following dump_stack:

=========================================================
INFO: trying to register non-static key.
The code is fine but needs lockdep annotation, or maybe
you didn't initialize this object before use?
turning off the locking correctness validator.
CPU: 12 PID: 753 Comm: mount Tainted: G E 6.7.0-rc6-next-20231222 #504
[...]
Call Trace:
 dump_stack_lvl+0xc5/0x170
 dump_stack+0x18/0x30
 register_lock_class+0x740/0x7c0
 __lock_acquire+0x69/0x13a0
 lock_acquire+0x120/0x450
 _raw_spin_trylock+0x98/0xd0
 ___ratelimit+0xf6/0x220
 __ext4_msg+0x7f/0x160 [ext4]
 ext4_orphan_cleanup+0x665/0x740 [ext4]
 __ext4_fill_super+0x21ea/0x2b10 [ext4]
 ext4_fill_super+0x14d/0x360 [ext4]
[...]
=========================================================

Normally interval is 0 until s_msg_ratelimit_state is initialized, so
___ratelimit() does nothing. But registering sysfs precedes initializing
rs->lock, so it is possible to change rs->interval to a non-zero value
via the msg_ratelimit_interval_ms interface of sysfs while rs->lock is
uninitialized, and then a call to ext4_msg triggers the problem by
accessing an uninitialized rs->lock. Therefore register sysfs after all
initializations are complete to avoid such problems.

	Signed-off-by: Baokun Li <libaokun1@huawei.com>
	Reviewed-by: Jan Kara <jack@suse.cz>
Link: https://lore.kernel.org/r/20240102133730.1098120-1-libaokun1@huawei.com
	Signed-off-by: Theodore Ts'o <tytso@mit.edu>
(cherry picked from commit b4b4fda34e535756f9e774fb2d09c4537b7dfd1c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/ext4/super.c
diff --cc fs/ext4/super.c
index 59684ffd89dc,f9a4a4e89dac..000000000000
--- a/fs/ext4/super.c
+++ b/fs/ext4/super.c
@@@ -4668,10 -5550,9 +4668,16 @@@ no_journal
  	if (err)
  		goto failed_mount6;
  
++<<<<<<< HEAD
 +	err = ext4_register_sysfs(sb);
 +	if (err)
 +		goto failed_mount7;
 +
++=======
+ 	err = ext4_init_orphan_info(sb);
+ 	if (err)
+ 		goto failed_mount7;
++>>>>>>> b4b4fda34e53 (ext4: fix uninitialized ratelimit_state->lock access in __ext4_fill_super())
  #ifdef CONFIG_QUOTA
  	/* Enable quota usage during mount. */
  	if (ext4_has_feature_quota(sb) && !sb_rdonly(sb)) {
@@@ -4694,32 -5582,14 +4700,38 @@@
  	ext4_superblock_csum_set(sb);
  	if (needs_recovery) {
  		ext4_msg(sb, KERN_INFO, "recovery complete");
++<<<<<<< HEAD
 +		ext4_mark_recovery_complete(sb, es);
 +	}
 +	if (EXT4_SB(sb)->s_journal) {
 +		if (test_opt(sb, DATA_FLAGS) == EXT4_MOUNT_JOURNAL_DATA)
 +			descr = " journalled data mode";
 +		else if (test_opt(sb, DATA_FLAGS) == EXT4_MOUNT_ORDERED_DATA)
 +			descr = " ordered data mode";
 +		else
 +			descr = " writeback data mode";
 +	} else
 +		descr = "out journal";
 +
 +	if (test_opt(sb, DISCARD)) {
 +		struct request_queue *q = bdev_get_queue(sb->s_bdev);
 +		if (!blk_queue_discard(q))
 +			ext4_msg(sb, KERN_WARNING,
 +				 "mounting with \"discard\" option, but "
 +				 "the device does not support discard");
++=======
+ 		err = ext4_mark_recovery_complete(sb, es);
+ 		if (err)
+ 			goto failed_mount9;
++>>>>>>> b4b4fda34e53 (ext4: fix uninitialized ratelimit_state->lock access in __ext4_fill_super())
  	}
  
 -	if (test_opt(sb, DISCARD) && !bdev_max_discard_sectors(sb->s_bdev))
 -		ext4_msg(sb, KERN_WARNING,
 -			 "mounting with \"discard\" option, but the device does not support discard");
 +	if (___ratelimit(&ext4_mount_msg_ratelimit, "EXT4-fs mount"))
 +		ext4_msg(sb, KERN_INFO, "mounted filesystem with%s. "
 +			 "Opts: %.*s%s%s", descr,
 +			 (int) sizeof(sbi->s_es->s_mount_opts),
 +			 sbi->s_es->s_mount_opts,
 +			 *sbi->s_es->s_mount_opts ? "; " : "", orig_data);
  
  	if (es->s_error_count)
  		mod_timer(&sbi->s_err_report, jiffies + 300*HZ); /* 5 minutes */
@@@ -4728,20 -5598,20 +4740,34 @@@
  	ratelimit_state_init(&sbi->s_err_ratelimit_state, 5 * HZ, 10);
  	ratelimit_state_init(&sbi->s_warning_ratelimit_state, 5 * HZ, 10);
  	ratelimit_state_init(&sbi->s_msg_ratelimit_state, 5 * HZ, 10);
 -	atomic_set(&sbi->s_warning_count, 0);
 -	atomic_set(&sbi->s_msg_count, 0);
  
++<<<<<<< HEAD
 +	kfree(orig_data);
 +	return 0;
 +
 +cantfind_ext4:
 +	if (!silent)
 +		ext4_msg(sb, KERN_ERR, "VFS: Can't find ext4 filesystem");
 +	goto failed_mount;
 +
 +#ifdef CONFIG_QUOTA
 +failed_mount8:
 +	ext4_unregister_sysfs(sb);
 +	kobject_put(&sbi->s_kobj);
 +#endif
++=======
+ 	/* Register sysfs after all initializations are complete. */
+ 	err = ext4_register_sysfs(sb);
+ 	if (err)
+ 		goto failed_mount9;
+ 
+ 	return 0;
+ 
+ failed_mount9:
+ 	ext4_quotas_off(sb, EXT4_MAXQUOTAS);
+ failed_mount8: __maybe_unused
+ 	ext4_release_orphan_info(sb);
++>>>>>>> b4b4fda34e53 (ext4: fix uninitialized ratelimit_state->lock access in __ext4_fill_super())
  failed_mount7:
  	ext4_unregister_li_request(sb);
  failed_mount6:
* Unmerged path fs/ext4/super.c
