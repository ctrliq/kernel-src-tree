net: fix possible store tearing in neigh_periodic_work()

jira LE-3201
cve CVE-2023-52522
Rebuild_History Non-Buildable kernel-rt-4.18.0-553.22.1.rt7.363.el8_10
commit-author Eric Dumazet <edumazet@google.com>
commit 25563b581ba3a1f263a00e8c9a97f5e7363be6fd
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-rt-4.18.0-553.22.1.rt7.363.el8_10/25563b58.failed

While looking at a related syzbot report involving neigh_periodic_work(),
I found that I forgot to add an annotation when deleting an
RCU protected item from a list.

Readers use rcu_deference(*np), we need to use either
rcu_assign_pointer() or WRITE_ONCE() on writer side
to prevent store tearing.

I use rcu_assign_pointer() to have lockdep support,
this was the choice made in neigh_flush_dev().

Fixes: 767e97e1e0db ("neigh: RCU conversion of struct neighbour")
	Signed-off-by: Eric Dumazet <edumazet@google.com>
	Reviewed-by: David Ahern <dsahern@kernel.org>
	Reviewed-by: Simon Horman <horms@kernel.org>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 25563b581ba3a1f263a00e8c9a97f5e7363be6fd)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/core/neighbour.c
diff --cc net/core/neighbour.c
index dd7fafc23ee0,7212c7e521ef..000000000000
--- a/net/core/neighbour.c
+++ b/net/core/neighbour.c
@@@ -931,8 -986,11 +931,16 @@@ static void neigh_periodic_work(struct 
  
  			if (refcount_read(&n->refcnt) == 1 &&
  			    (state == NUD_FAILED ||
++<<<<<<< HEAD
 +			     time_after(jiffies, n->used + NEIGH_VAR(n->parms, GC_STALETIME)))) {
 +				*np = n->next;
++=======
+ 			     !time_in_range_open(jiffies, n->used,
+ 						 n->used + NEIGH_VAR(n->parms, GC_STALETIME)))) {
+ 				rcu_assign_pointer(*np,
+ 					rcu_dereference_protected(n->next,
+ 						lockdep_is_held(&tbl->lock)));
++>>>>>>> 25563b581ba3 (net: fix possible store tearing in neigh_periodic_work())
  				neigh_mark_dead(n);
  				write_unlock(&n->lock);
  				neigh_cleanup_and_release(n);
* Unmerged path net/core/neighbour.c
