KVM: selftests: Use generic sys_clocksource_is_tsc() in vmx_nested_tsc_scaling_test

jira LE-3201
Rebuild_History Non-Buildable kernel-rt-4.18.0-553.22.1.rt7.363.el8_10
commit-author Vitaly Kuznetsov <vkuznets@redhat.com>
commit 410cb01ead5bcec500c0654f361d620553f930aa
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-rt-4.18.0-553.22.1.rt7.363.el8_10/410cb01e.failed

Despite its name, system_has_stable_tsc() just checks that system
clocksource is 'tsc'; this can now be done with generic
sys_clocksource_is_tsc().

No functional change intended.

	Signed-off-by: Vitaly Kuznetsov <vkuznets@redhat.com>
Link: https://lore.kernel.org/r/20240109141121.1619463-3-vkuznets@redhat.com
	Signed-off-by: Sean Christopherson <seanjc@google.com>
(cherry picked from commit 410cb01ead5bcec500c0654f361d620553f930aa)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/testing/selftests/kvm/x86_64/vmx_nested_tsc_scaling_test.c
diff --cc tools/testing/selftests/kvm/x86_64/vmx_nested_tsc_scaling_test.c
index 280c01fd2412,93b0a850a240..000000000000
--- a/tools/testing/selftests/kvm/x86_64/vmx_nested_tsc_scaling_test.c
+++ b/tools/testing/selftests/kvm/x86_64/vmx_nested_tsc_scaling_test.c
@@@ -119,37 -116,9 +119,40 @@@ static void l1_guest_code(struct vmx_pa
  	GUEST_DONE();
  }
  
++<<<<<<< HEAD
 +static void tsc_scaling_check_supported(void)
 +{
 +	if (!kvm_check_cap(KVM_CAP_TSC_CONTROL)) {
 +		print_skip("TSC scaling not supported by the HW");
 +		exit(KSFT_SKIP);
 +	}
 +}
 +
 +static void stable_tsc_check_supported(void)
 +{
 +	FILE *fp;
 +	char buf[4];
 +
 +	fp = fopen("/sys/devices/system/clocksource/clocksource0/current_clocksource", "r");
 +	if (fp == NULL)
 +		goto skip_test;
 +
 +	if (fgets(buf, sizeof(buf), fp) == NULL)
 +		goto skip_test;
 +
 +	if (strncmp(buf, "tsc", sizeof(buf)))
 +		goto skip_test;
 +
 +	return;
 +skip_test:
 +	print_skip("Kernel does not use TSC clocksource - assuming that host TSC is not stable");
 +	exit(KSFT_SKIP);
 +}
 +
++=======
++>>>>>>> 410cb01ead5b (KVM: selftests: Use generic sys_clocksource_is_tsc() in vmx_nested_tsc_scaling_test)
  int main(int argc, char *argv[])
  {
 -	struct kvm_vcpu *vcpu;
  	struct kvm_vm *vm;
  	vm_vaddr_t vmx_pages_gva;
  
@@@ -160,9 -129,9 +163,15 @@@
  	uint64_t l1_tsc_freq = 0;
  	uint64_t l2_tsc_freq = 0;
  
++<<<<<<< HEAD
 +	nested_vmx_check_supported();
 +	tsc_scaling_check_supported();
 +	stable_tsc_check_supported();
++=======
+ 	TEST_REQUIRE(kvm_cpu_has(X86_FEATURE_VMX));
+ 	TEST_REQUIRE(kvm_has_cap(KVM_CAP_TSC_CONTROL));
+ 	TEST_REQUIRE(sys_clocksource_is_tsc());
++>>>>>>> 410cb01ead5b (KVM: selftests: Use generic sys_clocksource_is_tsc() in vmx_nested_tsc_scaling_test)
  
  	/*
  	 * We set L1's scale factor to be a random number from 2 to 10.
* Unmerged path tools/testing/selftests/kvm/x86_64/vmx_nested_tsc_scaling_test.c
