x86/microcode/AMD: Rip out static buffers

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-519.el8
commit-author Borislav Petkov (AMD) <bp@alien8.de>
commit 05e91e72113833385fb8c9a33bda9dbd93e27609
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-519.el8/05e91e72.failed

Load straight from the containers (initrd or builtin, for example).
There's no need to cache the patch per node.

This even simplifies the code a bit with the opportunity for more
cleanups later.

	Signed-off-by: Borislav Petkov (AMD) <bp@alien8.de>
	Tested-by: John Allen <john.allen@amd.com>
Link: https://lore.kernel.org/r/20230720202813.3269888-1-john.allen@amd.com
(cherry picked from commit 05e91e72113833385fb8c9a33bda9dbd93e27609)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kernel/cpu/microcode/amd.c
diff --cc arch/x86/kernel/cpu/microcode/amd.c
index 9eb457b10341,a28b103256ff..000000000000
--- a/arch/x86/kernel/cpu/microcode/amd.c
+++ b/arch/x86/kernel/cpu/microcode/amd.c
@@@ -56,12 -56,9 +56,9 @@@ struct cont_desc 
  
  static u32 ucode_new_rev;
  
- /* One blob per node. */
- static u8 amd_ucode_patch[MAX_NUMNODES][PATCH_MAX_SIZE];
- 
  /*
   * Microcode patch container file is prepended to the initrd in cpio
 - * format. See Documentation/arch/x86/microcode.rst
 + * format. See Documentation/x86/microcode.rst
   */
  static const char
  ucode_path[] __maybe_unused = "kernel/x86/microcode/AuthenticAMD.bin";
@@@ -580,28 -539,6 +541,31 @@@ int __init save_microcode_in_initrd_amd
  	return 0;
  }
  
++<<<<<<< HEAD
 +void reload_ucode_amd(unsigned int cpu)
 +{
 +	u32 rev, dummy __always_unused;
 +	struct microcode_amd *mc;
 +
 +	mc = (struct microcode_amd *)amd_ucode_patch[cpu_to_node(cpu)];
 +
 +	rdmsr(MSR_AMD64_PATCH_LEVEL, rev, dummy);
 +
 +	if (rev < mc->hdr.patch_id) {
 +		if (!__apply_microcode_amd(mc)) {
 +			ucode_new_rev = mc->hdr.patch_id;
 +			pr_info("reload patch_level=0x%08x\n", ucode_new_rev);
 +		}
 +	}
 +}
 +static u16 __find_equiv_id(unsigned int cpu)
 +{
 +	struct ucode_cpu_info *uci = ucode_cpu_info + cpu;
 +	return find_equiv_id(&equiv_table, uci->cpu_sig.sig);
 +}
 +
++=======
++>>>>>>> 05e91e721138 (x86/microcode/AMD: Rip out static buffers)
  /*
   * a small, trivial cache of per-family ucode patches
   */
diff --git a/arch/x86/include/asm/microcode_amd.h b/arch/x86/include/asm/microcode_amd.h
index 9675c621c1ca..a9b3f9635727 100644
--- a/arch/x86/include/asm/microcode_amd.h
+++ b/arch/x86/include/asm/microcode_amd.h
@@ -44,14 +44,12 @@ struct microcode_amd {
 #define PATCH_MAX_SIZE (3 * PAGE_SIZE)
 
 #ifdef CONFIG_MICROCODE_AMD
-extern void __init load_ucode_amd_bsp(unsigned int family);
-extern void load_ucode_amd_ap(unsigned int family);
+extern void load_ucode_amd_early(unsigned int cpuid_1_eax);
 extern int __init save_microcode_in_initrd_amd(unsigned int family);
 void reload_ucode_amd(unsigned int cpu);
 extern void amd_check_microcode(void);
 #else
-static inline void __init load_ucode_amd_bsp(unsigned int family) {}
-static inline void load_ucode_amd_ap(unsigned int family) {}
+static inline void load_ucode_amd_early(unsigned int cpuid_1_eax) {}
 static inline int __init
 save_microcode_in_initrd_amd(unsigned int family) { return -EINVAL; }
 static inline void reload_ucode_amd(unsigned int cpu) {}
* Unmerged path arch/x86/kernel/cpu/microcode/amd.c
diff --git a/arch/x86/kernel/cpu/microcode/core.c b/arch/x86/kernel/cpu/microcode/core.c
index 7a329e561354..481d37085570 100644
--- a/arch/x86/kernel/cpu/microcode/core.c
+++ b/arch/x86/kernel/cpu/microcode/core.c
@@ -172,7 +172,7 @@ void __init load_ucode_bsp(void)
 	if (intel)
 		load_ucode_intel_bsp();
 	else
-		load_ucode_amd_bsp(cpuid_1_eax);
+		load_ucode_amd_early(cpuid_1_eax);
 }
 
 static bool check_loader_disabled_ap(void)
@@ -200,7 +200,7 @@ void load_ucode_ap(void)
 		break;
 	case X86_VENDOR_AMD:
 		if (x86_family(cpuid_1_eax) >= 0x10)
-			load_ucode_amd_ap(cpuid_1_eax);
+			load_ucode_amd_early(cpuid_1_eax);
 		break;
 	default:
 		break;
