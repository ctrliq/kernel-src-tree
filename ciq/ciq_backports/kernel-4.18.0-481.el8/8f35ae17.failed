sctp: do not check hb_timer.expires when resetting hb_timer

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-481.el8
commit-author Xin Long <lucien.xin@gmail.com>
commit 8f35ae17ef565a605de5f409e04bcd49a55d7646
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-481.el8/8f35ae17.failed

It tries to avoid the frequently hb_timer refresh in commit ba6f5e33bdbb
("sctp: avoid refreshing heartbeat timer too often"), and it only allows
mod_timer when the new expires is after hb_timer.expires. It means even
a much shorter interval for hb timer gets applied, it will have to wait
until the current hb timer to time out.

In sctp_do_8_2_transport_strike(), when a transport enters PF state, it
expects to update the hb timer to resend a heartbeat every rto after
calling sctp_transport_reset_hb_timer(), which will not work as the
change mentioned above.

The frequently hb_timer refresh was caused by sctp_transport_reset_timers()
called in sctp_outq_flush() and it was already removed in the commit above.
So we don't have to check hb_timer.expires when resetting hb_timer as it is
now not called very often.

Fixes: ba6f5e33bdbb ("sctp: avoid refreshing heartbeat timer too often")
	Signed-off-by: Xin Long <lucien.xin@gmail.com>
	Acked-by: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
Link: https://lore.kernel.org/r/d958c06985713ec84049a2d5664879802710179a.1675095933.git.lucien.xin@gmail.com
	Signed-off-by: Jakub Kicinski <kuba@kernel.org>
(cherry picked from commit 8f35ae17ef565a605de5f409e04bcd49a55d7646)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/sctp/transport.c
diff --cc net/sctp/transport.c
index be638b4935a0,2f66a2006517..000000000000
--- a/net/sctp/transport.c
+++ b/net/sctp/transport.c
@@@ -211,10 -196,8 +211,15 @@@ void sctp_transport_reset_hb_timer(stru
  
  	/* When a data chunk is sent, reset the heartbeat interval.  */
  	expires = jiffies + sctp_transport_timeout(transport);
++<<<<<<< HEAD
 +	if ((time_before(transport->hb_timer.expires, expires) ||
 +	     !timer_pending(&transport->hb_timer)) &&
 +	    !mod_timer(&transport->hb_timer,
 +		       expires + prandom_u32_max(transport->rto)))
++=======
+ 	if (!mod_timer(&transport->hb_timer,
+ 		       expires + get_random_u32_below(transport->rto)))
++>>>>>>> 8f35ae17ef56 (sctp: do not check hb_timer.expires when resetting hb_timer)
  		sctp_transport_hold(transport);
  }
  
* Unmerged path net/sctp/transport.c
