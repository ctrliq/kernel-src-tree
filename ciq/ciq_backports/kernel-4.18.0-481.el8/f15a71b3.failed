powerpc/ppc-opcode: introduce PPC_RAW_BRANCH() macro

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-481.el8
commit-author Hari Bathini <hbathini@linux.ibm.com>
commit f15a71b3880bf07b40810644e5ac6f177c2a7c8f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-481.el8/f15a71b3.failed

Define and use PPC_RAW_BRANCH() macro instead of open coding it. This
macro is used while adding BPF_PROBE_MEM support.

	Signed-off-by: Hari Bathini <hbathini@linux.ibm.com>
	Reviewed-by: Christophe Leroy <christophe.leroy@csgroup.eu>
	Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
Link: https://lore.kernel.org/r/20211012123056.485795-5-hbathini@linux.ibm.com

(cherry picked from commit f15a71b3880bf07b40810644e5ac6f177c2a7c8f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/powerpc/net/bpf_jit.h
diff --cc arch/powerpc/net/bpf_jit.h
index d22140878361,6a945f6211f4..000000000000
--- a/arch/powerpc/net/bpf_jit.h
+++ b/arch/powerpc/net/bpf_jit.h
@@@ -28,8 -24,16 +28,21 @@@
  #define EMIT(instr)		PLANT_INSTR(image, ctx->idx, instr)
  
  /* Long jump; (unconditional 'branch') */
++<<<<<<< HEAD
 +#define PPC_JMP(dest)		EMIT(PPC_INST_BRANCH |			      \
 +				     (((dest) - (ctx->idx * 4)) & 0x03fffffc))
++=======
+ #define PPC_JMP(dest)							      \
+ 	do {								      \
+ 		long offset = (long)(dest) - (ctx->idx * 4);		      \
+ 		if (!is_offset_in_branch_range(offset)) {		      \
+ 			pr_err_ratelimited("Branch offset 0x%lx (@%u) out of range\n", offset, ctx->idx);			\
+ 			return -ERANGE;					      \
+ 		}							      \
+ 		EMIT(PPC_RAW_BRANCH(offset));				      \
+ 	} while (0)
+ 
++>>>>>>> f15a71b3880b (powerpc/ppc-opcode: introduce PPC_RAW_BRANCH() macro)
  /* blr; (unconditional 'branch' with link) to absolute address */
  #define PPC_BL_ABS(dest)	EMIT(PPC_INST_BL |			      \
  				     (((dest) - (unsigned long)(image + ctx->idx)) & 0x03fffffc))
diff --git a/arch/powerpc/include/asm/ppc-opcode.h b/arch/powerpc/include/asm/ppc-opcode.h
index 22dd691f9b58..92b79ec99a79 100644
--- a/arch/powerpc/include/asm/ppc-opcode.h
+++ b/arch/powerpc/include/asm/ppc-opcode.h
@@ -690,6 +690,8 @@
 
 #define PPC_RAW_NEG(d, a)		(PPC_INST_NEG | ___PPC_RT(d) | ___PPC_RA(a))
 
+#define PPC_RAW_BRANCH(addr)		(PPC_INST_BRANCH | ((addr) & 0x03fffffc))
+
 /* Deal with instructions that older assemblers aren't aware of */
 #define	PPC_BCCTR_FLUSH		stringify_in_c(.long PPC_INST_BCCTR_FLUSH)
 #define	PPC_CP_ABORT		stringify_in_c(.long PPC_INST_CP_ABORT)
* Unmerged path arch/powerpc/net/bpf_jit.h
