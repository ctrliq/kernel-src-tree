x86/cpu: Init AP exception handling from cpu_init_secondary()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-481.el8
commit-author Borislav Petkov <bp@suse.de>
commit b1efd0ff4bd16e8bb8607ba566b03f2024a830bb
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-481.el8/b1efd0ff.failed

SEV-ES guests require properly setup task register with which the TSS
descriptor in the GDT can be located so that the IST-type #VC exception
handler which they need to function properly, can be executed.

This setup needs to happen before attempting to load microcode in
ucode_cpu_init() on secondary CPUs which can cause such #VC exceptions.

Simplify the machinery by running that exception setup from a new function
cpu_init_secondary() and explicitly call cpu_init_exception_handling() for
the boot CPU before cpu_init(). The latter prepares for fixing and
simplifying the exception/IST setup on the boot CPU.

There should be no functional changes resulting from this patch.

[ tglx: Reworked it so cpu_init_exception_handling() stays seperate ]

	Signed-off-by: Borislav Petkov <bp@suse.de>
	Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
	Reviewed-by: Lai Jiangshan <laijs@linux.alibaba.com>
	Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>                                                                                                                                                                                                                        
Link: https://lore.kernel.org/r/87k0o6gtvu.ffs@nanos.tec.linutronix.de


(cherry picked from commit b1efd0ff4bd16e8bb8607ba566b03f2024a830bb)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kernel/cpu/common.c
diff --cc arch/x86/kernel/cpu/common.c
index 54eadbbc684d,212e8bc070da..000000000000
--- a/arch/x86/kernel/cpu/common.c
+++ b/arch/x86/kernel/cpu/common.c
@@@ -2112,13 -1986,6 +2108,16 @@@ void cpu_init(void
  	initialize_tlbstate_and_flush();
  	enter_lazy_tlb(&init_mm, cur);
  
++<<<<<<< HEAD
 +	/* Initialize the TSS. */
 +	tss_setup_ist(tss);
 +	tss->x86_tss.io_bitmap_base = IO_BITMAP_OFFSET;
 +	memset(tss->io_bitmap, 0xff, sizeof(tss->io_bitmap));
 +	set_tss_desc(cpu, &get_cpu_entry_area(cpu)->tss.x86_tss);
 +
 +	load_TR_desc();
++=======
++>>>>>>> b1efd0ff4bd1 (x86/cpu: Init AP exception handling from cpu_init_secondary())
  	/*
  	 * sp0 points to the entry trampoline stack regardless of what task
  	 * is running.
diff --git a/arch/x86/include/asm/processor.h b/arch/x86/include/asm/processor.h
index 86ea6e09329f..605740dfd017 100644
--- a/arch/x86/include/asm/processor.h
+++ b/arch/x86/include/asm/processor.h
@@ -684,6 +684,7 @@ extern void load_direct_gdt(int);
 extern void load_fixmap_gdt(int);
 extern void load_percpu_segment(int);
 extern void cpu_init(void);
+extern void cpu_init_secondary(void);
 extern void cpu_init_exception_handling(void);
 extern void cr4_init(void);
 
* Unmerged path arch/x86/kernel/cpu/common.c
diff --git a/arch/x86/kernel/smpboot.c b/arch/x86/kernel/smpboot.c
index f17d1ac1bdb2..db4636676493 100644
--- a/arch/x86/kernel/smpboot.c
+++ b/arch/x86/kernel/smpboot.c
@@ -241,8 +241,7 @@ static void notrace start_secondary(void *unused)
 	load_cr3(swapper_pg_dir);
 	__flush_tlb_all();
 #endif
-	cpu_init_exception_handling();
-	cpu_init();
+	cpu_init_secondary();
 	rcu_cpu_starting(raw_smp_processor_id());
 	x86_cpuinit.early_percpu_clock_init();
 	preempt_disable();
diff --git a/arch/x86/kernel/traps.c b/arch/x86/kernel/traps.c
index bfb6deda083d..2cc3bcea653b 100644
--- a/arch/x86/kernel/traps.c
+++ b/arch/x86/kernel/traps.c
@@ -1055,9 +1055,7 @@ void __init trap_init(void)
 
 	idt_setup_traps();
 
-	/*
-	 * Should be a barrier for any external CPU state:
-	 */
+	cpu_init_exception_handling();
 	cpu_init();
 
 	idt_setup_ist_traps();
