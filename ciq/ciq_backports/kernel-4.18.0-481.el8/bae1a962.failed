x86/topology: Disable CPU online/offline control for TDX guests

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-481.el8
commit-author Kuppuswamy Sathyanarayanan <sathyanarayanan.kuppuswamy@linux.intel.com>
commit bae1a962ac2c5e6be08319ff3f7d6df542584fce
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-481.el8/bae1a962.failed

Unlike regular VMs, TDX guests use the firmware hand-off wakeup method
to wake up the APs during the boot process. This wakeup model uses a
mailbox to communicate with firmware to bring up the APs. As per the
design, this mailbox can only be used once for the given AP, which means
after the APs are booted, the same mailbox cannot be used to
offline/online the given AP. More details about this requirement can be
found in Intel TDX Virtual Firmware Design Guide, sec titled "AP
initialization in OS" and in sec titled "Hotplug Device".

Since the architecture does not support any method of offlining the
CPUs, disable CPU hotplug support in the kernel.

Since this hotplug disable feature can be re-used by other VM guests,
add a new CC attribute CC_ATTR_HOTPLUG_DISABLED and use it to disable
the hotplug support.

Attempt to offline CPU will fail with -EOPNOTSUPP.

	Signed-off-by: Kuppuswamy Sathyanarayanan <sathyanarayanan.kuppuswamy@linux.intel.com>
	Signed-off-by: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
	Signed-off-by: Dave Hansen <dave.hansen@linux.intel.com>
	Reviewed-by: Andi Kleen <ak@linux.intel.com>
	Reviewed-by: Tony Luck <tony.luck@intel.com>
	Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
Link: https://lkml.kernel.org/r/20220405232939.73860-25-kirill.shutemov@linux.intel.com
(cherry picked from commit bae1a962ac2c5e6be08319ff3f7d6df542584fce)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kernel/cc_platform.c
#	kernel/cpu.c
diff --cc arch/x86/kernel/cc_platform.c
index fc1365dd927e,70956f9d7c7e..000000000000
--- a/arch/x86/kernel/cc_platform.c
+++ b/arch/x86/kernel/cc_platform.c
@@@ -18,7 -18,13 +18,17 @@@ static u64 cc_mask __ro_after_init
  
  static bool intel_cc_platform_has(enum cc_attr attr)
  {
++<<<<<<< HEAD:arch/x86/kernel/cc_platform.c
 +	return false;
++=======
+ 	switch (attr) {
+ 	case CC_ATTR_GUEST_UNROLL_STRING_IO:
+ 	case CC_ATTR_HOTPLUG_DISABLED:
+ 		return true;
+ 	default:
+ 		return false;
+ 	}
++>>>>>>> bae1a962ac2c (x86/topology: Disable CPU online/offline control for TDX guests):arch/x86/coco/core.c
  }
  
  /*
diff --cc kernel/cpu.c
index 81363629196a,edb8c199f6a3..000000000000
--- a/kernel/cpu.c
+++ b/kernel/cpu.c
@@@ -31,8 -31,11 +31,13 @@@
  #include <linux/smpboot.h>
  #include <linux/relay.h>
  #include <linux/slab.h>
 -#include <linux/scs.h>
  #include <linux/percpu-rwsem.h>
  #include <linux/cpuset.h>
++<<<<<<< HEAD
++=======
+ #include <linux/random.h>
+ #include <linux/cc_platform.h>
++>>>>>>> bae1a962ac2c (x86/topology: Disable CPU online/offline control for TDX guests)
  
  #include <trace/events/power.h>
  #define CREATE_TRACE_POINTS
* Unmerged path arch/x86/kernel/cc_platform.c
diff --git a/include/linux/cc_platform.h b/include/linux/cc_platform.h
index efd8205282da..691494bbaf5a 100644
--- a/include/linux/cc_platform.h
+++ b/include/linux/cc_platform.h
@@ -72,6 +72,16 @@ enum cc_attr {
 	 * Examples include TDX guest & SEV.
 	 */
 	CC_ATTR_GUEST_UNROLL_STRING_IO,
+
+	/**
+	 * @CC_ATTR_HOTPLUG_DISABLED: Hotplug is not supported or disabled.
+	 *
+	 * The platform/OS is running as a guest/virtual machine does not
+	 * support CPU hotplug feature.
+	 *
+	 * Examples include TDX Guest.
+	 */
+	CC_ATTR_HOTPLUG_DISABLED,
 };
 
 #ifdef CONFIG_ARCH_HAS_CC_PLATFORM
* Unmerged path kernel/cpu.c
