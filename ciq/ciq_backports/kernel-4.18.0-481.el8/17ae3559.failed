RDMA/mlx5: Replace ent->lock with xa_lock

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-481.el8
commit-author Aharon Landau <aharonl@nvidia.com>
commit 17ae355926ed1832449d52748334b8fa799301f1
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-481.el8/17ae3559.failed

In the next patch, ent->list will be replaced with an xarray. The xarray
uses an internal lock to protect the indexes. Use it to protect all the
entry fields, and get rid of ent->lock.

Link: https://lore.kernel.org/r/20220726071911.122765-2-michaelgur@nvidia.com
	Signed-off-by: Aharon Landau <aharonl@nvidia.com>
	Signed-off-by: Leon Romanovsky <leonro@nvidia.com>
	Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
(cherry picked from commit 17ae355926ed1832449d52748334b8fa799301f1)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/hw/mlx5/mr.c
diff --cc drivers/infiniband/hw/mlx5/mr.c
index 2aee9118633b,d56e7ff74b98..000000000000
--- a/drivers/infiniband/hw/mlx5/mr.c
+++ b/drivers/infiniband/hw/mlx5/mr.c
@@@ -604,10 -589,10 +604,10 @@@ struct mlx5_ib_mr *mlx5_mr_cache_alloc(
  	struct mlx5_ib_mr *mr;
  
  	/* Matches access in alloc_cache_mr() */
 -	if (!mlx5r_umr_can_reconfig(dev, 0, access_flags))
 +	if (!mlx5_ib_can_reconfig_with_umr(dev, 0, access_flags))
  		return ERR_PTR(-EOPNOTSUPP);
  
- 	spin_lock_irq(&ent->lock);
+ 	xa_lock_irq(&ent->mkeys);
  	if (list_empty(&ent->head)) {
  		queue_adjust_cache_locked(ent);
  		ent->miss++;
@@@ -1811,10 -1571,10 +1811,15 @@@ int mlx5_ib_dereg_mr(struct ib_mr *ibmr
  
  	/* Stop DMA */
  	if (mr->cache_ent) {
++<<<<<<< HEAD
 +		if (revoke_mr(mr)) {
 +			spin_lock_irq(&mr->cache_ent->lock);
++=======
+ 		if (mlx5r_umr_revoke_mr(mr)) {
+ 			xa_lock_irq(&mr->cache_ent->mkeys);
++>>>>>>> 17ae355926ed (RDMA/mlx5: Replace ent->lock with xa_lock)
  			mr->cache_ent->total_mrs--;
- 			spin_unlock_irq(&mr->cache_ent->lock);
+ 			xa_unlock_irq(&mr->cache_ent->mkeys);
  			mr->cache_ent = NULL;
  		}
  	}
diff --git a/drivers/infiniband/hw/mlx5/mlx5_ib.h b/drivers/infiniband/hw/mlx5/mlx5_ib.h
index bc16ce369c59..1abb62993b0b 100644
--- a/drivers/infiniband/hw/mlx5/mlx5_ib.h
+++ b/drivers/infiniband/hw/mlx5/mlx5_ib.h
@@ -754,11 +754,8 @@ struct umr_common {
 };
 
 struct mlx5_cache_ent {
+	struct xarray		mkeys;
 	struct list_head	head;
-	/* sync access to the cahce entry
-	 */
-	spinlock_t		lock;
-
 
 	char                    name[4];
 	u32                     order;
* Unmerged path drivers/infiniband/hw/mlx5/mr.c
