powerpc/bpf: Skip branch range validation during first pass

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-481.el8
commit-author Naveen N. Rao <naveen.n.rao@linux.vnet.ibm.com>
commit acd7408d2748533d767387cb4308692fba543658
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-481.el8/acd7408d.failed

During the first pass, addrs[] is still being populated. So, all
branches to following instructions will appear to be going to the start
of the JIT program. Ignore branch range validation for such instructions
and assume those to be in range. Branch range validation will happen
during the second pass after addrs[] is setup properly.

	Signed-off-by: Naveen N. Rao <naveen.n.rao@linux.vnet.ibm.com>
	Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
Link: https://lore.kernel.org/r/bc517413d11636e20dbfc88503dad14bcbe391e2.1644834730.git.naveen.n.rao@linux.vnet.ibm.com

(cherry picked from commit acd7408d2748533d767387cb4308692fba543658)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/powerpc/net/bpf_jit.h
diff --cc arch/powerpc/net/bpf_jit.h
index d22140878361,25a7190bcee9..000000000000
--- a/arch/powerpc/net/bpf_jit.h
+++ b/arch/powerpc/net/bpf_jit.h
@@@ -28,16 -24,30 +28,42 @@@
  #define EMIT(instr)		PLANT_INSTR(image, ctx->idx, instr)
  
  /* Long jump; (unconditional 'branch') */
++<<<<<<< HEAD
 +#define PPC_JMP(dest)		EMIT(PPC_INST_BRANCH |			      \
 +				     (((dest) - (ctx->idx * 4)) & 0x03fffffc))
++=======
+ #define PPC_JMP(dest)							      \
+ 	do {								      \
+ 		long offset = (long)(dest) - (ctx->idx * 4);		      \
+ 		if ((dest) != 0 && !is_offset_in_branch_range(offset)) {		      \
+ 			pr_err_ratelimited("Branch offset 0x%lx (@%u) out of range\n", offset, ctx->idx);			\
+ 			return -ERANGE;					      \
+ 		}							      \
+ 		EMIT(PPC_RAW_BRANCH(offset));				      \
+ 	} while (0)
+ 
++>>>>>>> acd7408d2748 (powerpc/bpf: Skip branch range validation during first pass)
  /* blr; (unconditional 'branch' with link) to absolute address */
  #define PPC_BL_ABS(dest)	EMIT(PPC_INST_BL |			      \
  				     (((dest) - (unsigned long)(image + ctx->idx)) & 0x03fffffc))
  /* "cond" here covers BO:BI fields. */
++<<<<<<< HEAD
 +#define PPC_BCC_SHORT(cond, dest)	EMIT(PPC_INST_BRANCH_COND |	      \
 +					     (((cond) & 0x3ff) << 16) |	      \
 +					     (((dest) - (ctx->idx * 4)) &     \
 +					      0xfffc))
++=======
+ #define PPC_BCC_SHORT(cond, dest)					      \
+ 	do {								      \
+ 		long offset = (long)(dest) - (ctx->idx * 4);		      \
+ 		if ((dest) != 0 && !is_offset_in_cond_branch_range(offset)) {		      \
+ 			pr_err_ratelimited("Conditional branch offset 0x%lx (@%u) out of range\n", offset, ctx->idx);		\
+ 			return -ERANGE;					      \
+ 		}							      \
+ 		EMIT(PPC_INST_BRANCH_COND | (((cond) & 0x3ff) << 16) | (offset & 0xfffc));					\
+ 	} while (0)
+ 
++>>>>>>> acd7408d2748 (powerpc/bpf: Skip branch range validation during first pass)
  /* Sign-extended 32-bit immediate load */
  #define PPC_LI32(d, i)		do {					      \
  		if ((int)(uintptr_t)(i) >= -32768 &&			      \
* Unmerged path arch/powerpc/net/bpf_jit.h
