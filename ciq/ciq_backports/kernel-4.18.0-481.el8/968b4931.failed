x86/mm: Make DMA memory shared for TD guest

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-481.el8
commit-author Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
commit 968b493173ac5205fe75f6330ee767f96bf88e57
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-481.el8/968b4931.failed

Intel TDX doesn't allow VMM to directly access guest private memory.
Any memory that is required for communication with the VMM must be
shared explicitly. The same rule applies for any DMA to and from the
TDX guest. All DMA pages have to be marked as shared pages. A generic way
to achieve this without any changes to device drivers is to use the
SWIOTLB framework.

The previous patch ("Add support for TDX shared memory") gave TDX guests
the _ability_ to make some pages shared, but did not make any pages
shared. This actually marks SWIOTLB buffers *as* shared.

Start returning true for cc_platform_has(CC_ATTR_GUEST_MEM_ENCRYPT) in
TDX guests.  This has several implications:

 - Allows the existing mem_encrypt_init() to be used for TDX which
   sets SWIOTLB buffers shared (aka. "decrypted").
 - Ensures that all DMA is routed via the SWIOTLB mechanism (see
   pci_swiotlb_detect())

Stop selecting DYNAMIC_PHYSICAL_MASK directly. It will get set
indirectly by selecting X86_MEM_ENCRYPT.

mem_encrypt_init() is currently under an AMD-specific #ifdef. Move it to
a generic area of the header.

Co-developed-by: Kuppuswamy Sathyanarayanan <sathyanarayanan.kuppuswamy@linux.intel.com>
	Signed-off-by: Kuppuswamy Sathyanarayanan <sathyanarayanan.kuppuswamy@linux.intel.com>
	Signed-off-by: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
	Signed-off-by: Dave Hansen <dave.hansen@linux.intel.com>
	Reviewed-by: Andi Kleen <ak@linux.intel.com>
	Reviewed-by: Tony Luck <tony.luck@intel.com>
	Reviewed-by: Dave Hansen <dave.hansen@linux.intel.com>
Link: https://lkml.kernel.org/r/20220405232939.73860-28-kirill.shutemov@linux.intel.com
(cherry picked from commit 968b493173ac5205fe75f6330ee767f96bf88e57)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/Kconfig
#	arch/x86/include/asm/mem_encrypt.h
#	arch/x86/kernel/cc_platform.c
#	arch/x86/mm/mem_encrypt.c
diff --cc arch/x86/Kconfig
index 970d47f5992e,7021ec725dd3..000000000000
--- a/arch/x86/Kconfig
+++ b/arch/x86/Kconfig
@@@ -847,6 -867,32 +847,35 @@@ config JAILHOUSE_GUES
  	  cell. You can leave this option disabled if you only want to start
  	  Jailhouse and run Linux afterwards in the root cell.
  
++<<<<<<< HEAD
++=======
+ config ACRN_GUEST
+ 	bool "ACRN Guest support"
+ 	depends on X86_64
+ 	select X86_HV_CALLBACK_VECTOR
+ 	help
+ 	  This option allows to run Linux as guest in the ACRN hypervisor. ACRN is
+ 	  a flexible, lightweight reference open-source hypervisor, built with
+ 	  real-time and safety-criticality in mind. It is built for embedded
+ 	  IOT with small footprint and real-time features. More details can be
+ 	  found in https://projectacrn.org/.
+ 
+ config INTEL_TDX_GUEST
+ 	bool "Intel TDX (Trust Domain Extensions) - Guest Support"
+ 	depends on X86_64 && CPU_SUP_INTEL
+ 	depends on X86_X2APIC
+ 	select ARCH_HAS_CC_PLATFORM
+ 	select X86_MEM_ENCRYPT
+ 	select X86_MCE
+ 	help
+ 	  Support running as a guest under Intel TDX.  Without this support,
+ 	  the guest kernel can not boot or run under TDX.
+ 	  TDX includes memory encryption and integrity capabilities
+ 	  which protect the confidentiality and integrity of guest
+ 	  memory contents and CPU state. TDX guests are protected from
+ 	  some attacks from the VMM.
+ 
++>>>>>>> 968b493173ac (x86/mm: Make DMA memory shared for TD guest)
  endif #HYPERVISOR_GUEST
  
  source "arch/x86/Kconfig.cpu"
diff --cc arch/x86/include/asm/mem_encrypt.h
index d5d53c59f694,88ceaf3648b3..000000000000
--- a/arch/x86/include/asm/mem_encrypt.h
+++ b/arch/x86/include/asm/mem_encrypt.h
@@@ -50,8 -47,6 +50,11 @@@ int __init early_set_memory_encrypted(u
  void __init early_set_mem_enc_dec_hypercall(unsigned long vaddr, int npages,
  					    bool enc);
  
++<<<<<<< HEAD
 +/* Architecture __weak replacement functions */
 +void __init mem_encrypt_init(void);
++=======
++>>>>>>> 968b493173ac (x86/mm: Make DMA memory shared for TD guest)
  void __init mem_encrypt_free_decrypted_mem(void);
  
  void __init sev_es_init_vc_handling(void);
diff --cc arch/x86/kernel/cc_platform.c
index fc1365dd927e,4320fadae716..000000000000
--- a/arch/x86/kernel/cc_platform.c
+++ b/arch/x86/kernel/cc_platform.c
@@@ -18,7 -18,15 +18,19 @@@ static u64 cc_mask __ro_after_init
  
  static bool intel_cc_platform_has(enum cc_attr attr)
  {
++<<<<<<< HEAD:arch/x86/kernel/cc_platform.c
 +	return false;
++=======
+ 	switch (attr) {
+ 	case CC_ATTR_GUEST_UNROLL_STRING_IO:
+ 	case CC_ATTR_HOTPLUG_DISABLED:
+ 	case CC_ATTR_GUEST_MEM_ENCRYPT:
+ 	case CC_ATTR_MEM_ENCRYPT:
+ 		return true;
+ 	default:
+ 		return false;
+ 	}
++>>>>>>> 968b493173ac (x86/mm: Make DMA memory shared for TD guest):arch/x86/coco/core.c
  }
  
  /*
* Unmerged path arch/x86/mm/mem_encrypt.c
* Unmerged path arch/x86/Kconfig
* Unmerged path arch/x86/include/asm/mem_encrypt.h
* Unmerged path arch/x86/kernel/cc_platform.c
* Unmerged path arch/x86/mm/mem_encrypt.c
