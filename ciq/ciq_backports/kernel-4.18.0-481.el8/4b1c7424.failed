x86/boot: Don't propagate uninitialized boot_params->cc_blob_address

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-481.el8
commit-author Michael Roth <michael.roth@amd.com>
commit 4b1c742407571eff58b6de9881889f7ca7c4b4dc
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-481.el8/4b1c7424.failed

In some cases, bootloaders will leave boot_params->cc_blob_address
uninitialized rather than zeroing it out. This field is only meant to be
set by the boot/compressed kernel in order to pass information to the
uncompressed kernel when SEV-SNP support is enabled.

Therefore, there are no cases where the bootloader-provided values
should be treated as anything other than garbage. Otherwise, the
uncompressed kernel may attempt to access this bogus address, leading to
a crash during early boot.

Normally, sanitize_boot_params() would be used to clear out such fields
but that happens too late: sev_enable() may have already initialized
it to a valid value that should not be zeroed out. Instead, have
sev_enable() zero it out unconditionally beforehand.

Also ensure this happens for !CONFIG_AMD_MEM_ENCRYPT as well by also
including this handling in the sev_enable() stub function.

  [ bp: Massage commit message and comments. ]

Fixes: b190a043c49a ("x86/sev: Add SEV-SNP feature detection/setup")
	Reported-by: Jeremi Piotrowski <jpiotrowski@linux.microsoft.com>
	Reported-by: watnuss@gmx.de
	Signed-off-by: Michael Roth <michael.roth@amd.com>
	Signed-off-by: Borislav Petkov <bp@suse.de>
	Cc: stable@vger.kernel.org
Link: https://bugzilla.kernel.org/show_bug.cgi?id=216387
Link: https://lore.kernel.org/r/20220823160734.89036-1-michael.roth@amd.com
(cherry picked from commit 4b1c742407571eff58b6de9881889f7ca7c4b4dc)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/boot/compressed/misc.h
#	arch/x86/boot/compressed/sev.c
diff --cc arch/x86/boot/compressed/misc.h
index d0b0a3b25f53,62208ec04ca4..000000000000
--- a/arch/x86/boot/compressed/misc.h
+++ b/arch/x86/boot/compressed/misc.h
@@@ -116,12 -124,25 +116,26 @@@ static inline void console_init(void
  { }
  #endif
  
 +void set_sev_encryption_mask(void);
 +
  #ifdef CONFIG_AMD_MEM_ENCRYPT
 -void sev_enable(struct boot_params *bp);
  void sev_es_shutdown_ghcb(void);
  extern bool sev_es_check_ghcb_fault(unsigned long address);
 -void snp_set_page_private(unsigned long paddr);
 -void snp_set_page_shared(unsigned long paddr);
 -void sev_prep_identity_maps(unsigned long top_level_pgt);
  #else
++<<<<<<< HEAD
++=======
+ static inline void sev_enable(struct boot_params *bp)
+ {
+ 	/*
+ 	 * bp->cc_blob_address should only be set by boot/compressed kernel.
+ 	 * Initialize it to 0 unconditionally (thus here in this stub too) to
+ 	 * ensure that uninitialized values from buggy bootloaders aren't
+ 	 * propagated.
+ 	 */
+ 	if (bp)
+ 		bp->cc_blob_address = 0;
+ }
++>>>>>>> 4b1c74240757 (x86/boot: Don't propagate uninitialized boot_params->cc_blob_address)
  static inline void sev_es_shutdown_ghcb(void) { }
  static inline bool sev_es_check_ghcb_fault(unsigned long address)
  {
diff --cc arch/x86/boot/compressed/sev.c
index 213b126ba7e3,c93930d5ccbd..000000000000
--- a/arch/x86/boot/compressed/sev.c
+++ b/arch/x86/boot/compressed/sev.c
@@@ -202,3 -249,197 +202,200 @@@ finish
  	else if (result != ES_RETRY)
  		sev_es_terminate(SEV_TERM_SET_GEN, GHCB_SEV_ES_GEN_REQ);
  }
++<<<<<<< HEAD
++=======
+ 
+ static void enforce_vmpl0(void)
+ {
+ 	u64 attrs;
+ 	int err;
+ 
+ 	/*
+ 	 * RMPADJUST modifies RMP permissions of a lesser-privileged (numerically
+ 	 * higher) privilege level. Here, clear the VMPL1 permission mask of the
+ 	 * GHCB page. If the guest is not running at VMPL0, this will fail.
+ 	 *
+ 	 * If the guest is running at VMPL0, it will succeed. Even if that operation
+ 	 * modifies permission bits, it is still ok to do so currently because Linux
+ 	 * SNP guests are supported only on VMPL0 so VMPL1 or higher permission masks
+ 	 * changing is a don't-care.
+ 	 */
+ 	attrs = 1;
+ 	if (rmpadjust((unsigned long)&boot_ghcb_page, RMP_PG_SIZE_4K, attrs))
+ 		sev_es_terminate(SEV_TERM_SET_LINUX, GHCB_TERM_NOT_VMPL0);
+ }
+ 
+ void sev_enable(struct boot_params *bp)
+ {
+ 	unsigned int eax, ebx, ecx, edx;
+ 	struct msr m;
+ 	bool snp;
+ 
+ 	/*
+ 	 * bp->cc_blob_address should only be set by boot/compressed kernel.
+ 	 * Initialize it to 0 to ensure that uninitialized values from
+ 	 * buggy bootloaders aren't propagated.
+ 	 */
+ 	if (bp)
+ 		bp->cc_blob_address = 0;
+ 
+ 	/*
+ 	 * Setup/preliminary detection of SNP. This will be sanity-checked
+ 	 * against CPUID/MSR values later.
+ 	 */
+ 	snp = snp_init(bp);
+ 
+ 	/* Check for the SME/SEV support leaf */
+ 	eax = 0x80000000;
+ 	ecx = 0;
+ 	native_cpuid(&eax, &ebx, &ecx, &edx);
+ 	if (eax < 0x8000001f)
+ 		return;
+ 
+ 	/*
+ 	 * Check for the SME/SEV feature:
+ 	 *   CPUID Fn8000_001F[EAX]
+ 	 *   - Bit 0 - Secure Memory Encryption support
+ 	 *   - Bit 1 - Secure Encrypted Virtualization support
+ 	 *   CPUID Fn8000_001F[EBX]
+ 	 *   - Bits 5:0 - Pagetable bit position used to indicate encryption
+ 	 */
+ 	eax = 0x8000001f;
+ 	ecx = 0;
+ 	native_cpuid(&eax, &ebx, &ecx, &edx);
+ 	/* Check whether SEV is supported */
+ 	if (!(eax & BIT(1))) {
+ 		if (snp)
+ 			error("SEV-SNP support indicated by CC blob, but not CPUID.");
+ 		return;
+ 	}
+ 
+ 	/* Set the SME mask if this is an SEV guest. */
+ 	boot_rdmsr(MSR_AMD64_SEV, &m);
+ 	sev_status = m.q;
+ 	if (!(sev_status & MSR_AMD64_SEV_ENABLED))
+ 		return;
+ 
+ 	/* Negotiate the GHCB protocol version. */
+ 	if (sev_status & MSR_AMD64_SEV_ES_ENABLED) {
+ 		if (!sev_es_negotiate_protocol())
+ 			sev_es_terminate(SEV_TERM_SET_GEN, GHCB_SEV_ES_PROT_UNSUPPORTED);
+ 	}
+ 
+ 	/*
+ 	 * SNP is supported in v2 of the GHCB spec which mandates support for HV
+ 	 * features.
+ 	 */
+ 	if (sev_status & MSR_AMD64_SEV_SNP_ENABLED) {
+ 		if (!(get_hv_features() & GHCB_HV_FT_SNP))
+ 			sev_es_terminate(SEV_TERM_SET_GEN, GHCB_SNP_UNSUPPORTED);
+ 
+ 		enforce_vmpl0();
+ 	}
+ 
+ 	if (snp && !(sev_status & MSR_AMD64_SEV_SNP_ENABLED))
+ 		error("SEV-SNP supported indicated by CC blob, but not SEV status MSR.");
+ 
+ 	sme_me_mask = BIT_ULL(ebx & 0x3f);
+ }
+ 
+ /* Search for Confidential Computing blob in the EFI config table. */
+ static struct cc_blob_sev_info *find_cc_blob_efi(struct boot_params *bp)
+ {
+ 	unsigned long cfg_table_pa;
+ 	unsigned int cfg_table_len;
+ 	int ret;
+ 
+ 	ret = efi_get_conf_table(bp, &cfg_table_pa, &cfg_table_len);
+ 	if (ret)
+ 		return NULL;
+ 
+ 	return (struct cc_blob_sev_info *)efi_find_vendor_table(bp, cfg_table_pa,
+ 								cfg_table_len,
+ 								EFI_CC_BLOB_GUID);
+ }
+ 
+ /*
+  * Initial set up of SNP relies on information provided by the
+  * Confidential Computing blob, which can be passed to the boot kernel
+  * by firmware/bootloader in the following ways:
+  *
+  * - via an entry in the EFI config table
+  * - via a setup_data structure, as defined by the Linux Boot Protocol
+  *
+  * Scan for the blob in that order.
+  */
+ static struct cc_blob_sev_info *find_cc_blob(struct boot_params *bp)
+ {
+ 	struct cc_blob_sev_info *cc_info;
+ 
+ 	cc_info = find_cc_blob_efi(bp);
+ 	if (cc_info)
+ 		goto found_cc_info;
+ 
+ 	cc_info = find_cc_blob_setup_data(bp);
+ 	if (!cc_info)
+ 		return NULL;
+ 
+ found_cc_info:
+ 	if (cc_info->magic != CC_BLOB_SEV_HDR_MAGIC)
+ 		sev_es_terminate(SEV_TERM_SET_GEN, GHCB_SNP_UNSUPPORTED);
+ 
+ 	return cc_info;
+ }
+ 
+ /*
+  * Indicate SNP based on presence of SNP-specific CC blob. Subsequent checks
+  * will verify the SNP CPUID/MSR bits.
+  */
+ bool snp_init(struct boot_params *bp)
+ {
+ 	struct cc_blob_sev_info *cc_info;
+ 
+ 	if (!bp)
+ 		return false;
+ 
+ 	cc_info = find_cc_blob(bp);
+ 	if (!cc_info)
+ 		return false;
+ 
+ 	/*
+ 	 * If a SNP-specific Confidential Computing blob is present, then
+ 	 * firmware/bootloader have indicated SNP support. Verifying this
+ 	 * involves CPUID checks which will be more reliable if the SNP
+ 	 * CPUID table is used. See comments over snp_setup_cpuid_table() for
+ 	 * more details.
+ 	 */
+ 	setup_cpuid_table(cc_info);
+ 
+ 	/*
+ 	 * Pass run-time kernel a pointer to CC info via boot_params so EFI
+ 	 * config table doesn't need to be searched again during early startup
+ 	 * phase.
+ 	 */
+ 	bp->cc_blob_address = (u32)(unsigned long)cc_info;
+ 
+ 	return true;
+ }
+ 
+ void sev_prep_identity_maps(unsigned long top_level_pgt)
+ {
+ 	/*
+ 	 * The Confidential Computing blob is used very early in uncompressed
+ 	 * kernel to find the in-memory CPUID table to handle CPUID
+ 	 * instructions. Make sure an identity-mapping exists so it can be
+ 	 * accessed after switchover.
+ 	 */
+ 	if (sev_snp_enabled()) {
+ 		unsigned long cc_info_pa = boot_params->cc_blob_address;
+ 		struct cc_blob_sev_info *cc_info;
+ 
+ 		kernel_add_identity_map(cc_info_pa, cc_info_pa + sizeof(*cc_info));
+ 
+ 		cc_info = (struct cc_blob_sev_info *)cc_info_pa;
+ 		kernel_add_identity_map(cc_info->cpuid_phys, cc_info->cpuid_phys + cc_info->cpuid_len);
+ 	}
+ 
+ 	sev_verify_cbit(top_level_pgt);
+ }
++>>>>>>> 4b1c74240757 (x86/boot: Don't propagate uninitialized boot_params->cc_blob_address)
* Unmerged path arch/x86/boot/compressed/misc.h
* Unmerged path arch/x86/boot/compressed/sev.c
