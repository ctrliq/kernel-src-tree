net: phy: Introduce fwnode_mdio_find_device()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-481.el8
commit-author Calvin Johnson <calvin.johnson@oss.nxp.com>
commit 0fb16976765143cf0d7d0dd78b3f406ab135c494
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-481.el8/0fb16976.failed

Define fwnode_mdio_find_device() to get a pointer to the
mdio_device from fwnode passed to the function.

Refactor of_mdio_find_device() to use fwnode_mdio_find_device().

	Signed-off-by: Calvin Johnson <calvin.johnson@oss.nxp.com>
	Signed-off-by: Ioana Ciornei <ioana.ciornei@nxp.com>
	Acked-by: Grant Likely <grant.likely@arm.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 0fb16976765143cf0d7d0dd78b3f406ab135c494)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/of/of_mdio.c
diff --cc drivers/of/of_mdio.c
index 1d155adc6486,6ef8b6e40189..000000000000
--- a/drivers/of/of_mdio.c
+++ b/drivers/of/of_mdio.c
@@@ -339,6 -338,20 +339,23 @@@ unregister
  EXPORT_SYMBOL(of_mdiobus_register);
  
  /**
++<<<<<<< HEAD:drivers/of/of_mdio.c
++=======
+  * of_mdio_find_device - Given a device tree node, find the mdio_device
+  * @np: pointer to the mdio_device's device tree node
+  *
+  * If successful, returns a pointer to the mdio_device with the embedded
+  * struct device refcount incremented by one, or NULL on failure.
+  * The caller should call put_device() on the mdio_device after its use
+  */
+ struct mdio_device *of_mdio_find_device(struct device_node *np)
+ {
+ 	return fwnode_mdio_find_device(of_fwnode_handle(np));
+ }
+ EXPORT_SYMBOL(of_mdio_find_device);
+ 
+ /**
++>>>>>>> 0fb169767651 (net: phy: Introduce fwnode_mdio_find_device()):drivers/net/mdio/of_mdio.c
   * of_phy_find_device - Give a PHY node, find the phy_device
   * @phy_np: Pointer to the phy's device tree node
   *
diff --git a/drivers/net/phy/phy_device.c b/drivers/net/phy/phy_device.c
index ed7226c4a52f..b819f401c950 100644
--- a/drivers/net/phy/phy_device.c
+++ b/drivers/net/phy/phy_device.c
@@ -2854,6 +2854,29 @@ static bool phy_drv_supports_irq(struct phy_driver *phydrv)
 	return phydrv->config_intr && phydrv->handle_interrupt;
 }
 
+/**
+ * fwnode_mdio_find_device - Given a fwnode, find the mdio_device
+ * @fwnode: pointer to the mdio_device's fwnode
+ *
+ * If successful, returns a pointer to the mdio_device with the embedded
+ * struct device refcount incremented by one, or NULL on failure.
+ * The caller should call put_device() on the mdio_device after its use.
+ */
+struct mdio_device *fwnode_mdio_find_device(struct fwnode_handle *fwnode)
+{
+	struct device *d;
+
+	if (!fwnode)
+		return NULL;
+
+	d = bus_find_device_by_fwnode(&mdio_bus_type, fwnode);
+	if (!d)
+		return NULL;
+
+	return to_mdio_device(d);
+}
+EXPORT_SYMBOL(fwnode_mdio_find_device);
+
 /**
  * phy_probe - probe and init a PHY device
  * @dev: device to probe and init
* Unmerged path drivers/of/of_mdio.c
diff --git a/include/linux/phy.h b/include/linux/phy.h
index 812a0b236a34..f6e180c20602 100644
--- a/include/linux/phy.h
+++ b/include/linux/phy.h
@@ -1322,10 +1322,17 @@ struct phy_device *phy_device_create(struct mii_bus *bus, int addr, u32 phy_id,
 				     bool is_c45,
 				     struct phy_c45_device_ids *c45_ids);
 #if IS_ENABLED(CONFIG_PHYLIB)
+struct mdio_device *fwnode_mdio_find_device(struct fwnode_handle *fwnode);
 struct phy_device *get_phy_device(struct mii_bus *bus, int addr, bool is_c45);
 int phy_device_register(struct phy_device *phy);
 void phy_device_free(struct phy_device *phydev);
 #else
+static inline
+struct mdio_device *fwnode_mdio_find_device(struct fwnode_handle *fwnode)
+{
+	return 0;
+}
+
 static inline
 struct phy_device *get_phy_device(struct mii_bus *bus, int addr, bool is_c45)
 {
