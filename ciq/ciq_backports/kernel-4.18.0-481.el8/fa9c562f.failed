net: make xpcs_do_config to accept advertising for pcs-xpcs and sja1105

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-481.el8
commit-author Ong Boon Leong <boon.leong.ong@intel.com>
commit fa9c562f9735d24c3253747eb21f3f0c0f6de48e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-481.el8/fa9c562f.failed

xpcs_config() has 'advertising' input that is required for C37 1000BASE-X
AN in later patch series. So, we prepare xpcs_do_config() for it.

For sja1105, xpcs_do_config() is used for xpcs configuration without
depending on advertising input, so set to NULL.

	Reported-by: kernel test robot <lkp@intel.com>
	Signed-off-by: Ong Boon Leong <boon.leong.ong@intel.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit fa9c562f9735d24c3253747eb21f3f0c0f6de48e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/dsa/sja1105/sja1105_main.c
#	drivers/net/pcs/pcs-xpcs.c
#	include/linux/pcs/pcs-xpcs.h
diff --cc drivers/net/pcs/pcs-xpcs.c
index c10bb5d22b5b,48d81c40aab7..000000000000
--- a/drivers/net/pcs/pcs-xpcs.c
+++ b/drivers/net/pcs/pcs-xpcs.c
@@@ -819,8 -772,30 +819,35 @@@ static int xpcs_config_aneg_c37_sgmii(s
  	return ret;
  }
  
++<<<<<<< HEAD
 +static int xpcs_config(struct mdio_xpcs_args *xpcs,
 +		       const struct phylink_link_state *state)
++=======
+ static int xpcs_config_2500basex(struct dw_xpcs *xpcs)
+ {
+ 	int ret;
+ 
+ 	ret = xpcs_read(xpcs, MDIO_MMD_VEND2, DW_VR_MII_DIG_CTRL1);
+ 	if (ret < 0)
+ 		return ret;
+ 	ret |= DW_VR_MII_DIG_CTRL1_2G5_EN;
+ 	ret &= ~DW_VR_MII_DIG_CTRL1_MAC_AUTO_SW;
+ 	ret = xpcs_write(xpcs, MDIO_MMD_VEND2, DW_VR_MII_DIG_CTRL1, ret);
+ 	if (ret < 0)
+ 		return ret;
+ 
+ 	ret = xpcs_read(xpcs, MDIO_MMD_VEND2, DW_VR_MII_MMD_CTRL);
+ 	if (ret < 0)
+ 		return ret;
+ 	ret &= ~AN_CL37_EN;
+ 	ret |= SGMII_SPEED_SS6;
+ 	ret &= ~SGMII_SPEED_SS13;
+ 	return xpcs_write(xpcs, MDIO_MMD_VEND2, DW_VR_MII_MMD_CTRL, ret);
+ }
+ 
+ int xpcs_do_config(struct dw_xpcs *xpcs, phy_interface_t interface,
+ 		   unsigned int mode, const unsigned long *advertising)
++>>>>>>> fa9c562f9735 (net: make xpcs_do_config to accept advertising for pcs-xpcs and sja1105)
  {
  	const struct xpcs_compat *compat;
  	int ret;
@@@ -846,10 -826,27 +873,24 @@@
  		return -1;
  	}
  
 -	if (compat->pma_config) {
 -		ret = compat->pma_config(xpcs);
 -		if (ret)
 -			return ret;
 -	}
 -
  	return 0;
  }
 -EXPORT_SYMBOL_GPL(xpcs_do_config);
  
++<<<<<<< HEAD
 +static int xpcs_get_state_c73(struct mdio_xpcs_args *xpcs,
++=======
+ static int xpcs_config(struct phylink_pcs *pcs, unsigned int mode,
+ 		       phy_interface_t interface,
+ 		       const unsigned long *advertising,
+ 		       bool permit_pause_to_mac)
+ {
+ 	struct dw_xpcs *xpcs = phylink_pcs_to_xpcs(pcs);
+ 
+ 	return xpcs_do_config(xpcs, interface, mode, advertising);
+ }
+ 
+ static int xpcs_get_state_c73(struct dw_xpcs *xpcs,
++>>>>>>> fa9c562f9735 (net: make xpcs_do_config to accept advertising for pcs-xpcs and sja1105)
  			      struct phylink_link_state *state,
  			      const struct xpcs_compat *compat)
  {
@@@ -867,7 -864,7 +908,11 @@@
  
  		state->link = 0;
  
++<<<<<<< HEAD
 +		return xpcs_config(xpcs, state);
++=======
+ 		return xpcs_do_config(xpcs, state->interface, MLO_AN_INBAND, NULL);
++>>>>>>> fa9c562f9735 (net: make xpcs_do_config to accept advertising for pcs-xpcs and sja1105)
  	}
  
  	if (state->an_enabled && xpcs_aneg_done_c73(xpcs, state, compat)) {
diff --cc include/linux/pcs/pcs-xpcs.h
index 57a199393d63,37eb97cc2283..000000000000
--- a/include/linux/pcs/pcs-xpcs.h
+++ b/include/linux/pcs/pcs-xpcs.h
@@@ -16,28 -19,23 +16,38 @@@
  
  struct xpcs_id;
  
 -struct dw_xpcs {
 +struct mdio_xpcs_args {
  	struct mdio_device *mdiodev;
  	const struct xpcs_id *id;
 -	struct phylink_pcs pcs;
  };
  
++<<<<<<< HEAD
 +struct mdio_xpcs_ops {
 +	int (*config)(struct mdio_xpcs_args *xpcs,
 +		      const struct phylink_link_state *state);
 +	int (*get_state)(struct mdio_xpcs_args *xpcs,
 +			 struct phylink_link_state *state);
 +	int (*link_up)(struct mdio_xpcs_args *xpcs, int speed,
 +		       phy_interface_t interface);
 +};
 +
 +int xpcs_get_an_mode(struct mdio_xpcs_args *xpcs, phy_interface_t interface);
 +struct mdio_xpcs_ops *mdio_xpcs_get_ops(void);
 +void xpcs_validate(struct mdio_xpcs_args *xpcs, unsigned long *supported,
 +		   struct phylink_link_state *state);
 +int xpcs_config_eee(struct mdio_xpcs_args *xpcs, int mult_fact_100ns,
++=======
+ int xpcs_get_an_mode(struct dw_xpcs *xpcs, phy_interface_t interface);
+ void xpcs_link_up(struct phylink_pcs *pcs, unsigned int mode,
+ 		  phy_interface_t interface, int speed, int duplex);
+ int xpcs_do_config(struct dw_xpcs *xpcs, phy_interface_t interface,
+ 		   unsigned int mode, const unsigned long *advertising);
+ void xpcs_get_interfaces(struct dw_xpcs *xpcs, unsigned long *interfaces);
+ int xpcs_config_eee(struct dw_xpcs *xpcs, int mult_fact_100ns,
++>>>>>>> fa9c562f9735 (net: make xpcs_do_config to accept advertising for pcs-xpcs and sja1105)
  		    int enable);
 -struct dw_xpcs *xpcs_create(struct mdio_device *mdiodev,
 -			    phy_interface_t interface);
 -void xpcs_destroy(struct dw_xpcs *xpcs);
 +struct mdio_xpcs_args *xpcs_create(struct mdio_device *mdiodev,
 +				   phy_interface_t interface);
 +void xpcs_destroy(struct mdio_xpcs_args *xpcs);
  
  #endif /* __LINUX_PCS_XPCS_H */
* Unmerged path drivers/net/dsa/sja1105/sja1105_main.c
* Unmerged path drivers/net/dsa/sja1105/sja1105_main.c
* Unmerged path drivers/net/pcs/pcs-xpcs.c
* Unmerged path include/linux/pcs/pcs-xpcs.h
