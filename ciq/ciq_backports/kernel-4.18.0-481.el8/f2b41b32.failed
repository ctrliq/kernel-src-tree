net/mlx5: Remove ipsec_ops function table

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-481.el8
commit-author Leon Romanovsky <leonro@nvidia.com>
commit f2b41b32cde8453a0a26875261f0e26809c2805a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-481.el8/f2b41b32.failed

There is only one IPsec implementation and ipsec_ops is not needed
at all in this situation. Together with removal of ipsec_ops, we can
drop the entry checks as these functions are called for IPsec devices
only.

Link: https://lore.kernel.org/r/bc8dd1c8a77b65dbf5e2cf92c813ffaca2505c5f.1649232994.git.leonro@nvidia.com
	Reviewed-by: Raed Salem <raeds@nvidia.com>
	Signed-off-by: Leon Romanovsky <leonro@nvidia.com>
(cherry picked from commit f2b41b32cde8453a0a26875261f0e26809c2805a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/accel/ipsec_offload.c
#	drivers/net/ethernet/mellanox/mlx5/core/en_accel/ipsec_offload.h
#	drivers/net/ethernet/mellanox/mlx5/core/main.c
#	include/linux/mlx5/driver.h
diff --cc drivers/net/ethernet/mellanox/mlx5/core/accel/ipsec_offload.c
index d6667d38e1de,f0f44bd95cc9..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/accel/ipsec_offload.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/accel/ipsec_offload.c
@@@ -366,20 -372,51 +360,70 @@@ change_sw_xfrm_attrs
  	return err;
  }
  
++<<<<<<< HEAD:drivers/net/ethernet/mellanox/mlx5/core/accel/ipsec_offload.c
 +static const struct mlx5_accel_ipsec_ops ipsec_offload_ops = {
 +	.device_caps = mlx5_ipsec_offload_device_caps,
 +	.create_hw_context = mlx5_ipsec_offload_create_sa_ctx,
 +	.free_hw_context = mlx5_ipsec_offload_delete_sa_ctx,
 +	.init = mlx5_ipsec_offload_init,
 +	.esp_create_xfrm = mlx5_ipsec_offload_esp_create_xfrm,
 +	.esp_destroy_xfrm = mlx5_ipsec_offload_esp_destroy_xfrm,
 +	.esp_modify_xfrm = mlx5_ipsec_offload_esp_modify_xfrm,
 +};
 +
 +const struct mlx5_accel_ipsec_ops *mlx5_ipsec_offload_ops(struct mlx5_core_dev *mdev)
 +{
 +	if (!mlx5_ipsec_offload_device_caps(mdev))
 +		return NULL;
 +
 +	return &ipsec_offload_ops;
++=======
+ void *mlx5_accel_esp_create_hw_context(struct mlx5_core_dev *mdev,
+ 				       struct mlx5_accel_esp_xfrm *xfrm,
+ 				       u32 *sa_handle)
+ {
+ 	__be32 saddr[4] = {}, daddr[4] = {};
+ 
+ 	if (!xfrm->attrs.is_ipv6) {
+ 		saddr[3] = xfrm->attrs.saddr.a4;
+ 		daddr[3] = xfrm->attrs.daddr.a4;
+ 	} else {
+ 		memcpy(saddr, xfrm->attrs.saddr.a6, sizeof(saddr));
+ 		memcpy(daddr, xfrm->attrs.daddr.a6, sizeof(daddr));
+ 	}
+ 
+ 	return mlx5_ipsec_offload_create_sa_ctx(mdev, xfrm, saddr, daddr,
+ 						xfrm->attrs.spi,
+ 						xfrm->attrs.is_ipv6, sa_handle);
+ }
+ 
+ void mlx5_accel_esp_free_hw_context(struct mlx5_core_dev *mdev, void *context)
+ {
+ 	mlx5_ipsec_offload_delete_sa_ctx(context);
+ }
+ 
+ struct mlx5_accel_esp_xfrm *
+ mlx5_accel_esp_create_xfrm(struct mlx5_core_dev *mdev,
+ 			   const struct mlx5_accel_esp_xfrm_attrs *attrs)
+ {
+ 	struct mlx5_accel_esp_xfrm *xfrm;
+ 
+ 	xfrm = mlx5_ipsec_offload_esp_create_xfrm(mdev, attrs);
+ 	if (IS_ERR(xfrm))
+ 		return xfrm;
+ 
+ 	xfrm->mdev = mdev;
+ 	return xfrm;
+ }
+ 
+ void mlx5_accel_esp_destroy_xfrm(struct mlx5_accel_esp_xfrm *xfrm)
+ {
+ 	mlx5_ipsec_offload_esp_destroy_xfrm(xfrm);
+ }
+ 
+ int mlx5_accel_esp_modify_xfrm(struct mlx5_accel_esp_xfrm *xfrm,
+ 			       const struct mlx5_accel_esp_xfrm_attrs *attrs)
+ {
+ 	return mlx5_ipsec_offload_esp_modify_xfrm(xfrm, attrs);
++>>>>>>> f2b41b32cde8 (net/mlx5: Remove ipsec_ops function table):drivers/net/ethernet/mellanox/mlx5/core/en_accel/ipsec_offload.c
  }
diff --cc drivers/net/ethernet/mellanox/mlx5/core/main.c
index 1883604be731,d504c8cb8f96..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/main.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/main.c
@@@ -1201,15 -1181,7 +1201,19 @@@ static int mlx5_load(struct mlx5_core_d
  		goto err_fpga_start;
  	}
  
++<<<<<<< HEAD
 +	mlx5_accel_ipsec_init(dev);
 +
 +	err = mlx5_accel_tls_init(dev);
 +	if (err) {
 +		mlx5_core_err(dev, "TLS device start failed %d\n", err);
 +		goto err_tls_start;
 +	}
 +
 +	err = mlx5_fs_core_init(dev);
++=======
+ 	err = mlx5_init_fs(dev);
++>>>>>>> f2b41b32cde8 (net/mlx5: Remove ipsec_ops function table)
  	if (err) {
  		mlx5_core_err(dev, "Failed to init flow steering\n");
  		goto err_fs;
@@@ -1254,11 -1226,8 +1258,14 @@@ err_ec
  err_vhca:
  	mlx5_vhca_event_stop(dev);
  err_set_hca:
 -	mlx5_cleanup_fs(dev);
 +	mlx5_fs_core_cleanup(dev);
  err_fs:
++<<<<<<< HEAD
 +	mlx5_accel_tls_cleanup(dev);
 +err_tls_start:
 +	mlx5_accel_ipsec_cleanup(dev);
++=======
++>>>>>>> f2b41b32cde8 (net/mlx5: Remove ipsec_ops function table)
  	mlx5_fpga_device_stop(dev);
  err_fpga_start:
  	mlx5_rsc_dump_cleanup(dev);
@@@ -1283,9 -1252,7 +1290,13 @@@ static void mlx5_unload(struct mlx5_cor
  	mlx5_ec_cleanup(dev);
  	mlx5_sf_hw_table_destroy(dev);
  	mlx5_vhca_event_stop(dev);
++<<<<<<< HEAD
 +	mlx5_fs_core_cleanup(dev);
 +	mlx5_accel_ipsec_cleanup(dev);
 +	mlx5_accel_tls_cleanup(dev);
++=======
+ 	mlx5_cleanup_fs(dev);
++>>>>>>> f2b41b32cde8 (net/mlx5: Remove ipsec_ops function table)
  	mlx5_fpga_device_stop(dev);
  	mlx5_rsc_dump_cleanup(dev);
  	mlx5_hv_vhca_cleanup(dev->hv_vhca);
diff --cc include/linux/mlx5/driver.h
index 9424503eb8d3,ff47d49d8be4..000000000000
--- a/include/linux/mlx5/driver.h
+++ b/include/linux/mlx5/driver.h
@@@ -778,9 -778,6 +778,12 @@@ struct mlx5_core_dev 
  #ifdef CONFIG_MLX5_FPGA
  	struct mlx5_fpga_device *fpga;
  #endif
++<<<<<<< HEAD
 +#ifdef CONFIG_MLX5_ACCEL
 +	const struct mlx5_accel_ipsec_ops *ipsec_ops;
 +#endif
++=======
++>>>>>>> f2b41b32cde8 (net/mlx5: Remove ipsec_ops function table)
  	struct mlx5_clock        clock;
  	struct mlx5_ib_clock_info  *clock_info;
  	struct mlx5_fw_tracer   *tracer;
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_accel/ipsec_offload.h
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/accel/ipsec_offload.c
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en_accel/ipsec_fs.h b/drivers/net/ethernet/mellanox/mlx5/core/en_accel/ipsec_fs.h
index 3389b3bb3ef8..500d38c724f7 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_accel/ipsec_fs.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_accel/ipsec_fs.h
@@ -9,7 +9,6 @@
 #include "accel/ipsec_offload.h"
 #include "en/fs.h"
 
-#ifdef CONFIG_MLX5_EN_IPSEC
 void mlx5e_accel_ipsec_fs_cleanup(struct mlx5e_priv *priv);
 int mlx5e_accel_ipsec_fs_init(struct mlx5e_priv *priv);
 int mlx5e_accel_ipsec_fs_add_rule(struct mlx5e_priv *priv,
@@ -19,8 +18,4 @@ int mlx5e_accel_ipsec_fs_add_rule(struct mlx5e_priv *priv,
 void mlx5e_accel_ipsec_fs_del_rule(struct mlx5e_priv *priv,
 				   struct mlx5_accel_esp_xfrm_attrs *attrs,
 				   struct mlx5e_ipsec_rule *ipsec_rule);
-#else
-static inline void mlx5e_accel_ipsec_fs_cleanup(struct mlx5e_priv *priv) {}
-static inline int mlx5e_accel_ipsec_fs_init(struct mlx5e_priv *priv) { return 0; }
-#endif
 #endif /* __MLX5_IPSEC_STEERING_H__ */
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_accel/ipsec_offload.h
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/main.c
* Unmerged path include/linux/mlx5/driver.h
