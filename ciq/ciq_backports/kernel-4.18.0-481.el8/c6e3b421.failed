net/mlx5: Merge various control path IPsec headers into one file

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-481.el8
commit-author Leon Romanovsky <leonro@nvidia.com>
commit c6e3b421c7079af67201351c9faff62613e06f40
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-481.el8/c6e3b421.failed

The mlx5 IPsec code has logical separation between code that operates
with XFRM objects (ipsec.c), HW objects (ipsec_offload.c), flow steering
logic (ipsec_fs.c) and data path (ipsec_rxtx.c).

Such separation makes sense for C-files, but isn't needed at all for
H-files as they are included in batch anyway.

	Reviewed-by: Raed Salem <raeds@nvidia.com>
	Signed-off-by: Leon Romanovsky <leonro@nvidia.com>
	Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
(cherry picked from commit c6e3b421c7079af67201351c9faff62613e06f40)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en/params.c
#	drivers/net/ethernet/mellanox/mlx5/core/en_accel/ipsec.h
#	drivers/net/ethernet/mellanox/mlx5/core/en_accel/ipsec_fs.c
#	drivers/net/ethernet/mellanox/mlx5/core/en_accel/ipsec_rxtx.c
#	drivers/net/ethernet/mellanox/mlx5/core/en_accel/ipsec_stats.c
#	drivers/net/ethernet/mellanox/mlx5/core/en_main.c
#	drivers/net/ethernet/mellanox/mlx5/core/en_rx.c
#	drivers/net/ethernet/mellanox/mlx5/core/main.c
#	include/linux/mlx5/accel.h
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en/params.c
index 5c4711be6fae,3c1edfa33aa7..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en/params.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en/params.c
@@@ -5,8 -5,7 +5,12 @@@
  #include "en/txrx.h"
  #include "en/port.h"
  #include "en_accel/en_accel.h"
++<<<<<<< HEAD
 +#include "accel/ipsec.h"
 +#include "fpga/ipsec.h"
++=======
+ #include "en_accel/ipsec.h"
++>>>>>>> c6e3b421c707 (net/mlx5: Merge various control path IPsec headers into one file)
  
  static bool mlx5e_rx_is_xdp(struct mlx5e_params *params,
  			    struct mlx5e_xsk_param *xsk)
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_accel/ipsec.h
index 45f71910d196,b438b0358c36..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_accel/ipsec.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_accel/ipsec.h
@@@ -40,8 -40,6 +40,11 @@@
  #include <net/xfrm.h>
  #include <linux/idr.h>
  
++<<<<<<< HEAD
 +#include "accel/ipsec.h"
 +
++=======
++>>>>>>> c6e3b421c707 (net/mlx5: Merge various control path IPsec headers into one file)
  #define MLX5E_IPSEC_SADB_RX_BITS 10
  #define MLX5E_IPSEC_ESN_SCOPE_MID 0x80000000L
  
@@@ -122,12 -178,30 +197,35 @@@ void mlx5e_ipsec_build_netdev(struct ml
  struct xfrm_state *mlx5e_ipsec_sadb_rx_lookup(struct mlx5e_ipsec *dev,
  					      unsigned int handle);
  
+ void mlx5e_accel_ipsec_fs_cleanup(struct mlx5e_ipsec *ipsec);
+ int mlx5e_accel_ipsec_fs_init(struct mlx5e_ipsec *ipsec);
+ int mlx5e_accel_ipsec_fs_add_rule(struct mlx5e_priv *priv,
+ 				  struct mlx5_accel_esp_xfrm_attrs *attrs,
+ 				  u32 ipsec_obj_id,
+ 				  struct mlx5e_ipsec_rule *ipsec_rule);
+ void mlx5e_accel_ipsec_fs_del_rule(struct mlx5e_priv *priv,
+ 				   struct mlx5_accel_esp_xfrm_attrs *attrs,
+ 				   struct mlx5e_ipsec_rule *ipsec_rule);
+ 
+ void *mlx5_accel_esp_create_hw_context(struct mlx5_core_dev *mdev,
+ 				       struct mlx5_accel_esp_xfrm *xfrm,
+ 				       u32 *sa_handle);
+ void mlx5_accel_esp_free_hw_context(struct mlx5_core_dev *mdev, void *context);
+ 
+ u32 mlx5_ipsec_device_caps(struct mlx5_core_dev *mdev);
+ 
+ struct mlx5_accel_esp_xfrm *
+ mlx5_accel_esp_create_xfrm(struct mlx5_core_dev *mdev,
+ 			   const struct mlx5_accel_esp_xfrm_attrs *attrs);
+ void mlx5_accel_esp_destroy_xfrm(struct mlx5_accel_esp_xfrm *xfrm);
+ void mlx5_accel_esp_modify_xfrm(struct mlx5_accel_esp_xfrm *xfrm,
+ 				const struct mlx5_accel_esp_xfrm_attrs *attrs);
  #else
 +
 +static inline void mlx5e_ipsec_build_inverse_table(void)
 +{
 +}
 +
  static inline int mlx5e_ipsec_init(struct mlx5e_priv *priv)
  {
  	return 0;
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_accel/ipsec_fs.c
index 16bbf5ba1ee4,96ab2e9d6f9a..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_accel/ipsec_fs.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_accel/ipsec_fs.c
@@@ -2,8 -2,9 +2,14 @@@
  /* Copyright (c) 2020, Mellanox Technologies inc. All rights reserved. */
  
  #include <linux/netdevice.h>
++<<<<<<< HEAD
 +#include "accel/ipsec_offload.h"
 +#include "ipsec_fs.h"
++=======
+ #include "en.h"
+ #include "en/fs.h"
+ #include "ipsec.h"
++>>>>>>> c6e3b421c707 (net/mlx5: Merge various control path IPsec headers into one file)
  #include "fs_core.h"
  
  #define NUM_IPSEC_FTE BIT(15)
@@@ -620,12 -613,9 +626,12 @@@ int mlx5e_accel_ipsec_fs_add_rule(struc
  }
  
  void mlx5e_accel_ipsec_fs_del_rule(struct mlx5e_priv *priv,
- 			     struct mlx5_accel_esp_xfrm_attrs *attrs,
- 			     struct mlx5e_ipsec_rule *ipsec_rule)
+ 		struct mlx5_accel_esp_xfrm_attrs *attrs,
+ 		struct mlx5e_ipsec_rule *ipsec_rule)
  {
 +	if (!priv->ipsec->rx_fs)
 +		return;
 +
  	if (attrs->action == MLX5_ACCEL_ESP_ACTION_DECRYPT)
  		rx_del_rule(priv, attrs, ipsec_rule);
  	else
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_accel/ipsec_rxtx.c
index db259092c77d,d30922e1b60f..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_accel/ipsec_rxtx.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_accel/ipsec_rxtx.c
@@@ -34,23 -34,10 +34,28 @@@
  #include <crypto/aead.h>
  #include <net/xfrm.h>
  #include <net/esp.h>
++<<<<<<< HEAD
 +#include "accel/ipsec_offload.h"
 +#include "en_accel/ipsec_rxtx.h"
 +#include "en_accel/ipsec.h"
 +#include "accel/accel.h"
++=======
+ #include "ipsec.h"
+ #include "ipsec_rxtx.h"
++>>>>>>> c6e3b421c707 (net/mlx5: Merge various control path IPsec headers into one file)
  #include "en.h"
  
 +enum {
 +	MLX5E_IPSEC_RX_SYNDROME_DECRYPTED = 0x11,
 +	MLX5E_IPSEC_RX_SYNDROME_AUTH_FAILED = 0x12,
 +	MLX5E_IPSEC_RX_SYNDROME_BAD_PROTO = 0x17,
 +};
 +
 +struct mlx5e_ipsec_rx_metadata {
 +	unsigned char   nexthdr;
 +	__be32		sa_handle;
 +} __packed;
 +
  enum {
  	MLX5E_IPSEC_TX_SYNDROME_OFFLOAD = 0x8,
  	MLX5E_IPSEC_TX_SYNDROME_OFFLOAD_WITH_LSO_TCP = 0x9,
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_accel/ipsec_stats.c
index 5cb936541b9e,9de84821dafb..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_accel/ipsec_stats.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_accel/ipsec_stats.c
@@@ -35,27 -35,7 +35,31 @@@
  #include <net/sock.h>
  
  #include "en.h"
++<<<<<<< HEAD
 +#include "accel/ipsec.h"
 +#include "fpga/sdk.h"
 +#include "en_accel/ipsec.h"
 +#include "fpga/ipsec.h"
 +
 +static const struct counter_desc mlx5e_ipsec_hw_stats_desc[] = {
 +	{ MLX5E_DECLARE_STAT(struct mlx5e_ipsec_stats, ipsec_dec_in_packets) },
 +	{ MLX5E_DECLARE_STAT(struct mlx5e_ipsec_stats, ipsec_dec_out_packets) },
 +	{ MLX5E_DECLARE_STAT(struct mlx5e_ipsec_stats, ipsec_dec_bypass_packets) },
 +	{ MLX5E_DECLARE_STAT(struct mlx5e_ipsec_stats, ipsec_enc_in_packets) },
 +	{ MLX5E_DECLARE_STAT(struct mlx5e_ipsec_stats, ipsec_enc_out_packets) },
 +	{ MLX5E_DECLARE_STAT(struct mlx5e_ipsec_stats, ipsec_enc_bypass_packets) },
 +	{ MLX5E_DECLARE_STAT(struct mlx5e_ipsec_stats, ipsec_dec_drop_packets) },
 +	{ MLX5E_DECLARE_STAT(struct mlx5e_ipsec_stats, ipsec_dec_auth_fail_packets) },
 +	{ MLX5E_DECLARE_STAT(struct mlx5e_ipsec_stats, ipsec_enc_drop_packets) },
 +	{ MLX5E_DECLARE_STAT(struct mlx5e_ipsec_stats, ipsec_add_sa_success) },
 +	{ MLX5E_DECLARE_STAT(struct mlx5e_ipsec_stats, ipsec_add_sa_fail) },
 +	{ MLX5E_DECLARE_STAT(struct mlx5e_ipsec_stats, ipsec_del_sa_success) },
 +	{ MLX5E_DECLARE_STAT(struct mlx5e_ipsec_stats, ipsec_del_sa_fail) },
 +	{ MLX5E_DECLARE_STAT(struct mlx5e_ipsec_stats, ipsec_cmd_drop) },
 +};
++=======
+ #include "ipsec.h"
++>>>>>>> c6e3b421c707 (net/mlx5: Merge various control path IPsec headers into one file)
  
  static const struct counter_desc mlx5e_ipsec_sw_stats_desc[] = {
  	{ MLX5E_DECLARE_STAT(struct mlx5e_ipsec_sw_stats, ipsec_rx_drop_sp_alloc) },
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_main.c
index 22f111312bee,d27986869b8b..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
@@@ -47,9 -47,7 +47,13 @@@
  #include "en_rep.h"
  #include "en_accel/ipsec.h"
  #include "en_accel/en_accel.h"
++<<<<<<< HEAD
 +#include "en_accel/tls.h"
 +#include "accel/ipsec.h"
 +#include "accel/tls.h"
++=======
+ #include "en_accel/ktls.h"
++>>>>>>> c6e3b421c707 (net/mlx5: Merge various control path IPsec headers into one file)
  #include "lib/vxlan.h"
  #include "lib/clock.h"
  #include "en/port.h"
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_rx.c
index 376a245dea13,fb11081001a0..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_rx.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_rx.c
@@@ -48,10 -48,9 +48,14 @@@
  #include "en_rep.h"
  #include "en/rep/tc.h"
  #include "ipoib/ipoib.h"
++<<<<<<< HEAD
 +#include "accel/ipsec.h"
 +#include "fpga/ipsec.h"
++=======
+ #include "en_accel/ipsec.h"
++>>>>>>> c6e3b421c707 (net/mlx5: Merge various control path IPsec headers into one file)
  #include "en_accel/ipsec_rxtx.h"
 -#include "en_accel/ktls_txrx.h"
 +#include "en_accel/tls_rxtx.h"
  #include "en/xdp.h"
  #include "en/xsk/rx.h"
  #include "en/health.h"
diff --cc drivers/net/ethernet/mellanox/mlx5/core/main.c
index e4de392627c6,35e48ef04845..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/main.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/main.c
@@@ -63,9 -62,7 +63,13 @@@
  #include "lib/mlx5.h"
  #include "lib/tout.h"
  #include "fpga/core.h"
++<<<<<<< HEAD
 +#include "fpga/ipsec.h"
 +#include "accel/ipsec.h"
 +#include "accel/tls.h"
++=======
+ #include "en_accel/ipsec.h"
++>>>>>>> c6e3b421c707 (net/mlx5: Merge various control path IPsec headers into one file)
  #include "lib/clock.h"
  #include "lib/vxlan.h"
  #include "lib/geneve.h"
* Unmerged path include/linux/mlx5/accel.h
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/accel/ipsec_offload.c b/drivers/net/ethernet/mellanox/mlx5/core/accel/ipsec_offload.c
index 3ae0fdee10d2..53568d0119ff 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/accel/ipsec_offload.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/accel/ipsec_offload.c
@@ -2,9 +2,8 @@
 /* Copyright (c) 2020, Mellanox Technologies inc. All rights reserved. */
 
 #include "mlx5_core.h"
-#include "ipsec_offload.h"
+#include "ipsec.h"
 #include "lib/mlx5.h"
-#include "en_accel/ipsec_fs.h"
 
 #define MLX5_IPSEC_DEV_BASIC_CAPS (MLX5_ACCEL_IPSEC_CAP_DEVICE | MLX5_ACCEL_IPSEC_CAP_IPV6 | \
 				   MLX5_ACCEL_IPSEC_CAP_LSO)
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en/params.c
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en_accel/ipsec.c b/drivers/net/ethernet/mellanox/mlx5/core/en_accel/ipsec.c
index 027d80b77b28..52245153f692 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_accel/ipsec.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_accel/ipsec.c
@@ -37,9 +37,8 @@
 #include <linux/netdevice.h>
 
 #include "en.h"
-#include "en_accel/ipsec.h"
-#include "en_accel/ipsec_rxtx.h"
-#include "en_accel/ipsec_fs.h"
+#include "ipsec.h"
+#include "ipsec_rxtx.h"
 
 static struct mlx5e_ipsec_sa_entry *to_ipsec_sa_entry(struct xfrm_state *x)
 {
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_accel/ipsec.h
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_accel/ipsec_fs.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_accel/ipsec_rxtx.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_accel/ipsec_stats.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_main.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_rx.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/main.c
* Unmerged path include/linux/mlx5/accel.h
