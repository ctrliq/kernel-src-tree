net/mlx5e: Add mdev to flow_steering struct

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-481.el8
commit-author Lama Kayal <lkayal@nvidia.com>
commit 7bb7071568e3faec8f5a59c52c15ff9ec879ddb7
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-481.el8/7bb70715.failed

Make flow_steering struct contain mlx5_core_dev such that
it becomes self contained and easier to decouple later on this series.
Let its values be initialized in mlx5e_fs_init().

	Signed-off-by: Lama Kayal <lkayal@nvidia.com>
	Reviewed-by: Tariq Toukan <tariqt@nvidia.com>
	Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
(cherry picked from commit 7bb7071568e3faec8f5a59c52c15ff9ec879ddb7)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en/fs.h
#	drivers/net/ethernet/mellanox/mlx5/core/en_fs.c
#	drivers/net/ethernet/mellanox/mlx5/core/en_main.c
#	drivers/net/ethernet/mellanox/mlx5/core/en_rep.c
#	drivers/net/ethernet/mellanox/mlx5/core/ipoib/ipoib.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en/fs.h
index 234e5292cdc3,64eb872d3f2f..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en/fs.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en/fs.h
@@@ -142,8 -143,8 +142,9 @@@ struct mlx5e_fs_any
  struct mlx5e_ptp_fs;
  
  struct mlx5e_flow_steering {
+ 	struct mlx5_core_dev		*mdev;
  	struct mlx5_flow_namespace      *ns;
 +	struct mlx5_flow_namespace      *egress_ns;
  #ifdef CONFIG_MLX5_EN_RXNFC
  	struct mlx5e_ethtool_steering   ethtool;
  #endif
@@@ -178,8 -179,9 +179,14 @@@ void mlx5e_disable_cvlan_filter(struct 
  int mlx5e_create_flow_steering(struct mlx5e_priv *priv);
  void mlx5e_destroy_flow_steering(struct mlx5e_priv *priv);
  
++<<<<<<< HEAD
 +int mlx5e_fs_init(struct mlx5e_priv *priv);
 +void mlx5e_fs_cleanup(struct mlx5e_priv *priv);
++=======
+ struct mlx5e_flow_steering *mlx5e_fs_init(const struct mlx5e_profile *profile,
+ 					  struct mlx5_core_dev *mdev);
+ void mlx5e_fs_cleanup(struct mlx5e_flow_steering *fs);
++>>>>>>> 7bb7071568e3 (net/mlx5e: Add mdev to flow_steering struct)
  
  int mlx5e_add_vlan_trap(struct mlx5e_priv *priv, int  trap_id, int tir_num);
  void mlx5e_remove_vlan_trap(struct mlx5e_priv *priv);
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_fs.c
index 3f8245301b0a,f25512d29b7c..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_fs.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_fs.c
@@@ -144,15 -143,15 +144,21 @@@ static int mlx5e_vport_context_update_v
  	int i;
  
  	list_size = 0;
 -	for_each_set_bit(vlan, priv->fs->vlan->active_cvlans, VLAN_N_VID)
 +	for_each_set_bit(vlan, priv->fs.vlan->active_cvlans, VLAN_N_VID)
  		list_size++;
  
- 	max_list_size = 1 << MLX5_CAP_GEN(priv->mdev, log_max_vlan_list);
+ 	max_list_size = 1 << MLX5_CAP_GEN(priv->fs->mdev, log_max_vlan_list);
  
  	if (list_size > max_list_size) {
++<<<<<<< HEAD
 +		netdev_warn(ndev,
 +			    "netdev vlans list size (%d) > (%d) max vport list size, some vlans will be dropped\n",
 +			    list_size, max_list_size);
++=======
+ 		mlx5_core_warn(priv->fs->mdev,
+ 			       "netdev vlans list size (%d) > (%d) max vport list size, some vlans will be dropped\n",
+ 			       list_size, max_list_size);
++>>>>>>> 7bb7071568e3 (net/mlx5e: Add mdev to flow_steering struct)
  		list_size = max_list_size;
  	}
  
@@@ -167,10 -166,10 +173,15 @@@
  		vlans[i++] = vlan;
  	}
  
- 	err = mlx5_modify_nic_vport_vlans(priv->mdev, vlans, list_size);
+ 	err = mlx5_modify_nic_vport_vlans(priv->fs->mdev, vlans, list_size);
  	if (err)
++<<<<<<< HEAD
 +		netdev_err(ndev, "Failed to modify vport vlans list err(%d)\n",
 +			   err);
++=======
+ 		mlx5_core_err(priv->fs->mdev, "Failed to modify vport vlans list err(%d)\n",
+ 			      err);
++>>>>>>> 7bb7071568e3 (net/mlx5e: Add mdev to flow_steering struct)
  
  	kvfree(vlans);
  	return err;
@@@ -251,7 -250,7 +262,11 @@@ static int __mlx5e_add_vlan_rule(struc
  	if (IS_ERR(*rule_p)) {
  		err = PTR_ERR(*rule_p);
  		*rule_p = NULL;
++<<<<<<< HEAD
 +		netdev_err(priv->netdev, "%s: add rule failed\n", __func__);
++=======
+ 		mlx5_core_err(priv->fs->mdev, "%s: add rule failed\n", __func__);
++>>>>>>> 7bb7071568e3 (net/mlx5e: Add mdev to flow_steering struct)
  	}
  
  	return err;
@@@ -362,12 -361,12 +377,18 @@@ int mlx5e_add_vlan_trap(struct mlx5e_pr
  	rule = mlx5e_add_trap_rule(ft, trap_id, tir_num);
  	if (IS_ERR(rule)) {
  		err = PTR_ERR(rule);
++<<<<<<< HEAD
 +		priv->fs.vlan->trap_rule = NULL;
 +		netdev_err(priv->netdev, "%s: add VLAN trap rule failed, err %d\n",
 +			   __func__, err);
++=======
+ 		priv->fs->vlan->trap_rule = NULL;
+ 		mlx5_core_err(priv->fs->mdev, "%s: add VLAN trap rule failed, err %d\n",
+ 			      __func__, err);
++>>>>>>> 7bb7071568e3 (net/mlx5e: Add mdev to flow_steering struct)
  		return err;
  	}
 -	priv->fs->vlan->trap_rule = rule;
 +	priv->fs.vlan->trap_rule = rule;
  	return 0;
  }
  
@@@ -388,12 -387,12 +409,18 @@@ int mlx5e_add_mac_trap(struct mlx5e_pri
  	rule = mlx5e_add_trap_rule(ft, trap_id, tir_num);
  	if (IS_ERR(rule)) {
  		err = PTR_ERR(rule);
++<<<<<<< HEAD
 +		priv->fs.l2.trap_rule = NULL;
 +		netdev_err(priv->netdev, "%s: add MAC trap rule failed, err %d\n",
 +			   __func__, err);
++=======
+ 		priv->fs->l2.trap_rule = NULL;
+ 		mlx5_core_err(priv->fs->mdev, "%s: add MAC trap rule failed, err %d\n",
+ 			      __func__, err);
++>>>>>>> 7bb7071568e3 (net/mlx5e: Add mdev to flow_steering struct)
  		return err;
  	}
 -	priv->fs->l2.trap_rule = rule;
 +	priv->fs.l2.trap_rule = rule;
  	return 0;
  }
  
@@@ -565,8 -564,8 +592,13 @@@ static void mlx5e_execute_l2_action(str
  	}
  
  	if (l2_err)
++<<<<<<< HEAD
 +		netdev_warn(priv->netdev, "MPFS, failed to %s mac %pM, err(%d)\n",
 +			    action == MLX5E_ACTION_ADD ? "add" : "del", mac_addr, l2_err);
++=======
+ 		mlx5_core_warn(priv->fs->mdev, "MPFS, failed to %s mac %pM, err(%d)\n",
+ 			       action == MLX5E_ACTION_ADD ? "add" : "del", mac_addr, l2_err);
++>>>>>>> 7bb7071568e3 (net/mlx5e: Add mdev to flow_steering struct)
  }
  
  static void mlx5e_sync_netdev_addr(struct mlx5e_priv *priv)
@@@ -628,19 -627,19 +660,25 @@@ static void mlx5e_vport_context_update_
  	int err;
  	int hi;
  
 -	size = is_uc ? 0 : (priv->fs->l2.broadcast_enabled ? 1 : 0);
 +	size = is_uc ? 0 : (priv->fs.l2.broadcast_enabled ? 1 : 0);
  	max_size = is_uc ?
- 		1 << MLX5_CAP_GEN(priv->mdev, log_max_current_uc_list) :
- 		1 << MLX5_CAP_GEN(priv->mdev, log_max_current_mc_list);
+ 		1 << MLX5_CAP_GEN(priv->fs->mdev, log_max_current_uc_list) :
+ 		1 << MLX5_CAP_GEN(priv->fs->mdev, log_max_current_mc_list);
  
 -	addr_list = is_uc ? priv->fs->l2.netdev_uc : priv->fs->l2.netdev_mc;
 +	addr_list = is_uc ? priv->fs.l2.netdev_uc : priv->fs.l2.netdev_mc;
  	mlx5e_for_each_hash_node(hn, tmp, addr_list, hi)
  		size++;
  
  	if (size > max_size) {
++<<<<<<< HEAD
 +		netdev_warn(priv->netdev,
 +			    "netdev %s list size (%d) > (%d) max vport list size, some addresses will be dropped\n",
 +			    is_uc ? "UC" : "MC", size, max_size);
++=======
+ 		mlx5_core_warn(priv->fs->mdev,
+ 			       "mdev %s list size (%d) > (%d) max vport list size, some addresses will be dropped\n",
+ 			      is_uc ? "UC" : "MC", size, max_size);
++>>>>>>> 7bb7071568e3 (net/mlx5e: Add mdev to flow_steering struct)
  		size = max_size;
  	}
  
@@@ -653,12 -652,12 +691,18 @@@
  		mlx5e_fill_addr_array(priv, list_type, addr_array, size);
  	}
  
- 	err = mlx5_modify_nic_vport_mac_list(priv->mdev, list_type, addr_array, size);
+ 	err = mlx5_modify_nic_vport_mac_list(priv->fs->mdev, list_type, addr_array, size);
  out:
  	if (err)
++<<<<<<< HEAD
 +		netdev_err(priv->netdev,
 +			   "Failed to modify vport %s list err(%d)\n",
 +			   is_uc ? "UC" : "MC", err);
++=======
+ 		mlx5_core_err(priv->fs->mdev,
+ 			      "Failed to modify vport %s list err(%d)\n",
+ 			      is_uc ? "UC" : "MC", err);
++>>>>>>> 7bb7071568e3 (net/mlx5e: Add mdev to flow_steering struct)
  	kfree(addr_array);
  }
  
@@@ -726,7 -725,7 +770,11 @@@ static int mlx5e_add_promisc_rule(struc
  	if (IS_ERR(*rule_p)) {
  		err = PTR_ERR(*rule_p);
  		*rule_p = NULL;
++<<<<<<< HEAD
 +		netdev_err(priv->netdev, "%s: add promiscuous rule failed\n", __func__);
++=======
+ 		mlx5_core_err(priv->fs->mdev, "%s: add promiscuous rule failed\n", __func__);
++>>>>>>> 7bb7071568e3 (net/mlx5e: Add mdev to flow_steering struct)
  	}
  	kvfree(spec);
  	return err;
@@@ -743,10 -742,10 +791,14 @@@ static int mlx5e_create_promisc_table(s
  	ft_attr.level = MLX5E_PROMISC_FT_LEVEL;
  	ft_attr.prio = MLX5E_NIC_PRIO;
  
 -	ft->t = mlx5_create_auto_grouped_flow_table(priv->fs->ns, &ft_attr);
 +	ft->t = mlx5_create_auto_grouped_flow_table(priv->fs.ns, &ft_attr);
  	if (IS_ERR(ft->t)) {
  		err = PTR_ERR(ft->t);
++<<<<<<< HEAD
 +		netdev_err(priv->netdev, "fail to create promisc table err=%d\n", err);
++=======
+ 		mlx5_core_err(priv->fs->mdev, "fail to create promisc table err=%d\n", err);
++>>>>>>> 7bb7071568e3 (net/mlx5e: Add mdev to flow_steering struct)
  		return err;
  	}
  
@@@ -806,8 -805,8 +858,13 @@@ void mlx5e_set_rx_mode_work(struct work
  		if (err)
  			enable_promisc = false;
  		if (!priv->channels.params.vlan_strip_disable && !err)
++<<<<<<< HEAD
 +			netdev_warn_once(ndev,
 +					 "S-tagged traffic will be dropped while C-tag vlan stripping is enabled\n");
++=======
+ 			mlx5_core_warn_once(priv->fs->mdev,
+ 					    "S-tagged traffic will be dropped while C-tag vlan stripping is enabled\n");
++>>>>>>> 7bb7071568e3 (net/mlx5e: Add mdev to flow_steering struct)
  	}
  	if (enable_allmulti)
  		mlx5e_add_l2_flow_rule(priv, &ea->allmulti, MLX5E_ALLMULTI);
@@@ -958,8 -957,8 +1015,13 @@@ static int mlx5e_add_l2_flow_rule(struc
  
  	ai->rule = mlx5_add_flow_rules(ft, spec, &flow_act, &dest, 1);
  	if (IS_ERR(ai->rule)) {
++<<<<<<< HEAD
 +		netdev_err(priv->netdev, "%s: add l2 rule(mac:%pM) failed\n",
 +			   __func__, mv_dmac);
++=======
+ 		mlx5_core_err(priv->fs->mdev, "%s: add l2 rule(mac:%pM) failed\n",
+ 			      __func__, mv_dmac);
++>>>>>>> 7bb7071568e3 (net/mlx5e: Add mdev to flow_steering struct)
  		err = PTR_ERR(ai->rule);
  		ai->rule = NULL;
  	}
@@@ -1228,9 -1227,9 +1290,9 @@@ static void mlx5e_destroy_vlan_table(st
  
  static void mlx5e_destroy_inner_ttc_table(struct mlx5e_priv *priv)
  {
- 	if (!mlx5_tunnel_inner_ft_supported(priv->mdev))
+ 	if (!mlx5_tunnel_inner_ft_supported(priv->fs->mdev))
  		return;
 -	mlx5_destroy_ttc_table(priv->fs->inner_ttc);
 +	mlx5_destroy_ttc_table(priv->fs.inner_ttc);
  }
  
  void mlx5e_destroy_ttc_table(struct mlx5e_priv *priv)
@@@ -1246,10 -1245,10 +1308,17 @@@ static int mlx5e_create_inner_ttc_table
  		return 0;
  
  	mlx5e_set_inner_ttc_params(priv, &ttc_params);
++<<<<<<< HEAD
 +	priv->fs.inner_ttc = mlx5_create_inner_ttc_table(priv->mdev,
 +							 &ttc_params);
 +	if (IS_ERR(priv->fs.inner_ttc))
 +		return PTR_ERR(priv->fs.inner_ttc);
++=======
+ 	priv->fs->inner_ttc = mlx5_create_inner_ttc_table(priv->fs->mdev,
+ 							  &ttc_params);
+ 	if (IS_ERR(priv->fs->inner_ttc))
+ 		return PTR_ERR(priv->fs->inner_ttc);
++>>>>>>> 7bb7071568e3 (net/mlx5e: Add mdev to flow_steering struct)
  	return 0;
  }
  
@@@ -1258,9 -1257,9 +1327,15 @@@ int mlx5e_create_ttc_table(struct mlx5e
  	struct ttc_params ttc_params = {};
  
  	mlx5e_set_ttc_params(priv, &ttc_params, true);
++<<<<<<< HEAD
 +	priv->fs.ttc = mlx5_create_ttc_table(priv->mdev, &ttc_params);
 +	if (IS_ERR(priv->fs.ttc))
 +		return PTR_ERR(priv->fs.ttc);
++=======
+ 	priv->fs->ttc = mlx5_create_ttc_table(priv->fs->mdev, &ttc_params);
+ 	if (IS_ERR(priv->fs->ttc))
+ 		return PTR_ERR(priv->fs->ttc);
++>>>>>>> 7bb7071568e3 (net/mlx5e: Add mdev to flow_steering struct)
  	return 0;
  }
  
@@@ -1268,45 -1267,44 +1343,74 @@@ int mlx5e_create_flow_steering(struct m
  {
  	int err;
  
++<<<<<<< HEAD
 +	priv->fs.ns = mlx5_get_flow_namespace(priv->mdev,
++=======
+ 	priv->fs->ns = mlx5_get_flow_namespace(priv->fs->mdev,
++>>>>>>> 7bb7071568e3 (net/mlx5e: Add mdev to flow_steering struct)
  					       MLX5_FLOW_NAMESPACE_KERNEL);
  
 -	if (!priv->fs->ns)
 +	if (!priv->fs.ns)
  		return -EOPNOTSUPP;
  
  	err = mlx5e_arfs_create_tables(priv);
  	if (err) {
++<<<<<<< HEAD
 +		netdev_err(priv->netdev, "Failed to create arfs tables, err=%d\n",
 +			   err);
++=======
+ 		mlx5_core_err(priv->fs->mdev, "Failed to create arfs tables, err=%d\n",
+ 			      err);
++>>>>>>> 7bb7071568e3 (net/mlx5e: Add mdev to flow_steering struct)
  		priv->netdev->hw_features &= ~NETIF_F_NTUPLE;
  	}
  
  	err = mlx5e_create_inner_ttc_table(priv);
  	if (err) {
++<<<<<<< HEAD
 +		netdev_err(priv->netdev,
 +			   "Failed to create inner ttc table, err=%d\n",
 +			   err);
++=======
+ 		mlx5_core_err(priv->fs->mdev,
+ 			      "Failed to create inner ttc table, err=%d\n", err);
++>>>>>>> 7bb7071568e3 (net/mlx5e: Add mdev to flow_steering struct)
  		goto err_destroy_arfs_tables;
  	}
  
  	err = mlx5e_create_ttc_table(priv);
  	if (err) {
++<<<<<<< HEAD
 +		netdev_err(priv->netdev, "Failed to create ttc table, err=%d\n",
 +			   err);
++=======
+ 		mlx5_core_err(priv->fs->mdev, "Failed to create ttc table, err=%d\n",
+ 			      err);
++>>>>>>> 7bb7071568e3 (net/mlx5e: Add mdev to flow_steering struct)
  		goto err_destroy_inner_ttc_table;
  	}
  
  	err = mlx5e_create_l2_table(priv);
  	if (err) {
++<<<<<<< HEAD
 +		netdev_err(priv->netdev, "Failed to create l2 table, err=%d\n",
 +			   err);
++=======
+ 		mlx5_core_err(priv->fs->mdev, "Failed to create l2 table, err=%d\n",
+ 			      err);
++>>>>>>> 7bb7071568e3 (net/mlx5e: Add mdev to flow_steering struct)
  		goto err_destroy_ttc_table;
  	}
  
  	err = mlx5e_create_vlan_table(priv);
  	if (err) {
++<<<<<<< HEAD
 +		netdev_err(priv->netdev, "Failed to create vlan table, err=%d\n",
 +			   err);
++=======
+ 		mlx5_core_err(priv->fs->mdev, "Failed to create vlan table, err=%d\n",
+ 			      err);
++>>>>>>> 7bb7071568e3 (net/mlx5e: Add mdev to flow_steering struct)
  		goto err_destroy_l2_table;
  	}
  
@@@ -1369,18 -1367,25 +1473,33 @@@ static void mlx5e_fs_tc_free(struct mlx
  	mlx5e_tc_table_free(fs->tc);
  }
  
++<<<<<<< HEAD
 +int mlx5e_fs_init(struct mlx5e_priv *priv)
++=======
+ struct mlx5e_flow_steering *mlx5e_fs_init(const struct mlx5e_profile *profile,
+ 					  struct mlx5_core_dev *mdev)
++>>>>>>> 7bb7071568e3 (net/mlx5e: Add mdev to flow_steering struct)
  {
 -	struct mlx5e_flow_steering *fs;
  	int err;
  
++<<<<<<< HEAD
 +	if (mlx5e_profile_feature_cap(priv->profile, FS_VLAN)) {
 +		err = mlx5e_fs_vlan_alloc(&priv->fs);
++=======
+ 	fs = kvzalloc(sizeof(*fs), GFP_KERNEL);
+ 	if (!fs)
+ 		goto err;
+ 
+ 	fs->mdev = mdev;
+ 	if (mlx5e_profile_feature_cap(profile, FS_VLAN)) {
+ 		err = mlx5e_fs_vlan_alloc(fs);
++>>>>>>> 7bb7071568e3 (net/mlx5e: Add mdev to flow_steering struct)
  		if (err)
 -			goto err_free_fs;
 +			goto err;
  	}
  
 -	if (mlx5e_profile_feature_cap(profile, FS_TC)) {
 -		err = mlx5e_fs_tc_alloc(fs);
 +	if (mlx5e_profile_feature_cap(priv->profile, FS_TC)) {
 +		err = mlx5e_fs_tc_alloc(&priv->fs);
  		if (err)
  			goto err_free_vlan;
  	}
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_main.c
index 945751d7ac68,55d4b8f8b3d3..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
@@@ -4958,8 -5020,9 +4958,14 @@@ static int mlx5e_nic_init(struct mlx5_c
  
  	mlx5e_timestamp_init(priv);
  
++<<<<<<< HEAD
 +	err = mlx5e_fs_init(priv);
 +	if (err) {
++=======
+ 	fs = mlx5e_fs_init(priv->profile, mdev);
+ 	if (!fs) {
+ 		err = -ENOMEM;
++>>>>>>> 7bb7071568e3 (net/mlx5e: Add mdev to flow_steering struct)
  		mlx5_core_err(mdev, "FS initialization failed, %d\n", err);
  		return err;
  	}
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_rep.c
index 0f4abe589eaa,3a4975bd46eb..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_rep.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_rep.c
@@@ -836,9 -836,17 +836,18 @@@ static int mlx5e_init_rep_rx(struct mlx
  	struct mlx5_core_dev *mdev = priv->mdev;
  	int err;
  
++<<<<<<< HEAD
++=======
+ 	priv->fs = mlx5e_fs_init(priv->profile, mdev);
+ 	if (!priv->fs) {
+ 		netdev_err(priv->netdev, "FS allocation failed\n");
+ 		return -ENOMEM;
+ 	}
+ 
++>>>>>>> 7bb7071568e3 (net/mlx5e: Add mdev to flow_steering struct)
  	priv->rx_res = mlx5e_rx_res_alloc();
 -	if (!priv->rx_res) {
 -		err = -ENOMEM;
 -		goto err_free_fs;
 -	}
 +	if (!priv->rx_res)
 +		return -ENOMEM;
  
  	mlx5e_init_l2_addr(priv);
  
diff --cc drivers/net/ethernet/mellanox/mlx5/core/ipoib/ipoib.c
index f037b0822cb1,5d5331b1535b..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/ipoib/ipoib.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/ipoib/ipoib.c
@@@ -364,9 -364,17 +364,18 @@@ static int mlx5i_init_rx(struct mlx5e_p
  	struct mlx5_core_dev *mdev = priv->mdev;
  	int err;
  
++<<<<<<< HEAD
++=======
+ 	priv->fs = mlx5e_fs_init(priv->profile, mdev);
+ 	if (!priv->fs) {
+ 		netdev_err(priv->netdev, "FS allocation failed\n");
+ 		return -ENOMEM;
+ 	}
+ 
++>>>>>>> 7bb7071568e3 (net/mlx5e: Add mdev to flow_steering struct)
  	priv->rx_res = mlx5e_rx_res_alloc();
 -	if (!priv->rx_res) {
 -		err = -ENOMEM;
 -		goto err_free_fs;
 -	}
 +	if (!priv->rx_res)
 +		return -ENOMEM;
  
  	mlx5e_create_q_counters(priv);
  
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en/fs.h
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_fs.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_main.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_rep.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/ipoib/ipoib.c
