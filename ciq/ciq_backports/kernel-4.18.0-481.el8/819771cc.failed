arm64: extable: consolidate definitions

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-481.el8
commit-author Mark Rutland <mark.rutland@arm.com>
commit 819771cc289226e392d5d45f1d162b47ace4eff6
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-481.el8/819771cc.failed

In subsequent patches we'll alter the structure and usage of struct
exception_table_entry. For inline assembly, we create these using the
`_ASM_EXTABLE()` CPP macro defined in <asm/uaccess.h>, and for plain
assembly code we use the `_asm_extable()` GAS macro defined in
<asm/assembler.h>, which are largely identical save for different
escaping and stringification requirements.

This patch moves the common definitions to a new <asm/asm-extable.h>
header, so that it's easier to keep the two in-sync, and to remove the
implication that these are only used for uaccess helpers (as e.g.
load_unaligned_zeropad() is only used on kernel memory, and depends upon
`_ASM_EXTABLE()`.

At the same time, a few minor modifications are made for clarity and in
preparation for subsequent patches:

* The structure creation is factored out into an `__ASM_EXTABLE_RAW()`
  macro. This will make it easier to support different fixup variants in
  subsequent patches without needing to update all users of
  `_ASM_EXTABLE()`, and makes it easier to see tha the CPP and GAS
  variants of the macros are structurally identical.

  For the CPP macro, the stringification of fields is left to the
  wrapper macro, `_ASM_EXTABLE()`, as in subsequent patches it will be
  necessary to stringify fields in wrapper macros to safely concatenate
  strings which cannot be token-pasted together in CPP.

* The fields of the structure are created separately on their own lines.
  This will make it easier to add/remove/modify individual fields
  clearly.

* Additional parentheses are added around the use of macro arguments in
  field definitions to avoid any potential problems with evaluation due
  to operator precedence, and to make errors upon misuse clearer.

* USER() is moved into <asm/asm-uaccess.h>, as it is not required by all
  assembly code, and is already refered to by comments in that file.

There should be no functional change as a result of this patch.

	Signed-off-by: Mark Rutland <mark.rutland@arm.com>
	Reviewed-by: Ard Biesheuvel <ardb@kernel.org>
	Cc: Catalin Marinas <catalin.marinas@arm.com>
	Cc: James Morse <james.morse@arm.com>
	Cc: Robin Murphy <robin.murphy@arm.com>
	Cc: Will Deacon <will@kernel.org>
Link: https://lore.kernel.org/r/20211019160219.5202-8-mark.rutland@arm.com
	Signed-off-by: Will Deacon <will@kernel.org>
(cherry picked from commit 819771cc289226e392d5d45f1d162b47ace4eff6)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/arm64/include/asm/asm-uaccess.h
#	arch/arm64/include/asm/assembler.h
#	arch/arm64/lib/clear_user.S
diff --cc arch/arm64/include/asm/asm-uaccess.h
index 35e6145e1402,0557af834e03..000000000000
--- a/arch/arm64/include/asm/asm-uaccess.h
+++ b/arch/arm64/include/asm/asm-uaccess.h
@@@ -2,7 -2,9 +2,13 @@@
  #ifndef __ASM_ASM_UACCESS_H
  #define __ASM_ASM_UACCESS_H
  
++<<<<<<< HEAD
 +#include <asm/alternative.h>
++=======
+ #include <asm/alternative-macros.h>
+ #include <asm/asm-extable.h>
+ #include <asm/assembler.h>
++>>>>>>> 819771cc2892 (arm64: extable: consolidate definitions)
  #include <asm/kernel-pgtable.h>
  #include <asm/mmu.h>
  #include <asm/sysreg.h>
@@@ -57,4 -58,38 +62,41 @@@ alternative_else_nop_endi
  	.macro	uaccess_ttbr0_enable, tmp1, tmp2, tmp3
  	.endm
  #endif
++<<<<<<< HEAD
++=======
+ 
+ #define USER(l, x...)				\
+ 9999:	x;					\
+ 	_asm_extable	9999b, l
+ 
+ /*
+  * Generate the assembly for LDTR/STTR with exception table entries.
+  * This is complicated as there is no post-increment or pair versions of the
+  * unprivileged instructions, and USER() only works for single instructions.
+  */
+ 	.macro user_ldp l, reg1, reg2, addr, post_inc
+ 8888:		ldtr	\reg1, [\addr];
+ 8889:		ldtr	\reg2, [\addr, #8];
+ 		add	\addr, \addr, \post_inc;
+ 
+ 		_asm_extable	8888b,\l;
+ 		_asm_extable	8889b,\l;
+ 	.endm
+ 
+ 	.macro user_stp l, reg1, reg2, addr, post_inc
+ 8888:		sttr	\reg1, [\addr];
+ 8889:		sttr	\reg2, [\addr, #8];
+ 		add	\addr, \addr, \post_inc;
+ 
+ 		_asm_extable	8888b,\l;
+ 		_asm_extable	8889b,\l;
+ 	.endm
+ 
+ 	.macro user_ldst l, inst, reg, addr, post_inc
+ 8888:		\inst		\reg, [\addr];
+ 		add		\addr, \addr, \post_inc;
+ 
+ 		_asm_extable	8888b,\l;
+ 	.endm
++>>>>>>> 819771cc2892 (arm64: extable: consolidate definitions)
  #endif
diff --cc arch/arm64/include/asm/assembler.h
index 88c679fefb09,ec67480d55fb..000000000000
--- a/arch/arm64/include/asm/assembler.h
+++ b/arch/arm64/include/asm/assembler.h
@@@ -25,6 -14,9 +25,12 @@@
  
  #include <asm-generic/export.h>
  
++<<<<<<< HEAD
++=======
+ #include <asm/alternative.h>
+ #include <asm/asm-bug.h>
+ #include <asm/asm-extable.h>
++>>>>>>> 819771cc2892 (arm64: extable: consolidate definitions)
  #include <asm/asm-offsets.h>
  #include <asm/cpufeature.h>
  #include <asm/cputype.h>
@@@ -131,27 -131,6 +137,30 @@@ alternative_endi
  	.endm
  
  /*
++<<<<<<< HEAD
 + * Clear Branch History instruction
 + */
 +	.macro clearbhb
 +	hint	#22
 +	.endm
 +
 +/*
 + * Emit an entry into the exception table
 + */
 +	.macro		_asm_extable, from, to
 +	.pushsection	__ex_table, "a"
 +	.align		3
 +	.long		(\from - .), (\to - .)
 +	.popsection
 +	.endm
 +
 +#define USER(l, x...)				\
 +9999:	x;					\
 +	_asm_extable	9999b, l
 +
 +/*
++=======
++>>>>>>> 819771cc2892 (arm64: extable: consolidate definitions)
   * Register aliases.
   */
  lr	.req	x30		// link register
diff --cc arch/arm64/lib/clear_user.S
index 00c3bf2b1272,a5a5f5b97b17..000000000000
--- a/arch/arm64/lib/clear_user.S
+++ b/arch/arm64/lib/clear_user.S
@@@ -1,24 -1,10 +1,28 @@@
 -/* SPDX-License-Identifier: GPL-2.0-only */
  /*
 - * Copyright (C) 2021 Arm Ltd.
 + * Based on arch/arm/lib/clear_user.S
 + *
 + * Copyright (C) 2012 ARM Ltd.
 + *
 + * This program is free software; you can redistribute it and/or modify
 + * it under the terms of the GNU General Public License version 2 as
 + * published by the Free Software Foundation.
 + *
 + * This program is distributed in the hope that it will be useful,
 + * but WITHOUT ANY WARRANTY; without even the implied warranty of
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 + * GNU General Public License for more details.
 + *
 + * You should have received a copy of the GNU General Public License
 + * along with this program.  If not, see <http://www.gnu.org/licenses/>.
   */
 -
  #include <linux/linkage.h>
++<<<<<<< HEAD
 +
  #include <asm/asm-uaccess.h>
 +#include <asm/assembler.h>
++=======
++#include <asm/asm-uaccess.h>
++>>>>>>> 819771cc2892 (arm64: extable: consolidate definitions)
  
  	.text
  
diff --git a/arch/arm64/include/asm/asm-extable.h b/arch/arm64/include/asm/asm-extable.h
new file mode 100644
index 000000000000..986b4c0d4792
--- /dev/null
+++ b/arch/arm64/include/asm/asm-extable.h
@@ -0,0 +1,48 @@
+/* SPDX-License-Identifier: GPL-2.0-only */
+#ifndef __ASM_ASM_EXTABLE_H
+#define __ASM_ASM_EXTABLE_H
+
+#ifdef __ASSEMBLY__
+
+#define __ASM_EXTABLE_RAW(insn, fixup)		\
+	.pushsection	__ex_table, "a";	\
+	.align		3;			\
+	.long		((insn) - .);		\
+	.long		((fixup) - .);		\
+	.popsection;
+
+/*
+ * Create an exception table entry for `insn`, which will branch to `fixup`
+ * when an unhandled fault is taken.
+ */
+	.macro		_asm_extable, insn, fixup
+	__ASM_EXTABLE_RAW(\insn, \fixup)
+	.endm
+
+/*
+ * Create an exception table entry for `insn` if `fixup` is provided. Otherwise
+ * do nothing.
+ */
+	.macro		_cond_extable, insn, fixup
+	.ifnc		\fixup,
+	_asm_extable	\insn, \fixup
+	.endif
+	.endm
+
+#else /* __ASSEMBLY__ */
+
+#include <linux/stringify.h>
+
+#define __ASM_EXTABLE_RAW(insn, fixup)		\
+	".pushsection	__ex_table, \"a\"\n"	\
+	".align		3\n"			\
+	".long		((" insn ") - .)\n"	\
+	".long		((" fixup ") - .)\n"	\
+	".popsection\n"
+
+#define _ASM_EXTABLE(insn, fixup) \
+	__ASM_EXTABLE_RAW(#insn, #fixup)
+
+#endif /* __ASSEMBLY__ */
+
+#endif /* __ASM_ASM_EXTABLE_H */
* Unmerged path arch/arm64/include/asm/asm-uaccess.h
* Unmerged path arch/arm64/include/asm/assembler.h
diff --git a/arch/arm64/include/asm/uaccess.h b/arch/arm64/include/asm/uaccess.h
index 635c0d699eec..ea49217b0a97 100644
--- a/arch/arm64/include/asm/uaccess.h
+++ b/arch/arm64/include/asm/uaccess.h
@@ -29,6 +29,7 @@
 #include <linux/kasan-checks.h>
 #include <linux/string.h>
 
+#include <asm/asm-extable.h>
 #include <asm/cpufeature.h>
 #include <asm/ptrace.h>
 #include <asm/memory.h>
@@ -107,12 +108,6 @@ static inline unsigned long __range_ok(const void __user *addr, unsigned long si
 #define access_ok(addr, size)	__range_ok(addr, size)
 #define user_addr_max			get_fs
 
-#define _ASM_EXTABLE(from, to)						\
-	"	.pushsection	__ex_table, \"a\"\n"			\
-	"	.align		3\n"					\
-	"	.long		(" #from " - .), (" #to " - .)\n"	\
-	"	.popsection\n"
-
 /*
  * User access enabling/disabling.
  */
* Unmerged path arch/arm64/lib/clear_user.S
