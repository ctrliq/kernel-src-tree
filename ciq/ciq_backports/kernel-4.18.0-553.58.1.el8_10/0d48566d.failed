s390/pci: rename lock member in struct zpci_dev

jira LE-3467
Rebuild_History Non-Buildable kernel-4.18.0-553.58.1.el8_10
commit-author Gerd Bayer <gbayer@linux.ibm.com>
commit 0d48566d4b58946c8e1b0baac0347616060a81c9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-553.58.1.el8_10/0d48566d.failed

Since this guards only the Function Measurement Block, rename from
generic lock to fmb_lock in preparation to introduce another lock
that guards the state member

	Signed-off-by: Gerd Bayer <gbayer@linux.ibm.com>
	Reviewed-by: Niklas Schnelle <schnelle@linux.ibm.com>
	Signed-off-by: Heiko Carstens <hca@linux.ibm.com>
(cherry picked from commit 0d48566d4b58946c8e1b0baac0347616060a81c9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/s390/pci/pci.c
diff --cc arch/s390/pci/pci.c
index 661c4e000c5b,dff609e8a2a0..000000000000
--- a/arch/s390/pci/pci.c
+++ b/arch/s390/pci/pci.c
@@@ -885,33 -805,10 +885,38 @@@ struct zpci_dev *zpci_create_device(u3
  		goto error;
  	zdev->state =  state;
  
++<<<<<<< HEAD
 +	mutex_init(&zdev->lock);
++=======
+ 	kref_init(&zdev->kref);
+ 	mutex_init(&zdev->fmb_lock);
++>>>>>>> 0d48566d4b58 (s390/pci: rename lock member in struct zpci_dev)
  	mutex_init(&zdev->kzdev_lock);
  
 +	return zdev;
 +
 +error:
 +	zpci_dbg(0, "crt fid:%x, rc:%d\n", fid, rc);
 +	kfree(zdev);
 +	return ERR_PTR(rc);
 +}
 +
 +/**
 + * zpci_add_device() - Add a previously created zPCI device to the zPCI subsystem
 + * @zdev: The zPCI device to be added
 + *
 + * A struct zpci_dev is added to the zPCI subsystem and to a virtual PCI bus creating
 + * a new one as necessary. A hotplug slot is created and events start to be handled.
 + * If successful from this point on zpci_zdev_get() and zpci_zdev_put() must be used.
 + * If adding the struct zpci_dev fails the device was not added and should be freed.
 + *
 + * Return: 0 on success, or an error code otherwise
 + */
 +int zpci_add_device(struct zpci_dev *zdev)
 +{
 +	int rc;
 +
 +	zpci_dbg(1, "add fid:%x, fh:%x, c:%d\n", zdev->fid, zdev->fh, zdev->state);
  	rc = zpci_init_iommu(zdev);
  	if (rc)
  		goto error;
diff --git a/arch/s390/include/asm/pci.h b/arch/s390/include/asm/pci.h
index 6652630be19e..820b3fe33129 100644
--- a/arch/s390/include/asm/pci.h
+++ b/arch/s390/include/asm/pci.h
@@ -146,7 +146,6 @@ struct zpci_dev {
 	u8		reserved	: 1;
 	unsigned int	devfn;		/* DEVFN part of the RID*/
 
-	struct mutex lock;
 	u8 pfip[CLP_PFIP_NR_SEGMENTS];	/* pci function internal path */
 	u32 uid;			/* user defined id */
 	u8 util_str[CLP_UTIL_STR_LEN];	/* utility string */
@@ -182,6 +181,7 @@ struct zpci_dev {
 	u64		dma_mask;	/* DMA address space mask */
 
 	/* Function measurement block */
+	struct mutex fmb_lock;
 	struct zpci_fmb *fmb;
 	u16		fmb_update;	/* update interval */
 	u16		fmb_length;
* Unmerged path arch/s390/pci/pci.c
diff --git a/arch/s390/pci/pci_debug.c b/arch/s390/pci/pci_debug.c
index 2dec8136cc16..ddb539044a69 100644
--- a/arch/s390/pci/pci_debug.c
+++ b/arch/s390/pci/pci_debug.c
@@ -85,9 +85,9 @@ static int pci_perf_show(struct seq_file *m, void *v)
 	if (!zdev)
 		return 0;
 
-	mutex_lock(&zdev->lock);
+	mutex_lock(&zdev->fmb_lock);
 	if (!zdev->fmb) {
-		mutex_unlock(&zdev->lock);
+		mutex_unlock(&zdev->fmb_lock);
 		seq_puts(m, "FMB statistics disabled\n");
 		return 0;
 	}
@@ -124,7 +124,7 @@ static int pci_perf_show(struct seq_file *m, void *v)
 	}
 
 	pci_sw_counter_show(m);
-	mutex_unlock(&zdev->lock);
+	mutex_unlock(&zdev->fmb_lock);
 	return 0;
 }
 
@@ -142,7 +142,7 @@ static ssize_t pci_perf_seq_write(struct file *file, const char __user *ubuf,
 	if (rc)
 		return rc;
 
-	mutex_lock(&zdev->lock);
+	mutex_lock(&zdev->fmb_lock);
 	switch (val) {
 	case 0:
 		rc = zpci_fmb_disable_device(zdev);
@@ -151,7 +151,7 @@ static ssize_t pci_perf_seq_write(struct file *file, const char __user *ubuf,
 		rc = zpci_fmb_enable_device(zdev);
 		break;
 	}
-	mutex_unlock(&zdev->lock);
+	mutex_unlock(&zdev->fmb_lock);
 	return rc ? rc : count;
 }
 
