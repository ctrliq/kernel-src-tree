s390/pci: Allow re-add of a reserved but not yet removed device

jira LE-3467
Rebuild_History Non-Buildable kernel-4.18.0-553.58.1.el8_10
commit-author Niklas Schnelle <schnelle@linux.ibm.com>
commit 4b1815a52d7eb03b3e0e6742c6728bc16a4b2d1d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-553.58.1.el8_10/4b1815a5.failed

The architecture assumes that PCI functions can be removed synchronously
as PCI events are processed. This however clashes with the reference
counting of struct pci_dev which allows device drivers to hold on to a
struct pci_dev reference even as the underlying device is removed. To
bridge this gap commit 2a671f77ee49 ("s390/pci: fix use after free of
zpci_dev") keeps the struct zpci_dev in ZPCI_FN_STATE_RESERVED state
until common code releases the struct pci_dev. Only when all references
are dropped, the struct zpci_dev can be removed and freed.

Later commit a46044a92add ("s390/pci: fix zpci_zdev_put() on reserve")
moved the deletion of the struct zpci_dev from the zpci_list in
zpci_release_device() to the point where the device is reserved. This
was done to prevent handling events for a device that is already being
removed, e.g. when the platform generates both PCI event codes 0x304
and 0x308. In retrospect, deletion from the zpci_list in the release
function without holding the zpci_list_lock was also racy.

A side effect of this handling is that if the underlying device
re-appears while the struct zpci_dev is in the ZPCI_FN_STATE_RESERVED
state, the new and old instances of the struct zpci_dev and/or struct
pci_dev may clash. For example when trying to create the IOMMU sysfs
files for the new instance. In this case, re-adding the new instance is
aborted. The old instance is removed, and the device will remain absent
until the platform issues another event.

Fix this by allowing the struct zpci_dev to be brought back up right
until it is finally removed. To this end also keep the struct zpci_dev
in the zpci_list until it is finally released when all references have
been dropped.

Deletion from the zpci_list from within the release function is made
safe by using kref_put_lock() with the zpci_list_lock. This ensures that
the releasing code holds the last reference.

	Cc: stable@vger.kernel.org
Fixes: a46044a92add ("s390/pci: fix zpci_zdev_put() on reserve")
	Reviewed-by: Gerd Bayer <gbayer@linux.ibm.com>
	Tested-by: Gerd Bayer <gbayer@linux.ibm.com>
	Signed-off-by: Niklas Schnelle <schnelle@linux.ibm.com>
	Signed-off-by: Heiko Carstens <hca@linux.ibm.com>
(cherry picked from commit 4b1815a52d7eb03b3e0e6742c6728bc16a4b2d1d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/s390/pci/pci.c
diff --cc arch/s390/pci/pci.c
index 661c4e000c5b,4602abd0c6f1..000000000000
--- a/arch/s390/pci/pci.c
+++ b/arch/s390/pci/pci.c
@@@ -1020,44 -927,50 +1027,79 @@@ int zpci_deconfigure_device(struct zpci
  	return 0;
  }
  
++<<<<<<< HEAD
++=======
+ /**
+  * zpci_device_reserved() - Mark device as reserved
+  * @zdev: the zpci_dev that was reserved
+  *
+  * Handle the case that a given zPCI function was reserved by another system.
+  */
+ void zpci_device_reserved(struct zpci_dev *zdev)
+ {
+ 	lockdep_assert_held(&zdev->state_lock);
+ 	/* We may declare the device reserved multiple times */
+ 	if (zdev->state == ZPCI_FN_STATE_RESERVED)
+ 		return;
+ 	zdev->state = ZPCI_FN_STATE_RESERVED;
+ 	zpci_dbg(3, "rsv fid:%x\n", zdev->fid);
+ 	/*
+ 	 * The underlying device is gone. Allow the zdev to be freed
+ 	 * as soon as all other references are gone by accounting for
+ 	 * the removal as a dropped reference.
+ 	 */
+ 	zpci_zdev_put(zdev);
+ }
+ 
++>>>>>>> 4b1815a52d7e (s390/pci: Allow re-add of a reserved but not yet removed device)
  void zpci_release_device(struct kref *kref)
  {
  	struct zpci_dev *zdev = container_of(kref, struct zpci_dev, kref);
 +	int ret;
  
++<<<<<<< HEAD
 +	if (zdev->zbus->bus)
 +		zpci_bus_remove_device(zdev, false);
++=======
+ 	WARN_ON(zdev->state != ZPCI_FN_STATE_RESERVED);
+ 	/*
+ 	 * We already hold zpci_list_lock thanks to kref_put_lock().
+ 	 * This makes sure no new reference can be taken from the list.
+ 	 */
+ 	list_del(&zdev->entry);
+ 	spin_unlock(&zpci_list_lock);
++>>>>>>> 4b1815a52d7e (s390/pci: Allow re-add of a reserved but not yet removed device)
  
 -	if (zdev->has_hp_slot)
 -		zpci_exit_slot(zdev);
 +	if (zdev->dma_table)
 +		zpci_dma_exit_device(zdev);
 +	if (zdev_enabled(zdev))
 +		zpci_disable_device(zdev);
  
 -	if (zdev->has_resources)
 -		zpci_cleanup_bus_resources(zdev);
 +	switch (zdev->state) {
 +	case ZPCI_FN_STATE_CONFIGURED:
 +		ret = sclp_pci_deconfigure(zdev->fid);
 +		zpci_dbg(3, "deconf fid:%x, rc:%d\n", zdev->fid, ret);
 +		fallthrough;
 +	case ZPCI_FN_STATE_STANDBY:
 +		if (zdev->has_hp_slot)
 +			zpci_exit_slot(zdev);
 +		spin_lock(&zpci_list_lock);
 +		list_del(&zdev->entry);
 +		spin_unlock(&zpci_list_lock);
 +		zpci_dbg(3, "rsv fid:%x\n", zdev->fid);
 +		fallthrough;
 +	case ZPCI_FN_STATE_RESERVED:
 +		if (zdev->has_resources)
 +			zpci_cleanup_bus_resources(zdev);
 +		zpci_bus_device_unregister(zdev);
 +		zpci_destroy_iommu(zdev);
 +		/* fallthrough */
 +	default:
 +		break;
 +	}
  
 -	zpci_bus_device_unregister(zdev);
 -	zpci_destroy_iommu(zdev);
  	zpci_dbg(3, "rem fid:%x\n", zdev->fid);
 -	kfree_rcu(zdev, rcu);
 +	kfree(zdev);
  }
  
  int zpci_report_error(struct pci_dev *pdev,
* Unmerged path arch/s390/pci/pci.c
diff --git a/arch/s390/pci/pci_bus.h b/arch/s390/pci/pci_bus.h
index af9f0ac79a1b..3febb3b297c0 100644
--- a/arch/s390/pci/pci_bus.h
+++ b/arch/s390/pci/pci_bus.h
@@ -17,11 +17,8 @@ int zpci_bus_scan_device(struct zpci_dev *zdev);
 void zpci_bus_remove_device(struct zpci_dev *zdev, bool set_error);
 
 void zpci_release_device(struct kref *kref);
-static inline void zpci_zdev_put(struct zpci_dev *zdev)
-{
-	if (zdev)
-		kref_put(&zdev->kref, zpci_release_device);
-}
+
+void zpci_zdev_put(struct zpci_dev *zdev);
 
 static inline void zpci_zdev_get(struct zpci_dev *zdev)
 {
diff --git a/arch/s390/pci/pci_event.c b/arch/s390/pci/pci_event.c
index dcebe4118195..9491d3e7a312 100644
--- a/arch/s390/pci/pci_event.c
+++ b/arch/s390/pci/pci_event.c
@@ -314,6 +314,22 @@ static void zpci_event_hard_deconfigured(struct zpci_dev *zdev, u32 fh)
 	zdev->state = ZPCI_FN_STATE_STANDBY;
 }
 
+static void zpci_event_reappear(struct zpci_dev *zdev)
+{
+	lockdep_assert_held(&zdev->state_lock);
+	/*
+	 * The zdev is in the reserved state. This means that it was presumed to
+	 * go away but there are still undropped references. Now, the platform
+	 * announced its availability again. Bring back the lingering zdev
+	 * to standby. This is safe because we hold a temporary reference
+	 * now so that it won't go away. Account for the re-appearance of the
+	 * underlying device by incrementing the reference count.
+	 */
+	zdev->state = ZPCI_FN_STATE_STANDBY;
+	zpci_zdev_get(zdev);
+	zpci_dbg(1, "rea fid:%x, fh:%x\n", zdev->fid, zdev->fh);
+}
+
 static void __zpci_event_availability(struct zpci_ccdf_avail *ccdf)
 {
 	struct zpci_dev *zdev = get_zdev_by_fid(ccdf->fid);
@@ -333,8 +349,10 @@ static void __zpci_event_availability(struct zpci_ccdf_avail *ccdf)
 				break;
 			}
 		} else {
+			if (zdev->state == ZPCI_FN_STATE_RESERVED)
+				zpci_event_reappear(zdev);
 			/* the configuration request may be stale */
-			if (zdev->state != ZPCI_FN_STATE_STANDBY)
+			else if (zdev->state != ZPCI_FN_STATE_STANDBY)
 				break;
 			zdev->state = ZPCI_FN_STATE_CONFIGURED;
 		}
@@ -350,6 +368,8 @@ static void __zpci_event_availability(struct zpci_ccdf_avail *ccdf)
 				break;
 			}
 		} else {
+			if (zdev->state == ZPCI_FN_STATE_RESERVED)
+				zpci_event_reappear(zdev);
 			zpci_update_fh(zdev, ccdf->fh);
 		}
 		break;
