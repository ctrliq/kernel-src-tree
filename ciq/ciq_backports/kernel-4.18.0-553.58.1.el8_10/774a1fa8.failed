s390/pci: Serialize device addition and removal

jira LE-3467
Rebuild_History Non-Buildable kernel-4.18.0-553.58.1.el8_10
commit-author Niklas Schnelle <schnelle@linux.ibm.com>
commit 774a1fa880bc949d88b5ddec9494a13be733dfa8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-553.58.1.el8_10/774a1fa8.failed

Prior changes ensured that when zpci_release_device() is called and it
removed the zdev from the zpci_list this instance can not be found via
the zpci_list anymore even while allowing re-add of reserved devices.
This only accounts for the overall lifetime and zpci_list addition and
removal, it does not yet prevent concurrent add of a new instance for
the same underlying device. Such concurrent add would subsequently cause
issues such as attempted re-use of the same IOMMU sysfs directory and is
generally undesired.

Introduce a new zpci_add_remove_lock mutex to serialize adding a new
device with removal. Together this ensures that if a struct zpci_dev is
not found in the zpci_list it was either already removed and torn down,
or its removal and tear down is in progress with the
zpci_add_remove_lock held.

	Cc: stable@vger.kernel.org
Fixes: a46044a92add ("s390/pci: fix zpci_zdev_put() on reserve")
	Reviewed-by: Gerd Bayer <gbayer@linux.ibm.com>
	Tested-by: Gerd Bayer <gbayer@linux.ibm.com>
	Signed-off-by: Niklas Schnelle <schnelle@linux.ibm.com>
	Signed-off-by: Heiko Carstens <hca@linux.ibm.com>
(cherry picked from commit 774a1fa880bc949d88b5ddec9494a13be733dfa8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/s390/pci/pci.c
diff --cc arch/s390/pci/pci.c
index 661c4e000c5b,cd6676c2d602..000000000000
--- a/arch/s390/pci/pci.c
+++ b/arch/s390/pci/pci.c
@@@ -67,6 -71,15 +68,18 @@@ EXPORT_SYMBOL_GPL(zpci_aipb)
  struct airq_iv *zpci_aif_sbv;
  EXPORT_SYMBOL_GPL(zpci_aif_sbv);
  
++<<<<<<< HEAD
++=======
+ void zpci_zdev_put(struct zpci_dev *zdev)
+ {
+ 	if (!zdev)
+ 		return;
+ 	mutex_lock(&zpci_add_remove_lock);
+ 	kref_put_lock(&zdev->kref, zpci_release_device, &zpci_list_lock);
+ 	mutex_unlock(&zpci_add_remove_lock);
+ }
+ 
++>>>>>>> 774a1fa880bc (s390/pci: Serialize device addition and removal)
  struct zpci_dev *get_zdev_by_fid(u32 fid)
  {
  	struct zpci_dev *tmp, *zdev = NULL;
@@@ -1023,41 -936,48 +1039,52 @@@ int zpci_deconfigure_device(struct zpci
  void zpci_release_device(struct kref *kref)
  {
  	struct zpci_dev *zdev = container_of(kref, struct zpci_dev, kref);
 +	int ret;
  
++<<<<<<< HEAD
 +	if (zdev->zbus->bus)
 +		zpci_bus_remove_device(zdev, false);
++=======
+ 	lockdep_assert_held(&zpci_add_remove_lock);
+ 	WARN_ON(zdev->state != ZPCI_FN_STATE_RESERVED);
+ 	/*
+ 	 * We already hold zpci_list_lock thanks to kref_put_lock().
+ 	 * This makes sure no new reference can be taken from the list.
+ 	 */
+ 	list_del(&zdev->entry);
+ 	spin_unlock(&zpci_list_lock);
++>>>>>>> 774a1fa880bc (s390/pci: Serialize device addition and removal)
  
 -	if (zdev->has_hp_slot)
 -		zpci_exit_slot(zdev);
 +	if (zdev->dma_table)
 +		zpci_dma_exit_device(zdev);
 +	if (zdev_enabled(zdev))
 +		zpci_disable_device(zdev);
  
 -	if (zdev->has_resources)
 -		zpci_cleanup_bus_resources(zdev);
 +	switch (zdev->state) {
 +	case ZPCI_FN_STATE_CONFIGURED:
 +		ret = sclp_pci_deconfigure(zdev->fid);
 +		zpci_dbg(3, "deconf fid:%x, rc:%d\n", zdev->fid, ret);
 +		fallthrough;
 +	case ZPCI_FN_STATE_STANDBY:
 +		if (zdev->has_hp_slot)
 +			zpci_exit_slot(zdev);
 +		spin_lock(&zpci_list_lock);
 +		list_del(&zdev->entry);
 +		spin_unlock(&zpci_list_lock);
 +		zpci_dbg(3, "rsv fid:%x\n", zdev->fid);
 +		fallthrough;
 +	case ZPCI_FN_STATE_RESERVED:
 +		if (zdev->has_resources)
 +			zpci_cleanup_bus_resources(zdev);
 +		zpci_bus_device_unregister(zdev);
 +		zpci_destroy_iommu(zdev);
 +		/* fallthrough */
 +	default:
 +		break;
 +	}
  
 -	zpci_bus_device_unregister(zdev);
 -	zpci_destroy_iommu(zdev);
  	zpci_dbg(3, "rem fid:%x\n", zdev->fid);
 -	kfree_rcu(zdev, rcu);
 +	kfree(zdev);
  }
  
  int zpci_report_error(struct pci_dev *pdev,
* Unmerged path arch/s390/pci/pci.c
