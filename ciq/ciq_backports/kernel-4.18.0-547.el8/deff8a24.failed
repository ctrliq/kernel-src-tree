x86/boot: Annotate local functions

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-547.el8
commit-author Jiri Slaby <jslaby@suse.cz>
commit deff8a24e1021fb39dddf5f6bc5832e0e3a632ea
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-547.el8/deff8a24.failed

.Lrelocated, .Lpaging_enabled, .Lno_longmode, and .Lin_pm32 are
self-standing local functions, annotate them as such and preserve "no
alignment".

The annotations do not generate anything yet.

	Signed-off-by: Jiri Slaby <jslaby@suse.cz>
	Signed-off-by: Borislav Petkov <bp@suse.de>
	Cc: Cao jin <caoj.fnst@cn.fujitsu.com>
	Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
	Cc: "H. Peter Anvin" <hpa@zytor.com>
	Cc: Ingo Molnar <mingo@redhat.com>
	Cc: Kate Stewart <kstewart@linuxfoundation.org>
	Cc: "Kirill A. Shutemov" <kirill.shutemov@linux.intel.com>
	Cc: linux-arch@vger.kernel.org
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: Wei Huang <wei@redhat.com>
	Cc: x86-ml <x86@kernel.org>
	Cc: Xiaoyao Li <xiaoyao.li@linux.intel.com>
Link: https://lkml.kernel.org/r/20191011115108.12392-8-jslaby@suse.cz
(cherry picked from commit deff8a24e1021fb39dddf5f6bc5832e0e3a632ea)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/boot/pmjump.S
diff --cc arch/x86/boot/pmjump.S
index f5ccd103f705,81658fe35380..000000000000
--- a/arch/x86/boot/pmjump.S
+++ b/arch/x86/boot/pmjump.S
@@@ -48,7 -46,7 +48,11 @@@ SYM_FUNC_END(protected_mode_jump
  
  	.code32
  	.section ".text32","ax"
++<<<<<<< HEAD
 +GLOBAL(in_pm32)
++=======
+ SYM_FUNC_START_LOCAL_NOALIGN(.Lin_pm32)
++>>>>>>> deff8a24e102 (x86/boot: Annotate local functions)
  	# Set up data segments for flat 32-bit mode
  	movl	%ecx, %ds
  	movl	%ecx, %es
@@@ -74,4 -72,4 +78,8 @@@
  	lldt	%cx
  
  	jmpl	*%eax			# Jump to the 32-bit entrypoint
++<<<<<<< HEAD
 +ENDPROC(in_pm32)
++=======
+ SYM_FUNC_END(.Lin_pm32)
++>>>>>>> deff8a24e102 (x86/boot: Annotate local functions)
diff --git a/arch/x86/boot/compressed/head_32.S b/arch/x86/boot/compressed/head_32.S
index cfd9c4fe1b7d..07b79ee47dc0 100644
--- a/arch/x86/boot/compressed/head_32.S
+++ b/arch/x86/boot/compressed/head_32.S
@@ -207,7 +207,7 @@ ENDPROC(efi32_stub_entry)
 #endif
 
 	.text
-.Lrelocated:
+SYM_FUNC_START_LOCAL_NOALIGN(.Lrelocated)
 
 /*
  * Clear BSS (stack is currently empty)
@@ -245,6 +245,7 @@ ENDPROC(efi32_stub_entry)
  */
 	xorl	%ebx, %ebx
 	jmp	*%eax
+SYM_FUNC_END(.Lrelocated)
 
 #ifdef CONFIG_EFI_STUB
 	.data
diff --git a/arch/x86/boot/compressed/head_64.S b/arch/x86/boot/compressed/head_64.S
index bd71ddb640da..61f8254063e6 100644
--- a/arch/x86/boot/compressed/head_64.S
+++ b/arch/x86/boot/compressed/head_64.S
@@ -516,7 +516,7 @@ SYM_FUNC_END(efi64_stub_entry)
 #endif
 
 	.text
-.Lrelocated:
+SYM_FUNC_START_LOCAL_NOALIGN(.Lrelocated)
 
 /*
  * Clear BSS (stack is currently empty)
@@ -554,6 +554,7 @@ SYM_FUNC_END(efi64_stub_entry)
  * Jump to the decompressed kernel.
  */
 	jmp	*%rax
+SYM_FUNC_END(.Lrelocated)
 
 	.code32
 /*
@@ -646,9 +647,10 @@ SYM_CODE_START(trampoline_32bit_src)
 SYM_CODE_END(trampoline_32bit_src)
 
 	.code64
-.Lpaging_enabled:
+SYM_FUNC_START_LOCAL_NOALIGN(.Lpaging_enabled)
 	/* Return from the trampoline */
 	jmp	*%rdi
+SYM_FUNC_END(.Lpaging_enabled)
 
 	/*
          * The trampoline code has a size limit.
@@ -658,11 +660,12 @@ SYM_CODE_END(trampoline_32bit_src)
 	.org	trampoline_32bit_src + TRAMPOLINE_32BIT_CODE_SIZE
 
 	.code32
-.Lno_longmode:
+SYM_FUNC_START_LOCAL_NOALIGN(.Lno_longmode)
 	/* This isn't an x86-64 CPU, so hang intentionally, we cannot continue */
 1:
 	hlt
 	jmp     1b
+SYM_FUNC_END(.Lno_longmode)
 
 #include "../../kernel/verify_cpu.S"
 
* Unmerged path arch/x86/boot/pmjump.S
