x86/boot/compressed: Remove, discard, or assert for unwanted sections

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-547.el8
commit-author Kees Cook <keescook@chromium.org>
commit d1c0272bc1c068f8c2cb3d1b395173602b0df6e7
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-547.el8/d1c0272b.failed

In preparation for warning on orphan sections, stop the linker from
generating the .eh_frame* sections, discard unwanted non-zero-sized
generated sections, and enforce other expected-to-be-zero-sized sections
(since discarding them might hide problems with them suddenly gaining
unexpected entries).

	Signed-off-by: Kees Cook <keescook@chromium.org>
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
Link: https://lore.kernel.org/r/20200821194310.3089815-28-keescook@chromium.org
(cherry picked from commit d1c0272bc1c068f8c2cb3d1b395173602b0df6e7)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/boot/compressed/Makefile
#	arch/x86/boot/compressed/vmlinux.lds.S
diff --cc arch/x86/boot/compressed/Makefile
index 3c10eb222545,5b7f6e175b03..000000000000
--- a/arch/x86/boot/compressed/Makefile
+++ b/arch/x86/boot/compressed/Makefile
@@@ -51,21 -49,14 +51,26 @@@ KBUILD_AFLAGS  := $(KBUILD_CFLAGS) -D__
  GCOV_PROFILE := n
  UBSAN_SANITIZE :=n
  
++<<<<<<< HEAD
 +LDFLAGS := -m elf_$(UTS_MACHINE)
++=======
+ KBUILD_LDFLAGS := -m elf_$(UTS_MACHINE)
+ KBUILD_LDFLAGS += $(call ld-option,--no-ld-generated-unwind-info)
++>>>>>>> d1c0272bc1c0 (x86/boot/compressed: Remove, discard, or assert for unwanted sections)
  # Compressed kernel should be built as PIE since it may be loaded at any
  # address by the bootloader.
 -LDFLAGS_vmlinux := -pie $(call ld-option, --no-dynamic-linker)
 -LDFLAGS_vmlinux += -T
 +ifeq ($(CONFIG_X86_32),y)
 +LDFLAGS += $(call ld-option, -pie) $(call ld-option, --no-dynamic-linker)
 +else
 +# To build 64-bit compressed kernel as PIE, we disable relocation
 +# overflow check to avoid relocation overflow error with a new linker
 +# command-line option, -z noreloc-overflow.
 +LDFLAGS += $(shell $(LD) --help 2>&1 | grep -q "\-z noreloc-overflow" \
 +	&& echo "-z noreloc-overflow -pie --no-dynamic-linker")
 +endif
 +LDFLAGS_vmlinux := -T
  
 -hostprogs	:= mkpiggy
 +hostprogs-y	:= mkpiggy
  HOST_EXTRACFLAGS += -I$(srctree)/tools/include
  
  sed-voffset := -e 's/^\([0-9a-fA-F]*\) [ABCDGRSTVW] \(_text\|__bss_start\|_end\)$$/\#define VO_\2 _AC(0x\1,UL)/p'
diff --cc arch/x86/boot/compressed/vmlinux.lds.S
index 3a8b5cacac6f,02f6feb0e55b..000000000000
--- a/arch/x86/boot/compressed/vmlinux.lds.S
+++ b/arch/x86/boot/compressed/vmlinux.lds.S
@@@ -75,12 -69,47 +75,55 @@@ SECTION
  	. = ALIGN(PAGE_SIZE);	/* keep ZO size page aligned */
  	_end = .;
  
 -	ELF_DETAILS
 -
  	DISCARDS
++<<<<<<< HEAD
++=======
+ 	/DISCARD/ : {
+ 		*(.dynamic) *(.dynsym) *(.dynstr) *(.dynbss)
+ 		*(.hash) *(.gnu.hash)
+ 		*(.note.*)
+ 	}
+ 
+ 	.got.plt (INFO) : {
+ 		*(.got.plt)
+ 	}
+ 	ASSERT(SIZEOF(.got.plt) == 0 ||
+ #ifdef CONFIG_X86_64
+ 	       SIZEOF(.got.plt) == 0x18,
+ #else
+ 	       SIZEOF(.got.plt) == 0xc,
+ #endif
+ 	       "Unexpected GOT/PLT entries detected!")
+ 
+ 	/*
+ 	 * Sections that should stay zero sized, which is safer to
+ 	 * explicitly check instead of blindly discarding.
+ 	 */
+ 	.got : {
+ 		*(.got)
+ 	}
+ 	ASSERT(SIZEOF(.got) == 0, "Unexpected GOT entries detected!")
+ 
+ 	.plt : {
+ 		*(.plt) *(.plt.*)
+ 	}
+ 	ASSERT(SIZEOF(.plt) == 0, "Unexpected run-time procedure linkages detected!")
+ 
+ 	.rel.dyn : {
+ 		*(.rel.*) *(.rel_*)
+ 	}
+ 	ASSERT(SIZEOF(.rel.dyn) == 0, "Unexpected run-time relocations (.rel) detected!")
+ 
+ 	.rela.dyn : {
+ 		*(.rela.*) *(.rela_*)
+ 	}
+ 	ASSERT(SIZEOF(.rela.dyn) == 0, "Unexpected run-time relocations (.rela) detected!")
++>>>>>>> d1c0272bc1c0 (x86/boot/compressed: Remove, discard, or assert for unwanted sections)
  }
 +
 +ASSERT(SIZEOF(.got) == 0, "Unexpected GOT entries detected!")
 +#ifdef CONFIG_X86_64
 +ASSERT(SIZEOF(.got.plt) == 0 || SIZEOF(.got.plt) == 0x18, "Unexpected GOT/PLT entries detected!")
 +#else
 +ASSERT(SIZEOF(.got.plt) == 0 || SIZEOF(.got.plt) == 0xc, "Unexpected GOT/PLT entries detected!")
 +#endif
* Unmerged path arch/x86/boot/compressed/Makefile
* Unmerged path arch/x86/boot/compressed/vmlinux.lds.S
