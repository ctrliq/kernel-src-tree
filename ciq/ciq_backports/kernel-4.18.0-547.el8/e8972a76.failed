x86/decompressor: Call trampoline as a normal function

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-547.el8
commit-author Ard Biesheuvel <ardb@kernel.org>
commit e8972a76aa90c05a0078043413f806c02fcb3487
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-547.el8/e8972a76.failed

Move the long return to switch to 32-bit mode into the trampoline code
so it can be called as an ordinary function. This will allow it to be
called directly from C code in a subsequent patch.

While at it, reorganize the code somewhat to keep the prologue and
epilogue of the function together, making the code a bit easier to
follow. Also, given that the trampoline is now entered in 64-bit mode, a
simple RIP-relative reference can be used to take the address of the
exit point.

	Signed-off-by: Ard Biesheuvel <ardb@kernel.org>
	Signed-off-by: Borislav Petkov (AMD) <bp@alien8.de>
	Acked-by: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
Link: https://lore.kernel.org/r/20230807162720.545787-10-ardb@kernel.org
(cherry picked from commit e8972a76aa90c05a0078043413f806c02fcb3487)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/boot/compressed/head_64.S
diff --cc arch/x86/boot/compressed/head_64.S
index c4f3be19a58f,91b5eee30614..000000000000
--- a/arch/x86/boot/compressed/head_64.S
+++ b/arch/x86/boot/compressed/head_64.S
@@@ -392,20 -447,8 +392,25 @@@ SYM_CODE_START(startup_64
  	/* Save the trampoline address in RCX */
  	movq	%rax, %rcx
  
++<<<<<<< HEAD
 +	/*
 +	 * Load the address of trampoline_return() into RDI.
 +	 * It will be used by the trampoline to return to the main code.
 +	 */
 +	leaq	trampoline_return(%rip), %rdi
 +
 +	/* Switch to compatibility mode (CS.L = 0 CS.D = 1) via far return */
 +	pushq	$__KERNEL32_CS
 +	leaq	TRAMPOLINE_32BIT_CODE_OFFSET(%rax), %rax
 +	pushq	%rax
 +	lretq
 +trampoline_return:
 +	/* Restore the stack, the 32-bit trampoline uses its own stack */
 +	leaq	boot_stack_end(%rbx), %rsp
++=======
+ 	leaq	TRAMPOLINE_32BIT_CODE_OFFSET(%rax), %rax
+ 	call	*%rax
++>>>>>>> e8972a76aa90 (x86/decompressor: Call trampoline as a normal function)
  
  	/*
  	 * cleanup_trampoline() would restore trampoline memory.
@@@ -561,9 -526,10 +566,8 @@@ SYM_FUNC_END(efi64_stub_entry
  /*
   * Jump to the decompressed kernel.
   */
 -	movq	%r15, %rsi
  	jmp	*%rax
 -SYM_FUNC_END(.Lrelocated)
  
- 	.code32
  /*
   * This is the 32-bit trampoline that will be copied over to low memory.
   *
@@@ -653,11 -646,6 +687,14 @@@ SYM_CODE_START(trampoline_32bit_src
  	lret
  SYM_CODE_END(trampoline_32bit_src)
  
++<<<<<<< HEAD
 +	.code64
 +.Lpaging_enabled:
 +	/* Return from the trampoline */
 +	jmp	*%rdi
 +
++=======
++>>>>>>> e8972a76aa90 (x86/decompressor: Call trampoline as a normal function)
  	/*
           * The trampoline code has a size limit.
           * Make sure we fail to compile if the trampoline code grows
@@@ -665,8 -653,7 +702,12 @@@
  	 */
  	.org	trampoline_32bit_src + TRAMPOLINE_32BIT_CODE_SIZE
  
++<<<<<<< HEAD
 +	.code32
 +.Lno_longmode:
++=======
+ SYM_FUNC_START_LOCAL_NOALIGN(.Lno_longmode)
++>>>>>>> e8972a76aa90 (x86/decompressor: Call trampoline as a normal function)
  	/* This isn't an x86-64 CPU, so hang intentionally, we cannot continue */
  1:
  	hlt
* Unmerged path arch/x86/boot/compressed/head_64.S
diff --git a/arch/x86/boot/compressed/pgtable.h b/arch/x86/boot/compressed/pgtable.h
index cc9b2529a086..91dbb99203fb 100644
--- a/arch/x86/boot/compressed/pgtable.h
+++ b/arch/x86/boot/compressed/pgtable.h
@@ -6,7 +6,7 @@
 #define TRAMPOLINE_32BIT_PGTABLE_OFFSET	0
 
 #define TRAMPOLINE_32BIT_CODE_OFFSET	PAGE_SIZE
-#define TRAMPOLINE_32BIT_CODE_SIZE	0x80
+#define TRAMPOLINE_32BIT_CODE_SIZE	0xA0
 
 #define TRAMPOLINE_32BIT_STACK_END	TRAMPOLINE_32BIT_SIZE
 
