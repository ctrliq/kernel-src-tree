efi: Put Linux specific magic number in the DOS header

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-547.el8
commit-author Ard Biesheuvel <ardb@kernel.org>
commit 29636a5ce87bebab38c533175d72bb800a7581b8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-547.el8/29636a5c.failed

GRUB currently relies on the magic number in the image header of ARM and
arm64 EFI kernel images to decide whether or not the image in question
is a bootable kernel.

However, the purpose of the magic number is to identify the image as one
that implements the bare metal boot protocol, and so GRUB, which only
does EFI boot, is limited unnecessarily to booting images that could
potentially be booted in a non-EFI manner as well.

This is problematic for the new zboot decompressor image format, as it
can only boot in EFI mode, and must therefore not use the bare metal
boot magic number in its header.

For this reason, the strict magic number was dropped from GRUB, to
permit essentially any kind of EFI executable to be booted via the
'linux' command, blurring the line between the linux loader and the
chainloader.

So let's use the same field in the DOS header that RISC-V and arm64
already use for their 'bare metal' magic numbers to store a 'generic
Linux kernel' magic number, which can be used to identify bootable
kernel images in PE format which don't necessarily implement a bare
metal boot protocol in the same binary. Note that, in the context of
EFI, the MS-DOS header is only described in terms of the fields that it
shares with the hybrid PE/COFF image format, (i.e., the MS-DOS EXE magic
number at offset #0 and the PE header offset at byte offset #0x3c).
Since we aim for compatibility with EFI only, and not with MS-DOS or
MS-Windows, we can use the remaining space in the MS-DOS header however
we want.

Let's set the generic magic number for x86 images as well: existing
bootloaders already have their own methods to identify x86 Linux images
that can be booted in a non-EFI manner, and having the magic number in
place there will ease any future transitions in loader implementations
to merge the x86 and non-x86 EFI boot paths.

Note that 32-bit ARM already uses the same location in the header for a
different purpose, but the ARM support is already widely implemented and
the EFI zboot decompressor is not available on ARM anyway, so we just
disregard it here.

	Acked-by: Leif Lindholm <quic_llindhol@quicinc.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>
	Signed-off-by: Ard Biesheuvel <ardb@kernel.org>
(cherry picked from commit 29636a5ce87bebab38c533175d72bb800a7581b8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/loongarch/kernel/head.S
#	drivers/firmware/efi/libstub/zboot-header.S
#	include/linux/pe.h
diff --cc include/linux/pe.h
index 3482b18a48b5,6ffabf1e6d03..000000000000
--- a/include/linux/pe.h
+++ b/include/linux/pe.h
@@@ -21,6 -10,34 +21,37 @@@
  
  #include <linux/types.h>
  
++<<<<<<< HEAD
++=======
+ /*
+  * Linux EFI stub v1.0 adds the following functionality:
+  * - Loading initrd from the LINUX_EFI_INITRD_MEDIA_GUID device path,
+  * - Loading/starting the kernel from firmware that targets a different
+  *   machine type, via the entrypoint exposed in the .compat PE/COFF section.
+  *
+  * The recommended way of loading and starting v1.0 or later kernels is to use
+  * the LoadImage() and StartImage() EFI boot services, and expose the initrd
+  * via the LINUX_EFI_INITRD_MEDIA_GUID device path.
+  *
+  * Versions older than v1.0 support initrd loading via the image load options
+  * (using initrd=, limited to the volume from which the kernel itself was
+  * loaded), or via arch specific means (bootparams, DT, etc).
+  *
+  * On x86, LoadImage() and StartImage() can be omitted if the EFI handover
+  * protocol is implemented, which can be inferred from the version,
+  * handover_offset and xloadflags fields in the bootparams structure.
+  */
+ #define LINUX_EFISTUB_MAJOR_VERSION		0x1
+ #define LINUX_EFISTUB_MINOR_VERSION		0x1
+ 
+ /*
+  * LINUX_PE_MAGIC appears at offset 0x38 into the MS-DOS header of EFI bootable
+  * Linux kernel images that target the architecture as specified by the PE/COFF
+  * header machine type field.
+  */
+ #define LINUX_PE_MAGIC	0x818223cd
+ 
++>>>>>>> 29636a5ce87b (efi: Put Linux specific magic number in the DOS header)
  #define MZ_MAGIC	0x5a4d	/* "MZ" */
  
  #define PE_MAGIC		0x00004550	/* "PE\0\0" */
* Unmerged path arch/loongarch/kernel/head.S
* Unmerged path drivers/firmware/efi/libstub/zboot-header.S
* Unmerged path arch/loongarch/kernel/head.S
diff --git a/arch/x86/boot/header.S b/arch/x86/boot/header.S
index 4df6cba47914..859807fc2eea 100644
--- a/arch/x86/boot/header.S
+++ b/arch/x86/boot/header.S
@@ -81,10 +81,11 @@ bs_die:
 	ljmp	$0xf000,$0xfff0
 
 #ifdef CONFIG_EFI_STUB
-	.org	0x3c
+	.org	0x38
 	#
 	# Offset to the PE header.
 	#
+	.long	LINUX_PE_MAGIC
 	.long	pe_header
 #endif /* CONFIG_EFI_STUB */
 
* Unmerged path drivers/firmware/efi/libstub/zboot-header.S
* Unmerged path include/linux/pe.h
