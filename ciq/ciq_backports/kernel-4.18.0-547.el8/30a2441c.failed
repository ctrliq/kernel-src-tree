x86/asm: Make more symbols local

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-547.el8
commit-author Jiri Slaby <jslaby@suse.cz>
commit 30a2441cae7b149ff484a697bf9eb8de53240a4f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-547.el8/30a2441c.failed

During the assembly cleanup patchset review, I found more symbols which
are used only locally. So make them really local by prepending ".L" to
them. Namely:

 - wakeup_idt is used only in realmode/rm/wakeup_asm.S.
 - in_pm32 is used only in boot/pmjump.S.
 - retint_user is used only in entry/entry_64.S, perhaps since commit
   2ec67971facc ("x86/entry/64/compat: Remove most of the fast system
   call machinery"), where entry_64_compat's caller was removed.

Drop GLOBAL from all of them too. I do not see more candidates in the
series.

	Signed-off-by: Jiri Slaby <jslaby@suse.cz>
	Acked-by: Borislav Petkov <bp@suse.de>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: bp@alien8.de
	Cc: hpa@zytor.com
Link: https://lkml.kernel.org/r/20191011092213.31470-1-jslaby@suse.cz
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit 30a2441cae7b149ff484a697bf9eb8de53240a4f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/entry/entry_64.S
diff --cc arch/x86/entry/entry_64.S
index 3e0c33312eae,86cbb22208c8..000000000000
--- a/arch/x86/entry/entry_64.S
+++ b/arch/x86/entry/entry_64.S
@@@ -1488,8 -1372,8 +1488,13 @@@ SYM_CODE_START_LOCAL(error_exit
  	TRACE_IRQS_OFF
  	testb	$3, CS(%rsp)
  	jz	retint_kernel
++<<<<<<< HEAD
 +	jmp	retint_user
 +SYM_CODE_END(error_exit)
++=======
+ 	jmp	.Lretint_user
+ END(error_exit)
++>>>>>>> 30a2441cae7b (x86/asm: Make more symbols local)
  
  /*
   * Runs on exception stack.  Xen PV does not go through this path at all,
diff --git a/arch/x86/boot/pmjump.S b/arch/x86/boot/pmjump.S
index f5ccd103f705..2b7311dfd601 100644
--- a/arch/x86/boot/pmjump.S
+++ b/arch/x86/boot/pmjump.S
@@ -42,13 +42,13 @@ SYM_FUNC_START_NOALIGN(protected_mode_jump)
 
 	# Transition to 32-bit mode
 	.byte	0x66, 0xea		# ljmpl opcode
-2:	.long	in_pm32			# offset
+2:	.long	.Lin_pm32		# offset
 	.word	__BOOT_CS		# segment
 SYM_FUNC_END(protected_mode_jump)
 
 	.code32
 	.section ".text32","ax"
-GLOBAL(in_pm32)
+.Lin_pm32:
 	# Set up data segments for flat 32-bit mode
 	movl	%ecx, %ds
 	movl	%ecx, %es
@@ -74,4 +74,4 @@ GLOBAL(in_pm32)
 	lldt	%cx
 
 	jmpl	*%eax			# Jump to the 32-bit entrypoint
-ENDPROC(in_pm32)
+ENDPROC(.Lin_pm32)
* Unmerged path arch/x86/entry/entry_64.S
diff --git a/arch/x86/realmode/rm/wakeup_asm.S b/arch/x86/realmode/rm/wakeup_asm.S
index 521e089f4a1f..7e2fdce5dd25 100644
--- a/arch/x86/realmode/rm/wakeup_asm.S
+++ b/arch/x86/realmode/rm/wakeup_asm.S
@@ -73,7 +73,7 @@ SYM_CODE_START(wakeup_start)
 	movw	%ax, %fs
 	movw	%ax, %gs
 
-	lidtl	wakeup_idt
+	lidtl	.Lwakeup_idt
 
 	/* Clear the EFLAGS */
 	pushl $0
@@ -172,8 +172,8 @@ SYM_DATA_END(wakeup_gdt)
 
 	/* This is the standard real-mode IDT */
 	.balign	16
-GLOBAL(wakeup_idt)
+.Lwakeup_idt:
 	.word	0xffff		/* limit */
 	.long	0		/* address */
 	.word	0
-END(wakeup_idt)
+END(.Lwakeup_idt)
