x86/boot: Remove run-time relocations from head_{32,64}.S

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-547.el8
commit-author Arvind Sankar <nivedita@alum.mit.edu>
commit 3f086189cd3641d212949ff044d8e4486c93d55e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-547.el8/3f086189.failed

The BFD linker generates run-time relocations for z_input_len and
z_output_len, even though they are absolute symbols.

This is fixed for binutils-2.35 [1]. Work around this for earlier
versions by defining two variables input_len and output_len in addition
to the symbols, and use them via position-independent references.

This eliminates the last two run-time relocations in the head code and
allows us to drop the -z noreloc-overflow flag to the linker.

Move the -pie and --no-dynamic-linker LDFLAGS to LDFLAGS_vmlinux instead
of KBUILD_LDFLAGS. There shouldn't be anything else getting linked, but
this is the more logical location for these flags, and modversions might
call the linker if an EXPORT_SYMBOL is left over accidentally in one of
the decompressors.

[1] https://sourceware.org/bugzilla/show_bug.cgi?id=25754

	Signed-off-by: Arvind Sankar <nivedita@alum.mit.edu>
	Signed-off-by: Kees Cook <keescook@chromium.org>
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
	Tested-by: Nick Desaulniers <ndesaulniers@google.com>
	Tested-by: Sedat Dilek <sedat.dilek@gmail.com>
	Reviewed-by: Kees Cook <keescook@chromium.org>
	Reviewed-by: Ard Biesheuvel <ardb@kernel.org>
	Reviewed-by: Fangrui Song <maskray@google.com>
Link: https://lore.kernel.org/r/20200731230820.1742553-7-keescook@chromium.org
(cherry picked from commit 3f086189cd3641d212949ff044d8e4486c93d55e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/boot/compressed/Makefile
#	arch/x86/boot/compressed/head_32.S
diff --cc arch/x86/boot/compressed/Makefile
index 3c10eb222545,7d25089c5a7b..000000000000
--- a/arch/x86/boot/compressed/Makefile
+++ b/arch/x86/boot/compressed/Makefile
@@@ -51,21 -49,13 +51,26 @@@ KBUILD_AFLAGS  := $(KBUILD_CFLAGS) -D__
  GCOV_PROFILE := n
  UBSAN_SANITIZE :=n
  
 -KBUILD_LDFLAGS := -m elf_$(UTS_MACHINE)
 +LDFLAGS := -m elf_$(UTS_MACHINE)
  # Compressed kernel should be built as PIE since it may be loaded at any
  # address by the bootloader.
++<<<<<<< HEAD
 +ifeq ($(CONFIG_X86_32),y)
 +LDFLAGS += $(call ld-option, -pie) $(call ld-option, --no-dynamic-linker)
 +else
 +# To build 64-bit compressed kernel as PIE, we disable relocation
 +# overflow check to avoid relocation overflow error with a new linker
 +# command-line option, -z noreloc-overflow.
 +LDFLAGS += $(shell $(LD) --help 2>&1 | grep -q "\-z noreloc-overflow" \
 +	&& echo "-z noreloc-overflow -pie --no-dynamic-linker")
 +endif
 +LDFLAGS_vmlinux := -T
++=======
+ LDFLAGS_vmlinux := $(call ld-option, -pie) $(call ld-option, --no-dynamic-linker)
+ LDFLAGS_vmlinux += -T
++>>>>>>> 3f086189cd36 (x86/boot: Remove run-time relocations from head_{32,64}.S)
  
 -hostprogs	:= mkpiggy
 +hostprogs-y	:= mkpiggy
  HOST_EXTRACFLAGS += -I$(srctree)/tools/include
  
  sed-voffset := -e 's/^\([0-9a-fA-F]*\) [ABCDGRSTVW] \(_text\|__bss_start\|_end\)$$/\#define VO_\2 _AC(0x\1,UL)/p'
diff --cc arch/x86/boot/compressed/head_32.S
index 0411ad3c848c,659fad53ca82..000000000000
--- a/arch/x86/boot/compressed/head_32.S
+++ b/arch/x86/boot/compressed/head_32.S
@@@ -222,22 -178,17 +222,33 @@@ ENDPROC(efi32_stub_entry
  /*
   * Do the extraction, and jump to the new kernel..
   */
- 				/* push arguments for extract_kernel: */
- 	pushl	$z_output_len	/* decompressed length, end of relocs */
+ 	/* push arguments for extract_kernel: */
  
++<<<<<<< HEAD
 +	movl    BP_init_size(%esi), %eax
 +	subl    $_end, %eax
 +	movl    %ebx, %ebp
 +	subl    %eax, %ebp
 +	pushl	%ebp		/* output address */
 +
 +	pushl	$z_input_len	/* input_len */
 +	leal	input_data(%ebx), %eax
 +	pushl	%eax		/* input_data */
 +	leal	boot_heap(%ebx), %eax
 +	pushl	%eax		/* heap area */
 +	pushl	%esi		/* real mode pointer */
 +	call	extract_kernel	/* returns kernel location in %eax */
++=======
+ 	pushl	output_len@GOTOFF(%ebx)	/* decompressed length, end of relocs */
+ 	pushl	%ebp			/* output address */
+ 	pushl	input_len@GOTOFF(%ebx)	/* input_len */
+ 	leal	input_data@GOTOFF(%ebx), %eax
+ 	pushl	%eax			/* input_data */
+ 	leal	boot_heap@GOTOFF(%ebx), %eax
+ 	pushl	%eax			/* heap area */
+ 	pushl	%esi			/* real mode pointer */
+ 	call	extract_kernel		/* returns kernel location in %eax */
++>>>>>>> 3f086189cd36 (x86/boot: Remove run-time relocations from head_{32,64}.S)
  	addl	$24, %esp
  
  /*
* Unmerged path arch/x86/boot/compressed/Makefile
* Unmerged path arch/x86/boot/compressed/head_32.S
diff --git a/arch/x86/boot/compressed/head_64.S b/arch/x86/boot/compressed/head_64.S
index 6cee4cfafe11..f61782707ea4 100644
--- a/arch/x86/boot/compressed/head_64.S
+++ b/arch/x86/boot/compressed/head_64.S
@@ -552,9 +552,9 @@ SYM_FUNC_END(efi64_stub_entry)
 	movq	%rsi, %rdi		/* real mode address */
 	leaq	boot_heap(%rip), %rsi	/* malloc area for uncompression */
 	leaq	input_data(%rip), %rdx  /* input_data */
-	movl	$z_input_len, %ecx	/* input_len */
+	movl	input_len(%rip), %ecx	/* input_len */
 	movq	%rbp, %r8		/* output target address */
-	movl	$z_output_len, %r9d	/* decompressed length, end of relocs */
+	movl	output_len(%rip), %r9d	/* decompressed length, end of relocs */
 	call	extract_kernel		/* returns kernel location in %rax */
 	popq	%rsi
 
diff --git a/arch/x86/boot/compressed/mkpiggy.c b/arch/x86/boot/compressed/mkpiggy.c
index 72bad2c8debe..3e98f12954ab 100644
--- a/arch/x86/boot/compressed/mkpiggy.c
+++ b/arch/x86/boot/compressed/mkpiggy.c
@@ -74,6 +74,12 @@ int main(int argc, char *argv[])
 	printf(".incbin \"%s\"\n", argv[1]);
 	printf("input_data_end:\n");
 
+	printf(".section \".rodata\",\"a\",@progbits\n");
+	printf(".globl input_len\n");
+	printf("input_len:\n\t.long %lu\n", ilen);
+	printf(".globl output_len\n");
+	printf("output_len:\n\t.long %lu\n", (unsigned long)olen);
+
 	retval = 0;
 bail:
 	if (f)
