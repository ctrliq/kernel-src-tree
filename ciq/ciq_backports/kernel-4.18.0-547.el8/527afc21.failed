x86/boot: Check that there are no run-time relocations

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-547.el8
commit-author Arvind Sankar <nivedita@alum.mit.edu>
commit 527afc212231ea9d585b7709c0ab73263ecf0c85
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-547.el8/527afc21.failed

Add a linker script check that there are no run-time relocations, and
remove the old one that tries to check via looking for specially-named
sections in the object files.

Drop the tests for -fPIE compiler option and -pie linker option, as they
are available in all supported gcc and binutils versions (as well as
clang and lld).

	Signed-off-by: Arvind Sankar <nivedita@alum.mit.edu>
	Signed-off-by: Kees Cook <keescook@chromium.org>
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
	Tested-by: Nick Desaulniers <ndesaulniers@google.com>
	Tested-by: Sedat Dilek <sedat.dilek@gmail.com>
	Reviewed-by: Kees Cook <keescook@chromium.org>
	Reviewed-by: Ard Biesheuvel <ardb@kernel.org>
	Reviewed-by: Fangrui Song <maskray@google.com>
	Reviewed-by: Sedat Dilek <sedat.dilek@gmail.com>
Link: https://lore.kernel.org/r/20200731230820.1742553-8-keescook@chromium.org
(cherry picked from commit 527afc212231ea9d585b7709c0ab73263ecf0c85)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/boot/compressed/Makefile
diff --cc arch/x86/boot/compressed/Makefile
index 3c10eb222545,753d57266757..000000000000
--- a/arch/x86/boot/compressed/Makefile
+++ b/arch/x86/boot/compressed/Makefile
@@@ -26,19 -26,22 +26,19 @@@ OBJECT_FILES_NON_STANDARD	:= 
  KCOV_INSTRUMENT		:= n
  
  targets := vmlinux vmlinux.bin vmlinux.bin.gz vmlinux.bin.bz2 vmlinux.bin.lzma \
 -	vmlinux.bin.xz vmlinux.bin.lzo vmlinux.bin.lz4 vmlinux.bin.zst
 +	vmlinux.bin.xz vmlinux.bin.lzo vmlinux.bin.lz4
  
  KBUILD_CFLAGS := -m$(BITS) -O2
- KBUILD_CFLAGS += -fno-strict-aliasing $(call cc-option, -fPIE, -fPIC)
+ KBUILD_CFLAGS += -fno-strict-aliasing -fPIE
  KBUILD_CFLAGS += -DDISABLE_BRANCH_PROFILING
  cflags-$(CONFIG_X86_32) := -march=i386
 -cflags-$(CONFIG_X86_64) := -mcmodel=small
 +cflags-$(CONFIG_X86_64) := -mcmodel=small -mno-red-zone
  KBUILD_CFLAGS += $(cflags-y)
  KBUILD_CFLAGS += -mno-mmx -mno-sse
 -KBUILD_CFLAGS += -ffreestanding
 -KBUILD_CFLAGS += -fno-stack-protector
 +KBUILD_CFLAGS += $(call cc-option,-ffreestanding)
 +KBUILD_CFLAGS += $(call cc-option,-fno-stack-protector)
  KBUILD_CFLAGS += $(call cc-disable-warning, address-of-packed-member)
  KBUILD_CFLAGS += $(call cc-disable-warning, gnu)
 -KBUILD_CFLAGS += -Wno-pointer-sign
 -KBUILD_CFLAGS += $(call cc-option,-fmacro-prefix-map=$(srctree)/=)
 -KBUILD_CFLAGS += -fno-asynchronous-unwind-tables
  KBUILD_CFLAGS += -D__DISABLE_EXPORTS
  KBUILD_CFLAGS += -include $(srctree)/include/linux/hidden.h
  
@@@ -51,21 -49,13 +51,26 @@@ KBUILD_AFLAGS  := $(KBUILD_CFLAGS) -D__
  GCOV_PROFILE := n
  UBSAN_SANITIZE :=n
  
 -KBUILD_LDFLAGS := -m elf_$(UTS_MACHINE)
 +LDFLAGS := -m elf_$(UTS_MACHINE)
  # Compressed kernel should be built as PIE since it may be loaded at any
  # address by the bootloader.
++<<<<<<< HEAD
 +ifeq ($(CONFIG_X86_32),y)
 +LDFLAGS += $(call ld-option, -pie) $(call ld-option, --no-dynamic-linker)
 +else
 +# To build 64-bit compressed kernel as PIE, we disable relocation
 +# overflow check to avoid relocation overflow error with a new linker
 +# command-line option, -z noreloc-overflow.
 +LDFLAGS += $(shell $(LD) --help 2>&1 | grep -q "\-z noreloc-overflow" \
 +	&& echo "-z noreloc-overflow -pie --no-dynamic-linker")
 +endif
 +LDFLAGS_vmlinux := -T
++=======
+ LDFLAGS_vmlinux := -pie $(call ld-option, --no-dynamic-linker)
+ LDFLAGS_vmlinux += -T
++>>>>>>> 527afc212231 (x86/boot: Check that there are no run-time relocations)
  
 -hostprogs	:= mkpiggy
 +hostprogs-y	:= mkpiggy
  HOST_EXTRACFLAGS += -I$(srctree)/tools/include
  
  sed-voffset := -e 's/^\([0-9a-fA-F]*\) [ABCDGRSTVW] \(_text\|__bss_start\|_end\)$$/\#define VO_\2 _AC(0x\1,UL)/p'
@@@ -95,39 -83,12 +100,44 @@@ ifdef CONFIG_X86_6
  endif
  
  vmlinux-objs-$(CONFIG_ACPI) += $(obj)/acpi.o
 +vmlinux-objs-$(CONFIG_INTEL_TDX_GUEST) += $(obj)/tdx.o $(obj)/tdcall.o
 +
 +$(obj)/eboot.o: KBUILD_CFLAGS += -fshort-wchar -mno-red-zone
  
 +vmlinux-objs-$(CONFIG_EFI_STUB) += $(obj)/eboot.o $(obj)/efi_stub_$(BITS).o \
 +	$(objtree)/drivers/firmware/efi/libstub/lib.a
 +vmlinux-objs-$(CONFIG_EFI) += $(obj)/efi.o
  vmlinux-objs-$(CONFIG_EFI_MIXED) += $(obj)/efi_thunk_$(BITS).o
 -efi-obj-$(CONFIG_EFI_STUB) = $(objtree)/drivers/firmware/efi/libstub/lib.a
  
++<<<<<<< HEAD
 +# The compressed kernel is built with -fPIC/-fPIE so that a boot loader
 +# can place it anywhere in memory and it will still run. However, since
 +# it is executed as-is without any ELF relocation processing performed
 +# (and has already had all relocation sections stripped from the binary),
 +# none of the code can use data relocations (e.g. static assignments of
 +# pointer values), since they will be meaningless at runtime. This check
 +# will refuse to link the vmlinux if any of these relocations are found.
 +quiet_cmd_check_data_rel = DATAREL $@
 +define cmd_check_data_rel
 +	for obj in $(filter %.o,$^); do \
 +		${CROSS_COMPILE}readelf -S $$obj | grep -qF .rel.local && { \
 +			echo "error: $$obj has data relocations!" >&2; \
 +			exit 1; \
 +		} || true; \
 +	done
 +endef
 +
 +# We need to run two commands under "if_changed", so merge them into a
 +# single invocation.
 +quiet_cmd_check-and-link-vmlinux = LD      $@
 +      cmd_check-and-link-vmlinux = $(cmd_check_data_rel); $(cmd_ld)
 +
 +$(obj)/vmlinux: $(vmlinux-objs-y) FORCE
 +	$(call if_changed,check-and-link-vmlinux)
++=======
+ $(obj)/vmlinux: $(vmlinux-objs-y) $(efi-obj-y) FORCE
+ 	$(call if_changed,ld)
++>>>>>>> 527afc212231 (x86/boot: Check that there are no run-time relocations)
  
  OBJCOPYFLAGS_vmlinux.bin :=  -R .comment -S
  $(obj)/vmlinux.bin: vmlinux FORCE
* Unmerged path arch/x86/boot/compressed/Makefile
diff --git a/arch/x86/boot/compressed/vmlinux.lds.S b/arch/x86/boot/compressed/vmlinux.lds.S
index 3a8b5cacac6f..df3cc059134d 100644
--- a/arch/x86/boot/compressed/vmlinux.lds.S
+++ b/arch/x86/boot/compressed/vmlinux.lds.S
@@ -42,6 +42,12 @@ SECTIONS
 		*(.rodata.*)
 		_erodata = . ;
 	}
+	.rel.dyn : {
+		*(.rel.*)
+	}
+	.rela.dyn : {
+		*(.rela.*)
+	}
 	.got : {
 		*(.got)
 	}
@@ -84,3 +90,5 @@ ASSERT(SIZEOF(.got.plt) == 0 || SIZEOF(.got.plt) == 0x18, "Unexpected GOT/PLT en
 #else
 ASSERT(SIZEOF(.got.plt) == 0 || SIZEOF(.got.plt) == 0xc, "Unexpected GOT/PLT entries detected!")
 #endif
+
+ASSERT(SIZEOF(.rel.dyn) == 0 && SIZEOF(.rela.dyn) == 0, "Unexpected run-time relocations detected!")
