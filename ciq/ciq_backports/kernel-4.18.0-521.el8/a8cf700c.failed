x86/srso: Fix srso_show_state() side effect

jira LE-1907
cve CVE-2023-20569
Rebuild_History Non-Buildable kernel-4.18.0-521.el8
commit-author Josh Poimboeuf <jpoimboe@kernel.org>
commit a8cf700c17d9ca6cb8ee7dc5c9330dbac3948237
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-521.el8/a8cf700c.failed

Reading the 'spec_rstack_overflow' sysfs file can trigger an unnecessary
MSR write, and possibly even a (handled) exception if the microcode
hasn't been updated.

Avoid all that by just checking X86_FEATURE_IBPB_BRTYPE instead, which
gets set by srso_select_mitigation() if the updated microcode exists.

Fixes: fb3bd914b3ec ("x86/srso: Add a Speculative RAS Overflow mitigation")
	Signed-off-by: Josh Poimboeuf <jpoimboe@kernel.org>
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
	Signed-off-by: Borislav Petkov (AMD) <bp@alien8.de>
	Reviewed-by: Nikolay Borisov <nik.borisov@suse.com>
	Acked-by: Borislav Petkov (AMD) <bp@alien8.de>
Link: https://lore.kernel.org/r/27d128899cb8aee9eb2b57ddc996742b0c1d776b.1693889988.git.jpoimboe@kernel.org
(cherry picked from commit a8cf700c17d9ca6cb8ee7dc5c9330dbac3948237)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kernel/cpu/bugs.c
diff --cc arch/x86/kernel/cpu/bugs.c
index adea0002a1a8,bdd3e296f72b..000000000000
--- a/arch/x86/kernel/cpu/bugs.c
+++ b/arch/x86/kernel/cpu/bugs.c
@@@ -2506,6 -2710,16 +2506,19 @@@ static ssize_t retbleed_show_state(cha
  	return sysfs_emit(buf, "%s\n", retbleed_strings[retbleed_mitigation]);
  }
  
++<<<<<<< HEAD
++=======
+ static ssize_t srso_show_state(char *buf)
+ {
+ 	if (boot_cpu_has(X86_FEATURE_SRSO_NO))
+ 		return sysfs_emit(buf, "Mitigation: SMT disabled\n");
+ 
+ 	return sysfs_emit(buf, "%s%s\n",
+ 			  srso_strings[srso_mitigation],
+ 			  boot_cpu_has(X86_FEATURE_IBPB_BRTYPE) ? "" : ", no microcode");
+ }
+ 
++>>>>>>> a8cf700c17d9 (x86/srso: Fix srso_show_state() side effect)
  static ssize_t gds_show_state(char *buf)
  {
  	return sysfs_emit(buf, "%s\n", gds_strings[gds_mitigation]);
* Unmerged path arch/x86/kernel/cpu/bugs.c
