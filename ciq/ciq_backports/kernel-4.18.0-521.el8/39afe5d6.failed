sched/fair: Fix inaccurate tally of ttwu_move_affine

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-521.el8
commit-author Libo Chen <libo.chen@oracle.com>
commit 39afe5d6fc59237ff7738bf3ede5a8856822d59d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-521.el8/39afe5d6.failed

There are scenarios where non-affine wakeups are incorrectly counted as
affine wakeups by schedstats.

When wake_affine_idle() returns prev_cpu which doesn't equal to
nr_cpumask_bits, it will slip through the check: target == nr_cpumask_bits
in wake_affine() and be counted as if target == this_cpu in schedstats.

Replace target == nr_cpumask_bits with target != this_cpu to make sure
affine wakeups are accurately tallied.

Fixes: 806486c377e33 (sched/fair: Do not migrate if the prev_cpu is idle)
	Suggested-by: Daniel Jordan <daniel.m.jordan@oracle.com>
	Signed-off-by: Libo Chen <libo.chen@oracle.com>
	Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
	Reviewed-by: Gautham R. Shenoy <gautham.shenoy@amd.com>
Link: https://lore.kernel.org/r/20220810223313.386614-1-libo.chen@oracle.com
(cherry picked from commit 39afe5d6fc59237ff7738bf3ede5a8856822d59d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/sched/fair.c
diff --cc kernel/sched/fair.c
index 6938b0e44bc8,f5da01a6b35a..000000000000
--- a/kernel/sched/fair.c
+++ b/kernel/sched/fair.c
@@@ -6094,8 -6581,8 +6094,13 @@@ static int wake_affine(struct sched_dom
  	if (sched_feat(WA_WEIGHT) && target == nr_cpumask_bits)
  		target = wake_affine_weight(sd, p, this_cpu, prev_cpu, sync);
  
++<<<<<<< HEAD
 +	schedstat_inc(p->se.statistics.nr_wakeups_affine_attempts);
 +	if (target == nr_cpumask_bits)
++=======
+ 	schedstat_inc(p->stats.nr_wakeups_affine_attempts);
+ 	if (target != this_cpu)
++>>>>>>> 39afe5d6fc59 (sched/fair: Fix inaccurate tally of ttwu_move_affine)
  		return prev_cpu;
  
  	schedstat_inc(sd->ttwu_move_affine);
* Unmerged path kernel/sched/fair.c
