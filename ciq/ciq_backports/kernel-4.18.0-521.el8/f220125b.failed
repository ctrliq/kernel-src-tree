x86/retbleed: Add __x86_return_thunk alignment checks

jira LE-1907
cve CVE-2023-20569
Rebuild_History Non-Buildable kernel-4.18.0-521.el8
commit-author Borislav Petkov (AMD) <bp@alien8.de>
commit f220125b999b2c9694149c6bda2798d8096f47ed
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-521.el8/f220125b.failed

Add a linker assertion and compute the 0xcc padding dynamically so that
__x86_return_thunk is always cacheline-aligned. Leave the SYM_START()
macro in as the untraining doesn't need ENDBR annotations anyway.

	Suggested-by: Andrew Cooper <andrew.cooper3@citrix.com>
	Signed-off-by: Borislav Petkov (AMD) <bp@alien8.de>
	Reviewed-by: Andrew Cooper <andrew.cooper3@citrix.com>
Link: https://lore.kernel.org/r/20230515140726.28689-1-bp@alien8.de
(cherry picked from commit f220125b999b2c9694149c6bda2798d8096f47ed)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kernel/vmlinux.lds.S
diff --cc arch/x86/kernel/vmlinux.lds.S
index 6df2973aa8ce,03c885d3640f..000000000000
--- a/arch/x86/kernel/vmlinux.lds.S
+++ b/arch/x86/kernel/vmlinux.lds.S
@@@ -441,12 -508,8 +441,20 @@@ INIT_PER_CPU(irq_stack_backing_store)
             "fixed_percpu_data is not at start of per-cpu area");
  #endif
  
++<<<<<<< HEAD
 +#endif /* CONFIG_X86_32 */
 +
 +#ifdef CONFIG_KEXEC_CORE
 +#include <asm/kexec.h>
 +
 +. = ASSERT(kexec_control_code_size <= KEXEC_CONTROL_CODE_MAX_SIZE,
 +           "kexec control code size is too big");
 +#endif
 +
++=======
+ #ifdef CONFIG_RETHUNK
+ . = ASSERT((__x86_return_thunk & 0x3f) == 0, "__x86_return_thunk not cacheline-aligned");
+ #endif
+ 
+ #endif /* CONFIG_X86_64 */
++>>>>>>> f220125b999b (x86/retbleed: Add __x86_return_thunk alignment checks)
* Unmerged path arch/x86/kernel/vmlinux.lds.S
diff --git a/arch/x86/lib/retpoline.S b/arch/x86/lib/retpoline.S
index ce2b806fe45d..91ed3cb76f4d 100644
--- a/arch/x86/lib/retpoline.S
+++ b/arch/x86/lib/retpoline.S
@@ -65,7 +65,7 @@ GENERATE_THUNK(r15)
  *    from re-poisioning the BTB prediction.
  */
 	.align 64
-	.skip 63, 0xcc
+	.skip 64 - (__x86_return_thunk - zen_untrain_ret), 0xcc
 SYM_START(zen_untrain_ret, SYM_L_GLOBAL, SYM_A_NONE)
 	ANNOTATE_NOENDBR
 	/*
