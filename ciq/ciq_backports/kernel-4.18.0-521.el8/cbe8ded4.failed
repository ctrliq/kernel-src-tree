x86/srso: Fix build breakage with the LLVM linker

jira LE-1907
cve CVE-2023-20569
Rebuild_History Non-Buildable kernel-4.18.0-521.el8
commit-author Nick Desaulniers <ndesaulniers@google.com>
commit cbe8ded48b939b9d55d2c5589ab56caa7b530709
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-521.el8/cbe8ded4.failed

The assertion added to verify the difference in bits set of the
addresses of srso_untrain_ret_alias() and srso_safe_ret_alias() would fail
to link in LLVM's ld.lld linker with the following error:

  ld.lld: error: ./arch/x86/kernel/vmlinux.lds:210: at least one side of
  the expression must be absolute
  ld.lld: error: ./arch/x86/kernel/vmlinux.lds:211: at least one side of
  the expression must be absolute

Use ABSOLUTE to evaluate the expression referring to at least one of the
symbols so that LLD can evaluate the linker script.

Also, add linker version info to the comment about XOR being unsupported
in either ld.bfd or ld.lld until somewhat recently.

Fixes: fb3bd914b3ec ("x86/srso: Add a Speculative RAS Overflow mitigation")
Closes: https://lore.kernel.org/llvm/CA+G9fYsdUeNu-gwbs0+T6XHi4hYYk=Y9725-wFhZ7gJMspLDRA@mail.gmail.com/
	Reported-by: Nathan Chancellor <nathan@kernel.org>
	Reported-by: Daniel Kolesa <daniel@octaforge.org>
	Reported-by: Naresh Kamboju <naresh.kamboju@linaro.org>
	Suggested-by: Sven Volkinsfeld <thyrc@gmx.net>
	Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>
	Signed-off-by: Borislav Petkov (AMD) <bp@alien8.de>
Link: https://github.com/ClangBuiltLinux/linux/issues/1907
Link: https://lore.kernel.org/r/20230809-gds-v1-1-eaac90b0cbcc@google.com
(cherry picked from commit cbe8ded48b939b9d55d2c5589ab56caa7b530709)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kernel/vmlinux.lds.S
diff --cc arch/x86/kernel/vmlinux.lds.S
index 6df2973aa8ce,ef06211bae4c..000000000000
--- a/arch/x86/kernel/vmlinux.lds.S
+++ b/arch/x86/kernel/vmlinux.lds.S
@@@ -441,12 -522,25 +441,32 @@@ INIT_PER_CPU(irq_stack_backing_store)
             "fixed_percpu_data is not at start of per-cpu area");
  #endif
  
 -#ifdef CONFIG_RETHUNK
 -. = ASSERT((__ret & 0x3f) == 0, "__ret not cacheline-aligned");
 -. = ASSERT((srso_safe_ret & 0x3f) == 0, "srso_safe_ret not cacheline-aligned");
 +#endif /* CONFIG_X86_32 */
 +
 +#ifdef CONFIG_KEXEC_CORE
 +#include <asm/kexec.h>
 +
 +. = ASSERT(kexec_control_code_size <= KEXEC_CONTROL_CODE_MAX_SIZE,
 +           "kexec control code size is too big");
  #endif
  
++<<<<<<< HEAD
++=======
+ #ifdef CONFIG_CPU_SRSO
+ /*
+  * GNU ld cannot do XOR until 2.41.
+  * https://sourceware.org/git/?p=binutils-gdb.git;a=commit;h=f6f78318fca803c4907fb8d7f6ded8295f1947b1
+  *
+  * LLVM lld cannot do XOR until lld-17.
+  * https://github.com/llvm/llvm-project/commit/fae96104d4378166cbe5c875ef8ed808a356f3fb
+  *
+  * Instead do: (A | B) - (A & B) in order to compute the XOR
+  * of the two function addresses:
+  */
+ . = ASSERT(((ABSOLUTE(srso_untrain_ret_alias) | srso_safe_ret_alias) -
+ 		(ABSOLUTE(srso_untrain_ret_alias) & srso_safe_ret_alias)) == ((1 << 2) | (1 << 8) | (1 << 14) | (1 << 20)),
+ 		"SRSO function pair won't alias");
+ #endif
+ 
+ #endif /* CONFIG_X86_64 */
++>>>>>>> cbe8ded48b93 (x86/srso: Fix build breakage with the LLVM linker)
* Unmerged path arch/x86/kernel/vmlinux.lds.S
