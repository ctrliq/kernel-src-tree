net/mlx5e: Introduce TIR create/destroy API in rx_res

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-383.el8
commit-author Tariq Toukan <tariqt@nvidia.com>
commit fc651ff9105adb44261774482380ee5f86ac24d9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-383.el8/fc651ff9.failed

Take TIR control operations in rx_res into functions.
This is in preparation to supporting on-demand TIR operations in
downstream patches.

	Signed-off-by: Tariq Toukan <tariqt@nvidia.com>
	Reviewed-by: Maxim Mikityanskiy <maximmi@nvidia.com>
	Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
(cherry picked from commit fc651ff9105adb44261774482380ee5f86ac24d9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en/rx_res.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en/rx_res.c
index 80d9748a46f1,dfa492a14928..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en/rx_res.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en/rx_res.c
@@@ -117,13 -117,53 +117,57 @@@ static void mlx5e_rx_res_rss_params_ini
  			mlx5e_rss_get_default_tt_config(tt).rx_hash_fields;
  }
  
- static int mlx5e_rx_res_rss_init(struct mlx5e_rx_res *res,
- 				 const struct mlx5e_lro_param *init_lro_param)
+ static void mlx5e_rx_res_rss_destroy_tir(struct mlx5e_rx_res *res,
+ 					 enum mlx5_traffic_types tt,
+ 					 bool inner)
+ {
+ 	struct mlx5e_tir *tir;
+ 
+ 	tir = inner ? &res->rss[tt].inner_indir_tir : &res->rss[tt].indir_tir;
+ 	mlx5e_tir_destroy(tir);
+ }
+ 
+ static int mlx5e_rx_res_rss_create_tir(struct mlx5e_rx_res *res,
+ 				       struct mlx5e_tir_builder *builder,
+ 				       enum mlx5_traffic_types tt,
+ 				       const struct mlx5e_lro_param *init_lro_param,
+ 				       bool inner)
  {
  	bool inner_ft_support = res->features & MLX5E_RX_RES_FEATURE_INNER_FT;
++<<<<<<< HEAD
 +	enum mlx5e_traffic_types tt, max_tt;
++=======
+ 	struct mlx5e_rss_params_traffic_type rss_tt;
+ 	struct mlx5e_tir *tir;
+ 	u32 rqtn;
+ 	int err;
+ 
+ 	tir = inner ? &res->rss[tt].inner_indir_tir : &res->rss[tt].indir_tir;
+ 
+ 	rqtn = mlx5e_rqt_get_rqtn(&res->indir_rqt);
+ 	mlx5e_tir_builder_build_rqt(builder, res->mdev->mlx5e_res.hw_objs.td.tdn,
+ 				    rqtn, inner_ft_support);
+ 	mlx5e_tir_builder_build_lro(builder, init_lro_param);
+ 	rss_tt = mlx5e_rx_res_rss_get_current_tt_config(res, tt);
+ 	mlx5e_tir_builder_build_rss(builder, &res->rss_params.hash, &rss_tt, inner);
+ 
+ 	err = mlx5e_tir_init(tir, builder, res->mdev, true);
+ 	if (err) {
+ 		mlx5_core_warn(res->mdev, "Failed to create %sindirect TIR: err = %d, tt = %d\n",
+ 			       inner ? "inner " : "", err, tt);
+ 		return err;
+ 	}
+ 
+ 	return 0;
+ }
+ 
+ static int mlx5e_rx_res_rss_create_tirs(struct mlx5e_rx_res *res,
+ 					const struct mlx5e_lro_param *init_lro_param,
+ 					bool inner)
+ {
+ 	enum mlx5_traffic_types tt, max_tt;
++>>>>>>> fc651ff9105a (net/mlx5e: Introduce TIR create/destroy API in rx_res)
  	struct mlx5e_tir_builder *builder;
- 	u32 indir_rqtn;
  	int err;
  
  	builder = mlx5e_tir_builder_alloc(false);
@@@ -337,14 -367,10 +371,17 @@@ out
  
  static void mlx5e_rx_res_rss_destroy(struct mlx5e_rx_res *res)
  {
++<<<<<<< HEAD
 +	enum mlx5e_traffic_types tt;
 +
 +	for (tt = 0; tt < MLX5E_NUM_INDIR_TIRS; tt++)
 +		mlx5e_tir_destroy(&res->rss[tt].indir_tir);
++=======
+ 	mlx5e_rx_res_rss_destroy_tirs(res, false);
++>>>>>>> fc651ff9105a (net/mlx5e: Introduce TIR create/destroy API in rx_res)
  
  	if (res->features & MLX5E_RX_RES_FEATURE_INNER_FT)
- 		for (tt = 0; tt < MLX5E_NUM_INDIR_TIRS; tt++)
- 			mlx5e_tir_destroy(&res->rss[tt].inner_indir_tir);
+ 		mlx5e_rx_res_rss_destroy_tirs(res, true);
  
  	mlx5e_rqt_destroy(&res->indir_rqt);
  }
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en/rx_res.c
