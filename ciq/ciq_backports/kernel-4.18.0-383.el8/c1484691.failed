ice: Propagate error codes

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-383.el8
commit-author Tony Nguyen <anthony.l.nguyen@intel.com>
commit c14846914ed6b575752417cf04bc145be15236c1
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-383.el8/c1484691.failed

As all functions now return standard error codes, propagate the values
being returned instead of converting them to generic values.

	Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
	Tested-by: Gurucharan G <gurucharanx.g@intel.com>
(cherry picked from commit c14846914ed6b575752417cf04bc145be15236c1)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/intel/ice/ice_ethtool.c
#	drivers/net/ethernet/intel/ice/ice_lib.c
#	drivers/net/ethernet/intel/ice/ice_main.c
#	drivers/net/ethernet/intel/ice/ice_tc_lib.c
#	drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c
diff --cc drivers/net/ethernet/intel/ice/ice_ethtool.c
index be50950576d4,aefd9c3d450b..000000000000
--- a/drivers/net/ethernet/intel/ice/ice_ethtool.c
+++ b/drivers/net/ethernet/intel/ice/ice_ethtool.c
@@@ -276,22 -284,18 +276,30 @@@ ice_get_eeprom(struct net_device *netde
  	if (!buf)
  		return -ENOMEM;
  
 -	ret = ice_acquire_nvm(hw, ICE_RES_READ);
 -	if (ret) {
 +	status = ice_acquire_nvm(hw, ICE_RES_READ);
 +	if (status) {
  		dev_err(dev, "ice_acquire_nvm failed, err %d aq_err %s\n",
++<<<<<<< HEAD
 +			status,
 +			ice_aq_str(hw->adminq.sq_last_status));
 +		ret = -EIO;
++=======
+ 			ret, ice_aq_str(hw->adminq.sq_last_status));
++>>>>>>> c14846914ed6 (ice: Propagate error codes)
  		goto out;
  	}
  
 -	ret = ice_read_flat_nvm(hw, eeprom->offset, &eeprom->len, buf,
 -				false);
 -	if (ret) {
 +	status = ice_read_flat_nvm(hw, eeprom->offset, &eeprom->len, buf,
 +				   false);
 +	if (status) {
  		dev_err(dev, "ice_read_flat_nvm failed, err %d aq_err %s\n",
++<<<<<<< HEAD
 +			status,
 +			ice_aq_str(hw->adminq.sq_last_status));
 +		ret = -EIO;
++=======
+ 			ret, ice_aq_str(hw->adminq.sq_last_status));
++>>>>>>> c14846914ed6 (ice: Propagate error codes)
  		goto release;
  	}
  
@@@ -1081,12 -1073,10 +1089,17 @@@ ice_get_fecparam(struct net_device *net
  	if (!caps)
  		return -ENOMEM;
  
++<<<<<<< HEAD
 +	status = ice_aq_get_phy_caps(pi, false, ICE_AQC_REPORT_TOPO_CAP_MEDIA,
 +				     caps, NULL);
 +	if (status) {
 +		err = -EAGAIN;
++=======
+ 	err = ice_aq_get_phy_caps(pi, false, ICE_AQC_REPORT_TOPO_CAP_MEDIA,
+ 				  caps, NULL);
+ 	if (err)
++>>>>>>> c14846914ed6 (ice: Propagate error codes)
  		goto done;
- 	}
  
  	/* Set supported/configured FEC modes based on PHY capability */
  	if (caps->caps & ICE_AQC_PHY_EN_AUTO_FEC)
@@@ -1981,12 -1981,10 +1994,17 @@@ ice_get_link_ksettings(struct net_devic
  	if (!caps)
  		return -ENOMEM;
  
++<<<<<<< HEAD
 +	status = ice_aq_get_phy_caps(vsi->port_info, false,
 +				     ICE_AQC_REPORT_ACTIVE_CFG, caps, NULL);
 +	if (status) {
 +		err = -EIO;
++=======
+ 	err = ice_aq_get_phy_caps(vsi->port_info, false,
+ 				  ICE_AQC_REPORT_ACTIVE_CFG, caps, NULL);
+ 	if (err)
++>>>>>>> c14846914ed6 (ice: Propagate error codes)
  		goto done;
- 	}
  
  	/* Set the advertised flow control based on the PHY capability */
  	if ((caps->caps & ICE_AQC_PHY_EN_TX_LINK_PAUSE) &&
@@@ -2018,12 -2016,10 +2036,17 @@@
  	    caps->link_fec_options & ICE_AQC_PHY_FEC_25G_RS_544_REQ)
  		ethtool_link_ksettings_add_link_mode(ks, advertising, FEC_RS);
  
++<<<<<<< HEAD
 +	status = ice_aq_get_phy_caps(vsi->port_info, false,
 +				     ICE_AQC_REPORT_TOPO_CAP_MEDIA, caps, NULL);
 +	if (status) {
 +		err = -EIO;
++=======
+ 	err = ice_aq_get_phy_caps(vsi->port_info, false,
+ 				  ICE_AQC_REPORT_TOPO_CAP_MEDIA, caps, NULL);
+ 	if (err)
++>>>>>>> c14846914ed6 (ice: Propagate error codes)
  		goto done;
- 	}
  
  	/* Set supported FEC modes based on PHY capability */
  	ethtool_link_ksettings_add_link_mode(ks, supported, FEC_NONE);
@@@ -2225,15 -2220,13 +2248,20 @@@ ice_set_link_ksettings(struct net_devic
  
  	/* Get the PHY capabilities based on media */
  	if (ice_fw_supports_report_dflt_cfg(pi->hw))
 -		err = ice_aq_get_phy_caps(pi, false, ICE_AQC_REPORT_DFLT_CFG,
 -					  phy_caps, NULL);
 +		status = ice_aq_get_phy_caps(pi, false, ICE_AQC_REPORT_DFLT_CFG,
 +					     phy_caps, NULL);
  	else
++<<<<<<< HEAD
 +		status = ice_aq_get_phy_caps(pi, false, ICE_AQC_REPORT_TOPO_CAP_MEDIA,
 +					     phy_caps, NULL);
 +	if (status) {
 +		err = -EIO;
++=======
+ 		err = ice_aq_get_phy_caps(pi, false, ICE_AQC_REPORT_TOPO_CAP_MEDIA,
+ 					  phy_caps, NULL);
+ 	if (err)
++>>>>>>> c14846914ed6 (ice: Propagate error codes)
  		goto done;
- 	}
  
  	/* save autoneg out of ksettings */
  	autoneg = copy_ks.base.autoneg;
@@@ -2299,11 -2292,9 +2327,15 @@@
  
  	/* Call to get the current link speed */
  	pi->phy.get_link_info = true;
++<<<<<<< HEAD
 +	status = ice_get_link_status(pi, &linkup);
 +	if (status) {
 +		err = -EIO;
++=======
+ 	err = ice_get_link_status(pi, &linkup);
+ 	if (err)
++>>>>>>> c14846914ed6 (ice: Propagate error codes)
  		goto done;
- 	}
  
  	curr_link_speed = pi->phy.link_info.link_speed;
  	adv_link_speed = ice_ksettings_find_adv_link_speed(ks);
@@@ -2372,10 -2363,9 +2404,9 @@@
  	}
  
  	/* make the aq call */
 -	err = ice_aq_set_phy_cfg(&pf->hw, pi, &config, NULL);
 -	if (err) {
 +	status = ice_aq_set_phy_cfg(&pf->hw, pi, &config, NULL);
 +	if (status) {
  		netdev_info(netdev, "Set phy config failed,\n");
- 		err = -EIO;
  		goto done;
  	}
  
@@@ -3020,11 -3013,11 +3051,11 @@@ ice_set_pauseparam(struct net_device *n
  		return -ENOMEM;
  
  	/* Get current PHY config */
 -	err = ice_aq_get_phy_caps(pi, false, ICE_AQC_REPORT_ACTIVE_CFG, pcaps,
 -				  NULL);
 -	if (err) {
 +	status = ice_aq_get_phy_caps(pi, false, ICE_AQC_REPORT_ACTIVE_CFG, pcaps,
 +				     NULL);
 +	if (status) {
  		kfree(pcaps);
- 		return -EIO;
+ 		return err;
  	}
  
  	is_an = ice_is_phy_caps_an_enabled(pcaps) ? AUTONEG_ENABLE :
diff --cc drivers/net/ethernet/intel/ice/ice_lib.c
index 68fc7a57568e,1999b12708de..000000000000
--- a/drivers/net/ethernet/intel/ice/ice_lib.c
+++ b/drivers/net/ethernet/intel/ice/ice_lib.c
@@@ -1633,16 -1754,16 +1633,20 @@@ int ice_vsi_kill_vlan(struct ice_vsi *v
  
  	dev = ice_pf_to_dev(pf);
  
 -	err = ice_fltr_remove_vlan(vsi, vid, ICE_FWD_TO_VSI);
 -	if (!err) {
 +	status = ice_fltr_remove_vlan(vsi, vid, ICE_FWD_TO_VSI);
 +	if (!status) {
  		vsi->num_vlan--;
 -	} else if (err == -ENOENT) {
 +	} else if (status == ICE_ERR_DOES_NOT_EXIST) {
  		dev_dbg(dev, "Failed to remove VLAN %d on VSI %i, it does not exist, error: %d\n",
 -			vid, vsi->vsi_num, err);
 -		err = 0;
 +			vid, vsi->vsi_num, status);
  	} else {
  		dev_err(dev, "Error removing VLAN %d on vsi %i error: %d\n",
++<<<<<<< HEAD
 +			vid, vsi->vsi_num, status);
 +		err = -EIO;
++=======
+ 			vid, vsi->vsi_num, err);
++>>>>>>> c14846914ed6 (ice: Propagate error codes)
  	}
  
  	return err;
@@@ -2002,12 -2122,10 +2006,16 @@@ int ice_vsi_manage_vlan_insertion(struc
  
  	ctxt->info.valid_sections = cpu_to_le16(ICE_AQ_VSI_PROP_VLAN_VALID);
  
 -	ret = ice_update_vsi(hw, vsi->idx, ctxt, NULL);
 -	if (ret) {
 +	status = ice_update_vsi(hw, vsi->idx, ctxt, NULL);
 +	if (status) {
  		dev_err(ice_pf_to_dev(vsi->back), "update VSI for VLAN insert failed, err %d aq_err %s\n",
++<<<<<<< HEAD
 +			status,
 +			ice_aq_str(hw->adminq.sq_last_status));
 +		ret = -EIO;
++=======
+ 			ret, ice_aq_str(hw->adminq.sq_last_status));
++>>>>>>> c14846914ed6 (ice: Propagate error codes)
  		goto out;
  	}
  
@@@ -2055,12 -2172,10 +2063,16 @@@ int ice_vsi_manage_vlan_stripping(struc
  
  	ctxt->info.valid_sections = cpu_to_le16(ICE_AQ_VSI_PROP_VLAN_VALID);
  
 -	ret = ice_update_vsi(hw, vsi->idx, ctxt, NULL);
 -	if (ret) {
 +	status = ice_update_vsi(hw, vsi->idx, ctxt, NULL);
 +	if (status) {
  		dev_err(ice_pf_to_dev(vsi->back), "update VSI for VLAN strip failed, ena = %d err %d aq_err %s\n",
++<<<<<<< HEAD
 +			ena, status,
 +			ice_aq_str(hw->adminq.sq_last_status));
 +		ret = -EIO;
++=======
+ 			ena, ret, ice_aq_str(hw->adminq.sq_last_status));
++>>>>>>> c14846914ed6 (ice: Propagate error codes)
  		goto out;
  	}
  
@@@ -3375,20 -3694,22 +3387,23 @@@ int ice_vsi_cfg_tc(struct ice_vsi *vsi
  
  	/* must to indicate which section of VSI context are being modified */
  	ctx->info.valid_sections = cpu_to_le16(ICE_AQ_VSI_PROP_RXQ_MAP_VALID);
 -	ret = ice_update_vsi(&pf->hw, vsi->idx, ctx, NULL);
 -	if (ret) {
 +	status = ice_update_vsi(&pf->hw, vsi->idx, ctx, NULL);
 +	if (status) {
  		dev_info(dev, "Failed VSI Update\n");
- 		ret = -EIO;
  		goto out;
  	}
  
 -	if (vsi->type == ICE_VSI_PF &&
 -	    test_bit(ICE_FLAG_TC_MQPRIO, pf->flags))
 -		ret = ice_cfg_vsi_lan(vsi->port_info, vsi->idx, 1, max_txqs);
 -	else
 -		ret = ice_cfg_vsi_lan(vsi->port_info, vsi->idx,
 -				      vsi->tc_cfg.ena_tc, max_txqs);
 +	status = ice_cfg_vsi_lan(vsi->port_info, vsi->idx, vsi->tc_cfg.ena_tc,
 +				 max_txqs);
  
 -	if (ret) {
 +	if (status) {
  		dev_err(dev, "VSI %d failed TC config, error %d\n",
++<<<<<<< HEAD
 +			vsi->vsi_num, status);
 +		ret = -EIO;
++=======
+ 			vsi->vsi_num, ret);
++>>>>>>> c14846914ed6 (ice: Propagate error codes)
  		goto out;
  	}
  	ice_vsi_update_q_map(vsi, ctx);
diff --cc drivers/net/ethernet/intel/ice/ice_main.c
index 200ab38e74ce,0c425d24889f..000000000000
--- a/drivers/net/ethernet/intel/ice/ice_main.c
+++ b/drivers/net/ethernet/intel/ice/ice_main.c
@@@ -1841,12 -1872,11 +1830,11 @@@ static int ice_init_nvm_phy_type(struc
  	if (!pcaps)
  		return -ENOMEM;
  
 -	err = ice_aq_get_phy_caps(pi, false, ICE_AQC_REPORT_TOPO_CAP_NO_MEDIA,
 -				  pcaps, NULL);
 +	status = ice_aq_get_phy_caps(pi, false, ICE_AQC_REPORT_TOPO_CAP_NO_MEDIA, pcaps,
 +				     NULL);
  
 -	if (err) {
 +	if (status) {
  		dev_err(ice_pf_to_dev(pf), "Get PHY capability failed.\n");
- 		err = -EIO;
  		goto out;
  	}
  
@@@ -1956,14 -1985,13 +1944,13 @@@ static int ice_init_phy_user_cfg(struc
  		return -ENOMEM;
  
  	if (ice_fw_supports_report_dflt_cfg(pi->hw))
 -		err = ice_aq_get_phy_caps(pi, false, ICE_AQC_REPORT_DFLT_CFG,
 -					  pcaps, NULL);
 +		status = ice_aq_get_phy_caps(pi, false, ICE_AQC_REPORT_DFLT_CFG,
 +					     pcaps, NULL);
  	else
 -		err = ice_aq_get_phy_caps(pi, false, ICE_AQC_REPORT_TOPO_CAP_MEDIA,
 -					  pcaps, NULL);
 -	if (err) {
 +		status = ice_aq_get_phy_caps(pi, false, ICE_AQC_REPORT_TOPO_CAP_MEDIA,
 +					     pcaps, NULL);
 +	if (status) {
  		dev_err(ice_pf_to_dev(pf), "Get PHY capability failed.\n");
- 		err = -EIO;
  		goto err_out;
  	}
  
@@@ -2038,12 -2065,11 +2025,16 @@@ static int ice_configure_phy(struct ice
  		return -ENOMEM;
  
  	/* Get current PHY config */
 -	err = ice_aq_get_phy_caps(pi, false, ICE_AQC_REPORT_ACTIVE_CFG, pcaps,
 -				  NULL);
 -	if (err) {
 +	status = ice_aq_get_phy_caps(pi, false, ICE_AQC_REPORT_ACTIVE_CFG, pcaps,
 +				     NULL);
 +	if (status) {
  		dev_err(dev, "Failed to get PHY configuration, VSI %d error %d\n",
++<<<<<<< HEAD
 +			vsi->vsi_num, status);
 +		err = -EIO;
++=======
+ 			vsi->vsi_num, err);
++>>>>>>> c14846914ed6 (ice: Propagate error codes)
  		goto done;
  	}
  
@@@ -2057,15 -2083,14 +2048,19 @@@
  	/* Use PHY topology as baseline for configuration */
  	memset(pcaps, 0, sizeof(*pcaps));
  	if (ice_fw_supports_report_dflt_cfg(pi->hw))
 -		err = ice_aq_get_phy_caps(pi, false, ICE_AQC_REPORT_DFLT_CFG,
 -					  pcaps, NULL);
 +		status = ice_aq_get_phy_caps(pi, false, ICE_AQC_REPORT_DFLT_CFG,
 +					     pcaps, NULL);
  	else
 -		err = ice_aq_get_phy_caps(pi, false, ICE_AQC_REPORT_TOPO_CAP_MEDIA,
 -					  pcaps, NULL);
 -	if (err) {
 +		status = ice_aq_get_phy_caps(pi, false, ICE_AQC_REPORT_TOPO_CAP_MEDIA,
 +					     pcaps, NULL);
 +	if (status) {
  		dev_err(dev, "Failed to get PHY caps, VSI %d error %d\n",
++<<<<<<< HEAD
 +			vsi->vsi_num, status);
 +		err = -EIO;
++=======
+ 			vsi->vsi_num, err);
++>>>>>>> c14846914ed6 (ice: Propagate error codes)
  		goto done;
  	}
  
@@@ -2118,12 -2143,10 +2113,19 @@@
  	/* Enable link and link update */
  	cfg->caps |= ICE_AQ_PHY_ENA_AUTO_LINK_UPDT | ICE_AQ_PHY_ENA_LINK;
  
++<<<<<<< HEAD
 +	status = ice_aq_set_phy_cfg(&pf->hw, pi, cfg, NULL);
 +	if (status) {
 +		dev_err(dev, "Failed to set phy config, VSI %d error %d\n",
 +			vsi->vsi_num, status);
 +		err = -EIO;
 +	}
++=======
+ 	err = ice_aq_set_phy_cfg(&pf->hw, pi, cfg, NULL);
+ 	if (err)
+ 		dev_err(dev, "Failed to set phy config, VSI %d error %d\n",
+ 			vsi->vsi_num, err);
++>>>>>>> c14846914ed6 (ice: Propagate error codes)
  
  	kfree(cfg);
  done:
@@@ -3380,11 -3520,12 +3382,9 @@@ static int ice_setup_pf_sw(struct ice_p
  	if (!vsi)
  		return -ENOMEM;
  
 -	/* init channel list */
 -	INIT_LIST_HEAD(&vsi->ch_list);
 -
  	status = ice_cfg_netdev(vsi);
- 	if (status) {
- 		status = -ENODEV;
+ 	if (status)
  		goto unroll_vsi_setup;
- 	}
  	/* netdev has to be configured before setting frame size */
  	ice_vsi_cfg_frame_size(vsi);
  
@@@ -3399,9 -3547,8 +3399,8 @@@
  
  	status = ice_set_cpu_rx_rmap(vsi);
  	if (status) {
 -		dev_err(dev, "Failed to set CPU Rx map VSI %d error %d\n",
 +		dev_err(ice_pf_to_dev(pf), "Failed to set CPU Rx map VSI %d error %d\n",
  			vsi->vsi_num, status);
- 		status = -EINVAL;
  		goto unroll_napi_add;
  	}
  	status = ice_init_mac_fltr(pf);
@@@ -6347,12 -6520,11 +6344,17 @@@ static int ice_vsi_rebuild_by_type(stru
  		}
  
  		/* replay filters for the VSI */
 -		err = ice_replay_vsi(&pf->hw, vsi->idx);
 -		if (err) {
 +		status = ice_replay_vsi(&pf->hw, vsi->idx);
 +		if (status) {
  			dev_err(dev, "replay VSI failed, error %d, VSI index %d, type %s\n",
++<<<<<<< HEAD
 +				status, vsi->idx,
 +				ice_vsi_type_str(type));
 +			return -EIO;
++=======
+ 				err, vsi->idx, ice_vsi_type_str(type));
+ 			return err;
++>>>>>>> c14846914ed6 (ice: Propagate error codes)
  		}
  
  		/* Re-map HW VSI number, using VSI handle that has been
@@@ -6747,14 -6927,11 +6749,18 @@@ int ice_set_rss_lut(struct ice_vsi *vsi
  	params.lut = lut;
  
  	status = ice_aq_set_rss_lut(hw, &params);
- 	if (status) {
+ 	if (status)
  		dev_err(ice_pf_to_dev(vsi->back), "Cannot set RSS lut, err %d aq_err %s\n",
++<<<<<<< HEAD
 +			status,
 +			ice_aq_str(hw->adminq.sq_last_status));
 +		return -EIO;
 +	}
++=======
+ 			status, ice_aq_str(hw->adminq.sq_last_status));
++>>>>>>> c14846914ed6 (ice: Propagate error codes)
  
- 	return 0;
+ 	return status;
  }
  
  /**
@@@ -6773,14 -6950,11 +6779,18 @@@ int ice_set_rss_key(struct ice_vsi *vsi
  		return -EINVAL;
  
  	status = ice_aq_set_rss_key(hw, vsi->idx, (struct ice_aqc_get_set_rss_keys *)seed);
- 	if (status) {
+ 	if (status)
  		dev_err(ice_pf_to_dev(vsi->back), "Cannot set RSS key, err %d aq_err %s\n",
++<<<<<<< HEAD
 +			status,
 +			ice_aq_str(hw->adminq.sq_last_status));
 +		return -EIO;
 +	}
++=======
+ 			status, ice_aq_str(hw->adminq.sq_last_status));
++>>>>>>> c14846914ed6 (ice: Propagate error codes)
  
- 	return 0;
+ 	return status;
  }
  
  /**
@@@ -6806,14 -6980,11 +6816,18 @@@ int ice_get_rss_lut(struct ice_vsi *vsi
  	params.lut = lut;
  
  	status = ice_aq_get_rss_lut(hw, &params);
- 	if (status) {
+ 	if (status)
  		dev_err(ice_pf_to_dev(vsi->back), "Cannot get RSS lut, err %d aq_err %s\n",
++<<<<<<< HEAD
 +			status,
 +			ice_aq_str(hw->adminq.sq_last_status));
 +		return -EIO;
 +	}
++=======
+ 			status, ice_aq_str(hw->adminq.sq_last_status));
++>>>>>>> c14846914ed6 (ice: Propagate error codes)
  
- 	return 0;
+ 	return status;
  }
  
  /**
@@@ -6832,14 -7003,11 +6846,18 @@@ int ice_get_rss_key(struct ice_vsi *vsi
  		return -EINVAL;
  
  	status = ice_aq_get_rss_key(hw, vsi->idx, (struct ice_aqc_get_set_rss_keys *)seed);
- 	if (status) {
+ 	if (status)
  		dev_err(ice_pf_to_dev(vsi->back), "Cannot get RSS key, err %d aq_err %s\n",
++<<<<<<< HEAD
 +			status,
 +			ice_aq_str(hw->adminq.sq_last_status));
 +		return -EIO;
 +	}
++=======
+ 			status, ice_aq_str(hw->adminq.sq_last_status));
++>>>>>>> c14846914ed6 (ice: Propagate error codes)
  
- 	return 0;
+ 	return status;
  }
  
  /**
@@@ -6899,12 -7066,10 +6917,16 @@@ static int ice_vsi_update_bridge_mode(s
  		ctxt->info.sw_flags &= ~ICE_AQ_VSI_SW_FLAG_ALLOW_LB;
  	ctxt->info.valid_sections = cpu_to_le16(ICE_AQ_VSI_PROP_SW_VALID);
  
 -	ret = ice_update_vsi(hw, vsi->idx, ctxt, NULL);
 -	if (ret) {
 +	status = ice_update_vsi(hw, vsi->idx, ctxt, NULL);
 +	if (status) {
  		dev_err(ice_pf_to_dev(vsi->back), "update VSI for bridge mode failed, bmode = %d err %d aq_err %s\n",
++<<<<<<< HEAD
 +			bmode, status,
 +			ice_aq_str(hw->adminq.sq_last_status));
 +		ret = -EIO;
++=======
+ 			bmode, ret, ice_aq_str(hw->adminq.sq_last_status));
++>>>>>>> c14846914ed6 (ice: Propagate error codes)
  		goto out;
  	}
  	/* Update sw flags for book keeping */
@@@ -7119,11 -8326,10 +7141,18 @@@ int ice_open_internal(struct net_devic
  	netif_carrier_off(netdev);
  
  	pi = vsi->port_info;
++<<<<<<< HEAD
 +	status = ice_update_link_info(pi);
 +	if (status) {
 +		netdev_err(netdev, "Failed to get link info, error %d\n",
 +			   status);
 +		return -EIO;
++=======
+ 	err = ice_update_link_info(pi);
+ 	if (err) {
+ 		netdev_err(netdev, "Failed to get link info, error %d\n", err);
+ 		return err;
++>>>>>>> c14846914ed6 (ice: Propagate error codes)
  	}
  
  	ice_check_link_cfg_err(pf, pi->phy.link_info.link_cfg_err);
diff --cc drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c
index 3b25caebf610,61b2db3342ed..000000000000
--- a/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c
+++ b/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c
@@@ -677,12 -676,10 +677,16 @@@ static int ice_vsi_manage_pvid(struct i
  	info->valid_sections = cpu_to_le16(ICE_AQ_VSI_PROP_VLAN_VALID |
  					   ICE_AQ_VSI_PROP_SW_VALID);
  
 -	ret = ice_update_vsi(hw, vsi->idx, ctxt, NULL);
 -	if (ret) {
 +	status = ice_update_vsi(hw, vsi->idx, ctxt, NULL);
 +	if (status) {
  		dev_info(ice_hw_to_dev(hw), "update VSI for port VLAN failed, err %d aq_err %s\n",
++<<<<<<< HEAD
 +			 status,
 +			 ice_aq_str(hw->adminq.sq_last_status));
 +		ret = -EIO;
++=======
+ 			 ret, ice_aq_str(hw->adminq.sq_last_status));
++>>>>>>> c14846914ed6 (ice: Propagate error codes)
  		goto out;
  	}
  
@@@ -2943,12 -2940,10 +2947,16 @@@ int ice_set_vf_spoofchk(struct net_devi
  			   ICE_AQ_VSI_SEC_TX_PRUNE_ENA_S));
  	}
  
 -	ret = ice_update_vsi(&pf->hw, vf_vsi->idx, ctx, NULL);
 -	if (ret) {
 +	status = ice_update_vsi(&pf->hw, vf_vsi->idx, ctx, NULL);
 +	if (status) {
  		dev_err(dev, "Failed to %sable spoofchk on VF %d VSI %d\n error %d\n",
++<<<<<<< HEAD
 +			ena ? "en" : "dis", vf->vf_id, vf_vsi->vsi_num,
 +			status);
 +		ret = -EIO;
++=======
+ 			ena ? "en" : "dis", vf->vf_id, vf_vsi->vsi_num, ret);
++>>>>>>> c14846914ed6 (ice: Propagate error codes)
  		goto out;
  	}
  
@@@ -3803,11 -3796,10 +3811,16 @@@ ice_vc_add_mac_addr(struct ice_vf *vf, 
  		/* don't return since we might need to update
  		 * the primary MAC in ice_vfhw_mac_add() below
  		 */
 -	} else if (ret) {
 +		ret = -EEXIST;
 +	} else if (status) {
  		dev_err(dev, "Failed to add MAC %pM for VF %d\n, error %d\n",
++<<<<<<< HEAD
 +			mac_addr, vf->vf_id, status);
 +		return -EIO;
++=======
+ 			mac_addr, vf->vf_id, ret);
+ 		return ret;
++>>>>>>> c14846914ed6 (ice: Propagate error codes)
  	} else {
  		vf->num_mac++;
  	}
* Unmerged path drivers/net/ethernet/intel/ice/ice_tc_lib.c
diff --git a/drivers/net/ethernet/intel/ice/ice_base.c b/drivers/net/ethernet/intel/ice/ice_base.c
index 795adc3a77d2..e99bc4f87dec 100644
--- a/drivers/net/ethernet/intel/ice/ice_base.c
+++ b/drivers/net/ethernet/intel/ice/ice_base.c
@@ -756,7 +756,7 @@ ice_vsi_cfg_txq(struct ice_vsi *vsi, struct ice_tx_ring *ring,
 	if (status) {
 		dev_err(ice_pf_to_dev(pf), "Failed to set LAN Tx queue context, error: %d\n",
 			status);
-		return -ENODEV;
+		return status;
 	}
 
 	/* Add Tx Queue TEID into the VSI Tx ring from the
@@ -914,7 +914,7 @@ ice_vsi_stop_tx_ring(struct ice_vsi *vsi, enum ice_disq_rst_src rst_src,
 	} else if (status) {
 		dev_dbg(ice_pf_to_dev(vsi->back), "Failed to disable LAN Tx queues, error: %d\n",
 			status);
-		return -ENODEV;
+		return status;
 	}
 
 	return 0;
diff --git a/drivers/net/ethernet/intel/ice/ice_devlink.c b/drivers/net/ethernet/intel/ice/ice_devlink.c
index 212d0917749d..ca18cc03ba8a 100644
--- a/drivers/net/ethernet/intel/ice/ice_devlink.c
+++ b/drivers/net/ethernet/intel/ice/ice_devlink.c
@@ -271,7 +271,6 @@ static int ice_devlink_info_get(struct devlink *devlink,
 		dev_dbg(dev, "Failed to discover device capabilities, status %d aq_err %s\n",
 			status, ice_aq_str(hw->adminq.sq_last_status));
 		NL_SET_ERR_MSG_MOD(extack, "Unable to discover device capabilities");
-		err = -EIO;
 		goto out_free_ctx;
 	}
 
@@ -777,7 +776,7 @@ static int ice_devlink_nvm_snapshot(struct devlink *devlink,
 			status, hw->adminq.sq_last_status);
 		NL_SET_ERR_MSG_MOD(extack, "Failed to acquire NVM semaphore");
 		vfree(nvm_data);
-		return -EIO;
+		return status;
 	}
 
 	status = ice_read_flat_nvm(hw, 0, &nvm_size, nvm_data, false);
@@ -787,7 +786,7 @@ static int ice_devlink_nvm_snapshot(struct devlink *devlink,
 		NL_SET_ERR_MSG_MOD(extack, "Failed to read NVM contents");
 		ice_release_nvm(hw);
 		vfree(nvm_data);
-		return -EIO;
+		return status;
 	}
 
 	ice_release_nvm(hw);
@@ -833,7 +832,7 @@ ice_devlink_devcaps_snapshot(struct devlink *devlink,
 			status, hw->adminq.sq_last_status);
 		NL_SET_ERR_MSG_MOD(extack, "Failed to read device capabilities");
 		vfree(devcaps);
-		return -EIO;
+		return status;
 	}
 
 	*data = (u8 *)devcaps;
* Unmerged path drivers/net/ethernet/intel/ice/ice_ethtool.c
diff --git a/drivers/net/ethernet/intel/ice/ice_fw_update.c b/drivers/net/ethernet/intel/ice/ice_fw_update.c
index ff801f4064a0..3a89eba47ea2 100644
--- a/drivers/net/ethernet/intel/ice/ice_fw_update.c
+++ b/drivers/net/ethernet/intel/ice/ice_fw_update.c
@@ -698,7 +698,7 @@ int ice_flash_pldm_image(struct ice_pf *pf, const struct firmware *fw,
 			status,
 			ice_aq_str(hw->adminq.sq_last_status));
 		NL_SET_ERR_MSG_MOD(extack, "Failed to acquire device flash lock");
-		return -EIO;
+		return err;
 	}
 
 	err = pldmfw_flash_image(&priv.context, fw);
@@ -753,7 +753,7 @@ int ice_check_for_pending_update(struct ice_pf *pf, const char *component,
 	if (status) {
 		NL_SET_ERR_MSG_MOD(extack, "Unable to read device capabilities");
 		kfree(dev_caps);
-		return -EIO;
+		return err;
 	}
 
 	if (dev_caps->common_cap.nvm_update_pending_nvm) {
@@ -804,7 +804,7 @@ int ice_check_for_pending_update(struct ice_pf *pf, const char *component,
 			status,
 			ice_aq_str(hw->adminq.sq_last_status));
 		NL_SET_ERR_MSG_MOD(extack, "Failed to acquire device flash lock");
-		return -EIO;
+		return err;
 	}
 
 	pending |= ICE_AQC_NVM_REVERT_LAST_ACTIV;
* Unmerged path drivers/net/ethernet/intel/ice/ice_lib.c
* Unmerged path drivers/net/ethernet/intel/ice/ice_main.c
* Unmerged path drivers/net/ethernet/intel/ice/ice_tc_lib.c
* Unmerged path drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c
