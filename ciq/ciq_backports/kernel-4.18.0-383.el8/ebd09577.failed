lib/test: convert lib/test_list_sort.c to use KUnit

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-383.el8
commit-author Daniel Latypov <dlatypov@google.com>
commit ebd09577be6c15ee2d343cf60e5bb819946a5ee8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-383.el8/ebd09577.failed

Functionally, this just means that the test output will be slightly
changed and it'll now depend on CONFIG_KUNIT=y/m.

It'll still run at boot time and can still be built as a loadable
module.

There was a pre-existing patch to convert this test that I found later,
here [1]. Compared to [1], this patch doesn't rename files and uses
KUnit features more heavily (i.e. does more than converting pr_err()
calls to KUNIT_FAIL()).

What this conversion gives us:
* a shorter test thanks to KUnit's macros
* a way to run this a bit more easily via kunit.py (and
CONFIG_KUNIT_ALL_TESTS=y) [2]
* a structured way of reporting pass/fail
* uses kunit-managed allocations to avoid the risk of memory leaks
* more descriptive error messages:
  * i.e. it prints out which fields are invalid, what the expected
  values are, etc.

What this conversion does not do:
* change the name of the file (and thus the name of the module)
* change the name of the config option

Leaving these as-is for now to minimize the impact to people wanting to
run this test. IMO, that concern trumps following KUnit's style guide
for both names, at least for now.

[1] https://lore.kernel.org/linux-kselftest/20201015014616.309000-1-vitor@massaru.org/
[2] Can be run via
$ ./tools/testing/kunit/kunit.py run --kunitconfig /dev/stdin <<EOF
CONFIG_KUNIT=y
CONFIG_TEST_LIST_SORT=y
EOF

[16:55:56] Configuring KUnit Kernel ...
[16:55:56] Building KUnit Kernel ...
[16:56:29] Starting KUnit Kernel ...
[16:56:32] ============================================================
[16:56:32] ======== [PASSED] list_sort ========
[16:56:32] [PASSED] list_sort_test
[16:56:32] ============================================================
[16:56:32] Testing complete. 1 tests run. 0 failed. 0 crashed.
[16:56:32] Elapsed time: 35.668s total, 0.001s configuring, 32.725s building, 0.000s running

Note: the build time is as after a `make mrproper`.

	Signed-off-by: Daniel Latypov <dlatypov@google.com>
	Tested-by: David Gow <davidgow@google.com>
	Acked-by: Brendan Higgins <brendanhiggins@google.com>
	Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>
(cherry picked from commit ebd09577be6c15ee2d343cf60e5bb819946a5ee8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	lib/test_list_sort.c
diff --cc lib/test_list_sort.c
index 5474f3f3e41d,ade7a1ea0c8e..000000000000
--- a/lib/test_list_sort.c
+++ b/lib/test_list_sort.c
@@@ -1,4 -1,5 +1,9 @@@
++<<<<<<< HEAD
 +#define pr_fmt(fmt) "list_sort_test: " fmt
++=======
+ // SPDX-License-Identifier: GPL-2.0-only
+ #include <kunit/test.h>
++>>>>>>> ebd09577be6c (lib/test: convert lib/test_list_sort.c to use KUnit)
  
  #include <linux/kernel.h>
  #include <linux/list_sort.h>
@@@ -22,40 -23,28 +27,32 @@@ struct debug_el 
  	struct list_head list;
  	unsigned int poison2;
  	int value;
- 	unsigned serial;
+ 	unsigned int serial;
  };
  
- /* Array, containing pointers to all elements in the test list */
- static struct debug_el **elts __initdata;
- 
- static int __init check(struct debug_el *ela, struct debug_el *elb)
+ static void check(struct kunit *test, struct debug_el *ela, struct debug_el *elb)
  {
- 	if (ela->serial >= TEST_LIST_LEN) {
- 		pr_err("error: incorrect serial %d\n", ela->serial);
- 		return -EINVAL;
- 	}
- 	if (elb->serial >= TEST_LIST_LEN) {
- 		pr_err("error: incorrect serial %d\n", elb->serial);
- 		return -EINVAL;
- 	}
- 	if (elts[ela->serial] != ela || elts[elb->serial] != elb) {
- 		pr_err("error: phantom element\n");
- 		return -EINVAL;
- 	}
- 	if (ela->poison1 != TEST_POISON1 || ela->poison2 != TEST_POISON2) {
- 		pr_err("error: bad poison: %#x/%#x\n",
- 			ela->poison1, ela->poison2);
- 		return -EINVAL;
- 	}
- 	if (elb->poison1 != TEST_POISON1 || elb->poison2 != TEST_POISON2) {
- 		pr_err("error: bad poison: %#x/%#x\n",
- 			elb->poison1, elb->poison2);
- 		return -EINVAL;
- 	}
- 	return 0;
+ 	struct debug_el **elts = test->priv;
+ 
+ 	KUNIT_EXPECT_LT_MSG(test, ela->serial, (unsigned int)TEST_LIST_LEN, "incorrect serial");
+ 	KUNIT_EXPECT_LT_MSG(test, elb->serial, (unsigned int)TEST_LIST_LEN, "incorrect serial");
+ 
+ 	KUNIT_EXPECT_PTR_EQ_MSG(test, elts[ela->serial], ela, "phantom element");
+ 	KUNIT_EXPECT_PTR_EQ_MSG(test, elts[elb->serial], elb, "phantom element");
+ 
+ 	KUNIT_EXPECT_EQ_MSG(test, ela->poison1, TEST_POISON1, "bad poison");
+ 	KUNIT_EXPECT_EQ_MSG(test, ela->poison2, TEST_POISON2, "bad poison");
+ 
+ 	KUNIT_EXPECT_EQ_MSG(test, elb->poison1, TEST_POISON1, "bad poison");
+ 	KUNIT_EXPECT_EQ_MSG(test, elb->poison2, TEST_POISON2, "bad poison");
  }
  
++<<<<<<< HEAD
 +static int __init cmp(void *priv, struct list_head *a, struct list_head *b)
++=======
+ /* `priv` is the test pointer so check() can fail the test if the list is invalid. */
+ static int cmp(void *priv, const struct list_head *a, const struct list_head *b)
++>>>>>>> ebd09577be6c (lib/test: convert lib/test_list_sort.c to use KUnit)
  {
  	struct debug_el *ela, *elb;
  
diff --git a/lib/Kconfig.debug b/lib/Kconfig.debug
index ce8e949de93b..0b406d487206 100644
--- a/lib/Kconfig.debug
+++ b/lib/Kconfig.debug
@@ -1824,8 +1824,9 @@ config LKDTM
 	Documentation/fault-injection/provoke-crashes.txt
 
 config TEST_LIST_SORT
-	tristate "Linked list sorting test"
-	depends on DEBUG_KERNEL || m
+	tristate "Linked list sorting test" if !KUNIT_ALL_TESTS
+	depends on KUNIT
+	default KUNIT_ALL_TESTS
 	help
 	  Enable this to turn on 'list_sort()' function test. This test is
 	  executed only once during system boot (so affects only boot time),
* Unmerged path lib/test_list_sort.c
