net: phy: marvell10g: fix differentiation of 88X3310 from 88X3340

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-383.el8
commit-author Marek Behún <kabel@kernel.org>
commit a5de4be0aaaa66a2fa98e8a33bdbed3bd0682804
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-383.el8/a5de4be0.failed

It seems that we cannot differentiate 88X3310 from 88X3340 by simply
looking at bit 3 of revision ID. This only works on revisions A0 and A1.
On revision B0, this bit is always 1.

Instead use the 3.d00d register for differentiation, since this register
contains information about number of ports on the device.

Fixes: 9885d016ffa9 ("net: phy: marvell10g: add separate structure for 88X3340")
	Signed-off-by: Marek Behún <kabel@kernel.org>
	Reported-by: Matteo Croce <mcroce@linux.microsoft.com>
	Tested-by: Matteo Croce <mcroce@microsoft.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit a5de4be0aaaa66a2fa98e8a33bdbed3bd0682804)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/phy/marvell10g.c
#	include/linux/marvell_phy.h
diff --cc drivers/net/phy/marvell10g.c
index 86c511e1ea61,53a433442803..000000000000
--- a/drivers/net/phy/marvell10g.c
+++ b/drivers/net/phy/marvell10g.c
@@@ -863,10 -961,70 +868,76 @@@ static const struct mv3310_chip mv2110_
  #endif
  };
  
++<<<<<<< HEAD
++=======
+ static const struct mv3310_chip mv2111_type = {
+ 	.init_supported_interfaces = mv2111_init_supported_interfaces,
+ 	.get_mactype = mv2110_get_mactype,
+ 	.init_interface = mv2110_init_interface,
+ 
+ #ifdef CONFIG_HWMON
+ 	.hwmon_read_temp_reg = mv2110_hwmon_read_temp_reg,
+ #endif
+ };
+ 
+ static int mv3310_get_number_of_ports(struct phy_device *phydev)
+ {
+ 	int ret;
+ 
+ 	ret = phy_read_mmd(phydev, MDIO_MMD_PCS, MV_PCS_PORT_INFO);
+ 	if (ret < 0)
+ 		return ret;
+ 
+ 	ret &= MV_PCS_PORT_INFO_NPORTS_MASK;
+ 	ret >>= MV_PCS_PORT_INFO_NPORTS_SHIFT;
+ 
+ 	return ret + 1;
+ }
+ 
+ static int mv3310_match_phy_device(struct phy_device *phydev)
+ {
+ 	return mv3310_get_number_of_ports(phydev) == 1;
+ }
+ 
+ static int mv3340_match_phy_device(struct phy_device *phydev)
+ {
+ 	return mv3310_get_number_of_ports(phydev) == 4;
+ }
+ 
+ static int mv211x_match_phy_device(struct phy_device *phydev, bool has_5g)
+ {
+ 	int val;
+ 
+ 	if ((phydev->c45_ids.device_ids[MDIO_MMD_PMAPMD] &
+ 	     MARVELL_PHY_ID_MASK) != MARVELL_PHY_ID_88E2110)
+ 		return 0;
+ 
+ 	val = phy_read_mmd(phydev, MDIO_MMD_PCS, MDIO_SPEED);
+ 	if (val < 0)
+ 		return val;
+ 
+ 	return !!(val & MDIO_PCS_SPEED_5G) == has_5g;
+ }
+ 
+ static int mv2110_match_phy_device(struct phy_device *phydev)
+ {
+ 	return mv211x_match_phy_device(phydev, true);
+ }
+ 
+ static int mv2111_match_phy_device(struct phy_device *phydev)
+ {
+ 	return mv211x_match_phy_device(phydev, false);
+ }
+ 
++>>>>>>> a5de4be0aaaa (net: phy: marvell10g: fix differentiation of 88X3310 from 88X3340)
  static struct phy_driver mv3310_drivers[] = {
  	{
  		.phy_id		= MARVELL_PHY_ID_88X3310,
  		.phy_id_mask	= MARVELL_PHY_ID_MASK,
++<<<<<<< HEAD
++=======
+ 		.match_phy_device = mv3310_match_phy_device,
++>>>>>>> a5de4be0aaaa (net: phy: marvell10g: fix differentiation of 88X3310 from 88X3340)
  		.name		= "mv88x3310",
  		.driver_data	= &mv3310_type,
  		.get_features	= mv3310_get_features,
@@@ -883,8 -1041,28 +954,30 @@@
  		.set_loopback	= genphy_c45_loopback,
  	},
  	{
++<<<<<<< HEAD
++=======
+ 		.phy_id		= MARVELL_PHY_ID_88X3310,
+ 		.phy_id_mask	= MARVELL_PHY_ID_MASK,
+ 		.match_phy_device = mv3340_match_phy_device,
+ 		.name		= "mv88x3340",
+ 		.driver_data	= &mv3340_type,
+ 		.get_features	= mv3310_get_features,
+ 		.config_init	= mv3310_config_init,
+ 		.probe		= mv3310_probe,
+ 		.suspend	= mv3310_suspend,
+ 		.resume		= mv3310_resume,
+ 		.config_aneg	= mv3310_config_aneg,
+ 		.aneg_done	= mv3310_aneg_done,
+ 		.read_status	= mv3310_read_status,
+ 		.get_tunable	= mv3310_get_tunable,
+ 		.set_tunable	= mv3310_set_tunable,
+ 		.remove		= mv3310_remove,
+ 		.set_loopback	= genphy_c45_loopback,
+ 	},
+ 	{
++>>>>>>> a5de4be0aaaa (net: phy: marvell10g: fix differentiation of 88X3310 from 88X3340)
  		.phy_id		= MARVELL_PHY_ID_88E2110,
  		.phy_id_mask	= MARVELL_PHY_ID_MASK,
 -		.match_phy_device = mv2110_match_phy_device,
  		.name		= "mv88e2110",
  		.driver_data	= &mv2110_type,
  		.probe		= mv3310_probe,
diff --cc include/linux/marvell_phy.h
index 52b1610eae68,0f06c2287b52..000000000000
--- a/include/linux/marvell_phy.h
+++ b/include/linux/marvell_phy.h
@@@ -24,6 -24,7 +24,10 @@@
  #define MARVELL_PHY_ID_88E3016		0x01410e60
  #define MARVELL_PHY_ID_88X3310		0x002b09a0
  #define MARVELL_PHY_ID_88E2110		0x002b09b0
++<<<<<<< HEAD
++=======
+ #define MARVELL_PHY_ID_88X2222		0x01410f10
++>>>>>>> a5de4be0aaaa (net: phy: marvell10g: fix differentiation of 88X3310 from 88X3340)
  
  /* Marvel 88E1111 in Finisar SFP module with modified PHY ID */
  #define MARVELL_PHY_ID_88E1111_FINISAR	0x01ff0cc0
* Unmerged path drivers/net/phy/marvell10g.c
* Unmerged path include/linux/marvell_phy.h
