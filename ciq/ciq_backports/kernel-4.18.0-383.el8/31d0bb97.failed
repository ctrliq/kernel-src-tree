netfilter: conntrack: Add and use nf_ct_set_auto_assign_helper_warned()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-383.el8
commit-author Phil Sutter <phil@nwl.cc>
commit 31d0bb9763efad30377505f3467f958d1ebe1e3d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-383.el8/31d0bb97.failed

The function sets the pernet boolean to avoid the spurious warning from
nf_ct_lookup_helper() when assigning conntrack helpers via nftables.

Fixes: 1a64edf54f55 ("netfilter: nft_ct: add helper set support")
	Signed-off-by: Phil Sutter <phil@nwl.cc>
	Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
(cherry picked from commit 31d0bb9763efad30377505f3467f958d1ebe1e3d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/netfilter/nf_conntrack_helper.c
diff --cc net/netfilter/nf_conntrack_helper.c
index b7e654b73efd,8dec42ec603e..000000000000
--- a/net/netfilter/nf_conntrack_helper.c
+++ b/net/netfilter/nf_conntrack_helper.c
@@@ -614,22 -550,17 +614,34 @@@ void nf_nat_helper_unregister(struct nf
  }
  EXPORT_SYMBOL_GPL(nf_nat_helper_unregister);
  
++<<<<<<< HEAD
 +static const struct nf_ct_ext_type helper_extend = {
 +	.len	= sizeof(struct nf_conn_help),
 +	.align	= __alignof__(struct nf_conn_help),
 +	.id	= NF_CT_EXT_HELPER,
 +};
++=======
+ void nf_ct_set_auto_assign_helper_warned(struct net *net)
+ {
+ 	nf_ct_pernet(net)->auto_assign_helper_warned = true;
+ }
+ EXPORT_SYMBOL_GPL(nf_ct_set_auto_assign_helper_warned);
+ 
+ void nf_conntrack_helper_pernet_init(struct net *net)
+ {
+ 	struct nf_conntrack_net *cnet = nf_ct_pernet(net);
++>>>>>>> 31d0bb9763ef (netfilter: conntrack: Add and use nf_ct_set_auto_assign_helper_warned())
  
 -	cnet->sysctl_auto_assign_helper = nf_ct_auto_assign_helper;
 +int nf_conntrack_helper_pernet_init(struct net *net)
 +{
 +	net->ct.auto_assign_helper_warned = false;
 +	net->ct.sysctl_auto_assign_helper = nf_ct_auto_assign_helper;
 +	return nf_conntrack_helper_init_sysctl(net);
 +}
 +
 +void nf_conntrack_helper_pernet_fini(struct net *net)
 +{
 +	nf_conntrack_helper_fini_sysctl(net);
  }
  
  int nf_conntrack_helper_init(void)
diff --git a/include/net/netfilter/nf_conntrack_helper.h b/include/net/netfilter/nf_conntrack_helper.h
index f03da4063a07..c8c38e3bf685 100644
--- a/include/net/netfilter/nf_conntrack_helper.h
+++ b/include/net/netfilter/nf_conntrack_helper.h
@@ -180,4 +180,5 @@ void nf_nat_helper_unregister(struct nf_conntrack_nat_helper *nat);
 int nf_nat_helper_try_module_get(const char *name, u16 l3num,
 				 u8 protonum);
 void nf_nat_helper_put(struct nf_conntrack_helper *helper);
+void nf_ct_set_auto_assign_helper_warned(struct net *net);
 #endif /*_NF_CONNTRACK_HELPER_H*/
* Unmerged path net/netfilter/nf_conntrack_helper.c
diff --git a/net/netfilter/nft_ct.c b/net/netfilter/nft_ct.c
index 1164209aa8eb..5959ec63fc1c 100644
--- a/net/netfilter/nft_ct.c
+++ b/net/netfilter/nft_ct.c
@@ -851,6 +851,9 @@ static int nft_ct_helper_obj_init(const struct nft_ctx *ctx,
 	if (err < 0)
 		goto err_put_helper;
 
+	/* Avoid the bogus warning, helper will be assigned after CT init */
+	nf_ct_set_auto_assign_helper_warned(ctx->net);
+
 	return 0;
 
 err_put_helper:
