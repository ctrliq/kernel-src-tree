kasan: add ability to detect double-kmem_cache_destroy()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-383.el8
commit-author Marco Elver <elver@google.com>
commit bed0a9b591492bb285ea88cd221e0412031396ca
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-383.el8/bed0a9b5.failed

Because mm/slab_common.c is not instrumented with software KASAN modes,
it is not possible to detect use-after-free of the kmem_cache passed
into kmem_cache_destroy().  In particular, because of the s->refcount--
and subsequent early return if non-zero, KASAN would never be able to
see the double-free via kmem_cache_free(kmem_cache, s).  To be able to
detect a double-kmem_cache_destroy(), check accessibility of the
kmem_cache, and in case of failure return early.

While KASAN_HW_TAGS is able to detect such bugs, by checking
accessibility and returning early we fail more gracefully and also avoid
corrupting reused objects (where tags mismatch).

A recent case of a double-kmem_cache_destroy() was detected by KFENCE:
https://lkml.kernel.org/r/0000000000003f654905c168b09d@google.com, which
was not detectable by software KASAN modes.

Link: https://lkml.kernel.org/r/20211119142219.1519617-1-elver@google.com
	Signed-off-by: Marco Elver <elver@google.com>
	Acked-by: Vlastimil Babka <vbabka@suse.cz>
	Reviewed-by: Andrey Konovalov <andreyknvl@gmail.com>
	Cc: Alexander Potapenko <glider@google.com>
	Cc: Andrey Ryabinin <ryabinin.a.a@gmail.com>
	Cc: Christoph Lameter <cl@linux.com>
	Cc: David Rientjes <rientjes@google.com>
	Cc: Dmitry Vyukov <dvyukov@google.com>
	Cc: Joonsoo Kim <iamjoonsoo.kim@lge.com>
	Cc: Pekka Enberg <penberg@kernel.org>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit bed0a9b591492bb285ea88cd221e0412031396ca)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	mm/slab_common.c
diff --cc mm/slab_common.c
index 240ca85b858b,f02c32bd05ab..000000000000
--- a/mm/slab_common.c
+++ b/mm/slab_common.c
@@@ -495,9 -489,7 +495,13 @@@ void slab_kmem_cache_release(struct kme
  
  void kmem_cache_destroy(struct kmem_cache *s)
  {
++<<<<<<< HEAD
 +	int err;
 +
 +	if (unlikely(!s))
++=======
+ 	if (unlikely(!s) || !kasan_check_byte(s))
++>>>>>>> bed0a9b59149 (kasan: add ability to detect double-kmem_cache_destroy())
  		return;
  
  	cpus_read_lock();
* Unmerged path mm/slab_common.c
