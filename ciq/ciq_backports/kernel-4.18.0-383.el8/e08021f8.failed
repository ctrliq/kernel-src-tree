powerpc/ebpf64: Use PPC_RAW_MFLR()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-383.el8
commit-author Christophe Leroy <christophe.leroy@csgroup.eu>
commit e08021f8dbd256f480b7e172aa4e894219c901f2
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-383.el8/e08021f8.failed

Use PPC_RAW_MFLR() instead of open coding with PPC_INST_MFLR.

	Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>
	Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
Link: https://lore.kernel.org/r/c1887623e91e8b4da36e669e4c74de86320a5092.1621506159.git.christophe.leroy@csgroup.eu

(cherry picked from commit e08021f8dbd256f480b7e172aa4e894219c901f2)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/powerpc/include/asm/ppc-opcode.h
diff --cc arch/powerpc/include/asm/ppc-opcode.h
index a3419bc294d7,033a31f86ae2..000000000000
--- a/arch/powerpc/include/asm/ppc-opcode.h
+++ b/arch/powerpc/include/asm/ppc-opcode.h
@@@ -320,111 -278,20 +320,114 @@@
  #define PPC_INST_STRING			0x7c00042a
  #define PPC_INST_STRING_MASK		0xfc0007fe
  #define PPC_INST_STRING_GEN_MASK	0xfc00067e
 -#define PPC_INST_SETB			0x7c000100
 +
  #define PPC_INST_STSWI			0x7c0005aa
  #define PPC_INST_STSWX			0x7c00052a
 +#define PPC_INST_STXVD2X		0x7c000798
 +#define PPC_INST_TLBIE			0x7c000264
 +#define PPC_INST_TLBIEL			0x7c000224
 +#define PPC_INST_TLBILX			0x7c000024
 +#define PPC_INST_WAIT			0x7c00007c
 +#define PPC_INST_TLBIVAX		0x7c000624
 +#define PPC_INST_TLBSRX_DOT		0x7c0006a5
 +#define PPC_INST_VPMSUMW		0x10000488
 +#define PPC_INST_VPMSUMD		0x100004c8
 +#define PPC_INST_VPERMXOR		0x1000002d
 +#define PPC_INST_XXLOR			0xf0000490
 +#define PPC_INST_XXSWAPD		0xf0000250
 +#define PPC_INST_XVCPSGNDP		0xf0000780
  #define PPC_INST_TRECHKPT		0x7c0007dd
  #define PPC_INST_TRECLAIM		0x7c00075d
 +#define PPC_INST_TABORT			0x7c00071d
  #define PPC_INST_TSR			0x7c0005dd
 +
 +#define PPC_INST_DCBF			0x7c0000ac
 +
 +#define PPC_INST_NAP			0x4c000364
 +#define PPC_INST_SLEEP			0x4c0003a4
 +#define PPC_INST_WINKLE			0x4c0003e4
 +
 +#define PPC_INST_STOP			0x4c0002e4
 +
 +/* A2 specific instructions */
 +#define PPC_INST_ERATWE			0x7c0001a6
 +#define PPC_INST_ERATRE			0x7c000166
 +#define PPC_INST_ERATILX		0x7c000066
 +#define PPC_INST_ERATIVAX		0x7c000666
 +#define PPC_INST_ERATSX			0x7c000126
 +#define PPC_INST_ERATSX_DOT		0x7c000127
 +
 +/* Misc instructions for BPF compiler */
 +#define PPC_INST_LBZ			0x88000000
  #define PPC_INST_LD			0xe8000000
 +#define PPC_INST_LDX			0x7c00002a
 +#define PPC_INST_LHZ			0xa0000000
 +#define PPC_INST_LWZ			0x80000000
 +#define PPC_INST_LHBRX			0x7c00062c
 +#define PPC_INST_LDBRX			0x7c000428
 +#define PPC_INST_STB			0x98000000
 +#define PPC_INST_STH			0xb0000000
  #define PPC_INST_STD			0xf8000000
++<<<<<<< HEAD
 +#define PPC_INST_STDX			0x7c00012a
 +#define PPC_INST_STDU			0xf8000001
 +#define PPC_INST_STW			0x90000000
 +#define PPC_INST_STWU			0x94000000
 +#define PPC_INST_MFLR			0x7c0802a6
 +#define PPC_INST_MTLR			0x7c0803a6
 +#define PPC_INST_MTCTR			0x7c0903a6
 +#define PPC_INST_CMPWI			0x2c000000
 +#define PPC_INST_CMPDI			0x2c200000
 +#define PPC_INST_CMPW			0x7c000000
 +#define PPC_INST_CMPD			0x7c200000
 +#define PPC_INST_CMPLW			0x7c000040
 +#define PPC_INST_CMPLD			0x7c200040
 +#define PPC_INST_CMPLWI			0x28000000
 +#define PPC_INST_CMPLDI			0x28200000
 +#define PPC_INST_ADDI			0x38000000
++=======
++>>>>>>> e08021f8dbd2 (powerpc/ebpf64: Use PPC_RAW_MFLR())
  #define PPC_INST_ADDIS			0x3c000000
  #define PPC_INST_ADD			0x7c000214
 +#define PPC_INST_ADDC			0x7c000014
 +#define PPC_INST_SUB			0x7c000050
 +#define PPC_INST_BLR			0x4e800020
 +#define PPC_INST_BLRL			0x4e800021
 +#define PPC_INST_BCTR			0x4e800420
 +#define PPC_INST_MULLD			0x7c0001d2
 +#define PPC_INST_MULLW			0x7c0001d6
 +#define PPC_INST_MULHWU			0x7c000016
 +#define PPC_INST_MULLI			0x1c000000
 +#define PPC_INST_MADDHD			0x10000030
 +#define PPC_INST_MADDHDU		0x10000031
 +#define PPC_INST_MADDLD			0x10000033
 +#define PPC_INST_DIVWU			0x7c000396
  #define PPC_INST_DIVD			0x7c0003d2
 +#define PPC_INST_DIVDU			0x7c000392
 +#define PPC_INST_RLWINM			0x54000000
 +#define PPC_INST_RLWINM_DOT		0x54000001
 +#define PPC_INST_RLWIMI			0x50000000
 +#define PPC_INST_RLDICL			0x78000000
  #define PPC_INST_RLDICR			0x78000004
 +#define PPC_INST_SLW			0x7c000030
 +#define PPC_INST_SLD			0x7c000036
 +#define PPC_INST_SRW			0x7c000430
 +#define PPC_INST_SRAW			0x7c000630
 +#define PPC_INST_SRAWI			0x7c000670
 +#define PPC_INST_SRD			0x7c000436
 +#define PPC_INST_SRAD			0x7c000634
 +#define PPC_INST_SRADI			0x7c000674
 +#define PPC_INST_AND			0x7c000038
 +#define PPC_INST_ANDDOT			0x7c000039
 +#define PPC_INST_OR			0x7c000378
 +#define PPC_INST_XOR			0x7c000278
 +#define PPC_INST_ANDI			0x70000000
  #define PPC_INST_ORI			0x60000000
  #define PPC_INST_ORIS			0x64000000
 +#define PPC_INST_XORI			0x68000000
 +#define PPC_INST_XORIS			0x6c000000
 +#define PPC_INST_NEG			0x7c0000d0
 +#define PPC_INST_EXTSW			0x7c0007b4
  #define PPC_INST_BRANCH			0x48000000
  #define PPC_INST_BL			0x48000001
  #define PPC_INST_BRANCH_COND		0x40800000
@@@ -564,85 -434,101 +567,96 @@@
  #define PPC_RAW_STXVP(xsp, a, i)	(0x18000001 | __PPC_XSP(xsp) | ___PPC_RA(a) | IMM_DQ(i))
  #define PPC_RAW_LXVPX(xtp, a, b)	(0x7c00029a | __PPC_XTP(xtp) | ___PPC_RA(a) | ___PPC_RB(b))
  #define PPC_RAW_STXVPX(xsp, a, b)	(0x7c00039a | __PPC_XSP(xsp) | ___PPC_RA(a) | ___PPC_RB(b))
 -#define PPC_RAW_PLXVP_P(xtp, i, a, pr)	(PPC_PREFIX_8LS | __PPC_PRFX_R(pr) | IMM_D0(i))
 -#define PPC_RAW_PLXVP_S(xtp, i, a, pr)	(0xe8000000 | __PPC_XTP(xtp) | ___PPC_RA(a) | IMM_D1(i))
 -#define PPC_RAW_PSTXVP_P(xsp, i, a, pr)	(PPC_PREFIX_8LS | __PPC_PRFX_R(pr) | IMM_D0(i))
 -#define PPC_RAW_PSTXVP_S(xsp, i, a, pr)	(0xf8000000 | __PPC_XSP(xsp) | ___PPC_RA(a) | IMM_D1(i))
 -#define PPC_RAW_NAP			(0x4c000364)
 -#define PPC_RAW_SLEEP			(0x4c0003a4)
 -#define PPC_RAW_WINKLE			(0x4c0003e4)
 -#define PPC_RAW_STOP			(0x4c0002e4)
 -#define PPC_RAW_CLRBHRB			(0x7c00035c)
 -#define PPC_RAW_MFBHRBE(r, n)		(0x7c00025c | __PPC_RT(r) | (((n) & 0x3ff) << 11))
 +#define PPC_RAW_PLXVP(xtp, i, a, pr) \
 +	((PPC_PREFIX_8LS | __PPC_PRFX_R(pr) | IMM_D0(i)) << 32 | (0xe8000000 | __PPC_XTP(xtp) | ___PPC_RA(a) | IMM_D1(i)))
 +#define PPC_RAW_PSTXVP(xsp, i, a, pr) \
 +	((PPC_PREFIX_8LS | __PPC_PRFX_R(pr) | IMM_D0(i)) << 32 | (0xf8000000 | __PPC_XSP(xsp) | ___PPC_RA(a) | IMM_D1(i)))
 +#define PPC_RAW_NAP			(PPC_INST_NAP)
 +#define PPC_RAW_SLEEP			(PPC_INST_SLEEP)
 +#define PPC_RAW_WINKLE			(PPC_INST_WINKLE)
 +#define PPC_RAW_STOP			(PPC_INST_STOP)
 +#define PPC_RAW_CLRBHRB			(PPC_INST_CLRBHRB)
 +#define PPC_RAW_MFBHRBE(r, n)		(PPC_INST_BHRBE | __PPC_RT(r) | (((n) & 0x3ff) << 11))
  #define PPC_RAW_TRECHKPT		(PPC_INST_TRECHKPT)
  #define PPC_RAW_TRECLAIM(r)		(PPC_INST_TRECLAIM | __PPC_RA(r))
 -#define PPC_RAW_TABORT(r)		(0x7c00071d | __PPC_RA(r))
 +#define PPC_RAW_TABORT(r)		(PPC_INST_TABORT | __PPC_RA(r))
  #define TMRN(x)				((((x) & 0x1f) << 16) | (((x) & 0x3e0) << 6))
 -#define PPC_RAW_MTTMR(tmr, r)		(0x7c0003dc | TMRN(tmr) | ___PPC_RS(r))
 -#define PPC_RAW_MFTMR(tmr, r)		(0x7c0002dc | TMRN(tmr) | ___PPC_RT(r))
 -#define PPC_RAW_ICSWX(s, a, b)		(0x7c00032d | ___PPC_RS(s) | ___PPC_RA(a) | ___PPC_RB(b))
 -#define PPC_RAW_ICSWEPX(s, a, b)	(0x7c00076d | ___PPC_RS(s) | ___PPC_RA(a) | ___PPC_RB(b))
 -#define PPC_RAW_SLBIA(IH)		(0x7c0003e4 | (((IH) & 0x7) << 21))
 +#define PPC_RAW_MTTMR(tmr, r)		(PPC_INST_MTTMR | TMRN(tmr) | ___PPC_RS(r))
 +#define PPC_RAW_MFTMR(tmr, r)		(PPC_INST_MFTMR | TMRN(tmr) | ___PPC_RT(r))
 +#define PPC_RAW_ICSWX(s, a, b)		(PPC_INST_ICSWX | ___PPC_RS(s) | ___PPC_RA(a) | ___PPC_RB(b))
 +#define PPC_RAW_ICSWEPX(s, a, b)	(PPC_INST_ICSWEPX | ___PPC_RS(s) | ___PPC_RA(a) | ___PPC_RB(b))
 +#define PPC_RAW_SLBIA(IH)		(PPC_INST_SLBIA | (((IH) & 0x7) << 21))
  #define PPC_RAW_VCMPEQUD_RC(vrt, vra, vrb) \
 -	(0x100000c7 | ___PPC_RT(vrt) | ___PPC_RA(vra) | ___PPC_RB(vrb) | __PPC_RC21)
 +	(PPC_INST_VCMPEQUD | ___PPC_RT(vrt) | ___PPC_RA(vra) | ___PPC_RB(vrb) | __PPC_RC21)
  #define PPC_RAW_VCMPEQUB_RC(vrt, vra, vrb) \
 -	(0x10000006 | ___PPC_RT(vrt) | ___PPC_RA(vra) | ___PPC_RB(vrb) | __PPC_RC21)
 +	(PPC_INST_VCMPEQUB | ___PPC_RT(vrt) | ___PPC_RA(vra) | ___PPC_RB(vrb) | __PPC_RC21)
  #define PPC_RAW_LD(r, base, i)		(PPC_INST_LD | ___PPC_RT(r) | ___PPC_RA(base) | IMM_DS(i))
 -#define PPC_RAW_LWZ(r, base, i)		(0x80000000 | ___PPC_RT(r) | ___PPC_RA(base) | IMM_L(i))
 -#define PPC_RAW_LWZX(t, a, b)		(0x7c00002e | ___PPC_RT(t) | ___PPC_RA(a) | ___PPC_RB(b))
 +#define PPC_RAW_LWZ(r, base, i)		(PPC_INST_LWZ | ___PPC_RT(r) | ___PPC_RA(base) | IMM_L(i))
 +#define PPC_RAW_LWZX(t, a, b)		(PPC_INST_LWZX | ___PPC_RT(t) | ___PPC_RA(a) | ___PPC_RB(b))
  #define PPC_RAW_STD(r, base, i)		(PPC_INST_STD | ___PPC_RS(r) | ___PPC_RA(base) | IMM_DS(i))
 -#define PPC_RAW_STDCX(s, a, b)		(0x7c0001ad | ___PPC_RS(s) | ___PPC_RA(a) | ___PPC_RB(b))
 -#define PPC_RAW_LFSX(t, a, b)		(0x7c00042e | ___PPC_RT(t) | ___PPC_RA(a) | ___PPC_RB(b))
 -#define PPC_RAW_STFSX(s, a, b)		(0x7c00052e | ___PPC_RS(s) | ___PPC_RA(a) | ___PPC_RB(b))
 -#define PPC_RAW_LFDX(t, a, b)		(0x7c0004ae | ___PPC_RT(t) | ___PPC_RA(a) | ___PPC_RB(b))
 -#define PPC_RAW_STFDX(s, a, b)		(0x7c0005ae | ___PPC_RS(s) | ___PPC_RA(a) | ___PPC_RB(b))
 -#define PPC_RAW_LVX(t, a, b)		(0x7c0000ce | ___PPC_RT(t) | ___PPC_RA(a) | ___PPC_RB(b))
 -#define PPC_RAW_STVX(s, a, b)		(0x7c0001ce | ___PPC_RS(s) | ___PPC_RA(a) | ___PPC_RB(b))
 -#define PPC_RAW_ADDE(t, a, b)		(0x7c000114 | ___PPC_RT(t) | ___PPC_RA(a) | ___PPC_RB(b))
 -#define PPC_RAW_ADDZE(t, a)		(0x7c000194 | ___PPC_RT(t) | ___PPC_RA(a))
 -#define PPC_RAW_ADDME(t, a)		(0x7c0001d4 | ___PPC_RT(t) | ___PPC_RA(a))
 +#define PPC_RAW_STDCX(s, a, b)		(PPC_INST_STDCX | ___PPC_RS(s) | ___PPC_RA(a) | ___PPC_RB(b))
 +#define PPC_RAW_LFSX(t, a, b)		(PPC_INST_LFSX | ___PPC_RT(t) | ___PPC_RA(a) | ___PPC_RB(b))
 +#define PPC_RAW_STFSX(s, a, b)		(PPC_INST_STFSX | ___PPC_RS(s) | ___PPC_RA(a) | ___PPC_RB(b))
 +#define PPC_RAW_LFDX(t, a, b)		(PPC_INST_LFDX | ___PPC_RT(t) | ___PPC_RA(a) | ___PPC_RB(b))
 +#define PPC_RAW_STFDX(s, a, b)		(PPC_INST_STFDX | ___PPC_RS(s) | ___PPC_RA(a) | ___PPC_RB(b))
 +#define PPC_RAW_LVX(t, a, b)		(PPC_INST_LVX | ___PPC_RT(t) | ___PPC_RA(a) | ___PPC_RB(b))
 +#define PPC_RAW_STVX(s, a, b)		(PPC_INST_STVX | ___PPC_RS(s) | ___PPC_RA(a) | ___PPC_RB(b))
  #define PPC_RAW_ADD(t, a, b)		(PPC_INST_ADD | ___PPC_RT(t) | ___PPC_RA(a) | ___PPC_RB(b))
  #define PPC_RAW_ADD_DOT(t, a, b)	(PPC_INST_ADD | ___PPC_RT(t) | ___PPC_RA(a) | ___PPC_RB(b) | 0x1)
 -#define PPC_RAW_ADDC(t, a, b)		(0x7c000014 | ___PPC_RT(t) | ___PPC_RA(a) | ___PPC_RB(b))
 -#define PPC_RAW_ADDC_DOT(t, a, b)	(0x7c000014 | ___PPC_RT(t) | ___PPC_RA(a) | ___PPC_RB(b) | 0x1)
 +#define PPC_RAW_ADDC(t, a, b)		(PPC_INST_ADDC | ___PPC_RT(t) | ___PPC_RA(a) | ___PPC_RB(b))
 +#define PPC_RAW_ADDC_DOT(t, a, b)	(PPC_INST_ADDC | ___PPC_RT(t) | ___PPC_RA(a) | ___PPC_RB(b) | 0x1)
  #define PPC_RAW_NOP()			(PPC_INST_NOP)
++<<<<<<< HEAD
 +#define PPC_RAW_BLR()			(PPC_INST_BLR)
 +#define PPC_RAW_BLRL()			(PPC_INST_BLRL)
 +#define PPC_RAW_MTLR(r)			(PPC_INST_MTLR | ___PPC_RT(r))
 +#define PPC_RAW_BCTR()			(PPC_INST_BCTR)
 +#define PPC_RAW_MTCTR(r)		(PPC_INST_MTCTR | ___PPC_RT(r))
 +#define PPC_RAW_ADDI(d, a, i)		(PPC_INST_ADDI | ___PPC_RT(d) | ___PPC_RA(a) | IMM_L(i))
++=======
+ #define PPC_RAW_BLR()			(0x4e800020)
+ #define PPC_RAW_BLRL()			(0x4e800021)
+ #define PPC_RAW_MTLR(r)			(0x7c0803a6 | ___PPC_RT(r))
+ #define PPC_RAW_MFLR(t)			(0x7c0802a6 | ___PPC_RT(t))
+ #define PPC_RAW_BCTR()			(0x4e800420)
+ #define PPC_RAW_BCTRL()			(0x4e800421)
+ #define PPC_RAW_MTCTR(r)		(0x7c0903a6 | ___PPC_RT(r))
+ #define PPC_RAW_ADDI(d, a, i)		(0x38000000 | ___PPC_RT(d) | ___PPC_RA(a) | IMM_L(i))
++>>>>>>> e08021f8dbd2 (powerpc/ebpf64: Use PPC_RAW_MFLR())
  #define PPC_RAW_LI(r, i)		PPC_RAW_ADDI(r, 0, i)
 -#define PPC_RAW_ADDIS(d, a, i)		(0x3c000000 | ___PPC_RT(d) | ___PPC_RA(a) | IMM_L(i))
 -#define PPC_RAW_ADDIC(d, a, i)		(0x30000000 | ___PPC_RT(d) | ___PPC_RA(a) | IMM_L(i))
 -#define PPC_RAW_ADDIC_DOT(d, a, i)	(0x34000000 | ___PPC_RT(d) | ___PPC_RA(a) | IMM_L(i))
 +#define PPC_RAW_ADDIS(d, a, i)		(PPC_INST_ADDIS | ___PPC_RT(d) | ___PPC_RA(a) | IMM_L(i))
  #define PPC_RAW_LIS(r, i)		PPC_RAW_ADDIS(r, 0, i)
 -#define PPC_RAW_STDX(r, base, b)	(0x7c00012a | ___PPC_RS(r) | ___PPC_RA(base) | ___PPC_RB(b))
 -#define PPC_RAW_STDU(r, base, i)	(0xf8000001 | ___PPC_RS(r) | ___PPC_RA(base) | ((i) & 0xfffc))
 -#define PPC_RAW_STW(r, base, i)		(0x90000000 | ___PPC_RS(r) | ___PPC_RA(base) | IMM_L(i))
 -#define PPC_RAW_STWU(r, base, i)	(0x94000000 | ___PPC_RS(r) | ___PPC_RA(base) | IMM_L(i))
 -#define PPC_RAW_STH(r, base, i)		(0xb0000000 | ___PPC_RS(r) | ___PPC_RA(base) | IMM_L(i))
 -#define PPC_RAW_STB(r, base, i)		(0x98000000 | ___PPC_RS(r) | ___PPC_RA(base) | IMM_L(i))
 -#define PPC_RAW_LBZ(r, base, i)		(0x88000000 | ___PPC_RT(r) | ___PPC_RA(base) | IMM_L(i))
 -#define PPC_RAW_LDX(r, base, b)		(0x7c00002a | ___PPC_RT(r) | ___PPC_RA(base) | ___PPC_RB(b))
 -#define PPC_RAW_LHZ(r, base, i)		(0xa0000000 | ___PPC_RT(r) | ___PPC_RA(base) | IMM_L(i))
 -#define PPC_RAW_LHBRX(r, base, b)	(0x7c00062c | ___PPC_RT(r) | ___PPC_RA(base) | ___PPC_RB(b))
 -#define PPC_RAW_LDBRX(r, base, b)	(0x7c000428 | ___PPC_RT(r) | ___PPC_RA(base) | ___PPC_RB(b))
 -#define PPC_RAW_STWCX(s, a, b)		(0x7c00012d | ___PPC_RS(s) | ___PPC_RA(a) | ___PPC_RB(b))
 -#define PPC_RAW_CMPWI(a, i)		(0x2c000000 | ___PPC_RA(a) | IMM_L(i))
 -#define PPC_RAW_CMPDI(a, i)		(0x2c200000 | ___PPC_RA(a) | IMM_L(i))
 -#define PPC_RAW_CMPW(a, b)		(0x7c000000 | ___PPC_RA(a) | ___PPC_RB(b))
 -#define PPC_RAW_CMPD(a, b)		(0x7c200000 | ___PPC_RA(a) | ___PPC_RB(b))
 -#define PPC_RAW_CMPLWI(a, i)		(0x28000000 | ___PPC_RA(a) | IMM_L(i))
 -#define PPC_RAW_CMPLDI(a, i)		(0x28200000 | ___PPC_RA(a) | IMM_L(i))
 -#define PPC_RAW_CMPLW(a, b)		(0x7c000040 | ___PPC_RA(a) | ___PPC_RB(b))
 -#define PPC_RAW_CMPLD(a, b)		(0x7c200040 | ___PPC_RA(a) | ___PPC_RB(b))
 -#define PPC_RAW_SUB(d, a, b)		(0x7c000050 | ___PPC_RT(d) | ___PPC_RB(a) | ___PPC_RA(b))
 -#define PPC_RAW_SUBFC(d, a, b)		(0x7c000010 | ___PPC_RT(d) | ___PPC_RA(a) | ___PPC_RB(b))
 -#define PPC_RAW_SUBFE(d, a, b)		(0x7c000110 | ___PPC_RT(d) | ___PPC_RA(a) | ___PPC_RB(b))
 -#define PPC_RAW_SUBFIC(d, a, i)		(0x20000000 | ___PPC_RT(d) | ___PPC_RA(a) | IMM_L(i))
 -#define PPC_RAW_SUBFZE(d, a)		(0x7c000190 | ___PPC_RT(d) | ___PPC_RA(a))
 -#define PPC_RAW_MULD(d, a, b)		(0x7c0001d2 | ___PPC_RT(d) | ___PPC_RA(a) | ___PPC_RB(b))
 -#define PPC_RAW_MULW(d, a, b)		(0x7c0001d6 | ___PPC_RT(d) | ___PPC_RA(a) | ___PPC_RB(b))
 -#define PPC_RAW_MULHWU(d, a, b)		(0x7c000016 | ___PPC_RT(d) | ___PPC_RA(a) | ___PPC_RB(b))
 -#define PPC_RAW_MULI(d, a, i)		(0x1c000000 | ___PPC_RT(d) | ___PPC_RA(a) | IMM_L(i))
 -#define PPC_RAW_DIVWU(d, a, b)		(0x7c000396 | ___PPC_RT(d) | ___PPC_RA(a) | ___PPC_RB(b))
 -#define PPC_RAW_DIVDU(d, a, b)		(0x7c000392 | ___PPC_RT(d) | ___PPC_RA(a) | ___PPC_RB(b))
 -#define PPC_RAW_DIVDE(t, a, b)		(0x7c000352 | ___PPC_RT(t) | ___PPC_RA(a) | ___PPC_RB(b))
 -#define PPC_RAW_DIVDE_DOT(t, a, b)	(0x7c000352 | ___PPC_RT(t) | ___PPC_RA(a) | ___PPC_RB(b) | 0x1)
 -#define PPC_RAW_DIVDEU(t, a, b)		(0x7c000312 | ___PPC_RT(t) | ___PPC_RA(a) | ___PPC_RB(b))
 -#define PPC_RAW_DIVDEU_DOT(t, a, b)	(0x7c000312 | ___PPC_RT(t) | ___PPC_RA(a) | ___PPC_RB(b) | 0x1)
 -#define PPC_RAW_AND(d, a, b)		(0x7c000038 | ___PPC_RA(d) | ___PPC_RS(a) | ___PPC_RB(b))
 -#define PPC_RAW_ANDI(d, a, i)		(0x70000000 | ___PPC_RA(d) | ___PPC_RS(a) | IMM_L(i))
 -#define PPC_RAW_ANDIS(d, a, i)		(0x74000000 | ___PPC_RA(d) | ___PPC_RS(a) | IMM_L(i))
 -#define PPC_RAW_AND_DOT(d, a, b)	(0x7c000039 | ___PPC_RA(d) | ___PPC_RS(a) | ___PPC_RB(b))
 -#define PPC_RAW_OR(d, a, b)		(0x7c000378 | ___PPC_RA(d) | ___PPC_RS(a) | ___PPC_RB(b))
 +#define PPC_RAW_STDX(r, base, b)	(PPC_INST_STDX | ___PPC_RS(r) | ___PPC_RA(base) | ___PPC_RB(b))
 +#define PPC_RAW_STDU(r, base, i)	(PPC_INST_STDU | ___PPC_RS(r) | ___PPC_RA(base) | ((i) & 0xfffc))
 +#define PPC_RAW_STW(r, base, i)		(PPC_INST_STW | ___PPC_RS(r) | ___PPC_RA(base) | IMM_L(i))
 +#define PPC_RAW_STWU(r, base, i)	(PPC_INST_STWU | ___PPC_RS(r) | ___PPC_RA(base) | IMM_L(i))
 +#define PPC_RAW_STH(r, base, i)		(PPC_INST_STH | ___PPC_RS(r) | ___PPC_RA(base) | IMM_L(i))
 +#define PPC_RAW_STB(r, base, i)		(PPC_INST_STB | ___PPC_RS(r) | ___PPC_RA(base) | IMM_L(i))
 +#define PPC_RAW_LBZ(r, base, i)		(PPC_INST_LBZ | ___PPC_RT(r) | ___PPC_RA(base) | IMM_L(i))
 +#define PPC_RAW_LDX(r, base, b)		(PPC_INST_LDX | ___PPC_RT(r) | ___PPC_RA(base) | ___PPC_RB(b))
 +#define PPC_RAW_LHZ(r, base, i)		(PPC_INST_LHZ | ___PPC_RT(r) | ___PPC_RA(base) | IMM_L(i))
 +#define PPC_RAW_LHBRX(r, base, b)	(PPC_INST_LHBRX | ___PPC_RT(r) | ___PPC_RA(base) | ___PPC_RB(b))
 +#define PPC_RAW_LDBRX(r, base, b)	(PPC_INST_LDBRX | ___PPC_RT(r) | ___PPC_RA(base) | ___PPC_RB(b))
 +#define PPC_RAW_STWCX(s, a, b)		(PPC_INST_STWCX | ___PPC_RS(s) | ___PPC_RA(a) | ___PPC_RB(b))
 +#define PPC_RAW_CMPWI(a, i)		(PPC_INST_CMPWI | ___PPC_RA(a) | IMM_L(i))
 +#define PPC_RAW_CMPDI(a, i)		(PPC_INST_CMPDI | ___PPC_RA(a) | IMM_L(i))
 +#define PPC_RAW_CMPW(a, b)		(PPC_INST_CMPW | ___PPC_RA(a) | ___PPC_RB(b))
 +#define PPC_RAW_CMPD(a, b)		(PPC_INST_CMPD | ___PPC_RA(a) | ___PPC_RB(b))
 +#define PPC_RAW_CMPLWI(a, i)		(PPC_INST_CMPLWI | ___PPC_RA(a) | IMM_L(i))
 +#define PPC_RAW_CMPLDI(a, i)		(PPC_INST_CMPLDI | ___PPC_RA(a) | IMM_L(i))
 +#define PPC_RAW_CMPLW(a, b)		(PPC_INST_CMPLW | ___PPC_RA(a) | ___PPC_RB(b))
 +#define PPC_RAW_CMPLD(a, b)		(PPC_INST_CMPLD | ___PPC_RA(a) | ___PPC_RB(b))
 +#define PPC_RAW_SUB(d, a, b)		(PPC_INST_SUB | ___PPC_RT(d) | ___PPC_RB(a) | ___PPC_RA(b))
 +#define PPC_RAW_MULD(d, a, b)		(PPC_INST_MULLD | ___PPC_RT(d) | ___PPC_RA(a) | ___PPC_RB(b))
 +#define PPC_RAW_MULW(d, a, b)		(PPC_INST_MULLW | ___PPC_RT(d) | ___PPC_RA(a) | ___PPC_RB(b))
 +#define PPC_RAW_MULHWU(d, a, b)		(PPC_INST_MULHWU | ___PPC_RT(d) | ___PPC_RA(a) | ___PPC_RB(b))
 +#define PPC_RAW_MULI(d, a, i)		(PPC_INST_MULLI | ___PPC_RT(d) | ___PPC_RA(a) | IMM_L(i))
 +#define PPC_RAW_DIVWU(d, a, b)		(PPC_INST_DIVWU | ___PPC_RT(d) | ___PPC_RA(a) | ___PPC_RB(b))
 +#define PPC_RAW_DIVDU(d, a, b)		(PPC_INST_DIVDU | ___PPC_RT(d) | ___PPC_RA(a) | ___PPC_RB(b))
 +#define PPC_RAW_AND(d, a, b)		(PPC_INST_AND | ___PPC_RA(d) | ___PPC_RS(a) | ___PPC_RB(b))
 +#define PPC_RAW_ANDI(d, a, i)		(PPC_INST_ANDI | ___PPC_RA(d) | ___PPC_RS(a) | IMM_L(i))
 +#define PPC_RAW_AND_DOT(d, a, b)	(PPC_INST_ANDDOT | ___PPC_RA(d) | ___PPC_RS(a) | ___PPC_RB(b))
 +#define PPC_RAW_OR(d, a, b)		(PPC_INST_OR | ___PPC_RA(d) | ___PPC_RS(a) | ___PPC_RB(b))
  #define PPC_RAW_MR(d, a)		PPC_RAW_OR(d, a, a)
  #define PPC_RAW_ORI(d, a, i)		(PPC_INST_ORI | ___PPC_RA(d) | ___PPC_RS(a) | IMM_L(i))
  #define PPC_RAW_ORIS(d, a, i)		(PPC_INST_ORIS | ___PPC_RA(d) | ___PPC_RS(a) | IMM_L(i))
* Unmerged path arch/powerpc/include/asm/ppc-opcode.h
diff --git a/arch/powerpc/net/bpf_jit_comp64.c b/arch/powerpc/net/bpf_jit_comp64.c
index b17df6e7d9f3..4b74a0074f25 100644
--- a/arch/powerpc/net/bpf_jit_comp64.c
+++ b/arch/powerpc/net/bpf_jit_comp64.c
@@ -97,7 +97,7 @@ void bpf_jit_build_prologue(u32 *image, struct codegen_context *ctx)
 		 * save/restore LR unless we call other functions
 		 */
 		if (ctx->seen & SEEN_FUNC) {
-			EMIT(PPC_INST_MFLR | __PPC_RT(R0));
+			EMIT(PPC_RAW_MFLR(_R0));
 			PPC_BPF_STL(0, 1, PPC_LR_STKOFF);
 		}
 
