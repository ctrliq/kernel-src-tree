net: mdio: Remove of_phy_attach()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-383.el8
commit-author Florian Fainelli <f.fainelli@gmail.com>
commit 96313e1db8e5629cc2217616dca78f03e6463008
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-383.el8/96313e1d.failed

We have no in-tree users, also update the sfp-phylink.rst documentation
to indicate that phy_attach_direct() is used instead of of_phy_attach().

	Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
	Reviewed-by: Andrew Lunn <andrew@lunn.ch>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 96313e1db8e5629cc2217616dca78f03e6463008)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/of_mdio.h
diff --cc include/linux/of_mdio.h
index de306321cb5a,2b05e7f7c238..000000000000
--- a/include/linux/of_mdio.h
+++ b/include/linux/of_mdio.h
@@@ -13,27 -13,26 +13,30 @@@
  #include <linux/of.h>
  
  #if IS_ENABLED(CONFIG_OF_MDIO)
 -bool of_mdiobus_child_is_phy(struct device_node *child);
 -int of_mdiobus_register(struct mii_bus *mdio, struct device_node *np);
 -int devm_of_mdiobus_register(struct device *dev, struct mii_bus *mdio,
 -			     struct device_node *np);
 -struct mdio_device *of_mdio_find_device(struct device_node *np);
 -struct phy_device *of_phy_find_device(struct device_node *phy_np);
 -struct phy_device *
 -of_phy_connect(struct net_device *dev, struct device_node *phy_np,
 -	       void (*hndlr)(struct net_device *), u32 flags,
 -	       phy_interface_t iface);
 -struct phy_device *
 +extern bool of_mdiobus_child_is_phy(struct device_node *child);
 +extern int of_mdiobus_register(struct mii_bus *mdio, struct device_node *np);
 +extern struct phy_device *of_phy_find_device(struct device_node *phy_np);
 +extern struct phy_device *of_phy_connect(struct net_device *dev,
 +					 struct device_node *phy_np,
 +					 void (*hndlr)(struct net_device *),
 +					 u32 flags, phy_interface_t iface);
 +extern struct phy_device *
  of_phy_get_and_connect(struct net_device *dev, struct device_node *np,
  		       void (*hndlr)(struct net_device *));
++<<<<<<< HEAD
 +struct phy_device *of_phy_attach(struct net_device *dev,
 +				 struct device_node *phy_np, u32 flags,
 +				 phy_interface_t iface);
++=======
++>>>>>>> 96313e1db8e5 (net: mdio: Remove of_phy_attach())
  
 -struct mii_bus *of_mdio_find_bus(struct device_node *mdio_np);
 -int of_phy_register_fixed_link(struct device_node *np);
 -void of_phy_deregister_fixed_link(struct device_node *np);
 -bool of_phy_is_fixed_link(struct device_node *np);
 -int of_mdiobus_phy_device_register(struct mii_bus *mdio, struct phy_device *phy,
 -				   struct device_node *child, u32 addr);
 +extern struct mii_bus *of_mdio_find_bus(struct device_node *mdio_np);
 +extern int of_phy_register_fixed_link(struct device_node *np);
 +extern void of_phy_deregister_fixed_link(struct device_node *np);
 +extern bool of_phy_is_fixed_link(struct device_node *np);
 +extern int of_mdiobus_phy_device_register(struct mii_bus *mdio,
 +				     struct phy_device *phy,
 +				     struct device_node *child, u32 addr);
  
  static inline int of_mdio_parse_addr(struct device *dev,
  				     const struct device_node *np)
diff --git a/Documentation/networking/sfp-phylink.rst b/Documentation/networking/sfp-phylink.rst
index 2f286087da0f..0ffa6bf36cd6 100644
--- a/Documentation/networking/sfp-phylink.rst
+++ b/Documentation/networking/sfp-phylink.rst
@@ -162,7 +162,7 @@ this documentation.
 	err = phylink_of_phy_connect(priv->phylink, node, flags);
 
    For the most part, ``flags`` can be zero; these flags are passed to
-   the of_phy_attach() inside this function call if a PHY is specified
+   the phy_attach_direct() inside this function call if a PHY is specified
    in the DT node ``node``.
 
    ``node`` should be the DT node which contains the network phy property,
diff --git a/drivers/of/of_mdio.c b/drivers/of/of_mdio.c
index 3fa12f56624c..1d155adc6486 100644
--- a/drivers/of/of_mdio.c
+++ b/drivers/of/of_mdio.c
@@ -443,36 +443,6 @@ struct phy_device *of_phy_get_and_connect(struct net_device *dev,
 }
 EXPORT_SYMBOL(of_phy_get_and_connect);
 
-/**
- * of_phy_attach - Attach to a PHY without starting the state machine
- * @dev: pointer to net_device claiming the phy
- * @phy_np: Node pointer for the PHY
- * @flags: flags to pass to the PHY
- * @iface: PHY data interface type
- *
- * If successful, returns a pointer to the phy_device with the embedded
- * struct device refcount incremented by one, or NULL on failure. The
- * refcount must be dropped by calling phy_disconnect() or phy_detach().
- */
-struct phy_device *of_phy_attach(struct net_device *dev,
-				 struct device_node *phy_np, u32 flags,
-				 phy_interface_t iface)
-{
-	struct phy_device *phy = of_phy_find_device(phy_np);
-	int ret;
-
-	if (!phy)
-		return NULL;
-
-	ret = phy_attach_direct(dev, phy, flags, iface);
-
-	/* refcount is held by phy_attach_direct() on success */
-	put_device(&phy->mdio.dev);
-
-	return ret ? NULL : phy;
-}
-EXPORT_SYMBOL(of_phy_attach);
-
 /*
  * of_phy_is_fixed_link() and of_phy_register_fixed_link() must
  * support two DT bindings:
* Unmerged path include/linux/of_mdio.h
