kasan: fix quarantine conflicting with init_on_free

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-383.el8
commit-author Andrey Konovalov <andreyknvl@google.com>
commit 26dca996ea7b1ac7008b6b6063fc88b849e3ac3e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-383.el8/26dca996.failed

KASAN's quarantine might save its metadata inside freed objects.  As
this happens after the memory is zeroed by the slab allocator when
init_on_free is enabled, the memory coming out of quarantine is not
properly zeroed.

This causes lib/test_meminit.c tests to fail with Generic KASAN.

Zero the metadata when the object is removed from quarantine.

Link: https://lkml.kernel.org/r/2805da5df4b57138fdacd671f5d227d58950ba54.1640037083.git.andreyknvl@google.com
Fixes: 6471384af2a6 ("mm: security: introduce init_on_alloc=1 and init_on_free=1 boot options")
	Signed-off-by: Andrey Konovalov <andreyknvl@google.com>
	Reviewed-by: Marco Elver <elver@google.com>
	Cc: Alexander Potapenko <glider@google.com>
	Cc: Andrey Konovalov <andreyknvl@gmail.com>
	Cc: Dmitry Vyukov <dvyukov@google.com>
	Cc: Andrey Ryabinin <ryabinin.a.a@gmail.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 26dca996ea7b1ac7008b6b6063fc88b849e3ac3e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	mm/kasan/quarantine.c
diff --cc mm/kasan/quarantine.c
index 728fb24c5683,47ed4fc33a29..000000000000
--- a/mm/kasan/quarantine.c
+++ b/mm/kasan/quarantine.c
@@@ -138,7 -139,17 +139,21 @@@ static void qlink_free(struct qlist_nod
  		local_irq_save(flags);
  
  	/*
++<<<<<<< HEAD
 +	 * As the object now gets freed from the quaratine, assume that its
++=======
+ 	 * If init_on_free is enabled and KASAN's free metadata is stored in
+ 	 * the object, zero the metadata. Otherwise, the object's memory will
+ 	 * not be properly zeroed, as KASAN saves the metadata after the slab
+ 	 * allocator zeroes the object.
+ 	 */
+ 	if (slab_want_init_on_free(cache) &&
+ 	    cache->kasan_info.free_meta_offset == 0)
+ 		memzero_explicit(meta, sizeof(*meta));
+ 
+ 	/*
+ 	 * As the object now gets freed from the quarantine, assume that its
++>>>>>>> 26dca996ea7b (kasan: fix quarantine conflicting with init_on_free)
  	 * free track is no longer valid.
  	 */
  	*(u8 *)kasan_mem_to_shadow(object) = KASAN_KMALLOC_FREE;
* Unmerged path mm/kasan/quarantine.c
