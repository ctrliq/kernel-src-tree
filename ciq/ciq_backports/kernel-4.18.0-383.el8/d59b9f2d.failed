bpf: Extend libbpf with bpf_map_lookup_and_delete_elem_flags

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-383.el8
commit-author Denis Salopek <denis.salopek@sartura.hr>
commit d59b9f2d1b2211e948044a099fd0a65941d06570
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-383.el8/d59b9f2d.failed

Add bpf_map_lookup_and_delete_elem_flags() libbpf API in order to use
the BPF_F_LOCK flag with the map_lookup_and_delete_elem() function.

	Signed-off-by: Denis Salopek <denis.salopek@sartura.hr>
	Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
	Acked-by: Yonghong Song <yhs@fb.com>
Link: https://lore.kernel.org/bpf/15b05dafe46c7e0750d110f233977372029d1f62.1620763117.git.denis.salopek@sartura.hr
(cherry picked from commit d59b9f2d1b2211e948044a099fd0a65941d06570)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/lib/bpf/libbpf.map
diff --cc tools/lib/bpf/libbpf.map
index 3b635fcaa7a8,0229e01e8ccc..000000000000
--- a/tools/lib/bpf/libbpf.map
+++ b/tools/lib/bpf/libbpf.map
@@@ -392,5 -359,14 +392,12 @@@ LIBBPF_0.4.0 
  		bpf_linker__finalize;
  		bpf_linker__free;
  		bpf_linker__new;
++<<<<<<< HEAD
++=======
+ 		bpf_map__initial_value;
+ 		bpf_map__inner_map;
+ 		bpf_map_lookup_and_delete_elem_flags;
+ 		bpf_object__gen_loader;
++>>>>>>> d59b9f2d1b22 (bpf: Extend libbpf with bpf_map_lookup_and_delete_elem_flags)
  		bpf_object__set_kversion;
 -		bpf_tc_attach;
 -		bpf_tc_detach;
 -		bpf_tc_hook_create;
 -		bpf_tc_hook_destroy;
 -		bpf_tc_query;
  } LIBBPF_0.3.0;
diff --git a/tools/lib/bpf/bpf.c b/tools/lib/bpf/bpf.c
index 085cce0b3669..a70aa6c43575 100644
--- a/tools/lib/bpf/bpf.c
+++ b/tools/lib/bpf/bpf.c
@@ -458,6 +458,19 @@ int bpf_map_lookup_and_delete_elem(int fd, const void *key, void *value)
 	return sys_bpf(BPF_MAP_LOOKUP_AND_DELETE_ELEM, &attr, sizeof(attr));
 }
 
+int bpf_map_lookup_and_delete_elem_flags(int fd, const void *key, void *value, __u64 flags)
+{
+	union bpf_attr attr;
+
+	memset(&attr, 0, sizeof(attr));
+	attr.map_fd = fd;
+	attr.key = ptr_to_u64(key);
+	attr.value = ptr_to_u64(value);
+	attr.flags = flags;
+
+	return sys_bpf(BPF_MAP_LOOKUP_AND_DELETE_ELEM, &attr, sizeof(attr));
+}
+
 int bpf_map_delete_elem(int fd, const void *key)
 {
 	union bpf_attr attr;
diff --git a/tools/lib/bpf/bpf.h b/tools/lib/bpf/bpf.h
index 31ae1782ab99..4fae93443c27 100644
--- a/tools/lib/bpf/bpf.h
+++ b/tools/lib/bpf/bpf.h
@@ -124,6 +124,8 @@ LIBBPF_API int bpf_map_lookup_elem_flags(int fd, const void *key, void *value,
 					 __u64 flags);
 LIBBPF_API int bpf_map_lookup_and_delete_elem(int fd, const void *key,
 					      void *value);
+LIBBPF_API int bpf_map_lookup_and_delete_elem_flags(int fd, const void *key,
+						    void *value, __u64 flags);
 LIBBPF_API int bpf_map_delete_elem(int fd, const void *key);
 LIBBPF_API int bpf_map_get_next_key(int fd, const void *key, void *next_key);
 LIBBPF_API int bpf_map_freeze(int fd);
* Unmerged path tools/lib/bpf/libbpf.map
