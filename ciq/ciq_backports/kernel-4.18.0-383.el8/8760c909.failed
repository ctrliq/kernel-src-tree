file: Rename __close_fd to close_fd and remove the files parameter

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-383.el8
commit-author Eric W. Biederman <ebiederm@xmission.com>
commit 8760c909f54a82aaa6e76da19afe798a0c77c3c3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-383.el8/8760c909.failed

The function __close_fd was added to support binder[1].  Now that
binder has been fixed to no longer need __close_fd[2] all calls
to __close_fd pass current->files.

Therefore transform the files parameter into a local variable
initialized to current->files, and rename __close_fd to close_fd to
reflect this change, and keep it in sync with the similar changes to
__alloc_fd, and __fd_install.

This removes the need for callers to care about the extra care that
needs to be take if anything except current->files is passed, by
limiting the callers to only operation on current->files.

[1] 483ce1d4b8c3 ("take descriptor-related part of close() to file.c")
[2] 44d8047f1d87 ("binder: use standard functions to allocate fds")
	Acked-by: Christian Brauner <christian.brauner@ubuntu.com>
v1: https://lkml.kernel.org/r/20200817220425.9389-17-ebiederm@xmission.com
Link: https://lkml.kernel.org/r/20201120231441.29911-21-ebiederm@xmission.com
	Signed-off-by: Eric W. Biederman <ebiederm@xmission.com>
(cherry picked from commit 8760c909f54a82aaa6e76da19afe798a0c77c3c3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/fdtable.h
diff --cc include/linux/fdtable.h
index a32bf47c593e,dad4a488ce60..000000000000
--- a/include/linux/fdtable.h
+++ b/include/linux/fdtable.h
@@@ -116,12 -124,7 +116,16 @@@ int iterate_fd(struct files_struct *, u
  		int (*)(const void *, struct file *, unsigned),
  		const void *);
  
++<<<<<<< HEAD
 +extern int __alloc_fd(struct files_struct *files,
 +		      unsigned start, unsigned end, unsigned flags);
 +extern void __fd_install(struct files_struct *files,
 +		      unsigned int fd, struct file *file);
 +extern int __close_fd(struct files_struct *files,
 +		      unsigned int fd);
++=======
+ extern int close_fd(unsigned int fd);
++>>>>>>> 8760c909f54a (file: Rename __close_fd to close_fd and remove the files parameter)
  extern int __close_range(unsigned int fd, unsigned int max_fd, unsigned int flags);
  extern int __close_fd_get_file(unsigned int fd, struct file **res);
  extern int unshare_fd(unsigned long unshare_flags, unsigned int max_fds,
diff --git a/fs/file.c b/fs/file.c
index 1aa42ce8c5bf..e34053d6b1fa 100644
--- a/fs/file.c
+++ b/fs/file.c
@@ -651,11 +651,9 @@ static struct file *pick_file(struct files_struct *files, unsigned fd)
 	return file;
 }
 
-/*
- * The same warnings as for __alloc_fd()/__fd_install() apply here...
- */
-int __close_fd(struct files_struct *files, unsigned fd)
+int close_fd(unsigned fd)
 {
+	struct files_struct *files = current->files;
 	struct file *file;
 
 	file = pick_file(files, fd);
@@ -664,7 +662,7 @@ int __close_fd(struct files_struct *files, unsigned fd)
 
 	return filp_close(file, files);
 }
-EXPORT_SYMBOL(__close_fd); /* for ksys_close() */
+EXPORT_SYMBOL(close_fd); /* for ksys_close() */
 
 /**
  * last_fd - return last valid index into fd table
@@ -1094,7 +1092,7 @@ int replace_fd(unsigned fd, struct file *file, unsigned flags)
 	struct files_struct *files = current->files;
 
 	if (!file)
-		return __close_fd(files, fd);
+		return close_fd(fd);
 
 	if (fd >= rlimit(RLIMIT_NOFILE))
 		return -EBADF;
diff --git a/fs/open.c b/fs/open.c
index 3cb83097fdc6..d6677a68e98d 100644
--- a/fs/open.c
+++ b/fs/open.c
@@ -1202,7 +1202,7 @@ EXPORT_SYMBOL(filp_close);
  */
 SYSCALL_DEFINE1(close, unsigned int, fd)
 {
-	int retval = __close_fd(current->files, fd);
+	int retval = close_fd(fd);
 
 	/* can't restart close syscall because file table entry was cleared */
 	if (unlikely(retval == -ERESTARTSYS ||
* Unmerged path include/linux/fdtable.h
diff --git a/include/linux/syscalls.h b/include/linux/syscalls.h
index f1afc984cb20..73aa03c6a978 100644
--- a/include/linux/syscalls.h
+++ b/include/linux/syscalls.h
@@ -1277,16 +1277,16 @@ static inline long ksys_ftruncate(unsigned int fd, unsigned long length)
 	return do_sys_ftruncate(fd, length, 1);
 }
 
-extern int __close_fd(struct files_struct *files, unsigned int fd);
+extern int close_fd(unsigned int fd);
 
 /*
  * In contrast to sys_close(), this stub does not check whether the syscall
  * should or should not be restarted, but returns the raw error codes from
- * __close_fd().
+ * close_fd().
  */
 static inline int ksys_close(unsigned int fd)
 {
-	return __close_fd(current->files, fd);
+	return close_fd(fd);
 }
 
 extern long do_sys_open(int dfd, const char __user *filename, int flags,
