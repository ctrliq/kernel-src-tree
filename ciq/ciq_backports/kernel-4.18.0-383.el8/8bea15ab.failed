ice: xsk: allow empty Rx descriptors on XSK ZC data path

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-383.el8
commit-author Maciej Fijalkowski <maciej.fijalkowski@intel.com>
commit 8bea15ab7485863d900982ee6a0ff6f78b339c77
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-383.el8/8bea15ab.failed

Commit ac6f733a7bd5 ("ice: allow empty Rx descriptors") stated that ice
HW can produce empty descriptors that are valid and they should be
processed.

Add this support to xsk ZC path to avoid potential processing problems.

Fixes: 2d4238f55697 ("ice: Add support for AF_XDP")
	Signed-off-by: Maciej Fijalkowski <maciej.fijalkowski@intel.com>
	Tested-by: Kiran Bhandare <kiranx.bhandare@intel.com>
	Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
(cherry picked from commit 8bea15ab7485863d900982ee6a0ff6f78b339c77)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/intel/ice/ice_xsk.c
diff --cc drivers/net/ethernet/intel/ice/ice_xsk.c
index 295bfdac4d32,c1491dc0675d..000000000000
--- a/drivers/net/ethernet/intel/ice/ice_xsk.c
+++ b/drivers/net/ethernet/intel/ice/ice_xsk.c
@@@ -545,16 -538,22 +545,28 @@@ int ice_clean_rx_irq_zc(struct ice_rx_r
  		 */
  		dma_rmb();
  
+ 		xdp = *ice_xdp_buf(rx_ring, rx_ring->next_to_clean);
+ 
  		size = le16_to_cpu(rx_desc->wb.pkt_len) &
  				   ICE_RX_FLX_DESC_PKT_LEN_M;
- 		if (!size)
- 			break;
+ 		if (!size) {
+ 			xdp->data = NULL;
+ 			xdp->data_end = NULL;
+ 			xdp->data_hard_start = NULL;
+ 			xdp->data_meta = NULL;
+ 			goto construct_skb;
+ 		}
  
++<<<<<<< HEAD
 +		rx_buf = &rx_ring->rx_buf[rx_ring->next_to_clean];
 +		rx_buf->xdp->data_end = rx_buf->xdp->data + size;
 +		xsk_buff_dma_sync_for_cpu(rx_buf->xdp, rx_ring->xsk_pool);
++=======
+ 		xsk_buff_set_size(xdp, size);
+ 		xsk_buff_dma_sync_for_cpu(xdp, rx_ring->xsk_pool);
++>>>>>>> 8bea15ab7485 (ice: xsk: allow empty Rx descriptors on XSK ZC data path)
  
 -		xdp_res = ice_run_xdp_zc(rx_ring, xdp, xdp_prog, xdp_ring);
 +		xdp_res = ice_run_xdp_zc(rx_ring, rx_buf->xdp);
  		if (xdp_res) {
  			if (xdp_res & (ICE_XDP_TX | ICE_XDP_REDIR))
  				xdp_xmit |= xdp_res;
@@@ -569,9 -567,9 +581,9 @@@
  			ice_bump_ntc(rx_ring);
  			continue;
  		}
- 
+ construct_skb:
  		/* XDP_PASS path */
 -		skb = ice_construct_skb_zc(rx_ring, xdp);
 +		skb = ice_construct_skb_zc(rx_ring, rx_buf);
  		if (!skb) {
  			rx_ring->rx_stats.alloc_buf_failed++;
  			break;
* Unmerged path drivers/net/ethernet/intel/ice/ice_xsk.c
