powerpc/signal: Use PPC_RAW_xx() macros

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-383.el8
commit-author Christophe Leroy <christophe.leroy@csgroup.eu>
commit 1c9debbc2eb5391277ae6aa7d95f821e0c28613d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-383.el8/1c9debbc.failed

To improve readability, use PPC_RAW_xx() macros instead of
open coding. Those macros are self-explanatory so the comments
can go as well.

	Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>
	Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
Link: https://lore.kernel.org/r/4ca2bfdca2f47a293d05f61eb3c4e487ee170f1f.1621506159.git.christophe.leroy@csgroup.eu

(cherry picked from commit 1c9debbc2eb5391277ae6aa7d95f821e0c28613d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/powerpc/include/asm/ppc-opcode.h
#	arch/powerpc/kernel/signal_32.c
#	arch/powerpc/kernel/signal_64.c
diff --cc arch/powerpc/include/asm/ppc-opcode.h
index a3419bc294d7,e4e7abfa1285..000000000000
--- a/arch/powerpc/include/asm/ppc-opcode.h
+++ b/arch/powerpc/include/asm/ppc-opcode.h
@@@ -312,11 -275,6 +312,14 @@@
  #define PPC_INST_MFSPR_DSCR_USER_MASK	0xfc1ffffe
  #define PPC_INST_MTSPR_DSCR_USER	0x7c0303a6
  #define PPC_INST_MTSPR_DSCR_USER_MASK	0xfc1ffffe
++<<<<<<< HEAD
 +#define PPC_INST_MFVSRD			0x7c000066
 +#define PPC_INST_MTVSRD			0x7c000166
 +#define PPC_INST_SLBFEE			0x7c0007a7
 +#define PPC_INST_SLBIA			0x7c0003e4
 +
++=======
++>>>>>>> 1c9debbc2eb5 (powerpc/signal: Use PPC_RAW_xx() macros)
  #define PPC_INST_STRING			0x7c00042a
  #define PPC_INST_STRING_MASK		0xfc0007fe
  #define PPC_INST_STRING_GEN_MASK	0xfc00067e
@@@ -386,45 -291,12 +389,48 @@@
  #define PPC_INST_ADDI			0x38000000
  #define PPC_INST_ADDIS			0x3c000000
  #define PPC_INST_ADD			0x7c000214
 +#define PPC_INST_ADDC			0x7c000014
 +#define PPC_INST_SUB			0x7c000050
  #define PPC_INST_BLR			0x4e800020
 +#define PPC_INST_BLRL			0x4e800021
  #define PPC_INST_BCTR			0x4e800420
++<<<<<<< HEAD
 +#define PPC_INST_MULLD			0x7c0001d2
 +#define PPC_INST_MULLW			0x7c0001d6
 +#define PPC_INST_MULHWU			0x7c000016
 +#define PPC_INST_MULLI			0x1c000000
 +#define PPC_INST_MADDHD			0x10000030
 +#define PPC_INST_MADDHDU		0x10000031
 +#define PPC_INST_MADDLD			0x10000033
 +#define PPC_INST_DIVWU			0x7c000396
++=======
++>>>>>>> 1c9debbc2eb5 (powerpc/signal: Use PPC_RAW_xx() macros)
  #define PPC_INST_DIVD			0x7c0003d2
 +#define PPC_INST_DIVDU			0x7c000392
 +#define PPC_INST_RLWINM			0x54000000
 +#define PPC_INST_RLWINM_DOT		0x54000001
 +#define PPC_INST_RLWIMI			0x50000000
 +#define PPC_INST_RLDICL			0x78000000
  #define PPC_INST_RLDICR			0x78000004
 +#define PPC_INST_SLW			0x7c000030
 +#define PPC_INST_SLD			0x7c000036
 +#define PPC_INST_SRW			0x7c000430
 +#define PPC_INST_SRAW			0x7c000630
 +#define PPC_INST_SRAWI			0x7c000670
 +#define PPC_INST_SRD			0x7c000436
 +#define PPC_INST_SRAD			0x7c000634
 +#define PPC_INST_SRADI			0x7c000674
 +#define PPC_INST_AND			0x7c000038
 +#define PPC_INST_ANDDOT			0x7c000039
 +#define PPC_INST_OR			0x7c000378
 +#define PPC_INST_XOR			0x7c000278
 +#define PPC_INST_ANDI			0x70000000
  #define PPC_INST_ORI			0x60000000
  #define PPC_INST_ORIS			0x64000000
 +#define PPC_INST_XORI			0x68000000
 +#define PPC_INST_XORIS			0x6c000000
 +#define PPC_INST_NEG			0x7c0000d0
 +#define PPC_INST_EXTSW			0x7c0007b4
  #define PPC_INST_BRANCH			0x48000000
  #define PPC_INST_BL			0x48000001
  #define PPC_INST_BRANCH_COND		0x40800000
@@@ -495,54 -368,56 +501,75 @@@
  #endif
  
  /* Base instruction encoding */
 -#define PPC_RAW_CP_ABORT		(0x7c00068c)
 +#define PPC_RAW_CP_ABORT		(PPC_INST_CP_ABORT)
  #define PPC_RAW_COPY(a, b)		(PPC_INST_COPY | ___PPC_RA(a) | ___PPC_RB(b))
 -#define PPC_RAW_DARN(t, l)		(0x7c0005e6 | ___PPC_RT(t) | (((l) & 0x3) << 16))
 -#define PPC_RAW_DCBAL(a, b)		(0x7c2005ec | __PPC_RA(a) | __PPC_RB(b))
 -#define PPC_RAW_DCBZL(a, b)		(0x7c2007ec | __PPC_RA(a) | __PPC_RB(b))
 -#define PPC_RAW_LQARX(t, a, b, eh)	(0x7c000228 | ___PPC_RT(t) | ___PPC_RA(a) | ___PPC_RB(b) | __PPC_EH(eh))
 -#define PPC_RAW_LDARX(t, a, b, eh)	(0x7c0000a8 | ___PPC_RT(t) | ___PPC_RA(a) | ___PPC_RB(b) | __PPC_EH(eh))
 -#define PPC_RAW_LWARX(t, a, b, eh)	(0x7c000028 | ___PPC_RT(t) | ___PPC_RA(a) | ___PPC_RB(b) | __PPC_EH(eh))
 -#define PPC_RAW_PHWSYNC			(0x7c8004ac)
 -#define PPC_RAW_PLWSYNC			(0x7ca004ac)
 -#define PPC_RAW_STQCX(t, a, b)		(0x7c00016d | ___PPC_RT(t) | ___PPC_RA(a) | ___PPC_RB(b))
 -#define PPC_RAW_MADDHD(t, a, b, c)	(0x10000030 | ___PPC_RT(t) | ___PPC_RA(a) | ___PPC_RB(b) | ___PPC_RC(c))
 -#define PPC_RAW_MADDHDU(t, a, b, c)	(0x10000031 | ___PPC_RT(t) | ___PPC_RA(a) | ___PPC_RB(b) | ___PPC_RC(c))
 -#define PPC_RAW_MADDLD(t, a, b, c)	(0x10000033 | ___PPC_RT(t) | ___PPC_RA(a) | ___PPC_RB(b) | ___PPC_RC(c))
 -#define PPC_RAW_MSGSND(b)		(0x7c00019c | ___PPC_RB(b))
 -#define PPC_RAW_MSGSYNC			(0x7c0006ec)
 -#define PPC_RAW_MSGCLR(b)		(0x7c0001dc | ___PPC_RB(b))
 -#define PPC_RAW_MSGSNDP(b)		(0x7c00011c | ___PPC_RB(b))
 -#define PPC_RAW_MSGCLRP(b)		(0x7c00015c | ___PPC_RB(b))
 -#define PPC_RAW_PASTE(a, b)		(0x7c20070d | ___PPC_RA(a) | ___PPC_RB(b))
 +#define PPC_RAW_DARN(t, l)		(PPC_INST_DARN | ___PPC_RT(t) | (((l) & 0x3) << 16))
 +#define PPC_RAW_DCBAL(a, b)		(PPC_INST_DCBAL | __PPC_RA(a) | __PPC_RB(b))
 +#define PPC_RAW_DCBZL(a, b)		(PPC_INST_DCBZL | __PPC_RA(a) | __PPC_RB(b))
 +#define PPC_RAW_LQARX(t, a, b, eh)	(PPC_INST_LQARX | ___PPC_RT(t) | ___PPC_RA(a) | ___PPC_RB(b) | __PPC_EH(eh))
 +#define PPC_RAW_LDARX(t, a, b, eh)	(PPC_INST_LDARX | ___PPC_RT(t) | ___PPC_RA(a) | ___PPC_RB(b) | __PPC_EH(eh))
 +#define PPC_RAW_LWARX(t, a, b, eh)	(PPC_INST_LWARX | ___PPC_RT(t) | ___PPC_RA(a) | ___PPC_RB(b) | __PPC_EH(eh))
 +#define PPC_RAW_PHWSYNC			(PPC_INST_PHWSYNC)
 +#define PPC_RAW_PLWSYNC			(PPC_INST_PLWSYNC)
 +#define PPC_RAW_STQCX(t, a, b)		(PPC_INST_STQCX | ___PPC_RT(t) | ___PPC_RA(a) | ___PPC_RB(b))
 +#define PPC_RAW_MADDHD(t, a, b, c)	(PPC_INST_MADDHD | ___PPC_RT(t) | ___PPC_RA(a) | ___PPC_RB(b) | ___PPC_RC(c))
 +#define PPC_RAW_MADDHDU(t, a, b, c)	(PPC_INST_MADDHDU | ___PPC_RT(t) | ___PPC_RA(a) | ___PPC_RB(b) | ___PPC_RC(c))
 +#define PPC_RAW_MADDLD(t, a, b, c)	(PPC_INST_MADDLD | ___PPC_RT(t) | ___PPC_RA(a) | ___PPC_RB(b) | ___PPC_RC(c))
 +#define PPC_RAW_MSGSND(b)		(PPC_INST_MSGSND | ___PPC_RB(b))
 +#define PPC_RAW_MSGSYNC			(PPC_INST_MSGSYNC)
 +#define PPC_RAW_MSGCLR(b)		(PPC_INST_MSGCLR | ___PPC_RB(b))
 +#define PPC_RAW_MSGSNDP(b)		(PPC_INST_MSGSNDP | ___PPC_RB(b))
 +#define PPC_RAW_MSGCLRP(b)		(PPC_INST_MSGCLRP | ___PPC_RB(b))
 +#define PPC_RAW_PASTE(a, b)		(PPC_INST_PASTE | ___PPC_RA(a) | ___PPC_RB(b))
  #define PPC_RAW_POPCNTB(a, s)		(PPC_INST_POPCNTB | __PPC_RA(a) | __PPC_RS(s))
 -#define PPC_RAW_POPCNTD(a, s)		(0x7c0003f4 | __PPC_RA(a) | __PPC_RS(s))
 -#define PPC_RAW_POPCNTW(a, s)		(0x7c0002f4 | __PPC_RA(a) | __PPC_RS(s))
 -#define PPC_RAW_RFCI			(0x4c000066)
 -#define PPC_RAW_RFDI			(0x4c00004e)
 -#define PPC_RAW_RFMCI			(0x4c00004c)
 -#define PPC_RAW_TLBILX(t, a, b)		(0x7c000024 | __PPC_T_TLB(t) | 	__PPC_RA0(a) | __PPC_RB(b))
 -#define PPC_RAW_WAIT(w)			(0x7c00007c | __PPC_WC(w))
 -#define PPC_RAW_TLBIE(lp, a)		(0x7c000264 | ___PPC_RB(a) | ___PPC_RS(lp))
 +#define PPC_RAW_POPCNTD(a, s)		(PPC_INST_POPCNTD | __PPC_RA(a) | __PPC_RS(s))
 +#define PPC_RAW_POPCNTW(a, s)		(PPC_INST_POPCNTW | __PPC_RA(a) | __PPC_RS(s))
 +#define PPC_RAW_RFCI			(PPC_INST_RFCI)
 +#define PPC_RAW_RFDI			(PPC_INST_RFDI)
 +#define PPC_RAW_RFMCI			(PPC_INST_RFMCI)
 +#define PPC_RAW_TLBILX(t, a, b)		(PPC_INST_TLBILX | __PPC_T_TLB(t) | __PPC_RA0(a) | __PPC_RB(b))
 +#define PPC_RAW_WAIT(w)			(PPC_INST_WAIT | __PPC_WC(w))
 +#define PPC_RAW_TLBIE(lp, a)		(PPC_INST_TLBIE | ___PPC_RB(a) | ___PPC_RS(lp))
  #define PPC_RAW_TLBIE_5(rb, rs, ric, prs, r) \
 -	(0x7c000264 | ___PPC_RB(rb) | ___PPC_RS(rs) | ___PPC_RIC(ric) | ___PPC_PRS(prs) | ___PPC_R(r))
 +	(PPC_INST_TLBIE | ___PPC_RB(rb) | ___PPC_RS(rs) | ___PPC_RIC(ric) | ___PPC_PRS(prs) | ___PPC_R(r))
  #define PPC_RAW_TLBIEL(rb, rs, ric, prs, r) \
++<<<<<<< HEAD
 +	(PPC_INST_TLBIEL | ___PPC_RB(rb) | ___PPC_RS(rs) | ___PPC_RIC(ric) | ___PPC_PRS(prs) | ___PPC_R(r))
 +#define PPC_RAW_TLBSRX_DOT(a, b)	(PPC_INST_TLBSRX_DOT | __PPC_RA0(a) | __PPC_RB(b))
 +#define PPC_RAW_TLBIVAX(a, b)		(PPC_INST_TLBIVAX | __PPC_RA0(a) | __PPC_RB(b))
 +#define PPC_RAW_ERATWE(s, a, w)		(PPC_INST_ERATWE | __PPC_RS(s) | __PPC_RA(a) | __PPC_WS(w))
 +#define PPC_RAW_ERATRE(s, a, w)		(PPC_INST_ERATRE | __PPC_RS(s) | __PPC_RA(a) | __PPC_WS(w))
 +#define PPC_RAW_ERATILX(t, a, b)	(PPC_INST_ERATILX | __PPC_T_TLB(t) | __PPC_RA0(a) | __PPC_RB(b))
 +#define PPC_RAW_ERATIVAX(s, a, b)	(PPC_INST_ERATIVAX | __PPC_RS(s) | __PPC_RA0(a) | __PPC_RB(b))
 +#define PPC_RAW_ERATSX(t, a, w)		(PPC_INST_ERATSX | __PPC_RS(t) | __PPC_RA0(a) | __PPC_RB(b))
 +#define PPC_RAW_ERATSX_DOT(t, a, w)	(PPC_INST_ERATSX_DOT | __PPC_RS(t) | __PPC_RA0(a) | __PPC_RB(b))
 +#define PPC_RAW_SLBFEE_DOT(t, b)	(PPC_INST_SLBFEE | __PPC_RT(t) | __PPC_RB(b))
 +#define __PPC_RAW_SLBFEE_DOT(t, b)	(PPC_INST_SLBFEE | ___PPC_RT(t) | ___PPC_RB(b))
 +#define PPC_RAW_ICBT(c, a, b)		(PPC_INST_ICBT | __PPC_CT(c) | __PPC_RA0(a) | __PPC_RB(b))
 +#define PPC_RAW_LBZCIX(t, a, b)		(PPC_INST_LBZCIX | __PPC_RT(t) | __PPC_RA(a) | __PPC_RB(b))
 +#define PPC_RAW_STBCIX(s, a, b)		(PPC_INST_STBCIX | __PPC_RS(s) | __PPC_RA(a) | __PPC_RB(b))
 +#define PPC_RAW_DCBFPS(a, b)		(PPC_INST_DCBF | ___PPC_RA(a) | ___PPC_RB(b) | (4 << 21))
 +#define PPC_RAW_DCBSTPS(a, b)		(PPC_INST_DCBF | ___PPC_RA(a) | ___PPC_RB(b) | (6 << 21))
++=======
+ 	(0x7c000224 | ___PPC_RB(rb) | ___PPC_RS(rs) | ___PPC_RIC(ric) | ___PPC_PRS(prs) | ___PPC_R(r))
+ #define PPC_RAW_TLBSRX_DOT(a, b)	(0x7c0006a5 | __PPC_RA0(a) | __PPC_RB(b))
+ #define PPC_RAW_TLBIVAX(a, b)		(0x7c000624 | __PPC_RA0(a) | __PPC_RB(b))
+ #define PPC_RAW_ERATWE(s, a, w)		(0x7c0001a6 | __PPC_RS(s) | __PPC_RA(a) | __PPC_WS(w))
+ #define PPC_RAW_ERATRE(s, a, w)		(0x7c000166 | __PPC_RS(s) | __PPC_RA(a) | __PPC_WS(w))
+ #define PPC_RAW_ERATILX(t, a, b)	(0x7c000066 | __PPC_T_TLB(t) | __PPC_RA0(a) | __PPC_RB(b))
+ #define PPC_RAW_ERATIVAX(s, a, b)	(0x7c000666 | __PPC_RS(s) | __PPC_RA0(a) | __PPC_RB(b))
+ #define PPC_RAW_ERATSX(t, a, w)		(0x7c000126 | __PPC_RS(t) | __PPC_RA0(a) | __PPC_RB(b))
+ #define PPC_RAW_ERATSX_DOT(t, a, w)	(0x7c000127 | __PPC_RS(t) | __PPC_RA0(a) | __PPC_RB(b))
+ #define PPC_RAW_SLBFEE_DOT(t, b)	(0x7c0007a7 | __PPC_RT(t) | __PPC_RB(b))
+ #define __PPC_RAW_SLBFEE_DOT(t, b)	(0x7c0007a7 | ___PPC_RT(t) | ___PPC_RB(b))
+ #define PPC_RAW_ICBT(c, a, b)		(0x7c00002c | __PPC_CT(c) | __PPC_RA0(a) | __PPC_RB(b))
+ #define PPC_RAW_LBZCIX(t, a, b)		(0x7c0006aa | __PPC_RT(t) | __PPC_RA(a) | __PPC_RB(b))
+ #define PPC_RAW_STBCIX(s, a, b)		(0x7c0007aa | __PPC_RS(s) | __PPC_RA(a) | __PPC_RB(b))
+ #define PPC_RAW_DCBFPS(a, b)		(0x7c0000ac | ___PPC_RA(a) | ___PPC_RB(b) | (4 << 21))
+ #define PPC_RAW_DCBSTPS(a, b)		(0x7c0000ac | ___PPC_RA(a) | ___PPC_RB(b) | (6 << 21))
+ #define PPC_RAW_SC()			(0x44000002)
+ 
++>>>>>>> 1c9debbc2eb5 (powerpc/signal: Use PPC_RAW_xx() macros)
  /*
   * Define what the VSX XX1 form instructions will look like, then add
   * the 128 bit load store instructions based on that.
@@@ -564,49 -439,54 +591,50 @@@
  #define PPC_RAW_STXVP(xsp, a, i)	(0x18000001 | __PPC_XSP(xsp) | ___PPC_RA(a) | IMM_DQ(i))
  #define PPC_RAW_LXVPX(xtp, a, b)	(0x7c00029a | __PPC_XTP(xtp) | ___PPC_RA(a) | ___PPC_RB(b))
  #define PPC_RAW_STXVPX(xsp, a, b)	(0x7c00039a | __PPC_XSP(xsp) | ___PPC_RA(a) | ___PPC_RB(b))
 -#define PPC_RAW_PLXVP_P(xtp, i, a, pr)	(PPC_PREFIX_8LS | __PPC_PRFX_R(pr) | IMM_D0(i))
 -#define PPC_RAW_PLXVP_S(xtp, i, a, pr)	(0xe8000000 | __PPC_XTP(xtp) | ___PPC_RA(a) | IMM_D1(i))
 -#define PPC_RAW_PSTXVP_P(xsp, i, a, pr)	(PPC_PREFIX_8LS | __PPC_PRFX_R(pr) | IMM_D0(i))
 -#define PPC_RAW_PSTXVP_S(xsp, i, a, pr)	(0xf8000000 | __PPC_XSP(xsp) | ___PPC_RA(a) | IMM_D1(i))
 -#define PPC_RAW_NAP			(0x4c000364)
 -#define PPC_RAW_SLEEP			(0x4c0003a4)
 -#define PPC_RAW_WINKLE			(0x4c0003e4)
 -#define PPC_RAW_STOP			(0x4c0002e4)
 -#define PPC_RAW_CLRBHRB			(0x7c00035c)
 -#define PPC_RAW_MFBHRBE(r, n)		(0x7c00025c | __PPC_RT(r) | (((n) & 0x3ff) << 11))
 +#define PPC_RAW_PLXVP(xtp, i, a, pr) \
 +	((PPC_PREFIX_8LS | __PPC_PRFX_R(pr) | IMM_D0(i)) << 32 | (0xe8000000 | __PPC_XTP(xtp) | ___PPC_RA(a) | IMM_D1(i)))
 +#define PPC_RAW_PSTXVP(xsp, i, a, pr) \
 +	((PPC_PREFIX_8LS | __PPC_PRFX_R(pr) | IMM_D0(i)) << 32 | (0xf8000000 | __PPC_XSP(xsp) | ___PPC_RA(a) | IMM_D1(i)))
 +#define PPC_RAW_NAP			(PPC_INST_NAP)
 +#define PPC_RAW_SLEEP			(PPC_INST_SLEEP)
 +#define PPC_RAW_WINKLE			(PPC_INST_WINKLE)
 +#define PPC_RAW_STOP			(PPC_INST_STOP)
 +#define PPC_RAW_CLRBHRB			(PPC_INST_CLRBHRB)
 +#define PPC_RAW_MFBHRBE(r, n)		(PPC_INST_BHRBE | __PPC_RT(r) | (((n) & 0x3ff) << 11))
  #define PPC_RAW_TRECHKPT		(PPC_INST_TRECHKPT)
  #define PPC_RAW_TRECLAIM(r)		(PPC_INST_TRECLAIM | __PPC_RA(r))
 -#define PPC_RAW_TABORT(r)		(0x7c00071d | __PPC_RA(r))
 +#define PPC_RAW_TABORT(r)		(PPC_INST_TABORT | __PPC_RA(r))
  #define TMRN(x)				((((x) & 0x1f) << 16) | (((x) & 0x3e0) << 6))
 -#define PPC_RAW_MTTMR(tmr, r)		(0x7c0003dc | TMRN(tmr) | ___PPC_RS(r))
 -#define PPC_RAW_MFTMR(tmr, r)		(0x7c0002dc | TMRN(tmr) | ___PPC_RT(r))
 -#define PPC_RAW_ICSWX(s, a, b)		(0x7c00032d | ___PPC_RS(s) | ___PPC_RA(a) | ___PPC_RB(b))
 -#define PPC_RAW_ICSWEPX(s, a, b)	(0x7c00076d | ___PPC_RS(s) | ___PPC_RA(a) | ___PPC_RB(b))
 -#define PPC_RAW_SLBIA(IH)		(0x7c0003e4 | (((IH) & 0x7) << 21))
 +#define PPC_RAW_MTTMR(tmr, r)		(PPC_INST_MTTMR | TMRN(tmr) | ___PPC_RS(r))
 +#define PPC_RAW_MFTMR(tmr, r)		(PPC_INST_MFTMR | TMRN(tmr) | ___PPC_RT(r))
 +#define PPC_RAW_ICSWX(s, a, b)		(PPC_INST_ICSWX | ___PPC_RS(s) | ___PPC_RA(a) | ___PPC_RB(b))
 +#define PPC_RAW_ICSWEPX(s, a, b)	(PPC_INST_ICSWEPX | ___PPC_RS(s) | ___PPC_RA(a) | ___PPC_RB(b))
 +#define PPC_RAW_SLBIA(IH)		(PPC_INST_SLBIA | (((IH) & 0x7) << 21))
  #define PPC_RAW_VCMPEQUD_RC(vrt, vra, vrb) \
 -	(0x100000c7 | ___PPC_RT(vrt) | ___PPC_RA(vra) | ___PPC_RB(vrb) | __PPC_RC21)
 +	(PPC_INST_VCMPEQUD | ___PPC_RT(vrt) | ___PPC_RA(vra) | ___PPC_RB(vrb) | __PPC_RC21)
  #define PPC_RAW_VCMPEQUB_RC(vrt, vra, vrb) \
 -	(0x10000006 | ___PPC_RT(vrt) | ___PPC_RA(vra) | ___PPC_RB(vrb) | __PPC_RC21)
 +	(PPC_INST_VCMPEQUB | ___PPC_RT(vrt) | ___PPC_RA(vra) | ___PPC_RB(vrb) | __PPC_RC21)
  #define PPC_RAW_LD(r, base, i)		(PPC_INST_LD | ___PPC_RT(r) | ___PPC_RA(base) | IMM_DS(i))
 -#define PPC_RAW_LWZ(r, base, i)		(0x80000000 | ___PPC_RT(r) | ___PPC_RA(base) | IMM_L(i))
 -#define PPC_RAW_LWZX(t, a, b)		(0x7c00002e | ___PPC_RT(t) | ___PPC_RA(a) | ___PPC_RB(b))
 +#define PPC_RAW_LWZ(r, base, i)		(PPC_INST_LWZ | ___PPC_RT(r) | ___PPC_RA(base) | IMM_L(i))
 +#define PPC_RAW_LWZX(t, a, b)		(PPC_INST_LWZX | ___PPC_RT(t) | ___PPC_RA(a) | ___PPC_RB(b))
  #define PPC_RAW_STD(r, base, i)		(PPC_INST_STD | ___PPC_RS(r) | ___PPC_RA(base) | IMM_DS(i))
 -#define PPC_RAW_STDCX(s, a, b)		(0x7c0001ad | ___PPC_RS(s) | ___PPC_RA(a) | ___PPC_RB(b))
 -#define PPC_RAW_LFSX(t, a, b)		(0x7c00042e | ___PPC_RT(t) | ___PPC_RA(a) | ___PPC_RB(b))
 -#define PPC_RAW_STFSX(s, a, b)		(0x7c00052e | ___PPC_RS(s) | ___PPC_RA(a) | ___PPC_RB(b))
 -#define PPC_RAW_LFDX(t, a, b)		(0x7c0004ae | ___PPC_RT(t) | ___PPC_RA(a) | ___PPC_RB(b))
 -#define PPC_RAW_STFDX(s, a, b)		(0x7c0005ae | ___PPC_RS(s) | ___PPC_RA(a) | ___PPC_RB(b))
 -#define PPC_RAW_LVX(t, a, b)		(0x7c0000ce | ___PPC_RT(t) | ___PPC_RA(a) | ___PPC_RB(b))
 -#define PPC_RAW_STVX(s, a, b)		(0x7c0001ce | ___PPC_RS(s) | ___PPC_RA(a) | ___PPC_RB(b))
 -#define PPC_RAW_ADDE(t, a, b)		(0x7c000114 | ___PPC_RT(t) | ___PPC_RA(a) | ___PPC_RB(b))
 -#define PPC_RAW_ADDZE(t, a)		(0x7c000194 | ___PPC_RT(t) | ___PPC_RA(a))
 -#define PPC_RAW_ADDME(t, a)		(0x7c0001d4 | ___PPC_RT(t) | ___PPC_RA(a))
 +#define PPC_RAW_STDCX(s, a, b)		(PPC_INST_STDCX | ___PPC_RS(s) | ___PPC_RA(a) | ___PPC_RB(b))
 +#define PPC_RAW_LFSX(t, a, b)		(PPC_INST_LFSX | ___PPC_RT(t) | ___PPC_RA(a) | ___PPC_RB(b))
 +#define PPC_RAW_STFSX(s, a, b)		(PPC_INST_STFSX | ___PPC_RS(s) | ___PPC_RA(a) | ___PPC_RB(b))
 +#define PPC_RAW_LFDX(t, a, b)		(PPC_INST_LFDX | ___PPC_RT(t) | ___PPC_RA(a) | ___PPC_RB(b))
 +#define PPC_RAW_STFDX(s, a, b)		(PPC_INST_STFDX | ___PPC_RS(s) | ___PPC_RA(a) | ___PPC_RB(b))
 +#define PPC_RAW_LVX(t, a, b)		(PPC_INST_LVX | ___PPC_RT(t) | ___PPC_RA(a) | ___PPC_RB(b))
 +#define PPC_RAW_STVX(s, a, b)		(PPC_INST_STVX | ___PPC_RS(s) | ___PPC_RA(a) | ___PPC_RB(b))
  #define PPC_RAW_ADD(t, a, b)		(PPC_INST_ADD | ___PPC_RT(t) | ___PPC_RA(a) | ___PPC_RB(b))
  #define PPC_RAW_ADD_DOT(t, a, b)	(PPC_INST_ADD | ___PPC_RT(t) | ___PPC_RA(a) | ___PPC_RB(b) | 0x1)
 -#define PPC_RAW_ADDC(t, a, b)		(0x7c000014 | ___PPC_RT(t) | ___PPC_RA(a) | ___PPC_RB(b))
 -#define PPC_RAW_ADDC_DOT(t, a, b)	(0x7c000014 | ___PPC_RT(t) | ___PPC_RA(a) | ___PPC_RB(b) | 0x1)
 +#define PPC_RAW_ADDC(t, a, b)		(PPC_INST_ADDC | ___PPC_RT(t) | ___PPC_RA(a) | ___PPC_RB(b))
 +#define PPC_RAW_ADDC_DOT(t, a, b)	(PPC_INST_ADDC | ___PPC_RT(t) | ___PPC_RA(a) | ___PPC_RB(b) | 0x1)
  #define PPC_RAW_NOP()			(PPC_INST_NOP)
  #define PPC_RAW_BLR()			(PPC_INST_BLR)
 -#define PPC_RAW_BLRL()			(0x4e800021)
 -#define PPC_RAW_MTLR(r)			(0x7c0803a6 | ___PPC_RT(r))
 -#define PPC_RAW_MFLR(t)			(PPC_INST_MFLR | ___PPC_RT(t))
 +#define PPC_RAW_BLRL()			(PPC_INST_BLRL)
 +#define PPC_RAW_MTLR(r)			(PPC_INST_MTLR | ___PPC_RT(r))
  #define PPC_RAW_BCTR()			(PPC_INST_BCTR)
+ #define PPC_RAW_BCTRL()			(0x4e800421)
  #define PPC_RAW_MTCTR(r)		(PPC_INST_MTCTR | ___PPC_RT(r))
  #define PPC_RAW_ADDI(d, a, i)		(PPC_INST_ADDI | ___PPC_RT(d) | ___PPC_RA(a) | IMM_L(i))
  #define PPC_RAW_LI(r, i)		PPC_RAW_ADDI(r, 0, i)
diff --cc arch/powerpc/kernel/signal_32.c
index 164cfe405d30,a50d091334ea..000000000000
--- a/arch/powerpc/kernel/signal_32.c
+++ b/arch/powerpc/kernel/signal_32.c
@@@ -923,51 -802,51 +923,89 @@@ int handle_rt_signal32(struct ksignal *
  		goto badframe;
  
  	/* Put the siginfo & fill in most of the ucontext */
++<<<<<<< HEAD
 +	if (copy_siginfo_to_user(&rt_sf->info, &ksig->info)
 +	    || __put_user(0, &rt_sf->uc.uc_flags)
 +	    || __save_altstack(&rt_sf->uc.uc_stack, regs->gpr[1])
 +	    || __put_user(to_user_ptr(&rt_sf->uc.uc_mcontext),
 +		    &rt_sf->uc.uc_regs)
 +	    || put_sigset_t(&rt_sf->uc.uc_sigmask, oldset))
++=======
+ 	unsafe_put_user(0, &frame->uc.uc_flags, failed);
+ #ifdef CONFIG_PPC64
+ 	unsafe_compat_save_altstack(&frame->uc.uc_stack, regs->gpr[1], failed);
+ #else
+ 	unsafe_save_altstack(&frame->uc.uc_stack, regs->gpr[1], failed);
+ #endif
+ 	unsafe_put_user(to_user_ptr(&frame->uc.uc_mcontext), &frame->uc.uc_regs, failed);
+ 
+ 	if (MSR_TM_ACTIVE(msr)) {
+ #ifdef CONFIG_PPC_TRANSACTIONAL_MEM
+ 		unsafe_put_user((unsigned long)&frame->uc_transact,
+ 				&frame->uc.uc_link, failed);
+ 		unsafe_put_user((unsigned long)tm_mctx,
+ 				&frame->uc_transact.uc_regs, failed);
+ #endif
+ 		unsafe_save_tm_user_regs(regs, mctx, tm_mctx, msr, failed);
+ 	} else {
+ 		unsafe_put_user(0, &frame->uc.uc_link, failed);
+ 		unsafe_save_user_regs(regs, mctx, tm_mctx, 1, failed);
+ 	}
+ 
+ 	/* Save user registers on the stack */
+ 	if (tsk->mm->context.vdso) {
+ 		tramp = VDSO32_SYMBOL(tsk->mm->context.vdso, sigtramp_rt32);
+ 	} else {
+ 		tramp = (unsigned long)mctx->mc_pad;
+ 		unsafe_put_user(PPC_RAW_LI(_R0, __NR_rt_sigreturn), &mctx->mc_pad[0], failed);
+ 		unsafe_put_user(PPC_RAW_SC(), &mctx->mc_pad[1], failed);
+ 		asm("dcbst %y0; sync; icbi %y0; sync" :: "Z" (mctx->mc_pad[0]));
+ 	}
+ 	unsafe_put_sigset_t(&frame->uc.uc_sigmask, oldset, failed);
+ 
+ 	user_access_end();
+ 
+ 	if (copy_siginfo_to_user(&frame->info, &ksig->info))
++>>>>>>> 1c9debbc2eb5 (powerpc/signal: Use PPC_RAW_xx() macros)
  		goto badframe;
  
 +	/* Save user registers on the stack */
 +	frame = &rt_sf->uc.uc_mcontext;
 +	addr = frame;
 +	if (vdso32_rt_sigtramp && tsk->mm->context.vdso_base) {
 +		sigret = 0;
 +		tramp = tsk->mm->context.vdso_base + vdso32_rt_sigtramp;
 +	} else {
 +		sigret = __NR_rt_sigreturn;
 +		tramp = (unsigned long) frame->tramp;
 +	}
 +
 +#ifdef CONFIG_PPC_TRANSACTIONAL_MEM
 +	tm_frame = &rt_sf->uc_transact.uc_mcontext;
 +	if (MSR_TM_ACTIVE(msr)) {
 +		if (__put_user((unsigned long)&rt_sf->uc_transact,
 +			       &rt_sf->uc.uc_link) ||
 +		    __put_user((unsigned long)tm_frame,
 +			       &rt_sf->uc_transact.uc_regs))
 +			goto badframe;
 +		if (save_tm_user_regs(regs, frame, tm_frame, sigret, msr))
 +			goto badframe;
 +	}
 +	else
 +#endif
 +	{
 +		if (__put_user(0, &rt_sf->uc.uc_link))
 +			goto badframe;
 +		if (save_user_regs(regs, frame, tm_frame, sigret, 1))
 +			goto badframe;
 +	}
  	regs->link = tramp;
  
 -#ifdef CONFIG_PPC_FPU_REGS
  	tsk->thread.fp_state.fpscr = 0;	/* turn off all fp exceptions */
 -#endif
  
  	/* create a stack frame for the caller of the handler */
 -	newsp = ((unsigned long)frame) - (__SIGNAL_FRAMESIZE + 16);
 +	newsp = ((unsigned long)rt_sf) - (__SIGNAL_FRAMESIZE + 16);
 +	addr = (void __user *)regs->gpr[1];
  	if (put_user(regs->gpr[1], (u32 __user *)newsp))
  		goto badframe;
  
@@@ -983,13 -862,99 +1021,105 @@@
  	regs->msr |= (MSR_KERNEL & MSR_LE);
  	return 0;
  
 -failed:
 -	user_access_end();
 -
  badframe:
++<<<<<<< HEAD
 +	if (show_unhandled_signals)
 +		printk_ratelimited(KERN_INFO
 +				   "%s[%d]: bad frame in handle_rt_signal32: "
 +				   "%p nip %08lx lr %08lx\n",
 +				   tsk->comm, tsk->pid,
 +				   addr, regs->nip, regs->link);
++=======
+ 	signal_fault(tsk, regs, "handle_rt_signal32", frame);
+ 
+ 	return 1;
+ }
+ 
+ /*
+  * OK, we're invoking a handler
+  */
+ int handle_signal32(struct ksignal *ksig, sigset_t *oldset,
+ 		struct task_struct *tsk)
+ {
+ 	struct sigcontext __user *sc;
+ 	struct sigframe __user *frame;
+ 	struct mcontext __user *mctx;
+ 	struct mcontext __user *tm_mctx = NULL;
+ 	unsigned long newsp = 0;
+ 	unsigned long tramp;
+ 	struct pt_regs *regs = tsk->thread.regs;
+ 	/* Save the thread's msr before get_tm_stackpointer() changes it */
+ 	unsigned long msr = regs->msr;
+ 
+ 	/* Set up Signal Frame */
+ 	frame = get_sigframe(ksig, tsk, sizeof(*frame), 1);
+ 	mctx = &frame->mctx;
+ #ifdef CONFIG_PPC_TRANSACTIONAL_MEM
+ 	tm_mctx = &frame->mctx_transact;
+ #endif
+ 	if (MSR_TM_ACTIVE(msr))
+ 		prepare_save_tm_user_regs();
+ 	else
+ 		prepare_save_user_regs(1);
+ 
+ 	if (!user_access_begin(frame, sizeof(*frame)))
+ 		goto badframe;
+ 	sc = (struct sigcontext __user *) &frame->sctx;
+ 
+ #if _NSIG != 64
+ #error "Please adjust handle_signal()"
+ #endif
+ 	unsafe_put_user(to_user_ptr(ksig->ka.sa.sa_handler), &sc->handler, failed);
+ 	unsafe_put_user(oldset->sig[0], &sc->oldmask, failed);
+ #ifdef CONFIG_PPC64
+ 	unsafe_put_user((oldset->sig[0] >> 32), &sc->_unused[3], failed);
+ #else
+ 	unsafe_put_user(oldset->sig[1], &sc->_unused[3], failed);
+ #endif
+ 	unsafe_put_user(to_user_ptr(mctx), &sc->regs, failed);
+ 	unsafe_put_user(ksig->sig, &sc->signal, failed);
+ 
+ 	if (MSR_TM_ACTIVE(msr))
+ 		unsafe_save_tm_user_regs(regs, mctx, tm_mctx, msr, failed);
+ 	else
+ 		unsafe_save_user_regs(regs, mctx, tm_mctx, 1, failed);
+ 
+ 	if (tsk->mm->context.vdso) {
+ 		tramp = VDSO32_SYMBOL(tsk->mm->context.vdso, sigtramp32);
+ 	} else {
+ 		tramp = (unsigned long)mctx->mc_pad;
+ 		unsafe_put_user(PPC_RAW_LI(_R0, __NR_sigreturn), &mctx->mc_pad[0], failed);
+ 		unsafe_put_user(PPC_RAW_SC(), &mctx->mc_pad[1], failed);
+ 		asm("dcbst %y0; sync; icbi %y0; sync" :: "Z" (mctx->mc_pad[0]));
+ 	}
+ 	user_access_end();
+ 
+ 	regs->link = tramp;
+ 
+ #ifdef CONFIG_PPC_FPU_REGS
+ 	tsk->thread.fp_state.fpscr = 0;	/* turn off all fp exceptions */
+ #endif
+ 
+ 	/* create a stack frame for the caller of the handler */
+ 	newsp = ((unsigned long)frame) - __SIGNAL_FRAMESIZE;
+ 	if (put_user(regs->gpr[1], (u32 __user *)newsp))
+ 		goto badframe;
+ 
+ 	regs->gpr[1] = newsp;
+ 	regs->gpr[3] = ksig->sig;
+ 	regs->gpr[4] = (unsigned long) sc;
+ 	regs->nip = (unsigned long)ksig->ka.sa.sa_handler;
+ 	/* enter the signal handler in native-endian mode */
+ 	regs->msr &= ~MSR_LE;
+ 	regs->msr |= (MSR_KERNEL & MSR_LE);
+ 	return 0;
+ 
+ failed:
+ 	user_access_end();
+ 
+ badframe:
+ 	signal_fault(tsk, regs, "handle_signal32", frame);
++>>>>>>> 1c9debbc2eb5 (powerpc/signal: Use PPC_RAW_xx() macros)
  
  	return 1;
  }
diff --cc arch/powerpc/kernel/signal_64.c
index 8e08576c37c9,0f9646682598..000000000000
--- a/arch/powerpc/kernel/signal_64.c
+++ b/arch/powerpc/kernel/signal_64.c
@@@ -605,12 -618,12 +605,21 @@@ static long setup_trampoline(unsigned i
  	int i;
  	long err = 0;
  
++<<<<<<< HEAD
 +	/* addi r1, r1, __SIGNAL_FRAMESIZE  # Pop the dummy stackframe */
 +	err |= __put_user(0x38210000UL | (__SIGNAL_FRAMESIZE & 0xffff), &tramp[0]);
 +	/* li r0, __NR_[rt_]sigreturn| */
 +	err |= __put_user(0x38000000UL | (syscall & 0xffff), &tramp[1]);
 +	/* sc */
 +	err |= __put_user(0x44000002UL, &tramp[2]);
++=======
+ 	/* Call the handler and pop the dummy stackframe*/
+ 	err |= __put_user(PPC_RAW_BCTRL(), &tramp[0]);
+ 	err |= __put_user(PPC_RAW_ADDI(_R1, _R1, __SIGNAL_FRAMESIZE), &tramp[1]);
+ 
+ 	err |= __put_user(PPC_RAW_LI(_R0, syscall), &tramp[2]);
+ 	err |= __put_user(PPC_RAW_SC(), &tramp[3]);
++>>>>>>> 1c9debbc2eb5 (powerpc/signal: Use PPC_RAW_xx() macros)
  
  	/* Minimal traceback info */
  	for (i=TRAMP_TRACEBACK; i < TRAMP_SIZE ;i++)
* Unmerged path arch/powerpc/include/asm/ppc-opcode.h
* Unmerged path arch/powerpc/kernel/signal_32.c
* Unmerged path arch/powerpc/kernel/signal_64.c
