string.h: Introduce memset_after() for wiping trailing members/padding

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-383.el8
commit-author Kees Cook <keescook@chromium.org>
commit 4797632f4f1d8af4e0670adcb97bf9800dc3beca
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-383.el8/4797632f.failed

A common idiom in kernel code is to wipe the contents of a structure
after a given member. This is especially useful in places where there is
trailing padding. These open-coded cases are usually difficult to read
and very sensitive to struct layout changes. Introduce a new helper,
memset_after() that takes the target struct instance, the byte to write,
and the member name after which the zeroing should start.

	Cc: Steffen Klassert <steffen.klassert@secunet.com>
	Cc: Herbert Xu <herbert@gondor.apana.org.au>
	Cc: "David S. Miller" <davem@davemloft.net>
	Cc: Jakub Kicinski <kuba@kernel.org>
	Cc: Andrew Morton <akpm@linux-foundation.org>
	Cc: Francis Laniel <laniel_francis@privacyrequired.com>
	Cc: Vincenzo Frascino <vincenzo.frascino@arm.com>
	Cc: Daniel Axtens <dja@axtens.net>
	Cc: netdev@vger.kernel.org
	Signed-off-by: Kees Cook <keescook@chromium.org>
(cherry picked from commit 4797632f4f1d8af4e0670adcb97bf9800dc3beca)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	lib/memcpy_kunit.c
* Unmerged path lib/memcpy_kunit.c
diff --git a/include/linux/string.h b/include/linux/string.h
index b0bfaa82808b..65ccbaea86cd 100644
--- a/include/linux/string.h
+++ b/include/linux/string.h
@@ -515,6 +515,23 @@ static inline void memcpy_and_pad(void *dest, size_t dest_len,
 		memcpy(dest, src, dest_len);
 }
 
+/**
+ * memset_after - Set a value after a struct member to the end of a struct
+ *
+ * @obj: Address of target struct instance
+ * @v: Byte value to repeatedly write
+ * @member: after which struct member to start writing bytes
+ *
+ * This is good for clearing padding following the given member.
+ */
+#define memset_after(obj, v, member)					\
+({									\
+	u8 *__ptr = (u8 *)(obj);					\
+	typeof(v) __val = (v);						\
+	memset(__ptr + offsetofend(typeof(*(obj)), member), __val,	\
+	       sizeof(*(obj)) - offsetofend(typeof(*(obj)), member));	\
+})
+
 /**
  * str_has_prefix - Test if a string has a given prefix
  * @str: The string to test
* Unmerged path lib/memcpy_kunit.c
