libbpf: Fix pr_warn type warnings on 32bit

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-383.el8
commit-author Michal Suchanek <msuchanek@suse.de>
commit edc0571c5f67c7e24958149a8ec6a904ca84840b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-383.el8/edc0571c.failed

The printed value is ptrdiff_t and is formatted wiht %ld. This works on
64bit but produces a warning on 32bit. Fix the format specifier to %td.

Fixes: 67234743736a ("libbpf: Generate loader program out of BPF ELF file.")
	Signed-off-by: Michal Suchanek <msuchanek@suse.de>
	Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
	Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
	Acked-by: Yonghong Song <yhs@fb.com>
Link: https://lore.kernel.org/bpf/20210604112448.32297-1-msuchanek@suse.de
(cherry picked from commit edc0571c5f67c7e24958149a8ec6a904ca84840b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/lib/bpf/libbpf.c
diff --cc tools/lib/bpf/libbpf.c
index 999ce7bd4193,65f87cc1220c..000000000000
--- a/tools/lib/bpf/libbpf.c
+++ b/tools/lib/bpf/libbpf.c
@@@ -4555,7 -4580,13 +4555,17 @@@ static int init_map_slots(struct bpf_ma
  
  		targ_map = map->init_slots[i];
  		fd = bpf_map__fd(targ_map);
++<<<<<<< HEAD
 +		err = bpf_map_update_elem(map->fd, &i, &fd, 0);
++=======
+ 		if (obj->gen_loader) {
+ 			pr_warn("// TODO map_update_elem: idx %td key %d value==map_idx %td\n",
+ 				map - obj->maps, i, targ_map - obj->maps);
+ 			return -ENOTSUP;
+ 		} else {
+ 			err = bpf_map_update_elem(map->fd, &i, &fd, 0);
+ 		}
++>>>>>>> edc0571c5f67 (libbpf: Fix pr_warn type warnings on 32bit)
  		if (err) {
  			err = -errno;
  			pr_warn("map '%s': failed to initialize slot [%d] to map '%s' fd=%d: %d\n",
@@@ -6170,6 -6204,12 +6180,15 @@@ static int bpf_core_apply_relo(struct b
  	if (str_is_empty(spec_str))
  		return -EINVAL;
  
++<<<<<<< HEAD
++=======
+ 	if (prog->obj->gen_loader) {
+ 		pr_warn("// TODO core_relo: prog %td insn[%d] %s %s kind %d\n",
+ 			prog - prog->obj->programs, relo->insn_off / 8,
+ 			local_name, spec_str, relo->kind);
+ 		return -ENOTSUP;
+ 	}
++>>>>>>> edc0571c5f67 (libbpf: Fix pr_warn type warnings on 32bit)
  	err = bpf_core_parse_spec(local_btf, local_id, spec_str, relo->kind, &local_spec);
  	if (err) {
  		pr_warn("prog '%s': relo #%d: parsing [%d] %s %s + %s failed: %d\n",
* Unmerged path tools/lib/bpf/libbpf.c
