fs/kernel_read_file: Remove FIRMWARE_PREALLOC_BUFFER enum

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-383.el8
commit-author Kees Cook <keescook@chromium.org>
commit c307459b9d1fcb8bbf3ea5a4162979532322ef77
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-383.el8/c307459b.failed

FIRMWARE_PREALLOC_BUFFER is a "how", not a "what", and confuses the LSMs
that are interested in filtering between types of things. The "how"
should be an internal detail made uninteresting to the LSMs.

Fixes: a098ecd2fa7d ("firmware: support loading into a pre-allocated buffer")
Fixes: fd90bc559bfb ("ima: based on policy verify firmware signatures (pre-allocated buffer)")
Fixes: 4f0496d8ffa3 ("ima: based on policy warn about loading firmware (pre-allocated buffer)")
	Signed-off-by: Kees Cook <keescook@chromium.org>
	Reviewed-by: Mimi Zohar <zohar@linux.ibm.com>
	Reviewed-by: Luis Chamberlain <mcgrof@kernel.org>
	Acked-by: Scott Branden <scott.branden@broadcom.com>
	Cc: stable@vger.kernel.org
Link: https://lore.kernel.org/r/20201002173828.2099543-2-keescook@chromium.org
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit c307459b9d1fcb8bbf3ea5a4162979532322ef77)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/base/firmware_loader/main.c
#	include/linux/fs.h
diff --cc drivers/base/firmware_loader/main.c
index 8e9213b36e31,b0ec2721f55d..000000000000
--- a/drivers/base/firmware_loader/main.c
+++ b/drivers/base/firmware_loader/main.c
@@@ -299,12 -470,12 +299,16 @@@ fw_get_filesystem_firmware(struct devic
  	int i, len;
  	int rc = -ENOENT;
  	char *path;
- 	enum kernel_read_file_id id = READING_FIRMWARE;
  	size_t msize = INT_MAX;
 -	void *buffer = NULL;
  
  	/* Already populated data member means we're loading into a buffer */
++<<<<<<< HEAD
 +	if (fw_priv->data) {
 +		id = READING_FIRMWARE_PREALLOC_BUFFER;
++=======
+ 	if (!decompress && fw_priv->data) {
+ 		buffer = fw_priv->data;
++>>>>>>> c307459b9d1f (fs/kernel_read_file: Remove FIRMWARE_PREALLOC_BUFFER enum)
  		msize = fw_priv->allocated_size;
  	}
  
@@@ -325,19 -496,39 +329,27 @@@
  		}
  
  		fw_priv->size = 0;
++<<<<<<< HEAD
 +		rc = kernel_read_file_from_path(path, &fw_priv->data, &size,
 +						msize, id);
++=======
+ 
+ 		/* load firmware files from the mount namespace of init */
+ 		rc = kernel_read_file_from_path_initns(path, &buffer,
+ 						       &size, msize,
+ 						       READING_FIRMWARE);
++>>>>>>> c307459b9d1f (fs/kernel_read_file: Remove FIRMWARE_PREALLOC_BUFFER enum)
  		if (rc) {
 -			if (rc != -ENOENT)
 -				dev_warn(device, "loading %s failed with error %d\n",
 +			if (rc == -ENOENT)
 +				dev_dbg(device, "loading %s failed with error %d\n",
  					 path, rc);
  			else
 -				dev_dbg(device, "loading %s failed for no such file or directory.\n",
 -					 path);
 +				dev_warn(device, "loading %s failed with error %d\n",
 +					 path, rc);
  			continue;
  		}
 -		dev_dbg(device, "Loading firmware from %s\n", path);
 -		if (decompress) {
 -			dev_dbg(device, "f/w decompressing %s\n",
 -				fw_priv->fw_name);
 -			rc = decompress(device, fw_priv, size, buffer);
 -			/* discard the superfluous original content */
 -			vfree(buffer);
 -			buffer = NULL;
 -			if (rc) {
 -				fw_free_paged_buf(fw_priv);
 -				continue;
 -			}
 -		} else {
 -			dev_dbg(device, "direct-loading %s\n",
 -				fw_priv->fw_name);
 -			if (!fw_priv->data)
 -				fw_priv->data = buffer;
 -			fw_priv->size = size;
 -		}
 +		dev_dbg(device, "direct-loading %s\n", fw_priv->fw_name);
 +		fw_priv->size = size;
  		fw_state_done(fw_priv);
  		break;
  	}
diff --cc include/linux/fs.h
index 704fc02c485c,7336e22d0c5d..000000000000
--- a/include/linux/fs.h
+++ b/include/linux/fs.h
@@@ -2908,7 -2862,7 +2909,11 @@@ extern int do_pipe_flags(int *, int)
  #define __kernel_read_file_id(id) \
  	id(UNKNOWN, unknown)		\
  	id(FIRMWARE, firmware)		\
++<<<<<<< HEAD
 +	id(FIRMWARE_PREALLOC_BUFFER, firmware)	\
++=======
+ 	id(FIRMWARE_EFI_EMBEDDED, firmware)	\
++>>>>>>> c307459b9d1f (fs/kernel_read_file: Remove FIRMWARE_PREALLOC_BUFFER enum)
  	id(MODULE, kernel-module)		\
  	id(KEXEC_IMAGE, kexec-image)		\
  	id(KEXEC_INITRAMFS, kexec-initramfs)	\
* Unmerged path drivers/base/firmware_loader/main.c
diff --git a/fs/exec.c b/fs/exec.c
index 2adde0ddf8d5..ac7e4cd1de49 100644
--- a/fs/exec.c
+++ b/fs/exec.c
@@ -894,6 +894,7 @@ int kernel_read_file(struct file *file, void **buf, loff_t *size,
 {
 	loff_t i_size, pos;
 	ssize_t bytes = 0;
+	void *allocated = NULL;
 	int ret;
 
 	if (!S_ISREG(file_inode(file)->i_mode) || max_size < 0)
@@ -917,8 +918,8 @@ int kernel_read_file(struct file *file, void **buf, loff_t *size,
 		goto out;
 	}
 
-	if (id != READING_FIRMWARE_PREALLOC_BUFFER)
-		*buf = vmalloc(i_size);
+	if (!*buf)
+		*buf = allocated = vmalloc(i_size);
 	if (!*buf) {
 		ret = -ENOMEM;
 		goto out;
@@ -947,7 +948,7 @@ int kernel_read_file(struct file *file, void **buf, loff_t *size,
 
 out_free:
 	if (ret < 0) {
-		if (id != READING_FIRMWARE_PREALLOC_BUFFER) {
+		if (allocated) {
 			vfree(*buf);
 			*buf = NULL;
 		}
* Unmerged path include/linux/fs.h
diff --git a/kernel/module.c b/kernel/module.c
index 019d6b717495..4b15dfd5f4c4 100644
--- a/kernel/module.c
+++ b/kernel/module.c
@@ -3906,7 +3906,7 @@ SYSCALL_DEFINE3(finit_module, int, fd, const char __user *, uargs, int, flags)
 {
 	struct load_info info = { };
 	loff_t size;
-	void *hdr;
+	void *hdr = NULL;
 	int err;
 
 	err = may_init_module();
diff --git a/security/integrity/digsig.c b/security/integrity/digsig.c
index e9447d00b684..35cc41bdd222 100644
--- a/security/integrity/digsig.c
+++ b/security/integrity/digsig.c
@@ -175,7 +175,7 @@ static int __init integrity_add_key(const unsigned int id, const void *data,
 
 int __init integrity_load_x509(const unsigned int id, const char *path)
 {
-	void *data;
+	void *data = NULL;
 	loff_t size;
 	int rc;
 	key_perm_t perm;
diff --git a/security/integrity/ima/ima_fs.c b/security/integrity/ima/ima_fs.c
index 973fb8e2f80b..cc6f937c4f4d 100644
--- a/security/integrity/ima/ima_fs.c
+++ b/security/integrity/ima/ima_fs.c
@@ -278,7 +278,7 @@ static const struct file_operations ima_ascii_measurements_ops = {
 
 static ssize_t ima_read_policy(char *path)
 {
-	void *data;
+	void *data = NULL;
 	char *datap;
 	loff_t size;
 	int rc, pathlen = strlen(path);
diff --git a/security/integrity/ima/ima_main.c b/security/integrity/ima/ima_main.c
index d2d527b5c53a..860743c5cc2e 100644
--- a/security/integrity/ima/ima_main.c
+++ b/security/integrity/ima/ima_main.c
@@ -482,19 +482,17 @@ void ima_post_path_mknod(struct dentry *dentry)
 int ima_read_file(struct file *file, enum kernel_read_file_id read_id)
 {
 	/*
-	 * READING_FIRMWARE_PREALLOC_BUFFER
-	 *
 	 * Do devices using pre-allocated memory run the risk of the
 	 * firmware being accessible to the device prior to the completion
 	 * of IMA's signature verification any more than when using two
-	 * buffers?
+	 * buffers? It may be desirable to include the buffer address
+	 * in this API and walk all the dma_map_single() mappings to check.
 	 */
 	return 0;
 }
 
 const int read_idmap[READING_MAX_ID] = {
 	[READING_FIRMWARE] = FIRMWARE_CHECK,
-	[READING_FIRMWARE_PREALLOC_BUFFER] = FIRMWARE_CHECK,
 	[READING_MODULE] = MODULE_CHECK,
 	[READING_KEXEC_IMAGE] = KEXEC_KERNEL_CHECK,
 	[READING_KEXEC_INITRAMFS] = KEXEC_INITRAMFS_CHECK,
