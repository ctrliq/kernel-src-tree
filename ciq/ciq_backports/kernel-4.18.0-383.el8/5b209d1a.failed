net/mlx5e: Avoid implicit modify hdr for decap drop rule

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-383.el8
commit-author Roi Dayan <roid@nvidia.com>
commit 5b209d1a22afabfb7d644abb10510c5713a3e569
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-383.el8/5b209d1a.failed

Currently the driver adds implicit modify hdr action for
decap rules on tunnel devices if the port is an ovs port.
This is also done if the action is drop and makes the modify
hdr redundant and also the FW doesn't support it and will generate
a syndrome.

kernel: mlx5_core 0000:08:00.0: mlx5_cmd_check:777:(pid 102063): SET_FLOW_TABLE_ENTRY(0x936) op_mod(0x0) failed, status bad parameter(0x3), syndrome (0x8708c3)

Fix it by adding the implicit modify hdr only for fwd actions.

Fixes: b16eb3c81fe2 ("net/mlx5: Support internal port as decap route device")
Fixes: 077cdda764c7 ("net/mlx5e: TC, Fix memory leak with rules with internal port")
	Signed-off-by: Roi Dayan <roid@nvidia.com>
	Reviewed-by: Ariel Levkovich <lariel@nvidia.com>
	Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
(cherry picked from commit 5b209d1a22afabfb7d644abb10510c5713a3e569)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
index f2ec7454d923,2022fa4a9598..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
@@@ -1412,6 -1413,27 +1412,30 @@@ mlx5e_tc_add_fdb_flow(struct mlx5e_pri
  		err = mlx5e_attach_decap_route(priv, flow);
  		if (err)
  			goto err_out;
++<<<<<<< HEAD
++=======
+ 
+ 		if (!attr->chain && esw_attr->int_port &&
+ 		    attr->action & MLX5_FLOW_CONTEXT_ACTION_FWD_DEST) {
+ 			/* If decap route device is internal port, change the
+ 			 * source vport value in reg_c0 back to uplink just in
+ 			 * case the rule performs goto chain > 0. If we have a miss
+ 			 * on chain > 0 we want the metadata regs to hold the
+ 			 * chain id so SW will resume handling of this packet
+ 			 * from the proper chain.
+ 			 */
+ 			u32 metadata = mlx5_eswitch_get_vport_metadata_for_set(esw,
+ 									esw_attr->in_rep->vport);
+ 
+ 			err = mlx5e_tc_match_to_reg_set(priv->mdev, &parse_attr->mod_hdr_acts,
+ 							MLX5_FLOW_NAMESPACE_FDB, VPORT_TO_REG,
+ 							metadata);
+ 			if (err)
+ 				goto err_out;
+ 
+ 			attr->action |= MLX5_FLOW_CONTEXT_ACTION_MOD_HDR;
+ 		}
++>>>>>>> 5b209d1a22af (net/mlx5e: Avoid implicit modify hdr for decap drop rule)
  	}
  
  	if (flow_flag_test(flow, L3_TO_L2_DECAP)) {
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
