net: phy: marvell: add support for Amethyst internal PHY

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-383.el8
commit-author Marek Behún <kabel@kernel.org>
commit a978f7c479ea68d68a6267a37cbd44362bdd9811
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-383.el8/a978f7c4.failed

Add support for Amethyst internal PHY.

The only difference from Peridot is HWMON.

	Signed-off-by: Marek Behún <kabel@kernel.org>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit a978f7c479ea68d68a6267a37cbd44362bdd9811)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/phy/marvell.c
#	include/linux/marvell_phy.h
diff --cc drivers/net/phy/marvell.c
index fea4fced2023,1cce86b280af..000000000000
--- a/drivers/net/phy/marvell.c
+++ b/drivers/net/phy/marvell.c
@@@ -2215,6 -2227,20 +2226,23 @@@ static int marvell_vct7_cable_test_get_
  }
  
  #ifdef CONFIG_HWMON
++<<<<<<< HEAD
++=======
+ struct marvell_hwmon_ops {
+ 	int (*config)(struct phy_device *phydev);
+ 	int (*get_temp)(struct phy_device *phydev, long *temp);
+ 	int (*get_temp_critical)(struct phy_device *phydev, long *temp);
+ 	int (*set_temp_critical)(struct phy_device *phydev, long temp);
+ 	int (*get_temp_alarm)(struct phy_device *phydev, long *alarm);
+ };
+ 
+ static const struct marvell_hwmon_ops *
+ to_marvell_hwmon_ops(const struct phy_device *phydev)
+ {
+ 	return phydev->drv->driver_data;
+ }
+ 
++>>>>>>> a978f7c479ea (net: phy: marvell: add support for Amethyst internal PHY)
  static int m88e1121_get_temp(struct phy_device *phydev, long *temp)
  {
  	int oldpage;
@@@ -2532,12 -2403,71 +2560,76 @@@ error
  	return ret;
  }
  
++<<<<<<< HEAD
 +static int m88e6390_hwmon_read(struct device *dev,
 +			       enum hwmon_sensor_types type,
 +			       u32 attr, int channel, long *temp)
++=======
+ static int m88e6393_get_temp(struct phy_device *phydev, long *temp)
+ {
+ 	int err;
+ 
+ 	err = m88e1510_get_temp(phydev, temp);
+ 
+ 	/* 88E1510 measures T + 25, while the PHY on 88E6393X switch
+ 	 * T + 75, so we have to subtract another 50
+ 	 */
+ 	*temp -= 50000;
+ 
+ 	return err;
+ }
+ 
+ static int m88e6393_get_temp_critical(struct phy_device *phydev, long *temp)
+ {
+ 	int ret;
+ 
+ 	*temp = 0;
+ 
+ 	ret = phy_read_paged(phydev, MII_MARVELL_MISC_TEST_PAGE,
+ 			     MII_88E6390_TEMP_SENSOR);
+ 	if (ret < 0)
+ 		return ret;
+ 
+ 	*temp = (((ret & MII_88E6393_TEMP_SENSOR_THRESHOLD_MASK) >>
+ 		  MII_88E6393_TEMP_SENSOR_THRESHOLD_SHIFT) - 75) * 1000;
+ 
+ 	return 0;
+ }
+ 
+ static int m88e6393_set_temp_critical(struct phy_device *phydev, long temp)
+ {
+ 	temp = (temp / 1000) + 75;
+ 
+ 	return phy_modify_paged(phydev, MII_MARVELL_MISC_TEST_PAGE,
+ 				MII_88E6390_TEMP_SENSOR,
+ 				MII_88E6393_TEMP_SENSOR_THRESHOLD_MASK,
+ 				temp << MII_88E6393_TEMP_SENSOR_THRESHOLD_SHIFT);
+ }
+ 
+ static int m88e6393_hwmon_config(struct phy_device *phydev)
+ {
+ 	int err;
+ 
+ 	err = m88e6393_set_temp_critical(phydev, 100000);
+ 	if (err)
+ 		return err;
+ 
+ 	return phy_modify_paged(phydev, MII_MARVELL_MISC_TEST_PAGE,
+ 				MII_88E6390_MISC_TEST,
+ 				MII_88E6390_MISC_TEST_TEMP_SENSOR_MASK |
+ 				MII_88E6393_MISC_TEST_SAMPLES_MASK |
+ 				MII_88E6393_MISC_TEST_RATE_MASK,
+ 				MII_88E6390_MISC_TEST_TEMP_SENSOR_ENABLE |
+ 				MII_88E6393_MISC_TEST_SAMPLES_2048 |
+ 				MII_88E6393_MISC_TEST_RATE_2_3MS);
+ }
+ 
+ static int marvell_hwmon_read(struct device *dev, enum hwmon_sensor_types type,
+ 			      u32 attr, int channel, long *temp)
++>>>>>>> a978f7c479ea (net: phy: marvell: add support for Amethyst internal PHY)
  {
  	struct phy_device *phydev = dev_get_drvdata(dev);
 -	const struct marvell_hwmon_ops *ops = to_marvell_hwmon_ops(phydev);
 -	int err = -EOPNOTSUPP;
 +	int err;
  
  	switch (attr) {
  	case hwmon_temp_input:
@@@ -2623,37 -2605,46 +2715,69 @@@ static int marvell_hwmon_probe(struct p
  		return err;
  
  	priv->hwmon_dev = devm_hwmon_device_register_with_info(
++<<<<<<< HEAD
 +		dev, priv->hwmon_name, phydev, chip, NULL);
++=======
+ 		dev, priv->hwmon_name, phydev, &marvell_hwmon_chip_info, NULL);
+ 	if (IS_ERR(priv->hwmon_dev))
+ 		return PTR_ERR(priv->hwmon_dev);
++>>>>>>> a978f7c479ea (net: phy: marvell: add support for Amethyst internal PHY)
  
- 	return PTR_ERR_OR_ZERO(priv->hwmon_dev);
+ 	if (ops->config)
+ 		err = ops->config(phydev);
+ 
+ 	return err;
  }
  
 -static const struct marvell_hwmon_ops m88e1121_hwmon_ops = {
 -	.get_temp = m88e1121_get_temp,
 -};
 +static int m88e1121_hwmon_probe(struct phy_device *phydev)
 +{
 +	return marvell_hwmon_probe(phydev, &m88e1121_hwmon_chip_info);
 +}
  
++<<<<<<< HEAD
 +static int m88e1510_hwmon_probe(struct phy_device *phydev)
 +{
 +	return marvell_hwmon_probe(phydev, &m88e1510_hwmon_chip_info);
 +}
++=======
+ static const struct marvell_hwmon_ops m88e1510_hwmon_ops = {
+ 	.get_temp = m88e1510_get_temp,
+ 	.get_temp_critical = m88e1510_get_temp_critical,
+ 	.set_temp_critical = m88e1510_set_temp_critical,
+ 	.get_temp_alarm = m88e1510_get_temp_alarm,
+ };
+ 
+ static const struct marvell_hwmon_ops m88e6390_hwmon_ops = {
+ 	.get_temp = m88e6390_get_temp,
+ };
+ 
+ static const struct marvell_hwmon_ops m88e6393_hwmon_ops = {
+ 	.config = m88e6393_hwmon_config,
+ 	.get_temp = m88e6393_get_temp,
+ 	.get_temp_critical = m88e6393_get_temp_critical,
+ 	.set_temp_critical = m88e6393_set_temp_critical,
+ 	.get_temp_alarm = m88e1510_get_temp_alarm,
+ };
+ 
+ #define DEF_MARVELL_HWMON_OPS(s) (&(s))
++>>>>>>> a978f7c479ea (net: phy: marvell: add support for Amethyst internal PHY)
  
 +static int m88e6390_hwmon_probe(struct phy_device *phydev)
 +{
 +	return marvell_hwmon_probe(phydev, &m88e6390_hwmon_chip_info);
 +}
  #else
 +static int m88e1121_hwmon_probe(struct phy_device *phydev)
 +{
 +	return 0;
 +}
  
 -#define DEF_MARVELL_HWMON_OPS(s) NULL
 +static int m88e1510_hwmon_probe(struct phy_device *phydev)
 +{
 +	return 0;
 +}
  
 -static int marvell_hwmon_probe(struct phy_device *phydev)
 +static int m88e6390_hwmon_probe(struct phy_device *phydev)
  {
  	return 0;
  }
@@@ -3105,7 -3122,9 +3255,13 @@@ static struct mdio_device_id __maybe_un
  	{ MARVELL_PHY_ID_88E1540, MARVELL_PHY_ID_MASK },
  	{ MARVELL_PHY_ID_88E1545, MARVELL_PHY_ID_MASK },
  	{ MARVELL_PHY_ID_88E3016, MARVELL_PHY_ID_MASK },
++<<<<<<< HEAD
 +	{ MARVELL_PHY_ID_88E6390, MARVELL_PHY_ID_MASK },
++=======
+ 	{ MARVELL_PHY_ID_88E6341_FAMILY, MARVELL_PHY_ID_MASK },
+ 	{ MARVELL_PHY_ID_88E6390_FAMILY, MARVELL_PHY_ID_MASK },
+ 	{ MARVELL_PHY_ID_88E6393_FAMILY, MARVELL_PHY_ID_MASK },
++>>>>>>> a978f7c479ea (net: phy: marvell: add support for Amethyst internal PHY)
  	{ MARVELL_PHY_ID_88E1340S, MARVELL_PHY_ID_MASK },
  	{ MARVELL_PHY_ID_88E1548P, MARVELL_PHY_ID_MASK },
  	{ }
diff --cc include/linux/marvell_phy.h
index 52b1610eae68,acee44b9db26..000000000000
--- a/include/linux/marvell_phy.h
+++ b/include/linux/marvell_phy.h
@@@ -32,7 -37,9 +32,13 @@@
   * not have a model ID. So the switch driver traps reads to the ID2
   * register and returns the switch family ID
   */
++<<<<<<< HEAD
 +#define MARVELL_PHY_ID_88E6390		0x01410f90
++=======
+ #define MARVELL_PHY_ID_88E6341_FAMILY	0x01410f41
+ #define MARVELL_PHY_ID_88E6390_FAMILY	0x01410f90
+ #define MARVELL_PHY_ID_88E6393_FAMILY	0x002b0b9b
++>>>>>>> a978f7c479ea (net: phy: marvell: add support for Amethyst internal PHY)
  
  #define MARVELL_PHY_FAMILY_ID(id)	((id) >> 4)
  
* Unmerged path drivers/net/phy/marvell.c
* Unmerged path include/linux/marvell_phy.h
