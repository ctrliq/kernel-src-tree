x86/sev-es: Don't return NULL from sev_es_get_ghcb()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-383.el8
commit-author Joerg Roedel <jroedel@suse.de>
commit b250f2f7792d15bcde98e0456781e2835556d5fa
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-383.el8/b250f2f7.failed

sev_es_get_ghcb() is called from several places but only one of them
checks the return value. The reaction to returning NULL is always the
same: calling panic() and kill the machine.

Instead of adding checks to all call sites, move the panic() into the
function itself so that it will no longer return NULL.

Fixes: 0786138c78e7 ("x86/sev-es: Add a Runtime #VC Exception Handler")
	Signed-off-by: Joerg Roedel <jroedel@suse.de>
	Signed-off-by: Borislav Petkov <bp@suse.de>
	Cc: stable@vger.kernel.org # v5.10+
Link: https://lkml.kernel.org/r/20210519135251.30093-2-joro@8bytes.org
(cherry picked from commit b250f2f7792d15bcde98e0456781e2835556d5fa)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kernel/sev.c
diff --cc arch/x86/kernel/sev.c
index ee0d835d806e,82bced88153b..000000000000
--- a/arch/x86/kernel/sev.c
+++ b/arch/x86/kernel/sev.c
@@@ -182,9 -204,16 +182,22 @@@ static __always_inline struct ghcb *sev
  		/* GHCB is already in use - save its contents */
  
  		if (unlikely(data->backup_ghcb_active)) {
++<<<<<<< HEAD
 +			/* RHEL only: avoid 'may be used uninitialized'*/
 +			state->ghcb = NULL;
 +			return NULL;
++=======
+ 			/*
+ 			 * Backup-GHCB is also already in use. There is no way
+ 			 * to continue here so just kill the machine. To make
+ 			 * panic() work, mark GHCBs inactive so that messages
+ 			 * can be printed out.
+ 			 */
+ 			data->ghcb_active        = false;
+ 			data->backup_ghcb_active = false;
+ 
+ 			panic("Unable to handle #VC exception! GHCB and Backup GHCB are already in use");
++>>>>>>> b250f2f7792d (x86/sev-es: Don't return NULL from sev_es_get_ghcb())
  		}
  
  		/* Mark backup_ghcb active before writing to it */
@@@ -1258,9 -1297,9 +1271,13 @@@ static __always_inline bool on_vc_fallb
   * paths are forbidden to be instrumented, so #DB exceptions currently also
   * only happen in safe places.
   */
 -DEFINE_IDTENTRY_VC_SAFE_STACK(exc_vmm_communication)
 +__visible noinstr void safe_stack_exc_vmm_communication(struct pt_regs *regs, long error_code)
  {
++<<<<<<< HEAD
 +	struct sev_es_runtime_data *data = this_cpu_read(runtime_data);
++=======
+ 	irqentry_state_t irq_state;
++>>>>>>> b250f2f7792d (x86/sev-es: Don't return NULL from sev_es_get_ghcb())
  	struct ghcb_state state;
  	struct es_em_ctxt ctxt;
  	enum es_result result;
* Unmerged path arch/x86/kernel/sev.c
