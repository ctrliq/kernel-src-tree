bpf: Add bpf_sys_close() helper.

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-383.el8
commit-author Alexei Starovoitov <ast@kernel.org>
commit 3abea089246f76c1517b054ddb5946f3f1dbd2c0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-383.el8/3abea089.failed

Add bpf_sys_close() helper to be used by the syscall/loader program to close
intermediate FDs and other cleanup.
Note this helper must never be allowed inside fdget/fdput bracketing.

	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
	Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
	Acked-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/bpf/20210514003623.28033-11-alexei.starovoitov@gmail.com
(cherry picked from commit 3abea089246f76c1517b054ddb5946f3f1dbd2c0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/uapi/linux/bpf.h
#	kernel/bpf/syscall.c
#	tools/include/uapi/linux/bpf.h
diff --cc include/uapi/linux/bpf.h
index d613063f6429,4cd9a0181f27..000000000000
--- a/include/uapi/linux/bpf.h
+++ b/include/uapi/linux/bpf.h
@@@ -4755,6 -4742,24 +4755,27 @@@ union bpf_attr 
   *		be zero-terminated except when **str_size** is 0.
   *
   *		Or **-EBUSY** if the per-CPU memory copy buffer is busy.
++<<<<<<< HEAD
++=======
+  *
+  * long bpf_sys_bpf(u32 cmd, void *attr, u32 attr_size)
+  * 	Description
+  * 		Execute bpf syscall with given arguments.
+  * 	Return
+  * 		A syscall result.
+  *
+  * long bpf_btf_find_by_name_kind(char *name, int name_sz, u32 kind, int flags)
+  * 	Description
+  * 		Find BTF type with given name and kind in vmlinux BTF or in module's BTFs.
+  * 	Return
+  * 		Returns btf_id and btf_obj_fd in lower and upper 32 bits.
+  *
+  * long bpf_sys_close(u32 fd)
+  * 	Description
+  * 		Execute close syscall for given FD.
+  * 	Return
+  * 		A syscall result.
++>>>>>>> 3abea089246f (bpf: Add bpf_sys_close() helper.)
   */
  #define __BPF_FUNC_MAPPER(FN)		\
  	FN(unspec),			\
@@@ -4923,6 -4928,9 +4944,12 @@@
  	FN(check_mtu),			\
  	FN(for_each_map_elem),		\
  	FN(snprintf),			\
++<<<<<<< HEAD
++=======
+ 	FN(sys_bpf),			\
+ 	FN(btf_find_by_name_kind),	\
+ 	FN(sys_close),			\
++>>>>>>> 3abea089246f (bpf: Add bpf_sys_close() helper.)
  	/* */
  
  /* integer value in 'imm' field of BPF_CALL instruction selects which helper
diff --cc kernel/bpf/syscall.c
index 7aed15cc139e,0f1ce2171f1e..000000000000
--- a/kernel/bpf/syscall.c
+++ b/kernel/bpf/syscall.c
@@@ -4541,3 -4527,94 +4541,97 @@@ SYSCALL_DEFINE3(bpf, int, cmd, union bp
  
  	return err;
  }
++<<<<<<< HEAD
++=======
+ 
+ SYSCALL_DEFINE3(bpf, int, cmd, union bpf_attr __user *, uattr, unsigned int, size)
+ {
+ 	return __sys_bpf(cmd, USER_BPFPTR(uattr), size);
+ }
+ 
+ static bool syscall_prog_is_valid_access(int off, int size,
+ 					 enum bpf_access_type type,
+ 					 const struct bpf_prog *prog,
+ 					 struct bpf_insn_access_aux *info)
+ {
+ 	if (off < 0 || off >= U16_MAX)
+ 		return false;
+ 	if (off % size != 0)
+ 		return false;
+ 	return true;
+ }
+ 
+ BPF_CALL_3(bpf_sys_bpf, int, cmd, void *, attr, u32, attr_size)
+ {
+ 	switch (cmd) {
+ 	case BPF_MAP_CREATE:
+ 	case BPF_MAP_UPDATE_ELEM:
+ 	case BPF_MAP_FREEZE:
+ 	case BPF_PROG_LOAD:
+ 	case BPF_BTF_LOAD:
+ 		break;
+ 	/* case BPF_PROG_TEST_RUN:
+ 	 * is not part of this list to prevent recursive test_run
+ 	 */
+ 	default:
+ 		return -EINVAL;
+ 	}
+ 	return __sys_bpf(cmd, KERNEL_BPFPTR(attr), attr_size);
+ }
+ 
+ const struct bpf_func_proto bpf_sys_bpf_proto = {
+ 	.func		= bpf_sys_bpf,
+ 	.gpl_only	= false,
+ 	.ret_type	= RET_INTEGER,
+ 	.arg1_type	= ARG_ANYTHING,
+ 	.arg2_type	= ARG_PTR_TO_MEM,
+ 	.arg3_type	= ARG_CONST_SIZE,
+ };
+ 
+ const struct bpf_func_proto * __weak
+ tracing_prog_func_proto(enum bpf_func_id func_id, const struct bpf_prog *prog)
+ {
+ 	return bpf_base_func_proto(func_id);
+ }
+ 
+ BPF_CALL_1(bpf_sys_close, u32, fd)
+ {
+ 	/* When bpf program calls this helper there should not be
+ 	 * an fdget() without matching completed fdput().
+ 	 * This helper is allowed in the following callchain only:
+ 	 * sys_bpf->prog_test_run->bpf_prog->bpf_sys_close
+ 	 */
+ 	return close_fd(fd);
+ }
+ 
+ const struct bpf_func_proto bpf_sys_close_proto = {
+ 	.func		= bpf_sys_close,
+ 	.gpl_only	= false,
+ 	.ret_type	= RET_INTEGER,
+ 	.arg1_type	= ARG_ANYTHING,
+ };
+ 
+ static const struct bpf_func_proto *
+ syscall_prog_func_proto(enum bpf_func_id func_id, const struct bpf_prog *prog)
+ {
+ 	switch (func_id) {
+ 	case BPF_FUNC_sys_bpf:
+ 		return &bpf_sys_bpf_proto;
+ 	case BPF_FUNC_btf_find_by_name_kind:
+ 		return &bpf_btf_find_by_name_kind_proto;
+ 	case BPF_FUNC_sys_close:
+ 		return &bpf_sys_close_proto;
+ 	default:
+ 		return tracing_prog_func_proto(func_id, prog);
+ 	}
+ }
+ 
+ const struct bpf_verifier_ops bpf_syscall_verifier_ops = {
+ 	.get_func_proto  = syscall_prog_func_proto,
+ 	.is_valid_access = syscall_prog_is_valid_access,
+ };
+ 
+ const struct bpf_prog_ops bpf_syscall_prog_ops = {
+ 	.test_run = bpf_prog_test_run_syscall,
+ };
++>>>>>>> 3abea089246f (bpf: Add bpf_sys_close() helper.)
diff --cc tools/include/uapi/linux/bpf.h
index ed06cd84257e,4cd9a0181f27..000000000000
--- a/tools/include/uapi/linux/bpf.h
+++ b/tools/include/uapi/linux/bpf.h
@@@ -4735,6 -4742,24 +4735,27 @@@ union bpf_attr 
   *		be zero-terminated except when **str_size** is 0.
   *
   *		Or **-EBUSY** if the per-CPU memory copy buffer is busy.
++<<<<<<< HEAD
++=======
+  *
+  * long bpf_sys_bpf(u32 cmd, void *attr, u32 attr_size)
+  * 	Description
+  * 		Execute bpf syscall with given arguments.
+  * 	Return
+  * 		A syscall result.
+  *
+  * long bpf_btf_find_by_name_kind(char *name, int name_sz, u32 kind, int flags)
+  * 	Description
+  * 		Find BTF type with given name and kind in vmlinux BTF or in module's BTFs.
+  * 	Return
+  * 		Returns btf_id and btf_obj_fd in lower and upper 32 bits.
+  *
+  * long bpf_sys_close(u32 fd)
+  * 	Description
+  * 		Execute close syscall for given FD.
+  * 	Return
+  * 		A syscall result.
++>>>>>>> 3abea089246f (bpf: Add bpf_sys_close() helper.)
   */
  #define __BPF_FUNC_MAPPER(FN)		\
  	FN(unspec),			\
@@@ -4903,6 -4928,9 +4924,12 @@@
  	FN(check_mtu),			\
  	FN(for_each_map_elem),		\
  	FN(snprintf),			\
++<<<<<<< HEAD
++=======
+ 	FN(sys_bpf),			\
+ 	FN(btf_find_by_name_kind),	\
+ 	FN(sys_close),			\
++>>>>>>> 3abea089246f (bpf: Add bpf_sys_close() helper.)
  	/* */
  
  /* integer value in 'imm' field of BPF_CALL instruction selects which helper
* Unmerged path include/uapi/linux/bpf.h
* Unmerged path kernel/bpf/syscall.c
* Unmerged path tools/include/uapi/linux/bpf.h
