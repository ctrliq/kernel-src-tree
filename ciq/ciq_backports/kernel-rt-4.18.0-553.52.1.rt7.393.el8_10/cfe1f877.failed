NFS: Extend rdirplus mount option with "force|none"

jira LE-3201
Rebuild_History Non-Buildable kernel-rt-4.18.0-553.52.1.rt7.393.el8_10
commit-author Benjamin Coddington <bcodding@redhat.com>
commit cfe1f8776f23fd6dfe4ba9fcb695b129f0761187
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-rt-4.18.0-553.52.1.rt7.393.el8_10/cfe1f877.failed

There are certain users that wish to force the NFS client to choose
READDIRPLUS over READDIR for a particular mount.  Update the "rdirplus" mount
option to optionally accept values.  For "rdirplus=force", the NFS client
will always attempt to use READDDIRPLUS.  The setting of "rdirplus=none" is
aliased to the existing "nordirplus".

	Signed-off-by: Benjamin Coddington <bcodding@redhat.com>
Link: https://lore.kernel.org/r/c4cf0de4c8be0930b91bc74bee310d289781cd3b.1741885071.git.bcodding@redhat.com
	Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
(cherry picked from commit cfe1f8776f23fd6dfe4ba9fcb695b129f0761187)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/nfs/fs_context.c
#	include/linux/nfs_fs_sb.h
diff --cc fs/nfs/fs_context.c
index 90115418e901,1cabba1231d6..000000000000
--- a/fs/nfs/fs_context.c
+++ b/fs/nfs/fs_context.c
@@@ -249,6 -277,26 +252,29 @@@ static const struct constant_table nfs_
  	{}
  };
  
++<<<<<<< HEAD
++=======
+ enum {
+ 	Opt_xprtsec_none,
+ 	Opt_xprtsec_tls,
+ 	Opt_xprtsec_mtls,
+ 	nr__Opt_xprtsec
+ };
+ 
+ static const struct constant_table nfs_xprtsec_policies[] = {
+ 	{ "none",	Opt_xprtsec_none },
+ 	{ "tls",	Opt_xprtsec_tls },
+ 	{ "mtls",	Opt_xprtsec_mtls },
+ 	{}
+ };
+ 
+ static const struct constant_table nfs_rdirplus_tokens[] = {
+ 	{ "none",	Opt_rdirplus_none },
+ 	{ "force",	Opt_rdirplus_force },
+ 	{}
+ };
+ 
++>>>>>>> cfe1f8776f23 (NFS: Extend rdirplus mount option with "force|none")
  /*
   * Sanity-check a server address provided by the mount command.
   *
diff --cc include/linux/nfs_fs_sb.h
index 3a8329a71a34,b83d16a42afc..000000000000
--- a/include/linux/nfs_fs_sb.h
+++ b/include/linux/nfs_fs_sb.h
@@@ -158,7 -165,11 +158,13 @@@ struct nfs_server 
  #define NFS_MOUNT_WRITE_EAGER		0x01000000
  #define NFS_MOUNT_WRITE_WAIT		0x02000000
  #define NFS_MOUNT_TRUNK_DISCOVERY	0x04000000
++<<<<<<< HEAD
++=======
+ #define NFS_MOUNT_SHUTDOWN			0x08000000
+ #define NFS_MOUNT_NO_ALIGNWRITE		0x10000000
+ #define NFS_MOUNT_FORCE_RDIRPLUS	0x20000000
++>>>>>>> cfe1f8776f23 (NFS: Extend rdirplus mount option with "force|none")
  
 -	unsigned int		fattr_valid;	/* Valid attributes */
  	unsigned int		caps;		/* server capabilities */
  	unsigned int		rsize;		/* read size */
  	unsigned int		rpages;		/* read size (in pages) */
diff --git a/fs/nfs/dir.c b/fs/nfs/dir.c
index ee99f8d92061..ceed2b2ce933 100644
--- a/fs/nfs/dir.c
+++ b/fs/nfs/dir.c
@@ -660,6 +660,8 @@ static bool nfs_use_readdirplus(struct inode *dir, struct dir_context *ctx,
 {
 	if (!nfs_server_capable(dir, NFS_CAP_READDIRPLUS))
 		return false;
+	if (NFS_SERVER(dir)->flags & NFS_MOUNT_FORCE_RDIRPLUS)
+		return true;
 	if (ctx->pos == 0 ||
 	    cache_hits + cache_misses > NFS_READDIR_CACHE_USAGE_THRESHOLD)
 		return true;
* Unmerged path fs/nfs/fs_context.c
diff --git a/fs/nfs/super.c b/fs/nfs/super.c
index c54ff8f9d943..4ab49269a18e 100644
--- a/fs/nfs/super.c
+++ b/fs/nfs/super.c
@@ -416,6 +416,7 @@ static void nfs_show_mount_options(struct seq_file *m, struct nfs_server *nfss,
 		{ NFS_MOUNT_NONLM, ",nolock", "" },
 		{ NFS_MOUNT_NOACL, ",noacl", "" },
 		{ NFS_MOUNT_NORDIRPLUS, ",nordirplus", "" },
+		{ NFS_MOUNT_FORCE_RDIRPLUS, ",rdirplus=force", "" },
 		{ NFS_MOUNT_UNSHARED, ",nosharecache", "" },
 		{ NFS_MOUNT_NORESVPORT, ",noresvport", "" },
 		{ 0, NULL, NULL }
* Unmerged path include/linux/nfs_fs_sb.h
