selftests: vm: refactor run_vmtests.sh to reduce boilerplate

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-542.el8
commit-author Axel Rasmussen <axelrasmussen@google.com>
commit b67bd551201a3e2c7e1def84980e9b2f0b3a3c77
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-542.el8/b67bd551.failed

Previously, each test printed out its own header, dealt with its own
return code, etc.  By just putting this standard stuff in a function, we
can delete > 300 lines from the script.

This also makes adding future tests easier. And, it gets rid of various
inconsistencies that already exist:

- Some tests correctly deal with ksft_skip, but others don't.
- Some tests just print the executable name, others print arguments, and
  yet others print some comment in the header.
- Most tests print out a header with two separator lines, but not the
  HMM smoke test or the memfd_secret test, which only print one.
- We had a redundant "exit" at the end, with all the boilerplate it's an
  easy oversight.

Link: https://lkml.kernel.org/r/20220421224928.1848230-1-axelrasmussen@google.com
	Signed-off-by: Axel Rasmussen <axelrasmussen@google.com>
	Cc: Shuah Khan <shuah@kernel.org>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
(cherry picked from commit b67bd551201a3e2c7e1def84980e9b2f0b3a3c77)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/testing/selftests/vm/run_vmtests.sh
diff --cc tools/testing/selftests/vm/run_vmtests.sh
index f73d9621b5a2,2d5a3da42cbe..000000000000
--- a/tools/testing/selftests/vm/run_vmtests.sh
+++ b/tools/testing/selftests/vm/run_vmtests.sh
@@@ -128,89 -68,114 +128,196 @@@ echo "$ARCH64STR" | grep "$ARCH" &>/dev
  
  # Usage: run_test [test binary] [arbitrary test arguments...]
  run_test() {
++<<<<<<< HEAD
 +	if test_selected ${CATEGORY}; then
 +		local title="running $*"
 +		local sep=$(echo -n "$title" | tr "[:graph:][:space:]" -)
 +		printf "%s\n%s\n%s\n" "$sep" "$title" "$sep"
 +
 +		"$@"
 +		local ret=$?
 +		if [ $ret -eq 0 ]; then
 +			echo "[PASS]"
 +		elif [ $ret -eq $ksft_skip ]; then
 +			echo "[SKIP]"
 +			exitcode=$ksft_skip
 +		else
 +			echo "[FAIL]"
 +			exitcode=1
 +		fi
 +	fi # test_selected
 +}
 +
 +# Mount directory for HugeTLB
 +mkdir "$mnt"
 +mount -t hugetlbfs none "$mnt"
 +
 +CATEGORY="hugetlb" run_test ./hugepage-mmap
++=======
+ 	local title="running $*"
+ 	local sep=$(echo -n "$title" | tr "[:graph:][:space:]" -)
+ 	printf "%s\n%s\n%s\n" "$sep" "$title" "$sep"
+ 
+ 	"$@"
+ 	local ret=$?
+ 	if [ $ret -eq 0 ]; then
+ 		echo "[PASS]"
+ 	elif [ $ret -eq $ksft_skip ]; then
+ 		echo "[SKIP]"
+ 		exitcode=$ksft_skip
+ 	else
+ 		echo "[FAIL]"
+ 		exitcode=1
+ 	fi
+ }
+ 
+ mkdir $mnt
+ mount -t hugetlbfs none $mnt
+ 
+ run_test ./hugepage-mmap
++>>>>>>> b67bd551201a (selftests: vm: refactor run_vmtests.sh to reduce boilerplate)
  
  shmmax=`cat /proc/sys/kernel/shmmax`
  shmall=`cat /proc/sys/kernel/shmall`
  echo 268435456 > /proc/sys/kernel/shmmax
  echo 4194304 > /proc/sys/kernel/shmall
++<<<<<<< HEAD
 +CATEGORY="hugetlb" run_test ./hugepage-shm
 +echo "$shmmax" > /proc/sys/kernel/shmmax
 +echo "$shmall" > /proc/sys/kernel/shmall
 +
 +CATEGORY="hugetlb" run_test ./map_hugetlb
 +
 +if test_selected "hugetlb"; then
 +	echo "NOTE: The above hugetlb tests provide minimal coverage.  Use"
 +	echo "      https://github.com/libhugetlbfs/libhugetlbfs.git for"
 +	echo "      hugetlb regression testing."
 +fi
 +
 +CATEGORY="mmap" run_test ./map_fixed_noreplace
 +
 +# get_user_pages_fast() benchmark
 +CATEGORY="gup_test" run_test ./gup_test -u
 +# pin_user_pages_fast() benchmark
 +CATEGORY="gup_test" run_test ./gup_test -a
 +# Dump pages 0, 19, and 4096, using pin_user_pages:
 +CATEGORY="gup_test" run_test ./gup_test -ct -F 0x1 0 19 0x1000
 +
 +CATEGORY="userfaultfd" run_test ./userfaultfd anon 20 16
 +# Test requires source and destination huge pages.  Size of source
 +# (half_ufd_size_MB) is passed as argument to test.
 +CATEGORY="userfaultfd" run_test ./userfaultfd hugetlb "$half_ufd_size_MB" 32 $mnt/ufd_test_file
 +CATEGORY="userfaultfd" run_test ./userfaultfd shmem 20 16
 +
 +#cleanup hugeTLB
 +umount "$mnt"
 +rm -rf "$mnt"
 +echo "$nr_hugepgs" > /proc/sys/vm/nr_hugepages
++=======
+ run_test ./hugepage-shm
+ echo $shmmax > /proc/sys/kernel/shmmax
+ echo $shmall > /proc/sys/kernel/shmall
+ 
+ run_test ./map_hugetlb
+ 
+ run_test ./hugepage-mremap $mnt/huge_mremap
+ rm -f $mnt/huge_mremap
+ 
+ run_test ./hugepage-vmemmap
+ 
+ run_test ./hugetlb-madvise $mnt/madvise-test
+ rm -f $mnt/madvise-test
+ 
+ echo "NOTE: The above hugetlb tests provide minimal coverage.  Use"
+ echo "      https://github.com/libhugetlbfs/libhugetlbfs.git for"
+ echo "      hugetlb regression testing."
+ 
+ run_test ./map_fixed_noreplace
+ 
+ # get_user_pages_fast() benchmark
+ run_test ./gup_test -u
+ # pin_user_pages_fast() benchmark
+ run_test ./gup_test -a
+ # Dump pages 0, 19, and 4096, using pin_user_pages:
+ run_test ./gup_test -ct -F 0x1 0 19 0x1000
+ 
+ run_test ./userfaultfd anon 20 16
+ # Test requires source and destination huge pages.  Size of source
+ # (half_ufd_size_MB) is passed as argument to test.
+ run_test ./userfaultfd hugetlb $half_ufd_size_MB 32
+ run_test ./userfaultfd shmem 20 16
++>>>>>>> b67bd551201a (selftests: vm: refactor run_vmtests.sh to reduce boilerplate)
 +
 +CATEGORY="compaction" run_test ./compaction_test
 +
++<<<<<<< HEAD
 +CATEGORY="mlock" run_test sudo -u nobody ./on-fault-limit
 +
 +CATEGORY="mmap" run_test ./map_populate
 +
 +CATEGORY="mlock" run_test ./mlock-random-test
 +
 +CATEGORY="mlock" run_test ./mlock2-tests
  
 -#cleanup
 -umount $mnt
 -rm -rf $mnt
 -echo $nr_hugepgs > /proc/sys/vm/nr_hugepages
 +CATEGORY="hugetlb" run_test ./thuge-gen
 +
 +if [ $VADDR64 -ne 0 ]; then
 +	CATEGORY="hugevm" run_test ./virtual_address_range
 +
 +	# virtual address 128TB switch test
 +	CATEGORY="hugevm" run_test ./va_128TBswitch
 +fi # VADDR64
 +
 +# vmalloc stability smoke test
 +CATEGORY="vmalloc" run_test ./test_vmalloc.sh smoke
  
 +CATEGORY="hmm" run_test ./test_hmm.sh smoke
++=======
+ run_test ./compaction_test
+ 
+ run_test sudo -u nobody ./on-fault-limit
+ 
+ run_test ./map_populate
+ 
+ run_test ./mlock-random-test
+ 
+ run_test ./mlock2-tests
+ 
+ run_test ./mremap_test
+ 
+ run_test ./thuge-gen
+ 
+ if [ $VADDR64 -ne 0 ]; then
+ 	run_test ./virtual_address_range
+ 
+ 	# virtual address 128TB switch test
+ 	run_test ./va_128TBswitch
+ fi # VADDR64
+ 
+ # vmalloc stability smoke test
+ run_test ./test_vmalloc.sh smoke
+ 
+ run_test ./mremap_dontunmap
+ 
+ run_test ./test_hmm.sh smoke
+ 
+ # MADV_POPULATE_READ and MADV_POPULATE_WRITE tests
+ run_test ./madv_populate
+ 
+ run_test ./memfd_secret
+ 
+ # KSM MADV_MERGEABLE test with 10 identical pages
+ run_test ./ksm_tests -M -p 10
+ # KSM unmerge test
+ run_test ./ksm_tests -U
+ # KSM test with 10 zero pages and use_zero_pages = 0
+ run_test ./ksm_tests -Z -p 10 -z 0
+ # KSM test with 10 zero pages and use_zero_pages = 1
+ run_test ./ksm_tests -Z -p 10 -z 1
+ # KSM test with 2 NUMA nodes and merge_across_nodes = 1
+ run_test ./ksm_tests -N -m 1
+ # KSM test with 2 NUMA nodes and merge_across_nodes = 0
+ run_test ./ksm_tests -N -m 0
++>>>>>>> b67bd551201a (selftests: vm: refactor run_vmtests.sh to reduce boilerplate)
  
  exit $exitcode
* Unmerged path tools/testing/selftests/vm/run_vmtests.sh
