selftests/mm: fix cross compilation with LLVM

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-542.el8
commit-author Mark Brown <broonie@kernel.org>
commit 0518dbe97fe629fea255318841cf3ef1b4532d66
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-542.el8/0518dbe9.failed

Currently the MM selftests attempt to work out the target architecture by
using CROSS_COMPILE or otherwise querying the host machine, storing the
target architecture in a variable called MACHINE rather than the usual
ARCH though as far as I can tell (including for x86_64) the value is the
same as we would use for architecture.

When cross compiling with LLVM we don't need a CROSS_COMPILE as LLVM can
support many target architectures in a single build so this logic does not
work, CROSS_COMPILE is not set and we end up selecting tests for the host
rather than target architecture.  Fix this by using the more standard ARCH
to describe the architecture, taking it from the environment if specified.

Link: https://lkml.kernel.org/r/20230614-kselftest-mm-llvm-v1-1-180523f277d3@kernel.org
	Signed-off-by: Mark Brown <broonie@kernel.org>
	Cc: Nick Desaulniers <ndesaulniers@google.com>
	Cc: Albert Ou <aou@eecs.berkeley.edu>
	Cc: Nathan Chancellor <nathan@kernel.org>
	Cc: Nick Desaulniers <ndesaulniers@google.com>
	Cc: Palmer Dabbelt <palmer@dabbelt.com>
	Cc: Paul Walmsley <paul.walmsley@sifive.com>
	Cc: Shuah Khan <shuah@kernel.org>
	Cc: Tom Rix <trix@redhat.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
(cherry picked from commit 0518dbe97fe629fea255318841cf3ef1b4532d66)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/testing/selftests/vm/Makefile
diff --cc tools/testing/selftests/vm/Makefile
index 57fa1e16c23b,4f0c50c33ba7..000000000000
--- a/tools/testing/selftests/vm/Makefile
+++ b/tools/testing/selftests/vm/Makefile
@@@ -29,25 -32,43 +32,25 @@@ endi
  # LDLIBS.
  MAKEFLAGS += --no-builtin-rules
  
 -CFLAGS = -Wall -I $(top_srcdir) -I $(top_srcdir)/tools/include/uapi $(EXTRA_CFLAGS) $(KHDR_INCLUDES)
 +CFLAGS = -Wall -I ../../../../usr/include $(EXTRA_CFLAGS) $(KHDR_INCLUDES)
  LDLIBS = -lrt -lpthread
 -
 -TEST_GEN_PROGS = cow
 -TEST_GEN_PROGS += compaction_test
 -TEST_GEN_PROGS += gup_test
 -TEST_GEN_PROGS += hmm-tests
 -TEST_GEN_PROGS += hugetlb-madvise
 -TEST_GEN_PROGS += hugepage-mmap
 -TEST_GEN_PROGS += hugepage-mremap
 -TEST_GEN_PROGS += hugepage-shm
 -TEST_GEN_PROGS += hugepage-vmemmap
 -TEST_GEN_PROGS += khugepaged
 -TEST_GEN_PROGS += madv_populate
 -TEST_GEN_PROGS += map_fixed_noreplace
 -TEST_GEN_PROGS += map_hugetlb
 -TEST_GEN_PROGS += map_populate
 -TEST_GEN_PROGS += memfd_secret
 -TEST_GEN_PROGS += migration
 -TEST_GEN_PROGS += mkdirty
 -TEST_GEN_PROGS += mlock-random-test
 -TEST_GEN_PROGS += mlock2-tests
 -TEST_GEN_PROGS += mrelease_test
 -TEST_GEN_PROGS += mremap_dontunmap
 -TEST_GEN_PROGS += mremap_test
 -TEST_GEN_PROGS += on-fault-limit
 -TEST_GEN_PROGS += thuge-gen
 -TEST_GEN_PROGS += transhuge-stress
 -TEST_GEN_PROGS += uffd-stress
 -TEST_GEN_PROGS += uffd-unit-tests
 -TEST_GEN_PROGS += soft-dirty
 -TEST_GEN_PROGS += split_huge_page_test
 -TEST_GEN_PROGS += ksm_tests
 -TEST_GEN_PROGS += ksm_functional_tests
 -TEST_GEN_PROGS += mdwe_test
 +TEST_GEN_FILES = compaction_test
 +TEST_GEN_FILES += gup_test
 +TEST_GEN_FILES += hmm-tests
 +TEST_GEN_FILES += hugepage-mmap
 +TEST_GEN_FILES += hugepage-shm
 +TEST_GEN_FILES += khugepaged
 +TEST_GEN_FILES += map_fixed_noreplace
 +TEST_GEN_FILES += map_hugetlb
 +TEST_GEN_FILES += map_populate
 +TEST_GEN_FILES += mlock-random-test
 +TEST_GEN_FILES += mlock2-tests
 +TEST_GEN_FILES += on-fault-limit
 +TEST_GEN_FILES += thuge-gen
 +TEST_GEN_FILES += transhuge-stress
 +TEST_GEN_FILES += userfaultfd
  
- ifeq ($(MACHINE),x86_64)
+ ifeq ($(ARCH),x86_64)
  CAN_BUILD_I386 := $(shell ./../x86/check_cc.sh "$(CC)" ../x86/trivial_32bit_program.c -m32)
  CAN_BUILD_X86_64 := $(shell ./../x86/check_cc.sh "$(CC)" ../x86/trivial_64bit_program.c)
  CAN_BUILD_WITH_NOPIE := $(shell ./../x86/check_cc.sh "$(CC)" ../x86/trivial_program.c -no-pie)
@@@ -69,27 -90,32 +72,48 @@@ TEST_GEN_FILES += $(BINARIES_64
  endif
  else
  
++<<<<<<< HEAD:tools/testing/selftests/vm/Makefile
 +ifneq (,$(findstring $(MACHINE),ppc64))
 +TEST_GEN_FILES += protection_keys
++=======
+ ifneq (,$(findstring $(ARCH),ppc64))
+ TEST_GEN_PROGS += protection_keys
++>>>>>>> 0518dbe97fe6 (selftests/mm: fix cross compilation with LLVM):tools/testing/selftests/mm/Makefile
  endif
  
  endif
  
++<<<<<<< HEAD:tools/testing/selftests/vm/Makefile
 +ifneq (,$(filter $(MACHINE),arm64 ia64 mips64 parisc64 ppc64 riscv64 s390x sh64 sparc64 x86_64))
 +TEST_GEN_FILES += va_128TBswitch
 +TEST_GEN_FILES += virtual_address_range
 +TEST_GEN_FILES += write_to_hugetlbfs
++=======
+ ifneq (,$(filter $(ARCH),arm64 ia64 mips64 parisc64 ppc64 riscv64 s390x sparc64 x86_64))
+ TEST_GEN_PROGS += va_high_addr_switch
+ TEST_GEN_PROGS += virtual_address_range
+ TEST_GEN_PROGS += write_to_hugetlbfs
++>>>>>>> 0518dbe97fe6 (selftests/mm: fix cross compilation with LLVM):tools/testing/selftests/mm/Makefile
  endif
  
  TEST_PROGS := run_vmtests.sh
  
  TEST_FILES := test_vmalloc.sh
  TEST_FILES += test_hmm.sh
 -TEST_FILES += va_high_addr_switch.sh
  
 +KSFT_KHDR_INSTALL := 1
  include ../lib.mk
  
++<<<<<<< HEAD:tools/testing/selftests/vm/Makefile
 +ifeq ($(MACHINE),x86_64)
++=======
+ $(TEST_GEN_PROGS): vm_util.c
+ 
+ $(OUTPUT)/uffd-stress: uffd-common.c
+ $(OUTPUT)/uffd-unit-tests: uffd-common.c
+ 
+ ifeq ($(ARCH),x86_64)
++>>>>>>> 0518dbe97fe6 (selftests/mm: fix cross compilation with LLVM):tools/testing/selftests/mm/Makefile
  BINARIES_32 := $(patsubst %,$(OUTPUT)/%,$(BINARIES_32))
  BINARIES_64 := $(patsubst %,$(OUTPUT)/%,$(BINARIES_64))
  
* Unmerged path tools/testing/selftests/vm/Makefile
