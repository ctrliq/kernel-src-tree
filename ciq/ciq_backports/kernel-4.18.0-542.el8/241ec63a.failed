selftests: vm: fix shellcheck warnings in run_vmtests.sh

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-542.el8
commit-author Axel Rasmussen <axelrasmussen@google.com>
commit 241ec63a9a0fbb39292ea1dd2d07f8dabedfe3df
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-542.el8/241ec63a.failed

These might not be issues yet, but they make the script more fragile. 
Also by fixing them we give a better example to future readers, who might
copy/paste or otherwise re-use snippets from our script.

- Use "read -r", since we don't ever want read to be interpreting '\'
  characters as escape sequences...
- Quote variables, to deal with spaces properly.
- Use $() instead of the older and harder-to-nest ``.
- Get rid of superfluous "$" prefixes inside arithmetic $(()).

Link: https://lkml.kernel.org/r/20220421224928.1848230-2-axelrasmussen@google.com
	Signed-off-by: Axel Rasmussen <axelrasmussen@google.com>
	Cc: Shuah Khan <shuah@kernel.org>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
(cherry picked from commit 241ec63a9a0fbb39292ea1dd2d07f8dabedfe3df)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/testing/selftests/vm/run_vmtests.sh
diff --cc tools/testing/selftests/vm/run_vmtests.sh
index f73d9621b5a2,a2302b5faaf2..000000000000
--- a/tools/testing/selftests/vm/run_vmtests.sh
+++ b/tools/testing/selftests/vm/run_vmtests.sh
@@@ -8,73 -8,13 +8,73 @@@ ksft_skip=
  mnt=./huge
  exitcode=0
  
 +usage() {
 +       cat <<EOF
 +usage: ${BASH_SOURCE[0]:-$0} [ -h | -t "<categories>"]
 +  -t: specify specific categories to tests to run
 +  -h: display this message
 +
 +The default behavior is to run all tests.
 +
 +Alternatively, specific groups tests can be run by passing a string
 +to the -t argument containing one or more of the following categories
 +separated by spaces:
 +- mmap
 +       tests for mmap(2)
 +- gup_test
 +       tests for gup using gup_test interface
 +- userfaultfd
 +       tests for  userfaultfd(2)
 +- compaction
 +       a test for the patch "Allow compaction of unevictable pages"
 +- mlock
 +       tests for mlock(2)
 +- hugevm
 +       tests for very large virtual address space
 +- vmalloc
 +       vmalloc smoke tests
 +- hmm
 +       hmm smoke tests
 +- ksm
 +       ksm tests that do not require >=2 NUMA nodes
 +- ksm_numa
 +       ksm tests that require >=2 NUMA nodes
 +example: ./run_vmtests.sh -t "hmm mmap ksm"
 +EOF
 +       exit 0
 +}
 +
 +while getopts "ht:" OPT; do
 +       case ${OPT} in
 +               "h") usage ;;
 +               "t") VM_SELFTEST_ITEMS=${OPTARG} ;;
 +       esac
 +done
 +shift $((OPTIND -1))
 +
 +# default behavior: run all tests
 +VM_SELFTEST_ITEMS=${VM_SELFTEST_ITEMS:-default}
 +
 +test_selected() {
 +       if [ "$VM_SELFTEST_ITEMS" == "default" ]; then
 +               # If no VM_SELFTEST_ITEMS are specified, run all tests
 +               return 0
 +       fi
 +       # If test selected argument is one of the test items
 +       if [[ " ${VM_SELFTEST_ITEMS[*]} " =~ " ${1} " ]]; then
 +               return 0
 +       else
 +	       return 1
 +       fi
 +}
 +
  #get huge pagesize and freepages from /proc/meminfo
- while read name size unit; do
+ while read -r name size unit; do
  	if [ "$name" = "HugePages_Free:" ]; then
- 		freepgs=$size
+ 		freepgs="$size"
  	fi
  	if [ "$name" = "Hugepagesize:" ]; then
- 		hpgsize_KB=$size
+ 		hpgsize_KB="$size"
  	fi
  done < /proc/meminfo
  
@@@ -118,73 -57,76 +117,107 @@@ els
  	exit 1
  fi
  
 -#filter 64bit architectures
 +# filter 64bit architectures
  ARCH64STR="arm64 ia64 mips64 parisc64 ppc64 ppc64le riscv64 s390x sh64 sparc64 x86_64"
- if [ -z $ARCH ]; then
-   ARCH=`uname -m 2>/dev/null | sed -e 's/aarch64.*/arm64/'`
+ if [ -z "$ARCH" ]; then
+ 	ARCH=$(uname -m 2>/dev/null | sed -e 's/aarch64.*/arm64/')
  fi
  VADDR64=0
++<<<<<<< HEAD
 +echo "$ARCH64STR" | grep "$ARCH" &>/dev/null && VADDR64=1
++=======
+ echo "$ARCH64STR" | grep "$ARCH" && VADDR64=1
++>>>>>>> 241ec63a9a0f (selftests: vm: fix shellcheck warnings in run_vmtests.sh)
  
  # Usage: run_test [test binary] [arbitrary test arguments...]
  run_test() {
 -	local title="running $*"
 -	local sep=$(echo -n "$title" | tr "[:graph:][:space:]" -)
 -	printf "%s\n%s\n%s\n" "$sep" "$title" "$sep"
 -
 -	"$@"
 -	local ret=$?
 -	if [ $ret -eq 0 ]; then
 -		echo "[PASS]"
 -	elif [ $ret -eq $ksft_skip ]; then
 -		echo "[SKIP]"
 -		exitcode=$ksft_skip
 -	else
 -		echo "[FAIL]"
 -		exitcode=1
 -	fi
 +	if test_selected ${CATEGORY}; then
 +		local title="running $*"
 +		local sep=$(echo -n "$title" | tr "[:graph:][:space:]" -)
 +		printf "%s\n%s\n%s\n" "$sep" "$title" "$sep"
 +
 +		"$@"
 +		local ret=$?
 +		if [ $ret -eq 0 ]; then
 +			echo "[PASS]"
 +		elif [ $ret -eq $ksft_skip ]; then
 +			echo "[SKIP]"
 +			exitcode=$ksft_skip
 +		else
 +			echo "[FAIL]"
 +			exitcode=1
 +		fi
 +	fi # test_selected
  }
  
++<<<<<<< HEAD
 +# Mount directory for HugeTLB
++=======
++>>>>>>> 241ec63a9a0f (selftests: vm: fix shellcheck warnings in run_vmtests.sh)
  mkdir "$mnt"
  mount -t hugetlbfs none "$mnt"
  
 -run_test ./hugepage-mmap
 +CATEGORY="hugetlb" run_test ./hugepage-mmap
  
- shmmax=`cat /proc/sys/kernel/shmmax`
- shmall=`cat /proc/sys/kernel/shmall`
+ shmmax=$(cat /proc/sys/kernel/shmmax)
+ shmall=$(cat /proc/sys/kernel/shmall)
  echo 268435456 > /proc/sys/kernel/shmmax
  echo 4194304 > /proc/sys/kernel/shmall
++<<<<<<< HEAD
 +CATEGORY="hugetlb" run_test ./hugepage-shm
++=======
+ run_test ./hugepage-shm
++>>>>>>> 241ec63a9a0f (selftests: vm: fix shellcheck warnings in run_vmtests.sh)
  echo "$shmmax" > /proc/sys/kernel/shmmax
  echo "$shmall" > /proc/sys/kernel/shmall
  
 -run_test ./map_hugetlb
 +CATEGORY="hugetlb" run_test ./map_hugetlb
 +
++<<<<<<< HEAD
 +if test_selected "hugetlb"; then
 +	echo "NOTE: The above hugetlb tests provide minimal coverage.  Use"
 +	echo "      https://github.com/libhugetlbfs/libhugetlbfs.git for"
 +	echo "      hugetlb regression testing."
 +fi
  
 +CATEGORY="mmap" run_test ./map_fixed_noreplace
++=======
+ run_test ./hugepage-mremap "$mnt"/huge_mremap
+ rm -f "$mnt"/huge_mremap
+ 
+ run_test ./hugepage-vmemmap
+ 
+ run_test ./hugetlb-madvise "$mnt"/madvise-test
+ rm -f "$mnt"/madvise-test
+ 
+ echo "NOTE: The above hugetlb tests provide minimal coverage.  Use"
+ echo "      https://github.com/libhugetlbfs/libhugetlbfs.git for"
+ echo "      hugetlb regression testing."
+ 
+ run_test ./map_fixed_noreplace
++>>>>>>> 241ec63a9a0f (selftests: vm: fix shellcheck warnings in run_vmtests.sh)
  
  # get_user_pages_fast() benchmark
 -run_test ./gup_test -u
 +CATEGORY="gup_test" run_test ./gup_test -u
  # pin_user_pages_fast() benchmark
 -run_test ./gup_test -a
 +CATEGORY="gup_test" run_test ./gup_test -a
  # Dump pages 0, 19, and 4096, using pin_user_pages:
 -run_test ./gup_test -ct -F 0x1 0 19 0x1000
 +CATEGORY="gup_test" run_test ./gup_test -ct -F 0x1 0 19 0x1000
  
 -run_test ./userfaultfd anon 20 16
 +CATEGORY="userfaultfd" run_test ./userfaultfd anon 20 16
  # Test requires source and destination huge pages.  Size of source
  # (half_ufd_size_MB) is passed as argument to test.
++<<<<<<< HEAD
 +CATEGORY="userfaultfd" run_test ./userfaultfd hugetlb "$half_ufd_size_MB" 32 $mnt/ufd_test_file
 +CATEGORY="userfaultfd" run_test ./userfaultfd shmem 20 16
 +
 +#cleanup hugeTLB
++=======
+ run_test ./userfaultfd hugetlb "$half_ufd_size_MB" 32
+ run_test ./userfaultfd shmem 20 16
+ 
+ #cleanup
++>>>>>>> 241ec63a9a0f (selftests: vm: fix shellcheck warnings in run_vmtests.sh)
  umount "$mnt"
  rm -rf "$mnt"
  echo "$nr_hugepgs" > /proc/sys/vm/nr_hugepages
* Unmerged path tools/testing/selftests/vm/run_vmtests.sh
