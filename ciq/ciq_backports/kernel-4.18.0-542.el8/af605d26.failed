selftests/mm: merge util.h into vm_util.h

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-542.el8
commit-author Peter Xu <peterx@redhat.com>
commit af605d26a8f26e9e46fa82246dc1241efd3834a5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-542.el8/af605d26.failed

There're two util headers under mm/ kselftest.  Merge one with another. 
It turns out util.h is the easy one to move.

When merging, drop PAGE_SIZE / PAGE_SHIFT because they're unnecessary
wrappers to page_size() / page_shift(), meanwhile rename them to psize()
and pshift() so as to not conflict with some existing definitions in some
test files that includes vm_util.h.

Link: https://lkml.kernel.org/r/20230412164120.327731-1-peterx@redhat.com
	Signed-off-by: Peter Xu <peterx@redhat.com>
	Reviewed-by: Axel Rasmussen <axelrasmussen@google.com>
	Reviewed-by: David Hildenbrand <david@redhat.com>
	Reviewed-by: Mike Rapoport (IBM) <rppt@kernel.org>
	Cc: Dmitry Safonov <0x7f454c46@gmail.com>
	Cc: Mike Kravetz <mike.kravetz@oracle.com>
	Cc: Zach O'Keefe <zokeefe@google.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
(cherry picked from commit af605d26a8f26e9e46fa82246dc1241efd3834a5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/testing/selftests/mm/ksm_tests.c
#	tools/testing/selftests/mm/mrelease_test.c
#	tools/testing/selftests/mm/vm_util.c
#	tools/testing/selftests/mm/vm_util.h
#	tools/testing/selftests/vm/Makefile
#	tools/testing/selftests/vm/gup_test.c
#	tools/testing/selftests/vm/transhuge-stress.c
diff --cc tools/testing/selftests/vm/Makefile
index 57fa1e16c23b,9d9822b4bf24..000000000000
--- a/tools/testing/selftests/vm/Makefile
+++ b/tools/testing/selftests/vm/Makefile
@@@ -85,10 -101,23 +85,26 @@@ TEST_PROGS := run_vmtests.s
  
  TEST_FILES := test_vmalloc.sh
  TEST_FILES += test_hmm.sh
 -TEST_FILES += va_128TBswitch.sh
  
 +KSFT_KHDR_INSTALL := 1
  include ../lib.mk
  
++<<<<<<< HEAD:tools/testing/selftests/vm/Makefile
++=======
+ $(OUTPUT)/cow: vm_util.c
+ $(OUTPUT)/khugepaged: vm_util.c
+ $(OUTPUT)/ksm_functional_tests: vm_util.c
+ $(OUTPUT)/madv_populate: vm_util.c
+ $(OUTPUT)/mkdirty: vm_util.c
+ $(OUTPUT)/soft-dirty: vm_util.c
+ $(OUTPUT)/split_huge_page_test: vm_util.c
+ $(OUTPUT)/userfaultfd: vm_util.c
+ $(OUTPUT)/gup_test: vm_util.c
+ $(OUTPUT)/mrelease_test: vm_util.c
+ $(OUTPUT)/transhuge-stress: vm_util.c
+ $(OUTPUT)/ksm_tests: vm_util.c
+ 
++>>>>>>> af605d26a8f2 (selftests/mm: merge util.h into vm_util.h):tools/testing/selftests/mm/Makefile
  ifeq ($(MACHINE),x86_64)
  BINARIES_32 := $(patsubst %,$(OUTPUT)/%,$(BINARIES_32))
  BINARIES_64 := $(patsubst %,$(OUTPUT)/%,$(BINARIES_64))
diff --cc tools/testing/selftests/vm/gup_test.c
index 7b68b10c8395,ec2229136384..000000000000
--- a/tools/testing/selftests/vm/gup_test.c
+++ b/tools/testing/selftests/vm/gup_test.c
@@@ -10,11 -10,11 +10,15 @@@
  #include <sys/types.h>
  #include <pthread.h>
  #include <assert.h>
 -#include <mm/gup_test.h>
 +#include "../../../../mm/gup_test.h"
  #include "../kselftest.h"
++<<<<<<< HEAD:tools/testing/selftests/vm/gup_test.c
++=======
+ #include "vm_util.h"
++>>>>>>> af605d26a8f2 (selftests/mm: merge util.h into vm_util.h):tools/testing/selftests/mm/gup_test.c
  
  #define MB (1UL << 20)
 +#define PAGE_SIZE sysconf(_SC_PAGESIZE)
  
  /* Just the flags we need, copied from mm.h: */
  #define FOLL_WRITE	0x01	/* check pte is writable */
diff --cc tools/testing/selftests/vm/transhuge-stress.c
index a03cb3fce1f6,ba9d37ad3a89..000000000000
--- a/tools/testing/selftests/vm/transhuge-stress.c
+++ b/tools/testing/selftests/vm/transhuge-stress.c
@@@ -15,17 -15,8 +15,21 @@@
  #include <fcntl.h>
  #include <string.h>
  #include <sys/mman.h>
++<<<<<<< HEAD:tools/testing/selftests/vm/transhuge-stress.c
++=======
+ #include "vm_util.h"
++>>>>>>> af605d26a8f2 (selftests/mm: merge util.h into vm_util.h):tools/testing/selftests/mm/transhuge-stress.c
  
 +#define PAGE_SHIFT 12
 +#define HPAGE_SHIFT 21
 +
 +#define PAGE_SIZE (1 << PAGE_SHIFT)
 +#define HPAGE_SIZE (1 << HPAGE_SHIFT)
 +
 +#define PAGEMAP_PRESENT(ent)	(((ent) & (1ull << 63)) != 0)
 +#define PAGEMAP_PFN(ent)	((ent) & ((1ull << 55) - 1))
 +
 +int pagemap_fd;
  int backing_fd = -1;
  int mmap_flags = MAP_ANONYMOUS | MAP_NORESERVE | MAP_PRIVATE;
  #define PROT_RW (PROT_READ | PROT_WRITE)
@@@ -67,12 -31,13 +71,12 @@@ int main(int argc, char **argv
  	double s;
  	uint8_t *map;
  	size_t map_len;
 -	int pagemap_fd;
  
  	ram = sysconf(_SC_PHYS_PAGES);
- 	if (ram > SIZE_MAX / sysconf(_SC_PAGESIZE) / 4)
+ 	if (ram > SIZE_MAX / psize() / 4)
  		ram = SIZE_MAX / 4;
  	else
- 		ram *= sysconf(_SC_PAGESIZE);
+ 		ram *= psize();
  	len = ram;
  
  	while (++i < argc) {
* Unmerged path tools/testing/selftests/mm/ksm_tests.c
* Unmerged path tools/testing/selftests/mm/mrelease_test.c
* Unmerged path tools/testing/selftests/mm/vm_util.c
* Unmerged path tools/testing/selftests/mm/vm_util.h
* Unmerged path tools/testing/selftests/mm/ksm_tests.c
* Unmerged path tools/testing/selftests/mm/mrelease_test.c
* Unmerged path tools/testing/selftests/mm/vm_util.c
* Unmerged path tools/testing/selftests/mm/vm_util.h
* Unmerged path tools/testing/selftests/vm/Makefile
* Unmerged path tools/testing/selftests/vm/gup_test.c
* Unmerged path tools/testing/selftests/vm/transhuge-stress.c
