selftest/vm: add skip support to mremap_test

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-542.el8
commit-author Sidhartha Kumar <sidhartha.kumar@oracle.com>
commit 80df2fb95df26c849c6cc137344013cc048a083f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-542.el8/80df2fb9.failed

Allow the mremap test to be skipped due to errors such as failing to
parse the mmap_min_addr sysctl.

Link: https://lkml.kernel.org/r/20220420215721.4868-4-sidhartha.kumar@oracle.com
	Signed-off-by: Sidhartha Kumar <sidhartha.kumar@oracle.com>
	Reviewed-by: Shuah Khan <skhan@linuxfoundation.org>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 80df2fb95df26c849c6cc137344013cc048a083f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/testing/selftests/vm/run_vmtests.sh
diff --cc tools/testing/selftests/vm/run_vmtests.sh
index f73d9621b5a2,352ba00cf26b..000000000000
--- a/tools/testing/selftests/vm/run_vmtests.sh
+++ b/tools/testing/selftests/vm/run_vmtests.sh
@@@ -157,60 -84,434 +157,100 @@@ shmmax=`cat /proc/sys/kernel/shmmax
  shmall=`cat /proc/sys/kernel/shmall`
  echo 268435456 > /proc/sys/kernel/shmmax
  echo 4194304 > /proc/sys/kernel/shmall
 -echo "--------------------"
 -echo "running hugepage-shm"
 -echo "--------------------"
 -./hugepage-shm
 -if [ $? -ne 0 ]; then
 -	echo "[FAIL]"
 -	exitcode=1
 -else
 -	echo "[PASS]"
 -fi
 -echo $shmmax > /proc/sys/kernel/shmmax
 -echo $shmall > /proc/sys/kernel/shmall
 +CATEGORY="hugetlb" run_test ./hugepage-shm
 +echo "$shmmax" > /proc/sys/kernel/shmmax
 +echo "$shmall" > /proc/sys/kernel/shmall
  
 -echo "-------------------"
 -echo "running map_hugetlb"
 -echo "-------------------"
 -./map_hugetlb
 -if [ $? -ne 0 ]; then
 -	echo "[FAIL]"
 -	exitcode=1
 -else
 -	echo "[PASS]"
 -fi
 +CATEGORY="hugetlb" run_test ./map_hugetlb
  
 -echo "-----------------------"
 -echo "running hugepage-mremap"
 -echo "-----------------------"
 -./hugepage-mremap $mnt/huge_mremap
 -if [ $? -ne 0 ]; then
 -	echo "[FAIL]"
 -	exitcode=1
 -else
 -	echo "[PASS]"
 -fi
 -rm -f $mnt/huge_mremap
 -
 -echo "------------------------"
 -echo "running hugepage-vmemmap"
 -echo "------------------------"
 -./hugepage-vmemmap
 -if [ $? -ne 0 ]; then
 -	echo "[FAIL]"
 -	exitcode=1
 -else
 -	echo "[PASS]"
 -fi
 -
 -echo "-----------------------"
 -echo "running hugetlb-madvise"
 -echo "-----------------------"
 -./hugetlb-madvise $mnt/madvise-test
 -if [ $? -ne 0 ]; then
 -	echo "[FAIL]"
 -	exitcode=1
 -else
 -	echo "[PASS]"
 -fi
 -rm -f $mnt/madvise-test
 -
 -echo "NOTE: The above hugetlb tests provide minimal coverage.  Use"
 -echo "      https://github.com/libhugetlbfs/libhugetlbfs.git for"
 -echo "      hugetlb regression testing."
 -
 -echo "---------------------------"
 -echo "running map_fixed_noreplace"
 -echo "---------------------------"
 -./map_fixed_noreplace
 -if [ $? -ne 0 ]; then
 -	echo "[FAIL]"
 -	exitcode=1
 -else
 -	echo "[PASS]"
 -fi
 -
 -echo "------------------------------------------------------"
 -echo "running: gup_test -u # get_user_pages_fast() benchmark"
 -echo "------------------------------------------------------"
 -./gup_test -u
 -if [ $? -ne 0 ]; then
 -	echo "[FAIL]"
 -	exitcode=1
 -else
 -	echo "[PASS]"
 -fi
 -
 -echo "------------------------------------------------------"
 -echo "running: gup_test -a # pin_user_pages_fast() benchmark"
 -echo "------------------------------------------------------"
 -./gup_test -a
 -if [ $? -ne 0 ]; then
 -	echo "[FAIL]"
 -	exitcode=1
 -else
 -	echo "[PASS]"
 +if test_selected "hugetlb"; then
 +	echo "NOTE: The above hugetlb tests provide minimal coverage.  Use"
 +	echo "      https://github.com/libhugetlbfs/libhugetlbfs.git for"
 +	echo "      hugetlb regression testing."
  fi
  
 -echo "------------------------------------------------------------"
 -echo "# Dump pages 0, 19, and 4096, using pin_user_pages:"
 -echo "running: gup_test -ct -F 0x1 0 19 0x1000 # dump_page() test"
 -echo "------------------------------------------------------------"
 -./gup_test -ct -F 0x1 0 19 0x1000
 -if [ $? -ne 0 ]; then
 -	echo "[FAIL]"
 -	exitcode=1
 -else
 -	echo "[PASS]"
 -fi
 +CATEGORY="mmap" run_test ./map_fixed_noreplace
  
 -echo "-------------------"
 -echo "running userfaultfd"
 -echo "-------------------"
 -./userfaultfd anon 20 16
 -if [ $? -ne 0 ]; then
 -	echo "[FAIL]"
 -	exitcode=1
 -else
 -	echo "[PASS]"
 -fi
 +# get_user_pages_fast() benchmark
 +CATEGORY="gup_test" run_test ./gup_test -u
 +# pin_user_pages_fast() benchmark
 +CATEGORY="gup_test" run_test ./gup_test -a
 +# Dump pages 0, 19, and 4096, using pin_user_pages:
 +CATEGORY="gup_test" run_test ./gup_test -ct -F 0x1 0 19 0x1000
  
 -echo "---------------------------"
 -echo "running userfaultfd_hugetlb"
 -echo "---------------------------"
 +CATEGORY="userfaultfd" run_test ./userfaultfd anon 20 16
  # Test requires source and destination huge pages.  Size of source
  # (half_ufd_size_MB) is passed as argument to test.
 -./userfaultfd hugetlb $half_ufd_size_MB 32
 -if [ $? -ne 0 ]; then
 -	echo "[FAIL]"
 -	exitcode=1
 -else
 -	echo "[PASS]"
 -fi
 +CATEGORY="userfaultfd" run_test ./userfaultfd hugetlb "$half_ufd_size_MB" 32 $mnt/ufd_test_file
 +CATEGORY="userfaultfd" run_test ./userfaultfd shmem 20 16
  
 -echo "-------------------------"
 -echo "running userfaultfd_shmem"
 -echo "-------------------------"
 -./userfaultfd shmem 20 16
 -if [ $? -ne 0 ]; then
 -	echo "[FAIL]"
 -	exitcode=1
 -else
 -	echo "[PASS]"
 -fi
 +#cleanup hugeTLB
 +umount "$mnt"
 +rm -rf "$mnt"
 +echo "$nr_hugepgs" > /proc/sys/vm/nr_hugepages
  
 -#cleanup
 -umount $mnt
 -rm -rf $mnt
 -echo $nr_hugepgs > /proc/sys/vm/nr_hugepages
 +CATEGORY="compaction" run_test ./compaction_test
  
 -echo "-----------------------"
 -echo "running compaction_test"
 -echo "-----------------------"
 -./compaction_test
 -if [ $? -ne 0 ]; then
 -	echo "[FAIL]"
 -	exitcode=1
 -else
 -	echo "[PASS]"
 -fi
 +CATEGORY="mlock" run_test sudo -u nobody ./on-fault-limit
  
 -echo "----------------------"
 -echo "running on-fault-limit"
 -echo "----------------------"
 -sudo -u nobody ./on-fault-limit
 -if [ $? -ne 0 ]; then
 -	echo "[FAIL]"
 -	exitcode=1
 -else
 -	echo "[PASS]"
 -fi
 +CATEGORY="mmap" run_test ./map_populate
  
 -echo "--------------------"
 -echo "running map_populate"
 -echo "--------------------"
 -./map_populate
 -if [ $? -ne 0 ]; then
 -	echo "[FAIL]"
 -	exitcode=1
 -else
 -	echo "[PASS]"
 -fi
 +CATEGORY="mlock" run_test ./mlock-random-test
  
 -echo "-------------------------"
 -echo "running mlock-random-test"
 -echo "-------------------------"
 -./mlock-random-test
 -if [ $? -ne 0 ]; then
 -	echo "[FAIL]"
 -	exitcode=1
 -else
 -	echo "[PASS]"
 -fi
 +CATEGORY="mlock" run_test ./mlock2-tests
  
++<<<<<<< HEAD
 +CATEGORY="hugetlb" run_test ./thuge-gen
++=======
+ echo "--------------------"
+ echo "running mlock2-tests"
+ echo "--------------------"
+ ./mlock2-tests
+ if [ $? -ne 0 ]; then
+ 	echo "[FAIL]"
+ 	exitcode=1
+ else
+ 	echo "[PASS]"
+ fi
+ 
+ echo "-------------------"
+ echo "running mremap_test"
+ echo "-------------------"
+ ./mremap_test
+ ret_val=$?
+ 
+ if [ $ret_val -eq 0 ]; then
+ 	echo "[PASS]"
+ elif [ $ret_val -eq $ksft_skip ]; then
+ 	 echo "[SKIP]"
+ 	 exitcode=$ksft_skip
+ else
+ 	echo "[FAIL]"
+ 	exitcode=1
+ fi
+ 
+ echo "-----------------"
+ echo "running thuge-gen"
+ echo "-----------------"
+ ./thuge-gen
+ if [ $? -ne 0 ]; then
+ 	echo "[FAIL]"
+ 	exitcode=1
+ else
+ 	echo "[PASS]"
+ fi
++>>>>>>> 80df2fb95df2 (selftest/vm: add skip support to mremap_test)
  
  if [ $VADDR64 -ne 0 ]; then
 -echo "-----------------------------"
 -echo "running virtual_address_range"
 -echo "-----------------------------"
 -./virtual_address_range
 -if [ $? -ne 0 ]; then
 -	echo "[FAIL]"
 -	exitcode=1
 -else
 -	echo "[PASS]"
 -fi
 +	CATEGORY="hugevm" run_test ./virtual_address_range
  
 -echo "-----------------------------"
 -echo "running virtual address 128TB switch test"
 -echo "-----------------------------"
 -./va_128TBswitch
 -if [ $? -ne 0 ]; then
 -    echo "[FAIL]"
 -    exitcode=1
 -else
 -    echo "[PASS]"
 -fi
 +	# virtual address 128TB switch test
 +	CATEGORY="hugevm" run_test ./va_128TBswitch
  fi # VADDR64
  
 -echo "------------------------------------"
 -echo "running vmalloc stability smoke test"
 -echo "------------------------------------"
 -./test_vmalloc.sh smoke
 -ret_val=$?
 -
 -if [ $ret_val -eq 0 ]; then
 -	echo "[PASS]"
 -elif [ $ret_val -eq $ksft_skip ]; then
 -	 echo "[SKIP]"
 -	 exitcode=$ksft_skip
 -else
 -	echo "[FAIL]"
 -	exitcode=1
 -fi
 -
 -echo "------------------------------------"
 -echo "running MREMAP_DONTUNMAP smoke test"
 -echo "------------------------------------"
 -./mremap_dontunmap
 -ret_val=$?
 -
 -if [ $ret_val -eq 0 ]; then
 -	echo "[PASS]"
 -elif [ $ret_val -eq $ksft_skip ]; then
 -	 echo "[SKIP]"
 -	 exitcode=$ksft_skip
 -else
 -	echo "[FAIL]"
 -	exitcode=1
 -fi
 -
 -echo "running HMM smoke test"
 -echo "------------------------------------"
 -./test_hmm.sh smoke
 -ret_val=$?
 -
 -if [ $ret_val -eq 0 ]; then
 -	echo "[PASS]"
 -elif [ $ret_val -eq $ksft_skip ]; then
 -	echo "[SKIP]"
 -	exitcode=$ksft_skip
 -else
 -	echo "[FAIL]"
 -	exitcode=1
 -fi
 -
 -echo "--------------------------------------------------------"
 -echo "running MADV_POPULATE_READ and MADV_POPULATE_WRITE tests"
 -echo "--------------------------------------------------------"
 -./madv_populate
 -ret_val=$?
 -
 -if [ $ret_val -eq 0 ]; then
 -	echo "[PASS]"
 -elif [ $ret_val -eq $ksft_skip ]; then
 -	echo "[SKIP]"
 -	exitcode=$ksft_skip
 -else
 -	echo "[FAIL]"
 -	exitcode=1
 -fi
 -
 -echo "running memfd_secret test"
 -echo "------------------------------------"
 -./memfd_secret
 -ret_val=$?
 -
 -if [ $ret_val -eq 0 ]; then
 -	echo "[PASS]"
 -elif [ $ret_val -eq $ksft_skip ]; then
 -	echo "[SKIP]"
 -	exitcode=$ksft_skip
 -else
 -	echo "[FAIL]"
 -	exitcode=1
 -fi
 -
 -echo "-------------------------------------------------------"
 -echo "running KSM MADV_MERGEABLE test with 10 identical pages"
 -echo "-------------------------------------------------------"
 -./ksm_tests -M -p 10
 -ret_val=$?
 -
 -if [ $ret_val -eq 0 ]; then
 -	echo "[PASS]"
 -elif [ $ret_val -eq $ksft_skip ]; then
 -	 echo "[SKIP]"
 -	 exitcode=$ksft_skip
 -else
 -	echo "[FAIL]"
 -	exitcode=1
 -fi
 -
 -echo "------------------------"
 -echo "running KSM unmerge test"
 -echo "------------------------"
 -./ksm_tests -U
 -ret_val=$?
 -
 -if [ $ret_val -eq 0 ]; then
 -	echo "[PASS]"
 -elif [ $ret_val -eq $ksft_skip ]; then
 -	 echo "[SKIP]"
 -	 exitcode=$ksft_skip
 -else
 -	echo "[FAIL]"
 -	exitcode=1
 -fi
 -
 -echo "----------------------------------------------------------"
 -echo "running KSM test with 10 zero pages and use_zero_pages = 0"
 -echo "----------------------------------------------------------"
 -./ksm_tests -Z -p 10 -z 0
 -ret_val=$?
 +# vmalloc stability smoke test
 +CATEGORY="vmalloc" run_test ./test_vmalloc.sh smoke
  
 -if [ $ret_val -eq 0 ]; then
 -	echo "[PASS]"
 -elif [ $ret_val -eq $ksft_skip ]; then
 -	 echo "[SKIP]"
 -	 exitcode=$ksft_skip
 -else
 -	echo "[FAIL]"
 -	exitcode=1
 -fi
 -
 -echo "----------------------------------------------------------"
 -echo "running KSM test with 10 zero pages and use_zero_pages = 1"
 -echo "----------------------------------------------------------"
 -./ksm_tests -Z -p 10 -z 1
 -ret_val=$?
 -
 -if [ $ret_val -eq 0 ]; then
 -	echo "[PASS]"
 -elif [ $ret_val -eq $ksft_skip ]; then
 -	 echo "[SKIP]"
 -	 exitcode=$ksft_skip
 -else
 -	echo "[FAIL]"
 -	exitcode=1
 -fi
 -
 -echo "-------------------------------------------------------------"
 -echo "running KSM test with 2 NUMA nodes and merge_across_nodes = 1"
 -echo "-------------------------------------------------------------"
 -./ksm_tests -N -m 1
 -ret_val=$?
 -
 -if [ $ret_val -eq 0 ]; then
 -	echo "[PASS]"
 -elif [ $ret_val -eq $ksft_skip ]; then
 -	 echo "[SKIP]"
 -	 exitcode=$ksft_skip
 -else
 -	echo "[FAIL]"
 -	exitcode=1
 -fi
 -
 -echo "-------------------------------------------------------------"
 -echo "running KSM test with 2 NUMA nodes and merge_across_nodes = 0"
 -echo "-------------------------------------------------------------"
 -./ksm_tests -N -m 0
 -ret_val=$?
 -
 -if [ $ret_val -eq 0 ]; then
 -	echo "[PASS]"
 -elif [ $ret_val -eq $ksft_skip ]; then
 -	 echo "[SKIP]"
 -	 exitcode=$ksft_skip
 -else
 -	echo "[FAIL]"
 -	exitcode=1
 -fi
 -
 -exit $exitcode
 +CATEGORY="hmm" run_test ./test_hmm.sh smoke
  
  exit $exitcode
* Unmerged path tools/testing/selftests/vm/run_vmtests.sh
