selftests/kselftest/runner/run_one(): allow running non-executable files

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-542.el8
commit-author SeongJae Park <sjpark@amazon.de>
commit 303f8e2d02002dbe331cab7813ee091aead3cd39
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-542.el8/303f8e2d.failed

When running a test program, 'run_one()' checks if the program has the
execution permission and fails if it doesn't.  However, it's easy to
mistakenly lose the permissions, as some common tools like 'diff' don't
support the permission change well[1].  Compared to that, making mistakes
in the test program's path would only rare, as those are explicitly listed
in 'TEST_PROGS'.  Therefore, it might make more sense to resolve the
situation on our own and run the program.

For this reason, this commit makes the test program runner function still
print the warning message but to try parsing the interpreter of the
program and to explicitly run it with the interpreter, in this case.

[1] https://lore.kernel.org/mm-commits/YRJisBs9AunccCD4@kroah.com/

Link: https://lkml.kernel.org/r/20210810164534.25902-1-sj38.park@gmail.com
	Signed-off-by: SeongJae Park <sjpark@amazon.de>
	Suggested-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
	Cc: Shuah Khan <shuah@kernel.org>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 303f8e2d02002dbe331cab7813ee091aead3cd39)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/testing/selftests/kselftest/runner.sh
diff --cc tools/testing/selftests/kselftest/runner.sh
index e6812f7157f4,a9ba782d8ca0..000000000000
--- a/tools/testing/selftests/kselftest/runner.sh
+++ b/tools/testing/selftests/kselftest/runner.sh
@@@ -64,34 -63,27 +64,52 @@@ run_one(
  		done < "$settings"
  	fi
  
 +	# Command line timeout overrides the settings file
 +	if [ -n "$kselftest_override_timeout" ]; then
 +		kselftest_timeout="$kselftest_override_timeout"
 +		echo "# overriding timeout to $kselftest_timeout" >> "$logfile"
 +	else
 +		echo "# timeout set to $kselftest_timeout" >> "$logfile"
 +	fi
 +
  	TEST_HDR_MSG="selftests: $DIR: $BASENAME_TEST"
  	echo "# $TEST_HDR_MSG"
++<<<<<<< HEAD
 +	rharch=$(uname -m)
 +	for rhskipped in $kselftest_rhskip; do
 +		if [ $rhskipped = $BASENAME_TEST -o $rhskipped = $BASENAME_TEST:$rharch ]; then
 +			echo "ok $test_num $TEST_HDR_MSG # skipped in RHEL"
 +			return 0
 +		fi
 +	done
 +	if [ ! -x "$TEST" ]; then
 +		echo -n "# Warning: file $TEST is "
 +		if [ ! -e "$TEST" ]; then
 +			echo "missing!"
 +		else
 +			echo "not executable, correct this."
 +		fi
++=======
+ 	if [ ! -e "$TEST" ]; then
+ 		echo "# Warning: file $TEST is missing!"
++>>>>>>> 303f8e2d0200 (selftests/kselftest/runner/run_one(): allow running non-executable files)
  		echo "not ok $test_num $TEST_HDR_MSG"
  	else
+ 		cmd="./$BASENAME_TEST"
+ 		if [ ! -x "$TEST" ]; then
+ 			echo "# Warning: file $TEST is not executable"
+ 
+ 			if [ $(head -n 1 "$TEST" | cut -c -2) = "#!" ]
+ 			then
+ 				interpreter=$(head -n 1 "$TEST" | cut -c 3-)
+ 				cmd="$interpreter ./$BASENAME_TEST"
+ 			else
+ 				echo "not ok $test_num $TEST_HDR_MSG"
+ 				return
+ 			fi
+ 		fi
  		cd `dirname $TEST` > /dev/null
- 		((((( tap_timeout ./$BASENAME_TEST 2>&1; echo $? >&3) |
+ 		((((( tap_timeout "$cmd" 2>&1; echo $? >&3) |
  			tap_prefix >&4) 3>&1) |
  			(read xs; exit $xs)) 4>>"$logfile" &&
  		echo "ok $test_num $TEST_HDR_MSG") ||
* Unmerged path tools/testing/selftests/kselftest/runner.sh
