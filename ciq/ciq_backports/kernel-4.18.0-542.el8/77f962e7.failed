userfaultfd: selftests: make __{s,u}64 format specifiers portable

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-542.el8
commit-author Axel Rasmussen <axelrasmussen@google.com>
commit 77f962e7ae24e5fa7b257b8242c62e716119a312
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-542.el8/77f962e7.failed

On certain platforms (powerpcle is the one on which I ran into this),
"%Ld" and "%Lu" are unsuitable for printing __s64 and __u64, respectively,
resulting in build warnings.  Cast to {u,}int64_t, and use the PRI{d,u}64
macros defined in inttypes.h to print them.  This ought to be portable to
all platforms.

Splitting this off into a separate macro lets us remove some lines, and
get rid of some (I would argue) stylistically odd cases where we joined
printf() and exit() into a single statement with a ,.

Finally, this also fixes a "missing braces around initializer" warning
when we initialize prms in wp_range().

[axelrasmussen@google.com: v2]
  Link: https://lkml.kernel.org/r/20201203180244.1811601-1-axelrasmussen@google.com

Link: https://lkml.kernel.org/r/20201202211542.1121189-1-axelrasmussen@google.com
	Signed-off-by: Axel Rasmussen <axelrasmussen@google.com>
	Acked-by: Peter Xu <peterx@redhat.com>
	Cc: Shuah Khan <shuah@kernel.org>
	Cc: Joe Perches <joe@perches.com>
	Cc: Mike Rapoport <rppt@linux.vnet.ibm.com>
	Cc: Andrea Arcangeli <aarcange@redhat.com>
	Cc: David Alan Gilbert <dgilbert@redhat.com>
	Cc: Greg Thelen <gthelen@google.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 77f962e7ae24e5fa7b257b8242c62e716119a312)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/testing/selftests/vm/userfaultfd.c
diff --cc tools/testing/selftests/vm/userfaultfd.c
index dc429d1bd4bc,a7059a6bc215..000000000000
--- a/tools/testing/selftests/vm/userfaultfd.c
+++ b/tools/testing/selftests/vm/userfaultfd.c
@@@ -348,9 -355,11 +357,17 @@@ static void wp_range(int ufd, __u64 sta
  	/* Undo write-protect, do wakeup after that */
  	prms.mode = wp ? UFFDIO_WRITEPROTECT_MODE_WP : 0;
  
++<<<<<<< HEAD
 +	if (ioctl(ufd, UFFDIO_WRITEPROTECT, &prms))
 +		fprintf(stderr, "clear WP failed for address 0x%Lx\n",
 +			start), exit(1);
++=======
+ 	if (ioctl(ufd, UFFDIO_WRITEPROTECT, &prms)) {
+ 		fprintf(stderr, "clear WP failed for address 0x%" PRIx64 "\n",
+ 			(uint64_t)start);
+ 		exit(1);
+ 	}
++>>>>>>> 77f962e7ae24 (userfaultfd: selftests: make __{s,u}64 format specifiers portable)
  }
  
  static void *locking_thread(void *arg)
@@@ -472,13 -490,12 +489,22 @@@ static void retry_copy_page(int ufd, st
  				     offset);
  	if (ioctl(ufd, UFFDIO_COPY, uffdio_copy)) {
  		/* real retval in ufdio_copy.copy */
++<<<<<<< HEAD
 +		if (uffdio_copy->copy != -EEXIST)
 +			fprintf(stderr, "UFFDIO_COPY retry error %Ld\n",
 +				uffdio_copy->copy), exit(1);
 +	} else {
 +		fprintf(stderr,	"UFFDIO_COPY retry unexpected %Ld\n",
 +			uffdio_copy->copy), exit(1);
 +	}
++=======
+ 		if (uffdio_copy->copy != -EEXIST) {
+ 			uffd_error(uffdio_copy->copy,
+ 				   "UFFDIO_COPY retry error");
+ 		}
+ 	} else
+ 		uffd_error(uffdio_copy->copy, "UFFDIO_COPY retry unexpected");
++>>>>>>> 77f962e7ae24 (userfaultfd: selftests: make __{s,u}64 format specifiers portable)
  }
  
  static int __copy_page(int ufd, unsigned long offset, bool retry)
@@@ -499,11 -517,9 +525,17 @@@
  	if (ioctl(ufd, UFFDIO_COPY, &uffdio_copy)) {
  		/* real retval in ufdio_copy.copy */
  		if (uffdio_copy.copy != -EEXIST)
++<<<<<<< HEAD
 +			fprintf(stderr, "UFFDIO_COPY error %Ld\n",
 +				uffdio_copy.copy), exit(1);
 +	} else if (uffdio_copy.copy != page_size) {
 +		fprintf(stderr, "UFFDIO_COPY unexpected copy %Ld\n",
 +			uffdio_copy.copy), exit(1);
++=======
+ 			uffd_error(uffdio_copy.copy, "UFFDIO_COPY error");
+ 	} else if (uffdio_copy.copy != page_size) {
+ 		uffd_error(uffdio_copy.copy, "UFFDIO_COPY unexpected copy");
++>>>>>>> 77f962e7ae24 (userfaultfd: selftests: make __{s,u}64 format specifiers portable)
  	} else {
  		if (test_uffdio_copy_eexist && retry) {
  			test_uffdio_copy_eexist = false;
@@@ -927,12 -960,13 +960,22 @@@ static void retry_uffdio_zeropage(int u
  				     uffdio_zeropage->range.len,
  				     offset);
  	if (ioctl(ufd, UFFDIO_ZEROPAGE, uffdio_zeropage)) {
++<<<<<<< HEAD
 +		if (uffdio_zeropage->zeropage != -EEXIST)
 +			fprintf(stderr, "UFFDIO_ZEROPAGE retry error %Ld\n",
 +				uffdio_zeropage->zeropage), exit(1);
 +	} else {
 +		fprintf(stderr, "UFFDIO_ZEROPAGE retry unexpected %Ld\n",
 +			uffdio_zeropage->zeropage), exit(1);
++=======
+ 		if (uffdio_zeropage->zeropage != -EEXIST) {
+ 			uffd_error(uffdio_zeropage->zeropage,
+ 				   "UFFDIO_ZEROPAGE retry error");
+ 		}
+ 	} else {
+ 		uffd_error(uffdio_zeropage->zeropage,
+ 			   "UFFDIO_ZEROPAGE retry unexpected");
++>>>>>>> 77f962e7ae24 (userfaultfd: selftests: make __{s,u}64 format specifiers portable)
  	}
  }
  
@@@ -954,22 -991,13 +999,32 @@@ static int __uffdio_zeropage(int ufd, u
  	if (ret) {
  		/* real retval in ufdio_zeropage.zeropage */
  		if (has_zeropage) {
++<<<<<<< HEAD
 +			if (uffdio_zeropage.zeropage == -EEXIST)
 +				fprintf(stderr, "UFFDIO_ZEROPAGE -EEXIST\n"),
 +					exit(1);
 +			else
 +				fprintf(stderr, "UFFDIO_ZEROPAGE error %Ld\n",
 +					uffdio_zeropage.zeropage), exit(1);
 +		} else {
 +			if (uffdio_zeropage.zeropage != -EINVAL)
 +				fprintf(stderr,
 +					"UFFDIO_ZEROPAGE not -EINVAL %Ld\n",
 +					uffdio_zeropage.zeropage), exit(1);
 +		}
 +	} else if (has_zeropage) {
 +		if (uffdio_zeropage.zeropage != page_size) {
 +			fprintf(stderr, "UFFDIO_ZEROPAGE unexpected %Ld\n",
 +				uffdio_zeropage.zeropage), exit(1);
++=======
+ 			uffd_error(res, "UFFDIO_ZEROPAGE %s",
+ 				   res == -EEXIST ? "-EEXIST" : "error");
+ 		} else if (res != -EINVAL)
+ 			uffd_error(res, "UFFDIO_ZEROPAGE not -EINVAL");
+ 	} else if (has_zeropage) {
+ 		if (res != page_size) {
+ 			uffd_error(res, "UFFDIO_ZEROPAGE unexpected");
++>>>>>>> 77f962e7ae24 (userfaultfd: selftests: make __{s,u}64 format specifiers portable)
  		} else {
  			if (test_uffdio_zeropage_eexist && retry) {
  				test_uffdio_zeropage_eexist = false;
@@@ -978,11 -1006,8 +1033,16 @@@
  			}
  			return 1;
  		}
++<<<<<<< HEAD
 +	} else {
 +		fprintf(stderr,
 +			"UFFDIO_ZEROPAGE succeeded %Ld\n",
 +			uffdio_zeropage.zeropage), exit(1);
 +	}
++=======
+ 	} else
+ 		uffd_error(res, "UFFDIO_ZEROPAGE succeeded");
++>>>>>>> 77f962e7ae24 (userfaultfd: selftests: make __{s,u}64 format specifiers portable)
  
  	return 0;
  }
* Unmerged path tools/testing/selftests/vm/userfaultfd.c
