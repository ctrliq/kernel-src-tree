device property: Use multi-connection matchers for single case

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-500.el8
commit-author Bjorn Andersson <bjorn.andersson@linaro.org>
commit bcd6a517aacae7e708a1be019a0c3ab9f4371c2b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-500.el8/bcd6a517.failed

The newly introduced helpers for searching for matches in the case of
multiple connections can be resused by the single-connection case, so do
this to save some duplication.

	Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
	Signed-off-by: Bjorn Andersson <bjorn.andersson@linaro.org>
Link: https://lore.kernel.org/r/20220422222351.1297276-3-bjorn.andersson@linaro.org
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit bcd6a517aacae7e708a1be019a0c3ab9f4371c2b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/base/property.c
diff --cc drivers/base/property.c
index 84d4ed7dac6a,47659764c8a1..000000000000
--- a/drivers/base/property.c
+++ b/drivers/base/property.c
@@@ -1291,3 -1192,142 +1291,145 @@@ const void *device_get_match_data(struc
  	return fwnode_call_ptr_op(dev_fwnode(dev), device_get_match_data, dev);
  }
  EXPORT_SYMBOL_GPL(device_get_match_data);
++<<<<<<< HEAD
++=======
+ 
+ static unsigned int fwnode_graph_devcon_matches(struct fwnode_handle *fwnode,
+ 						const char *con_id, void *data,
+ 						devcon_match_fn_t match,
+ 						void **matches,
+ 						unsigned int matches_len)
+ {
+ 	struct fwnode_handle *node;
+ 	struct fwnode_handle *ep;
+ 	unsigned int count = 0;
+ 	void *ret;
+ 
+ 	fwnode_graph_for_each_endpoint(fwnode, ep) {
+ 		if (matches && count >= matches_len) {
+ 			fwnode_handle_put(ep);
+ 			break;
+ 		}
+ 
+ 		node = fwnode_graph_get_remote_port_parent(ep);
+ 		if (!fwnode_device_is_available(node)) {
+ 			fwnode_handle_put(node);
+ 			continue;
+ 		}
+ 
+ 		ret = match(node, con_id, data);
+ 		fwnode_handle_put(node);
+ 		if (ret) {
+ 			if (matches)
+ 				matches[count] = ret;
+ 			count++;
+ 		}
+ 	}
+ 	return count;
+ }
+ 
+ static unsigned int fwnode_devcon_matches(struct fwnode_handle *fwnode,
+ 					  const char *con_id, void *data,
+ 					  devcon_match_fn_t match,
+ 					  void **matches,
+ 					  unsigned int matches_len)
+ {
+ 	struct fwnode_handle *node;
+ 	unsigned int count = 0;
+ 	unsigned int i;
+ 	void *ret;
+ 
+ 	for (i = 0; ; i++) {
+ 		if (matches && count >= matches_len)
+ 			break;
+ 
+ 		node = fwnode_find_reference(fwnode, con_id, i);
+ 		if (IS_ERR(node))
+ 			break;
+ 
+ 		ret = match(node, NULL, data);
+ 		fwnode_handle_put(node);
+ 		if (ret) {
+ 			if (matches)
+ 				matches[count] = ret;
+ 			count++;
+ 		}
+ 	}
+ 
+ 	return count;
+ }
+ 
+ /**
+  * fwnode_connection_find_match - Find connection from a device node
+  * @fwnode: Device node with the connection
+  * @con_id: Identifier for the connection
+  * @data: Data for the match function
+  * @match: Function to check and convert the connection description
+  *
+  * Find a connection with unique identifier @con_id between @fwnode and another
+  * device node. @match will be used to convert the connection description to
+  * data the caller is expecting to be returned.
+  */
+ void *fwnode_connection_find_match(struct fwnode_handle *fwnode,
+ 				   const char *con_id, void *data,
+ 				   devcon_match_fn_t match)
+ {
+ 	unsigned int count;
+ 	void *ret;
+ 
+ 	if (!fwnode || !match)
+ 		return NULL;
+ 
+ 	count = fwnode_graph_devcon_matches(fwnode, con_id, data, match, &ret, 1);
+ 	if (count)
+ 		return ret;
+ 
+ 	count = fwnode_devcon_matches(fwnode, con_id, data, match, &ret, 1);
+ 	return count ? ret : NULL;
+ }
+ EXPORT_SYMBOL_GPL(fwnode_connection_find_match);
+ 
+ /**
+  * fwnode_connection_find_matches - Find connections from a device node
+  * @fwnode: Device node with the connection
+  * @con_id: Identifier for the connection
+  * @data: Data for the match function
+  * @match: Function to check and convert the connection description
+  * @matches: (Optional) array of pointers to fill with matches
+  * @matches_len: Length of @matches
+  *
+  * Find up to @matches_len connections with unique identifier @con_id between
+  * @fwnode and other device nodes. @match will be used to convert the
+  * connection description to data the caller is expecting to be returned
+  * through the @matches array.
+  * If @matches is NULL @matches_len is ignored and the total number of resolved
+  * matches is returned.
+  *
+  * Return: Number of matches resolved, or negative errno.
+  */
+ int fwnode_connection_find_matches(struct fwnode_handle *fwnode,
+ 				   const char *con_id, void *data,
+ 				   devcon_match_fn_t match,
+ 				   void **matches, unsigned int matches_len)
+ {
+ 	unsigned int count_graph;
+ 	unsigned int count_ref;
+ 
+ 	if (!fwnode || !match)
+ 		return -EINVAL;
+ 
+ 	count_graph = fwnode_graph_devcon_matches(fwnode, con_id, data, match,
+ 						  matches, matches_len);
+ 
+ 	if (matches) {
+ 		matches += count_graph;
+ 		matches_len -= count_graph;
+ 	}
+ 
+ 	count_ref = fwnode_devcon_matches(fwnode, con_id, data, match,
+ 					  matches, matches_len);
+ 
+ 	return count_graph + count_ref;
+ }
+ EXPORT_SYMBOL_GPL(fwnode_connection_find_matches);
++>>>>>>> bcd6a517aaca (device property: Use multi-connection matchers for single case)
* Unmerged path drivers/base/property.c
