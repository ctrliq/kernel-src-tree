powerpc: add ISA v3.0 / v3.1 wait opcode macro

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-500.el8
commit-author Nicholas Piggin <npiggin@gmail.com>
commit dabeb572adf24bbd7cb21d1cc4d118bdf2c2ab74
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-500.el8/dabeb572.failed

The wait instruction encoding changed between ISA v2.07 and ISA v3.0.
In v3.1 the instruction gained a new field.

Update the PPC_WAIT macro to the current encoding. Rename the older
incompatible one with a _v203 suffix as it was introduced in v2.03
(the WC field was introduced in v2.07 but the kernel only uses WC=0).

	Reviewed-by: Segher Boessenkool <segher@kernel.crashing.org>
	Signed-off-by: Nicholas Piggin <npiggin@gmail.com>
	Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
Link: https://lore.kernel.org/r/20220920122259.363092-1-npiggin@gmail.com

(cherry picked from commit dabeb572adf24bbd7cb21d1cc4d118bdf2c2ab74)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/powerpc/include/asm/ppc-opcode.h
diff --cc arch/powerpc/include/asm/ppc-opcode.h
index db7eae3fc2a4,21e33e46f4b8..000000000000
--- a/arch/powerpc/include/asm/ppc-opcode.h
+++ b/arch/powerpc/include/asm/ppc-opcode.h
@@@ -493,67 -354,65 +494,79 @@@
  #define PPC_LO(v)	((v) & 0xffff)
  #define PPC_HI(v)	(((v) >> 16) & 0xffff)
  #define PPC_HA(v)	PPC_HI((v) + 0x8000)
 -#define PPC_HIGHER(v)	(((v) >> 32) & 0xffff)
 -#define PPC_HIGHEST(v)	(((v) >> 48) & 0xffff)
  
 -/* LI Field */
 -#define PPC_LI_MASK	0x03fffffc
 -#define PPC_LI(v)	((v) & PPC_LI_MASK)
 +/*
 + * Only use the larx hint bit on 64bit CPUs. e500v1/v2 based CPUs will treat a
 + * larx with EH set as an illegal instruction.
 + */
 +#ifdef CONFIG_PPC64
 +#define __PPC_EH(eh)	(((eh) & 0x1) << 0)
 +#else
 +#define __PPC_EH(eh)	0
 +#endif
  
  /* Base instruction encoding */
 -#define PPC_RAW_CP_ABORT		(0x7c00068c)
 +#define PPC_RAW_CP_ABORT		(PPC_INST_CP_ABORT)
  #define PPC_RAW_COPY(a, b)		(PPC_INST_COPY | ___PPC_RA(a) | ___PPC_RB(b))
 -#define PPC_RAW_DARN(t, l)		(0x7c0005e6 | ___PPC_RT(t) | (((l) & 0x3) << 16))
 -#define PPC_RAW_DCBAL(a, b)		(0x7c2005ec | __PPC_RA(a) | __PPC_RB(b))
 -#define PPC_RAW_DCBZL(a, b)		(0x7c2007ec | __PPC_RA(a) | __PPC_RB(b))
 -#define PPC_RAW_LQARX(t, a, b, eh)	(0x7c000228 | ___PPC_RT(t) | ___PPC_RA(a) | ___PPC_RB(b) | __PPC_EH(eh))
 -#define PPC_RAW_LDARX(t, a, b, eh)	(0x7c0000a8 | ___PPC_RT(t) | ___PPC_RA(a) | ___PPC_RB(b) | __PPC_EH(eh))
 -#define PPC_RAW_LWARX(t, a, b, eh)	(0x7c000028 | ___PPC_RT(t) | ___PPC_RA(a) | ___PPC_RB(b) | __PPC_EH(eh))
 -#define PPC_RAW_PHWSYNC			(0x7c8004ac)
 -#define PPC_RAW_PLWSYNC			(0x7ca004ac)
 -#define PPC_RAW_STQCX(t, a, b)		(0x7c00016d | ___PPC_RT(t) | ___PPC_RA(a) | ___PPC_RB(b))
 -#define PPC_RAW_MADDHD(t, a, b, c)	(0x10000030 | ___PPC_RT(t) | ___PPC_RA(a) | ___PPC_RB(b) | ___PPC_RC(c))
 -#define PPC_RAW_MADDHDU(t, a, b, c)	(0x10000031 | ___PPC_RT(t) | ___PPC_RA(a) | ___PPC_RB(b) | ___PPC_RC(c))
 -#define PPC_RAW_MADDLD(t, a, b, c)	(0x10000033 | ___PPC_RT(t) | ___PPC_RA(a) | ___PPC_RB(b) | ___PPC_RC(c))
 -#define PPC_RAW_MSGSND(b)		(0x7c00019c | ___PPC_RB(b))
 -#define PPC_RAW_MSGSYNC			(0x7c0006ec)
 -#define PPC_RAW_MSGCLR(b)		(0x7c0001dc | ___PPC_RB(b))
 -#define PPC_RAW_MSGSNDP(b)		(0x7c00011c | ___PPC_RB(b))
 -#define PPC_RAW_MSGCLRP(b)		(0x7c00015c | ___PPC_RB(b))
 -#define PPC_RAW_PASTE(a, b)		(0x7c20070d | ___PPC_RA(a) | ___PPC_RB(b))
 +#define PPC_RAW_DARN(t, l)		(PPC_INST_DARN | ___PPC_RT(t) | (((l) & 0x3) << 16))
 +#define PPC_RAW_DCBAL(a, b)		(PPC_INST_DCBAL | __PPC_RA(a) | __PPC_RB(b))
 +#define PPC_RAW_DCBZL(a, b)		(PPC_INST_DCBZL | __PPC_RA(a) | __PPC_RB(b))
 +#define PPC_RAW_LQARX(t, a, b, eh)	(PPC_INST_LQARX | ___PPC_RT(t) | ___PPC_RA(a) | ___PPC_RB(b) | __PPC_EH(eh))
 +#define PPC_RAW_LDARX(t, a, b, eh)	(PPC_INST_LDARX | ___PPC_RT(t) | ___PPC_RA(a) | ___PPC_RB(b) | __PPC_EH(eh))
 +#define PPC_RAW_LWARX(t, a, b, eh)	(PPC_INST_LWARX | ___PPC_RT(t) | ___PPC_RA(a) | ___PPC_RB(b) | __PPC_EH(eh))
 +#define PPC_RAW_PHWSYNC			(PPC_INST_PHWSYNC)
 +#define PPC_RAW_PLWSYNC			(PPC_INST_PLWSYNC)
 +#define PPC_RAW_STQCX(t, a, b)		(PPC_INST_STQCX | ___PPC_RT(t) | ___PPC_RA(a) | ___PPC_RB(b))
 +#define PPC_RAW_MADDHD(t, a, b, c)	(PPC_INST_MADDHD | ___PPC_RT(t) | ___PPC_RA(a) | ___PPC_RB(b) | ___PPC_RC(c))
 +#define PPC_RAW_MADDHDU(t, a, b, c)	(PPC_INST_MADDHDU | ___PPC_RT(t) | ___PPC_RA(a) | ___PPC_RB(b) | ___PPC_RC(c))
 +#define PPC_RAW_MADDLD(t, a, b, c)	(PPC_INST_MADDLD | ___PPC_RT(t) | ___PPC_RA(a) | ___PPC_RB(b) | ___PPC_RC(c))
 +#define PPC_RAW_MSGSND(b)		(PPC_INST_MSGSND | ___PPC_RB(b))
 +#define PPC_RAW_MSGSYNC			(PPC_INST_MSGSYNC)
 +#define PPC_RAW_MSGCLR(b)		(PPC_INST_MSGCLR | ___PPC_RB(b))
 +#define PPC_RAW_MSGSNDP(b)		(PPC_INST_MSGSNDP | ___PPC_RB(b))
 +#define PPC_RAW_MSGCLRP(b)		(PPC_INST_MSGCLRP | ___PPC_RB(b))
 +#define PPC_RAW_PASTE(a, b)		(PPC_INST_PASTE | ___PPC_RA(a) | ___PPC_RB(b))
  #define PPC_RAW_POPCNTB(a, s)		(PPC_INST_POPCNTB | __PPC_RA(a) | __PPC_RS(s))
++<<<<<<< HEAD
 +#define PPC_RAW_POPCNTD(a, s)		(PPC_INST_POPCNTD | __PPC_RA(a) | __PPC_RS(s))
 +#define PPC_RAW_POPCNTW(a, s)		(PPC_INST_POPCNTW | __PPC_RA(a) | __PPC_RS(s))
 +#define PPC_RAW_RFCI			(PPC_INST_RFCI)
 +#define PPC_RAW_RFDI			(PPC_INST_RFDI)
 +#define PPC_RAW_RFMCI			(PPC_INST_RFMCI)
 +#define PPC_RAW_TLBILX(t, a, b)		(PPC_INST_TLBILX | __PPC_T_TLB(t) | __PPC_RA0(a) | __PPC_RB(b))
 +#define PPC_RAW_WAIT(w)			(PPC_INST_WAIT | __PPC_WC(w))
 +#define PPC_RAW_TLBIE(lp, a)		(PPC_INST_TLBIE | ___PPC_RB(a) | ___PPC_RS(lp))
++=======
+ #define PPC_RAW_POPCNTD(a, s)		(0x7c0003f4 | __PPC_RA(a) | __PPC_RS(s))
+ #define PPC_RAW_POPCNTW(a, s)		(0x7c0002f4 | __PPC_RA(a) | __PPC_RS(s))
+ #define PPC_RAW_RFCI			(0x4c000066)
+ #define PPC_RAW_RFDI			(0x4c00004e)
+ #define PPC_RAW_RFMCI			(0x4c00004c)
+ #define PPC_RAW_TLBILX(t, a, b)		(0x7c000024 | __PPC_T_TLB(t) | 	__PPC_RA0(a) | __PPC_RB(b))
+ #define PPC_RAW_WAIT_v203		(0x7c00007c)
+ #define PPC_RAW_WAIT(w, p)		(0x7c00003c | __PPC_WC(w) | __PPC_PL(p))
+ #define PPC_RAW_TLBIE(lp, a)		(0x7c000264 | ___PPC_RB(a) | ___PPC_RS(lp))
++>>>>>>> dabeb572adf2 (powerpc: add ISA v3.0 / v3.1 wait opcode macro)
  #define PPC_RAW_TLBIE_5(rb, rs, ric, prs, r) \
 -	(0x7c000264 | ___PPC_RB(rb) | ___PPC_RS(rs) | ___PPC_RIC(ric) | ___PPC_PRS(prs) | ___PPC_R(r))
 +	(PPC_INST_TLBIE | ___PPC_RB(rb) | ___PPC_RS(rs) | ___PPC_RIC(ric) | ___PPC_PRS(prs) | ___PPC_R(r))
  #define PPC_RAW_TLBIEL(rb, rs, ric, prs, r) \
 -	(0x7c000224 | ___PPC_RB(rb) | ___PPC_RS(rs) | ___PPC_RIC(ric) | ___PPC_PRS(prs) | ___PPC_R(r))
 -#define PPC_RAW_TLBIEL_v205(rb, l)	(0x7c000224 | ___PPC_RB(rb) | (l << 21))
 -#define PPC_RAW_TLBSRX_DOT(a, b)	(0x7c0006a5 | __PPC_RA0(a) | __PPC_RB(b))
 -#define PPC_RAW_TLBIVAX(a, b)		(0x7c000624 | __PPC_RA0(a) | __PPC_RB(b))
 -#define PPC_RAW_ERATWE(s, a, w)		(0x7c0001a6 | __PPC_RS(s) | __PPC_RA(a) | __PPC_WS(w))
 -#define PPC_RAW_ERATRE(s, a, w)		(0x7c000166 | __PPC_RS(s) | __PPC_RA(a) | __PPC_WS(w))
 -#define PPC_RAW_ERATILX(t, a, b)	(0x7c000066 | __PPC_T_TLB(t) | __PPC_RA0(a) | __PPC_RB(b))
 -#define PPC_RAW_ERATIVAX(s, a, b)	(0x7c000666 | __PPC_RS(s) | __PPC_RA0(a) | __PPC_RB(b))
 -#define PPC_RAW_ERATSX(t, a, w)		(0x7c000126 | __PPC_RS(t) | __PPC_RA0(a) | __PPC_RB(b))
 -#define PPC_RAW_ERATSX_DOT(t, a, w)	(0x7c000127 | __PPC_RS(t) | __PPC_RA0(a) | __PPC_RB(b))
 -#define PPC_RAW_SLBFEE_DOT(t, b)	(0x7c0007a7 | __PPC_RT(t) | __PPC_RB(b))
 -#define __PPC_RAW_SLBFEE_DOT(t, b)	(0x7c0007a7 | ___PPC_RT(t) | ___PPC_RB(b))
 -#define PPC_RAW_ICBT(c, a, b)		(0x7c00002c | __PPC_CT(c) | __PPC_RA0(a) | __PPC_RB(b))
 -#define PPC_RAW_LBZCIX(t, a, b)		(0x7c0006aa | __PPC_RT(t) | __PPC_RA(a) | __PPC_RB(b))
 -#define PPC_RAW_STBCIX(s, a, b)		(0x7c0007aa | __PPC_RS(s) | __PPC_RA(a) | __PPC_RB(b))
 -#define PPC_RAW_DCBFPS(a, b)		(0x7c0000ac | ___PPC_RA(a) | ___PPC_RB(b) | (4 << 21))
 -#define PPC_RAW_DCBSTPS(a, b)		(0x7c0000ac | ___PPC_RA(a) | ___PPC_RB(b) | (6 << 21))
 -#define PPC_RAW_SC()			(0x44000002)
 +	(PPC_INST_TLBIEL | ___PPC_RB(rb) | ___PPC_RS(rs) | ___PPC_RIC(ric) | ___PPC_PRS(prs) | ___PPC_R(r))
 +#define PPC_RAW_TLBSRX_DOT(a, b)	(PPC_INST_TLBSRX_DOT | __PPC_RA0(a) | __PPC_RB(b))
 +#define PPC_RAW_TLBIVAX(a, b)		(PPC_INST_TLBIVAX | __PPC_RA0(a) | __PPC_RB(b))
 +#define PPC_RAW_ERATWE(s, a, w)		(PPC_INST_ERATWE | __PPC_RS(s) | __PPC_RA(a) | __PPC_WS(w))
 +#define PPC_RAW_ERATRE(s, a, w)		(PPC_INST_ERATRE | __PPC_RS(s) | __PPC_RA(a) | __PPC_WS(w))
 +#define PPC_RAW_ERATILX(t, a, b)	(PPC_INST_ERATILX | __PPC_T_TLB(t) | __PPC_RA0(a) | __PPC_RB(b))
 +#define PPC_RAW_ERATIVAX(s, a, b)	(PPC_INST_ERATIVAX | __PPC_RS(s) | __PPC_RA0(a) | __PPC_RB(b))
 +#define PPC_RAW_ERATSX(t, a, w)		(PPC_INST_ERATSX | __PPC_RS(t) | __PPC_RA0(a) | __PPC_RB(b))
 +#define PPC_RAW_ERATSX_DOT(t, a, w)	(PPC_INST_ERATSX_DOT | __PPC_RS(t) | __PPC_RA0(a) | __PPC_RB(b))
 +#define PPC_RAW_SLBFEE_DOT(t, b)	(PPC_INST_SLBFEE | __PPC_RT(t) | __PPC_RB(b))
 +#define __PPC_RAW_SLBFEE_DOT(t, b)	(PPC_INST_SLBFEE | ___PPC_RT(t) | ___PPC_RB(b))
 +#define PPC_RAW_ICBT(c, a, b)		(PPC_INST_ICBT | __PPC_CT(c) | __PPC_RA0(a) | __PPC_RB(b))
 +#define PPC_RAW_LBZCIX(t, a, b)		(PPC_INST_LBZCIX | __PPC_RT(t) | __PPC_RA(a) | __PPC_RB(b))
 +#define PPC_RAW_STBCIX(s, a, b)		(PPC_INST_STBCIX | __PPC_RS(s) | __PPC_RA(a) | __PPC_RB(b))
 +#define PPC_RAW_DCBFPS(a, b)		(PPC_INST_DCBF | ___PPC_RA(a) | ___PPC_RB(b) | (4 << 21))
 +#define PPC_RAW_DCBSTPS(a, b)		(PPC_INST_DCBF | ___PPC_RA(a) | ___PPC_RB(b) | (6 << 21))
 +
  #define PPC_RAW_SYNC()			(0x7c0004ac)
  #define PPC_RAW_ISYNC()			(0x4c00012c)
  
@@@ -759,117 -608,83 +772,125 @@@
  #define PPC_TLBILX_ALL(a, b)	PPC_TLBILX(0, a, b)
  #define PPC_TLBILX_PID(a, b)	PPC_TLBILX(1, a, b)
  #define PPC_TLBILX_VA(a, b)	PPC_TLBILX(3, a, b)
++<<<<<<< HEAD
 +#define PPC_WAIT(w)		stringify_in_c(.long PPC_INST_WAIT | \
 +					__PPC_WC(w))
 +#define PPC_TLBIE(lp,a) 	stringify_in_c(.long PPC_INST_TLBIE | \
 +					       ___PPC_RB(a) | ___PPC_RS(lp))
 +#define	PPC_TLBIE_5(rb,rs,ric,prs,r) \
 +				stringify_in_c(.long PPC_INST_TLBIE | \
 +					___PPC_RB(rb) | ___PPC_RS(rs) | \
 +					___PPC_RIC(ric) | ___PPC_PRS(prs) | \
 +					___PPC_R(r))
++=======
+ #define PPC_WAIT_v203		stringify_in_c(.long PPC_RAW_WAIT_v203)
+ #define PPC_WAIT(w, p)		stringify_in_c(.long PPC_RAW_WAIT(w, p))
+ #define PPC_TLBIE(lp, a) 	stringify_in_c(.long PPC_RAW_TLBIE(lp, a))
+ #define	PPC_TLBIE_5(rb, rs, ric, prs, r) \
+ 				stringify_in_c(.long PPC_RAW_TLBIE_5(rb, rs, ric, prs, r))
++>>>>>>> dabeb572adf2 (powerpc: add ISA v3.0 / v3.1 wait opcode macro)
  #define	PPC_TLBIEL(rb,rs,ric,prs,r) \
 -				stringify_in_c(.long PPC_RAW_TLBIEL(rb, rs, ric, prs, r))
 -#define PPC_TLBIEL_v205(rb, l)	stringify_in_c(.long PPC_RAW_TLBIEL_v205(rb, l))
 -#define PPC_TLBSRX_DOT(a, b)	stringify_in_c(.long PPC_RAW_TLBSRX_DOT(a, b))
 -#define PPC_TLBIVAX(a, b)	stringify_in_c(.long PPC_RAW_TLBIVAX(a, b))
 -
 -#define PPC_ERATWE(s, a, w)	stringify_in_c(.long PPC_RAW_ERATWE(s, a, w))
 -#define PPC_ERATRE(s, a, w)	stringify_in_c(.long PPC_RAW_ERATRE(a, a, w))
 -#define PPC_ERATILX(t, a, b)	stringify_in_c(.long PPC_RAW_ERATILX(t, a, b))
 -#define PPC_ERATIVAX(s, a, b)	stringify_in_c(.long PPC_RAW_ERATIVAX(s, a, b))
 -#define PPC_ERATSX(t, a, w)	stringify_in_c(.long PPC_RAW_ERATSX(t, a, w))
 -#define PPC_ERATSX_DOT(t, a, w)	stringify_in_c(.long PPC_RAW_ERATSX_DOT(t, a, w))
 -#define PPC_SLBFEE_DOT(t, b)	stringify_in_c(.long PPC_RAW_SLBFEE_DOT(t, b))
 -#define __PPC_SLBFEE_DOT(t, b)	stringify_in_c(.long __PPC_RAW_SLBFEE_DOT(t, b))
 -#define PPC_ICBT(c, a, b)	stringify_in_c(.long PPC_RAW_ICBT(c, a, b))
 +				stringify_in_c(.long PPC_INST_TLBIEL | \
 +					___PPC_RB(rb) | ___PPC_RS(rs) | \
 +					___PPC_RIC(ric) | ___PPC_PRS(prs) | \
 +					___PPC_R(r))
 +#define PPC_TLBSRX_DOT(a,b)	stringify_in_c(.long PPC_INST_TLBSRX_DOT | \
 +					__PPC_RA0(a) | __PPC_RB(b))
 +#define PPC_TLBIVAX(a,b)	stringify_in_c(.long PPC_INST_TLBIVAX | \
 +					__PPC_RA0(a) | __PPC_RB(b))
 +
 +#define PPC_ERATWE(s, a, w)	stringify_in_c(.long PPC_INST_ERATWE | \
 +					__PPC_RS(s) | __PPC_RA(a) | __PPC_WS(w))
 +#define PPC_ERATRE(s, a, w)	stringify_in_c(.long PPC_INST_ERATRE | \
 +					__PPC_RS(s) | __PPC_RA(a) | __PPC_WS(w))
 +#define PPC_ERATILX(t, a, b)	stringify_in_c(.long PPC_INST_ERATILX | \
 +					__PPC_T_TLB(t) | __PPC_RA0(a) | \
 +					__PPC_RB(b))
 +#define PPC_ERATIVAX(s, a, b)	stringify_in_c(.long PPC_INST_ERATIVAX | \
 +					__PPC_RS(s) | __PPC_RA0(a) | __PPC_RB(b))
 +#define PPC_ERATSX(t, a, w)	stringify_in_c(.long PPC_INST_ERATSX | \
 +					__PPC_RS(t) | __PPC_RA0(a) | __PPC_RB(b))
 +#define PPC_ERATSX_DOT(t, a, w)	stringify_in_c(.long PPC_INST_ERATSX_DOT | \
 +					__PPC_RS(t) | __PPC_RA0(a) | __PPC_RB(b))
 +#define PPC_SLBFEE_DOT(t, b)	stringify_in_c(.long PPC_INST_SLBFEE | \
 +					__PPC_RT(t) | __PPC_RB(b))
 +#define PPC_ICBT(c,a,b)		stringify_in_c(.long PPC_INST_ICBT | \
 +				       __PPC_CT(c) | __PPC_RA0(a) | __PPC_RB(b))
  /* PASemi instructions */
 -#define LBZCIX(t, a, b)		stringify_in_c(.long PPC_RAW_LBZCIX(t, a, b))
 -#define STBCIX(s, a, b)		stringify_in_c(.long PPC_RAW_STBCIX(s, a, b))
 -#define PPC_DCBFPS(a, b)	stringify_in_c(.long PPC_RAW_DCBFPS(a, b))
 -#define PPC_DCBSTPS(a, b)	stringify_in_c(.long PPC_RAW_DCBSTPS(a, b))
 -#define PPC_PHWSYNC		stringify_in_c(.long PPC_RAW_PHWSYNC)
 -#define PPC_PLWSYNC		stringify_in_c(.long PPC_RAW_PLWSYNC)
 -#define STXVD2X(s, a, b)	stringify_in_c(.long PPC_RAW_STXVD2X(s, a, b))
 -#define LXVD2X(s, a, b)		stringify_in_c(.long PPC_RAW_LXVD2X(s, a, b))
 -#define MFVRD(a, t)		stringify_in_c(.long PPC_RAW_MFVRD(a, t))
 -#define MTVRD(t, a)		stringify_in_c(.long PPC_RAW_MTVRD(t, a))
 -#define VPMSUMW(t, a, b)	stringify_in_c(.long PPC_RAW_VPMSUMW(t, a, b))
 -#define VPMSUMD(t, a, b)	stringify_in_c(.long PPC_RAW_VPMSUMD(t, a, b))
 -#define XXLOR(t, a, b)		stringify_in_c(.long PPC_RAW_XXLOR(t, a, b))
 -#define XXSWAPD(t, a)		stringify_in_c(.long PPC_RAW_XXSWAPD(t, a))
 -#define XVCPSGNDP(t, a, b)	stringify_in_c(.long (PPC_RAW_XVCPSGNDP(t, a, b)))
 +#define LBZCIX(t,a,b)		stringify_in_c(.long PPC_INST_LBZCIX | \
 +				       __PPC_RT(t) | __PPC_RA(a) | __PPC_RB(b))
 +#define STBCIX(s,a,b)		stringify_in_c(.long PPC_INST_STBCIX | \
 +				       __PPC_RS(s) | __PPC_RA(a) | __PPC_RB(b))
 +
 +#define	PPC_DCBFPS(a, b)	stringify_in_c(.long PPC_INST_DCBF |	\
 +				       ___PPC_RA(a) | ___PPC_RB(b) | (4 << 21))
 +#define	PPC_DCBSTPS(a, b)	stringify_in_c(.long PPC_INST_DCBF |	\
 +				       ___PPC_RA(a) | ___PPC_RB(b) | (6 << 21))
 +
 +#define	PPC_PHWSYNC		stringify_in_c(.long PPC_INST_PHWSYNC)
 +#define	PPC_PLWSYNC		stringify_in_c(.long PPC_INST_PLWSYNC)
 +
 +#define STXVD2X(s, a, b)	stringify_in_c(.long PPC_INST_STXVD2X | \
 +					       VSX_XX1((s), a, b))
 +#define LXVD2X(s, a, b)		stringify_in_c(.long PPC_INST_LXVD2X | \
 +					       VSX_XX1((s), a, b))
 +#define MFVRD(a, t)		stringify_in_c(.long PPC_INST_MFVSRD | \
 +					       VSX_XX1((t)+32, a, R0))
 +#define MTVRD(t, a)		stringify_in_c(.long PPC_INST_MTVSRD | \
 +					       VSX_XX1((t)+32, a, R0))
 +#define VPMSUMW(t, a, b)	stringify_in_c(.long PPC_INST_VPMSUMW | \
 +					       VSX_XX3((t), a, b))
 +#define VPMSUMD(t, a, b)	stringify_in_c(.long PPC_INST_VPMSUMD | \
 +					       VSX_XX3((t), a, b))
 +#define XXLOR(t, a, b)		stringify_in_c(.long PPC_INST_XXLOR | \
 +					       VSX_XX3((t), a, b))
 +#define XXSWAPD(t, a)		stringify_in_c(.long PPC_INST_XXSWAPD | \
 +					       VSX_XX3((t), a, a))
 +#define XVCPSGNDP(t, a, b)	stringify_in_c(.long (PPC_INST_XVCPSGNDP | \
 +					       VSX_XX3((t), (a), (b))))
  
  #define VPERMXOR(vrt, vra, vrb, vrc)				\
 -	stringify_in_c(.long (PPC_RAW_VPERMXOR(vrt, vra, vrb, vrc)))
 +	stringify_in_c(.long (PPC_INST_VPERMXOR |		\
 +			      ___PPC_RT(vrt) | ___PPC_RA(vra) | \
 +			      ___PPC_RB(vrb) | (((vrc) & 0x1f) << 6)))
  
 -#define PPC_NAP			stringify_in_c(.long PPC_RAW_NAP)
 -#define PPC_SLEEP		stringify_in_c(.long PPC_RAW_SLEEP)
 -#define PPC_WINKLE		stringify_in_c(.long PPC_RAW_WINKLE)
 +#define PPC_NAP			stringify_in_c(.long PPC_INST_NAP)
 +#define PPC_SLEEP		stringify_in_c(.long PPC_INST_SLEEP)
 +#define PPC_WINKLE		stringify_in_c(.long PPC_INST_WINKLE)
  
 -#define PPC_STOP		stringify_in_c(.long PPC_RAW_STOP)
 +#define PPC_STOP		stringify_in_c(.long PPC_INST_STOP)
  
  /* BHRB instructions */
 -#define PPC_CLRBHRB		stringify_in_c(.long PPC_RAW_CLRBHRB)
 -#define PPC_MFBHRBE(r, n)	stringify_in_c(.long PPC_RAW_MFBHRBE(r, n))
 +#define PPC_CLRBHRB		stringify_in_c(.long PPC_INST_CLRBHRB)
 +#define PPC_MFBHRBE(r, n)	stringify_in_c(.long PPC_INST_BHRBE | \
 +						__PPC_RT(r) | \
 +							(((n) & 0x3ff) << 11))
  
  /* Transactional memory instructions */
 -#define TRECHKPT		stringify_in_c(.long PPC_RAW_TRECHKPT)
 -#define TRECLAIM(r)		stringify_in_c(.long PPC_RAW_TRECLAIM(r))
 -#define TABORT(r)		stringify_in_c(.long PPC_RAW_TABORT(r))
 +#define TRECHKPT		stringify_in_c(.long PPC_INST_TRECHKPT)
 +#define TRECLAIM(r)		stringify_in_c(.long PPC_INST_TRECLAIM \
 +					       | __PPC_RA(r))
 +#define TABORT(r)		stringify_in_c(.long PPC_INST_TABORT \
 +					       | __PPC_RA(r))
  
  /* book3e thread control instructions */
 -#define MTTMR(tmr, r)		stringify_in_c(.long PPC_RAW_MTTMR(tmr, r))
 -#define MFTMR(tmr, r)		stringify_in_c(.long PPC_RAW_MFTMR(tmr, r))
 +#define MTTMR(tmr, r)		stringify_in_c(.long PPC_INST_MTTMR | \
 +					       TMRN(tmr) | ___PPC_RS(r))
 +#define MFTMR(tmr, r)		stringify_in_c(.long PPC_INST_MFTMR | \
 +					       TMRN(tmr) | ___PPC_RT(r))
  
  /* Coprocessor instructions */
 -#define PPC_ICSWX(s, a, b)	stringify_in_c(.long PPC_RAW_ICSWX(s, a, b))
 -#define PPC_ICSWEPX(s, a, b)	stringify_in_c(.long PPC_RAW_ICSWEPX(s, a, b))
 -
 -#define PPC_SLBIA(IH)	stringify_in_c(.long PPC_RAW_SLBIA(IH))
 -
 -/*
 - * These may only be used on ISA v3.0 or later (aka. CPU_FTR_ARCH_300, radix
 - * implies CPU_FTR_ARCH_300). USER/GUEST invalidates may only be used by radix
 - * mode (on HPT these would also invalidate various SLBEs which may not be
 - * desired).
 - */
 -#define PPC_ISA_3_0_INVALIDATE_ERAT	PPC_SLBIA(7)
 -#define PPC_RADIX_INVALIDATE_ERAT_USER	PPC_SLBIA(3)
 -#define PPC_RADIX_INVALIDATE_ERAT_GUEST	PPC_SLBIA(6)
 -
 -#define VCMPEQUD_RC(vrt, vra, vrb)	stringify_in_c(.long PPC_RAW_VCMPEQUD_RC(vrt, vra, vrb))
 -
 -#define VCMPEQUB_RC(vrt, vra, vrb)	stringify_in_c(.long PPC_RAW_VCMPEQUB_RC(vrt, vra, vrb))
 +#define PPC_ICSWX(s, a, b)	stringify_in_c(.long PPC_INST_ICSWX |	\
 +					       ___PPC_RS(s) |		\
 +					       ___PPC_RA(a) |		\
 +					       ___PPC_RB(b))
 +#define PPC_ICSWEPX(s, a, b)	stringify_in_c(.long PPC_INST_ICSWEPX | \
 +					       ___PPC_RS(s) |		\
 +					       ___PPC_RA(a) |		\
 +					       ___PPC_RB(b))
 +
 +#define PPC_SLBIA(IH)	stringify_in_c(.long PPC_INST_SLBIA | \
 +				       ((IH & 0x7) << 21))
 +#define PPC_INVALIDATE_ERAT	PPC_SLBIA(7)
  
  #endif /* _ASM_POWERPC_PPC_OPCODE_H */
* Unmerged path arch/powerpc/include/asm/ppc-opcode.h
diff --git a/arch/powerpc/kernel/idle_book3e.S b/arch/powerpc/kernel/idle_book3e.S
index 4e0d94d02030..1d95186fbba9 100644
--- a/arch/powerpc/kernel/idle_book3e.S
+++ b/arch/powerpc/kernel/idle_book3e.S
@@ -81,7 +81,7 @@ _GLOBAL(\name)
 
 .macro BOOK3E_IDLE_LOOP
 1:
-	PPC_WAIT(0)
+	PPC_WAIT_v203
 	b	1b
 .endm
 
