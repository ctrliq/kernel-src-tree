KVM: arm64: selftests: Use FIELD_GET() to extract ID register fields

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-500.el8
commit-author Reiji Watanabe <reijiw@google.com>
commit 1a6182033f2d5c481aec1f8c1c26ebc649693d57
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-500.el8/1a618203.failed

Use FIELD_GET() macro to extract ID register fields for existing
aarch64 selftests code. No functional change intended.

	Signed-off-by: Reiji Watanabe <reijiw@google.com>
	Reviewed-by: Oliver Upton <oliver.upton@linux.dev>
	Signed-off-by: Marc Zyngier <maz@kernel.org>
Link: https://lore.kernel.org/r/20221020054202.2119018-2-reijiw@google.com
(cherry picked from commit 1a6182033f2d5c481aec1f8c1c26ebc649693d57)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/testing/selftests/kvm/aarch64/aarch32_id_regs.c
#	tools/testing/selftests/kvm/aarch64/debug-exceptions.c
diff --cc tools/testing/selftests/kvm/aarch64/debug-exceptions.c
index 63b2178210c4,3808d3d75055..000000000000
--- a/tools/testing/selftests/kvm/aarch64/debug-exceptions.c
+++ b/tools/testing/selftests/kvm/aarch64/debug-exceptions.c
@@@ -2,9 -2,8 +2,10 @@@
  #include <test_util.h>
  #include <kvm_util.h>
  #include <processor.h>
+ #include <linux/bitfield.h>
  
 +#define VCPU_ID 0
 +
  #define MDSCR_KDE	(1 << 13)
  #define MDSCR_MDE	(1 << 15)
  #define MDSCR_SS	(1 << 0)
@@@ -244,12 -284,13 +245,17 @@@ static int debug_version(struct kvm_vm 
  {
  	uint64_t id_aa64dfr0;
  
++<<<<<<< HEAD
 +	get_reg(vm, VCPU_ID, KVM_ARM64_SYS_REG(SYS_ID_AA64DFR0_EL1), &id_aa64dfr0);
 +	return id_aa64dfr0 & 0xf;
++=======
+ 	vcpu_get_reg(vcpu, KVM_ARM64_SYS_REG(SYS_ID_AA64DFR0_EL1), &id_aa64dfr0);
+ 	return FIELD_GET(ARM64_FEATURE_MASK(ID_AA64DFR0_DEBUGVER), id_aa64dfr0);
++>>>>>>> 1a6182033f2d (KVM: arm64: selftests: Use FIELD_GET() to extract ID register fields)
  }
  
 -static void test_guest_debug_exceptions(void)
 +int main(int argc, char *argv[])
  {
 -	struct kvm_vcpu *vcpu;
  	struct kvm_vm *vm;
  	struct ucall uc;
  	int stage;
* Unmerged path tools/testing/selftests/kvm/aarch64/aarch32_id_regs.c
* Unmerged path tools/testing/selftests/kvm/aarch64/aarch32_id_regs.c
* Unmerged path tools/testing/selftests/kvm/aarch64/debug-exceptions.c
diff --git a/tools/testing/selftests/kvm/lib/aarch64/processor.c b/tools/testing/selftests/kvm/lib/aarch64/processor.c
index 9343d82519b4..526dbe6b2306 100644
--- a/tools/testing/selftests/kvm/lib/aarch64/processor.c
+++ b/tools/testing/selftests/kvm/lib/aarch64/processor.c
@@ -12,6 +12,7 @@
 #include "kvm_util.h"
 #include "../kvm_util_internal.h"
 #include "processor.h"
+#include <linux/bitfield.h>
 
 #define DEFAULT_ARM64_GUEST_STACK_VADDR_MIN	0xac0000
 
@@ -483,9 +484,9 @@ void aarch64_get_supported_page_sizes(uint32_t ipa,
 	err = ioctl(vcpu_fd, KVM_GET_ONE_REG, &reg);
 	TEST_ASSERT(err == 0, "Can't get MMFR0");
 
-	*ps4k = ((val >> 28) & 0xf) != 0xf;
-	*ps64k = ((val >> 24) & 0xf) == 0;
-	*ps16k = ((val >> 20) & 0xf) != 0;
+	*ps4k = FIELD_GET(ARM64_FEATURE_MASK(ID_AA64MMFR0_TGRAN4), val) != 0xf;
+	*ps64k = FIELD_GET(ARM64_FEATURE_MASK(ID_AA64MMFR0_TGRAN64), val) == 0;
+	*ps16k = FIELD_GET(ARM64_FEATURE_MASK(ID_AA64MMFR0_TGRAN16), val) != 0;
 
 	close(vcpu_fd);
 	close(vm_fd);
