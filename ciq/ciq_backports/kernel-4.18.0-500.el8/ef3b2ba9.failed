perf intel-pt: Synthesize CFE (Control Flow Event) / EVD (Event Data) event

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-500.el8
commit-author Adrian Hunter <adrian.hunter@intel.com>
commit ef3b2ba9640d0e1e6991b8a5c0ddece2fc3e4d23
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-500.el8/ef3b2ba9.failed

Synthesize an attribute event and sample events for Intel PT Event Trace
events represented by CFE and EVD packets.

Committer notes:

Make 'struct perf_synth_intel_evd evd[]' evd[0] at the end of 'struct
perf_synth_intel_evt' as it is breaking the build with in many compilers
with (e.g. clang version 13.0.0 (Fedora 13.0.0-3.fc35)):

  util/intel-pt.c:2213:31: error: field 'cfe' with variable sized type 'struct perf_synth_intel_evt' not at the end of a struct or class is a GNU extension [-Werror,-Wgnu-variable-sized-type-not-at-end]
                  struct perf_synth_intel_evt cfe;
                                              ^

	Signed-off-by: Adrian Hunter <adrian.hunter@intel.com>
	Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
	Cc: Andi Kleen <ak@linux.intel.com>
	Cc: Jiri Olsa <jolsa@redhat.com>
Link: https://lore.kernel.org/r/20220124084201.2699795-15-adrian.hunter@intel.com
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit ef3b2ba9640d0e1e6991b8a5c0ddece2fc3e4d23)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/util/intel-pt.c
diff --cc tools/perf/util/intel-pt.c
index 4e3ff71a4217,1e07a3c03102..000000000000
--- a/tools/perf/util/intel-pt.c
+++ b/tools/perf/util/intel-pt.c
@@@ -2127,6 -2131,84 +2131,87 @@@ static int intel_pt_synth_pebs_sample(s
  	return intel_pt_deliver_synth_event(pt, event, &sample, sample_type);
  }
  
++<<<<<<< HEAD
++=======
+ static int intel_pt_synth_single_pebs_sample(struct intel_pt_queue *ptq)
+ {
+ 	struct intel_pt *pt = ptq->pt;
+ 	struct evsel *evsel = pt->pebs_evsel;
+ 	u64 id = evsel->core.id[0];
+ 
+ 	return intel_pt_do_synth_pebs_sample(ptq, evsel, id);
+ }
+ 
+ static int intel_pt_synth_pebs_sample(struct intel_pt_queue *ptq)
+ {
+ 	const struct intel_pt_blk_items *items = &ptq->state->items;
+ 	struct intel_pt_pebs_event *pe;
+ 	struct intel_pt *pt = ptq->pt;
+ 	int err = -EINVAL;
+ 	int hw_id;
+ 
+ 	if (!items->has_applicable_counters || !items->applicable_counters) {
+ 		if (!pt->single_pebs)
+ 			pr_err("PEBS-via-PT record with no applicable_counters\n");
+ 		return intel_pt_synth_single_pebs_sample(ptq);
+ 	}
+ 
+ 	for_each_set_bit(hw_id, (unsigned long *)&items->applicable_counters, INTEL_PT_MAX_PEBS) {
+ 		pe = &ptq->pebs[hw_id];
+ 		if (!pe->evsel) {
+ 			if (!pt->single_pebs)
+ 				pr_err("PEBS-via-PT record with no matching event, hw_id %d\n",
+ 				       hw_id);
+ 			return intel_pt_synth_single_pebs_sample(ptq);
+ 		}
+ 		err = intel_pt_do_synth_pebs_sample(ptq, pe->evsel, pe->id);
+ 		if (err)
+ 			return err;
+ 	}
+ 
+ 	return err;
+ }
+ 
+ static int intel_pt_synth_events_sample(struct intel_pt_queue *ptq)
+ {
+ 	struct intel_pt *pt = ptq->pt;
+ 	union perf_event *event = ptq->event_buf;
+ 	struct perf_sample sample = { .ip = 0, };
+ 	struct {
+ 		struct perf_synth_intel_evt cfe;
+ 		struct perf_synth_intel_evd evd[INTEL_PT_MAX_EVDS];
+ 	} raw;
+ 	int i;
+ 
+ 	if (intel_pt_skip_event(pt))
+ 		return 0;
+ 
+ 	intel_pt_prep_p_sample(pt, ptq, event, &sample);
+ 
+ 	sample.id        = ptq->pt->evt_id;
+ 	sample.stream_id = ptq->pt->evt_id;
+ 
+ 	raw.cfe.type     = ptq->state->cfe_type;
+ 	raw.cfe.reserved = 0;
+ 	raw.cfe.ip       = !!(ptq->state->flags & INTEL_PT_FUP_IP);
+ 	raw.cfe.vector   = ptq->state->cfe_vector;
+ 	raw.cfe.evd_cnt  = ptq->state->evd_cnt;
+ 
+ 	for (i = 0; i < ptq->state->evd_cnt; i++) {
+ 		raw.evd[i].et       = 0;
+ 		raw.evd[i].evd_type = ptq->state->evd[i].type;
+ 		raw.evd[i].payload  = ptq->state->evd[i].payload;
+ 	}
+ 
+ 	sample.raw_size = perf_synth__raw_size(raw) +
+ 			  ptq->state->evd_cnt * sizeof(struct perf_synth_intel_evd);
+ 	sample.raw_data = perf_synth__raw_data(&raw);
+ 
+ 	return intel_pt_deliver_synth_event(pt, event, &sample,
+ 					    pt->evt_sample_type);
+ }
+ 
++>>>>>>> ef3b2ba9640d (perf intel-pt: Synthesize CFE (Control Flow Event) / EVD (Event Data) event)
  static int intel_pt_synth_error(struct intel_pt *pt, int code, int cpu,
  				pid_t pid, pid_t tid, u64 ip, u64 timestamp)
  {
diff --git a/tools/perf/util/event.h b/tools/perf/util/event.h
index ade51e7e7135..910122ca8c12 100644
--- a/tools/perf/util/event.h
+++ b/tools/perf/util/event.h
@@ -308,7 +308,7 @@ struct perf_synth_intel_evt {
 		};
 		u32	cfe;
 	};
-	struct perf_synth_intel_evd evd[];
+	struct perf_synth_intel_evd evd[0];
 };
 
 struct perf_synth_intel_iflag_chg {
* Unmerged path tools/perf/util/intel-pt.c
