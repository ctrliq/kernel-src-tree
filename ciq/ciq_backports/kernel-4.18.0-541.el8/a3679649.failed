Bluetooth: HCI: Use skb_pull_data to parse LE Direct Advertising Report event

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-541.el8
commit-author Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
commit a3679649a19179813c3853b8bb397a801d9dd253
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-541.el8/a3679649.failed

This uses skb_pull_data to check the LE Direct Advertising Report
events received have the minimum required length.

	Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
	Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
(cherry picked from commit a3679649a19179813c3853b8bb397a801d9dd253)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/net/bluetooth/hci.h
diff --cc include/net/bluetooth/hci.h
index 9b77f2411740,4343f79bd02c..000000000000
--- a/include/net/bluetooth/hci.h
+++ b/include/net/bluetooth/hci.h
@@@ -2508,7 -2508,10 +2508,14 @@@ struct hci_ev_le_direct_adv_info 
  	__s8	 rssi;
  } __packed;
  
++<<<<<<< HEAD
 +#define HCI_EV_VENDOR			0xff
++=======
+ struct hci_ev_le_direct_adv_report {
+ 	__u8	 num;
+ 	struct hci_ev_le_direct_adv_info info[];
+ } __packed;
++>>>>>>> a3679649a191 (Bluetooth: HCI: Use skb_pull_data to parse LE Direct Advertising Report event)
  
  #define HCI_EV_LE_PHY_UPDATE_COMPLETE	0x0c
  struct hci_ev_le_phy_update_complete {
* Unmerged path include/net/bluetooth/hci.h
diff --git a/net/bluetooth/hci_event.c b/net/bluetooth/hci_event.c
index acbfe6a106c9..b1902f46a1b4 100644
--- a/net/bluetooth/hci_event.c
+++ b/net/bluetooth/hci_event.c
@@ -6850,19 +6850,31 @@ static void hci_le_remote_conn_param_req_evt(struct hci_dev *hdev,
 static void hci_le_direct_adv_report_evt(struct hci_dev *hdev,
 					 struct sk_buff *skb)
 {
-	u8 num_reports = skb->data[0];
-	struct hci_ev_le_direct_adv_info *ev = (void *)&skb->data[1];
+	struct hci_ev_le_direct_adv_report *ev;
+	int i;
+
+	ev = hci_le_ev_skb_pull(hdev, skb, HCI_EV_LE_DIRECT_ADV_REPORT,
+				sizeof(*ev));
+	if (!ev)
+		return;
 
-	if (!num_reports || skb->len < num_reports * sizeof(*ev) + 1)
+	if (!hci_le_ev_skb_pull(hdev, skb, HCI_EV_LE_DIRECT_ADV_REPORT,
+				flex_array_size(ev, info, ev->num)))
+		return;
+
+	if (!ev->num)
 		return;
 
 	hci_dev_lock(hdev);
 
-	for (; num_reports; num_reports--, ev++)
-		process_adv_report(hdev, ev->evt_type, &ev->bdaddr,
-				   ev->bdaddr_type, &ev->direct_addr,
-				   ev->direct_addr_type, ev->rssi, NULL, 0,
+	for (i = 0; i < ev->num; i++) {
+		struct hci_ev_le_direct_adv_info *info = &ev->info[i];
+
+		process_adv_report(hdev, info->type, &info->bdaddr,
+				   info->bdaddr_type, &info->direct_addr,
+				   info->direct_addr_type, info->rssi, NULL, 0,
 				   false);
+	}
 
 	hci_dev_unlock(hdev);
 }
