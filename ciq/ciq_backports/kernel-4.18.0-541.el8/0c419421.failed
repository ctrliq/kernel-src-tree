mxser: extract mxser_receive_chars_old

jira LE-1907
cve CVE-2023-6546
Rebuild_History Non-Buildable kernel-4.18.0-541.el8
commit-author Jiri Slaby <jslaby@suse.cz>
commit 0c4194218cf206405c39e9d3380886a627c0602c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-541.el8/0c419421.failed

	Signed-off-by: Jiri Slaby <jslaby@suse.cz>
Link: https://lore.kernel.org/r/20210618061516.662-17-jslaby@suse.cz
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit 0c4194218cf206405c39e9d3380886a627c0602c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/tty/mxser.c
diff --cc drivers/tty/mxser.c
index 399fb247a605,6b8f2b0e0726..000000000000
--- a/drivers/tty/mxser.c
+++ b/drivers/tty/mxser.c
@@@ -2187,54 -2055,55 +2187,96 @@@ static int mxser_rs_break(struct tty_st
  	return 0;
  }
  
 -static bool mxser_receive_chars_new(struct tty_struct *tty,
 -		struct mxser_port *port, u8 status, int *cnt)
 +static void mxser_receive_chars(struct tty_struct *tty,
 +				struct mxser_port *port, int *status)
  {
++<<<<<<< HEAD
 +	unsigned char ch, gdl;
++=======
+ 	enum mxser_must_hwid hwid = port->board->must_hwid;
+ 	u8 gdl;
+ 
+ 	if (hwid == MOXA_OTHER_UART)
+ 		return false;
+ 	if (status & UART_LSR_SPECIAL)
+ 		return false;
+ 	if (hwid == MOXA_MUST_MU860_HWID && (status & MOXA_MUST_LSR_RERR))
+ 		return false;
+ 	if (status & MOXA_MUST_LSR_RERR)
+ 		return false;
+ 
+ 	gdl = inb(port->ioaddr + MOXA_MUST_GDL_REGISTER);
+ 	if (hwid == MOXA_MUST_MU150_HWID)
+ 		gdl &= MOXA_MUST_GDL_MASK;
+ 
+ 	if (gdl >= tty->receive_room && !port->ldisc_stop_rx)
+ 		mxser_stoprx(tty);
+ 
+ 	while (gdl--) {
+ 		u8 ch = inb(port->ioaddr + UART_RX);
+ 		tty_insert_flip_char(&port->port, ch, 0);
+ 		(*cnt)++;
+ 	}
+ 
+ 	return true;
+ }
+ 
+ static u8 mxser_receive_chars_old(struct tty_struct *tty,
+ 		                struct mxser_port *port, u8 status, int *cnt)
+ {
+ 	enum mxser_must_hwid hwid = port->board->must_hwid;
+ 	int recv_room = tty->receive_room;
++>>>>>>> 0c4194218cf2 (mxser: extract mxser_receive_chars_old)
  	int ignored = 0;
- 	int cnt = 0;
- 	int recv_room;
  	int max = 256;
++<<<<<<< HEAD
 +
 +	recv_room = tty->receive_room;
 +	if (recv_room == 0 && !port->ldisc_stop_rx)
 +		mxser_stoprx(tty);
 +	if (port->board->chip_flag != MOXA_OTHER_UART) {
 +
 +		if (*status & UART_LSR_SPECIAL)
 +			goto intr_old;
 +		if (port->board->chip_flag == MOXA_MUST_MU860_HWID &&
 +				(*status & MOXA_MUST_LSR_RERR))
 +			goto intr_old;
 +		if (*status & MOXA_MUST_LSR_RERR)
 +			goto intr_old;
 +
 +		gdl = inb(port->ioaddr + MOXA_MUST_GDL_REGISTER);
 +
 +		if (port->board->chip_flag == MOXA_MUST_MU150_HWID)
 +			gdl &= MOXA_MUST_GDL_MASK;
 +		if (gdl >= recv_room) {
 +			if (!port->ldisc_stop_rx)
 +				mxser_stoprx(tty);
 +		}
 +		while (gdl--) {
 +			ch = inb(port->ioaddr + UART_RX);
 +			tty_insert_flip_char(&port->port, ch, 0);
 +			cnt++;
 +		}
 +		goto end_intr;
 +	}
 +intr_old:
++=======
+ 	u8 ch;
++>>>>>>> 0c4194218cf2 (mxser: extract mxser_receive_chars_old)
  
  	do {
  		if (max-- < 0)
  			break;
  
  		ch = inb(port->ioaddr + UART_RX);
++<<<<<<< HEAD
 +		if (port->board->chip_flag && (*status & UART_LSR_OE))
++=======
+ 		if (hwid && (status & UART_LSR_OE))
++>>>>>>> 0c4194218cf2 (mxser: extract mxser_receive_chars_old)
  			outb(0x23, port->ioaddr + UART_FCR);
 -		status &= port->read_status_mask;
 -		if (status & port->ignore_status_mask) {
 +		*status &= port->read_status_mask;
 +		if (*status & port->ignore_status_mask) {
  			if (++ignored > 100)
  				break;
  		} else {
@@@ -2268,13 -2137,26 +2310,30 @@@
  
  		}
  
++<<<<<<< HEAD
 +		if (port->board->chip_flag)
++=======
+ 		if (hwid)
++>>>>>>> 0c4194218cf2 (mxser: extract mxser_receive_chars_old)
  			break;
  
 -		status = inb(port->ioaddr + UART_LSR);
 -	} while (status & UART_LSR_DR);
 +		*status = inb(port->ioaddr + UART_LSR);
 +	} while (*status & UART_LSR_DR);
  
- end_intr:
+ 	return status;
+ }
+ 
+ static u8 mxser_receive_chars(struct tty_struct *tty,
+ 		struct mxser_port *port, u8 status)
+ {
+ 	int cnt = 0;
+ 
+ 	if (tty->receive_room == 0 && !port->ldisc_stop_rx)
+ 		mxser_stoprx(tty);
+ 
+ 	if (!mxser_receive_chars_new(tty, port, status, &cnt))
+ 		status = mxser_receive_chars_old(tty, port, status, &cnt);
+ 
  	mxvar_log.rxcnt[tty->index] += cnt;
  	port->mon_data.rxcnt += cnt;
  	port->mon_data.up_rxcnt += cnt;
* Unmerged path drivers/tty/mxser.c
