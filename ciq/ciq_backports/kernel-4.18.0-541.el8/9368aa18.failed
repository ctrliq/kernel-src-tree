APEI: GHES: correctly return NULL for ghes_get_devices()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-541.el8
commit-author Li Yang <leoyang.li@nxp.com>
commit 9368aa1882ac7178adcd936cee5f0899dbf76dc4
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-541.el8/9368aa18.failed

Since 315bada690e0 ("EDAC: Check for GHES preference in the
chipset-specific EDAC drivers"), vendor specific EDAC driver will not
probe correctly when CONFIG_ACPI_APEI_GHES is enabled but no GHES device
is present.  Make ghes_get_devices() return NULL when the GHES device
list is empty to fix the problem.

Fixes: 9057a3f7ac36 ("EDAC/ghes: Prepare to make ghes_edac a proper module")
	Signed-off-by: Li Yang <leoyang.li@nxp.com>
	Reviewed-by: Tony Luck <tony.luck@intel.com>
	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
(cherry picked from commit 9368aa1882ac7178adcd936cee5f0899dbf76dc4)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/acpi/apei/ghes.c
diff --cc drivers/acpi/apei/ghes.c
index 0b21f8827cc4,ef59d6ea16da..000000000000
--- a/drivers/acpi/apei/ghes.c
+++ b/drivers/acpi/apei/ghes.c
@@@ -1512,9 -1520,44 +1512,52 @@@ static int __init ghes_init(void
  		pr_info(GHES_PFX "APEI firmware first mode is enabled by APEI bit.\n");
  	else
  		pr_info(GHES_PFX "Failed to enable APEI firmware first mode.\n");
 +
 +	return 0;
 +err:
 +	return rc;
  }
++<<<<<<< HEAD
 +device_initcall(ghes_init);
++=======
+ 
+ /*
+  * Known x86 systems that prefer GHES error reporting:
+  */
+ static struct acpi_platform_list plat_list[] = {
+ 	{"HPE   ", "Server  ", 0, ACPI_SIG_FADT, all_versions},
+ 	{ } /* End */
+ };
+ 
+ struct list_head *ghes_get_devices(void)
+ {
+ 	int idx = -1;
+ 
+ 	if (IS_ENABLED(CONFIG_X86)) {
+ 		idx = acpi_match_platform_list(plat_list);
+ 		if (idx < 0) {
+ 			if (!ghes_edac_force_enable)
+ 				return NULL;
+ 
+ 			pr_warn_once("Force-loading ghes_edac on an unsupported platform. You're on your own!\n");
+ 		}
+ 	} else if (list_empty(&ghes_devs)) {
+ 		return NULL;
+ 	}
+ 
+ 	return &ghes_devs;
+ }
+ EXPORT_SYMBOL_GPL(ghes_get_devices);
+ 
+ void ghes_register_report_chain(struct notifier_block *nb)
+ {
+ 	atomic_notifier_chain_register(&ghes_report_chain, nb);
+ }
+ EXPORT_SYMBOL_GPL(ghes_register_report_chain);
+ 
+ void ghes_unregister_report_chain(struct notifier_block *nb)
+ {
+ 	atomic_notifier_chain_unregister(&ghes_report_chain, nb);
+ }
+ EXPORT_SYMBOL_GPL(ghes_unregister_report_chain);
++>>>>>>> 9368aa1882ac (APEI: GHES: correctly return NULL for ghes_get_devices())
* Unmerged path drivers/acpi/apei/ghes.c
