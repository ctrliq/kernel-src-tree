tty: n_gsm: initialize more members at gsm_alloc_mux()

jira LE-1907
cve CVE-2023-6546
Rebuild_History Non-Buildable kernel-4.18.0-541.el8
commit-author Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
commit 4bb1a53be85fcb1e24c14860e326a00cdd362c28
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-541.el8/4bb1a53b.failed

syzbot is reporting use of uninitialized spinlock at gsmld_write() [1], for
commit 32dd59f96924f45e ("tty: n_gsm: fix race condition in gsmld_write()")
allows accessing gsm->tx_lock before gsm_activate_mux() initializes it.

Since object initialization should be done right after allocation in order
to avoid accessing uninitialized memory, move initialization of
timer/work/waitqueue/spinlock from gsmld_open()/gsm_activate_mux() to
gsm_alloc_mux().

Link: https://syzkaller.appspot.com/bug?extid=cf155def4e717db68a12 [1]
Fixes: 32dd59f96924f45e ("tty: n_gsm: fix race condition in gsmld_write()")
	Reported-by: syzbot <syzbot+cf155def4e717db68a12@syzkaller.appspotmail.com>
	Tested-by: syzbot <syzbot+cf155def4e717db68a12@syzkaller.appspotmail.com>
	Cc: stable <stable@kernel.org>
	Acked-by: Jiri Slaby <jirislaby@kernel.org>
	Signed-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
Link: https://lore.kernel.org/r/2110618e-57f0-c1ce-b2ad-b6cacef3f60e@I-love.SAKURA.ne.jp
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit 4bb1a53be85fcb1e24c14860e326a00cdd362c28)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/tty/n_gsm.c
diff --cc drivers/tty/n_gsm.c
index 6376ba42b27e,d6598ca3640f..000000000000
--- a/drivers/tty/n_gsm.c
+++ b/drivers/tty/n_gsm.c
@@@ -2340,10 -2497,9 +2340,16 @@@ static int gsm_activate_mux(struct gsm_
  	struct gsm_dlci *dlci;
  	int ret;
  
++<<<<<<< HEAD
 +	timer_setup(&gsm->t2_timer, gsm_control_retransmit, 0);
 +	init_waitqueue_head(&gsm->event);
 +	spin_lock_init(&gsm->control_lock);
 +	spin_lock_init(&gsm->tx_lock);
++=======
+ 	dlci = gsm_dlci_alloc(gsm, 0);
+ 	if (dlci == NULL)
+ 		return -ENOMEM;
++>>>>>>> 4bb1a53be85f (tty: n_gsm: initialize more members at gsm_alloc_mux())
  
  	if (gsm->encoding == 0)
  		gsm->receive = gsm0_receive;
@@@ -2450,7 -2603,14 +2456,18 @@@ static struct gsm_mux *gsm_alloc_mux(vo
  	spin_lock_init(&gsm->lock);
  	mutex_init(&gsm->mutex);
  	kref_init(&gsm->ref);
++<<<<<<< HEAD
 +	INIT_LIST_HEAD(&gsm->tx_list);
++=======
+ 	INIT_LIST_HEAD(&gsm->tx_ctrl_list);
+ 	INIT_LIST_HEAD(&gsm->tx_data_list);
+ 	timer_setup(&gsm->kick_timer, gsm_kick_timer, 0);
+ 	timer_setup(&gsm->t2_timer, gsm_control_retransmit, 0);
+ 	INIT_WORK(&gsm->tx_work, gsmld_write_task);
+ 	init_waitqueue_head(&gsm->event);
+ 	spin_lock_init(&gsm->control_lock);
+ 	spin_lock_init(&gsm->tx_lock);
++>>>>>>> 4bb1a53be85f (tty: n_gsm: initialize more members at gsm_alloc_mux())
  
  	gsm->t1 = T1;
  	gsm->t2 = T2;
@@@ -2741,8 -2946,6 +2758,11 @@@ static int gsmld_open(struct tty_struc
  
  	gsmld_attach_gsm(tty, gsm);
  
++<<<<<<< HEAD
 +	timer_setup(&gsm->t2_timer, gsm_control_retransmit, 0);
 +
++=======
++>>>>>>> 4bb1a53be85f (tty: n_gsm: initialize more members at gsm_alloc_mux())
  	return 0;
  }
  
* Unmerged path drivers/tty/n_gsm.c
