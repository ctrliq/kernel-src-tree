kernel/resource: remove first_lvl / siblings_only logic

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-511.el8
commit-author David Hildenbrand <david@redhat.com>
commit 97523a4edb7b9dc2be48a24a2387fb1328b29521
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-511.el8/97523a4e.failed

All functions that search for IORESOURCE_SYSTEM_RAM or IORESOURCE_MEM
resources now properly consider the whole resource tree, not just the
first level.  Let's drop the unused first_lvl / siblings_only logic.

Remove documentation that indicates that some functions behave differently,
all consider the full resource tree now.

Link: https://lkml.kernel.org/r/20210325115326.7826-4-david@redhat.com
	Signed-off-by: David Hildenbrand <david@redhat.com>
	Reviewed-by: Dan Williams <dan.j.williams@intel.com>
	Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
	Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
	Cc: Dan Williams <dan.j.williams@intel.com>
	Cc: Daniel Vetter <daniel.vetter@ffwll.ch>
	Cc: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
	Cc: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
	Cc: Dave Young <dyoung@redhat.com>
	Cc: Baoquan He <bhe@redhat.com>
	Cc: Vivek Goyal <vgoyal@redhat.com>
	Cc: Dave Hansen <dave.hansen@linux.intel.com>
	Cc: Keith Busch <keith.busch@intel.com>
	Cc: Michal Hocko <mhocko@suse.com>
	Cc: Qian Cai <cai@lca.pw>
	Cc: Oscar Salvador <osalvador@suse.de>
	Cc: Eric Biederman <ebiederm@xmission.com>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: Ingo Molnar <mingo@redhat.com>
	Cc: Borislav Petkov <bp@alien8.de>
	Cc: "H. Peter Anvin" <hpa@zytor.com>
	Cc: Tom Lendacky <thomas.lendacky@amd.com>
	Cc: Brijesh Singh <brijesh.singh@amd.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 97523a4edb7b9dc2be48a24a2387fb1328b29521)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/resource.c
diff --cc kernel/resource.c
index 79654f430ad6,7e00239a023a..000000000000
--- a/kernel/resource.c
+++ b/kernel/resource.c
@@@ -334,8 -330,10 +327,7 @@@ EXPORT_SYMBOL(release_resource)
   * @end:	end address of same resource
   * @flags:	flags which the resource must have
   * @desc:	descriptor the resource must have
-  * @first_lvl:	walk only the first level children, if set
   * @res:	return ptr, if resource found
 - *
 - * The caller must specify @start, @end, @flags, and @desc
 - * (which may be IORES_DESC_NONE).
   */
  static int find_next_iomem_res(resource_size_t start, resource_size_t end,
  			       unsigned long flags, unsigned long desc,
@@@ -424,6 -415,9 +408,12 @@@ static int __walk_iomem_res_desc(resour
   * @arg: function argument for the callback @func
   * @func: callback function that is called for each qualifying resource area
   *
++<<<<<<< HEAD
++=======
+  * All the memory ranges which overlap start,end and also match flags and
+  * desc are valid candidates.
+  *
++>>>>>>> 97523a4edb7b (kernel/resource: remove first_lvl / siblings_only logic)
   * NOTE: For a new descriptor search, define a new IORES_DESC in
   * <linux/ioport.h> and set it in 'desc' of a target resource entry.
   */
@@@ -459,12 -453,10 +449,12 @@@ int walk_mem_res(u64 start, u64 end, vo
  {
  	unsigned long flags = IORESOURCE_MEM | IORESOURCE_BUSY;
  
- 	return __walk_iomem_res_desc(start, end, flags, IORES_DESC_NONE, false,
- 				     arg, func);
+ 	return __walk_iomem_res_desc(start, end, flags, IORES_DESC_NONE, arg,
+ 				     func);
  }
  
 +#if !defined(CONFIG_ARCH_HAS_WALK_MEMORY)
 +
  /*
   * This function calls the @func callback against all memory ranges of type
   * System RAM which are marked as IORESOURCE_SYSTEM_RAM and IORESOUCE_BUSY.
* Unmerged path kernel/resource.c
