virtio-mem: Big Block Mode (BBM) memory hotplug

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-511.el8
commit-author David Hildenbrand <david@redhat.com>
commit 4ba50cd3355d742c8befbfe38dcbe559f2b0f758
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-511.el8/4ba50cd3.failed

Currently, we do not support device block sizes that exceed the Linux
memory block size. For example, having a device block size of 1 GiB (e.g.,
gigantic pages in the hypervisor) won't work with 128 MiB Linux memory
blocks.

Let's implement Big Block Mode (BBM), whereby we add/remove at least
one Linux memory block at a time. With a 1 GiB device block size, a Big
Block (BB) will cover 8 Linux memory blocks.

We'll keep registering the online_page_callback machinery, it will be used
for safe memory hotunplug in BBM next.

Note: BBM is properly prepared for variable-sized Linux memory
blocks that we might see in the future. So we won't care how many Linux
memory blocks a big block actually spans, and how the memory notifier is
called.

	Cc: "Michael S. Tsirkin" <mst@redhat.com>
	Cc: Jason Wang <jasowang@redhat.com>
	Cc: Pankaj Gupta <pankaj.gupta.linux@gmail.com>
	Cc: Michal Hocko <mhocko@kernel.org>
	Cc: Oscar Salvador <osalvador@suse.de>
	Cc: Wei Yang <richard.weiyang@linux.alibaba.com>
	Cc: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: David Hildenbrand <david@redhat.com>
Link: https://lore.kernel.org/r/20201112133815.13332-26-david@redhat.com
	Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
(cherry picked from commit 4ba50cd3355d742c8befbfe38dcbe559f2b0f758)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/virtio/virtio_mem.c
* Unmerged path drivers/virtio/virtio_mem.c
* Unmerged path drivers/virtio/virtio_mem.c
