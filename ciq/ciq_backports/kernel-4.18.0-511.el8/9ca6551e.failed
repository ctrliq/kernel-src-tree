mm/memory_hotplug: MEMHP_MERGE_RESOURCE to specify merging of System RAM resources

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-511.el8
commit-author David Hildenbrand <david@redhat.com>
commit 9ca6551ee24368a4d2b09566ea4d10fe87860379
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-511.el8/9ca6551e.failed

Some add_memory*() users add memory in small, contiguous memory blocks.
Examples include virtio-mem, hyper-v balloon, and the XEN balloon.

This can quickly result in a lot of memory resources, whereby the actual
resource boundaries are not of interest (e.g., it might be relevant for
DIMMs, exposed via /proc/iomem to user space).  We really want to merge
added resources in this scenario where possible.

Let's provide a flag (MEMHP_MERGE_RESOURCE) to specify that a resource
either created within add_memory*() or passed via add_memory_resource()
shall be marked mergeable and merged with applicable siblings.

To implement that, we need a kernel/resource interface to mark selected
System RAM resources mergeable (IORESOURCE_SYSRAM_MERGEABLE) and trigger
merging.

Note: We really want to merge after the whole operation succeeded, not
directly when adding a resource to the resource tree (it would break
add_memory_resource() and require splitting resources again when the
operation failed - e.g., due to -ENOMEM).

	Signed-off-by: David Hildenbrand <david@redhat.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Reviewed-by: Pankaj Gupta <pankaj.gupta.linux@gmail.com>
	Cc: Michal Hocko <mhocko@suse.com>
	Cc: Dan Williams <dan.j.williams@intel.com>
	Cc: Jason Gunthorpe <jgg@ziepe.ca>
	Cc: Kees Cook <keescook@chromium.org>
	Cc: Ard Biesheuvel <ardb@kernel.org>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: "K. Y. Srinivasan" <kys@microsoft.com>
	Cc: Haiyang Zhang <haiyangz@microsoft.com>
	Cc: Stephen Hemminger <sthemmin@microsoft.com>
	Cc: Wei Liu <wei.liu@kernel.org>
	Cc: Boris Ostrovsky <boris.ostrovsky@oracle.com>
	Cc: Juergen Gross <jgross@suse.com>
	Cc: Stefano Stabellini <sstabellini@kernel.org>
	Cc: Roger Pau Monn√© <roger.pau@citrix.com>
	Cc: Julien Grall <julien@xen.org>
	Cc: Baoquan He <bhe@redhat.com>
	Cc: Wei Yang <richardw.yang@linux.intel.com>
	Cc: Anton Blanchard <anton@ozlabs.org>
	Cc: Benjamin Herrenschmidt <benh@kernel.crashing.org>
	Cc: Christian Borntraeger <borntraeger@de.ibm.com>
	Cc: Dave Jiang <dave.jiang@intel.com>
	Cc: Eric Biederman <ebiederm@xmission.com>
	Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
	Cc: Heiko Carstens <hca@linux.ibm.com>
	Cc: Jason Wang <jasowang@redhat.com>
	Cc: Len Brown <lenb@kernel.org>
	Cc: Leonardo Bras <leobras.c@gmail.com>
	Cc: Libor Pechacek <lpechacek@suse.cz>
	Cc: Michael Ellerman <mpe@ellerman.id.au>
	Cc: "Michael S. Tsirkin" <mst@redhat.com>
	Cc: Nathan Lynch <nathanl@linux.ibm.com>
	Cc: "Oliver O'Halloran" <oohall@gmail.com>
	Cc: Paul Mackerras <paulus@samba.org>
	Cc: Pingfan Liu <kernelfans@gmail.com>
	Cc: "Rafael J. Wysocki" <rjw@rjwysocki.net>
	Cc: Vasily Gorbik <gor@linux.ibm.com>
	Cc: Vishal Verma <vishal.l.verma@intel.com>
Link: https://lkml.kernel.org/r/20200911103459.10306-6-david@redhat.com
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 9ca6551ee24368a4d2b09566ea4d10fe87860379)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/memory_hotplug.h
diff --cc include/linux/memory_hotplug.h
index 9f9deec9dd0c,d65c6fdc5cfc..000000000000
--- a/include/linux/memory_hotplug.h
+++ b/include/linux/memory_hotplug.h
@@@ -103,6 -57,19 +103,22 @@@ enum 
  	MMOP_ONLINE_MOVABLE,
  };
  
++<<<<<<< HEAD
++=======
+ /* Flags for add_memory() and friends to specify memory hotplug details. */
+ typedef int __bitwise mhp_t;
+ 
+ /* No special request */
+ #define MHP_NONE		((__force mhp_t)0)
+ /*
+  * Allow merging of the added System RAM resource with adjacent,
+  * mergeable resources. After a successful call to add_memory_resource()
+  * with this flag set, the resource pointer must no longer be used as it
+  * might be stale, or the resource might have changed.
+  */
+ #define MEMHP_MERGE_RESOURCE	((__force mhp_t)BIT(0))
+ 
++>>>>>>> 9ca6551ee243 (mm/memory_hotplug: MEMHP_MERGE_RESOURCE to specify merging of System RAM resources)
  /*
   * Extended parameters for memory hotplug:
   * altmap: alternative allocator for memmap array (optional)
diff --git a/include/linux/ioport.h b/include/linux/ioport.h
index 9b2403d8bd75..7a819e56fd4b 100644
--- a/include/linux/ioport.h
+++ b/include/linux/ioport.h
@@ -67,6 +67,7 @@ struct resource {
 
 /* IORESOURCE_SYSRAM specific bits. */
 #define IORESOURCE_SYSRAM_DRIVER_MANAGED	0x02000000 /* Always detected via a driver. */
+#define IORESOURCE_SYSRAM_MERGEABLE		0x04000000 /* Resource can be merged. */
 
 #define IORESOURCE_EXCLUSIVE	0x08000000	/* Userland may not map this resource */
 
@@ -288,6 +289,9 @@ extern void __release_region(struct resource *, resource_size_t,
 extern int release_mem_region_adjustable(struct resource *, resource_size_t,
 				resource_size_t);
 #endif
+#ifdef CONFIG_MEMORY_HOTPLUG
+extern void merge_system_ram_resource(struct resource *res);
+#endif
 
 /* Wrappers for managed devices */
 struct device;
* Unmerged path include/linux/memory_hotplug.h
diff --git a/kernel/resource.c b/kernel/resource.c
index d222bbe8901b..0dda03c46675 100644
--- a/kernel/resource.c
+++ b/kernel/resource.c
@@ -1321,6 +1321,66 @@ int release_mem_region_adjustable(struct resource *parent,
 }
 #endif	/* CONFIG_MEMORY_HOTREMOVE */
 
+#ifdef CONFIG_MEMORY_HOTPLUG
+static bool system_ram_resources_mergeable(struct resource *r1,
+					   struct resource *r2)
+{
+	/* We assume either r1 or r2 is IORESOURCE_SYSRAM_MERGEABLE. */
+	return r1->flags == r2->flags && r1->end + 1 == r2->start &&
+	       r1->name == r2->name && r1->desc == r2->desc &&
+	       !r1->child && !r2->child;
+}
+
+/*
+ * merge_system_ram_resource - mark the System RAM resource mergeable and try to
+ * merge it with adjacent, mergeable resources
+ * @res: resource descriptor
+ *
+ * This interface is intended for memory hotplug, whereby lots of contiguous
+ * system ram resources are added (e.g., via add_memory*()) by a driver, and
+ * the actual resource boundaries are not of interest (e.g., it might be
+ * relevant for DIMMs). Only resources that are marked mergeable, that have the
+ * same parent, and that don't have any children are considered. All mergeable
+ * resources must be immutable during the request.
+ *
+ * Note:
+ * - The caller has to make sure that no pointers to resources that are
+ *   marked mergeable are used anymore after this call - the resource might
+ *   be freed and the pointer might be stale!
+ * - release_mem_region_adjustable() will split on demand on memory hotunplug
+ */
+void merge_system_ram_resource(struct resource *res)
+{
+	const unsigned long flags = IORESOURCE_SYSTEM_RAM | IORESOURCE_BUSY;
+	struct resource *cur;
+
+	if (WARN_ON_ONCE((res->flags & flags) != flags))
+		return;
+
+	write_lock(&resource_lock);
+	res->flags |= IORESOURCE_SYSRAM_MERGEABLE;
+
+	/* Try to merge with next item in the list. */
+	cur = res->sibling;
+	if (cur && system_ram_resources_mergeable(res, cur)) {
+		res->end = cur->end;
+		res->sibling = cur->sibling;
+		free_resource(cur);
+	}
+
+	/* Try to merge with previous item in the list. */
+	cur = res->parent->child;
+	while (cur && cur->sibling != res)
+		cur = cur->sibling;
+	if (cur && system_ram_resources_mergeable(cur, res)) {
+		cur->end = res->end;
+		cur->sibling = res->sibling;
+		free_resource(res);
+	}
+	write_unlock(&resource_lock);
+}
+#endif	/* CONFIG_MEMORY_HOTPLUG */
+
 /*
  * Managed region resource
  */
diff --git a/mm/memory_hotplug.c b/mm/memory_hotplug.c
index 80f0508943e1..9019d4ba9308 100644
--- a/mm/memory_hotplug.c
+++ b/mm/memory_hotplug.c
@@ -1093,6 +1093,13 @@ int __ref add_memory_resource(int nid, struct resource *res)
 	/* device_online() will take the lock when calling online_pages() */
 	mem_hotplug_done();
 
+	/*
+	 * In case we're allowed to merge the resource, flag it and trigger
+	 * merging now that adding succeeded.
+	 */
+	if (mhp_flags & MEMHP_MERGE_RESOURCE)
+		merge_system_ram_resource(res);
+
 	/* online pages if requested */
 	if (memhp_default_online_type != MMOP_OFFLINE)
 		walk_memory_blocks(start, size, NULL, online_memory_block);
