kernel/resource: make iomem_resource implicit in release_mem_region_adjustable()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-511.el8
commit-author David Hildenbrand <david@redhat.com>
commit cb8e3c8b4f45e4ed8987a581956dc9c3827a5bcf
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-511.el8/cb8e3c8b.failed

"mem" in the name already indicates the root, similar to
release_mem_region() and devm_request_mem_region().  Make it implicit.
The only single caller always passes iomem_resource, other parents are not
applicable.

	Suggested-by: Wei Yang <richard.weiyang@linux.alibaba.com>
	Signed-off-by: David Hildenbrand <david@redhat.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Reviewed-by: Wei Yang <richard.weiyang@linux.alibaba.com>
	Cc: Michal Hocko <mhocko@suse.com>
	Cc: Dan Williams <dan.j.williams@intel.com>
	Cc: Jason Gunthorpe <jgg@ziepe.ca>
	Cc: Kees Cook <keescook@chromium.org>
	Cc: Ard Biesheuvel <ardb@kernel.org>
	Cc: Pankaj Gupta <pankaj.gupta.linux@gmail.com>
	Cc: Baoquan He <bhe@redhat.com>
Link: https://lkml.kernel.org/r/20200916073041.10355-1-david@redhat.com
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit cb8e3c8b4f45e4ed8987a581956dc9c3827a5bcf)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/ioport.h
#	kernel/resource.c
#	mm/memory_hotplug.c
diff --cc include/linux/ioport.h
index 9b2403d8bd75,5135d4b86cd6..000000000000
--- a/include/linux/ioport.h
+++ b/include/linux/ioport.h
@@@ -285,8 -251,10 +285,15 @@@ extern struct resource * __request_regi
  extern void __release_region(struct resource *, resource_size_t,
  				resource_size_t);
  #ifdef CONFIG_MEMORY_HOTREMOVE
++<<<<<<< HEAD
 +extern int release_mem_region_adjustable(struct resource *, resource_size_t,
 +				resource_size_t);
++=======
+ extern void release_mem_region_adjustable(resource_size_t, resource_size_t);
+ #endif
+ #ifdef CONFIG_MEMORY_HOTPLUG
+ extern void merge_system_ram_resource(struct resource *res);
++>>>>>>> cb8e3c8b4f45 (kernel/resource: make iomem_resource implicit in release_mem_region_adjustable())
  #endif
  
  /* Wrappers for managed devices */
diff --cc kernel/resource.c
index d222bbe8901b,3ae2f56cc79d..000000000000
--- a/kernel/resource.c
+++ b/kernel/resource.c
@@@ -1238,21 -1257,28 +1237,29 @@@ EXPORT_SYMBOL(__release_region)
   *   assumes that all children remain in the lower address entry for
   *   simplicity.  Enhance this logic when necessary.
   */
++<<<<<<< HEAD
 +int release_mem_region_adjustable(struct resource *parent,
 +				  resource_size_t start, resource_size_t size)
 +{
++=======
+ void release_mem_region_adjustable(resource_size_t start, resource_size_t size)
+ {
+ 	struct resource *parent = &iomem_resource;
+ 	struct resource *new_res = NULL;
+ 	bool alloc_nofail = false;
++>>>>>>> cb8e3c8b4f45 (kernel/resource: make iomem_resource implicit in release_mem_region_adjustable())
  	struct resource **p;
  	struct resource *res;
 +	struct resource *new_res;
  	resource_size_t end;
 +	int ret = -EINVAL;
  
  	end = start + size - 1;
 -	if (WARN_ON_ONCE((start < parent->start) || (end > parent->end)))
 -		return;
 +	if ((start < parent->start) || (end > parent->end))
 +		return ret;
  
 -	/*
 -	 * We free up quite a lot of memory on memory hotunplug (esp., memap),
 -	 * just before releasing the region. This is highly unlikely to
 -	 * fail - let's play save and make it never fail as the caller cannot
 -	 * perform any error handling (e.g., trying to re-add memory will fail
 -	 * similarly).
 -	 */
 -retry:
 -	new_res = alloc_resource(GFP_KERNEL | (alloc_nofail ? __GFP_NOFAIL : 0));
 +	/* The alloc_resource() result gets checked later */
 +	new_res = alloc_resource(GFP_KERNEL);
  
  	p = &parent->child;
  	write_lock(&resource_lock);
diff --cc mm/memory_hotplug.c
index 80f0508943e1,1efc92f66b9d..000000000000
--- a/mm/memory_hotplug.c
+++ b/mm/memory_hotplug.c
@@@ -1767,7 -1767,7 +1767,11 @@@ static int __ref try_remove_memory(int 
  		memblock_remove(start, size);
  	}
  
++<<<<<<< HEAD
 +	__release_memory_resource(start, size);
++=======
+ 	release_mem_region_adjustable(start, size);
++>>>>>>> cb8e3c8b4f45 (kernel/resource: make iomem_resource implicit in release_mem_region_adjustable())
  
  	try_offline_node(nid);
  
* Unmerged path include/linux/ioport.h
* Unmerged path kernel/resource.c
* Unmerged path mm/memory_hotplug.c
