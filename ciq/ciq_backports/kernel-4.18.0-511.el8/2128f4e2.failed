virtio-mem: disallow mapping virtio-mem memory via /dev/mem

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-511.el8
commit-author David Hildenbrand <david@redhat.com>
commit 2128f4e21aa283945e6f0fb183e70fdfdc0d66f0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-511.el8/2128f4e2.failed

We don't want user space to be able to map virtio-mem device memory
directly (e.g., via /dev/mem) in order to have guarantees that in a sane
setup we'll never accidentially access unplugged memory within the
device-managed region of a virtio-mem device, just as required by the
virtio-spec.

As soon as the virtio-mem driver is loaded, the device region is visible
in /proc/iomem via the parent device region.  From that point on user
space is aware of the device region and we want to disallow mapping
anything inside that region (where we will dynamically (un)plug memory)
until the driver has been unloaded cleanly and e.g., another driver might
take over.

By creating our parent IORESOURCE_SYSTEM_RAM resource with
IORESOURCE_EXCLUSIVE, we will disallow any /dev/mem access to our device
region until the driver was unloaded cleanly and removed the parent
region.  This will work even though only some memory blocks are actually
currently added to Linux and appear as busy in the resource tree.

So access to the region from user space is only possible
a) if we don't load the virtio-mem driver.
b) after unloading the virtio-mem driver cleanly.

Don't build virtio-mem if access to /dev/mem cannot be restricticted -- if
we have CONFIG_DEVMEM=y but CONFIG_STRICT_DEVMEM is not set.

Link: https://lkml.kernel.org/r/20210920142856.17758-4-david@redhat.com
	Signed-off-by: David Hildenbrand <david@redhat.com>
	Reviewed-by: Dan Williams <dan.j.williams@intel.com>
	Acked-by: Michael S. Tsirkin <mst@redhat.com>
	Cc: Andy Shevchenko <andy.shevchenko@gmail.com>
	Cc: Arnd Bergmann <arnd@arndb.de>
	Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
	Cc: Hanjun Guo <guohanjun@huawei.com>
	Cc: Jason Wang <jasowang@redhat.com>
	Cc: "Rafael J. Wysocki" <rafael.j.wysocki@intel.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 2128f4e21aa283945e6f0fb183e70fdfdc0d66f0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/virtio/Kconfig
#	drivers/virtio/virtio_mem.c
diff --cc drivers/virtio/Kconfig
index 28a2794652bc,44a082639439..000000000000
--- a/drivers/virtio/Kconfig
+++ b/drivers/virtio/Kconfig
@@@ -75,6 -93,24 +75,27 @@@ config VIRTIO_BALLOO
  
  	 If unsure, say M.
  
++<<<<<<< HEAD
++=======
+ config VIRTIO_MEM
+ 	tristate "Virtio mem driver"
+ 	default m
+ 	depends on X86_64
+ 	depends on VIRTIO
+ 	depends on MEMORY_HOTPLUG
+ 	depends on MEMORY_HOTREMOVE
+ 	depends on CONTIG_ALLOC
+ 	depends on EXCLUSIVE_SYSTEM_RAM
+ 	help
+ 	 This driver provides access to virtio-mem paravirtualized memory
+ 	 devices, allowing to hotplug and hotunplug memory.
+ 
+ 	 This driver was only tested under x86-64, but should theoretically
+ 	 work on all architectures that support memory hotplug and hotremove.
+ 
+ 	 If unsure, say M.
+ 
++>>>>>>> 2128f4e21aa2 (virtio-mem: disallow mapping virtio-mem memory via /dev/mem)
  config VIRTIO_INPUT
  	tristate "Virtio input driver"
  	depends on VIRTIO
* Unmerged path drivers/virtio/virtio_mem.c
* Unmerged path drivers/virtio/Kconfig
* Unmerged path drivers/virtio/virtio_mem.c
